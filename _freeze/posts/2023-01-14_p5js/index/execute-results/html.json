{
  "hash": "de49869ee3c5b050a9dd0cd28110318c",
  "result": {
    "markdown": "---\ntitle: \"Playing with p5\"\nauthor:\n  - name: Danielle Navarro\n    url: https://djnavarro.net\n    affiliation: I'm on smoko\n    affiliation-url: https://www.youtube.com/watch?v=j58V2vC9EPc\n    orcid: 0000-0001-7648-6578\ndescription: \"Because I can\"\ndate: \"2023-01-14\"\ncategories: [Art, P5, Observable, Javascript]\nimage: linear.jpg\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n\n## Enabling p5js\n\nThe p5 library doesn't come bundled with observable, so we'll need to import it. As noted in the [quarto documentation on observable integration](https://quarto.org/docs/interactive/ojs/libraries.html#modules) this is as simple as using `require()` to import [NPM modules](https://docs.npmjs.com/about-packages-and-modules) using the [jsDelivr CDN](https://www.jsdelivr.com/):\n\n\n```{ojs}\nP5 = require(\"p5\")\n```\n\n\nNow we'll use a trick I learned from [this fabulous notebook by Tom MacWright](https://observablehq.com/@tmcw/p5). We'll define  `p5()` as a [generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*):\n\n\n```{ojs}\nfunction* p5_sketch(sketch) {\n  const element = DOM.element('div');\n  yield element;\n  const instance = new P5(sketch, element, true);\n  try {\n    while (true) {\n      yield element;\n    }\n  } finally {\n    instance.remove();\n  }\n}\n```\n\n\n\n## Example 1\n\nAdaptation of this example: [observablehq.com/@tmcw/p5](https://observablehq.com/@tmcw/p5)\n\n\n::: {.cell}\n\n```{.css .cell-code}\n@import url(https://fonts.googleapis.com/css?family=Courgette);\n```\n\n\n<style type=\"text/css\">\n@import url(https://fonts.googleapis.com/css?family=Courgette);\n</style>\n:::\n\n```{ojs}\n//| column: page\np5_sketch(s => {\n  \n    s.setup = function() {\n      s.createCanvas(1300, 300);\n      s.textFont('Courgette');\n      s.textStyle(s.BOLD);\n      s.textAlign(s.CENTER, s.CENTER)\n    };\n    \n    s.draw = function() {\n      s.translate(\n        s.millis() * (-0.1) % (s.width + 800), \n        s.height / 2\n      );\n      s.background('#222222');\n      s.fill('#DC3F74').textSize(100);\n      s.text('Hello Cruel World', s.width + 400, 0);\n    };\n    \n  }\n)\n```\n\n\n\n\n## Example 2\n\nExample adapted from the generative art course by Bernat Ferragut: [ga-course.surge.sh](https://ga-course.surge.sh/)\n\n\n\n```{ojs}\n//| column: page\np5_sketch(s => {\n\n  let n = 100;\n  let dot;\n  let dotList = [];\n  let palette = [\n    s.color(\"#6B1B00\"),\n    s.color(\"#AE8B70\"),\n    s.color(\"#F9FEFB\"),\n    s.color(\"#56382D\") \n  ];\n\n  s.setup = function() {\n    s.createCanvas(1300, 480);\n    for(let i = 0; i < n; i++) {\n      dotList.push(dot = new Dot(\n        s,\n        s.random(s.width),\n        s.random(s.height),\n        s.random(palette),\n        s.random(1, 5)\n      ));\n    }\n  };\n    \n  s.draw = function() {\n    dotList.map(dot => {\n      dot.on();\n      dot.move();\n    });\n  };\n})\n\n```\n\n\nwhere\n\n\n```{ojs}\nclass Dot {\n  constructor(sketch, x, y, colour, size) {\n    this.s = sketch;\n    this.x = x | 0;\n    this.y = y | 0;\n    this.colour = colour;\n    this.size = size;\n    this.velX = this.s.random(-2, 2);\n    this.velY = this.s.random(-2, 2);\n  }\n\n  on() {\n    this.s.noStroke();\n    this.s.fill(this.colour);\n    this.s.circle(this.x, this.y, this.size);\n  }\n\n  move() {\n    this.x += this.velX;\n    this.y += this.velY;\n    if (this.x < 0 || this.x > this.s.width) {\n      this.velX = -this.velX;\n    }\n    if (this.y < 0 || this.y > this.s.height) {\n      this.velY = -this.velY;\n    }\n  }\n}\n```\n\n\n\n## Example 3\n\n\n\n```{ojs}\np5_sketch(s => {\n\n  s.setup = function() {\n    s.createCanvas(740, 740, s.WEBGL);\n    s.noStroke();\n  }\n\n  s.draw = function() {\n\n    s.background(0);\n\n    let locX = s.mouseX - s.height / 2;\n    let locY = s.mouseY - s.width / 2;  \n    \n    s.ambientLight(60, 60, 60);\n    s.pointLight(190, 80, 190, locX, locY, 100);\n    s.pointLight(80, 80, 190, 0, 0, 100);\n  \n    s.specularMaterial(255);\n    s.rotateX(s.frameCount * 0.01);\n    s.rotateY(s.frameCount * 0.01);\n    s.torus(150, 80, 64, 64);\n  }\n\n})\n```\n\n\n<!--------------- appendices go here ----------------->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}