{
  "hash": "9a122b48caffea0d03a3654082523d61",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Working with data in Julia\ndescription: 'Part two of a three-part series on Julia, in which the author teaches herself the basics of wrangling rectangular data in Julia'\ndate: '2024-03-02'\ncategories:\n  - Julia\n  - Data Wrangling\n---\n\n\n<!--------------- post begins here ----------------->\n\n\nThis is the second of an impromptu three-part series in which, in a decision I am rapidly starting to regret as these posts get longer and longer, I decided it was time to teach myself how to use Julia. In the [first part](/posts/2024-03-01_julia-foundation/) of the series I looked at some foundational concepts (types, functions, pipes, etc), though in a completely idiosyncratic way and ignoring concepts that I find boring (loops, conditionals). I mean, this is a blog where I write \"notes to self\". It's not a textbook.\n\nAnyway... my thought for the second part of the series is to shift away from core programming concepts and instead look at a practical task that data analysts have to work with on a daily basis: wrangling rectangular data sets. In other words, I'm going to talk about data frames and tools for manipulating them. \n\n::: {.column-margin}\n\n![[Mass Effect 1](https://www.deviantart.com/lagota/art/Mass-Effect-1-Final-Poster-295106207). By user [lagota](https://www.deviantart.com/lagota) on Deviant Art, released under a CC-BY-NC-ND licence. The astute observer will notice that at no point in this post does the main text reference the *Mass Effect* games. But I don't care, because they are awesome.](mass-effect-1.jpg){fig-alt=\"Reimagined Mass Effect 1 cover showing the Normandy departing the Citadel\"}\n\n:::\n\n## Creating data frames\n\nUnlike R, Julia doesn't come with a native class to represent data frames. Instead, there is the [DataFrames](https://dataframes.juliadata.org/stable/) package which provides the functionality needed to represent tabular data. The `DataFrame()` function allows you to manually construct a data frame, with a syntax that feels very familiar to an R user. Vectors passed as inputs to `DataFrame()` must all have one element for every row in the data frame, or else be length one. \n\nContinuing the vague science fiction theme that started in the previous post, I'll start by constructing a small data frame listing the novels from William Gibson's *Sprawl* trilogy, which I enjoyed considerably more than Asimov's *Foundation* series that (very very loosely) inspired the TV show of the same name. Anyway, here's how you do that:\n\n::: {#12a4f271 .cell execution_count=2}\n``` {.julia .cell-code}\nusing DataFrames\n\nsprawl = DataFrame(\n  title = [\"Neuromancer\", \"Count Zero\", \"Mona Lisa Overdrive\"],\n  published = [1984, 1986, 1988], \n  author = \"William Gibson\"\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div><div style = \"float: left;\"><span>3×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">title</th><th style = \"text-align: left;\">published</th><th style = \"text-align: left;\">author</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String\" style = \"text-align: left;\">String</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Neuromancer</td><td style = \"text-align: right;\">1984</td><td style = \"text-align: left;\">William Gibson</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Count Zero</td><td style = \"text-align: right;\">1986</td><td style = \"text-align: left;\">William Gibson</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Mona Lisa Overdrive</td><td style = \"text-align: right;\">1988</td><td style = \"text-align: left;\">William Gibson</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nData frames have pretty print methods so the output looks quite nice here. But internally it's essentially a collection of vectors, one for each column. For example, `sprawl.title` is a vector of three strings:\n\n::: {#f016a684 .cell execution_count=3}\n``` {.julia .cell-code}\nsprawl.title\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n3-element Vector{String}:\n \"Neuromancer\"\n \"Count Zero\"\n \"Mona Lisa Overdrive\"\n```\n:::\n:::\n\n\nIn real life though, you don't usually construct a data frame manually. It's more typical to import a data frame from a CSV file or similar. To that end, we can take advantage of the CSV package to read data from a data file:\n\n::: {#42b07aab .cell execution_count=4}\n``` {.julia .cell-code}\nusing CSV\nstarwars_csv = CSV.File(\"starwars.csv\"; missingstring = \"NA\");\n```\n:::\n\n\nThis `starwars_csv` object isn't a data frame yet, it's an object of type CSV.file. Data frames are *columnar* data structures (i.e., a collection of vectors, one per column), whereas a CSV.file is a *rowwise* data structure (i.e., a collection of CSV.row objects, one per row). You could test this for yourself by taking a look at the first element `starwars_csv[1]` to verify that it's a representation of a single CSV row, but the output isn't very interesting so I'm going to move on.\n\nTo convert this CSV.file object to a DataFrame object, we can simply pass it to `DataFrame()`, and this time around the data we end up with is a little bit richer than the last one (even if the *Star Wars* movies are incredibly boring compared to the infinitely superior *Sprawl* novels...)\n\n::: {#050967a1 .cell .column-page execution_count=5}\n``` {.julia .cell-code}\nstarwars = DataFrame(starwars_csv)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div><div style = \"float: left;\"><span>87×11 DataFrame</span></div><div style = \"float: right;\"><span style = \"font-style: italic;\">62 rows omitted</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">name</th><th style = \"text-align: left;\">height</th><th style = \"text-align: left;\">mass</th><th style = \"text-align: left;\">hair_color</th><th style = \"text-align: left;\">skin_color</th><th style = \"text-align: left;\">eye_color</th><th style = \"text-align: left;\">birth_year</th><th style = \"text-align: left;\">sex</th><th style = \"text-align: left;\">gender</th><th style = \"text-align: left;\">homeworld</th><th style = \"text-align: left;\">species</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, Int64}\" style = \"text-align: left;\">Int64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"String31\" style = \"text-align: left;\">String31</th><th title = \"String15\" style = \"text-align: left;\">String15</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Luke Skywalker</td><td style = \"text-align: right;\">172</td><td style = \"text-align: right;\">77.0</td><td style = \"text-align: left;\">blond</td><td style = \"text-align: left;\">fair</td><td style = \"text-align: left;\">blue</td><td style = \"text-align: right;\">19.0</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C-3PO</td><td style = \"text-align: right;\">167</td><td style = \"text-align: right;\">75.0</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">gold</td><td style = \"text-align: left;\">yellow</td><td style = \"text-align: right;\">112.0</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td><td style = \"text-align: left;\">Droid</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">R2-D2</td><td style = \"text-align: right;\">96</td><td style = \"text-align: right;\">32.0</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">white, blue</td><td style = \"text-align: left;\">red</td><td style = \"text-align: right;\">33.0</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Naboo</td><td style = \"text-align: left;\">Droid</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Darth Vader</td><td style = \"text-align: right;\">202</td><td style = \"text-align: right;\">136.0</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">white</td><td style = \"text-align: left;\">yellow</td><td style = \"text-align: right;\">41.9</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Leia Organa</td><td style = \"text-align: right;\">150</td><td style = \"text-align: right;\">49.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: right;\">19.0</td><td style = \"text-align: left;\">female</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">Alderaan</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Owen Lars</td><td style = \"text-align: right;\">178</td><td style = \"text-align: right;\">120.0</td><td style = \"text-align: left;\">brown, grey</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">blue</td><td style = \"text-align: right;\">52.0</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">Beru Whitesun Lars</td><td style = \"text-align: right;\">165</td><td style = \"text-align: right;\">75.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">blue</td><td style = \"text-align: right;\">47.0</td><td style = \"text-align: left;\">female</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">Tatooine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">R5-D4</td><td style = \"text-align: right;\">97</td><td style = \"text-align: right;\">32.0</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">white, red</td><td style = \"text-align: left;\">red</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td><td style = \"text-align: left;\">Droid</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">Biggs Darklighter</td><td style = \"text-align: right;\">183</td><td style = \"text-align: right;\">84.0</td><td style = \"text-align: left;\">black</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: right;\">24.0</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Obi-Wan Kenobi</td><td style = \"text-align: right;\">182</td><td style = \"text-align: right;\">77.0</td><td style = \"text-align: left;\">auburn, white</td><td style = \"text-align: left;\">fair</td><td style = \"text-align: left;\">blue-gray</td><td style = \"text-align: right;\">57.0</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Stewjon</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">Anakin Skywalker</td><td style = \"text-align: right;\">188</td><td style = \"text-align: right;\">84.0</td><td style = \"text-align: left;\">blond</td><td style = \"text-align: left;\">fair</td><td style = \"text-align: left;\">blue</td><td style = \"text-align: right;\">41.9</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">Wilhuff Tarkin</td><td style = \"text-align: right;\">180</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">auburn, grey</td><td style = \"text-align: left;\">fair</td><td style = \"text-align: left;\">blue</td><td style = \"text-align: right;\">64.0</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Eriadu</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">13</td><td style = \"text-align: left;\">Chewbacca</td><td style = \"text-align: right;\">228</td><td style = \"text-align: right;\">112.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">unknown</td><td style = \"text-align: left;\">blue</td><td style = \"text-align: right;\">200.0</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Kashyyyk</td><td style = \"text-align: left;\">Wookiee</td></tr><tr><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td><td style = \"text-align: right;\">&vellip;</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">76</td><td style = \"text-align: left;\">San Hill</td><td style = \"text-align: right;\">191</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">grey</td><td style = \"text-align: left;\">gold</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Muunilinst</td><td style = \"text-align: left;\">Muun</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">77</td><td style = \"text-align: left;\">Shaak Ti</td><td style = \"text-align: right;\">178</td><td style = \"text-align: right;\">57.0</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">red, blue, white</td><td style = \"text-align: left;\">black</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">female</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">Shili</td><td style = \"text-align: left;\">Togruta</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">78</td><td style = \"text-align: left;\">Grievous</td><td style = \"text-align: right;\">216</td><td style = \"text-align: right;\">159.0</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">brown, white</td><td style = \"text-align: left;\">green, yellow</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Kalee</td><td style = \"text-align: left;\">Kaleesh</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">79</td><td style = \"text-align: left;\">Tarfful</td><td style = \"text-align: right;\">234</td><td style = \"text-align: right;\">136.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">blue</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Kashyyyk</td><td style = \"text-align: left;\">Wookiee</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">80</td><td style = \"text-align: left;\">Raymus Antilles</td><td style = \"text-align: right;\">188</td><td style = \"text-align: right;\">79.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">brown</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Alderaan</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">81</td><td style = \"text-align: left;\">Sly Moore</td><td style = \"text-align: right;\">178</td><td style = \"text-align: right;\">48.0</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">pale</td><td style = \"text-align: left;\">white</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">Umbara</td><td style = \"font-style: italic; text-align: left;\">missing</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">82</td><td style = \"text-align: left;\">Tion Medon</td><td style = \"text-align: right;\">206</td><td style = \"text-align: right;\">80.0</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">grey</td><td style = \"text-align: left;\">black</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Utapau</td><td style = \"text-align: left;\">Pau&apos;an</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">83</td><td style = \"text-align: left;\">Finn</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">black</td><td style = \"text-align: left;\">dark</td><td style = \"text-align: left;\">dark</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">84</td><td style = \"text-align: left;\">Rey</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">hazel</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">female</td><td style = \"text-align: left;\">feminine</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">85</td><td style = \"text-align: left;\">Poe Dameron</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">brown</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">86</td><td style = \"text-align: left;\">BB8</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">black</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">masculine</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">Droid</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">87</td><td style = \"text-align: left;\">Captain Phasma</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">unknown</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">female</td><td style = \"text-align: left;\">feminine</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">Human</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Subsetting data frames I\n\nThe core tools for working with data frames in Julia feel quite familiar coming from either Matlab or R. You can subset a data frame by passing it numeric indices, for instance:\n\n::: {#0e1cebcd .cell execution_count=6}\n``` {.julia .cell-code}\nstarwars[1:6, 1:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div><div style = \"float: left;\"><span>6×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">name</th><th style = \"text-align: left;\">height</th><th style = \"text-align: left;\">mass</th><th style = \"text-align: left;\">hair_color</th><th style = \"text-align: left;\">skin_color</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, Int64}\" style = \"text-align: left;\">Int64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"String31\" style = \"text-align: left;\">String31</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Luke Skywalker</td><td style = \"text-align: right;\">172</td><td style = \"text-align: right;\">77.0</td><td style = \"text-align: left;\">blond</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C-3PO</td><td style = \"text-align: right;\">167</td><td style = \"text-align: right;\">75.0</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">gold</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">R2-D2</td><td style = \"text-align: right;\">96</td><td style = \"text-align: right;\">32.0</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">white, blue</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Darth Vader</td><td style = \"text-align: right;\">202</td><td style = \"text-align: right;\">136.0</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">white</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Leia Organa</td><td style = \"text-align: right;\">150</td><td style = \"text-align: right;\">49.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">light</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Owen Lars</td><td style = \"text-align: right;\">178</td><td style = \"text-align: right;\">120.0</td><td style = \"text-align: left;\">brown, grey</td><td style = \"text-align: left;\">light</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nHowever, there are other methods for subsetting a data frame. You can also filter the rows of a data frame using logical expressions. Again, this is quite similar to how it works in base R. For instance, I can construct a boolean vector `fair_skinned` which indicates whether the corresponding row in `starwars` refers to a person with fair skin:^[As an aside, notice that I've used `.==` rather than `==` as the equality test. This is because `==` is a scalar operator: it doesn't work for vectors unless you broadcast it using `.`]\n\n::: {#60b0cffb .cell execution_count=7}\n``` {.julia .cell-code}\nfair_skinned = starwars.skin_color .== \"fair\";\n```\n:::\n\n\nNow that I have these indices, I can create a subset of the data frame containing only those rows referring to fair skinned person (or robot, or...)\n\n::: {#54b123e7 .cell execution_count=8}\n``` {.julia .cell-code}\nstarwars[fair_skinned, 1:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div><div style = \"float: left;\"><span>17×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">name</th><th style = \"text-align: left;\">height</th><th style = \"text-align: left;\">mass</th><th style = \"text-align: left;\">hair_color</th><th style = \"text-align: left;\">skin_color</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, Int64}\" style = \"text-align: left;\">Int64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"String31\" style = \"text-align: left;\">String31</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Luke Skywalker</td><td style = \"text-align: right;\">172</td><td style = \"text-align: right;\">77.0</td><td style = \"text-align: left;\">blond</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Obi-Wan Kenobi</td><td style = \"text-align: right;\">182</td><td style = \"text-align: right;\">77.0</td><td style = \"text-align: left;\">auburn, white</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Anakin Skywalker</td><td style = \"text-align: right;\">188</td><td style = \"text-align: right;\">84.0</td><td style = \"text-align: left;\">blond</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Wilhuff Tarkin</td><td style = \"text-align: right;\">180</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">auburn, grey</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Han Solo</td><td style = \"text-align: right;\">180</td><td style = \"text-align: right;\">80.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Wedge Antilles</td><td style = \"text-align: right;\">170</td><td style = \"text-align: right;\">77.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: left;\">Jek Tono Porkins</td><td style = \"text-align: right;\">180</td><td style = \"text-align: right;\">110.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: left;\">Boba Fett</td><td style = \"text-align: right;\">183</td><td style = \"text-align: right;\">78.2</td><td style = \"text-align: left;\">black</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: left;\">Mon Mothma</td><td style = \"text-align: right;\">150</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">auburn</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: left;\">Arvel Crynyd</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">11</td><td style = \"text-align: left;\">Qui-Gon Jinn</td><td style = \"text-align: right;\">193</td><td style = \"text-align: right;\">89.0</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">12</td><td style = \"text-align: left;\">Finis Valorum</td><td style = \"text-align: right;\">170</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">blond</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">13</td><td style = \"text-align: left;\">Ric Olié</td><td style = \"text-align: right;\">183</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">14</td><td style = \"text-align: left;\">Shmi Skywalker</td><td style = \"text-align: right;\">163</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">black</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">15</td><td style = \"text-align: left;\">Cliegg Lars</td><td style = \"text-align: right;\">183</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">16</td><td style = \"text-align: left;\">Dooku</td><td style = \"text-align: right;\">193</td><td style = \"text-align: right;\">80.0</td><td style = \"text-align: left;\">white</td><td style = \"text-align: left;\">fair</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">17</td><td style = \"text-align: left;\">Jocasta Nu</td><td style = \"text-align: right;\">167</td><td style = \"font-style: italic; text-align: right;\">missing</td><td style = \"text-align: left;\">white</td><td style = \"text-align: left;\">fair</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nOn the columns side, we also have more flexible options for subsetting a data frame. For example, instead of referring to columns using numerical indices, we can select the variables that we want to keep using their names:\n\n::: {#f91b63e7 .cell execution_count=9}\n``` {.julia .cell-code}\nstarwars[1:6, [:name, :gender, :homeworld]]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div><div style = \"float: left;\"><span>6×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">name</th><th style = \"text-align: left;\">gender</th><th style = \"text-align: left;\">homeworld</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Luke Skywalker</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C-3PO</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">R2-D2</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Naboo</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Darth Vader</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Leia Organa</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">Alderaan</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Owen Lars</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nReferring to columns by name is very handy in practice, and there's some hidden Julia concepts here that I didn't talk about in the last post. So with that in mind I'll digress slightly to talk about...\n\n## Symbols\n\nLooking at the syntax in the last code cell, it's fairly clear that `[:name, :gender, :homeworld]` is a vector of three... somethings, but it's not immediately obvious what `:name` actually is. Much like R (and also inherited from Lisp) Julia has extensive [Metaprogramming](https://docs.julialang.org/en/v1/manual/metaprogramming/) capabilities because it has the ability to represent Julia code as data structures within the language itself. In the simplest case, we have [Symbols](https://docs.julialang.org/en/v1/base/base/#Core.Symbol) like `:name`, which are constructed using the quotation operator `:` and used to represent object names. So as you can see, `:name` is an object of type Symbol:\n\n::: {#8b6f62fa .cell execution_count=10}\n``` {.julia .cell-code}\ntypeof(:name)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nSymbol\n```\n:::\n:::\n\n\nSymbols can be assigned to variables, and those variables can be used as part of expressions to be evaluated. In the code below I create a variable `colname` that stores the symbolic representation of a column name that I can invoke later:\n\n::: {#3bbb16b6 .cell execution_count=11}\n``` {.julia .cell-code}\ncolname = :title\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n:title\n```\n:::\n:::\n\n\nAs a simple example of how symbols can be used in practice, here's a Julia implementation of something like the `pull()` function in the R package dplyr, which allows the user to extract a single column from a data frame:\n\n::: {#d280ae5f .cell execution_count=12}\n``` {.julia .cell-code}\nfunction pull(data::DataFrame, column::Symbol)\n  getproperty(data, column)\nend;\n```\n:::\n\n\nIn this code I'm using the `getproperty()` function to do the same job that the `.` operator would do in an expression like `sprawl.title`. So here it is in action:\n\n::: {#54d73fc7 .cell execution_count=13}\n``` {.julia .cell-code}\npull(sprawl, :title)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n3-element Vector{String}:\n \"Neuromancer\"\n \"Count Zero\"\n \"Mona Lisa Overdrive\"\n```\n:::\n:::\n\n\nI know, it's exciting right?\n\nOkay yeah, at the moment this `pull()` function isn't very useful at all -- `pull(sprawl, :title)` is really not an improvement on `sprawl.title` -- but a little bit later when I get around to talking about data wrangling pipelines it might turn out to be a little less silly. \n\n\n::: {.column-margin}\n\n![[Mass Effect 2](https://www.deviantart.com/lagota/art/Mass-Effect-2-Final-Poster-294884760). By user [lagota](https://www.deviantart.com/lagota) on Deviant Art, released under a CC-BY-NC-ND licence. Still the strangest of the three games: the main storyline with the Collectors is a hot mess, but it has the best side quests in the series, and the best romance too (Thane, obviously...)](mass-effect-2.jpg){fig-alt=\"Reimagined Mass Effect 2 cover showing the Normandy attacked by a Collector ship\"}\n\n:::\n\n\n## Subsetting data frames II\n\nAnyway, getting back on track, the key thing to realise is that when I wrote `[:name, :gender, :homeworld]` earlier what I was really doing is constructing a vector of symbols, and it's those symbols that I was using to select the columns that I wanted to retain. The DataFrames package also supplies a various selector functions that can be used to extract a subset of the columns. For example, `Not()` will select every column except the ones that are passed to `Not()`. So if I want to drop the hair color, eye color, sex, and homeworld columns, I could do this:\n\n::: {#8ad2661b .cell execution_count=14}\n``` {.julia .cell-code}\nstarwars[1:6, Not([:hair_color, :eye_color, :sex, :homeworld])]\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div><div style = \"float: left;\"><span>6×7 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">name</th><th style = \"text-align: left;\">height</th><th style = \"text-align: left;\">mass</th><th style = \"text-align: left;\">skin_color</th><th style = \"text-align: left;\">birth_year</th><th style = \"text-align: left;\">gender</th><th style = \"text-align: left;\">species</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, Int64}\" style = \"text-align: left;\">Int64?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"String31\" style = \"text-align: left;\">String31</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Luke Skywalker</td><td style = \"text-align: right;\">172</td><td style = \"text-align: right;\">77.0</td><td style = \"text-align: left;\">fair</td><td style = \"text-align: right;\">19.0</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">C-3PO</td><td style = \"text-align: right;\">167</td><td style = \"text-align: right;\">75.0</td><td style = \"text-align: left;\">gold</td><td style = \"text-align: right;\">112.0</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Droid</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">R2-D2</td><td style = \"text-align: right;\">96</td><td style = \"text-align: right;\">32.0</td><td style = \"text-align: left;\">white, blue</td><td style = \"text-align: right;\">33.0</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Droid</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Darth Vader</td><td style = \"text-align: right;\">202</td><td style = \"text-align: right;\">136.0</td><td style = \"text-align: left;\">white</td><td style = \"text-align: right;\">41.9</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">Leia Organa</td><td style = \"text-align: right;\">150</td><td style = \"text-align: right;\">49.0</td><td style = \"text-align: left;\">light</td><td style = \"text-align: right;\">19.0</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">Human</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">Owen Lars</td><td style = \"text-align: right;\">178</td><td style = \"text-align: right;\">120.0</td><td style = \"text-align: left;\">light</td><td style = \"text-align: right;\">52.0</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Human</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThe `Between()` selector does what you'd think. It returns all columns in between two named columns:\n\n::: {#5b6f28a1 .cell execution_count=15}\n``` {.julia .cell-code}\nstarwars[1:6, Between(:sex, :homeworld)]\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div><div style = \"float: left;\"><span>6×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">sex</th><th style = \"text-align: left;\">gender</th><th style = \"text-align: left;\">homeworld</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Naboo</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">female</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">Alderaan</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">male</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">Tatooine</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nThere's also an `All()` selector that returns all columns, but that's not super exciting. More interesting, I think, is the `Cols()` selector which takes a predicate function as input.^[In this context, a predicate function is just one that returns `true` or `false`.] The column names are passed to the function, and they are included in the output if that function returns `true`. So, for example, if I want to extract the columns in the data whose name ends in `\"color\"` I can do this: \n\n::: {#60d33ee3 .cell execution_count=16}\n``` {.julia .cell-code}\nstarwars[1:6, Cols(x -> endswith(x, \"color\"))]\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div><div style = \"float: left;\"><span>6×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">hair_color</th><th style = \"text-align: left;\">skin_color</th><th style = \"text-align: left;\">eye_color</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"String31\" style = \"text-align: left;\">String31</th><th title = \"String15\" style = \"text-align: left;\">String15</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">blond</td><td style = \"text-align: left;\">fair</td><td style = \"text-align: left;\">blue</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">gold</td><td style = \"text-align: left;\">yellow</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: left;\">white, blue</td><td style = \"text-align: left;\">red</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">none</td><td style = \"text-align: left;\">white</td><td style = \"text-align: left;\">yellow</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">brown</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">brown</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">brown, grey</td><td style = \"text-align: left;\">light</td><td style = \"text-align: left;\">blue</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nI find myself liking these selector functions. Coming from the tidyverse style in R where tidyselect is used to govern column selection it feels... not terribly different. Superficially different, perhaps, but the combination of `All()`, `Not()`, `Between()`, and `Cols()` seems to provide a fairly powerful and (I think?) user-friendly way to select columns.\n\n::: {.column-margin}\n\n![[Mass Effect 3](https://www.deviantart.com/lagota/art/Mass-Effect-3-Final-Poster-290367120). By user [lagota](https://www.deviantart.com/lagota) on Deviant Art, released under a CC-BY-NC-ND licence. No, I will not be drawn into expressing a comment on the ending. I love ME3, in part because every Shepard I've ever played comes into this game already completely broken and makes unhinged choices because of it...](mass-effect-3.jpg){fig-alt=\"Reimagined Mass Effect 3 cover showing the Normandy facing a fleet fo reapers\"}\n\n:::\n\n## Data wrangling\n\nUp to this point I haven't really done any data wrangling with the `starwars` data. Okay, yeah, to some extent there's some data wrangling implied by the discussion of subsetting in the previous sections, but in truth none of that is how you'd normally go about it in a more real-world context. So to that end I'll talk about some of the data wrangling functions that DataFrames supplies. \n\nLet's start with something simple, and not very useful. Suppose what I want to do here is group the data by gender *and* sex, and then for every unique combination of gender and sex that appears in the data set have Julia pick one row at random and report the corresponding mass. To do that is a two step operation. First, I need to use `groupby()` to describe the groups, and then I need to call `combine()` to tell Julia what function to apply separately for each group. This does the trick:\n\n::: {#4da882f7 .cell execution_count=17}\n``` {.julia .cell-code}\ncombine(groupby(starwars, [:gender, :sex]), :mass => rand) \n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div><div style = \"float: left;\"><span>6×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">gender</th><th style = \"text-align: left;\">sex</th><th style = \"text-align: left;\">mass_rand</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">84.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">none</td><td style = \"text-align: right;\">75.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">hermaphroditic</td><td style = \"text-align: right;\">1358.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">none</td><td style = \"font-style: italic; text-align: right;\">missing</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">50.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"text-align: right;\">48.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nIn the call to `groupby(starwars, [:gender, :sex])` what Julia does is construct a grouped data frame (very similar to what you expect in R, really), and then this grouped data frame is passed to `combine()`. For each such group, we take the relevant subset of the `:mass` column and pass it to the `rand()` function, and by doing so a random mass is returned. \n\nThere's some obvious limitations to note in my code here though. Firstly, I'm not using the pipe `|>` at all, and while it's sort of fine in this context because there's only two steps in my data wrangling exercise, the code is going to get very ugly very quickly if I try to do something fancier. So let's start by fixing this. \n\nAs I mentioned in the first post in this series, one way I could transform this into a pipeline is to use the [Pipe](https://juliapackages.com/p/pipe) package, which supplies a pipe that behaves very similarly to the base pipe in R. However, I'm not going to do that. Instead, I'm going to adopt a workflow where I use the Julia base pipe together with anonymous functions. Here's the same code expressed in this kind of pipeline:\n\n::: {#9e908e05 .cell execution_count=18}\n``` {.julia .cell-code}\nstarwars |>\n  d -> groupby(d, [:gender, :sex]) |>\n  d -> combine(d, :mass => rand)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div><div style = \"float: left;\"><span>6×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">gender</th><th style = \"text-align: left;\">sex</th><th style = \"text-align: left;\">mass_rand</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, String15}\" style = \"text-align: left;\">String15?</th><th title = \"Union{Missing, Float64}\" style = \"text-align: left;\">Float64?</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">male</td><td style = \"text-align: right;\">159.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">none</td><td style = \"text-align: right;\">140.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">masculine</td><td style = \"text-align: left;\">hermaphroditic</td><td style = \"text-align: right;\">1358.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">none</td><td style = \"font-style: italic; text-align: right;\">missing</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">feminine</td><td style = \"text-align: left;\">female</td><td style = \"text-align: right;\">57.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"font-style: italic; text-align: left;\">missing</td><td style = \"font-style: italic; text-align: right;\">missing</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nI genuinely wasn't expecting this when I first learned about the restrictiveness of the Julia pipe, but I think I really like this syntax. Because you *have* to define an anonymous function at each step in the pipeline, I find noticing that: \n\n- It's only slightly more verbose than the R style, and has the advantage (to my mind) that you can use this workflow without having to think too much about Julia macros\n- The input argument (in this case `d`) serves the same role that the placeholder (`_` for the R base pipe and the Julia \"Pipe-package-pipe\", or `.` for the R magrittr pipe)\n- You have the ability to subtly remind yourself of the internal workings of your pipeline by naming the input argument cleverly. If the input to this step in the pipeline is a data frame I tend to call the input argument `d`, but if -- as sometimes happens in real life -- at some point in the pipeline I pull out a column and do a bit of processing on that before returning the results, I might find it handy to use something else to remind myself that this step is applied to string variables. \n\nAs regards that third point, here's an example using the `pull()` function that I defined earlier that does exactly this:\n\n::: {#966ebc3d .cell execution_count=19}\n``` {.julia .cell-code}\nstarwars |>\n  d -> subset(d, :skin_color => x -> x.==\"fair\") |>\n  d -> pull(d, :name) |>\n  n -> map(x -> split(x, \" \")[1], n)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n17-element Vector{SubString{String31}}:\n \"Luke\"\n \"Obi-Wan\"\n \"Anakin\"\n \"Wilhuff\"\n \"Han\"\n \"Wedge\"\n \"Jek\"\n \"Boba\"\n \"Mon\"\n \"Arvel\"\n \"Qui-Gon\"\n \"Finis\"\n \"Ric\"\n \"Shmi\"\n \"Cliegg\"\n \"Dooku\"\n \"Jocasta\"\n```\n:::\n:::\n\n\nAgain, not the most exciting pipeline in the world -- all I'm doing is returning the first names of all the fair-skinned characters -- but it does highlight the fact that the combination of base pipe and anonymous function syntax in Julia works rather well if you're inclined to write in this style.\n\nIn fact, the ability to name the input argument is especially helpful in the last line of the pipe where there are two separate functions being used, one of which is a call to `map()` applied to the `:name` column (and takes `n` as the input), and another that is used by `map()` when extracting the first name out of every name (where I've unimaginatively used `x` to name my input).\n\n\n\n## Image credit\n\nAll the lovely Mass Effect images in this post are from [lagota](https://www.deviantart.com/lagota) on DeviantArt, and are released under a CC-BY-NC-ND licence.\n\n<!-- https://www.deviantart.com/lagota/art/The-illusive-man-306521415 -->\n![](illusive-man.png)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}