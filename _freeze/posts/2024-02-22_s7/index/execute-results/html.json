{
  "hash": "67ab29f610d6fa7efcfb3e7a0c899f19",
  "result": {
    "markdown": "---\ntitle: \"The life of an S7 object\"\ndescription: \"This is a subtitle\"\ndate: \"2024-02-22\"\ncategories: [\"R\", \"Object-Oriented Programming\"]\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n> Slots are generally thought of as implementation detail that should not be directly accessed by the end-user ... [but] users know about @ and use it to access object internals even though they're not supposed to. S7 avoids these problems by accepting the fact that R is a data language, and that thereâ€™s no way to stop users from pulling the data they need out of an object. <br>\n> &nbsp;&nbsp; -- The [S7 documentation](https://rconsortium.github.io/S7/articles/motivation.html)\n\nSo this is one of those posts where I talk about two things at the same time. On the one hand it is a post about the relatively new [S7 object oriented programming system](https://rconsortium.github.io/S7/) in R, and that's the fun part of the post. But it's something else too, and that something else is related to the little snippet from the S7 documentation I quoted above, namely that **there's no way to stop people from pulling the data they want out of an object**. In the context of R programming, this is a simple truism about how the language is designed. Nothing is truly private in R. But this phrase touches on something else. If you start thinking of it as a broader comment about life, it becomes a stark comment about what happens to a person when aspects of their life *ought* to be private, but because others are interested in said details the information leaks from private to public, and the sense of powerlessness you can have as a person when that happens to you.\n\nThese stories aren't obviously similar to each other, so this is going to read like two interleaved blog posts that start from the same place and go down completely unrelated paths. But perhaps they will meet again in the end? There's only one way to find out, dear reader...\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}