{
  "hash": "f16973a4c180aa6a08587beefc5dc6fc",
  "result": {
    "markdown": "---\ntitle: \"Creating new generative art tool in R with grid, ambient, and S7\"\ndescription: \"There might be a darker undercurrent in this one\"\ndate: \"2024-02-22\"\ncategories: [\"R\", \"Object-Oriented Programming\", \"Grid Graphics\", \"Art\"]\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nThe Sydney Gay and Lesbian Mardi Gras is in full swing, a multi-week festival and parade sprawling across multiple sites across the city. As I write this I am sitting in the sunshine at a bar on Bondi Beach, while a massive stage is being constructed below for the \"Bondi Beach Party\" event. As always, the surfers, swimmers, sunbathers and assorted Swifties in town for the Eras Tour are having a lovely day at the beach. Everyone is partying.\n\nAbout a kilometer away, above the iconic limestone cliffs that surround almost every Sydney beach, is the Marks Park Memorial in Tamarama. The memorial serves as a remembrance for the LGBT victims of hate crimes in Sydney, a stark reminder of the perennial apathy that the NSW police show towards these crimes, and most especially to the gay men who were murdered at these cliffs back in the 1970s and 1980s and whose deaths are to this day the subject of inquests into the appalling behaviour of the police in this city.\n\nThe contrast is stark. It is one that few people are willing to face up to, particularly cisgender straight people who fancy themselves to be allies of our community but think that allyship means nothing more than waving a little rainbow flag and mindlessly reciting slogans like \"Love Is Love\" or \"Trans Rights Are Human Rights\". Barely a week ago a man told me to my face that things have changed. It's different now. Everyone is so accepting. You don't need to hide who you are. Et cetera.\n\nNone of this is true, of course. I could tell the very recent story of Nex, the non-binary teenager whose death the Oklahoma authorities seem to be trying very hard not to investigate. I could tell the story of Brianna Ghey, a murdered trans girl stabbed 27 times in the UK. Closer to home, I could tell the story of Mhelody Bruno, a Filipina trans woman strangled to death by her boyfriend and whose death was barely even investigated by the NSW police and courts. \n\nI could tell all these stories, but they would have very little impact on the straight men who tell me that actually things are *fine* now. These are outliers, you see. The exceptions. Not the norm. \n\nAgain, it is not true. Consider for example, the case of Danielle Navarro, a bisexual trans woman who is about as privileged as you could possibly be given those other categories. Barely a week ago a man expressed disbelief to me that such a person could have *possibly* had bad experiences. \n\nAnd so we come to this post. Like everything on this blog it is in fact a data science post. I'm going to talk about art, about object oriented programming in R, about the grid graphics system, and I'll do it all with a lovely LGBT flavoured palette in honour of Mardi Gras.\n\nBut make no mistake. This is not a celebratory \"partying on the beach\" kind of post. There will be art, but there will also be trauma.\n\nConsider yourselves warned.\n\n## Prelude\n\nThe rainbow pride palette is surprisingly amenable to artistic exploration,  unlike the trans pride palette which I have almost never had any success working with artistically. Here, for example, is a very simple piece of generative art -- and the code that generates it -- that I made a few days ago.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# colour scheme\npalette <- c(\n  \"#e50000\", \"#ff8d00\", \"#ffee00\", \n  \"#028121\", \"#004cff\", \"#770088\"\n)\n\n# parameters defining objects\nvalues <- tibble::tibble(\n  x = cos(seq(0, pi * 5/3, length.out = 6)),\n  y = sin(seq(0, pi * 5/3, length.out = 6)),\n  n = 500L,\n  fill = palette,\n  color = fill\n)\n\n# list of blob objects to add to a sketch\nblobs <- purrr::pmap(values, blob)\n\n# define and draw a sketch containing the objects\nblobs |> sketch() |> draw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThe piece is very simple, but has a lovely balance to my eye. Each colour of the pride flag is captured in a single \"blob\", with the blobs arranged in a circular overlapping pattern that conveys a sense of movement and progress. More subtly, if you look at the blobs closely you can detect a kind of spatial autocorrelation. Notice how the green, yellow, and orange blobs all have a protrusion on their right hand side at approximately the same place. You'd be tempted to think this is coincidental, but it isn't. Hidden under the hood there is a vector field that induces correlations on the random process that creates the blob shapes. This is by design.\n\nThe spatial autocorrelation that provides hidden structure to this artwork becomes a little more obvious if I switch to a different piece constructed with very similar tools:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# parameters defining objects\nvalues <- tibble::tibble(\n  x = rnorm(200L, sd = 1.5),\n  y = rnorm(200L, sd = 1.5),\n  xend = x,\n  yend = y + 1,\n  width = 1,\n  n = 500L,\n  fill = sample(palette, 200L, replace = TRUE),\n  color = fill\n)\n\n# list of ribbon objects to add to a sketch\nribbons <- purrr::pmap(values, ribbon)\n\n# define and draw a sketch containing the objects\nribbons |> \n  sketch() |> \n  draw(xlim = c(-2, 2), ylim = c(-2, 2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIn this piece the blobs are more ribbon shaped, and the piece as a whole feels a little like a rainbow coloured lava lamp. The spatial autocorrelation is more obvious. The ribbons tend to be thin in the same regions of the plot, and thin in the same regions. \n\nEach of these ribbons is a distinct individual object, yet somehow they all have similar experiences when embedded in the environment that defines the art. There is a *pattern* to how they flow through this world.^[Look, I know I'm hitting the reader over the head with the metaphor, but I'm not trying to be subtle here. I've met quite a lot of straight people over the years and I've learned from experience that you really can't be subtle with them when talking about this stuff.]\n\nAn artist looking at this piece might wonder about the trickery used to create this structure. An R programmer looking at it, however, might be wondering something very different. They would likely be asking questions like \"what the fuck is this `ribbon()` function, and what the hell is a `sketch()`, and how are you rendering this with this `draw()` function that you piped it to? Absolutely none of this is part of base R, it's clearly not ggplot2 code, and it's not even consistent with *any* well-known data visualisation tool in the R ecosystem. What the hell are you doing here girl?\n\n\n\n## Act I: Learning to love S7\n\n> I walk past the bar in my neighbourhood. It has pride flags plastered on the window. They're advertising a drag show. My hands start shaking, remembering the feel of the older man's hands wrapped tightly around my throat as he forced his tongue down my throat at the queer themed rainbow bar upstairs and demanded that I fuck him. He was so strong. I froze. I wonder what his name was. It's not like he bothered to tell me that.\n\nThis whole thing started because I wanted to learn how to use the relatively new [S7 object oriented programming system](https://rconsortium.github.io/S7/) that is intended to serve as a successor to the informal-but-janky [S3](https://adv-r.hadley.nz/s3.html) system and the formal-but-painful [S4](https://adv-r.hadley.nz/s4.html) system that already exist within R.^[For folks outside of the R community: S3, S4, and S7 are all considered to be \"functional\" OOP systems, and they are broadly similar to function overloading in C++ and, I have recently learned, is also analogous to how methods are defined in Julia for functions of the same name but with different signatures. The functional style of OOP programming is one in which methods attach to generic functions (or to function names), as opposed to more traditional \"encapsulated\" OOP systems in which methods attach to objects. The encapsulated style is standard in Python, for example, and also appears in R via the [R6](https://adv-r.hadley.nz/r6.html) OOP system that I have used in other blog posts (e.g., [here](https://blog.djnavarro.net/posts/2022-12-22_queue/) and [here](https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/)). I mention these tiresome details because I have learned to my detriment that if I don't exhaustively list the various distinctions between OOP systems and how R adopts multiple styles, I *will* have to deal with tiresome people mansplaining to me how R is bad at OOP and how OOP in R is wrong and isn't *really* OOP and honestly I'm asleep before I finish reading the complaint.] It seemed like a very simple exercise when I started, but as with any exercise in learning a new thing I very quickly felt like a dog trying to understand Norway.^[A *Slow Horses* reference, in case you missed it.] \n\nAs is my habit, I've taken my learning process and used it to create art. What I want to do with S7 here is create a system for programmatically constructing \"drawable shapes\" that abide by particular rules, alongside a toolkit that can take these objects and render them within an abstract \"sketch\" that can later be rendered to an image with the help of the grid graphics system. In that sense, the basic idea underpinning my tool is not that different -- though far less sophisticated -- to how ggplot2 works, but I've designed it with different considerations in mind. My tools are not designed for data visualisation, they are designed for generative art. Spiritually they have more in common with p5.js than ggplot2.\n\n### Writing a new S7 class\n\n> Sitting in shock on my couch. That... that was rape, right? I mean, if I were a cisgender woman that would obviously be a rape, right? I said no, repeatedly. He forced his way in. Into my apartment. Then into me. It happened, right? I know it happened. My arse is so fucking sore. Not like I had time to prep for that. I *know* it happened. My body is screaming at me to tell me it happened. God I need to move, the kids will be home in a few minutes. Why can't I *move*?\n\nOkay look. It's kind of like this. While eventually the stated plan is for S7 to become part of base R and be easily available to any R user -- no different to S3 and S4 -- it's still in development and there are still quirks. So for now it's a regular package like any other one and if we want to start building classes with it we'll have to load the package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(S7)\n```\n:::\n\n\nLet's have a look at how you define classes in S7, and for the moment we'll keep it simple. All I'm going to do right now is create a new class that represents a circle. The way we do this in S7 is with the `new_class()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle <- new_class(\n  name = \"circle\", \n  properties = list(\n    x = class_numeric,\n    y = class_numeric,\n    radius = class_numeric\n  )\n)\n```\n:::\n\n\nBy doing so, I create a new function called `circle()` that has arguments corresponding to the `x`, `y` and `radius` properites. I can call this function to create a new circle object. In the code below I create an object `cc` that -- at least in some very abstract sense of the term -- corresponds to the unit circle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc <- circle(x = 0, y = 0, radius = 1)\ncc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n @ x     : num 0\n @ y     : num 0\n @ radius: num 1\n```\n:::\n:::\n\n\nHere we have a circle object that has three \"properties\" `x`, `y`, and `radius`. We can think of it as something broadly similar to a named list, but it has rules attached. In the class definition above I specified that `x`, `y`, and `radius` must be numeric values: they are allowed to be integers or doubles, but they can't be characters. Here's what happens if I try to create a circle with `radius = \"big\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle(x = 0, y = 0, radius = \"big\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <circle> object properties are invalid:\n- @radius must be <integer> or <double>, not <character>\n```\n:::\n:::\n\n\nSo here we see something that we wouldn't normally have in, say, an S3 class:^[Or at least not without a lot of extra effort on the developer side.] the class definition explicitly says that the `radius` property must be numeric, so my `circle()` function throws an error if I foolishly try to pass it a non-numeric radius.\n\nOkay so what's going on with these \"properties\"? Properties are analogous to \"slots\" in an S4 object^[In contrast S3 is so chaotically informal that it doesn't have any real notion of an \"accessor\" operator. Some S3 classes are atomic objects internally (e.g., a Date is simply a double with some attributes) and have no accessor operator, whereas others are lists internally and as such use `$` as the accessor.] and can be accessed using `@`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc@radius\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nOne nice thing about S7 is that you can modify (most) properties of an object directly. So if I want to update my `cc` object so that it now (nominally) represents a circle with radius 2, I can do this:^[Like S3 and S4 and like the vast majority of R objects, S7 objects have copy-on-modify semantics. This is distinct to environments and R6 classes which have reference semantics. But let's be honest, shall we? You either (a) already know this, (b) don't care, or (c) don't find this telegraphic explanation very helpful because it really isn't very helpful. My aims in this post are pretty limited so really if you want to wrap your head around this stuff a better bet is to read [Advanced R](https://adv-r.hadley.nz/).]\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc@radius <- 2\ncc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n @ x     : num 0\n @ y     : num 0\n @ radius: num 2\n```\n:::\n:::\n\n\nAmazing. Thrilling. The excitement, it cannot be contained.\n\n### Adding default values\n\n> I didn't really have a choice once he was inside. I knew my kids were coming home and he needed to be gone. He fucking knew it too. It's why he showed up 20 minutes before school finished. Just like last time and the time before. And I tried to say no. I wasn't subtle. But what do you do in this situation? It's either fight him and lose, and that's going to hurt more than it already does if you do that. Or... you know what he likes. Give him that, get him off, and get him out. You don't have a lot time to resolve this. He's already violated consent twice today. Just suck it up girl. God knows you've had his dick in your mouth enough times already, and if it gets him out of your arse in the process that's a win. One more blow job isn't going to make a difference and let's be honest you don't *actually* have a choice here. \n\nOne limitation to the `circle()` function I just created is that it doesn't supply default values for the `x`, `y`, and `radius` properties, so the user has to explicitly pass values every time it is called. That's not always ideal, especially as your classes become more complex (we'll see this later) and have many properties that only rarely need to be modified by the user. \n\nTo fix this, it's helpful to note that when I wrote `x = class_numeric` in the previous definition for the `circle` class I was relying on a shorthand notation. If you want to be more explicit in how properties are defined, you can use the `new_property()` function. One of the arguments to `new_property()` is `default` and allows you to provide a default value for that property in case the user doesn't supply one. So here's a modified version of our `circle` class that supplies defaults for all three properties:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle <- new_class(\n  name = \"circle\", \n  properties = list(\n    x = new_property(class = class_numeric, default = 0),\n    y = new_property(class = class_numeric, default = 0),\n    radius = new_property(class = class_numeric, default = 1)\n  )\n)\n```\n:::\n\n\nNow that I've done so, it's possible for the user to construct a new circle by supplying values only for those properties where they want to override the default. So this now works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle(x = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n @ x     : num 2\n @ y     : num 0\n @ radius: num 1\n```\n:::\n:::\n\n\nAs you can see, this object describes a circle with default values `y = 0` and `radius = 1`, as well as a user supplied value `x = 0`.\n\n### Computed properties\n\n> So yeah. That happened. Nothing to be done about it now, and you have no evidence. Besides, who are you going to report it to? The NSW police? Please. What's done is done and the past is read-only. Accept it and move on.\n\nLet's be honest. This circle class only represents a circle in the most abstract sense. It's a list of three numbers that you need to describe a circle, but it doesn't actually compute any points that lie on the circumference of said circle. If you wanted to *draw* the circle in question, you'd have to actually compute those points yourself. For a circle this computation is so very straightforward that it seems strange to bother doing it within the `circle` object, but other kinds of parametrised shapes (notably the `blob` and `ribbon` objects that are going to appear later) are more complex and the relationship between the parameters and the vertices of the shape is more complex. In those cases, it seems very sensible to compute the vertices of the shape within the object itself.\n\nOne very handy feature of S7 classes is that they support *computed properties*. A computed property is one that is not supplied by the user, and whose value is constructed (initially at the time of object creation, but we'll revisit this) on the basis of the regular properties of the object. So, for instance, our `circle` class already has ordinary properties `x`, `y`, and `radius`, but we could add a computed property called `points` that contains the coordinates of the vertices of the circle that is defined by the `x`, `y`, and `radius` values. In practice, however, that means we'll need to add another new property to our class. As a mathematical abstraction, there are an infinite number of points that sit on the perimeter of a circle. In real life, we'll have to approximate this by choosing `n` evenly spaced locations on the circle. \n\nTo that end, we can update our `circle` class like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle <- new_class(\n  name = \"circle\", \n  properties = list(\n    x = new_property(class_numeric, default = 0),\n    y = new_property(class_numeric, default = 0),\n    radius = new_property(class_numeric, default = 1),\n    n = new_property(class_integer, default = 100L),\n    points = new_property(\n      class = class_data.frame,\n      getter = function(self) {\n        angle <- seq(0, 2 * pi, length.out = self@n)\n        data.frame(\n          x = self@x + self@radius * cos(angle),\n          y = self@y + self@radius * sin(angle)\n        )\n      } \n    )    \n  )\n)\n```\n:::\n\n\nEven a moments inspection of the code makes clear that the `points` property is rather different to the others. The data stored within `points` is structured as a data frame (we'll improve on this later) that has columns corresponding to the x- and y-coordinates of the points. Critically, however, the user does *not* supply the value for `points`. Instead, what I have done here is use the `getter` argument to `new_property()` to supply a function that is executed whenever a new circle is created. The getter function always takes a single argument `self`, referring to the circle object itself, and returns the value that will be assigned to the computed property (in this case `points`). \n\nThe key thing about the getter function is that you can reference the other properties of the object. So, in the code above, you can see that I've used `self@x`, `self@radius`, etc, to refer to the values of the `x` and `radius` values that were supplied by the user. By doing so, it's pretty easy to write code that programmatically constructs the value of a computed property, using the user-supplied property values to do so. \n\nSo let's have a look at what happens when we use our updated `circle` class. When I create a new circle, the `points` property is automatically computed using the user-specified `x`, `y`, `radius`, and `n` properties:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc <- circle(x = 1, y = 2, radius = 3, n = 50L)\ncc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n @ x     : num 1\n @ y     : num 2\n @ radius: num 3\n @ n     : int 50\n @ points:'data.frame':\t50 obs. of  2 variables:\n .. $ x: num  4 3.98 3.9 3.78 3.61 ...\n .. $ y: num  2 2.38 2.76 3.13 3.47 ...\n```\n:::\n:::\n\n\nAnother nice feature of computed properties in S7 is that they are dynamic. When I update one of the other properties, the computed `points` property is automatically updated. For example, let's take the circle object `cc` that I constructed in the last code snippet, and instruct R to compute it using a mere 5 points along the perimeter:^[I mean, at this point I'm effectively turning my circle into a pentagon, but of course I could always change `n` again later if I wanted a different number of points.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc@n <- 5L\ncc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n @ x     : num 1\n @ y     : num 2\n @ radius: num 3\n @ n     : int 5\n @ points:'data.frame':\t5 obs. of  2 variables:\n .. $ x: num  4 1 -2 1 4\n .. $ y: num  2 5 2 -1 2\n```\n:::\n:::\n\n\nThe same trick could be used dynamically to change the size or location of the circle (I leave it to the reader to imagine the potential here in the generative art context).\n\nA key thing to note about the `points` property that I just created is that it is read-only. Formally, the way you know that it is read-only is because I have defined a `getter` function for it but have (deliberately) not defined a `setter` function that would be executed if the user tries to change `points` directly. Because of this, `points` is read-only. The user is permitted to read and extract the property via the `@` accessor operator...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc@points\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   x  y\n1  4  2\n2  1  5\n3 -2  2\n4  1 -1\n5  4  2\n```\n:::\n:::\n\n\nbut they are not allowed to write directly to that property. The only^[LOL. Let's be honest, there is always another way if you try hard enough but the point here is that you're not supposed to modify a read-only property and S7 will throw up roadblocks if you try to do it.] way to modify a computed property is by modifying the other properties from which it is computed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc@points <- data.frame(x = 1:3, y = 4:6)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: Can't set read-only property <circle>@points\n```\n:::\n:::\n\n\nFor the purposes of the tool I want to create, the read-only nature of `points` is a desirable feature. I *don't* want users trying to manually create the `points` that lie on the circumference of a circle. The abstract concept of a circle is defined by `x`, `y` and `radius`, and if I want to create `n` evenly spaced points on the circle, then these points are automatically computed as a byproduct of specifying these values. \n\n### Validators\n\n> Am I a woman? I mean, men seem pretty happy to humiliate me, choke me, and rape me as if I *were* a woman, but is that the validation I want? It says \"female\" on all my documents now, and I fought tooth and nail for years to make that happen. Is the fight itself enough for me to earn my place as a valid woman? But if it is, then why the fuck am I *constantly* having to justify my life to the satisfaction of men who ignore me when I talk about the cruel reality of life as a trans woman, treat every interaction with me like they're having an academic debate, and whose only interest in my life is using me as a vehicle to argue that I have an unfair advantage in the sporting contests that I'm too frightened to participate in? Is there a point at which I too can make a valid claim to be the victim of misogyny?\n\nAnother limitation to the `circle` class that I've just created is that there is no *validator* function. The role of a validator is to ensure that the values that the user passes during object construction correspond to a valid object. A circle can't really have a negative `radius`. The `x` and `y` values that define the center of the circle need to be scalar values. The number of points `n` can't be non-negative. The class that I've just created doesn't enforce these constraints. Sometimes this means that you can pass nonsense values and end up with something that *looks* like a valid circle, but isn't:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle(x = 1:2, y = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n @ x     : int [1:2] 1 2\n @ y     : num 1\n @ radius: num 1\n @ n     : int 100\n @ points:'data.frame':\t100 obs. of  2 variables:\n .. $ x: num  2 3 1.99 2.98 1.97 ...\n .. $ y: num  1 1.06 1.13 1.19 1.25 ...\n```\n:::\n:::\n\n\nOther times, you can pass nonsense values and get an error message because one of the internal function calls doesn't work properly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle(n = -4L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in seq.default(0, 2 * pi, length.out = self@n): 'length.out' must be a non-negative number\n```\n:::\n:::\n\n\nNeither of these outcomes is a good thing. What you really need here is a validator function that checks the user inputs and throws an informative error whenever those inputs are invalid. A nice feature of S7 is that it supports validators \"out of the box\", and makes the validator part of the class definition itself. \n\nSo here is an updated `circle` class definition that incorporates a validator function. It's a relatively clean setup, because you can simply have the validator return the string for your error message, or else have a `NULL` return value if the inputs are good:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle <- new_class(\n  name = \"circle\", \n  properties = list(\n    x = new_property(class_numeric, default = 0),\n    y = new_property(class_numeric, default = 0),\n    radius = new_property(class_numeric, default = 1),\n    n = new_property(class_integer, default = 100L),\n    points = new_property(\n      class = class_data.frame,\n      getter = function(self) {\n        angle <- seq(0, 2 * pi, length.out = self@n)\n        data.frame(\n          x = self@x + self@radius * cos(angle),\n          y = self@y + self@radius * sin(angle)\n        )\n      } \n    )    \n  ),\n  validator = function(self) {\n    if (length(self@x) != 1) return(\"x must be length 1\")\n    if (length(self@y) != 1) return(\"y must be length 1\")\n    if (length(self@radius) != 1) return(\"radius must be length 1\")\n    if (length(self@n) != 1) return(\"n must be length 1\")\n    if (self@radius < 0) return(\"radius must be a non-negative number\")\n    if (self@n < 1L) return(\"n must be a positive integer\")\n  }\n)\n```\n:::\n\n\nThis probably isn't the ideal form for the `circle` validator (e.g., I could probably think more about what messages should be returned) but it illustrates the basic idea. The key thing is that, for example, if I try to pass a negative `radius` I get an error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle(radius = -0.234)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <circle> object is invalid:\n- radius must be a non-negative number\n```\n:::\n:::\n\n\nOne thing I'm learning very quickly is that when you're designing a system that is built from many different classes, it is *extremely* valuable to have validators for all your classes. Debugging becomes much easier on the one hand, and on the other hand you can always move forward in your code knowing that when class A depend on class B in some fashion, you can always rely on knowing that every class B object that class A works with will be a valid instance of class B. A little bit of extra effort when writing the class definition spares you a lot of pain down the track when you're trying to make sense of how your classes interact with each other.\n\n### Building structure\n\n> The constituent pieces of an oppressive system are often innocuous on their face, very often the result of thoughtlessness rather than malice. The consequences, however, are cruel. Crying in a hotel lobby at a conference when your documentation doesn't match your appearance and the staff are arguing with each other over whether you're really the person on the drivers licence. Crying in a lecture theatre in front of an audience because the programmer who designed the IT system didn't consider name and gender to be malleable properties so even though you've updated your records with HR, the IT system has just outed you to all your students. Trying to work out if -- notwithstanding the threats of violence on this topic that obviously you can't report because they came from senior academics -- you're allowed to use the bathroom next to your office because nobody bothered to write a policy document, and instead walking a kilometer to go off-campus to pee. Living in dread waiting for the next time you fall into the cracks in the system.\n\nUp to this point, all I have done when designing my system is define a `circle` class that creates objects with a specific structure. In order to expand this into a richer tool that can eventually support the artistic goals I have in mind, I'm going to need to broaden my vision and think about a collection of related classes that play nicely with one another.\n\nIn order to make this shift, a natural place to start is thinking about what kind of objects should be stored internally within a `circle` object (and other shapes). For instance, in the code above I stored the computed `points` as a simple data frame. It would be more sensible to define an actual S7 class for this, with its own validator to make sure that any shape classes I define compute a valid set of points:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoints <- new_class(\n  name = \"points\",\n  properties = list(\n    x = class_numeric,\n    y = class_numeric\n  ),\n  validator = function(self) {\n    if (length(self@x) != length(self@y)) {\n      \"x and y must be the same length\"\n    }\n  }\n)\n```\n:::\n\n\nSimilarly, when the time comes to start drawing these things, my circles (and other shapes) will need to have a defined visual `style`. Again, I can create a class for this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyle <- new_class(\n  name = \"style\",\n  properties = list(\n    color     = new_property(class_character, default = \"black\"),\n    fill      = new_property(class_character, default = \"black\"),\n    linewidth = new_property(class_numeric, default = 1)\n  )\n)\n```\n:::\n\n\nYou'll notice that `style` currently doesn't have a validator, and it doesn't support a very wide range of properties. The artistic system I want to consider has the constraint that *every* drawable shape is a polygon of some kind, and needs to have stylistic properties that one associates with polygons. The `color`, `fill`, and `linewidth` properties that exist within this `style` class are a beginning, but nothing more than that. Similarly, the absence of a validator is a strong hint that I haven't finished thinking through what I want this class to be. For the current purposes the `style` class works, but it's very far from complete.\n\nLet's move on, and start thinking about what happens when my system has a richer collection of drawable shapes than just circles. Later on in this post I'm going to define several different kinds of drawable shapes (e.g., the `blob` and `ribbon` objects in the initial artwork), and they'll all have some structural similarities to one another that I want to enforce. To that end I'll create a class called `drawable`.^[Ideally I'd like to make this an abstract class, in which users can't directly create a new `drawable`. In principle this is achievable by setting `abstract = TRUE` in the call to `new_class()`, but what I've found so far is that creates problems when -- as happens slightly later in the post -- I define a custom constructor function for my \"circle-subclassing-drawable\" class. I imagine this will be dealt with at some point, but for now I'm just ignoring the idea of abstract classes.] The `drawable` class will later be used as the parent class for all the shape classes that I want to be, well, drawable. But it's not super interesting in itself. Here's the code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrawable <- new_class(\n  name = \"drawable\",\n  properties = list(\n    style = new_property(\n      class = style,\n      default = style()\n    ),\n    points = new_property(\n      class = points,\n      getter = function(self) points(x = numeric(0L), y = numeric(0L))\n    )\n  )\n)\n```\n:::\n\n\nThe true purpose of the `drawable` class is that it enforces structure. Every drawable shape class that I later define will necessarily have a computed `points` property, and a user-defined `style` property. As an added benefit, because the only information I'll ever need to draw a shape is captured by `style` and `points`, I will be able to define a single drawing method that works for all `drawable` objects regardless of their specific character.\n\nOkay so now we can define `circle` as a subclass of `drawable`. It doesn't change the code very much. All I'm doing here is adding `parent = drawable` to the class definition:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle <- new_class(\n  name = \"circle\",\n  parent = drawable,\n  properties = list(\n    x = new_property(class_numeric, default = 0),\n    y = new_property(class_numeric, default = 0),\n    radius = new_property(class_numeric, default = 1),\n    n = new_property(class_integer, default = 100L),\n    points = new_property(\n      class = points,\n      getter = function(self) {\n        angle <- seq(0, 2 * pi, length.out = self@n)\n        points(\n          x = self@x + self@radius * cos(angle),\n          y = self@y + self@radius * sin(angle)\n        )\n      }\n    )\n  ),\n  validator = function(self) {\n    if (length(self@x) != 1) return(\"x must be length 1\")\n    if (length(self@y) != 1) return(\"y must be length 1\")\n    if (length(self@radius) != 1) return(\"radius must be length 1\")\n    if (length(self@n) != 1) return(\"n must be length 1\")\n    if (self@radius < 0) return(\"radius must be a non-negative number\")\n    if (self@n < 1L) return(\"n must be a positive integer\")\n  }\n)\n```\n:::\n\n\nTo see that our new `circle` class is indeed a subclass of `drawable`, we can create a new circle and check its class attribute:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc <- circle()\nclass(cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"circle\"    \"drawable\"  \"S7_object\"\n```\n:::\n:::\n\n\nThe primary class is `circle`, as you'd expect, and the parent class is `drawable`. Notice also that the object has a third class, `S7_object`: all S7 objects possess this class. \n\n### Constructors\n\nImposing this structure on our drawable objects is valuable, and will pay off later because everything that we need to draw the shape is captured by the embedded `style` and `points` objects. However, as an unfortunate side effect of this, I've accidentally defined a class that makes it very hard for the user to supply the stylistic features: the arguments to our new `circle()` function are now:\n\n- `style`, which has to be a call to the `style()` constructor\n- `x`, `y`, `radius`, and `n`, as before\n\nThat means that if I want to define a red circle with radius 2, my poor user (i.e., *me*) has to do something rather unpleasant:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle(style = style(color = \"red\"), radius = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n @ style : <style>\n .. @ color    : chr \"red\"\n .. @ fill     : chr \"black\"\n .. @ linewidth: num 1\n @ points: <points>\n .. @ x: num [1:100] 2 2 1.98 1.96 1.94 ...\n .. @ y: num [1:100] 0 0.127 0.253 0.379 0.502 ...\n @ x     : num 0\n @ y     : num 0\n @ radius: num 2\n @ n     : int 100\n```\n:::\n:::\n\n\nThe reason this is cumbersome is that my `drawable` class imposes a structure in which all the stylistic features are captured by the `style` property (shared by all drawables), whereas all the parameters that are used to construct the `points` property are specific to the particular drawable class (`circle`, `blob`, `ribbon`, etc). This internal structure is a good thing insofar as it ensures I can always extract the two key properties from any drawable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc@style\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<style>\n @ color    : chr \"black\"\n @ fill     : chr \"black\"\n @ linewidth: num 1\n```\n:::\n\n```{.r .cell-code}\ncc@points\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<points>\n @ x: num [1:100] 1 0.998 0.992 0.982 0.968 ...\n @ y: num [1:100] 0 0.0634 0.1266 0.1893 0.2511 ...\n```\n:::\n:::\n\n\nAs you can imagine, this is a handy feature in a generative art tool. Nevertheless it's a huge pain in the arse from the user perspective when it comes to constructing a new `circle` object. \n\nFortunately, S7 makes it possible to fix this by allowing the class definition to include a custom *constructor* function that allows the developer to customise the arguments that the user supplies. \n\nHere's what the `circle` class looks like with a custom constructor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncircle <- new_class(\n  name = \"circle\",\n  parent = drawable,\n  properties = list(\n    x      = class_numeric,\n    y      = class_numeric,\n    radius = class_numeric,\n    n      = class_integer,\n    points = new_property(\n      class = points,\n      getter = function(self) {\n        angle <- seq(0, 2 * pi, length.out = self@n)\n        points(\n          x = self@x + self@radius * cos(angle),\n          y = self@y + self@radius * sin(angle)\n        )\n      }\n    )\n  ),\n  validator = function(self) {\n    if (length(self@x) != 1) return(\"x must be length 1\")\n    if (length(self@y) != 1) return(\"y must be length 1\")\n    if (length(self@radius) != 1) return(\"radius must be length 1\")\n    if (length(self@n) != 1) return(\"n must be length 1\")\n    if (self@radius < 0) return(\"radius must be a non-negative number\")\n    if (self@n < 1L) return(\"n must be a positive integer\")\n  },\n  constructor = function(x = 0, y = 0, radius = 1, n = 100L, ...) {\n    new_object(\n      drawable(),\n      x = x,\n      y = y,\n      radius = radius,\n      n = n,\n      style = style(...)\n    )\n  }\n)\n```\n:::\n\n\nThere's a few things to note here: \n\n- The constructor function always ends with a call to `new_object()`, and the first argument is always the parent class (i.e., in this case the parent of `circle` is `drawable`).\n- The way I've cleaned up my arguments is by having four explicitly defined arguments for a circle (`x`, `y`, `radius`, and `n`), and then included the dots `...` that are then passed onto `style()`\n- I've surreptitiously changed the way that my default arguments are specified: the constructor function is now responsible for defining defaults.\n\nThe extra effort that goes into writing a custom constructor is in some ways a pain (especially because it does mean that any subclass of `circle` will also need a custom constructor), but in this case it's worth it because I can create a purple circle in a natural way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc <- circle(radius = 2, fill = \"purple\")\ncc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<circle>\n @ style : <style>\n .. @ color    : chr \"black\"\n .. @ fill     : chr \"purple\"\n .. @ linewidth: num 1\n @ points: <points>\n .. @ x: num [1:100] 2 2 1.98 1.96 1.94 ...\n .. @ y: num [1:100] 0 0.127 0.253 0.379 0.502 ...\n @ x     : num 0\n @ y     : num 0\n @ radius: num 2\n @ n     : int 100\n```\n:::\n:::\n\n\n### Other drawables\n\n> Early in transition, walking into the office in my academic department. \"So you're a woman now? Are you going to get the surgery? Or did you already have it? Are you looking for a husband?\" Um, I was hoping to use the photocopier if that's okay? I have a class handout to prepare. Wasn't planning to have a conversation about my genital status actually, and I feel like if I were a cis woman you'd realise that your professional colleagues' genitals are not an appropriate workplace conversation topic.\n\nLater in the post I'll go on to define the `blob` and `ribbon` classes that are so much fun for artistic purposes, but we have a long way to go before we get to that. One thing I will do now, however, is define a general purpose `shape` class that isn't very interesting, but handy to have as a fallback. The `shape` class has no interesting parameters: the user directly supplies the `x` and `y` coordinates that define the `points` property for the shape. This is very handy artistically in situations where you don't really want to bother defining a shape parametrically, and instead just want to supply the vertices directly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshape <- new_class(\n  name = \"shape\",\n  parent = drawable,\n  properties = list(\n    x = class_numeric,\n    y = class_numeric,\n    points = new_property(\n      class = points,\n      getter = function(self) {\n        points(x = self@x, y = self@y)\n      }\n    )\n  ),\n  validator = function(self) {\n    if (length(self@x) != length(self@y)) {\n      \"x and y must be the same length\"\n    }\n  },\n  constructor = function(x, y, ...) {\n    new_object(\n      drawable(),\n      x = x,\n      y = y,\n      style = style(...)\n    )\n  }\n)\n```\n:::\n\n\nIt's not interesting, but you can use it to manually define a red square like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsq <- shape(\n  x = c(0, 0, 1, 1), \n  y = c(0, 1, 1, 0),\n  fill = \"red\"\n)\nsq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<shape>\n @ style : <style>\n .. @ color    : chr \"black\"\n .. @ fill     : chr \"red\"\n .. @ linewidth: num 1\n @ points: <points>\n .. @ x: num [1:4] 0 0 1 1\n .. @ y: num [1:4] 0 1 1 0\n @ x     : num [1:4] 0 0 1 1\n @ y     : num [1:4] 0 1 1 0\n```\n:::\n:::\n\n\nHonestly, I'm only mentioning it now because in a moment I'm going to define drawing functions that I'll apply to the circle object `cc` from before, and the `sq` object I've just created.\n\n## Act II: Grid\n\nAt this stage in the development process I have a sensible collection of S7 classes that I can use to represent polygons in a systematic way. I have `style` and `points` classes that capture the \"raw\" characteristics of the polygons, and I have `drawable` and its child classes `circle` and `shape` (with `blob` and `ribbon` to come shortly) that allows me to construct drawable shapes in a convenient way.\n\nWhat I *don't* have yet is a method for actually drawing these things. \n\n### Drawing drawables\n\nThere are a lot of ways I could go about creating actual drawings from `drawable` objects, and I did spend a little time thinking about the pros and cons of different approaches. What I landed on in the end, however, was a strategy where I would define a new generic function called `draw()` and then supply methods for it that use the grid graphics system in R to do the rendering. \n\nTo construct a new generic function in S7, we use the `new_generic()` function. Here's is how I've done that to create `draw()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw <- new_generic(\"draw\", dispatch_args = \"object\")\n```\n:::\n\n\nIn this code, the `dispatch_args` argument is used to indicate which arguments to the `draw()` function should be used in method dispatch. I've kept it simple in this case: the specific method that S7 will choose for `draw()` is based on the class of the `object` argument. For the moment, the only class for which I really need to supply a method is the `drawable` class (i.e., how should `draw()` handle the input when it is passed a single `drawable` object), but very shortly I'm going to define a `sketch` class that allows many `drawable` objects to be composed into a single image, so I'll need a `draw()` method to handle `sketch` inputs as well. \n\nBut I am getting ahead of myself. To specify a method for an S7 generic function, we call the `method()` function and specify the generic for which the method is to be defined (i.e., `draw()`), and the class for which the method is defined (i.e., `drawable`). Here's the code that I used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmethod(draw, drawable) <- function(object, xlim = NULL, ylim = NULL, ...) {\n\n  # plotting area is a single viewport with equal-axis scaling\n  if (is.null(xlim)) xlim <- range(object@points@x)\n  if (is.null(ylim)) ylim <- range(object@points@x)\n  x_width <- xlim[2] - xlim[1]\n  y_width <- ylim[2] - ylim[1]\n  vp <- grid::viewport(\n    xscale = xlim,\n    yscale = ylim,\n    width  = grid::unit(min(1, x_width / y_width), \"snpc\"),\n    height = grid::unit(min(1, y_width / x_width), \"snpc\"),\n  )\n\n  # shapes are always polygon grobs\n  grob <- grid::polygonGrob(\n    x = object@points@x,\n    y = object@points@y,\n    gp = grid::gpar(\n      col = object@style@color,\n      fill = object@style@fill,\n      lwd = object@style@linewidth\n    ),\n    vp = vp,\n    default.units = \"native\"\n  )\n\n  # draw the grob\n  grid::grid.newpage()\n  grid::grid.draw(grob)\n}\n```\n:::\n\n\nIf you are familiar with the grid package, you can immediately see that this is a very simple use of grid (e.g., compare it to ggplot2, which is very sophisticated in how it uses grid). All I'm doing here is defining a *single* plotting region (i.e., the viewport) and -- because this is art rather than data visualisation -- using `\"snpc\"` units to enforce a strong constraint that the x and y axes of this plot region will always be on the same scale, similar to how `coord_equal()` works in ggplot2. Our `drawable` object is then used to construct a single polygon grob: the internal `points` object contained within every drawable is used to define the vertices of the polygon, and the internal `style` object contained within every drawable is used to specify the graphical parameters associated with the polygone. See? I told you that all the effort we went to in imposing structure on the `drawable` class would come in handy. The `draw()` method is easy to write because the structure of the objects is aligned with the underlying functions we want those objects to support. \n\nSo here we go. At last we can draw simple shapes. Here's our circle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw(cc)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nHere is our square:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw(sq)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nNot exactly high-calibre art, but the foundations are in place for us to start building more interesting tools atop these classes and methods. \n\n### Making sketches\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsketch <- new_class(\n  name = \"sketch\",\n  properties = list(\n    shapes = new_property(class = class_list, default = list())\n  ),\n  validator = function(self) {\n    if (!all(purrr::map_lgl(self@shapes, \\(d) inherits(d, \"drawable\")))) {\n      \"shapes must be a list of drawable-classed objects\"\n    }\n  }\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmethod(draw, sketch) <- function(object, xlim = NULL, ylim = NULL, ...) {\n\n  # set default axis limits\n  if (is.null(xlim)) {\n    xlim <- c(\n      min(purrr::map_dbl(object@shapes, \\(s, id) min(s@points@x))),\n      max(purrr::map_dbl(object@shapes, \\(s, id) max(s@points@x)))\n    )\n  }\n  if (is.null(ylim)) {\n    ylim <- c(\n      min(purrr::map_dbl(object@shapes, \\(s) min(s@points@y))),\n      max(purrr::map_dbl(object@shapes, \\(s) max(s@points@y)))\n    )\n  }\n\n  # plotting area is a single viewport with equal-axis scaling\n  x_width <- xlim[2] - xlim[1]\n  y_width <- ylim[2] - ylim[1]\n  vp <- grid::viewport(\n    xscale = xlim,\n    yscale = ylim,\n    width  = grid::unit(min(1, x_width / y_width), \"snpc\"),\n    height = grid::unit(min(1, y_width / x_width), \"snpc\"),\n  )\n\n  # draw the grobs\n  grid::grid.newpage()\n  for(s in object@shapes) {\n    grob <- grid::polygonGrob(\n      x = s@points@x,\n      y = s@points@y,\n      gp = grid::gpar(\n        col = s@style@color,\n        fill = s@style@fill,\n        lwd = s@style@linewidth\n      ),\n      vp = vp,\n      default.units = \"native\"\n    )\n    grid::grid.draw(grob)\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsk <- sketch(list(cc, sq))\ndraw(sk)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n### Fallback methods\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmethod(draw, class_any) <- function(object, ...) {\n  rlang::warn(\"Non-drawable objects ignored by draw()\")\n  return(invisible(NULL))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndraw(\"a string is not a drawable\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Non-drawable objects ignored by draw()\n```\n:::\n:::\n\n\n## Act III: Ambient\n\n\n### Blobs\n\nBlobs are essentially \"circles with a non-constant radius\", where the irregularity in the radius is a smoothly varying distortion created with Perlin noise:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblob <- new_class(\n  name = \"blob\",\n  parent = drawable,\n  properties = list(\n    x          = class_numeric,\n    y          = class_numeric,\n    radius     = class_numeric,\n    range      = class_numeric,\n    n          = class_integer,\n    frequency  = class_numeric,\n    octaves    = class_integer,\n    seed       = class_integer,\n    points = new_property(\n      class = points,\n      getter = function(self) {\n        angle <- seq(0, 2*pi, length.out = self@n)\n        pointwise_radius <- ambient::fracture(\n          noise = ambient::gen_simplex,\n          fractal = ambient::fbm,\n          x = self@x + cos(angle) * self@radius,\n          y = self@y + sin(angle) * self@radius,\n          frequency = self@frequency,\n          seed = self@seed,\n          octaves = self@octaves\n        ) |>\n          ambient::normalize(to = self@radius + c(-1, 1) * self@range)\n        points(\n          x = self@x + pointwise_radius * cos(angle),\n          y = self@y + pointwise_radius * sin(angle)\n        )\n      }\n    )\n  ),\n  constructor = function(x = 0,\n                         y = 0,\n                         radius = 1,\n                         range = 0.2,\n                         n = 100L,\n                         frequency = 1,\n                         octaves = 2L,\n                         seed = 1L,\n                         ...) {\n    new_object(\n      drawable(),\n      x = x,\n      y = y,\n      radius = radius,\n      range = range,\n      n = n,\n      frequency = frequency,\n      octaves = octaves,\n      seed = seed,\n      style = style(...)\n    )\n  },\n  validator = function(self) {\n    if (length(self@x) != 1) return(\"x must be length 1\")\n    if (length(self@y) != 1) return(\"y must be length 1\")\n    if (length(self@radius) != 1) return(\"radius must be length 1\")\n    if (length(self@range) != 1) return(\"range must be length 1\")\n    if (length(self@n) != 1) return(\"n must be length 1\")\n    if (length(self@frequency) != 1) return(\"frequency must be length 1\")\n    if (length(self@octaves) != 1) return(\"octaves must be length 1\")\n    if (length(self@seed) != 1) return(\"seed must be length 1\")\n    if (self@radius < 0) return(\"radius must be a non-negative number\")\n    if (self@range < 0) return(\"range must be a non-negative number\")\n    if (self@frequency < 0) return(\"frequency must be a non-negative number\")\n    if (self@n < 1L) return(\"n must be a positive integer\")\n    if (self@octaves < 1L) return(\"octaves must be a positive integer\")\n  }\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbb <- blob(n = 500L)\ndraw(bb)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nSo, using the rainbow `palette` I defined at the top of the post:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalues <- tibble::tibble(\n  x = cos(seq(0, pi * 5/3, length.out = 6)),\n  y = sin(seq(0, pi * 5/3, length.out = 6)),\n  n = 500L,\n  fill = palette,\n  color = fill\n)\n\nblobs <- purrr::pmap(values, blob)\nblobs |> sketch() |> draw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n### Ribbons\n\nRibbons are similar to blobs, but the polygon is defined by movement along a line rather than around a circle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nribbon <- new_class(\n  name = \"ribbon\",\n  parent = drawable,\n  properties = list(\n    x          = class_numeric,\n    y          = class_numeric,\n    xend       = class_numeric,\n    yend       = class_numeric,\n    width      = class_numeric,\n    n          = class_integer,\n    frequency  = class_numeric,\n    octaves    = class_integer,\n    seed       = class_integer,\n    points = new_property(\n      class = points,\n      getter = function(self) {\n        x <- seq(self@x, self@xend, length.out = self@n)\n        y <- seq(self@y, self@yend, length.out = self@n)\n        displacement <- ambient::fracture(\n          noise = ambient::gen_simplex,\n          fractal = ambient::fbm,\n          x = x,\n          y = y,\n          frequency = self@frequency,\n          seed = self@seed,\n          octaves = self@octaves\n        ) |>\n          ambient::normalize(to = c(0, 1))\n        taper <- sqrt(\n          seq(0, 1, length.out = self@n) * seq(1, 0, length.out = self@n)\n        )\n        width <- displacement * taper * self@width\n        dx <- self@xend - self@x\n        dy <- self@yend - self@y\n        points(\n          x = c(x - width * dy, x[self@n:1L] + width[self@n:1L] * dy),\n          y = c(y + width * dx, y[self@n:1L] - width[self@n:1L] * dx)\n        )\n      }\n    )\n  ),\n  constructor = function(x = 0,\n                         y = 0,\n                         xend = 1,\n                         yend = 1,\n                         width = 0.2,\n                         n = 100L,\n                         frequency = 1,\n                         octaves = 2L,\n                         seed = 1L,\n                         ...) {\n    new_object(\n      drawable(),\n      x = x,\n      y = y,\n      xend = xend,\n      yend = yend,\n      width = width,\n      n = n,\n      frequency = frequency,\n      octaves = octaves,\n      seed = seed,\n      style = style(...)\n    )\n  },\n  validator = function(self) {\n    if (length(self@x) != 1) return(\"x must be length 1\")\n    if (length(self@y) != 1) return(\"y must be length 1\")\n    if (length(self@xend) != 1) return(\"xend must be length 1\")\n    if (length(self@yend) != 1) return(\"yend must be length 1\")\n    if (length(self@width) != 1) return(\"width must be length 1\")\n    if (length(self@n) != 1) return(\"n must be length 1\")\n    if (length(self@frequency) != 1) return(\"frequency must be length 1\")\n    if (length(self@octaves) != 1) return(\"octaves must be length 1\")\n    if (length(self@seed) != 1) return(\"seed must be length 1\")\n    if (self@width < 0) return(\"width must be a non-negative number\")\n    if (self@frequency < 0) return(\"frequency must be a non-negative number\")\n    if (self@n < 1L) return(\"n must be a positive integer\")\n    if (self@octaves < 1L) return(\"octaves must be a positive integer\")\n  }\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrb <- ribbon(n = 500L)\ndraw(rb)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(101L)\nvalues <- tibble::tibble(\n  x = rnorm(200L, sd = 1.5),\n  y = rnorm(200L, sd = 1.5),\n  xend = x + 1,\n  yend = y,\n  width = 1,\n  n = 500L,\n  fill = sample(palette, 200L, replace = TRUE),\n  color = fill\n)\n\nribbons <- purrr::pmap(values, ribbon)\nribbons |> \n  sketch() |> \n  draw(xlim = c(-2, 2), ylim = c(-2, 2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}