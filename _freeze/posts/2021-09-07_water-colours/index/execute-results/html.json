{
  "hash": "56b5b8207a4a0900fa8960413fc57762",
  "result": {
    "markdown": "---\ntitle: \"Art, jasmines, and the water colours\"\ndescription: | \n  An essay and tutorial covering a few useful art techniques in R\nparams:\n  slug: water-colours\n  date: 2021-09-07\ndate: 2021-09-07\nimage: jasmine-recollected.png\ncategories: [Art]\ncitation:\n  url: https://blog.djnavarro.net/water-colours\nexecute:\n  out.width: \"100%\"\nformat:\n  html:\n    css: strapless.css\n---\n\n\n\n<!--------------- setup ----------------->\n\n\n\n\n\n\n\n\n<!--------------- post ----------------->\n\n\n## Prelude\n\nIn recent weeks I've been posting generative art from the [Water Colours](https://art.djnavarro.net/gallery/water-colours/) series on twitter. The series has been popular, prompting requests that I sell prints, mint NFTs, or write a tutorial showing how they are made. For personal reasons I didn't want to commercialise this series. Instead, I chose to make the pieces freely available under a CC0 public domain licence and asked people to donate to a [gofundme](https://au.gofundme.com/f/data-science-art-to-support-a-womens-refuge) I set up for a charitable organisation I care about (the [Lou's Place](https://www.lousplace.com.au/) women's refuge here in Sydney). I'm not going to discuss the personal story behind this series, but it does matter. As I've mentioned [previously](/posts/2021-07-08_generative-art-in-r/), the art I make is inherently tied to moods. It is emotional in nature. In hindsight it is easy enough to describe how the system is implemented but this perspective is misleading. Although a clean and unemotional description of the code is useful for explanatory purposes, the actual *process* of creating the system is deeply tied to my life, my history, and my subjective experience. Those details are inextricably bound to the system. A friend described it better than I ever could:\n\n> The computer doesn't make this art any more than a camera makes a photograph; art is always intimate ([Amy Patterson](https://twitter.com/justanotheramy/status/1432916731794579460))\n\nIn this post I'll describe the mechanistic processes involved in creating these pieces, but this is woefully inadequate as a description of the artistic process as a whole. The optical mechanics of a camera do not circumscribe the work of a skilled photographer. So it goes with generative art. The code describes the mechanics; it does not describe the art. There is a deeply personal story underneath these pieces (one that I won't tell here), and I would no more mint an NFT from that story than I would sell a piece of my soul to a collector.\n\n## The water colours repository\n\n### Why use version control here?\n\nWhen I started making generative art I didn't think much about archiving my art or keeping it organised. I liked making pretty things, and that was as far as my thought process went. I didn't place the code under version control, and I stored everything in my Dropbox folder. There's nothing wrong with that: some things don't belong on GitHub. During the development phase of any art project that's still what I do, and I'm perfectly happy with it.\n\nThings become a little trickier when you want to share the art. My [art website](https://art.djnavarro.net) is hosted on GitHub pages, and so my initial approach was to keep the art in the website repository. *Huuuuge mistake.* Sometimes the image files can be quite large and sometimes a series contains a large number of images. By the time I'd reached 40+ series, Hugo took a very long time to build the site (several minutes), and GitHub took even longer to deploy it (over half an hour).\n\nEventually I decided it made more sense to have one repository per series. Each one uses the \"series-\" prefix to remind me it's an art repo. I don't use these repositories during development: they exist solely to snapshot the release. For example, the [series-water-colours](https://github.com/djnavarro/series-water-colours) repository isn't going to be updated regularly, it's really just an archive combined with a \"docs\" folder that is used to host a minimal GitHub Pages site that makes the images public. It's convenient for my purposes because my art website doesn't have to host any of the images: all it does is hotlink to the images that are exposed via the series repo.\n\nIt may seem surprising that I've used GitHub for this. Image files aren't exactly well suited to version control, but it's not like they're going to be updated. Plus, there are a lot of advantages. I can explicitly include licencing information in the repository, I can release source code (when I want to), and I can include a readme file for anyone who wants to use it. \n\n### The manifest file\n\nOne nice feature of doing things this way is that it has encouraged me to include a [manifest file](\"https://djnavarro.net/series-water-colours/manifest.csv\"). Because the image files belong to a completely different repository to the website, I need a way to automatically inspect the image repository and construct the links I need (because I'm waaaaaay too lazy to add the links by hand). That's the primary function of the manifest. The manifest.csv file is a plain csv file with one row per image, and one column for each piece of metadata I want to retain about the images. It might seem like organisational overkill to be this precise about the art, but I'm starting to realise that if I don't have a proper system in place I'll forget minor details like *\"what the piece is called\"* or *\"when I made it\"*. That seems bad :-) \n\n\n::: {.cell hash='index_cache/html/water-colour-manifest_12dd8f4f937e4ccdb55017b95da48001'}\n\n:::\n\n\nI can use `readr::read_csv()` to download the manifest and do a little data wrangling to organise it into a format that is handy to me right now:\n\n:::{.column-margin}\nThe data wrangling code is [here](https://github.com/djnavarro/quarto-blog/blob/master/posts/2021-09-07_water-colours/index.qmd#L71-L85) \n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmanifest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 9\n   series      sys_id img_id short_n…¹ format long_…² date       path_…³ path_…⁴\n   <chr>       <chr>  <chr>  <chr>     <chr>  <chr>   <date>     <chr>   <chr>  \n 1 watercolour sys02  img34  teacup-o… jpg    Ocean … 2021-07-31 https:… https:…\n 2 watercolour sys02  img31  incursio… jpg    Incurs… 2021-08-14 https:… https:…\n 3 watercolour sys02  img32  percolate jpg    Percol… 2021-08-21 https:… https:…\n 4 watercolour sys02  img37  gentle-d… jpg    Gentle… 2021-08-21 https:… https:…\n 5 watercolour sys02  img41  stormy-s… jpg    Stormy… 2021-08-22 https:… https:…\n 6 watercolour sys02  img42  turmeric  jpg    Turmer… 2021-08-24 https:… https:…\n 7 watercolour sys02  img43  torn-and… jpg    Torn a… 2021-08-24 https:… https:…\n 8 watercolour sys02  img47  inferno   jpg    Sevent… 2021-08-27 https:… https:…\n 9 watercolour sys02  img48  storm-ce… jpg    Storm … 2021-08-27 https:… https:…\n10 watercolour sys02  img49  tonal-ea… jpg    Tonal … 2021-08-29 https:… https:…\n11 watercolour sys02  img50  cold-fro… jpg    Cold F… 2021-08-29 https:… https:…\n12 watercolour sys02  img51  kintsugi… jpg    Kintsu… 2021-08-29 https:… https:…\n13 watercolour sys02  img53  departure jpg    Depart… 2021-08-29 https:… https:…\n14 watercolour sys02  img54  echo      jpg    Echo    2021-08-30 https:… https:…\n15 watercolour sys02  img57  portal    jpg    Portal  2021-08-31 https:… https:…\n16 watercolour sys02  img60  salt-sto… jpg    Gods o… 2021-08-31 https:… https:…\n17 watercolour sys02  img61  amanecer… jpg    El Últ… 2021-09-01 https:… https:…\n18 watercolour sys02  img65  plume     jpg    Plume   2021-09-02 https:… https:…\n19 watercolour sys02  img67  woodland… jpg    Woodla… 2021-09-02 https:… https:…\n20 watercolour sys02  img68  below-th… jpg    Below … 2021-09-03 https:… https:…\n# … with abbreviated variable names ¹​short_name, ²​long_name, ³​path_2000,\n#   ⁴​path_500\n```\n:::\n:::\n\n\n\n### Previewing the artwork\n\nMore to the point, the `manifest` data frame is nicely suited for use with the [bs4cards](https://bs4cards.djnavarro.net/) package, so I can display some of the pieces in a neat and tidy thumbnail grid. Here are the first eight pieces from the series, arranged by date of creation:\n\n\n::: {.cell hash='index_cache/html/water-colour-cards_f92e1b6fa1710ddd3daea13365b68307'}\n\n```{.r .cell-code}\nmanifest[1:8, ] %>% \n  bs4cards::cards(\n    image = path_500,\n    link = path_2000,\n    title = long_name,\n    spacing = 3,\n    width = 2\n  )  \n```\n\n::: {.cell-output-display}\n```{=html}\n<div>\n<div class=\"row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4\" style=\"margin-left: -.4rem; margin-right: -.4rem; margin-top: 1rem; margin-bottom: 1rem; \">\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img34_teacup-ocean.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img34_teacup-ocean.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img34_teacup-ocean.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Ocean in a Teacup</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img31_incursions.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img31_incursions.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img31_incursions.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Incursions</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img32_percolate.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img32_percolate.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img32_percolate.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Percolate</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img37_gentle-descent.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img37_gentle-descent.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img37_gentle-descent.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Gentle Descent</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img41_stormy-seas.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img41_stormy-seas.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img41_stormy-seas.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Stormy Seas</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img42_turmeric.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img42_turmeric.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img42_turmeric.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Turmeric Against Grey Tuesday</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img43_torn-and-frayed.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img43_torn-and-frayed.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img43_torn-and-frayed.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Torn and Frayed</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img47_inferno.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img47_inferno.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img47_inferno.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Seventh Circle</h5>\n</a>\n</div>\n</div>\n</div>\n</div>\n```\n:::\n:::\n\n\nEach thumbnail image links to a medium resolution (2000 x 2000 pixels) jpg version of the corresponding piece, if you'd like to see the images in a little more detail. \n\n## Dependencies \n\nIn the remainder of this post I'll walk you through the process of creating pieces \"in the style of\" the water colours series. If you really want to, you can take a look at the  [actual source](https://github.com/djnavarro/series-water-colours/blob/master/source/watercolours_02.R), but it may not be very helpful: the code is little opaque, poorly structured, and delegates a lot of the work to the [halftoner](https://github.com/cmarcum/halftoner) and [jasmines](https://jasmines.djnavarro.net/) packages, neither of which is on CRAN. To make it a little easier on you, I'll build a new system in this post that adopts the same core ideas. \n\nIn this post I'll assume you're already familiar with data wrangling and visualisation with tidyverse tools. This is the subset of [tidyverse](https://www.tidyverse.org/) packages that I have attached, and the code that follows relies on all these in some fashion:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(dplyr)\n```\n:::\n\n\n:::{.column-margin}\nThe R environment is specified formally in the [lockfile](https://github.com/djnavarro/quarto-blog/tree/master/posts/2021-09-07_water-colours/renv.lock). It's a story for another day, but for reproducibility purposes I have a separate [renv configuration](https://rstudio.github.io/renv/) for every post\n:::\n\nIn addition to tidyverse and base R functions, I'll use a few other packages as well. The [magick](https://docs.ropensci.org/magick/), [raster](https://github.com/rspatial/raster/), [rprojroot](https://rprojroot.r-lib.org/), [fs](https://fs.r-lib.org/), and [ambient](https://ambient.data-imaginist.com/) packages are all used in making the art. Because functions from those packages may not be as familiar to everyone, I'll namespace the calls to them in the same way I did with `bs4cards::cards()` previously. Hopefully that will make it easier to see which functions belong to one of those packages.\n\n\n## Art from image processing\n\n### Finding the image file\n\nAs in life, the place to start is knowing where you are. \n\nThis post is part of my blog, and I'll need to make use of an image file called `\"jasmine.jpg\"` stored alongside my R markdown. First, I can use [rprojroot](https://rprojroot.r-lib.org/) to find out where my blog is stored. I'll do that by searching for a `\"_quarto.yml\"` file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblog <- rprojroot::find_root(\"_quarto.yml\")\nblog\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/home/danielle/GitHub/sites/quarto-blog\"\n```\n:::\n:::\n\n\nI suspect that most people reading this would be more familiar with the [here](https://here.r-lib.org/) package that provides a simplified interface to rprojroot and will automatically detect the .Rproj or .here file associated with your project. In fact, because the `here::here()` function is so convenient, it's usually my preferred method for solving this problem. Sometimes, however, the additional flexibility provided by rprojroot is very useful. Some of my projects are comprised of partially independent sub-projects, each with a distinct root directory. That happens sometimes when blogging: there are contexts in which you might want to consider \"the blog\" to be the project, but other contexts in which \"the post\" might be the project. If you're not careful this can lead to chaos (e.g., RStudio projects nested inside other RStudio projects), and I've found rprojroot very helpful in avoiding ambiguity in these situations.\n\nHaving chosen \"the blog\" as the root folder, the next step in orientation is to find the post folder. Because this is a [distill](https://rstudio.github.io/distill/) blog, all my posts are stored in the `_posts` folder, and I've adopted a consistent [naming](https://slides.djnavarro.net/project-structure/) [convention](https://speakerdeck.com/jennybc/how-to-name-files) for organising the post folders. Every name begins with the post date in year-month-day format, followed by a human-readable \"slug\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\npost <- paste(params$date, params$slug, sep = \"_\")\npost\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-09-07_water-colours\"\n```\n:::\n:::\n\n\nThis allows me to construct the path to the image file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- fs::path(blog, \"posts\", post, \"jasmine.jpg\")\nfile\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/home/danielle/GitHub/sites/quarto-blog/posts/2021-09-07_water-colours/jasmine.jpg\n```\n:::\n:::\n\n\nHere's the image:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](jasmine.jpg){width=960}\n:::\n:::\n\n\n:::{.column-margin}\nThe photo has an emotional resonance to me: it dates back to 2011 and appeared on the cover of [Learning Statistics with R](https://learningstatisticswithr.com). Although 10 years separate the *Water Colours* series from the text and the photo, the two are linked by a shared connection to events from a decade ago \n:::\n\n### Importing the image\n\nOur next step is to import the image into R at a suitable resolution. The original image size is 1000x600 pixels, which is a little more than we need. Here's a simple `import_image()` function that does this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport_image <- function(path, width, height) {\n  geometry <- paste0(width, \"x\", height) # e.g., \"100x60\"\n  path %>% \n    magick::image_read() %>% \n    magick::image_scale(geometry)\n}\n```\n:::\n\n\nInternally, the work is being done by the fabulous [magick](https://docs.ropensci.org/magick/) package that provides bindings to the [ImageMagick](https://imagemagick.org/) library. In truth, it's the ImageMagick library that is doing most the work here. R doesn't load the complete image, it lets ImageMagick take care of that. Generally that's a good thing for performance reasons (you don't want to load large images into memory if you can avoid it), but in this case we're going to work with the raw image data inside R.\n\nThis brings us to the next task...\n\n### Converting the image to data\n\nConverting the image into a data structure we can use is a two step process. First, we create a matrix that represents the image in a format similar to the image itself. That's the job of the `construct_matrix()` function below. It takes the `image` as input, and first coerces it to a raster object and then to a regular matrix: in the code below, the matrix is named `mat`, and the pixel on the i-th row and j-th column of the image is represented by the contents of `mat[i, j]`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nconstruct_matrix <- function(image) {\n  \n  # read matrix\n  mat <- image %>% \n    as.raster() %>%\n    as.matrix()\n  \n  # use the row and column names to represent co-ordinates\n  rownames(mat) <- paste0(\"y\", nrow(mat):1) # <- flip y\n  colnames(mat) <- paste0(\"x\", 1:ncol(mat))\n  \n  return(mat)\n}\n```\n:::\n\n\nA little care is needed when interpreting the rows of this matrix. When we think about graphs, the values on y-axis increase as we move our eyes upwards from the bottom, so our mental model has the small numbers at the bottom and the big numbers at the top. But that's not the only mental model in play here. When we read a matrix or a table we don't *look* at it, we *read* it - and we read from top to bottom. A numbered list, for example, has the smallest numbers at the top, and the numbers get bigger as we read down the list. Both of those mental models are sensible, but it's hard to switch between them. \n\nThe tricky part here is that the raw image is encoded in \"reading format\". It's supposed to be read like a table or a list, so the indices increase as we read down the image. The image data returned by `construct_matrix()` is organised this format. However, when we draw pictures with ggplot2 later on, we're going to need to switch to a \"graph format\" convention with the small numbers at the bottom. That's the reason why the code above flips the order of the row names. Our next task will be to convert this (reading-formatted) matrix into a tidy tibble, and those row and column names will become become our (graph-formatted) x- and y-coordinates, so the row names need to be labelled in reverse order.\n\nTo transform the image matrix into a tidy tibble, I've written a handy `construct_tibble()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconstruct_tibble <- function(mat) {\n  \n  # convert to tibble\n  tbl <- mat %>%\n    as.data.frame() %>%\n    rownames_to_column(\"y\") %>%\n    as_tibble() \n  \n  # reshape\n  tbl <- tbl %>%\n    pivot_longer(\n      cols = starts_with(\"x\"),\n      names_to = \"x\",\n      values_to = \"shade\"\n    ) \n  \n  # tidy\n  tbl <- tbl %>%\n    arrange(x, y) %>% \n    mutate(\n      x = x %>% str_remove_all(\"x\") %>% as.numeric(),\n      y = y %>% str_remove_all(\"y\") %>% as.numeric(),\n      id = row_number()\n    )\n  \n  return(tbl)\n}\n```\n:::\n\n\nThe code has the following strucure:\n\n- The first part of this code coerces the matrix to a plain data frame, then uses `rownames_to_columns()` to extract the row names before coercing it to a tibble. This step is necessary because tibbles don't have row names, and we need those row names: our end goal is to have a variable `y` to store those co-ordinate values. \n\n- The second part of the code uses `pivot_longer()` to capture all the other variables (currently named `x1`, `x2`, etc) and pull them down into a single column that specifies the `x` co-ordinate. At this stage, the `tbl` tibble contains three variables: an `x` value, a `y` value, and a `shade` that contains the hex code for a colour. \n\n- The last step is to tidy up the values. After `pivot_longer()` does its job, the `x` variable contains strings like `\"x1\"`, `\"x2\"`, etc, but we'd prefer them to be actual numbers like `1`, `2`, etc. The same is true for the `y` variable. To fix this, the last part of the code does a tiny bit of string manipulation using `str_remove_all()` to get rid of the unwanted prefixes, and then coerces the result to a number.\n\n:::{.column-margin}\nThe `names_prefix` argument to `pivot_longer()` can transform `x` without the third step, but I prefer the verbose form. I find it easier to read and it treats `x` and `y` the same \n:::\n\nTaken together, the `import_image()`, `construct_matrix()`, and `construct_tibble()` functions provide us with everything we need to pull the data from the image file and wrangle it into a format that ggplot2 is expecting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\njas <- file %>% \n  import_image(width = 100, height = 60) %>% \n  construct_matrix() %>% \n  construct_tibble()\n\njas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,000 × 4\n       y     x shade        id\n   <dbl> <dbl> <chr>     <int>\n 1     1     1 #838c70ff     1\n 2    10     1 #3c3123ff     2\n 3    11     1 #503d3dff     3\n 4    12     1 #363126ff     4\n 5    13     1 #443a30ff     5\n 6    14     1 #8a6860ff     6\n 7    15     1 #665859ff     7\n 8    16     1 #5a5d51ff     8\n 9    17     1 #535c4cff     9\n10    18     1 #944b61ff    10\n# … with 5,990 more rows\n```\n:::\n:::\n\n\nA little unusually, the hex codes here are specified in RGBA format: the first two alphanumeric characters specify the hexadecimal code for the red level, the second two represent the green level (or \"channel\"), the third two are the blue channel, and the last two are the opacity level (the alpha channel). I'm going to ignore the alpha channel for this exercise though.\n\nThere's one last thing to point out before turning to the fun art part. Notice that `jas` also contains an `id` column (added by the third part of the `construct_tibble()` function). It's generally good practice to have an `id` column that uniquely identifies each row, and will turn out to be useful later when we need to join this data set with other data sets that we'll generate.\n\n### Art from data visualisation\n\nLet the art begin!\n\nThe first step is to define a helper function `ggplot_themed()` that provides a template that we'll reuse in every plot. Mostly this involves preventing ggplot2 from doing things it wants to do. When we're doing data visualisation it's great that ggplot2 automatically provides things like \"legends\", \"axes\", and \"scales\" to map from data to visual aesthetics, but from an artistic perspective they're just clutter. I don't want to manually strip that out every time I make a plot, so it makes sense to have a function that gets rid of all those things:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot_themed <- function(data) {\n  data %>% \n    ggplot(aes(x, y)) +\n    coord_equal() + \n    scale_size_identity() + \n    scale_colour_identity() + \n    scale_fill_identity() + \n    theme_void() \n}\n```\n:::\n\n\nThis \"template function\" allows us to start with a clean slate, and it makes our subsequent coding task easier. The `x` and `y` aesthetics are already specified, ggplot2 won't try to \"interpret\" our colours and sizes for us, and it won't mess with the aspect ratio. In a sense, this function turns off the autopilot: we're flying this thing manually... \n\nThere are many ways to plot the `jas` data in ggplot2. The least imaginative possibility is `geom_tile()`, which produces a pixellated version of the jasmines photo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\njas %>% \n  ggplot_themed() + \n  geom_tile(aes(fill = shade)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/jasmine-raster-image-1.png){width=672}\n:::\n:::\n\n\nOf course, if you are like me you always forget to use the fill aesthetic. The muscle memory tells me to use the colour aesthetic, so I often end up drawing something where only the borders of the tiles are coloured:\n\n\n::: {.cell}\n\n```{.r .cell-code}\njas %>% \n  ggplot_themed() + \n  geom_tile(aes(colour = shade)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/jasmine-raster-variant-image-1.png){width=672}\n:::\n:::\n\n\nIt's surprisingly pretty, and a cute demonstration of how good the visual system is at reconstructing images from low-quality input: remarkably, the jasmines are still perceptible despite the fact that most of the plot area is black. I didn't end up pursuing this (yet!) but I think there's a lot of artistic potential here. It might be worth playing with at a later date. In that sense generative art is a lot like any other kind of art (or, for that matter, science). It is as much about exploration and discovery as it is about technical prowess. \n\nThe path I did follow is based on `geom_point()`. Each pixel in the original image is plotted as a circular marker in the appropriate colour. Here's the simplest version of this idea applied to the `jas` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\njas %>% \n  ggplot_themed() + \n  geom_point(aes(colour = shade)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/jasmine-scatter-image-1.png){width=672}\n:::\n:::\n\n\nIt's simple, but I like it.\n\n### Extracting the colour channels\n\nUp to this point we haven't been manipulating the colours in any of the plots: the hex code in the `shade` variable is left intact. There's no inherent reason we should limit ourselves to such boring visualisations. All we need to do is extract the different \"colour channels\" and start playing around. \n\nIt's not too difficult to do this: base R provides the `col2rgb()` function that separates the hex code into red, green, blue channels, and represents each channel with integers between 0 and 255. It also provides the `rgb2hsv()` function that converts this RGB format into [hue, saturation, and value](https://en.wikipedia.org/wiki/HSL_and_HSV) format, represented as numeric values between 0 and 1.\n\nThis technique is illustrated by the `extract_channels()` helper function shown below. It looks at the  `shade` column in the data frame, and adds six new columns, one for each channel. I'm a sucker for variable names that are all the same length (often unwisely), and I've named them `red`, `grn`, `blu`, `hue`, `sat`, and `val`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_channels <- function(tbl) {\n  rgb <- with(tbl, col2rgb(shade))\n  hsv <- rgb2hsv(rgb)\n  tbl <- tbl %>% \n    mutate(\n      red = rgb[1, ],\n      grn = rgb[2, ],\n      blu = rgb[3, ],\n      hue = hsv[1, ],\n      sat = hsv[2, ],\n      val = hsv[3, ]\n    )\n  return(tbl)\n}\n```\n:::\n\n\nHere's what that looks like applied to the `jas` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\njas <- extract_channels(jas)\njas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,000 × 10\n       y     x shade        id   red   grn   blu    hue   sat   val\n   <dbl> <dbl> <chr>     <int> <int> <int> <int>  <dbl> <dbl> <dbl>\n 1     1     1 #838c70ff     1   131   140   112 0.220  0.200 0.549\n 2    10     1 #3c3123ff     2    60    49    35 0.0933 0.417 0.235\n 3    11     1 #503d3dff     3    80    61    61 0      0.237 0.314\n 4    12     1 #363126ff     4    54    49    38 0.115  0.296 0.212\n 5    13     1 #443a30ff     5    68    58    48 0.0833 0.294 0.267\n 6    14     1 #8a6860ff     6   138   104    96 0.0317 0.304 0.541\n 7    15     1 #665859ff     7   102    88    89 0.988  0.137 0.4  \n 8    16     1 #5a5d51ff     8    90    93    81 0.208  0.129 0.365\n 9    17     1 #535c4cff     9    83    92    76 0.260  0.174 0.361\n10    18     1 #944b61ff    10   148    75    97 0.950  0.493 0.580\n# … with 5,990 more rows\n```\n:::\n:::\n\n\nA whole new world of artistic possibilities has just emerged!\n\n### Art from channel manipulation\n\nOne way to use this representation is in [halftone images](https://en.wikipedia.org/wiki/Halftone). If you have a printer that contains only black ink, you can approximate shades of grey by using the size of each dot to represent how dark that pixel should be:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_size <- function(x) {\n  ambient::normalise(1-x, to = c(0, 2))\n}\n\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(size = map_size(val)),\n    colour = \"black\", \n    show.legend = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/jasmine-halftone-image-1.png){width=672}\n:::\n:::\n\n\n:::{.column-margin}\nIn this code the `ambient::normalise()` function is used to rescale the input to fall within a specified range. Usually ggplot2 handles this automatically, but as I mentioned, we've turned off the autopilot...\n:::\n\nFor real world printers, this approach is very convenient because it allows us to construct any shade we like using only a few different colours of ink. In the halftone world shades of grey are merely blacks of different size, pinks are merely sizes of red (sort of), and so on. \n\nBut we're not using real printers, and in any case the image above is not a very good example of a halftone format: I'm crudely mapping `1-val` to the size aesthetic, and that's not actually the right way to do this (if you want to see this done properly, look at the [halftoner](https://github.com/cmarcum/halftoner) package). The image above is \"inspired by\" the halftone concept, not the real thing. I'm okay with that, and abandoning the idea of fidelity opens up new possibilities. For example, there's nothing stopping us retaining the original hue and saturation, while using dot size to represent the intensity value. That allows us to produce \"halftonesque\" images like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = hsv(hue, sat, .5), \n      size = map_size(val)\n    ), \n    show.legend = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/jasmine-halftonesque-image-1.png){width=672}\n:::\n:::\n\n\nIn this code, the `hsv()` function takes the hue and saturation channels from the original image, but combines them with a constant intensity value: the output is a new colour specified as a hex code that ggplot2 can display in the output. Because we have stripped out the value channel, we can reuse the halftone trick. Much like a halftone image, the image above uses the size aesthetic to represent the intensity at the corresponding pixel.\n\n## Intermission\n\nUp to this point I've talked about image manipulation, and I hope you can see the artistic potential created when we pair image processing tools like magick with data visualisation tools like ggplot2. What I haven't talked about is how to choose (or generate!) the images to manipulate, and I haven't talked about how we might introduce a probabilistic component to the process. I'm not going to say much about how to choose images. The possibilities are endless. For this post I've used a photo I took in my garden many years ago, but the pieces in *Water Colours* series have a different origin: I dripped some food colouring into a glass of water and took some photos of the dye diffusing. Small sections were cropped out of these photos and often preprocessed in some fashion by changing the hue, saturation etc. These manipulated photos were then passed into a noise generation process, and the output produced images like this:\n\n\n\n::: {.cell hash='index_cache/html/water-colour-cards-2_7a2cc16f9f0ef094873102b67d6b41b8'}\n::: {.cell-output-display}\n```{=html}\n<div>\n<div class=\"row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4\" style=\"margin-left: -.4rem; margin-right: -.4rem; margin-top: 1rem; margin-bottom: 1rem; \">\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img48_storm-cell.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img48_storm-cell.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img48_storm-cell.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Storm Cell / Air Elemental</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img49_tonal-earth.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img49_tonal-earth.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img49_tonal-earth.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Tonal Earth</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img50_cold-front.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img50_cold-front.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img50_cold-front.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Cold Front</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img51_kintsugi-dreams.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img51_kintsugi-dreams.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img51_kintsugi-dreams.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Kintsugi Dreams</h5>\n</a>\n</div>\n</div>\n</div>\n</div>\n```\n:::\n:::\n\n\n\n## Art from noise generators\n\n### Multidimensional noise generation\n\nHow can we generate interesting noise patterns in R? As usual, there are many different ways you can do this, but my favourite method is to use the [ambient](https://ambient.data-imaginist.com/) package that provides bindings to the [FastNoise](https://github.com/Auburn/FastNoiseLite) C++ library. A proper description of what you can do with ambient is beyond what I can accomplish here. There are a *lot* of things you can do with a tool like this, and I've explored only a small subset of the possibilities in my art. Rather than make a long post even longer, what I'll do is link to a lovely essay on [flow fields](https://tylerxhobbs.com/essays/2020/flow-fields) and encourage you to play around yourself.\n\nTo give you a sense of what the possibilities are, I've written a `field()` function that uses the ambient package to generate noise. At its heart is `ambient::gen_simplex()`, a function that generates [simplex noise](https://en.wikipedia.org/wiki/Simplex_noise) (examples [here](https://ambient.data-imaginist.com/reference/noise_simplex.html)), a useful form of multidimensional noise that has applications in computer graphics. In the code below, the simplex noise is then modified by a [billow fractal](https://ambient.data-imaginist.com/reference/billow.html) that makes it \"lumpier\": that's the job of `ambient::gen_billow()` and `ambient::fracture()`. This is then modified one last time by the `ambient::curl_noise()` function to avoid some undesirable properties of the flow fields created by simplex noise.\n\nIn any case, here is the code. You'll probably need to read through the ambient documentation to understand all the moving parts here, but for our purposes the main things to note are the arguments. The `points` argument takes a data frame or tibble that contains the `x` and `y` coordinates of a set of points (e.g., something like the `jas` data!). The `frequency` argument controls the overall \"scale\" of the noise: does it change quickly or slowly as you move across the image? The `octaves` argument controls the amount of fractal-ness (hush, I know that's not a word) in the image. How many times do you apply the underlying transformation?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfield <- function(points, frequency = .1, octaves = 1) {\n  ambient::curl_noise(\n    generator = ambient::fracture,\n    fractal = ambient::billow,\n    noise = ambient::gen_simplex,\n    x = points$x,\n    y = points$y,\n    frequency = frequency,\n    octaves = octaves,\n    seed = 1\n  )\n}\n```\n:::\n\n\nInterpreting the output of the `field()` function requires a little care. The result *isn't* a new set of points. Rather, it is a collection of directional vectors that tell you \"how fast\" the x- and y-components are flowing at each of the locations specified in the `points` input. If we want to compute a new set of points (which is usually true), we need something like the `shift()` function below. It takes a set of `points` as input, computes the directional vectors at each of the locations, and then moves each point by a specified `amount`, using the flow vectors to work out how far to move and what direction to move. The result is a new data frame with the same columns and the same number of rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshift <- function(points, amount, ...) {\n  vectors <- field(points, ...)\n  points <- points %>%\n    mutate(\n      x = x + vectors$x * amount,\n      y = y + vectors$y * amount,\n      time = time + 1,\n      id = id\n    )\n  return(points)\n}\n```\n:::\n\n\nIt's worth noting that the `shift()` function assumes that `points` contains an `id` column as well as the `x` and `y` columns. This will be crucial later when we want to merge the output with the `jas` data. Because the positions of each point are changing, the `id` column will be the method we use to join the two data sets. It's also worth noting that `shift()` keeps track of time for you. It assumes that the input data contains a `time` column, and the output data contains the same column with every value incremented by one. In other words, it keeps the `id` constant so we know which point is referred to by the row, but modifies its position in `time` and space (`x` and `y`). Neat.\n\n### Art from the noise\n\nTo illustrate how this all works, I'll start by creating a regular 50x30 grid of points:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoints_time0 <- expand_grid(x = 1:50, y = 1:30) %>% \n  mutate(time = 0, id = row_number())\n\nggplot_themed(points_time0) + \n  geom_point(size = .5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plain-grid-1.png){width=672}\n:::\n:::\n\n\nNext, I'll apply the `shift()` function three times in succession, and bind the results into a single tibble that contains the the data at each point in time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoints_time1 <- shift(points_time0, amount = 1)\npoints_time2 <- shift(points_time1, amount = 1)\npoints_time3 <- shift(points_time2, amount = 1)\n\npts <- bind_rows(\n  points_time0, \n  points_time1, \n  points_time2,\n  points_time3\n)\n```\n:::\n\n\nThen I'll quickly write a couple of boring wrapper functions that will control how the size and transparency of the markers changes as a function of time...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_size <- function(x) {\n  ambient::normalise(x, to = c(0, 2))\n}\nmap_alpha <- function(x) {\n  ambient::normalise(-x, to = c(0, .5))\n}\n```\n:::\n\n\n...and now we can create some art:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      size = map_size(time), \n      alpha = map_alpha(time)\n    ),\n    show.legend = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/noise-stepped-image-1.png){width=672}\n:::\n:::\n\n\nSo pretty!\n\n### Accumulating art with purrr\n\n... but also so ugly. The code I used above is awfully inelegant: I've \"iteratively\" created a sequence of data frames by writing the same line of code several times. That's almost never the right answer, especially when the code doesn't know in advance how many times we want to `shift()` the points! To fix this I could write a loop (and contrary to folklore, there's nothing wrong with loops in R so long as you're careful to avoid unnecessary copying). However, I've become addicted to functional programming tools in the [purrr](https://purrr.tidyverse.org/) package, so I'm going to use those rather than write a loop. \n\nTo solve my problem I'm going to use the `purrr::accumulate()` function, which I personally feel is an [underappreciated gem](https://adv-r.hadley.nz/functionals.html#accumulate) in the functional programming toolkit. It does *precisely* the thing we want to do here: it takes one object (e.g., `points`) as input together with a second quantity (e.g., an `amount`), and uses the user-supplied function (e.g., `shift()`) to produce a *new* object that can, once again, be passed to the user-supplied function (yielding new `points`). It continues with this process, taking the output of the last iteration of `shift()` and using it as input to the next iteration, until it runs out of `amount` values. It is very similar to the better-known `purrr::reduce()` function, except that it doesn't throw away the intermediate values. The `reduce()` function is only interested in the destination; `accumulate()` is a whole journey. \n\nSo let's use it. The `iterate()` function below gives a convenient interface:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niterate <- function(pts, time, step, ...) {\n  bind_rows(accumulate(\n    .x = rep(step, time), \n    .f = shift, \n    .init = pts,\n    ...\n  ))\n}\n```\n:::\n\n\nHere's the code to recreate the `pts` data from the previous section:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts <- points_time0 %>% \n  iterate(time = 3, step = 1)\n```\n:::\n\n\nIt produces the same image, but the code is nicer!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/noise-stepped-data-3-1.png){width=672}\n:::\n:::\n\n\n\n## Assembling the parts\n\n### Adding noise to jasmines coordinates\n\nThe time has come to start assembling the pieces of the jigsaw puzzle, by applying the flow fields from the previous section to the data associated with the jasmines image. The first step in doing so is to write a small `extract_points()` function that will take a data frame (like `jas`) as input, extract the positional information (`x` and `y`) and the identifier column (`id`), and add a `time` column so that we can modify positions over time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_points <- function(data) {\n  data %>% \n    select(x, y, id) %>% \n    mutate(time = 0)\n}\n```\n:::\n\n\nHere's how we can use this. The code below extracts the positional information from `jas` and then use the `iterate()` function to iteratively shift those positions along the paths traced out by a flow field:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts <- jas %>% \n  extract_points() %>% \n  iterate(time = 20, step = .1)\n```\n:::\n\n\nThe `pts` tibble doesn't contain any of the colour information from `jas`, but it does have the \"right kind\" of positional information. It's also rather pretty in its own right:\n\n\n::: {.cell hash='index_cache/html/accumulated-noise-image_5068ecca44ec2baf3d872898cb386644'}\n\n```{.r .cell-code}\nmap_size <- function(x) {\n  ambient::normalise(x^2, to = c(0, 3.5))\n}\n\npts %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(size = map_size(time)),\n    alpha = .01,\n    show.legend = FALSE\n  ) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/accumulated-noise-image-1.png){width=672}\n:::\n:::\n\n\n### Joining the noise with jasmine colours\n\nWe can now take the pixels from the jasmines image and make them \"flow\" across the image. To do this, we'll need to reintroduce the colour information. We can do this using `full_join()` from the dplyr package. I've written a small convenience function `restore_points()` that performs the join only after removing the original `x` and `y` coordinates from the `jas` data. The reason for this is that the `pts` data now contains the positional information we need, so we want the `x` and `y` values from that data set. That's easy enough: we drop those coordinates with `select()` and then join the two tables using only the `id` column. See? I promised it would be useful!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrestore_points <- function(jas, pts) {\n  jas %>% \n    select(-x, -y) %>% \n    full_join(pts, by = \"id\") %>% \n    arrange(time, id) \n}\n```\n:::\n\n\nThe result is a tibble that looks like this:\n\n\n::: {.cell hash='index_cache/html/noisy-jasmine-data_585be5e9ea1d37592db14356f3f63db4'}\n\n```{.r .cell-code}\njas <- restore_points(jas, pts)\njas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 126,000 × 11\n   shade        id   red   grn   blu    hue   sat   val     x     y  time\n   <chr>     <int> <int> <int> <int>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 #838c70ff     1   131   140   112 0.220  0.200 0.549     1     1     0\n 2 #3c3123ff     2    60    49    35 0.0933 0.417 0.235     1    10     0\n 3 #503d3dff     3    80    61    61 0      0.237 0.314     1    11     0\n 4 #363126ff     4    54    49    38 0.115  0.296 0.212     1    12     0\n 5 #443a30ff     5    68    58    48 0.0833 0.294 0.267     1    13     0\n 6 #8a6860ff     6   138   104    96 0.0317 0.304 0.541     1    14     0\n 7 #665859ff     7   102    88    89 0.988  0.137 0.4       1    15     0\n 8 #5a5d51ff     8    90    93    81 0.208  0.129 0.365     1    16     0\n 9 #535c4cff     9    83    92    76 0.260  0.174 0.361     1    17     0\n10 #944b61ff    10   148    75    97 0.950  0.493 0.580     1    18     0\n# … with 125,990 more rows\n```\n:::\n:::\n\n\nMore importantly though, it produces images like this:\n\n\n::: {.cell hash='index_cache/html/noisy-jasmine-image_64d40cf5e07e088f0ad9214c0743206c'}\n\n```{.r .cell-code}\nmap_size <- function(x, y) {\n  ambient::normalise((1 - x) * y^2, to = c(0, 5))\n}\n\njas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = hsv(hue, sat, .5), \n      size = map_size(val, time)\n    ), \n    alpha = .03,\n    show.legend = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/noisy-jasmine-image-1.png){width=672}\n:::\n:::\n\n\nWhen colouring the image, we're using the same \"halftonesque\" trick from earlier. The colours vary only in hue and saturation. The intensity values are mapped to the size aesthetic, much like we did earlier, but this time around the size aesthetic is a function of two variables: it depends on `time` as well as `val`. The way I've set it up here is to have the points get larger as time increases, but there's no reason we have to do it that way. There are endless ways in which you could combine the positional, temporal, and shading data to create interesting generative art. This is only one example.\n\n### The last chapter\n\nAt last we have the tools we need to create images in a style similar (though not identical) to those produced by the *Water Colours* system. We can import, reorganise, and separate the data:\n\n\n::: {.cell hash='index_cache/html/jasmine-detailed-read_945802ec42602753f52e3f11bf61241a'}\n\n```{.r .cell-code}\njas <- file %>% \n  import_image(width = 200, height = 120) %>% \n  construct_matrix() %>% \n  construct_tibble() %>% \n  extract_channels()\n```\n:::\n\n\nWe can define flow fields with different properties, move the pixels through the fields, and rejoin the modified positions with the colour information\n\n\n::: {.cell hash='index_cache/html/jasmine-detailed-data_923c83b865ab495cdae3d009b7a5dbd5'}\n\n```{.r .cell-code}\npts <- jas %>% \n  extract_points() %>% \n  iterate(\n    time = 40, \n    step = .2, \n    octaves = 10, \n    frequency = .05\n  )\n\njas <- jas %>%\n  restore_points(pts)\n\njas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 984,000 × 11\n   shade        id   red   grn   blu    hue    sat   val     x     y  time\n   <chr>     <int> <int> <int> <int>  <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 #9c8178ff     1   156   129   120 0.0417 0.231  0.612     1     1     0\n 2 #81b564ff     2   129   181   100 0.274  0.448  0.710     1    10     0\n 3 #8b7870ff     3   139   120   112 0.0494 0.194  0.545     1   100     0\n 4 #eedfdbff     4   238   223   219 0.0351 0.0798 0.933     1   101     0\n 5 #c29aa3ff     5   194   154   163 0.962  0.206  0.761     1   102     0\n 6 #d5e1c3ff     6   213   225   195 0.233  0.133  0.882     1   103     0\n 7 #bde8beff     7   189   232   190 0.337  0.185  0.910     1   104     0\n 8 #b3dfbcff     8   179   223   188 0.367  0.197  0.875     1   105     0\n 9 #b2dcbdff     9   178   220   189 0.377  0.191  0.863     1   106     0\n10 #b3d9bfff    10   179   217   191 0.386  0.175  0.851     1   107     0\n# … with 983,990 more rows\n```\n:::\n:::\n\n\nWe can write customised helpers to guide how information is used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_size <- function(x, y) {\n  12 * (1 - x) * (max(y)^2 - y^2) / y^2\n}\n```\n:::\n\n\nAnd we can render the images with ggplot2:\n\n\n::: {.cell hash='index_cache/html/jasmine-detailed-image_b631bfef230aa80e6ade5fd4a74ea900'}\n\n```{.r .cell-code}\npic <- jas %>% \n  ggplot_themed() +  \n  geom_point(\n    mapping = aes(\n      colour = shade, \n      size = map_size(val, time)\n    ), \n    alpha = 1,\n    stroke = 0,\n    show.legend = FALSE\n  ) \n\npic\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/jasmine-detailed-image-1.png){width=672}\n:::\n:::\n\n\nThe colour bleeding over the edges here is to be expected. Some of the points created with `geom_point()` are quite large, and they extend some distance beyond the boundaries of the original jasmines photograph. The result doesn't appeal to my artistic sensibilities, so I'll adjust the scale limits in ggplot2 so that we don't get that strange border:\n\n\n::: {.cell hash='index_cache/html/jasmine-cropped-image_59b5406d0b5e4e4916a266225d9ab60a'}\n\n```{.r .cell-code}\npic +\n  scale_x_continuous(limits = c(11, 190), expand = c(0, 0)) +\n  scale_y_continuous(limits = c(7, 114), expand = c(0, 0))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 198656 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/jasmine-cropped-image-1.png){width=672}\n:::\n:::\n\n\nThe end result is something that has a qualitative similarity to the *Water Colours* pieces, but is also possessed of a style that is very much its own. This is as it should be. It may be true that \"all art is theft\" -- as Picasso is often misquoted as saying -- but a good artistic theft is no mere replication. It can also be growth, change, and reconstruction. \n\nA happy ending after all.\n\n## Epilogue\n\n> I find it so amazing when people tell me that electronic music has no soul. You can't blame the computer. If there's no soul in the music, it's because nobody put it there ([Björk](https://www.azquotes.com/quote/564301), via [Tim de Sousa](https://twitter.com/TimdeSousa/status/1432898952907554822))\n\n\n\n::: {.cell hash='index_cache/html/water-colour-cards-3_2324dbb0a7d769505e14765f12ca0eef'}\n::: {.cell-output-display}\n```{=html}\n<div>\n<div class=\"row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4\" style=\"margin-left: -.4rem; margin-right: -.4rem; margin-top: 1rem; margin-bottom: 1rem; \">\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img53_departure.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img53_departure.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img53_departure.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Departure</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img54_echo.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img54_echo.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img54_echo.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Echo</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img57_portal.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img57_portal.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img57_portal.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Portal</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img60_salt-stone-storm.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img60_salt-stone-storm.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img60_salt-stone-storm.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Gods of Salt, Stone, and Storm</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img61_amanecer-de-invierno.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img61_amanecer-de-invierno.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img61_amanecer-de-invierno.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">El Último Amanecer de Invierno</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img65_plume.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img65_plume.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img65_plume.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Plume</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img67_woodland-spirits.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img67_woodland-spirits.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img67_woodland-spirits.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Woodland Spirits</h5>\n</a>\n</div>\n</div>\n<div class=\"card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah \" style=\"padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img68_below-the-horizon.jpg\" style=\"color: inherit;\">\n<img src=\"https://djnavarro.net/series-water-colours/500/watercolour_sys02_img68_below-the-horizon.jpg\" class=\"card-img-top\" style=\"border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;\"/>\n</a>\n<div class=\"card-body justify-content-end m-0 p-0\" style=\"visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;\">\n<a href=\"https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img68_below-the-horizon.jpg\">\n<h5 class=\"card-title my-auto px-3 pt-3 pb-3\">Below the Horizon</h5>\n</a>\n</div>\n</div>\n</div>\n</div>\n```\n:::\n:::\n\n\n\n<!--------------- appendices go here ----------------->\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}