{
  "hash": "d5c19b018cfc85dae4a4c7499b7c6dae",
  "result": {
    "markdown": "---\ntitle: \"Crayola crayon colours\"\nauthor:\n  - name: Danielle Navarro\n    url: https://djnavarro.net\n    affiliation: A bejorted horse? In this economy?!\n    affiliation-url: https://jorts.horse\n    orcid: 0000-0001-7648-6578\ndescription: \"Am I bored in the house? Yes. And am I also in the house bored? Also yes. But do I have the rvest installed and a stubborn desire not to allow the horrors of 'data encoded in the CSS style' to defeat me? Oh my yes\"\ndate: \"2022-12-18\"\ncategories: [R, rvest]\nimage: \"crayola.png\"\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nWhat am I doing? Why am I here? Oh that's right. So I was having coffee this morning reading the nerd news on mastodon as a girl likes to do and this [this post](https://mas.to/@kims/109525496705672156) by Kim Scheinberg caught my attention. The image comes from [this blog post](http://www.datapointed.net/2010/01/crayola-crayon-color-chart/) by Stephen Von Worley (he has a [follow up](http://www.datapointed.net/2010/10/crayola-color-chart-rainbow-style/) too). \n\nInteresting. The data come from the wikipedia [list of Crayola crayon colours](https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors), and as it happens I know how to pull data from wikipedia tables into R without too much pain courtesy of [this post](https://ivelasq.rbind.io/blog/politely-scraping/) by Isabella Velásquez. After a reading a little about the [history of Crayola crayons](https://en.wikipedia.org/wiki/History_of_Crayola_crayons) I realise I am of course about to waste half a day on this...\n\n## It's the prelude, baby\n\nPolitely scrape the tables from the wikipedia page:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors\"\nraw <- url |>\n  polite::bow() |>\n  polite::scrape() |>\n  rvest::html_nodes(\"table.wikitable\")\n```\n:::\n\n\nThe first table on the wikipedia page is the listing of the Crayola standard colours, so let's pluck the first first table from our raw list and convert it to a data frame. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{html_node}\n<table class=\"wikitable sortable\">\n[1] <caption>\\n</caption>\n[2] <tbody>\\n<tr>\\n<th width=\"10%\" class=\"sortable\">Color\\n</th>\\n<th width=\" ...\n```\n:::\n:::\n\n\nAt this point we can visually inspect to see if it looks right. It mostly does but... uh... the colors haven't appeared, only those that had a listing on the web:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayola <- raw |>\n  purrr::pluck(1) |>\n  rvest::html_table()\n\ncrayola\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 168 × 9\n   Color Name              Hexad…¹ Years…² Notes 16-Bo…³ 24-Bo…⁴ 32-Bo…⁵ 64-Bo…⁶\n   <lgl> <chr>             <chr>   <chr>   <chr> <chr>   <chr>   <chr>   <chr>  \n 1 NA    Red               \"#ED0A… 1903–p… \"\"    \"Yes\"   \"Yes\"   \"Yes\"   \"Yes\"  \n 2 NA    Maroon            \"#C321… 1949–p… \"Kno… \"No\"    \"No\"    \"No\"    \"No\"   \n 3 NA    Scarlet           \"#FD0E… 1998–p… \"Kno… \"No\"    \"Yes\"   \"Yes\"   \"Yes\"  \n 4 NA    Brick Red         \"#C62D… 1958–p… \"\"    \"No\"    \"No\"    \"No\"    \"Yes\"  \n 5 NA    English Vermilion \"\"      1903–1… \"Als… \"\"      \"\"      \"\"      \"\"     \n 6 NA    Madder Lake       \"\"      1903–1… \"\"    \"\"      \"\"      \"\"      \"\"     \n 7 NA    Permanent Gerani… \"\"      1903–c… \"\"    \"\"      \"\"      \"\"      \"\"     \n 8 NA    Maximum Red       \"\"      1926–1… \"Par… \"\"      \"\"      \"\"      \"\"     \n 9 NA    Chestnut          \"#B94E… 1903–p… \"Kno… \"No\"    \"No\"    \"Yes\"   \"Yes\"  \n10 NA    Orange-Red        \"#FF53… 1958–1… \"\"    \"\"      \"\"      \"\"      \"\"     \n# … with 158 more rows, and abbreviated variable names\n#   ¹​`Hexadecimal in their website depiction[b]`, ²​`Years in production[2]`,\n#   ³​`16-Box`, ⁴​`24-Box`, ⁵​`32-Box`, ⁶​`64-Box`\n```\n:::\n:::\n\n\n## Act I: It's like a hanky code\n\nLook, that's not a big deal right? Not having any colours for a post about colours? Let's set that aside and focus on the important things. Clean names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayola <- crayola |>\n  janitor::clean_names() |>\n  dplyr::rename(\n    listed = hexadecimal_in_their_website_depiction_b,\n    years = years_in_production_2\n  )\n\ncrayola\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 168 × 9\n   color name                 listed years notes x16_box x24_box x32_box x64_box\n   <lgl> <chr>                <chr>  <chr> <chr> <chr>   <chr>   <chr>   <chr>  \n 1 NA    Red                  \"#ED0… 1903… \"\"    \"Yes\"   \"Yes\"   \"Yes\"   \"Yes\"  \n 2 NA    Maroon               \"#C32… 1949… \"Kno… \"No\"    \"No\"    \"No\"    \"No\"   \n 3 NA    Scarlet              \"#FD0… 1998… \"Kno… \"No\"    \"Yes\"   \"Yes\"   \"Yes\"  \n 4 NA    Brick Red            \"#C62… 1958… \"\"    \"No\"    \"No\"    \"No\"    \"Yes\"  \n 5 NA    English Vermilion    \"\"     1903… \"Als… \"\"      \"\"      \"\"      \"\"     \n 6 NA    Madder Lake          \"\"     1903… \"\"    \"\"      \"\"      \"\"      \"\"     \n 7 NA    Permanent Geranium … \"\"     1903… \"\"    \"\"      \"\"      \"\"      \"\"     \n 8 NA    Maximum Red          \"\"     1926… \"Par… \"\"      \"\"      \"\"      \"\"     \n 9 NA    Chestnut             \"#B94… 1903… \"Kno… \"No\"    \"No\"    \"Yes\"   \"Yes\"  \n10 NA    Orange-Red           \"#FF5… 1958… \"\"    \"\"      \"\"      \"\"      \"\"     \n# … with 158 more rows\n```\n:::\n:::\n\n\nSo. What's that maxim about never using background colour to express substantive data in a table? We've run afoul of that. Let's take a look at the elements of our html table that are *supposed* to contain the data: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncells <- raw[[1]] |> rvest::html_elements(\"td\")\ncells\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (1512)}\n [1] <td style=\"background: #ED0A3F; color: white\"> \\n</td>\n [2] <td>Red\\n</td>\n [3] <td align=\"center\" style=\"background:#E9E9E9\">#ED0A3F\\n</td>\n [4] <td>1903–present\\n</td>\n [5] <td>\\n</td>\n [6] <td style=\"background:#9EFF9E;vertical-align:middle;text-align:center;\"  ...\n [7] <td style=\"background:#9EFF9E;vertical-align:middle;text-align:center;\"  ...\n [8] <td style=\"background:#9EFF9E;vertical-align:middle;text-align:center;\"  ...\n [9] <td style=\"background:#9EFF9E;vertical-align:middle;text-align:center;\"  ...\n[10] <td style=\"background: #C32148; color: white\"> \\n</td>\n[11] <td>Maroon\\n</td>\n[12] <td align=\"center\" style=\"background:#E9E9E9\">#C32148\\n</td>\n[13] <td>\\n<a href=\"/wiki/1949\" title=\"1949\">1949</a>–present\\n</td>\n[14] <td>Known as \"Dark Red\", 1949–1958.<sup id=\"cite_ref-WelterColorNames_4- ...\n[15] <td style=\"background:#FFC7C7;vertical-align:middle;text-align:center;\"  ...\n[16] <td style=\"background:#FFC7C7;vertical-align:middle;text-align:center;\"  ...\n[17] <td style=\"background:#FFC7C7;vertical-align:middle;text-align:center;\"  ...\n[18] <td style=\"background:#FFC7C7;vertical-align:middle;text-align:center;\"  ...\n[19] <td style=\"background: #FD0E35; color: white\"> \\n</td>\n[20] <td>Scarlet\\n</td>\n...\n```\n:::\n:::\n\n\nYou can see the problem looking at the 1st and 10th line of the output here. The piece of information we need is embedded in the bloody css style attribute, and *only* in the style attribute. Sigh.\n\nThere's probably a better solution but my solution was to realize that I can match each colour in my `crayola` table to the node `cells` using the text information, because the colour names have been correctly included. Noticing that, it's a lot easier because the cells that have the information I want are always to the left of (i.e., before) the one containing the name. So I extract the cell text:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncell_text <- cells |>\n  rvest::html_text() |>\n  stringr::str_remove_all(\"\\n$\")\n```\n:::\n\n\nThen I do the world's hackiest matching operation to find the nodes in the raw table that contain my missing colour data...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind <- which(cell_text %in% crayola$name) - 1\n```\n:::\n\n\nI use rvest to extract the style attribute, then stringr to pull the hex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbackground <- cells[ind] |>\n  rvest::html_attr(\"style\") |>\n  stringr::str_extract(\"#[0-9ABCDEF]{6}\")\n\nbackground\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"#ED0A3F\" \"#C32148\" \"#FD0E35\" \"#C62D42\" \"#CC474B\" \"#CC3336\" \"#E12C2C\"\n  [8] \"#D92121\" \"#B94E48\" \"#FF5349\" \"#FE4C40\" \"#FE6F5E\" \"#B33B24\" \"#CC553D\"\n [15] \"#E6735C\" \"#FF9980\" \"#E58E73\" \"#FF7034\" \"#FF681F\" \"#FF8833\" \"#FFB97B\"\n [22] \"#ECAC76\" \"#E77200\" \"#FFAE42\" \"#F2BA49\" \"#FBE7B2\" \"#F2C649\" \"#F8D568\"\n [29] \"#FCD667\" \"#FED85D\" \"#FBE870\" \"#F1E788\" \"#FFEB00\" \"#B5B35C\" \"#ECEBBD\"\n [36] \"#FAFA37\" \"#FFFF99\" \"#FFFF9F\" \"#D9E650\" \"#ACBF60\" \"#AFE313\" \"#BEE64B\"\n [43] \"#C5E17A\" \"#5E8C31\" \"#7BA05B\" \"#9DE093\" \"#63B76C\" \"#4D8C57\" \"#01A638\"\n [50] \"#6CA67C\" \"#5FA777\" \"#93DFB8\" \"#33CC99\" \"#1AB385\" \"#29AB87\" \"#00CC99\"\n [57] \"#00755E\" \"#8DD9CC\" \"#01796F\" \"#30BFBF\" \"#00CCCC\" \"#008080\" \"#8FD8D8\"\n [64] \"#95E0E8\" \"#6CDAE7\" \"#2D383A\" \"#76D7EA\" \"#7ED4E6\" \"#0095B7\" \"#009DC4\"\n [71] \"#02A4D3\" \"#47ABCC\" \"#2EB4E6\" \"#339ACC\" \"#93CCEA\" \"#2887C8\" \"#003366\"\n [78] \"#0066CC\" \"#1560BD\" \"#0066FF\" \"#A9B2C3\" \"#C3CDE6\" \"#4570E6\" \"#3C69E7\"\n [85] \"#7A89B8\" \"#4F69C6\" \"#8D90A1\" \"#8C90C8\" \"#7070CC\" \"#9999CC\" \"#ACACE6\"\n [92] \"#766EC8\" \"#6456B7\" \"#3F26BF\" \"#8B72BE\" \"#652DC1\" \"#6B3FA0\" \"#8359A3\"\n [99] \"#8F47B3\" \"#C9A0DC\" \"#BF8FCC\" \"#803790\" \"#733380\" \"#D6AEDD\" \"#C154C1\"\n[106] \"#FC74FD\" \"#732E6C\" \"#E667CE\" \"#E29CD2\" \"#8E3179\" \"#D96CBE\" \"#D8BFD8\"\n[113] \"#C8509B\" \"#BB3385\" \"#D982B5\" \"#A63A79\" \"#A50B5E\" \"#614051\" \"#F653A6\"\n[120] \"#DA3287\" \"#FF3399\" \"#FBAED2\" \"#FFB7D5\" \"#FFA6C9\" \"#F7468A\" \"#E30B5C\"\n[127] \"#FDD7E4\" \"#E62E6B\" \"#DB5079\" \"#FC80A5\" \"#F091A9\" \"#FF91A4\" \"#A55353\"\n[134] \"#CA3435\" \"#FEBAAD\" \"#F7A38E\" \"#E97451\" \"#AF593E\" \"#9E5B40\" \"#87421F\"\n[141] \"#926F5B\" \"#DEA681\" \"#D27D46\" \"#664228\" \"#FA9D5A\" \"#EDC9AF\" \"#FFCBA4\"\n[148] \"#805533\" \"#FDD5B1\" \"#EED9C4\" \"#665233\" \"#837050\" \"#E6BC5C\" \"#92926E\"\n[155] \"#E6BE8A\" \"#C9C0BB\" \"#DA8A67\" \"#C88A65\" \"#000000\" \"#736A62\" \"#8B8680\"\n[162] \"#C8C8CD\" \"#D9D6CF\" \"#FFFFFF\" \"#F1D651\" \"#DDEBEC\" \"#D9DAD2\" \"#C0D5F0\"\n```\n:::\n:::\n\n\nYay, those look like hex colours. Most importantly I've taken steps to ensure they've been extracted in the correct order so it's easy to insert them where they should have been in the first place:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayola$color <- background\ncrayola\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 168 × 9\n   color   name               listed years notes x16_box x24_box x32_box x64_box\n   <chr>   <chr>              <chr>  <chr> <chr> <chr>   <chr>   <chr>   <chr>  \n 1 #ED0A3F Red                \"#ED0… 1903… \"\"    \"Yes\"   \"Yes\"   \"Yes\"   \"Yes\"  \n 2 #C32148 Maroon             \"#C32… 1949… \"Kno… \"No\"    \"No\"    \"No\"    \"No\"   \n 3 #FD0E35 Scarlet            \"#FD0… 1998… \"Kno… \"No\"    \"Yes\"   \"Yes\"   \"Yes\"  \n 4 #C62D42 Brick Red          \"#C62… 1958… \"\"    \"No\"    \"No\"    \"No\"    \"Yes\"  \n 5 #CC474B English Vermilion  \"\"     1903… \"Als… \"\"      \"\"      \"\"      \"\"     \n 6 #CC3336 Madder Lake        \"\"     1903… \"\"    \"\"      \"\"      \"\"      \"\"     \n 7 #E12C2C Permanent Geraniu… \"\"     1903… \"\"    \"\"      \"\"      \"\"      \"\"     \n 8 #D92121 Maximum Red        \"\"     1926… \"Par… \"\"      \"\"      \"\"      \"\"     \n 9 #B94E48 Chestnut           \"#B94… 1903… \"Kno… \"No\"    \"No\"    \"Yes\"   \"Yes\"  \n10 #FF5349 Orange-Red         \"#FF5… 1958… \"\"    \"\"      \"\"      \"\"      \"\"     \n# … with 158 more rows\n```\n:::\n:::\n\n\nFinally.\n\n## Act II: One hundred years of tidyr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayola <- crayola |>\n\n  # clean up the years column\n  dplyr::mutate(\n    years = years |>\n      stringr::str_remove_all(\" \") |>\n      stringr::str_remove_all(\"\\\\[.\\\\]\") |>\n      stringr::str_remove_all(\"circa\") |>\n      stringr::str_replace_all(\"present\", \"2022\") |>\n      stringr::str_replace_all(\"2021,2022\", \"2021-2022\"),\n  ) |>\n\n  # some colours appear in two contiguous intervals separated by\n  # commas: split those into separate columns first...\n  tidyr::separate(\n    col = years,\n    into = c(\"years_1\", \"years_2\"),\n    sep = \",\",\n    fill = \"right\"\n  ) |>\n\n  # ...pivot longer so that each contiguous interval is a row\n  tidyr::pivot_longer(\n    cols = starts_with(\"years_\"),\n    names_prefix = \"years_\",\n    names_to = \"interval\",\n    values_to = \"years\"\n  ) |>\n\n  # drop empty rows for all those colours that didn't have a second\n  # contiguous interval\n  dplyr::filter(!is.na(years)) |>\n\n  # now split the \"1935-1992\" interval into two columns\n  tidyr::separate(\n    col = years,\n    into = c(\"year_started\", \"year_ended\"),\n    fill = \"right\"\n  ) |>\n\n  # if only a single year was given use it for the year end and the year start,\n  # and coerce strings to integers as appropriate\n  dplyr::mutate(\n    id = dplyr::row_number(),\n    year_ended = dplyr::if_else(is.na(year_ended), year_started, year_ended),\n    interval = as.integer(interval),\n    year_started = as.integer(year_started),\n    year_ended = as.integer(year_ended)\n  )\n\ncrayola\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 174 × 12\n   color   name     listed notes x16_box x24_box x32_box x64_box inter…¹ year_…²\n   <chr>   <chr>    <chr>  <chr> <chr>   <chr>   <chr>   <chr>     <int>   <int>\n 1 #ED0A3F Red      \"#ED0… \"\"    \"Yes\"   \"Yes\"   \"Yes\"   \"Yes\"         1    1903\n 2 #C32148 Maroon   \"#C32… \"Kno… \"No\"    \"No\"    \"No\"    \"No\"          1    1949\n 3 #FD0E35 Scarlet  \"#FD0… \"Kno… \"No\"    \"Yes\"   \"Yes\"   \"Yes\"         1    1998\n 4 #C62D42 Brick R… \"#C62… \"\"    \"No\"    \"No\"    \"No\"    \"Yes\"         1    1958\n 5 #CC474B English… \"\"     \"Als… \"\"      \"\"      \"\"      \"\"            1    1903\n 6 #CC3336 Madder … \"\"     \"\"    \"\"      \"\"      \"\"      \"\"            1    1903\n 7 #E12C2C Permane… \"\"     \"\"    \"\"      \"\"      \"\"      \"\"            1    1903\n 8 #D92121 Maximum… \"\"     \"Par… \"\"      \"\"      \"\"      \"\"            1    1926\n 9 #B94E48 Chestnut \"#B94… \"Kno… \"No\"    \"No\"    \"Yes\"   \"Yes\"         1    1903\n10 #FF5349 Orange-… \"#FF5… \"\"    \"\"      \"\"      \"\"      \"\"            1    1958\n# … with 164 more rows, 2 more variables: year_ended <int>, id <int>, and\n#   abbreviated variable names ¹​interval, ²​year_started\n```\n:::\n:::\n\n\n## Act III: I said pet, I said LUV, I said pet...\n\nTransformer function to map each year in an interval to a row in a tibble\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunpack_row <- function(id, color, name, interval, year_started, year_ended, ...) {\n  # https://en.wikipedia.org/wiki/CIELUV\n  HSV <- colorspace::coords(as(colorspace::hex2RGB(color), \"HSV\"))\n  LUV <- colorspace::coords(as(colorspace::hex2RGB(color), \"LUV\"))\n  tibble::tibble(\n    id = id,\n    color = color,\n    hue = HSV[1, \"H\"],\n    sat = HSV[1, \"S\"],\n    val = HSV[1, \"V\"],\n    L = LUV[1, \"L\"],\n    U = LUV[1, \"U\"],\n    V = LUV[1, \"V\"],\n    name = name,\n    year = year_started:year_ended,\n    ...\n  )\n}\n```\n:::\n\n\nApply it to each row to end up with a tidy tibble\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrayola <- crayola |>\n  dplyr::group_by(id) |>\n  purrr::pmap_dfr(unpack_row) |>\n  dplyr::arrange(year, color) |>\n  dplyr::mutate(id = dplyr::row_number())\n```\n:::\n\n\n\n## The intermission is late, so what?\n\nNever trust a website to last longer than an man on a Friday night so I'd better save the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder <- here::here(\"posts\", \"2022-12-18_crayola-crayon-colours\")\nreadr::write_csv(crayola, fs::path(folder, \"crayola.csv\"))\n```\n:::\n\n\n## Act IV: Even Chekhov doesn't expect this to go off\n\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ncrayola |>\n  dplyr::mutate(\n    # https://en.wikipedia.org/wiki/CIELUV#Cylindrical_representation_(CIELCh)\n    hue_like = atan2(V, U),\n    color = forcats::fct_reorder(color, hue_like)) |>\n  ggplot(aes(\n    x = year,\n    group = color,\n    fill = color\n  )) +\n  geom_bar(\n    position = \"fill\",\n    linetype = \"blank\",\n    width = 1,\n    show.legend = FALSE\n  ) +\n  theme_void() +\n  scale_fill_identity() +\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  NULL\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/first-plot-1.png){width=1152}\n:::\n:::\n\n\n\n\n\n<!--------------- appendices go here ----------------->\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}