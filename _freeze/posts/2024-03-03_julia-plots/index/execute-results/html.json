{
  "hash": "36b4456d6f5bbc002c50c7f284d4edaf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Plotting data in Julia\ndescription: 'Part three of this three-part series of Julia posts, in which I try to figure out how to draw some nice plots'\ndate: '2024-03-03'\ncategories:\n  - Julia\n  - Data Visualisation\n---\n\n\n<!--------------- post begins here ----------------->\n\n\nUsing the [Plots](https://docs.juliaplots.org/latest/) package\n\n::: {#9733c5a9 .cell execution_count=2}\n``` {.julia .cell-code}\nusing PalmerPenguins\nusing Plots\nusing StatsPlots\n```\n:::\n\n\nLoad penguins data: initially importat as CSV.file, then converted to DataFrame\n\n::: {#558a868d .cell execution_count=3}\n``` {.julia .cell-code}\npenguins = DataFrame(PalmerPenguins.load()) \n```\n:::\n\n\nI'll start with scatter plot. I could use `scatter()` here to avoid needing to set the seriestype\nexplicitly, but for learning purposes I find it a little easier to work with `plot()` for everything and control plot type via explicit attribute values:\n\n::: {#0e44efb1 .cell execution_count=4}\n``` {.julia .cell-code}\nplot(\n  penguins.bill_length_mm, \n  penguins.bill_depth_mm, \n  seriestype=:scatter\n)\n```\n:::\n\n\nIt's little awkward to refer to the `penguins` data frame repeatedly in this code, and so it's more convenient to use the `@df` macro:\n\n::: {#094389b0 .cell execution_count=5}\n``` {.julia .cell-code}\n@df penguins plot(\n  :bill_length_mm,\n  :bill_depth_mm,\n  seriestype=:scatter,\n  group=:species\n)\n```\n:::\n\n\nAdding labels is achieved by modifying the relevant attributes:\n\n::: {#31ec58e8 .cell execution_count=6}\n``` {.julia .cell-code}\n@df penguins plot(\n  :bill_length_mm,\n  :bill_depth_mm,\n  seriestype=:scatter,\n  group=:species,\n  title=\"Palmer Penguins\",\n  xlabel=\"Bill Length (mm)\",\n  ylabel=\"Bill Depth (mm)\"\n)\n```\n:::\n\n\nFilter rows that have missing bill lengths, because violin series can't handle missing values. first let's find the the rows we want to keep: \n\n::: {#104e9962 .cell execution_count=7}\n``` {.julia .cell-code}\nkeep = .!ismissing.(penguins.bill_length_mm)\n```\n:::\n\n\nSo now this data frame is violin safe...\n\n::: {#ee66b792 .cell execution_count=8}\n``` {.julia .cell-code}\nbill_lengths = penguins[keep, [:bill_length_mm, :species]]\n```\n:::\n\n\nSo now we can create a violin plot\n\n::: {#399f71b8 .cell execution_count=9}\n``` {.julia .cell-code}\n@df bill_lengths plot(\n    string.(:species),\n    :bill_length_mm,\n    seriestype=:violin,\n    legend=false,\n    xlabel=\"Species\",\n    ylabel=\"Bill Length (mm)\"\n)\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}