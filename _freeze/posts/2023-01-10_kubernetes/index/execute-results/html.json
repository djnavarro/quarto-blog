{
  "hash": "d3cc85cbf68b01ffc323a26e322f8ca2",
  "result": {
    "markdown": "---\ntitle: \"Deploying R with kubernetes\"\nauthor:\n  - name: Danielle Navarro\n    url: https://djnavarro.net\n    affiliation: I'm on smoko\n    affiliation-url: https://www.youtube.com/watch?v=j58V2vC9EPc\n    orcid: 0000-0001-7648-6578\ndescription: \"In which it is painfully clear that the author is trying to figure it all out as she goes\"\ndate: \"2023-01-10\"\ncategories: [R, Docker, Kubernetes, plumber]\nimage: \"donut.png\"\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n## Write the R code\n\n\n\n## Wrap the R code in a plumber api\n\n## Containerise it\n\n## Push the container to the registry\n\n## Create a google cloud project\n\nFirst create a project from the console https://console.cloud.google.com/\n\nGive it a fancy name like `donut-art`\n\nYour project will need to enable google kubernetes engine\n\n\n# do you want to be able to connect to your cluster?\n\nThis is a bit of a digression but I promise it's a useful one. click on the \"connect\" button and it will reveal a command you can use to connect to your cluster from the command line. you can do it right away by selecting the \"run in cloud shell\" option: that will execute the fancy little command in a terminal that google has already configured to have the tools you need to directly interact with your kubernetes cluster. however, there's nothing stopping you from doing it yourself from the pretty little bash terminal on your machine.\n\nThe tools you need to install first are gcloud (the google cloud software development kit) and kubectl (tools for interacting with kubernetes). you'll also need the \"google kubernetes engine gcloud auth plugin\":\n\n- install gcloud sdk (on ubuntu: https://cloud.google.com/sdk/docs/install#deb)\n- install gke-gcloud-auth-plugin (`sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin`)\n- install kubectl (you can install with snap or apt-get); https://kubernetes.io/docs/reference/kubectl/\n\nhttps://kubernetes.io/docs/reference/kubectl/\n\nhttps://kubernetes.io/docs/tasks/tools/install-kubectl-linux/\n\nFootnote: Autocompletion for kubectl https://kubernetes.io/docs/reference/kubectl/cheatsheet/\n(thank you to @jan@toot.io for the hint)\n\ndon't forget: `gcloud auth login` to authenticate \n\n# create the cluster using autopilot\n\nI called mine `donut-cluster`, region `australia-southeast1`\n\nnow connect:\n\n```\nexport USE_GKE_GCLOUD_AUTH_PLUGIN=True\ngcloud container clusters get-credentials donut-cluster --zone australia-southeast1 --project donut-art\n```\n\ncheck that we can connect:\n\n```\nkubectl cluster-info\n```\n\n## deploy \n\n```\nkubectl apply -f deployment.yaml\n```\n\n```\nkubectl get deployments\n```\n\nhttps://kubernetes.io/docs/tutorials/stateless-application/expose-external-ip-address/\n\nhttps://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n\n## expose \n\n```\nkubectl expose deployment donut --type=LoadBalancer --name=donut-service\n```\n\nthen over in my website create a DNS record that points donut.djnavarro.net at the IP address\n\n## where next?\n\n- enabling https: https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/ https://medium.com/avmconsulting-blog/how-to-secure-applications-on-kubernetes-ssl-tls-certificates-8f7f5751d788\n- storage: the app generates a new image every time it is called. that's wasteful, especially if you're going to reuse images. enable google cloud storage and have the plumber app check for the relevant file on gcs before trying to generate a new one\n- multiple containers: once storage is in the mix you probably want to split this into a server (pulls files from storage to display files to user) and a generator (creates image files and writes to storage), each with their own container. you could choose run both of these containers in one pod, or have two single-container pods. i have no idea which is better yet.\n- fancier things like spark-on-kubernetes already have helm charts. so you'd want to install helm and learn how to create deployments from that\n\n<!--------------- appendices go here ----------------->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}