{
  "hash": "d7b216da9b75847b6fe176dfc2ee7194",
  "result": {
    "markdown": "---\ntitle: \"Four ways to be assertive\"\ndescription: \"It's not 50 ways to leave your lover, but spend enough time talking about assertive programming in the bedroom and you'll only have 49 more to discover\"\ncategories: [\"R\"]\ndate: \"2023-08-06\"\nimage: \"50_ways.jpg\"\nimage-alt: \"Cover art to Paul Simon's 1975 single '50 ways to leave your lover'\"\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nLet's talk about four different approaches to writing assertions in R.^[It should be noted that these aren't the only packages out there to support assertions in R. There are at least three others that I'm aware of but haven't yet tried, and probably many others that I don't know about. For what it's worth, these are the other three I know of: the [ensurer](https://github.com/smbache/ensurer), [checkmate](https://github.com/mllg/checkmate), and [tester](https://github.com/gastonstat/tester) packages can all be used for this purpose, and I'm sure I could come up with terrible rhymes for those too, but there's a limit to how much effort I want to put into this post.]\n\n## Just `stopifnot()`, Scott\n\nHere's a simplified version of a function that I use a lot in my generative art workflows. The `identifier()` function constructs a unique identifier for an output generated from a particular system:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier <- function(name, version, seed) {\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n```\n:::\n\n\nSo let's say I'm creating a piece from a version 1 system called \"rtistry\", and using 203 as my random seed. The unique identifier for this piece would be as follows:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(name = \"rtistry\", version = 1, seed = 203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"rtistry_01_0203\"\n```\n:::\n:::\n\n\nThe idea here is that:\n\n- The identifier should consist of exactly three parts, separated by underscores\n- The first part should be the name of the generative art system\n- The second part should specify the version of the system as a two-digit number \n- The third part should specify the RNG seed used to generate this piece as a four-digit number\n\nFor most of my systems this will produce a globally unique identifier, since I try to design them so that the only input parameter to the system is the RNG seed.  \n\nNotice, though, that there are some unstated -- and unchecked! -- assumptions about the kind of input that the function will receive. It's implicitly assumed that `name` will be a character string that does not have any underscores, periods, or white spaces, and it's also assumed that `version` and `seed` are both positive valued integers (or at least \"integerish\") with upper bounds of 99 and 9999 respectively. Weirdness happens when I break those assumptions with my input:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(name = \"r tistry\", version = 1.02, seed = 203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"r tistry_1.02_0203\"\n```\n:::\n:::\n\n\nAs a rule, of course, I don't *deliberately* pass bad inputs to my functions, but if I want to be defensive about it, I should validate the inputs so that `identifier()` throws an error if I make a mistake and pass it input that violates the assumptions. The base R function `stopifnot()` is designed to solve exactly this problem:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier <- function(name, version, seed) {\n  \n  # throw error if any of the following assertions fail\n  stopifnot(\n    length(name) == 1,\n    length(version) == 1,\n    length(seed) == 1,\n    rlang::is_integerish(version),\n    rlang::is_integerish(seed),\n    !stringr::str_detect(name, \"[[:space:]._]\"),\n    seed > 0, \n    seed < 10000,\n    version > 0,\n    version < 100\n  )\n  \n  # the actual work of the function\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n```\n:::\n\n\nUsing `stopifnot()` in this way causes all of the following to error and throw informative error messages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(\"r tistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"r tistry\", 1, 203): !stringr::str_detect(name, \"[[:space:]._]\") is not TRUE\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1.02, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1.02, 203): rlang::is_integerish(version) is not TRUE\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1, 20013)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1, 20013): seed < 10000 is not TRUE\n```\n:::\n:::\n\n\nThe error messages aren't the prettiest, but they do the job. In each case you can look at the error message and figure out what went wrong when calling the `identifier()` function.\n\n**Summary**: `stopifnot()` is suprisingly effective. It's very general, and works for any expression that yields `TRUE` or `FALSE`. There are no dependencies since it's a base R function. It does have some downsides: the error messages are pretty generic, and the code isn't always the prettiest, but nevertheless it does the job that needs doing. \n\n## Just `assert_*()` it, Kit\n\nThe [assertive](https://bitbucket.org/richierocks/assertive/) package provides a large collection of `assert_*()` functions that are each tailored to a specific type of assertion, and designed to produce error messages that are tailored to that specific case:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(assertive)\n\n#| label: identifier function with assertive checks\nidentifier <- function(name, version, seed) {\n\n  # all inputs should be scalars\n  assert_is_scalar(version)\n  assert_is_scalar(name)\n  assert_is_scalar(seed)\n  \n  # version and seed should be integers\n  assert_is_integer(version)\n  assert_is_integer(seed)\n  \n  # version and seed should be positive \n  assert_all_are_positive(c(seed, version))\n  \n  # version and seed should not exceed their upper bounds\n  assert_all_are_less_than(seed, 10000)\n  assert_all_are_less_than(version, 100)\n  \n  # name should not match the regex\n  assert_all_are_not_matching_regex(name, \"[[:space:]._]\")\n\n  # the actual work of the function\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n```\n:::\n\n\nLet's see what happens:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(\"r tistry\", 1L, 203L)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"r tistry\", 1L, 203L): is_not_matching_regex : name does not match \"[[:space:]._]\"\nThere was 1 failure:\n  Position    Value                   Cause\n1        1 r tistry matches '[[:space:]._]'\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1.02, 203L)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1.02, 203L): is_integer : version is not of class 'integer'; it has class 'numeric'.\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1L, 20013L)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1L, 20013L): is_less_than : seed are not all less than 10000.\nThere was 1 failure:\n  Position Value                          Cause\n1        1 20013 greater than or equal to 10000\n```\n:::\n:::\n\n\nYou'll notice that I explicitly passed integer classed values (e.g., `203L`) to the `identifier()` function here. There's a reason for this. The `assert_is_integer()` function uses the base `is.integer()` function to test for integer status, which returns `TRUE` only when passed an actual integer. It returns `FALSE` when passed an \"integerish\" double:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.integer(203L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.integer(203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nBecause my assertion is a check for integer status not \"integerish\" status, this version of the `identifier()` function is somewhat strict about type checking, and this fails:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1, 203): is_integer : version is not of class 'integer'; it has class 'numeric'.\n```\n:::\n:::\n\n\nTo be fair, there are many situations where you really do want to be strict about type checking: the integer representation of `203L` is in fact a different underlying object to the floating point representation of `203`, and while R is usually pretty chill about this, it's important to keep in mind that doubles and integers are fundamentally different data types.\n\nThat being said, it's vanishingly rare for this to actually matter in my generative art process, and I'd prefer to let this one slide. Unfortunately, there isn't a specific assertion function for \"integerish\" status in the assertive package.\n\n**Summary**: Because it provides a huge number of well-named assertion functions, the assertive package tends to produce very readable code, and because each of those functions produces errors that are tailored to that check, the error messages tend to be useful too. It does get a little awkward when there isn't an assertion for your use case, but usually there's a way to work around that. \n\n## Just `assert_that()`, Kat\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(assertthat)\n\nidentifier <- function(name, version, seed) {\n  \n  assert_that(\n    length(name) == 1,\n    length(version) == 1,\n    length(seed) == 1,\n    msg = \"`name`, `version`, and `seed` must all have length 1\"\n  )\n\n  assert_that(   \n    !stringr::str_detect(name, \"[[:space:]._]\"),\n    msg = \"`name` must not contain white space, periods, or underscores\"\n  )\n\n  assert_that(\n    rlang::is_integerish(version),\n    version > 0,\n    version < 100,\n    msg = \"`version` must be a whole number between 1 and 99\"\n  )\n   \n  assert_that(\n    rlang::is_integerish(seed),\n    seed > 0, \n    seed < 10000,\n    msg = \"`seed` must be a whole number between 1 and 9999\"    \n  )\n  \n  # the actual work of the function\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n```\n:::\n\n\nLike `stopifnot()`, the `assert_that()` function allows you to construct arbitrary assertions, which I find useful. Additionally, the `assert_that()` function has some nice properties when compared to `stopifnot()`. Because it takes a `msg` argument that allows you to specify the error message, it gently encourages you to group together all the assertions that are of the same kind, and then write an informative message tailored to that subset of the assertion checks. This produces readable code because the error message is right there next to the assertions themselves, and the assertions end up being more organised than when I used `stopifnot()` earlier. \n\nIn any case, let's have a look. First, let's check that this works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"rtistry_01_0203\"\n```\n:::\n:::\n\n\nSecond, let's check that all of these fail and throw readable error messages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(\"r tistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: `name` must not contain white space, periods, or underscores\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1.02, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: `version` must be a whole number between 1 and 99\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1, 20013)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: `seed` must be a whole number between 1 and 9999\n```\n:::\n:::\n\n\n**Summary**: The assertthat package has a pretty specific aim: to provide an `assert_that()` function works as a drop-in replacement for `stopifnot()` that allows custom error messages. Given that limited goal, it works nicely.\n\n## Just assertr, Carr\n\nThe assertr package solves a different problem to the other three methods discussed here. The other three approaches are general-purpose tools and I find them easiest to think about in the context of checking an arbitrary function input. The assertr package is more specialised: it focuses on checking a *data* input, specifically a tabular data onject like a data frame or a tibble. Because it's focused on that particular -- and extremely important -- special case, it's able to provide a more powerful way of checking input data. In that sense it's complementary to the other three. You could use assertr to check the `data` input to a function that takes a data frame as the primary argument, and then use assertthat to test the others. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(assertr)\n\nmtcars |>\n  \n  # chain of assertions that all succeed\n  chain_start() |>\n  verify(has_all_names(\"mpg\", \"vs\", \"am\", \"wt\")) |>\n  verify(mpg > 0) |>\n  insist(within_n_sds(4), mpg) |>\n  assert(in_set(0, 1), am, vs) |>\n  assert_rows(num_row_NAs, within_bounds(0, 2), everything()) |>\n  assert_rows(col_concat, is_uniq, mpg, am, wt) |>\n  insist_rows(maha_dist, within_n_mads(10), everything()) |>\n  chain_end() |>\n  \n  # the data analysis takes place because the assertions pass\n  group_by(cyl) |>\n  summarise(mean_mpg = mean(mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n    cyl mean_mpg\n  <dbl>    <dbl>\n1     4     26.7\n2     6     19.7\n3     8     15.1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  \n  # chain of assertions that will fail\n  chain_start() |>\n  assert(in_set(1, 2, 3, 4), carb) |>\n  assert_rows(rowMeans, within_bounds(0,5), gear:carb) |>\n  verify(mpg < 32) |>\n  chain_end() |>\n  \n  # the data analysis doesn't happen because assertions fail\n  group_by(cyl) |>\n  summarise(mean_mpg = mean(mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 6 errors across 3 verbs:\n- \n         verb redux_fn           predicate     column index value\n1      assert     <NA>  in_set(1, 2, 3, 4)       carb    30   6.0\n2      assert     <NA>  in_set(1, 2, 3, 4)       carb    31   8.0\n3 assert_rows rowMeans within_bounds(0, 5) ~gear:carb    30   5.5\n4 assert_rows rowMeans within_bounds(0, 5) ~gear:carb    31   6.5\n5      verify     <NA>            mpg < 32       <NA>    18    NA\n6      verify     <NA>            mpg < 32       <NA>    20    NA\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError: assertr stopped execution\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}