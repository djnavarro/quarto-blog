{
  "hash": "ad25098e18b2c80fe011fbd0572e14bb",
  "result": {
    "markdown": "---\ntitle: \"Four ways to be assertive\"\ndescription: \"It's not 50 ways to leave your lover, but spend enough time talking about assertive programming in the bedroom and you'll only have 49 more to discover\"\ncategories: [\"R\"]\ndate: \"2023-08-06\"\nimage: \"50_ways.jpg\"\nimage-alt: \"Cover art to Paul Simon's 1975 single '50 ways to leave your lover'\"\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nLet's talk about four different approaches to writing assertions in R.^[It should be noted that these aren't the only packages out there to support assertions in R. There are at least three others that I'm aware of but haven't yet tried, and probably many others that I don't know about. For what it's worth, these are the other three I know of: the [ensurer](https://github.com/smbache/ensurer), [checkmate](https://github.com/mllg/checkmate), and [tester](https://github.com/gastonstat/tester) packages can all be used for this purpose, and I'm sure I could come up with terrible rhymes for those too, but there's a limit to how much effort I want to put into this post.]\n\n## Just `stopifnot()`, Scott\n\nHere's a simplified version of a function that I use a lot in my generative art workflows. The `identifier()` function constructs a unique identifier for an output generated from a particular system:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier <- function(name, version, seed) {\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n```\n:::\n\n\nSo let's say I'm creating a piece from a version 1 system called \"rtistry\", and using 203 as my random seed. The unique identifier for this piece would be as follows:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(name = \"rtistry\", version = 1, seed = 203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"rtistry_01_0203\"\n```\n:::\n:::\n\n\nThe idea here is that:\n\n- The identifier should consist of exactly three parts, separated by underscores\n- The first part should be the name of the generative art system\n- The second part should specify the version of the system as a two-digit number \n- The third part should specify the RNG seed used to generate this piece as a four-digit number\n\nFor most of my systems this will produce a globally unique identifier, since I try to design them so that the only input parameter to the system is the RNG seed.  \n\nNotice, though, that there are some unstated -- and unchecked! -- assumptions about the kind of input that the function will receive. It's implicitly assumed that `name` will be a character string that does not have any underscores, periods, or white spaces, and it's also assumed that `version` and `seed` are both positive valued integers (or at least \"integerish\") with upper bounds of 99 and 9999 respectively. Weirdness happens when I break those assumptions with my input:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(name = \"r tistry\", version = 1.02, seed = 203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"r tistry_1.02_0203\"\n```\n:::\n:::\n\n\nAs a rule, of course, I don't *deliberately* pass bad inputs to my functions, but if I want to be defensive about it, I should validate the inputs so that `identifier()` throws an error if I make a mistake and pass it input that violates the assumptions. The base R function `stopifnot()` is designed to solve exactly this problem:\n\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nidentifier <- function(name, version, seed) {\n  \n  # throw error if any of the following assertions fail\n  stopifnot(\n    length(name) == 1,    # name must be a scalar\n    length(version) == 1, # version must be a scalar\n    length(seed) == 1,    # seed must be a scalar\n    rlang::is_integerish(version),  # version must be a whole number\n    rlang::is_integerish(seed),     # seed must be a whole number\n    !stringr::str_detect(name, \"[[:space:]._]\"), # name can't have spaces, periods, or underscores \n    seed > 0,      # seed must be positive\n    seed < 10000,  # seed must be less than 10000\n    version > 0,   # version must be positive\n    version < 100  # version must be less than 100\n  )\n  \n  # the actual work of the function\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n```\n:::\n\n\nUsing `stopifnot()` in this way causes all of the following to error and throw informative error messages:\n\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nidentifier(\"r tistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"r tistry\", 1, 203): !stringr::str_detect(name, \"[[:space:]._]\") is not TRUE\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1.02, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1.02, 203): rlang::is_integerish(version) is not TRUE\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1, 20013)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1, 20013): seed < 10000 is not TRUE\n```\n:::\n:::\n\n\nThe error messages aren't the prettiest, but they do the job. In each case you can look at the error message and figure out what went wrong when calling the `identifier()` function. That said, you can sort of see the limitations to `stopifnot()` by looking at my source code: because `stopifnot()` throws pretty generic error messages that you can't customise, my first instinct when writing the function was to group *all* my assertions into a single `stopifnot()` call, and then -- because there isn't a lot of structure to my assertion code -- I've added comments explaining what each assertion does. That's... fine. But not ideal. \n\n**Summary**: `stopifnot()` is suprisingly effective. It's very general, and works for any expression that yields `TRUE` or `FALSE`. There are no dependencies since it's a base R function. It does have some downsides: the error messages are pretty generic, and the code isn't always the prettiest, but nevertheless it does the job that needs doing.\n\n\n## Just `assert_that()`, Kat\n\nThe [assertthat](https://github.com/hadley/assertthat) package is designed to provide a drop-in replacement for the `stopifnot()` function, one that allows you to compose your own error messages when an assertion fails. It does have a variety of other convenience functions, but to be honest the main advantage over `stopifnot()` is the superior control over the error message. In practice, I find that this functionality allows me to write assertion code that is (a) easier to read, and (b) produces better error messages when an assertion fails. \n\nTo illustrate, here's the code I end up with when I revisit my generative art `identifier()` function using assertthat:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(assertthat)\n\nidentifier <- function(name, version, seed) {\n  \n  assert_that(\n    length(name) == 1,\n    length(version) == 1,\n    length(seed) == 1,\n    msg = \"`name`, `version`, and `seed` must all have length 1\"\n  )\n\n  assert_that(   \n    !stringr::str_detect(name, \"[[:space:]._]\"),\n    msg = \"`name` must not contain white space, periods, or underscores\"\n  )\n\n  assert_that(\n    rlang::is_integerish(version),\n    version > 0,\n    version < 100,\n    msg = \"`version` must be a whole number between 1 and 99\"\n  )\n   \n  assert_that(\n    rlang::is_integerish(seed),\n    seed > 0, \n    seed < 10000,\n    msg = \"`seed` must be a whole number between 1 and 9999\"    \n  )\n  \n  # the actual work of the function\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n```\n:::\n\n\nLike `stopifnot()`, the `assert_that()` function allows you to construct arbitrary assertions, which I find useful. Additionally, the `assert_that()` function has some nice properties when compared to `stopifnot()`. Because it takes a `msg` argument that allows you to specify the error message, it gently encourages you to group together all the assertions that are of the same kind, and then write an informative message tailored to that subset of the assertion checks. This produces readable code because the error message is right there next to the assertions themselves, and the assertions end up being more organised than when I used `stopifnot()` earlier. \n\nIn any case, let's have a look. First, let's check that this works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"rtistry_01_0203\"\n```\n:::\n:::\n\n\nSecond, let's check that all of these fail and throw readable error messages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentifier(\"r tistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: `name` must not contain white space, periods, or underscores\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1.02, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: `version` must be a whole number between 1 and 99\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1, 20013)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: `seed` must be a whole number between 1 and 9999\n```\n:::\n:::\n\n\nI find myself preferring this as a way of generating error messages when input arguments to a function don't receive appropriate input. Because I know what I want the function to do, I'm able to write concise but informative error messages that are appropriate to the specific set of assertions that I've included within any particular `assert_that()` call. \n\n**Summary**: The assertthat package has a pretty specific aim: to provide an `assert_that()` function works as a drop-in replacement for `stopifnot()` that allows custom error messages. Given that limited goal, it works nicely.\n\n\n## Just `assert_*()` it, Kit\n\nThe [assertive](https://bitbucket.org/richierocks/assertive/) package provides a large collection of `assert_*()` functions that are each tailored to a specific type of assertion, and designed to produce error messages that are tailored to that specific case. Here's an example where I apply this approach to checking the inputs to the `identifier()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(assertive)\n\nidentifier <- function(name, version, seed) {\n\n  assert_is_scalar(version)\n  assert_is_scalar(name)\n  assert_is_scalar(seed)\n  \n  assert_is_integer(version)\n  assert_is_integer(seed)\n  assert_all_are_positive(c(seed, version))\n  assert_all_are_less_than(seed, 10000)\n  assert_all_are_less_than(version, 100)\n  \n  assert_all_are_not_matching_regex(name, \"[[:space:]._]\")\n\n  # the actual work of the function\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n```\n:::\n\n\nI'd probably argue that this is the most readable version of the code yet. The `assert_*()` functions have such transparently informative names that there's no need at all for comments. However, there are some downsides to this approach, which become a little more apparent when we look at the error messages that it throws when I pass bad inputs to the `identifier()` function:\n\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nidentifier(\"r tistry\", 1L, 203L)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"r tistry\", 1L, 203L): is_not_matching_regex : name does not match \"[[:space:]._]\"\nThere was 1 failure:\n  Position    Value                   Cause\n1        1 r tistry matches '[[:space:]._]'\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1.02, 203L)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1.02, 203L): is_integer : version is not of class 'integer'; it has class 'numeric'.\n```\n:::\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1L, 20013L)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1L, 20013L): is_less_than : seed are not all less than 10000.\nThere was 1 failure:\n  Position Value                          Cause\n1        1 20013 greater than or equal to 10000\n```\n:::\n:::\n\n\nBecause I don't have custom error message code in my assertions, the errors that get returned to the user are a little bit opaque. They're more informative than the `stopifnot()` versions, and because each assertion throws its own error message tailored to that function, the results are rather better suited to the context. Even so, they're still quite long and there's some cognitive effort required by the user to figure out what happened. \n\nThere's a second issue here. Notice that when I wanted to pass a good input for `seed` or `version` in this version of the function, I used explicitly integer-classed values (e.g., `203L` not `203`). There's a reason I did that. The `assert_is_integer()` function uses `is.integer()` test for integer status, which returns `TRUE` only when passed an actual integer. It returns `FALSE` when passed an \"integerish\" double:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.integer(203L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.integer(203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nBecause my assertion is a check for integer status not \"integerish\" status, this version of the `identifier()` function is more strict about type checking than I really want it to be, and this fails:\n\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nidentifier(\"rtistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in identifier(\"rtistry\", 1, 203): is_integer : version is not of class 'integer'; it has class 'numeric'.\n```\n:::\n:::\n\n\nNow, to be fair, there are of course many situations where you really do want to be strict about type checking integers: the integer representation of `203L` is a different underlying object to the floating point representation of `203`, and while R is usually pretty chill about this, it's important to keep in mind that doubles and integers are fundamentally different data types. That being said, it's vanishingly rare for this to actually matter in my generative art process, and I'd prefer to let this one slide. \n\nThis kind of thing is where you can run into some difficulties using the `assert_*()` functions. If there isn't a specific assertion function tailored for your use case (as occurs with \"integerish\" check in `identifier()`) you're left with the dilemma of either choosing an assertion that isn't quite right, or else falling back on a general-purpose assertion like `assert_all_are_true()`. For example, this works...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(assertive)\n\nidentifier <- function(name, version, seed) {\n\n  assert_is_scalar(version)\n  assert_is_scalar(name)\n  assert_is_scalar(seed)\n  \n  assert_all_are_true(rlang::is_integerish(c(seed, version)))\n  assert_all_are_positive(c(seed, version))\n  assert_all_are_less_than(seed, 10000)\n  assert_all_are_less_than(version, 100)\n  \n  assert_all_are_not_matching_regex(name, \"[[:space:]._]\")\n\n  # the actual work of the function\n  version <- stringr::str_pad(version, width = 2, pad = \"0\")\n  seed <- stringr::str_pad(seed, width = 4, pad = \"0\")\n  paste(name, version, seed, sep = \"_\") \n}\n\nidentifier(\"rtistry\", 1, 203)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"rtistry_01_0203\"\n```\n:::\n:::\n\n\n...but it's not quite as elegant as you might hope. Nevertheless, I'm not being critical here. It's impossible to write a package like assertive in a way that covers every use case, and it's pretty impressive that it has the breadth that it does. \n\n**Summary**: Because it provides a huge number of well-named assertion functions, the assertive package tends to produce very readable code, and because each of those functions produces errors that are tailored to that check, the error messages tend to be useful too. It does get a little awkward when there isn't an assertion for your use case, but usually there's a way to work around that. \n\n## Just assertr, Carr\n\nThe [assertr](https://docs.ropensci.org/assertr/) package solves a different problem to the other three methods discussed here. The other three approaches are general-purpose tools and -- with various strengths and weaknesses -- they're deisgned to be used when checking an *arbitrary* input. The assertr package is more specialised: it focuses on checking a *data* input, specifically a tabular data onject like a data frame or a tibble. Because it's focused on that particular -- and extremely important -- special case, it's able to provide a more powerful way of validating the content of a data frame. \n\nIn that sense, assertr is complementary to the other three approaches. For example, you could use assertr to check the `data` input to a function that takes a data frame as the primary argument, but then use (say) `assert_that()` to test the others. \n\nTo get started, I'll load the packages I'm going to use in this section:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(assertr)\n```\n:::\n\n\nThe assertr package provides three primary verbs, `verify()`, `assert()`, and `insist()`. They all take a data set as the first argument and (by default) returns the original data set unaltered if the checks pass, which makes it include them as part of a data pipeline. I'll illustrate them one at a time. Let's start with `verify()`, the simplest of the three. The `verify()` function expects to receive an expression as the first non-data argument amd yields a logical value, which is then evaluated in the data context. If the expression evaluates to `FALSE`, an error is thrown.\n\nHere's a simple example using `verify()`. My data set comes from the [List of Archibald Prize Winners](https://en.wikipedia.org/wiki/List_of_Archibald_Prize_winners) wikipedia page. The Archibald Prize is a one of the most prestigious art prizes in Australia, awarded for painted portraits, and has been awarded (almost!) annually since 1921. My data set looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narchibald <- read_csv(\"archibald.csv\", show_col_types = FALSE)\narchibald\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 166 × 6\n   prize           year  artist            title         subject n_finalists\n   <chr>           <chr> <chr>             <chr>         <chr>         <dbl>\n 1 Archibald Prize 1921  William McInnes   Desbrowe Ann… Harold…          45\n 2 Archibald Prize 1922  William McInnes   Professor Ha… Willia…          53\n 3 Archibald Prize 1923  William McInnes   Portrait of … Violet…          50\n 4 Archibald Prize 1924  William McInnes   Miss Collins  Gladys…          40\n 5 Archibald Prize 1925  John Longstaff    Maurice Mosc… Mauric…          74\n 6 Archibald Prize 1926  William McInnes   Silk and Lac… Esther…          58\n 7 Archibald Prize 1927  George W. Lambert Mrs Annie Mu… Annie …          56\n 8 Archibald Prize 1928  John Longstaff    Dr Alexander… Alexan…          66\n 9 Archibald Prize 1929  John Longstaff    The Hon W A … Willia…          75\n10 Archibald Prize 1930  William McInnes   Drum-Major H… Harry …          67\n# ℹ 156 more rows\n```\n:::\n:::\n\n\nTo be precise, there are actually three different prizes included in the data set. There's the original Archibald Prize (the famous one), and two more recent additions that are awarded using the same pool of entrants: the People's Choice Award (which is what you'd think), and the Packing Room Prize (awarded by the staff who install the portraits in the gallery).\n\nFor my first analysis then, I want to do a simple tabulation: count the number of times any given artist has won a particular prize, and sort the results in descending count order. So the analysis part of my data pipeline would look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narchibald |> \n  count(artist, prize) |>\n  arrange(desc(n))\n```\n:::\n\n\nHowever, I might want to `verify()` a few things first. I'd like to check that `prize` and `artist` both exist as columns in the data, and both contain character data. I can use the base R function `exists()` to check that the variables exist within the data context, and `is.character()` to check the variable type: \n\n\n::: {.cell}\n\n```{.r .cell-code}\narchibald |> \n  verify(exists(\"prize\")) |>\n  verify(exists(\"artist\")) |>\n  verify(is.character(\"prize\")) |>\n  verify(is.character(\"artist\")) |>\n  count(artist, prize) |>\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 118 × 3\n   artist            prize                     n\n   <chr>             <chr>                 <int>\n 1 William Dargie    Archibald Prize           8\n 2 William McInnes   Archibald Prize           7\n 3 Ivor Hele         Archibald Prize           5\n 4 John Longstaff    Archibald Prize           5\n 5 Vincent Fantauzzo People's Choice Award     4\n 6 Clifton Pugh      Archibald Prize           3\n 7 Eric Smith        Archibald Prize           3\n 8 Robert Hannaford  People's Choice Award     3\n 9 William Dobell    Archibald Prize           3\n10 William Pidgeon   Archibald Prize           3\n# ℹ 108 more rows\n```\n:::\n:::\n\n\nIn this case, all the `verify()` checks pass, so no errors are thrown and the analysis proceeds in the usual way. But suppose that the `artist` variable was actually supposed to be called `painter`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narchibald |> \n  verify(exists(\"prize\")) |>\n  verify(exists(\"painter\")) |>\n  verify(is.character(\"prize\")) |>\n  verify(is.character(\"painter\")) |>\n  count(painter, prize) |>\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nverification [exists(\"painter\")] failed! (1 failure)\n\n    verb redux_fn         predicate column index value\n1 verify       NA exists(\"painter\")     NA     1    NA\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError: assertr stopped execution\n```\n:::\n:::\n\n\nThere is no `painter` variable in the data set, so the assertion checks fail, and an error message is thrown. The form of the error message is rather elaborate though. There is a reason why assertr defaults to this strange-looking format, and I'll get to that momentarily. For now, let's move on. \n\nThere's something a little repetitive about the validation code I wrote above. If my analysis pipeline involved many variables, it would be a bit obnoxious to write a separate `verify()` line to check that they all exist. For the column name checks, assertr provides a convenience function `has_all_names()` that you can use specifically for this purpose:^[In general, assertr doesn't supply lots of convenience functions, but `has_all_names()` is an important special case because it's used to check for the *existence* of columns, and that requires a special workflow. For type checking assertions, I can group together multiple `verify()` checks into a single `assert()` check that takes a tidy selection of columns. But for that to work the columns actually have to exist, so you can't use `assert()` for existence checks! Hence (I presume) the inclusion of the `has_all_names()` convenience function.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\narchibald |> \n  verify(has_all_names(\"prize\", \"artist\")) |>\n  verify(is.character(\"prize\")) |>\n  verify(is.character(\"artist\")) |>\n  count(artist, prize) |>\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 118 × 3\n   artist            prize                     n\n   <chr>             <chr>                 <int>\n 1 William Dargie    Archibald Prize           8\n 2 William McInnes   Archibald Prize           7\n 3 Ivor Hele         Archibald Prize           5\n 4 John Longstaff    Archibald Prize           5\n 5 Vincent Fantauzzo People's Choice Award     4\n 6 Clifton Pugh      Archibald Prize           3\n 7 Eric Smith        Archibald Prize           3\n 8 Robert Hannaford  People's Choice Award     3\n 9 William Dobell    Archibald Prize           3\n10 William Pidgeon   Archibald Prize           3\n# ℹ 108 more rows\n```\n:::\n:::\n\n\nFor the type checking, however, there's no equivalent convenience function and if you want to group multiple `verify()` checks what you want to do is use the `assert()` function. The first non-data argument to `assert()` specifies a predicate function that is applied to a set of columns.^[Column names are unquoted and are passed through the dots `...`. The documentation notes that the dots are passed to `dplyr::select()`, and accordingly the `assert()` function supports tidy selection.] If the predicate function returns `FALSE`, the `assert()` function errors. \n\nRewriting the `verify()` code from our \"successful\" example as `assert()` checks gives us this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narchibald |> \n  verify(has_all_names(\"prize\", \"artist\")) |>\n  assert(is.character, prize, artist) |>\n  count(artist, prize) |>\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 118 × 3\n   artist            prize                     n\n   <chr>             <chr>                 <int>\n 1 William Dargie    Archibald Prize           8\n 2 William McInnes   Archibald Prize           7\n 3 Ivor Hele         Archibald Prize           5\n 4 John Longstaff    Archibald Prize           5\n 5 Vincent Fantauzzo People's Choice Award     4\n 6 Clifton Pugh      Archibald Prize           3\n 7 Eric Smith        Archibald Prize           3\n 8 Robert Hannaford  People's Choice Award     3\n 9 William Dobell    Archibald Prize           3\n10 William Pidgeon   Archibald Prize           3\n# ℹ 108 more rows\n```\n:::\n:::\n\n\n\nHere's an example where the validation checks fail:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_missing <- function(x) !is.na(x)\n\narchibald |> \n  verify(has_all_names(\"prize\", \"n_finalists\")) |>\n  filter(prize == \"Archibald Prize\") |>\n  assert(not_missing, \"n_finalists\") |>  \n  ggplot(aes(n_finalists)) + geom_histogram(bins = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumn 'n_finalists' violates assertion 'not_missing' 2 times\n    verb redux_fn   predicate      column index value\n1 assert       NA not_missing n_finalists    13    NA\n2 assert       NA not_missing n_finalists    69    NA\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError: assertr stopped execution\n```\n:::\n:::\n\n\nIf we're okay with ignoring the missing data cases, we can filter them out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narchibald |> \n  verify(has_all_names(\"prize\", \"n_finalists\")) |>\n  filter(prize == \"Archibald Prize\", not_missing(n_finalists)) |>\n  ggplot(aes(n_finalists)) + geom_histogram(bins = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/assertr example 3-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}