{
  "hash": "31d884845fe9956a67323c846a5c40e6",
  "result": {
    "markdown": "---\ntitle: \"Generative art with grid\"\ndescription: \"I decided it was time to learn more about the grid package in R, and so naturally used it to make generative art\"\ndate: \"2023-03-31\"\ncategories: [Art, R, Grid Graphics]\nimage: cover.png\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nAs I approach four months of unemployment I'm finding I need projects to work on purely for the sake of my mental health. One project that has helped a lot is working on the [ggplot2 book](https://ggplot2-book.org) (which I coauthor with Hadley Wickham and Thomas Lin Pedersen). At the moment I'm working on the book chapters that discuss the ggplot2 extension system: it's been quite a lot of fun. One really nice thing about working on those chapters is that I've ended up learning a lot about the [grid](https://www.stat.auckland.ac.nz/~paul/grid/grid.html) graphics system upon which ggplot2 is built.^[The best text to use if you want to learn grid is [R Graphics (2nd ed)](https://www.stat.auckland.ac.nz/~paul/RG2e/) by Paul Murrell. I've found myself relying on it quite heavily.]\n\nAt this point we're really not sure how much grid to incorporate into the book, but as a fun side-project I decided to adapt some of it and use it as the basis for a post on generative art. \n\n## What is grid?\n\nThe grid package provides the underlying graphics system upon which ggplot2 is built. It's one of two quite different drawing systems that are included in base R: base graphics and grid. Base graphics has an imperative \"pen-on-paper\" model: every function immediately draws something on the graphics device. Much like ggplot2 itself, grid takes a more declarative approach where you build up a description of the graphic as an object, which is later rendered. This declarative approach allows us to create objects that exist independently of the graphic device and can be passed around, analysed, and modified. Importantly, parts of a graphical object can refer to other parts, which allows you to do things like define rectangle A to have width equal to the length of text string B, and so on. \n\nThis blog post -- and the corresponding section in the book, should we decide to include it -- isn't intended to be a comprehensive introduction to grid. But it does cover many of the core concepts and introduces key terms like grobs, viewports, graphical parameters, and units. Hopefully it will make sense even if you're completely new to grid.\n\n## Grobs\n\nTo understand how grid works, the first thing we need to talk about are grobs. \nGrobs (**gr**aphic **ob**jects) are the atomic representations of graphical elements in grid, and include types like points, lines, circles, rectangles, and text. The grid package provides functions like `pointsGrob()`, `linesGrob()`, `circleGrob()`, `rectGrob()`, and `textGrob()` that create graphical objects without drawing anything to the graphics device.^[There are also functions `grid.points()`, `grid.lines()`, etc that immediately draw the corresponding grob to the graphics device, but when creating a generative art system I find it makes more separate the plot specification from the drawing process.] These functions are vectorised, allowing a single point grob to represent multiple points, for instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(grid)\n\nset.seed(1)\nn <- 8\nx <- runif(n, min = .3, max = .7) # x coordinate\ny <- runif(n, min = .3, max = .7) # y coordinate\nr <- runif(n, min = 0, max = .15) # radius\n\ncircles <- circleGrob(x = x, y = y, r = r)\n```\n:::\n\n\nNotice that this does not create any output. Much like a ggplot2 plot object, this grob is a declarative description of a set of circles. To trigger a drawing operation we first call `grid.newpage()` to clear the current graphics device, and then `grid.draw()` to perform a draw operation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.newpage()\ngrid.draw(circles)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\nIn addition to providing geometric primitives, grid also allows you to construct composite objects that combine multiple grobs using `grobTree()`. Here's an illustration:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsquares <- rectGrob(x = x, y = y, width = r * 2.5, height =  r * 2.5)\ncomposite <- grobTree(squares, circles)\ngrid.newpage()\ngrid.draw(composite)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=768}\n:::\n:::\n\n\nIt is also possible to define your own grob classes. You can define a new primitive grob class using `grob()` or a new composite class using `gTree()`, and specify special behaviour for your new class. We'll see an example of this in a moment. \n\n## Viewports\n\nThe second key concept in grid is the idea of a viewport. A viewport is a rectangular plotting region that supplies its own coordinate system for grobs that are drawn within it, and can also provide a tabular grid in which other viewports an be nested. An individual grob can have its own viewport or, if none is provided, it will inherit one. In the example below I'll use `viewport()` to define three different viewports, one with default parameters, and two more that are rotated around the midpoint by 15 and 30 degrees respectively:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvp_default <- viewport()\nvp_rotate1 <- viewport(angle = 15)\nvp_rotate2 <- viewport(angle = 30)\n```\n:::\n\n\nThis time around, when we create our composite grobs, we'll explicitly assign them to specific viewports by setting the `vp` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomposite_default <- grobTree(squares, circles, vp = vp_default)\ncomposite_rotate1 <- grobTree(squares, circles, vp = vp_rotate1)\ncomposite_rotate2 <- grobTree(squares, circles, vp = vp_rotate2)\n```\n:::\n\n\nWhen we plot these two grobs, we can see the effect of the viewport: although `composite_default` and `composite_rotated` are comprised of the same two primitive grobs (i.e., `circles` and `squares`), they belong to different viewports so they look different when the plot is drawn:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.newpage()\ngrid.draw(composite_default)\ngrid.draw(composite_rotate1)\ngrid.draw(composite_rotate2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n## Graphical parameters\n\nThe next concept we need to understand is the idea of graphical parameters. When we defined the `circles` and `labels` grobs, we only specified some of its properties. For example, we said nothing about colour or transparency, and so these properties are all set to their default values. The `gpar()` function in grid allows you to specify graphical parameters as distinct objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngpA <- gpar(fill = \"grey30\", col = \"white\", lwd = 20)\ngpB <- gpar(fill = \"white\", col = \"grey30\", lwd = 20)\n```\n:::\n\n\nThe `gpA` and `gpB` objects provide lists of graphical settings that can now be applied to any grob we like using the `gp` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nn <- 5\ncircles <- circleGrob(\n  x = runif(n, min = .2, max = .8),\n  y = runif(n, min = .2, max = .9),\n  r = runif(n, min = 0, max = .15)\n)\n\ngrob1 <- grobTree(circles, vp = vp_default, gp = gpA)\ngrob2 <- grobTree(circles, vp = vp_rotate1, gp = gpB)\ngrob3 <- grobTree(circles, vp = vp_rotate2, gp = gpA)\n```\n:::\n\n\nWhen we plot these two grobs, they inherit the settings provided by the graphical parameters as well as the viewports to which they are assigned:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.newpage()\ngrid.draw(grob1)\ngrid.draw(grob2)\ngrid.draw(grob3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=768}\n:::\n:::\n\n\n\n## Units\n\nThe last core concept that we need to discuss is the grid unit system. The grid package allows you to specify the positions (e.g. `x` and `y`) and dimensions (e.g. `length` and `width)` of grobs and viewports using a flexible language. In the grid unit system there are three qualitatively different styles of unit:\n\n-   Absolute units (e.g. centimeters, inches, and points refer to physical sizes).\n-   Relative units (e.g. npc which scales the viewport size between 0 and 1).\n-   Units based on other grobs (e.g. grobwidth).\n\nThe `unit()` function is the main function we use when specifying units: `unit(1, \"cm\")` refers to a length of 1 centimeter, whereas `unit(0.5, \"npc\")` refers to a length half the size of the relevant viewport. The unit system supports arithmetic operations that are only resolved at draw time, which makes it possible to combine different types of units: `unit(0.5, \"npc\") + unit(1, \"cm\")` defines a point one centimeter to the right of the center of the current viewport.\n\n## Building grob classes\n\nNow that we have a basic understanding of grid, let's attempt to create our own \"transforming\" grob class: objects that are circles if they are smaller than some threshold (1cm by default), but transform into squares whenever they are larger than the threshold.^[This example is based on the \"surprise grob\" example originally written by Thomas Lin Pedersen. I've adapted it a bit here because I'm the kind of person who does that.] This is not the most useful kind of graphical object, but it's useful for illustrating the flexibility of the grid system. The first step is to write our own constructor function using `grob()` or `gTree()`, depending on whether we are creating a primitive or composite object. We begin by creating a \"thin\" constructor function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransGrob <- function(x, \n                      y, \n                      size,\n                      threshold = 1,\n                      default.units = \"npc\", \n                      name = NULL, \n                      gp = gpar(), \n                      vp = NULL) {\n  \n  # Ensure that input arguments are units\n  if (!is.unit(x)) x <- unit(x, default.units)\n  if (!is.unit(y)) y <- unit(y, default.units)\n  if (!is.unit(size)) size <- unit(size, default.units)\n  \n  # Construct the grob class as a gTree\n  gTree(\n    x = x, \n    y = y, \n    size = size, \n    threshold = threshold,\n    name = name, \n    gp = gp, \n    vp = vp, \n    cl = \"trans\"\n  )\n}\n```\n:::\n\n\nThe `transGrob()` function doesn't do very much on its own. All it does is ensure that the `x`, `y`, and `size` arguments are grid units, and sets the class name to be \"trans\". To define the behaviour of our grob, we need to specify methods for one or both of the generic functions `makeContext()` and `makeContent()`:\n\n-   `makeContext()` is called when the parent grob is rendered and allows you to control the viewport of the grob. We won't need to use that for our surprise grob.\n\n-   `makeContent()` is called every time the drawing region is resized and allows you to customise the look of the grob based on the size or other aspect.\n\nBecause these generic functions use the S3 object oriented programming system, we can define our method simply by appending the class name to the end of the function name. That is, the `makeContent()` method for our surprise grob is defined by creating a function called `makeContent.trans()` that takes a grob as input and returns a modified grob as output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmakeContent.trans <- function(x) {\n  x_pos <- x$x\n  y_pos <- x$y\n  size <- convertWidth(x$size, unitTo = \"cm\", valueOnly = TRUE)\n  threshold <- x$threshold\n  \n  # Work out which shapes are circles, and which are not\n  circles <- size < threshold\n  \n  # Create a circle grob for the small ones\n  if (any(circles)) {\n    circle_grob <- circleGrob(\n      x = x_pos[circles], \n      y = y_pos[circles], \n      r = unit(size[circles] / 2, \"cm\")\n    )\n  } else {\n    circle_grob <- nullGrob()\n  }\n  \n  # Create a rect grob for the large ones\n  if (any(!circles)) {\n    square_grob <- rectGrob(\n      x = x_pos[!circles], \n      y = y_pos[!circles], \n      width = unit(size[!circles], \"cm\"),\n      height = unit(size[!circles], \"cm\")\n    )\n  } else {\n    square_grob <- nullGrob()\n  }\n  \n  # Add the circle and rect grob as children of our input grob\n  setChildren(x, gList(square_grob, circle_grob))\n}\n```\n:::\n\n\nSome of the functions we've called here are new, but they all reuse the core concepts that we discussed earlier. Specifically:\n\n- `convertWidth()` is used to convert grid units from one type to another.\n- `nullGrob()` creates a blank grob.\n- `gList()` creates a list of grobs.\n- `setChildren()` specifies the grobs that belong to a gTree composite grob. \n\nThe effect of this function is to ensure that every time the grob is rendered the absolute size of each shape is recalculated. All shapes smaller than the threshold become circles, and all shapes larger than the threshold become squares. To see how this plays out, lets call our new function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nn <- 20\ntrans <- transGrob(\n  x = runif(n, min = .2, max = .8),\n  y = runif(n, min = .2, max = .8),\n  size = runif(n, min = 0, max = .15),\n  threshold = 2\n)\n```\n:::\n\n\nThe `trans` grob contains shapes whose locations and sizes have been specified relative to the size of the viewport. At this point in time we have no idea which of these shapes will be circles and which will be squares, because that depends on the size of the viewport in which the `trans` grob is to be drawn. Here's what we end up with for this quarto post that defines the figure size to be 8x8 inches:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.newpage()\ngrid.draw(trans)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n\nThe exact same code, but now I've made the plot size smaller and as a consequence all the shapes have turned into circles:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrid.newpage()\ngrid.draw(trans)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=384}\n:::\n:::\n\n\nIf you run this code interactively and resize the plotting window you'll see that the objects change shape based on the size of the plotting window. It's not the most useful application of grid, but it is fun to play with.\n\n## Pushing viewports\n\nA nice feature of grid is that viewports can be nested within other viewports. At the top level there is always \"root\" viewport that encompasses the entire image. By default user-created viewports are children of the root viewport, and inherit properties from it. However, there's nothing stopping you from assigning new viewports to be children of previous user-generated viewports. In the simplest case^[The only case I'm going to consider here.], we can use this to create a *viewport stack* in which each new viewport is the child of the previous one. The `pushViewport()` function allows us to do this.\n\nHere's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvp <- viewport(angle = 17, width = .8, height = .8)\nbox <- rectGrob(width = 1, height = 1)\ngrid.newpage()\nfor(i in 1:20) {\n  pushViewport(vp)\n  grid.draw(box)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=768}\n:::\n:::\n\n\nIn this code I define `vp` to be a viewport that shrinks the width and height of the current viewport to be 80% of its parent, and rotates the frame by 17 degrees.b Then I repeatedly push `vp` to the viewport stack, and draw a border (the `box` grob) showing the edges of that viewport. The effects of each push to the stack are cumulative, as the image shows.\n\nIt's also quite pretty. \n\nThe grid package has a lot of tools for working with viewport lists, stacks, and trees. You can assign names to viewports, navigate back and forth between different viewports during plot construction, and so on. But that's a topic for another day.\n\n## Trans spirals\n\nI'm pleasantly surprised at how easy it is to create interesting generative art with grid. As a really simple example, here's a system that combines two tricks: it uses the `transGrob()` that we defined earlier, and it uses a viewport stack to create spiraling images:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrans_spiral <- function(seed) {\n  \n  set.seed(seed)\n  n <- 15\n  trans <- transGrob(\n    x = runif(n, min = .1, max = .9),\n    y = runif(n, min = .1, max = .9), \n    size = runif(n, min = 0, max = .15),\n    threshold = 1\n  )\n  \n  cols <- sample(c(\"#5BCEFA\", \"#F5A9B8\", \"#FFFFFF\"), 30, TRUE)\n  \n  vp_spiral <- viewport(width = .95, height = .95, angle = 10)\n  \n  grid.newpage()\n  for(i in 1:30) {\n    pushViewport(vp_spiral)\n    grid.draw(grobTree(trans, gp = gpar(fill = cols[i])))\n  }\n}\n```\n:::\n\n\nIt produces output like this...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrans_spiral(1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\n... and this ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrans_spiral(2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=768}\n:::\n:::\n\n\n... and this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrans_spiral(3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=768}\n:::\n:::\n\n\n\n\n<!--------------- appendices go here ----------------->\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}