{
  "hash": "f3b72fe7f43a32d67e1c9f291622e2d3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: A foundation in Julia\ndescription: Part one of a three-part series in which I swear I was going to keep it brief but ended up writing a staggeringly long set of notes on learning a bit of Julia\ndate: '2024-03-01'\ncategories:\n  - Julia\n---\n\n\n<!--------------- post begins here ----------------->\n\nAfter many years of procrastination and telling myself I'll get around to it later, I've finally decided that now is the time for me to start learning [Julia](https://julialang.org/). At this point in my life I am strong in R, passable in Javascript, and can survive in SQL, C++ and Python if I need them for something. But despite my interest-from-afar in Julia, I haven't had much of an excuse to dive into it before. \n\nPart of the appeal in Julia is that it's designed to be a high-performance language for scientific computing. Like other scientific languages (e.g., R, Matlab, etc) it has 1-based indexing rather than 0-based indexing (Python, C++, etc). Julia code is automatically compiled giving you performance that is comparable to compiled languages like C++, without the hassle of actually having to deal with the compiler yourself. But we've all heard the sales pitch for Julia before, there's no need for me to repeat it here, and anyway I kinda just want to dive into the code.\n\n![](foundation1.png)\n\n## Getting started\n\nFirst things first. In order to get started I had to go through the process of [installing Julia](https://julialang.org/downloads/), which was pretty straightforward. Getting it to work within my quarto blog was a bit trickier, but there's some fairly decent documentation on [Julia for Quarto](https://quarto.org/docs/computations/julia.html) which got me there. After getting it set up it was as simple as including this line in the YAML header for this post,^[Okay that's only half true. The other thing I ended up doing was creating a [project environment](https://pkgdocs.julialang.org/v1/environments/) for this blog post, and if you look at the source code for this post you can see that I've actually used `Pkg.activate()` to ensure that the Julia code in this post is executed using that environment. There's a nice blog post on setting up a project environment [here](https://towardsdatascience.com/how-to-setup-project-environments-in-julia-ec8ae73afe9c), but it's a bit beyond the scope of what I want to cover here.]\n\n```yaml\njupyter: julia-1.10\n```\n\nand then creating executable Julia code cells by appending `{julia}` after the triple-fence used to define a block. So let's see. Is Julia working in my quarto environment? I'll start with my usual variant on the traditional \"hello world\" program using the `println()` (i.e., \"print line\") function:\n\n::: {#626fe2dd .cell execution_count=2}\n``` {.julia .cell-code}\nprintln(\"hello cruel world\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello cruel world\n```\n:::\n:::\n\n\nYes, that seems to be working, as -- shockingly -- is the ability to do some basic calculations using aritmetic [operators](https://docs.julialang.org/en/v1/manual/mathematical-operations/) that seem pretty much the same as most languages I use:\n\n::: {#638f11c2 .cell execution_count=3}\n``` {.julia .cell-code}\n24 * 7\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n168\n```\n:::\n:::\n\n\nI can define variables, using `=` as the assignment operator:\n\n::: {#a3616bb0 .cell execution_count=4}\n``` {.julia .cell-code}\nhours = 24;\ndays = 7;\n```\n:::\n\n\nThe semicolons here are optional: they're used as end-of-line delimiters, but the main reason I've used them in the code chunk above is to suppress printing the return value of these assignments.\n\nSo yes, we are up and running.\n\n## Object types\n\nJulia is a [dynamically typed language](https://docs.julialang.org/en/v1/manual/types/), so when I defined the `hours` variable earlier I was able to create an integer without explicitly defining it as such:\n\n::: {#29fc154d .cell execution_count=5}\n``` {.julia .cell-code}\ntypeof(hours)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nInt64\n```\n:::\n:::\n\n\nBy default Julia creates a 64-bit integer, but -- unlike R and more like C++ -- there are several integer types. If I'd wanted to create a 128-bit integer to represent the number of minutes in an hour (but why????) I could have done so by declaring the type explicitly:\n\n::: {#4501c083 .cell execution_count=6}\n``` {.julia .cell-code}\nminutes::Int128 = 60;\ntypeof(minutes)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nInt128\n```\n:::\n:::\n\n\nSo while `minutes` and `hours` are both integers they are different types, and -- as you would expect -- are represented differently internally. In an extremely strict language, it would not be possible to multiple `minutes` by `hours` without first converting at least one of them to a different type, but thankfully Julia operators will automatically promote to common type and so I can calculate the number of minutes in one day without doing the tedious type conversions myself:\n\n::: {#9ebc7114 .cell execution_count=7}\n``` {.julia .cell-code}\ntypeof(minutes * hours)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nInt128\n```\n:::\n:::\n\n\nYou can see the same mechanism in action when I try to calculate the number of minutes in 1.7 days. The `minutes` variable^[Technically, the value referenced by the `minutes` variable: values have types, variables are simply labels that point to values. But I shan't be bothered with that distinction here.] is a 64-bit integer, the `hours` variable is a 128-bit integer, but the value of `1.7` is represented as a 64-bit floating point numbers. So when I compute `minutes * hours * 1.7`, the return value is a 64-bit float:\n\n::: {#89735bdc .cell execution_count=8}\n``` {.julia .cell-code}\ntypeof(minutes * hours * 1.7)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nFloat64\n```\n:::\n:::\n\n\n![](foundation2.png)\n\n\n## Vectors\n\nI find myself liking the syntax Julia uses to create objects. You can create a vector using square brackets like this, which feels very much like Matlab to me:^[Fun fact. Apart from a brief period in undergraduate where I learned a little bit of C, Matlab was my first programming language. But it's been a very, very long time since I used Matlab -- or GNU Octave -- for anything. I imagine I could pick it up again if I had to but I honestly don't see the point.]\n\n::: {#2b1db07d .cell execution_count=9}\n``` {.julia .cell-code}\nwords = [\"hello\", \"cruel\", \"world\"];\n```\n:::\n\n\nThe `words` variable I've just created is a vector of three strings:\n\n::: {#5f5bb495 .cell execution_count=10}\n``` {.julia .cell-code}\ntypeof(words)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Vector{String}<span class=\"ansi-bright-black-fg\"> (alias for </span><span class=\"ansi-bright-black-fg\">Array{String, 1}</span><span class=\"ansi-bright-black-fg\">)</span></pre>\n```\n:::\n\n:::\n:::\n\n\nSubsetting uses square brackets too, and as I mentioned earlier indexing in Julia starts at 1:\n\n::: {#08beb4f5 .cell execution_count=11}\n``` {.julia .cell-code}\nwords[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n\"hello\"\n```\n:::\n:::\n\n\nA couple of other things to note here. In Julia, you need to be more careful about single versus double quotes than you would be in R (where they are interchangeable). In Julia, single quotes are used to define a single character (e.g., `'h'` is a character), whereas double quotes are used to define a string (e.g. `\"hello\"` is a string). Strings are in fact a vector of characters, so `\"hello\"[1]` returns the character `'h'`. But whatevs. Let's move along. \n\n## Tuples\n\nI have no intention of diving too deeply into object types in Julia, but there are two more that I feel are worth mentioning at this point: tuples and dictionaries. Let's start with tuples. A [tuple](https://docs.julialang.org/en/v1/manual/functions/#Tuples) is simply an ordered collection of values, and are constructed using parentheses:^[A tuple is an immutable type, so the idea here is that you're really supposed to use tuples to represent list of values that doesn't change.]\n\n::: {#0954af77 .cell execution_count=12}\n``` {.julia .cell-code}\nfruit = (\"apple\", \"banana\", \"cherry\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n(\"apple\", \"banana\", \"cherry\")\n```\n:::\n:::\n\n\n## Dictionaries\n\nIn contrast, a [dictionary](https://docs.julialang.org/en/v1/base/collections/#Dictionaries)^[Dictionaries are mutable, so you can modify values stored in a dictionary.] is a list of key-value pairs. There's a few different ways to define a dictionary but I'm partial to this syntax:\n\n::: {#b83d4ab9 .cell execution_count=13}\n``` {.julia .cell-code}\ndanielle = Dict(\n  \"name\" => \"danielle\",\n  \"age\" => 47,\n  \"gender\" => \"female\",\n  \"boring\" => true\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nDict{String, Any} with 4 entries:\n  \"name\"   => \"danielle\"\n  \"boring\" => true\n  \"gender\" => \"female\"\n  \"age\"    => 47\n```\n:::\n:::\n\n\nThe entries in a dictionary can be indexed using the keys:\n\n::: {#9cafd309 .cell execution_count=14}\n``` {.julia .cell-code}\ndanielle[\"gender\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n\"female\"\n```\n:::\n:::\n\n\n![](foundation3.png)\n\n## Functions\n\nThe syntax for defining functions in Julia comes in a couple of forms. The usual way to do it is using the `function` keyword, and I could define a simple `greet()` function like this:\n\n::: {#4cbb089f .cell execution_count=15}\n``` {.julia .cell-code}\nfunction greet(name) \n  \"hello $name, nice to meet you\"\nend;\n```\n:::\n\n\nThe `end` keyword is required here. Note also that I've taken advantage of Julia's [string interpolation syntax](https://www.juliawiki.com/wiki/String_interpolation) to substitute the value of `name` into the string that `greet()` outputs:\n\n::: {#773a1058 .cell execution_count=16}\n``` {.julia .cell-code}\ngreet(\"danielle\")\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n\"hello danielle, nice to meet you\"\n```\n:::\n:::\n\n\nYou can also create functions using the anonymous function syntax (e.g., `x -> \"hello $x\"` defines an anonymous function), which is handy in the functional programming context if you want to map a vector of values onto another vector using `map()`:\n\n::: {#71858d60 .cell execution_count=17}\n``` {.julia .cell-code}\nmap(x -> \"hello $x\", [\"amy\", \"belle\", \"chiara\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n3-element Vector{String}:\n \"hello amy\"\n \"hello belle\"\n \"hello chiara\"\n```\n:::\n:::\n\n\nIn this case though I didn't really need to resort to using `map()` because Julia also allows you to vectorise a function, using `.` to \"broadcast\" a scalar function to accept vector inputs:\n\n::: {#38ed945f .cell execution_count=18}\n``` {.julia .cell-code}\ngreet.([\"amy\", \"belle\", \"chiara\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n3-element Vector{String}:\n \"hello amy, nice to meet you\"\n \"hello belle, nice to meet you\"\n \"hello chiara, nice to meet you\"\n```\n:::\n:::\n\n\nI can see that being handy. \n\nI'll come back to functions momentarily in order to talk about generic functions and method dispatch in Julia, but first I'll pivot a little to talk about packages.\n\n## Packages\n\nAs with any programming language, most of the power comes in Julia comes from the extensive collection of packages that other users have contributed. The usual way to install a package is via the Julia REPL.^[REPL = \"Read-evaluate-print loop\". It's a fancy way of referring to the command line I guess. In R we'd usually refer to the REPL as the R console, but other languages tend to use the term REPL.] The Julia REPL is a little unusual in that it has several different \"modes\". Normally your command prompt in the Julia REPL looks something like this:\n\n```\njulia>\n```\n\nBut if you type `]` at the REPL you'll see it transform into something like this:^[There are other modes besides regular and package. For instance if you type `?` at the REPL it takes you into help mode.]\n\n```\n(@v1.10) pkg>\n```\n\nThis tells you that you've entered \"package\" mode, and you can type commands that can be used to install Julia packages and various other things.^[You don't actually have to do it this way. The \"package\" mode in the REPL exposes various functions from the [Pkg](https://docs.julialang.org/en/v1/stdlib/Pkg/) package, so if you have loaded `Pkg` then you could totally call `Pkg.add()` to install a package. In practice I find this a bit silly, but I suppose it has more useful applications in activating an environment via `Pkg.activate()` etc.] ^[The syntax here is meaningful. If you are working in the base Julia environment, the bit in parentheses tells you that if you add a package it will be added to the base environment. For this blog post, however I'm using a custom environment called \"sandbox\" that has the packages I'm using, so the prompt I would see looks like this: `(sandbox) pkg>`.] (If you want to get out of package mode and return to the regular REPL press \"backspace\".)\n\nSo then, if you want to install the [JSON](https://juliapackages.com/p/json) package, the command you'd type at the REPL in package mode would simply be `add JSON`. And having installed the JSON package into my Julia environment, I can load it using the `using` keyword:\n\n::: {#21799289 .cell execution_count=19}\n``` {.julia .cell-code}\nusing JSON\n```\n:::\n\n\nAnd now I can read the \"praise.json\" file that I just so happen to have sitting in my working directory by calling `JSON.parsefile()`\n\n::: {#836d7b0a .cell execution_count=20}\n``` {.julia .cell-code}\npraise_dict = JSON.parsefile(\"praise.json\")\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nDict{String, Any} with 3 entries:\n  \"exclamation\" => Any[\"ah\", \"aha\", \"ahh\", \"ahhh\", \"aw\", \"aww\", \"awww\", \"aye\", …\n  \"superlative\" => Any[\"ace\", \"amazing\", \"astonishing\", \"astounding\", \"awe-insp…\n  \"adverb\"      => Any[\"beautifully\", \"bravely\", \"brightly\", \"calmly\", \"careful…\n```\n:::\n:::\n\n\nMost convenient, because now that I have this `praise_dict` object I'm going to use it in the next section when I return to talking about functions...\n\n![](foundation4.png)\n\n## Methods\n\nOne of my favourite little R packages is [praise](https://github.com/rladies/praise), which you can use to create random snippets of positive feedback that can be inserted in various places. Inspired by this, I'm going to define a cute little `praise()` function that does something similar.\n\nIn the last section I defined `praise_dict`, a handy dictionary that contains some adverbs, superlatives, and exclamations that you can use to construct random praise statements. So let's define `praise()` such that it takes the `name` of a person as a string, and outputs a piece of positive feedback:\n\n::: {#2e04a40e .cell execution_count=21}\n``` {.julia .cell-code}\nfunction praise(name::String)\n    hey = rand(praise_dict[\"exclamation\"])\n    sup = rand(praise_dict[\"superlative\"])\n    adv = rand(praise_dict[\"adverb\"])\n    \"$hey $name you are $adv $sup\"\nend;\n\npraise(\"danielle\")\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n\"whee danielle you are fast super-duper\"\n```\n:::\n:::\n\n\nOh, that's so sweet of you to say. Notice, however, that I've been a little stricter in how I've defined the input arguments for `praise()` than I was earlier when I defined `greet()`. The `praise()` function won't work if the `name` argument is not a string:\n\n::: {#acfb194a .cell execution_count=22}\n``` {.julia .cell-code}\npraise(103)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching praise(::Int64)\n\nClosest candidates are:\n  praise(<span class=\"ansi-bright-red-fg\">::String</span>)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[22]:1</span>\n</pre>\n```\n:::\n\n:::\n:::\n\n\nThat's probably a good thing. We don't typically provide praise to an integer, so it makes sense that the function doesn't work when you pass it an integer! \n\nOn the other hand, we might want our `praise()` function to work if the user doesn't pass it a name at all. To accomplish that, we can write another `praise()` function that doesn't take any arguments:\n\n::: {#bd5addb1 .cell execution_count=23}\n``` {.julia .cell-code}\nfunction praise()\n    hey = rand(praise_dict[\"exclamation\"])\n    sup = rand(praise_dict[\"superlative\"])\n    adv = rand(praise_dict[\"adverb\"])\n    \"$hey you are $adv $sup\"\nend;\n```\n:::\n\n\nSo now this works:\n\n::: {#71ca0f1c .cell execution_count=24}\n``` {.julia .cell-code}\npraise()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n\"hmm you are enthusiastically striking\"\n```\n:::\n:::\n\n\nThe key thing to notice here is that though I've defined `praise()` twice, what Julia actually does in this situation is construct a single \"generic\" function that has two [methods](https://docs.julialang.org/en/v1/manual/methods/). In other words, `praise()` will work if you pass it a single string, and it will also work if you don't pass it any arguments at all. It won't work for any other kind of input. On the surface that seems pretty sensible, but in practice we might need a third method. Suppose I have a vector where there are a few people's names listed, but it has missing values:^[The `missing` value is used to define missing data in Julia, analogous to how `NA` is used to define missing values in R.]\n\n::: {#3f32c34e .cell execution_count=25}\n``` {.julia .cell-code}\npeople = [\"alex\", missing, \"fiona\"];\n```\n:::\n\n\nMy `praise()` function isn't inherently vectorised, but of course we can use the `.` syntax to praise several people at once and call `praise.(people)`. Unfortunately this work right now because `praise()` doesn't know what to do with the missing value. So if we want our `praise()` function to handle missing data gracefully it needs a third method:\n\n::: {#f65abd0e .cell execution_count=26}\n``` {.julia .cell-code}\nfunction praise(name::Missing)\n    hey = rand(praise_dict[\"exclamation\"])\n    sup = rand(praise_dict[\"superlative\"])\n    adv = rand(praise_dict[\"adverb\"])\n    \"$hey you are $adv $sup\"\nend;\n```\n:::\n\n\nNow that we have all three methods `praise()` works just fine:\n\n::: {#94c3ff81 .cell execution_count=27}\n``` {.julia .cell-code}\npraise.(people)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n3-element Vector{String}:\n \"whee alex you are smoothly classy\"\n \"aw you are justly hunky-dory\"\n \"mmh fiona you are doubtfully awesome\"\n```\n:::\n:::\n\n\nAs an aside, if you ever needed to find out what methods have been defined for the `praise()` function, you can do so by calling `methods(praise)`.\n\n![](foundation5.png)\n\n\n## Piping\n\nMuch like recent versions of R, Julia comes with a piping operator `|>` that you can use to pass the output of one function to another one. So let's say I have some numbers stored as `vals`, and I want to compute their geometric mean: \n\n::: {#6a3ed302 .cell execution_count=28}\n``` {.julia .cell-code}\nvals = [10.2, 12.1, 14.3]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n3-element Vector{Float64}:\n 10.2\n 12.1\n 14.3\n```\n:::\n:::\n\n\nIn Julia `mean()` is part of the Statistics package, so we'll load that:\n\n::: {#e10abd0d .cell execution_count=29}\n``` {.julia .cell-code}\nusing Statistics\n```\n:::\n\n\nTo compute the geometric mean, we first compute the natural logarithm for each element in `vals` using `log()`, compute the arithmetic mean of those log-values with `mean()`, and then exponentiate the result with `exp()`. Written as a series of nested function calls, it looks like this:\n\n::: {#b8f0ae00 .cell execution_count=30}\n``` {.julia .cell-code}\nexp(mean(log.(vals)))\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n12.084829472557535\n```\n:::\n:::\n\n\nAs has been noted many times in the past, one awkward feature of code written in this form is that you have to read it from the inside (innermost parentheses) to the outside in order to understand the sequence of events: first you take `vals` and pass it to `log.()`, then you take these logarithms and pass them to `mean()`, and then you take this mean and pass it to `exp()`. In this specific case it's not terrible to read, because it just so happens that \"exp mean log value\" is pretty much how the formula for the geometric mean is written mathematically, but most data oriented programming isn't structured to look exactly like an equation, and \"inside out\" code quickly becomes difficult to read. \n\nThis is where the \"pipe\" operator `|>` comes in handy. You start with an object on the left hand side, and then pass it to the function named on the right hand side. When you chain a series of piping operations together you end up with code that reads left-to-right rather than inside-out:\n\n::: {#b6d691ed .cell execution_count=31}\n``` {.julia .cell-code}\nvals .|> log |> mean |> exp\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n12.084829472557535\n```\n:::\n:::\n\n\nNotice that like other operators, I can use `.` to broadcast when using the pipe.\n\nMuch like R, Julia has multiple versions of the pipe. For the purpose of this post I'm only going to talk about the base pipe, which is much much stricter than the magrittr pipe `%>%` in R, and indeed considerably stricter than the base pipe `|>` in R.^[If you are interested in such things, the [Pipe](https://juliapackages.com/p/pipe) package supplies a pipe that is very similar to the R base pipe.] As you can see from the code above, the right hand side of the pipe is a function, *not* a call. The object supplied on the left hand side of the pipe is passed as the first argument to the function. No additional arguments can be supplied to the function on the right.\n\nOn the surface this seems very restrictive, but the longer I've been playing with Julia the more I realise it's not as restrictive as I first thought. Because Julia makes it very easy to write anonymous functions, and because there's very little overhead to calling one, you can write a pipeline that consists entirely of calls to anonymous functions. As a very simple example of a \"split, apply, combine\" style workflow constructed with the Julia pipe, here's how you could use this to reverse each of the individual words in a string:\n\n::: {#f70a4114 .cell execution_count=32}\n``` {.julia .cell-code}\n\"hello cruel world\"  |>\n  x -> split(x, \" \") |>\n  x -> reverse.(x)   |>\n  x -> join(x, \" \")\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n\"olleh leurc dlrow\"\n```\n:::\n:::\n\n\nTo make this work I really do need to be able to specify additional arguments to `split()` and `join()`, which would not be permitted in a simpler application of the Julia pipe, but it works perfectly well here because those additional arguments are specified inside the anonymous functions to which the inputs are piped. \n\nHonestly, as much as I was initially like \"ugh this is unwieldy\", I'm starting to appreciate the simplicity of the design and how it really does force you to start thinking about your pipelines in functional programming terms.^[So much so, in fact, that while my original plan for these Julia posts was to briefly dispense of the base pipe and spend more time talking about the [Pipe](https://juliapackages.com/p/pipe) package, I think I'm going to skip the package entirely and just use base pipe + anonymous functions. ] \n\n## Function composition\n\nI should also mention that Julia has the [function composition operator](https://www.juliawiki.com/wiki/Function_composition_(Julia)) `∘` that you can use for this purpose, using much the same notation as in mathematics.^[For most editors that are configured to handle Julia syntax can type the `∘` operator by typing `\\circ` and then hitting tab.] So I could define a `geomean()` function as the following composition:\n\n::: {#1fd6d027 .cell execution_count=33}\n``` {.julia .cell-code}\ngeomean = exp ∘ mean ∘ (x -> log.(x))\ngeomean(vals)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n12.084829472557535\n```\n:::\n:::\n\n\nIn this expression I've used an anonymous function as the third function to be composed so as to ensure that if the user passes a vector such as `vals`, the default behaviour of `geomean()` is to broadcast the call top `log()` (i.e., compute the log of each input individually), then pass the resulting vector of logarithms to `mean()` *as* a vector, and then pass the resulting scalar to `exp()`. \n\nTo be honest, as cute as this is, I'm not sure I see much utility to this right now. So yeah, time to move onto the last \"topic\" in this foundations post, in which the author will mention but in no way actually explain the extensive capabilities that Julia has for allowing...\n \n![](foundation6.png) \n \n## Metaprogramming\n\nMuch like R -- and very unlike Matlab, which Julia syntax sometimes resembles -- the design choices underpinning Julia have been influnced heavily by [Lisp](https://en.wikipedia.org/wiki/Lisp_(programming_language)). While I have never actually learned to program in any of the major dialects of Lisp, I've always wanted to, and I'm a huge fan of the way that Lisp and its descendants contain programming constructs that directly represent [abstract syntax trees](https://en.wikipedia.org/wiki/Abstract_syntax_tree) and provide tools that let you manipulate user-supplied code.^[Very often I see programmers who have never worked in a Lisp-descended language (e.g., they know Python, C, etc. but not R, Julia, Scheme, etc.) react in horror and outrage at the things that you are permitted to do in languages that rely extensively on metaprogramming, but honestly I love it. I think it's such a powerful tool for constructing [domain specific languages](https://en.wikipedia.org/wiki/Domain-specific_language) *within* the confines of a more general language.]\n\nBecause [Julia Metaprogramming](https://docs.julialang.org/en/v1/manual/metaprogramming/) is such a powerful tool, what I've noticed already -- even as a novice -- is that most practical uses of the language end up relying on it heavily. Julia supports abstract [Symbols](https://docs.julialang.org/en/v1/base/base/#Core.Symbol), [Expressions](https://docs.julialang.org/en/v1/base/base/#Core.Expr), and [Macros](https://docs.julialang.org/en/v1/manual/metaprogramming/#man-macros), all of which start to pop up in your code once you start using it for real world data wrangling and visualisation. So it's pretty important to understand something about how it all works. That said... it's an advanced topic rather than a basic one, so what I think I'm going to do for now is issue a promissory note: I'll talk more about this in later posts as those topics become relevant.\n\n## Where to next?\n\nVery obviously, I skipped a *lot* of foundational topics in this post. This is not in any sense a coherent or complete introduction to Julia programming. I mean, I didn't even bother to talk about [control flow](https://docs.julialang.org/en/v1/manual/control-flow/), which is one hell of an omission. But my goal here isn't to provide a complete overview, and perhaps surprisingly I don't actually use loops or if/then conditionals at all in the next two posts, so I simply haven't bothered to write anything about those topics here. I focused on the things that popped up as I went about trying to try out a few things.\n\nIn any case, if you're curious about where this is about to go, the [second post](/posts/2024-03-02_julia-data-frames/) in this series will talk about data frames and data wrangling, while the [third post](/posts/2024-03-03_julia-plots/) will take a look at a data visualisation tool. Which, quite frankly, is a *lot* more than I'd intended to do when I had this idea -- which increasingly feels ill-advised -- to play around with Julia and write about the experience. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}