{
  "hash": "b788b4b89863dc635cb9dee996a12c7e",
  "result": {
    "markdown": "---\ntitle: \"Queue\"\nauthor:\n  - name: Danielle Navarro\n    url: https://djnavarro.net\n    affiliation: I'm on smoko\n    affiliation-url: https://www.youtube.com/watch?v=j58V2vC9EPc\n    orcid: 0000-0001-7648-6578\ndescription: \"Something something something\"\ndate: \"2022-12-22\"\ncategories: [Parallel Computing, R, Object-Oriented Programming]\nimage: \"\"\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nOkay. So I wrote a simple package for [multi-threaded tasks queues in R](https://queue.djnavarro.net) this week. It wasn't intentional, I swear. I was just trying to teach myself how to use the [callr](https://callr.r-lib.org/) package, and making sure I had a solid grasp of encapsulated object-oriented programming with [R6](https://r6.r-lib.org/). Things got a little out of hand. Sorry.\n\nAnd let's be very clear about something at the outset. If you want to do parallel computing in R correctly, you go look at [futureverse.org](https://www.futureverse.org/). The [future](https://future.futureverse.org/) package provides a fabulous way to execute R code asynchronously and in parallel. And there are many excellent packages built on top of that, so there's a whole lovely ecosystem there just waiting for you.^[Note to self: Learn [parallelly](https://www.jottr.org/2022/12/05/avoid-detectcores/)] Relatedly, if the reason you're thinking about parallel computing is that you've found yourself with a burning need to analyze terabytes of data with R then babe it might be time to start learning some R workflows using [Spark](https://therinspark.com/), [Arrow](https://blog.djnavarro.net/category/apachearrow), [Kubernetes](https://www.r-bloggers.com/2022/04/wtf-is-kubernetes-and-should-i-care-as-r-user/). It may be time to learn about some of those other eldritch words of power that have figured rather more prominently in my life than one might expect for a simple country girl.^[`kubectl auth can-i create occult-chaos`] \n\nMy little queue package is a personal project. I happen to like it, but you should not be looking at it as an alternative to serious tools.\n\nThat's been said now. Good. We can put aside all pretension.\n\n## What does it do, and why?\n\nLet's say I have a generative art function called `donut()`, based loosely on a [teaching example from my art from code workshop](https://art-from-code.netlify.app/day-1/session-1/#composition). The `donut()` function takes an input `seed`, creates a piece of generative art using ggplot2, and writes the output to an image file. This process takes several seconds to complete on my laptop:\n\n\n\n\n::: {.cell hash='index_cache/html/my-first-donut_78cc3a9337022adc6a85a72fd51f194e'}\n\n```{.r .cell-code}\nlibrary(tictoc)\ntic()\ndonut(seed = 100)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8.524 sec elapsed\n```\n:::\n:::\n\n\nHere's the piece, by the way:\n\n![](donut_100.png)\n\nThat's nice and I do like this piece, but generative art is an iterative process and I like to make many pieces at once to help me get a feel for the statistical properties of the system. Waiting 8.5 seconds for one piece to render is one thing: waiting 15 minutes for 100 pieces to render is quite another. So it's helpful if I can do this in parallel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(queue)\n```\n:::\n\n\nHere's how I might do that with queue:\n\n\n::: {.cell hash='index_cache/html/my-first-queue_51d6e56fc7fadd364fa03a6a5df69f41'}\n\n```{.r .cell-code}\nq1 <- Queue$new(workers = 6)\nfor(seed in 101:108) q1$add(donut, list(seed))\nout1 <- q1$run(message = \"verbose\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_4 finished in 4.26 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_1 finished in 5.28 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_5 finished in 6.37 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_3 finished in 7.28 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_2 finished in 7.44 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_6 finished in 8.11 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_7 finished in 6.19 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_8 finished in 5.58 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Queue complete: 8 tasks done in 10.9 secs\n```\n:::\n:::\n\n\nIt doesn't run six times faster. There's overhead: R sessions have to be initialised, the scheduler needs to assign the tasks, data have to be serialised and passed between R sessions and so on. Perhaps most importantly, my little laptop doesn't really have six cores to spare. There's reason why the sixth worker took 20 seconds to finish -- the operating system didn't have any spare resources to allocate.  \n\n::: {.column-screen-inset}\n::: {layout-ncol=4}\n\n![](donut_101.png)\n\n![](donut_102.png)\n\n![](donut_103.png)\n\n![](donut_104.png)\n\n![](donut_105.png)\n\n![](donut_106.png)\n\n![](donut_107.png)\n\n![](donut_108.png)\n\n:::\n:::\n\nFor comparison, let's make another eight pieces, this time with only three workers:\n\n\n::: {.cell hash='index_cache/html/my-second-queue_7060f58bf9582296917f2558a0d7aa36'}\n\n```{.r .cell-code}\nq2 <- Queue$new(workers = 3)\nfor(seed in 109:116) q2$add(donut, list(seed))\nout2 <- q2$run(message = \"verbose\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_1 finished in 10.7 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_2 finished in 10.8 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_3 finished in 11.4 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_4 finished in 4.92 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_5 finished in 4.8 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_6 finished in 9.06 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_7 finished in 9 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_8 finished in 10.8 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Queue complete: 8 tasks done in 26.4 secs\n```\n:::\n:::\n\n\nThe completion time is essentially the same. Ultimately, whenever you're using multithreading as your mechanism for parallel computing, you're relying on the operating system to do the work for you. The queue package doesn't do any clever scheduling. All it does is set the R process running and polls them intermittently to see if they've finished their assigned tasks. The operating system tasks care of low level details. If you create 100 workers but your machine only has 3 cores free, well, the operating system isn't a magic wand. It can't make computing resources appear if they don't exist. \n\nBy default, queue sets the concurrency to 4 workers, on the -- thorougly unscientific -- logic that this usually speeds things up on my laptop without being absurd, and pushing any higher than that rarely does anything useful. \n\n::: {.column-screen-inset}\n::: {layout-ncol=4}\n\n![](donut_109.png)\n\n![](donut_110.png)\n\n![](donut_111.png)\n\n![](donut_112.png)\n\n![](donut_113.png)\n\n![](donut_114.png)\n\n![](donut_115.png)\n\n![](donut_116.png)\n\n:::\n:::\n\n\n## What does it store?\n\nOkay, so let's take a look at what it actually stores\n\n\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\nout1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  task_id worker_id state        result       runtime\n1  task_1    555843  done donut_101.png 5.282254 secs\n2  task_2    555855  done donut_102.png 7.442093 secs\n3  task_3    555867  done donut_103.png 7.276114 secs\n4  task_4    555879  done donut_104.png 4.259732 secs\n5  task_5    555892  done donut_105.png 6.365720 secs\n6  task_6    555904  done donut_106.png 8.114676 secs\n7  task_7    555879  done donut_107.png 6.190101 secs\n8  task_8    555843  done donut_108.png 5.578790 secs\nfun\n1 function (seed, filename = paste0(\"donut_\", seed, \".png\"), width = 2000, ,     height = 2000, dpi = 300, units = \"px\", ...) , {,     sample_canva <- function(seed = NULL) {,         if (!is.null(seed)) ,             set.seed(seed),         sample(ggthemes::canva_palettes, 1)[[1]],     },     sample_data <- function(seed = NULL, n = 100) {,         if (!is.null(seed)) ,             set.seed(seed),         dat <- tibble::tibble(x0 = stats::runif(n), y0 = stats::runif(n), ,             x1 = x0 + stats::runif(n, min = -0.2, max = 0.2), ,             y1 = y0 + stats::runif(n, min = -0.2, max = 0.2), ,             shade = stats::runif(n), size = stats::runif(n), ,             shape = factor(sample(0:22, size = n, replace = TRUE))),     },     donut_style <- function(data = NULL, palette) {,         ggplot2::ggplot(data = data, mapping = ggplot2::aes(x = x0, ,             y = y0, xend = x1, yend = y1, colour = shade, linewidth = size)) + ,             ggplot2::coord_polar(clip = \"off\") + ggplot2::scale_y_continuous(expand = c(0, ,             0), limits = c(-1, 1), oob = scales::oob_keep) + ,             ggplot2::scale_x_continuous(expand = c(0, 0), limits = c(0, ,                 1), oob = scales::oob_keep) + ggplot2::scale_colour_gradientn(colours = palette) + ,             ggplot2::scale_linewidth(range = c(0, 4)) + ggplot2::theme_void() + ,             ggplot2::theme(panel.background = ggplot2::element_rect(fill = palette[1], ,                 colour = palette[1])) + ggplot2::guides(colour = ggplot2::guide_none(), ,             linewidth = ggplot2::guide_none(), fill = ggplot2::guide_none(), ,             shape = ggplot2::guide_none()),     },     dat <- dplyr::mutate(sample_data(n = 10000, seed = seed), ,         y1 = y0, size = size/4),     line_spec <- sample(c(\"331311\", \"11\", \"111115\"), 1),     pic <- donut_style(palette = sample_canva(seed = seed)) + ,         ggplot2::geom_segment(data = dat, linetype = line_spec),     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.2, y0 = y0 - 0.2), linetype = line_spec),     },     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.4, y0 = y0 - 0.4), linetype = line_spec),     },     ggplot2::ggsave(filename = filename, plot = pic, width = width, ,         height = height, dpi = dpi, units = units, ...), }\n2 function (seed, filename = paste0(\"donut_\", seed, \".png\"), width = 2000, ,     height = 2000, dpi = 300, units = \"px\", ...) , {,     sample_canva <- function(seed = NULL) {,         if (!is.null(seed)) ,             set.seed(seed),         sample(ggthemes::canva_palettes, 1)[[1]],     },     sample_data <- function(seed = NULL, n = 100) {,         if (!is.null(seed)) ,             set.seed(seed),         dat <- tibble::tibble(x0 = stats::runif(n), y0 = stats::runif(n), ,             x1 = x0 + stats::runif(n, min = -0.2, max = 0.2), ,             y1 = y0 + stats::runif(n, min = -0.2, max = 0.2), ,             shade = stats::runif(n), size = stats::runif(n), ,             shape = factor(sample(0:22, size = n, replace = TRUE))),     },     donut_style <- function(data = NULL, palette) {,         ggplot2::ggplot(data = data, mapping = ggplot2::aes(x = x0, ,             y = y0, xend = x1, yend = y1, colour = shade, linewidth = size)) + ,             ggplot2::coord_polar(clip = \"off\") + ggplot2::scale_y_continuous(expand = c(0, ,             0), limits = c(-1, 1), oob = scales::oob_keep) + ,             ggplot2::scale_x_continuous(expand = c(0, 0), limits = c(0, ,                 1), oob = scales::oob_keep) + ggplot2::scale_colour_gradientn(colours = palette) + ,             ggplot2::scale_linewidth(range = c(0, 4)) + ggplot2::theme_void() + ,             ggplot2::theme(panel.background = ggplot2::element_rect(fill = palette[1], ,                 colour = palette[1])) + ggplot2::guides(colour = ggplot2::guide_none(), ,             linewidth = ggplot2::guide_none(), fill = ggplot2::guide_none(), ,             shape = ggplot2::guide_none()),     },     dat <- dplyr::mutate(sample_data(n = 10000, seed = seed), ,         y1 = y0, size = size/4),     line_spec <- sample(c(\"331311\", \"11\", \"111115\"), 1),     pic <- donut_style(palette = sample_canva(seed = seed)) + ,         ggplot2::geom_segment(data = dat, linetype = line_spec),     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.2, y0 = y0 - 0.2), linetype = line_spec),     },     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.4, y0 = y0 - 0.4), linetype = line_spec),     },     ggplot2::ggsave(filename = filename, plot = pic, width = width, ,         height = height, dpi = dpi, units = units, ...), }\n3 function (seed, filename = paste0(\"donut_\", seed, \".png\"), width = 2000, ,     height = 2000, dpi = 300, units = \"px\", ...) , {,     sample_canva <- function(seed = NULL) {,         if (!is.null(seed)) ,             set.seed(seed),         sample(ggthemes::canva_palettes, 1)[[1]],     },     sample_data <- function(seed = NULL, n = 100) {,         if (!is.null(seed)) ,             set.seed(seed),         dat <- tibble::tibble(x0 = stats::runif(n), y0 = stats::runif(n), ,             x1 = x0 + stats::runif(n, min = -0.2, max = 0.2), ,             y1 = y0 + stats::runif(n, min = -0.2, max = 0.2), ,             shade = stats::runif(n), size = stats::runif(n), ,             shape = factor(sample(0:22, size = n, replace = TRUE))),     },     donut_style <- function(data = NULL, palette) {,         ggplot2::ggplot(data = data, mapping = ggplot2::aes(x = x0, ,             y = y0, xend = x1, yend = y1, colour = shade, linewidth = size)) + ,             ggplot2::coord_polar(clip = \"off\") + ggplot2::scale_y_continuous(expand = c(0, ,             0), limits = c(-1, 1), oob = scales::oob_keep) + ,             ggplot2::scale_x_continuous(expand = c(0, 0), limits = c(0, ,                 1), oob = scales::oob_keep) + ggplot2::scale_colour_gradientn(colours = palette) + ,             ggplot2::scale_linewidth(range = c(0, 4)) + ggplot2::theme_void() + ,             ggplot2::theme(panel.background = ggplot2::element_rect(fill = palette[1], ,                 colour = palette[1])) + ggplot2::guides(colour = ggplot2::guide_none(), ,             linewidth = ggplot2::guide_none(), fill = ggplot2::guide_none(), ,             shape = ggplot2::guide_none()),     },     dat <- dplyr::mutate(sample_data(n = 10000, seed = seed), ,         y1 = y0, size = size/4),     line_spec <- sample(c(\"331311\", \"11\", \"111115\"), 1),     pic <- donut_style(palette = sample_canva(seed = seed)) + ,         ggplot2::geom_segment(data = dat, linetype = line_spec),     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.2, y0 = y0 - 0.2), linetype = line_spec),     },     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.4, y0 = y0 - 0.4), linetype = line_spec),     },     ggplot2::ggsave(filename = filename, plot = pic, width = width, ,         height = height, dpi = dpi, units = units, ...), }\n4 function (seed, filename = paste0(\"donut_\", seed, \".png\"), width = 2000, ,     height = 2000, dpi = 300, units = \"px\", ...) , {,     sample_canva <- function(seed = NULL) {,         if (!is.null(seed)) ,             set.seed(seed),         sample(ggthemes::canva_palettes, 1)[[1]],     },     sample_data <- function(seed = NULL, n = 100) {,         if (!is.null(seed)) ,             set.seed(seed),         dat <- tibble::tibble(x0 = stats::runif(n), y0 = stats::runif(n), ,             x1 = x0 + stats::runif(n, min = -0.2, max = 0.2), ,             y1 = y0 + stats::runif(n, min = -0.2, max = 0.2), ,             shade = stats::runif(n), size = stats::runif(n), ,             shape = factor(sample(0:22, size = n, replace = TRUE))),     },     donut_style <- function(data = NULL, palette) {,         ggplot2::ggplot(data = data, mapping = ggplot2::aes(x = x0, ,             y = y0, xend = x1, yend = y1, colour = shade, linewidth = size)) + ,             ggplot2::coord_polar(clip = \"off\") + ggplot2::scale_y_continuous(expand = c(0, ,             0), limits = c(-1, 1), oob = scales::oob_keep) + ,             ggplot2::scale_x_continuous(expand = c(0, 0), limits = c(0, ,                 1), oob = scales::oob_keep) + ggplot2::scale_colour_gradientn(colours = palette) + ,             ggplot2::scale_linewidth(range = c(0, 4)) + ggplot2::theme_void() + ,             ggplot2::theme(panel.background = ggplot2::element_rect(fill = palette[1], ,                 colour = palette[1])) + ggplot2::guides(colour = ggplot2::guide_none(), ,             linewidth = ggplot2::guide_none(), fill = ggplot2::guide_none(), ,             shape = ggplot2::guide_none()),     },     dat <- dplyr::mutate(sample_data(n = 10000, seed = seed), ,         y1 = y0, size = size/4),     line_spec <- sample(c(\"331311\", \"11\", \"111115\"), 1),     pic <- donut_style(palette = sample_canva(seed = seed)) + ,         ggplot2::geom_segment(data = dat, linetype = line_spec),     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.2, y0 = y0 - 0.2), linetype = line_spec),     },     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.4, y0 = y0 - 0.4), linetype = line_spec),     },     ggplot2::ggsave(filename = filename, plot = pic, width = width, ,         height = height, dpi = dpi, units = units, ...), }\n5 function (seed, filename = paste0(\"donut_\", seed, \".png\"), width = 2000, ,     height = 2000, dpi = 300, units = \"px\", ...) , {,     sample_canva <- function(seed = NULL) {,         if (!is.null(seed)) ,             set.seed(seed),         sample(ggthemes::canva_palettes, 1)[[1]],     },     sample_data <- function(seed = NULL, n = 100) {,         if (!is.null(seed)) ,             set.seed(seed),         dat <- tibble::tibble(x0 = stats::runif(n), y0 = stats::runif(n), ,             x1 = x0 + stats::runif(n, min = -0.2, max = 0.2), ,             y1 = y0 + stats::runif(n, min = -0.2, max = 0.2), ,             shade = stats::runif(n), size = stats::runif(n), ,             shape = factor(sample(0:22, size = n, replace = TRUE))),     },     donut_style <- function(data = NULL, palette) {,         ggplot2::ggplot(data = data, mapping = ggplot2::aes(x = x0, ,             y = y0, xend = x1, yend = y1, colour = shade, linewidth = size)) + ,             ggplot2::coord_polar(clip = \"off\") + ggplot2::scale_y_continuous(expand = c(0, ,             0), limits = c(-1, 1), oob = scales::oob_keep) + ,             ggplot2::scale_x_continuous(expand = c(0, 0), limits = c(0, ,                 1), oob = scales::oob_keep) + ggplot2::scale_colour_gradientn(colours = palette) + ,             ggplot2::scale_linewidth(range = c(0, 4)) + ggplot2::theme_void() + ,             ggplot2::theme(panel.background = ggplot2::element_rect(fill = palette[1], ,                 colour = palette[1])) + ggplot2::guides(colour = ggplot2::guide_none(), ,             linewidth = ggplot2::guide_none(), fill = ggplot2::guide_none(), ,             shape = ggplot2::guide_none()),     },     dat <- dplyr::mutate(sample_data(n = 10000, seed = seed), ,         y1 = y0, size = size/4),     line_spec <- sample(c(\"331311\", \"11\", \"111115\"), 1),     pic <- donut_style(palette = sample_canva(seed = seed)) + ,         ggplot2::geom_segment(data = dat, linetype = line_spec),     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.2, y0 = y0 - 0.2), linetype = line_spec),     },     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.4, y0 = y0 - 0.4), linetype = line_spec),     },     ggplot2::ggsave(filename = filename, plot = pic, width = width, ,         height = height, dpi = dpi, units = units, ...), }\n6 function (seed, filename = paste0(\"donut_\", seed, \".png\"), width = 2000, ,     height = 2000, dpi = 300, units = \"px\", ...) , {,     sample_canva <- function(seed = NULL) {,         if (!is.null(seed)) ,             set.seed(seed),         sample(ggthemes::canva_palettes, 1)[[1]],     },     sample_data <- function(seed = NULL, n = 100) {,         if (!is.null(seed)) ,             set.seed(seed),         dat <- tibble::tibble(x0 = stats::runif(n), y0 = stats::runif(n), ,             x1 = x0 + stats::runif(n, min = -0.2, max = 0.2), ,             y1 = y0 + stats::runif(n, min = -0.2, max = 0.2), ,             shade = stats::runif(n), size = stats::runif(n), ,             shape = factor(sample(0:22, size = n, replace = TRUE))),     },     donut_style <- function(data = NULL, palette) {,         ggplot2::ggplot(data = data, mapping = ggplot2::aes(x = x0, ,             y = y0, xend = x1, yend = y1, colour = shade, linewidth = size)) + ,             ggplot2::coord_polar(clip = \"off\") + ggplot2::scale_y_continuous(expand = c(0, ,             0), limits = c(-1, 1), oob = scales::oob_keep) + ,             ggplot2::scale_x_continuous(expand = c(0, 0), limits = c(0, ,                 1), oob = scales::oob_keep) + ggplot2::scale_colour_gradientn(colours = palette) + ,             ggplot2::scale_linewidth(range = c(0, 4)) + ggplot2::theme_void() + ,             ggplot2::theme(panel.background = ggplot2::element_rect(fill = palette[1], ,                 colour = palette[1])) + ggplot2::guides(colour = ggplot2::guide_none(), ,             linewidth = ggplot2::guide_none(), fill = ggplot2::guide_none(), ,             shape = ggplot2::guide_none()),     },     dat <- dplyr::mutate(sample_data(n = 10000, seed = seed), ,         y1 = y0, size = size/4),     line_spec <- sample(c(\"331311\", \"11\", \"111115\"), 1),     pic <- donut_style(palette = sample_canva(seed = seed)) + ,         ggplot2::geom_segment(data = dat, linetype = line_spec),     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.2, y0 = y0 - 0.2), linetype = line_spec),     },     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.4, y0 = y0 - 0.4), linetype = line_spec),     },     ggplot2::ggsave(filename = filename, plot = pic, width = width, ,         height = height, dpi = dpi, units = units, ...), }\n7 function (seed, filename = paste0(\"donut_\", seed, \".png\"), width = 2000, ,     height = 2000, dpi = 300, units = \"px\", ...) , {,     sample_canva <- function(seed = NULL) {,         if (!is.null(seed)) ,             set.seed(seed),         sample(ggthemes::canva_palettes, 1)[[1]],     },     sample_data <- function(seed = NULL, n = 100) {,         if (!is.null(seed)) ,             set.seed(seed),         dat <- tibble::tibble(x0 = stats::runif(n), y0 = stats::runif(n), ,             x1 = x0 + stats::runif(n, min = -0.2, max = 0.2), ,             y1 = y0 + stats::runif(n, min = -0.2, max = 0.2), ,             shade = stats::runif(n), size = stats::runif(n), ,             shape = factor(sample(0:22, size = n, replace = TRUE))),     },     donut_style <- function(data = NULL, palette) {,         ggplot2::ggplot(data = data, mapping = ggplot2::aes(x = x0, ,             y = y0, xend = x1, yend = y1, colour = shade, linewidth = size)) + ,             ggplot2::coord_polar(clip = \"off\") + ggplot2::scale_y_continuous(expand = c(0, ,             0), limits = c(-1, 1), oob = scales::oob_keep) + ,             ggplot2::scale_x_continuous(expand = c(0, 0), limits = c(0, ,                 1), oob = scales::oob_keep) + ggplot2::scale_colour_gradientn(colours = palette) + ,             ggplot2::scale_linewidth(range = c(0, 4)) + ggplot2::theme_void() + ,             ggplot2::theme(panel.background = ggplot2::element_rect(fill = palette[1], ,                 colour = palette[1])) + ggplot2::guides(colour = ggplot2::guide_none(), ,             linewidth = ggplot2::guide_none(), fill = ggplot2::guide_none(), ,             shape = ggplot2::guide_none()),     },     dat <- dplyr::mutate(sample_data(n = 10000, seed = seed), ,         y1 = y0, size = size/4),     line_spec <- sample(c(\"331311\", \"11\", \"111115\"), 1),     pic <- donut_style(palette = sample_canva(seed = seed)) + ,         ggplot2::geom_segment(data = dat, linetype = line_spec),     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.2, y0 = y0 - 0.2), linetype = line_spec),     },     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.4, y0 = y0 - 0.4), linetype = line_spec),     },     ggplot2::ggsave(filename = filename, plot = pic, width = width, ,         height = height, dpi = dpi, units = units, ...), }\n8 function (seed, filename = paste0(\"donut_\", seed, \".png\"), width = 2000, ,     height = 2000, dpi = 300, units = \"px\", ...) , {,     sample_canva <- function(seed = NULL) {,         if (!is.null(seed)) ,             set.seed(seed),         sample(ggthemes::canva_palettes, 1)[[1]],     },     sample_data <- function(seed = NULL, n = 100) {,         if (!is.null(seed)) ,             set.seed(seed),         dat <- tibble::tibble(x0 = stats::runif(n), y0 = stats::runif(n), ,             x1 = x0 + stats::runif(n, min = -0.2, max = 0.2), ,             y1 = y0 + stats::runif(n, min = -0.2, max = 0.2), ,             shade = stats::runif(n), size = stats::runif(n), ,             shape = factor(sample(0:22, size = n, replace = TRUE))),     },     donut_style <- function(data = NULL, palette) {,         ggplot2::ggplot(data = data, mapping = ggplot2::aes(x = x0, ,             y = y0, xend = x1, yend = y1, colour = shade, linewidth = size)) + ,             ggplot2::coord_polar(clip = \"off\") + ggplot2::scale_y_continuous(expand = c(0, ,             0), limits = c(-1, 1), oob = scales::oob_keep) + ,             ggplot2::scale_x_continuous(expand = c(0, 0), limits = c(0, ,                 1), oob = scales::oob_keep) + ggplot2::scale_colour_gradientn(colours = palette) + ,             ggplot2::scale_linewidth(range = c(0, 4)) + ggplot2::theme_void() + ,             ggplot2::theme(panel.background = ggplot2::element_rect(fill = palette[1], ,                 colour = palette[1])) + ggplot2::guides(colour = ggplot2::guide_none(), ,             linewidth = ggplot2::guide_none(), fill = ggplot2::guide_none(), ,             shape = ggplot2::guide_none()),     },     dat <- dplyr::mutate(sample_data(n = 10000, seed = seed), ,         y1 = y0, size = size/4),     line_spec <- sample(c(\"331311\", \"11\", \"111115\"), 1),     pic <- donut_style(palette = sample_canva(seed = seed)) + ,         ggplot2::geom_segment(data = dat, linetype = line_spec),     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.2, y0 = y0 - 0.2), linetype = line_spec),     },     if (stats::runif(1) < 0.5) {,         pic <- pic + ggplot2::geom_segment(data = dplyr::mutate(dat, ,             y1 = y1 - 0.4, y0 = y0 - 0.4), linetype = line_spec),     },     ggplot2::ggsave(filename = filename, plot = pic, width = width, ,         height = height, dpi = dpi, units = units, ...), }\n  args             created              queued            assigned             started            finished code\n1  101 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:38  200\n2  102 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:41  200\n3  103 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:40  200\n4  104 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:37  200\n5  105 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:39  200\n6  106 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:41  200\n7  107 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:37 2022-12-23 10:39:37 2022-12-23 10:39:44  200\n8  108 2022-12-23 10:39:33 2022-12-23 10:39:33 2022-12-23 10:39:38 2022-12-23 10:39:38 2022-12-23 10:39:44  200\n                             message stdout stderr error\n1 done callr-rs-result-87aeb5146b87f                NULL\n2  done callr-rs-result-87aebe2a6bca                NULL\n3 done callr-rs-result-87aeb360ce35f                NULL\n4 done callr-rs-result-87aeb362a486c                NULL\n5 done callr-rs-result-87aeb1135ee5f                NULL\n6 done callr-rs-result-87aeb3774510b                NULL\n7 done callr-rs-result-87aeb3f296b7c                NULL\n8 done callr-rs-result-87aeb614b634c                NULL\n```\n:::\n:::\n\n\n\n\n\n## Surviving a crash\n\nI'm going to be honest. Sometimes^[Often] I write bad code when I am exploring a new generative art system. Code that crashes the R session unpredictably. So it would be nice if the queue had a little bit of robustness for that. To be honest, the queue package isn't very sophisticated in detecting sessions that have crashed,^[I mean, it was just a fun side project I did over the weekend because I found myself unexpectedly unemployed all of a sudden and Stella needs to get her groove back okay?] but it does have some ability to recover when a task crashes its thread. Let's keep this simple. I'll define a perfectly safe function that waits for a moment and then returns, and another function that always crashes the R session as soon as it is called:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwait <- function(x) {\n  Sys.sleep(x)\n  x\n}\ncrash <- function(x) .Call(\"abort\")\n```\n:::\n\n\nNow let's define a queue that has only two workers, but has no less than three tasks that are guaranteed to crash the worker the moment the tasks are started:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqueue <- Queue$new(workers = 2)\nqueue$add(wait, list(x = .1))\nqueue$add(crash)\nqueue$add(crash)\nqueue$add(crash)\nqueue$add(wait, list(x = .1))\n```\n:::\n\n\nThe queue allocates task in a first-in first-out order, so the three \"crash tasks\" are guaranteed to be allocated before the final \"wait task\". Let's take a look at what happens when the queue runs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqueue$run()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Queue complete: 5 tasks done in 0.727 secs\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 17\n  task_id worker_id state result    runtime        fun    args            \n  <chr>       <int> <chr> <list>    <drtn>         <list> <list>          \n1 task_1     558929 done  <dbl [1]> 0.1243110 secs <fn>   <named list [1]>\n2 task_2     558941 done  <NULL>    0.1252213 secs <fn>   <list [0]>      \n3 task_3     558929 done  <NULL>    0.1040988 secs <fn>   <list [0]>      \n4 task_4     558968 done  <NULL>    0.1041272 secs <fn>   <list [0]>      \n5 task_5     558982 done  <dbl [1]> 0.1575069 secs <fn>   <named list [1]>\n# … with 10 more variables: created <dttm>, queued <dttm>, assigned <dttm>,\n#   started <dttm>, finished <dttm>, code <dbl>, message <chr>,\n#   stdout <list>, stderr <list>, error <list>\n```\n:::\n:::\n\n\nIt's a little slower than we'd hope, but it does finish both valid tasks and returns nothing for the tasks that crashed their R sessions. What has happened in the background is that the queue runs a simple check to see if any of the R sessions have crashed, and attempts to replace them with a new worker whenever it detects that this has happened. It's not in any sense optimised, but it does sort of work.\n\n\n\n\n\n<!--------------- appendices go here ----------------->\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}