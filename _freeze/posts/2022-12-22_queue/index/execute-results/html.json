{
  "hash": "91eabbe465188bce3fabffe9e84441ca",
  "result": {
    "markdown": "---\ntitle: \"Queue\"\nauthor:\n  - name: Danielle Navarro\n    url: https://djnavarro.net\n    affiliation: I'm on smoko\n    affiliation-url: https://www.youtube.com/watch?v=j58V2vC9EPc\n    orcid: 0000-0001-7648-6578\ndescription: \"Something something something\"\ndate: \"2022-12-22\"\ncategories: [Parallel Computing, R, Object-Oriented Programming]\nimage: \"\"\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nOkay. So I wrote a simple package for [multi-threaded tasks queues in R](https://queue.djnavarro.net) this week. It wasn't intentional, I swear. I was just trying to teach myself how to use the [callr](https://callr.r-lib.org/) package, and making sure I had a solid grasp of encapsulated object-oriented programming with [R6](https://r6.r-lib.org/). Things got a little out of hand. Sorry.\n\nAnd let's be very clear about something at the outset. If you want to do parallel computing in R correctly, you go look at [futureverse.org](https://www.futureverse.org/). The [future](https://future.futureverse.org/) package provides a fabulous way to execute R code asynchronously and in parallel. And there are many excellent packages built on top of that, so there's a whole lovely ecosystem there just waiting for you.^[Note to self: Learn [parallelly](https://www.jottr.org/2022/12/05/avoid-detectcores/)] Relatedly, if the reason you're thinking about parallel computing is that you've found yourself with a burning need to analyze terabytes of data with R then babe it might be time to start learning some R workflows using [Spark](https://therinspark.com/), [Arrow](https://blog.djnavarro.net/category/apachearrow), [Kubernetes](https://www.r-bloggers.com/2022/04/wtf-is-kubernetes-and-should-i-care-as-r-user/). It may be time to learn about some of those other eldritch words of power that have figured rather more prominently in my life than one might expect for a simple country girl.^[`kubectl auth can-i create occult-chaos`] \n\nMy little queue package is a personal project. I happen to like it, but you should not be looking at it as an alternative to serious tools.\n\nThat's been said now. Good. We can put aside all pretension.\n\n## What does it do, and why?\n\nLet's say I have a little art function called `subdivision()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(queue)\n\nq <- Queue$new(workers = 6)\nfor(seed in 101:118) q$add(subdivision, list(seed))\nq$run(message = \"verbose\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_3 finished in 7.78 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_2 finished in 8.06 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_4 finished in 8.46 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_6 finished in 8.57 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_1 finished in 8.7 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_5 finished in 8.76 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_8 finished in 7.05 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_7 finished in 7.39 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_9 finished in 6.94 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_10 finished in 7.15 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_11 finished in 7.15 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_12 finished in 7.15 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_13 finished in 7.42 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_15 finished in 7.58 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_16 finished in 7.25 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_17 finished in 7.13 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_14 finished in 7.86 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n→ Done: task_18 finished in 7.34 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Queue complete: 18 tasks done in 23.3 secs\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 17\n   task_id worker_id state result    runtime    fun   args   created            \n   <chr>       <int> <chr> <list>    <drtn>     <lis> <list> <dttm>             \n 1 task_1     506612 done  <chr [1]> 8.699160 … <fn>  <list> 2022-12-22 14:30:48\n 2 task_2     506624 done  <chr [1]> 8.063831 … <fn>  <list> 2022-12-22 14:30:48\n 3 task_3     506636 done  <chr [1]> 7.784636 … <fn>  <list> 2022-12-22 14:30:48\n 4 task_4     506648 done  <chr [1]> 8.459334 … <fn>  <list> 2022-12-22 14:30:48\n 5 task_5     506660 done  <chr [1]> 8.756682 … <fn>  <list> 2022-12-22 14:30:48\n 6 task_6     506672 done  <chr [1]> 8.572295 … <fn>  <list> 2022-12-22 14:30:48\n 7 task_7     506636 done  <chr [1]> 7.392277 … <fn>  <list> 2022-12-22 14:30:48\n 8 task_8     506624 done  <chr [1]> 7.052980 … <fn>  <list> 2022-12-22 14:30:48\n 9 task_9     506648 done  <chr [1]> 6.941378 … <fn>  <list> 2022-12-22 14:30:48\n10 task_10    506672 done  <chr [1]> 7.152562 … <fn>  <list> 2022-12-22 14:30:48\n11 task_11    506612 done  <chr [1]> 7.153726 … <fn>  <list> 2022-12-22 14:30:48\n12 task_12    506660 done  <chr [1]> 7.150062 … <fn>  <list> 2022-12-22 14:30:48\n13 task_13    506624 done  <chr [1]> 7.415904 … <fn>  <list> 2022-12-22 14:30:48\n14 task_14    506636 done  <chr [1]> 7.861087 … <fn>  <list> 2022-12-22 14:30:48\n15 task_15    506648 done  <chr [1]> 7.579488 … <fn>  <list> 2022-12-22 14:30:48\n16 task_16    506672 done  <chr [1]> 7.247684 … <fn>  <list> 2022-12-22 14:30:48\n17 task_17    506612 done  <chr [1]> 7.130690 … <fn>  <list> 2022-12-22 14:30:48\n18 task_18    506660 done  <chr [1]> 7.337988 … <fn>  <list> 2022-12-22 14:30:48\n# … with 9 more variables: queued <dttm>, assigned <dttm>, started <dttm>,\n#   finished <dttm>, code <int>, message <chr>, stdout <list>, stderr <list>,\n#   error <list>\n```\n:::\n:::\n\n\n<!--------------- appendices go here ----------------->\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}