{
  "hash": "08f854e3f7ec8dcf161e60377cfd7cb3",
  "result": {
    "markdown": "---\ntitle: \"Shattered landscapes\"\nauthor:\n  - name: Danielle Navarro\n    url: https://djnavarro.net\n    affiliation: I'm on smoko\n    affiliation-url: https://www.youtube.com/watch?v=j58V2vC9EPc\n    orcid: 0000-0001-7648-6578\ndescription: \"Using ambient and rayshader to create weird, broken landcape images in R\"\ndate: \"2023-02-27\"\ncategories: [Art, R]\n---\n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n:::{.column-screen-inset}\n:::{layout-ncol=3} \n\n![](https://djnavarro.net/series-broken-lands/3000/alien-floe_15_2406.png)\n\n![](https://djnavarro.net/series-broken-lands/3000/alien-floe_15_2416.png)\n\n![](https://djnavarro.net/series-broken-lands/3000/alien-floe_15_2496.png)\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransform_to_curl_space <- function(x, y) {\n  ambient::curl_noise(\n    generator = ambient::fracture,\n    noise = ambient::gen_simplex,\n    fractal = ambient::fbm,\n    octaves = 3,\n    frequency = ~ . * 2,\n    freq_init = .3,\n    gain_init = 1,\n    gain = ~ . * .5,\n    x = x,\n    y = y\n  )\n}\n```\n:::\n\n\nThe first trick is to define a two dimensional manifold that maps to the original \"base\" space in a rather nonlinear way. Curl transformations work rather nicely for this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(8)\ngrid <- ambient::long_grid(\n  x = seq(0, 1, length.out = 500),\n  y = seq(0, 1, length.out = 500)\n)\ncoords <- transform_to_curl_space(grid$x, grid$y)\n```\n:::\n\n\nIn the final image we'll do this in a finer grain: a 500x500 grid is a little coarse for what we have in mind. But the coarse-grained version is a little easier to visualise:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(coords, ggplot2::aes(x, y)) +\n  ggplot2::geom_point(size = .1, alpha = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-curl-transform-1.png){width=672}\n:::\n:::\n\n\nOur noise operations will be specified on the transformed manifold, but the final image will be defined on the base space. Here's what I mean:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- grid |>\n  dplyr::mutate(\n    curl_x = coords$x, \n    curl_y = coords$y\n  )\n\nggplot2::ggplot(grid, ggplot2::aes(x, y, colour = curl_x)) +\n  ggplot2::geom_point(size = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-curl-1.png){width=672}\n:::\n:::\n\n\nNext, this...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_worley_distance <- function(x, y) {\n  ambient::fracture(\n    noise = ambient::gen_worley,\n    fractal = ambient::billow,\n    octaves = 8,\n    freq_init = .1,\n    frequency = ~ . * 2,\n    gain_init = 3,\n    gain = ~ . * .5,\n    value = \"distance2\",\n    x = x,\n    y = y\n  )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- grid |>\n  dplyr::mutate(\n    dist = compute_worley_distance(curl_x, curl_y)\n  )\n\nggplot2::ggplot(grid, ggplot2::aes(curl_x, curl_y, colour = dist)) +\n  ggplot2::geom_point(size = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-worley-distance-1.png){width=672}\n:::\n:::\n\n\nHere it is plotted in the original space:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(grid, ggplot2::aes(x, y, colour = dist)) +\n  ggplot2::geom_point(size = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-worley-distance-1.png){width=672}\n:::\n:::\n\n\nThird transformation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimplex_noise <- function(x, y) {\n  ambient::fracture(\n    noise = ambient::gen_simplex,\n    fractal = ambient::billow,\n    octaves = 10,\n    freq_init = .02,\n    frequency = ~ . * 2,\n    gain_init = 1,\n    gain = ~ . * .8,\n    x = x,\n    y = y\n  )\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- grid |>\n  dplyr::mutate(\n    paint = simplex_noise(x + dist, y + dist)\n  )\n\nggplot2::ggplot(grid, ggplot2::aes(curl_x, curl_y, colour = paint)) +\n  ggplot2::geom_point(size = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/demo-simplex-distance-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(grid, ggplot2::aes(x, y, colour = paint)) +\n  ggplot2::geom_point(size = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-simplex-transform-1.png){width=672}\n:::\n:::\n\n\nDiscretise:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiscretise <- function(x, n) {\n  round(ambient::normalise(x) * n) / n\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(8)\ngrid <- ambient::long_grid(\n  x = seq(0, 1, length.out = 500),\n  y = seq(0, 1, length.out = 500)\n)\ncoords <- transform_to_curl_space(grid$x, grid$y)\n\ngrid <- grid |> dplyr::mutate(\n  curl_x = coords$x |> discretise(20), \n  curl_y = coords$y |> discretise(20),\n  dist = compute_worley_distance(curl_x, curl_y),\n  paint = simplex_noise(x + dist, y + dist) |> discretise(20)\n)\n\nggplot2::ggplot(grid, ggplot2::aes(x, y, colour = paint)) +\n  ggplot2::geom_point(size = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/discrete-plot-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- grid |> \n  dplyr::mutate(\n    height = dplyr::if_else(paint < .5, .5, paint)\n  )\n\nggplot2::ggplot(grid, ggplot2::aes(x, y, colour = height)) +\n  ggplot2::geom_point(size = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/thresholded-plot-1.png){width=672}\n:::\n:::\n\n\nColour scale:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot2::ggplot(grid, ggplot2::aes(x, y, colour = height)) +\n  ggplot2::geom_point(size = .1) + \n  ggplot2::coord_equal() + \n  ggplot2::theme_void() + \n  ggplot2::scale_color_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/colorise-1.png){width=672}\n:::\n:::\n\n\nConvert to raster-friendly array:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- as.array(grid, value = height)\n```\n:::\n\n\nRayshade it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol <- length(unique(mat))\nrayshader::height_shade(\n  heightmap = mat,\n  texture = viridis::viridis(ncol)\n) |>\n  rayshader::add_shadow(\n    shadowmap = rayshader::ray_shade(\n      heightmap = mat,\n      sunaltitude = 50,\n      sunangle = 80,\n      multicore = TRUE,\n      zscale = .005\n    ),\n    max_darken = .2\n  ) |>\n  rayshader::plot_map()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/rayshaded-1.png){width=672}\n:::\n:::\n\n\n\n<!--------------- appendices go here ----------------->\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}