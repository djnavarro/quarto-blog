{
  "hash": "8236053737dbd36e697b46d26f8be4e5",
  "result": {
    "markdown": "---\ntitle: \"Pharmacometric simulation with rxode2\"\ndescription: \"Basically the same post as the last one, but this time using rxode2 instead of mrgsolve\"\ndate: \"2023-08-20\"\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nThis post is about the [rxode2](https://nlmixr2.github.io/rxode2/) package, the successor to [RxODE](https://nlmixrdevelopment.github.io/RxODE/). Although the original RxODE package is now archived on CRAN, the syntax for rxode2 is very similar, and as far as I can tell it's fully backward-comparible with the older package. When getting started, I found it a little easier to look at the [rxode2 user manual](https://nlmixr2.github.io/rxode2-manual/) than to work from the pkgdown site. \n\n\n## Installation\n\nAs with other packages for pharmacometric simulation such as [mrgsolve](https://mrgsolve.org/) -- which I wrote about in my [last blog post](/posts/2023-08-14_mrgsolve/) -- models defined with rxode2 need to be compiled before they are run, and so when you install the package you need the appropriate build tools. There are some implications to this. The package is on CRAN, so you can install it with:\n\n``` r\ninstall.packages(\"rxode2\")\n```\n\nHowever, like most R packages that allow you to compile C/C++/Fortran/Rust/Your-Favourite-Language-Here code, it relies heavily on system dependencies that you may or may not have, and managing the build tools is an OS-specific thing. I'm running Ubuntu 22.04, and (for reasons that don't bear mentioning) I recently did a \"factory reset\"^[Does that term even make sense for a linux machine? It's not like the thing shipped with linux in the first place. Whatever.] and did a fresh install of Ubuntu. So, yeah, I didn't have everything I needed. Yes, I did have the `gcc` compiler installed, but that's not the only system dependency you have to care about. In my case, I was missing `gfortran`, `libblas`, and `liblapack`. As a consequence, when I tried to run the example code on the package website, all I got was a long stream of error messages. In order to get started, I had to do this: \n\n``` bash\nsudo apt install gfortran libblas-dev liblapack-dev liblapack-doc\n```\n\nThat worked for me.^[I haven't extensively checked the dependencies on other operating systems, but from what I can tell a Windows install requires [RTools](https://cran.r-project.org/bin/windows/Rtools/).]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rxode2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nrxode2 2.0.13 using 4 threads (see ?getRxThreads)\n  no cache: create with `rxCreateCache()`\n```\n:::\n:::\n\n\n## The rxode2 mini-language\n\nThe rxode2 package uses a [domain-specific language](https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html) for specifying pharmacometric models. You can define an rxode2 model in a separate file or you can do it inline by enclosing the model specification within an R code block (i.e., enclosed in curly braces `{}`). Here's an example where I define a pretty standard two-compartment model using the latter method:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- rxode2({\n  # initial values for all four \"compartments\"\n  depot(0) = 0;\n  central(0) = 0;\n  peripheral(0) = 0;\n  auc(0) = 0;\n  \n  # drug concentrations\n  CP = central / VC;    # central compartment concentration\n  PP = peripheral / VP; # peripheral compartment concentration\n  \n  # differential equations\n  d/dt(depot)       = -(KA * depot);\n  d/dt(central)     =  (KA * depot) - (Q * CP) + (Q * PP) - (CL * CP);\n  d/dt(peripheral)  =  (Q * CP) - (Q * PP);\n  d/dt(auc)         = CP;\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nusing C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’\n```\n:::\n:::\n\n\nAs usual, there's a few things that we need to unpack here. \n\nFirstly, note the message printed to the console. When an rxode2 model is built, this model specification is translated to C code and compiled: this message lets you know what C compiler rxode2 is using for that purpose.\n\nSecondly, notice that although this is a two-compartment model in pharmacometric terms, from the perspective of rxode2 there are four \"compartments\". In addition to the usual two compartments (`central` and `peripheral`), there is an extravascular `depot` compartment used to model drug intake. For instance, for an orally-administered drug the `depot` compartment would be the gut.^[In this post I'm assuming the drug has bioavailability of $F = 1$, but that's not true generally, so you'd have to model this explicitly by scaling the drug amount that passes from the gut to the central compartment in the ODE equations.] The `depot` compartment is \"real\" in the sense that it is loosely intended to correspond to something in the physical system that we're modelling. By convention we don't consider it to be one of the pharmacokinetic compartments, but it's still a real thing. In contrast, the `auc` \"compartment\" has no physical analog at all. It's included so that the model keeps track of the accumulated drug exposure.^[In essence, the value of `auc` that accrues is a numerical estimate of the time-integral of drug concentration. This \"area under the curve\" measure is one of several different measures used to assess drug exposure. I talked a lot about the AUC measure in my post on [non-compartmental analysis](/posts/2023-04-26_non-compartmental-analysis/).] As I'm quickly coming to learn, this is a very handy trick when running pharmacometric simulations.\n\nFinally, notice that the syntax within the rxode2 model specification is \"R-like\" rather than actual R syntax. Thanks to the magic of non-standard evaluation in R, the `rxode2()` function can capture the unevaluated expression I passed within the curly braces, and then parse the statements according to the rxode2 mini-language. The mini-language is very similar to R in some ways:\n\n- Assignment statements can use `=` or `<-` as the assignment operator.^[The rxode2 mini-language also allows you to use `~` for this purpose, but I'm not going to do that here. For this post, I've chose to use `=` as a way of reminding myself that my model specification isn't \"normal\" R code.]\n- Comments are specified using the hash (`#`) character\n- Semi-colon characters (`;`) are optional, and specify the end of a line\n\nThere are some other specialised statements that don't exist in regular R code. There are two kinds of special statements I've used in this code:\n\n- Time-derivative statements (i.e., the ones that have something like `d/dt(central)` on the left hand side) are used to specify the differential equations in the ODE system.\n- Initial-condition statements (i.e., the ones where I set something like `central(0)` on the left hand side) are used to specify the initial state of the ODE system. \n\nYou can check the [rxode2 syntax](https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html) page to see what other kinds of special statements exist.\n\n## The rxode2 model object\n\nIn the previous section I used the `rxode2()` function to specify a pretty standard two-compartment pharmacokinetic model, and assigned the resulting model object to a boringly-named variable called `mod`.^[Model objects in rxode2 have S3 class \"rxode2\".] Let's take a look at it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='font-weight: bold;'>rxode2 </span>2.0.13 model named <span style='color: #BBBB00; font-weight: bold;'>rx_7b738a16dd646d432336a380787bd163</span> model (<span style='color: #00BB00;'>✔</span> <span style='color: #00BB00; font-weight: bold;'>ready</span>). \n<span style='color: #BBBB00;'>x</span><span style='color: #0000BB; font-weight: bold;'>$state</span>: depot, central, peripheral, auc\n<span style='color: #BBBB00;'>x</span><span style='color: #0000BB; font-weight: bold;'>$params</span>: VC, VP, KA, Q, CL\n<span style='color: #BBBB00;'>x</span><span style='color: #0000BB; font-weight: bold;'>$lhs</span>: CP, PP\n</CODE></PRE>\n:::\n\n\n\n## Running a simulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(ggplot2)\n\n# specify parameters as a data frame\ndat <- tibble(\n  ID = 1,\n  KA = 0.294,\n  CL = 18.6,\n  VC = 40.2,\n  VP = 297,\n  Q = 10.5\n)\n\n# specify event schedule: dosing\nevents <- et(amountUnits = \"mg\", timeUnits = \"hours\") |>\n  et(amt = 10000, addl = 9, ii = 12, cmt = \"depot\") |>\n  et(time = 120, amt = 2000, addl = 4, ii = 14, cmt = \"depot\")\n\nevents\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='font-weight: bold;'>── EventTable with 2 records ──</span>\n2 dosing records (see <span style='color: #BBBB00;'>x</span>$<span style='color: #0000BB;'>get.dosing</span>(); add with <span style='color: #0000BB;'>add.dosing</span> or <span style='color: #0000BB;'>et</span>)\n0 observation times (see <span style='color: #BBBB00;'>x</span>$<span style='color: #0000BB;'>get.sampling</span>(); add with <span style='color: #0000BB;'>add.sampling</span> or <span style='color: #0000BB;'>et</span>)\nmultiple doses in `addl` columns, expand with <span style='color: #BBBB00;'>x</span>$<span style='color: #0000BB;'>expand</span>(); or <span style='color: #0000BB;'>etExpand</span>(<span style='color: #BBBB00;'>x</span>)\n<span style='font-weight: bold;'>── First part of </span><span style='color: #BBBB00; font-weight: bold;'>x</span><span style='font-weight: bold;'>: ──</span>\n<span style='color: #555555;'># A tibble: 2 × 6</span>\n   time cmt     amt    ii  addl evid        \n  <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;chr&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;evid&gt;</span>      \n<span style='color: #555555;'>1</span>     0 depot <span style='text-decoration: underline;'>10</span>000    12     9 <span style='color: #0000BB; font-weight: bold;'>1</span>:<span style='color: #BBBB00;'>Dose (Add)</span>\n<span style='color: #555555;'>2</span>   120 depot  <span style='text-decoration: underline;'>2</span>000    14     4 <span style='color: #0000BB; font-weight: bold;'>1</span>:<span style='color: #BBBB00;'>Dose (Add)</span>\n</CODE></PRE>\n\n```{.r .cell-code}\n# add observation times\nevents <- events |> et(time = 0:240)\nevents \n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='font-weight: bold;'>── EventTable with 243 records ──</span>\n2 dosing records (see <span style='color: #BBBB00;'>x</span>$<span style='color: #0000BB;'>get.dosing</span>(); add with <span style='color: #0000BB;'>add.dosing</span> or <span style='color: #0000BB;'>et</span>)\n241 observation times (see <span style='color: #BBBB00;'>x</span>$<span style='color: #0000BB;'>get.sampling</span>(); add with <span style='color: #0000BB;'>add.sampling</span> or <span style='color: #0000BB;'>et</span>)\nmultiple doses in `addl` columns, expand with <span style='color: #BBBB00;'>x</span>$<span style='color: #0000BB;'>expand</span>(); or <span style='color: #0000BB;'>etExpand</span>(<span style='color: #BBBB00;'>x</span>)\n<span style='font-weight: bold;'>── First part of </span><span style='color: #BBBB00; font-weight: bold;'>x</span><span style='font-weight: bold;'>: ──</span>\n<span style='color: #555555;'># A tibble: 243 × 6</span>\n    time cmt     amt    ii  addl evid         \n   <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;chr&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;evid&gt;</span>       \n<span style='color: #555555;'> 1</span>     0 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'> 2</span>     0 depot <span style='text-decoration: underline;'>10</span>000    12     9 <span style='color: #0000BB; font-weight: bold;'>1</span>:<span style='color: #BBBB00;'>Dose (Add)</span> \n<span style='color: #555555;'> 3</span>     1 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'> 4</span>     2 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'> 5</span>     3 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'> 6</span>     4 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'> 7</span>     5 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'> 8</span>     6 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'> 9</span>     7 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'>10</span>     8 (obs)    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span>    <span style='color: #BB0000;'>NA</span> <span style='color: #0000BB; font-weight: bold;'>0</span>:<span style='color: #BBBBBB;'>Observation</span>\n<span style='color: #555555;'># ℹ 233 more rows</span>\n</CODE></PRE>\n\n```{.r .cell-code}\n# run the simulation\nout <- solve(mod, dat, events)\nout\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='font-weight: bold;'>── Solved rxode2 object ──</span>\n<span style='font-weight: bold;'>── Parameters (</span><span style='color: #BBBB00; font-weight: bold;'>x</span><span style='color: #0000BB; font-weight: bold;'>$params</span><span style='font-weight: bold;'>): ──</span>\n     VC      VP      KA       Q      CL \n 40.200 297.000   0.294  10.500  18.600 \n<span style='font-weight: bold;'>── Initial Conditions (</span><span style='color: #BBBB00; font-weight: bold;'>x</span><span style='color: #0000BB; font-weight: bold;'>$inits</span><span style='font-weight: bold;'>): ──</span>\n     depot    central peripheral        auc \n         0          0          0          0 \n<span style='font-weight: bold;'>── First part of data (object): ──</span>\n<span style='color: #555555;'># A tibble: 241 × 7</span>\n   time    CP    PP  depot central peripheral   auc\n  <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span>  <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span>   <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span>      <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span>\n<span style='color: #555555;'>1</span>     0   0   0     <span style='text-decoration: underline;'>10</span>000       0          0    0  \n<span style='color: #555555;'>2</span>     1  44.4 0.920  <span style='text-decoration: underline;'>7</span>453.   <span style='text-decoration: underline;'>1</span>784.       273.  26.4\n<span style='color: #555555;'>3</span>     2  54.9 2.67   <span style='text-decoration: underline;'>5</span>554.   <span style='text-decoration: underline;'>2</span>206.       794.  77.7\n<span style='color: #555555;'>4</span>     3  51.9 4.46   <span style='text-decoration: underline;'>4</span>140.   <span style='text-decoration: underline;'>2</span>087.      <span style='text-decoration: underline;'>1</span>324. 132. \n<span style='color: #555555;'>5</span>     4  44.5 5.98   <span style='text-decoration: underline;'>3</span>085.   <span style='text-decoration: underline;'>1</span>789.      <span style='text-decoration: underline;'>1</span>776. 180. \n<span style='color: #555555;'>6</span>     5  36.5 7.18   <span style='text-decoration: underline;'>2</span>299.   <span style='text-decoration: underline;'>1</span>467.      <span style='text-decoration: underline;'>2</span>132. 221. \n<span style='color: #555555;'># ℹ 235 more rows</span>\n</CODE></PRE>\n\n```{.r .cell-code}\n# plot\nggplot(out, aes(time, CP)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}