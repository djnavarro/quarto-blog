{
  "hash": "82278fd8a38226d41e262449b4273542",
  "result": {
    "markdown": "---\ntitle: \"Pharmacometric simulation with rxode2\"\ndescription: \"Basically the same post as the last one, but this time using rxode2 instead of mrgsolve\"\ndate: \"2023-08-20\"\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nThis post is about the [rxode2](https://nlmixr2.github.io/rxode2/) package, the successor to [RxODE](https://nlmixrdevelopment.github.io/RxODE/). Although the original RxODE package is now archived on CRAN, the syntax for rxode2 is very similar, and as far as I can tell it's fully backward-comparible with the older package. When getting started, I found it a little easier to look at the [rxode2 user manual](https://nlmixr2.github.io/rxode2-manual/) than to work from the pkgdown site. \n\n\n## Installation\n\nAs with other packages for pharmacometric simulation such as [mrgsolve](https://mrgsolve.org/) -- which I wrote about in my [last blog post](/posts/2023-08-14_mrgsolve/) -- models defined with rxode2 need to be compiled before they are run, and so when you install the package you need the appropriate build tools. There are some implications to this. The package is on CRAN, so you can install it with:\n\n``` r\ninstall.packages(\"rxode2\")\n```\n\nHowever, like most R packages that allow you to compile C/C++/Fortran/Rust/Your-Favourite-Language-Here code, it relies heavily on system dependencies that you may or may not have, and managing the build tools is an OS-specific thing. I'm running Ubuntu 22.04, and (for reasons that don't bear mentioning) I recently did a \"factory reset\"^[Does that term even make sense for a linux machine? It's not like the thing shipped with linux in the first place. Whatever.] and did a fresh install of Ubuntu. So, yeah, I didn't have everything I needed. Yes, I did have the `gcc` compiler installed, but that's not the only system dependency you have to care about. In my case, I was missing `gfortran`, `libblas`, and `liblapack`. As a consequence, when I tried to run the example code on the package website, all I got was a long stream of error messages. In order to get started, I had to do this: \n\n``` bash\nsudo apt install gfortran libblas-dev liblapack-dev liblapack-doc\n```\n\nThat worked for me.^[I haven't extensively checked the dependencies on other operating systems, but from what I can tell a Windows install requires [RTools](https://cran.r-project.org/bin/windows/Rtools/).]\n\n## The rxode2 mini-language\n\nThe rxode2 package uses a domain-specific language for specifying pharmacometric models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rxode2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nrxode2 2.0.13 using 4 threads (see ?getRxThreads)\n  no cache: create with `rxCreateCache()`\n```\n:::\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(ggplot2)\n\nmod <- rxode2({\n  # initial values\n  depot(0) = 0;\n  cent(0) = 0;\n  peri(0) = 0;\n  AUC(0) = 0;\n  \n  # drug concentrations\n  CP = cent / VC; # central\n  PP = peri / VP; # peripheral\n  \n  # differential equations for compartmental drug amounts\n  d/dt(depot) = -(KA * depot);\n  d/dt(cent)  =  (KA * depot) - (Q * CP) + (Q * PP) - (CL * CP);\n  d/dt(peri)  =  (Q * CP) - (Q * PP);\n  \n  # differential equation for a fake compartment is a \n  # convenient way to integrate the AUC statistic\n  d/dt(AUC) = CP;\n})\n\n# specify parameters as a data frame\ndat <- tibble(\n  ID = 1,\n  KA = 0.294,\n  CL = 18.6,\n  VC = 40.2,\n  VP = 297,\n  Q = 10.5\n)\n\n# specify event schedule: dosing\nevents <- et(amountUnits = \"mg\", timeUnits = \"hours\") |>\n  et(amt = 10000, addl = 9, ii = 12, cmt = \"depot\") |>\n  et(time = 120, amt = 2000, addl = 4, ii = 14, cmt = \"depot\")\n\nevents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n── EventTable with 2 records ──\n2 dosing records (see x$get.dosing(); add with add.dosing or et)\n0 observation times (see x$get.sampling(); add with add.sampling or et)\nmultiple doses in `addl` columns, expand with x$expand(); or etExpand(x)\n── First part of x: ──\n# A tibble: 2 × 6\n   time cmt     amt    ii  addl evid        \n  <dbl> <chr> <dbl> <dbl> <int> <evid>      \n1     0 depot 10000    12     9 1:Dose (Add)\n2   120 depot  2000    14     4 1:Dose (Add)\n```\n:::\n\n```{.r .cell-code}\n# add observation times\nevents <- events |> et(time = 0:240)\nevents \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n── EventTable with 243 records ──\n2 dosing records (see x$get.dosing(); add with add.dosing or et)\n241 observation times (see x$get.sampling(); add with add.sampling or et)\nmultiple doses in `addl` columns, expand with x$expand(); or etExpand(x)\n── First part of x: ──\n# A tibble: 243 × 6\n    time cmt     amt    ii  addl evid         \n   <dbl> <chr> <dbl> <dbl> <int> <evid>       \n 1     0 (obs)    NA    NA    NA 0:Observation\n 2     0 depot 10000    12     9 1:Dose (Add) \n 3     1 (obs)    NA    NA    NA 0:Observation\n 4     2 (obs)    NA    NA    NA 0:Observation\n 5     3 (obs)    NA    NA    NA 0:Observation\n 6     4 (obs)    NA    NA    NA 0:Observation\n 7     5 (obs)    NA    NA    NA 0:Observation\n 8     6 (obs)    NA    NA    NA 0:Observation\n 9     7 (obs)    NA    NA    NA 0:Observation\n10     8 (obs)    NA    NA    NA 0:Observation\n# ℹ 233 more rows\n```\n:::\n\n```{.r .cell-code}\n# run the simulation\nout <- solve(mod, dat, events)\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n── Solved rxode2 object ──\n── Parameters (x$params): ──\n     VC      VP      KA       Q      CL \n 40.200 297.000   0.294  10.500  18.600 \n── Initial Conditions (x$inits): ──\ndepot  cent  peri   AUC \n    0     0     0     0 \n── First part of data (object): ──\n# A tibble: 241 × 7\n   time    CP    PP  depot  cent  peri   AUC\n  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>\n1     0   0   0     10000     0     0    0  \n2     1  44.4 0.920  7453. 1784.  273.  26.4\n3     2  54.9 2.67   5554. 2206.  794.  77.7\n4     3  51.9 4.46   4140. 2087. 1324. 132. \n5     4  44.5 5.98   3085. 1789. 1776. 180. \n6     5  36.5 7.18   2299. 1467. 2132. 221. \n# ℹ 235 more rows\n```\n:::\n\n```{.r .cell-code}\n# plot\nggplot(out, aes(time, CP)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}