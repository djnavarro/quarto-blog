{
  "hash": "9f87abe3e65ba0cf41d549d61d5883e6",
  "result": {
    "markdown": "---\ntitle: \"Pharmacometric simulation with rxode2\"\ndescription: \"Basically the same post as the last one, but this time using rxode2 instead of mrgsolve\"\ndate: \"2023-08-20\"\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nPreface goes here.\n\n## Installation\n\nGetting started with rxode2 is -- in theory -- perfectly straightforward. It's on CRAN, so you can install with:\n\n``` r\ninstall.packages(\"rxode2\")\n```\n\nUnfortunately, like most R packages that allow you to compile C/C++/Fortran/Rust/Your-Favourite-Language-Here code, it relies heavily on system dependencies that you may or may not have, and managing the build tools is an OS-specific thing. I'm running Ubuntu 22.04, and (for reasons that don't bear mentioning) I recently did a \"factory reset\"^[Does that term even make sense for a linux machine? It's not like the thing shipped with linux in the first place. Whatever.] and did a fresh install of Ubuntu. So, yeah, I didn't have everything I needed. Yes, I did have the `gcc` compiler installed, but that's not the only system dependency you have to care about. In my case, I was missing `gfortran`, `libblas`, and `liblapack`. As a consequence, when I tried to run the example code on the package website, all I got was a long stream of error messages. In order to get started, I had to do this: \n\n``` bash\nsudo apt install gfortran libblas-dev liblapack-dev liblapack-doc\n```\n\nThat worked for me.\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}