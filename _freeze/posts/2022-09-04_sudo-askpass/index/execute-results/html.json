{
  "hash": "a43b3ffaec839f1fe3ef1971c5779558",
  "result": {
    "markdown": "---\ntitle: \"Sudo ask me a password\"\ndescription: \"Resolving a little quirk in managing packages with pak on linux\"\ndate: \"2022-09-04\"\ncategories: [Linux, Credentials, R]\nimage: \"img/cover.jpg\"\n---\n\n\n<!--\ncover image:\nauthor: Ola Mishchenko\nurl: https://unsplash.com/photos/VRB1LJoTZ6w\nlicence: Free to use under the Unsplash License\n\n-->\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n## Preface\n\n> The thing that people don't understand is that my blog is, in fact, an ongoing arms race with [@djnavarro](https://twitter.com/djnavarro) and my only chance to win is to lean into the fact that while she has a job where her bosses read her blog, I am unemployed. <br>\n> &nbsp;&nbsp; -- [@dan_p_simpson](https://twitter.com/dan_p_simpson/status/1565948834542669826)\n\nOne peculiar feature of being a developer advocate, in my experience of the job so far, is that part of the reason you are hired into the role is that you have a personal engagement style that other developers enjoy. They will read your strange content -- no matter how weird and unprofessional it is -- because professional corporate style is very nearly as dull as academic writing and it is a relief to learn a new thing from an actual human being who write with a certain level of human character.\n\nEven if she is an irredeemably catty bitch.\n\nThe reason I feel obligated to mention this point is that, while my bosses do read my posts and might be inclined to rein me in should my weirdness happen to threaten the viability of the company, I have so much more freedom to write about what I want to than I ever did as an academic. All of which is by way of preamble because I want to stress that when I talk about package dependencies in R there is no chance whatsoever that I will shy away from making the most of the double entendre of talking about his package. \n\nAnd so without further ado, the topic of today's unhinged rambling...\n\n## Managing package dependencies in R, or, the undisclosed viagra problem \n\nOkay so you've done your due diligence. You've read his pkgdown site, checked out his repo, and you still like him. You really, *really* want to install his package. You've inspected the documentation he provided and it is a very impressive package. I mean, I get it babe. \n\nI. have. been. there. \n\nThere's a thing with packages though. When you're putting them in your... um... library... what you see isn't necessarily all you get. \n\nI'll give a concrete example. For reasons unknown even to me I woke up this morning and decided today was the day I'd explore the rig version manager for R that lets you manage multiple R installations on the one machine. It's very nice, and possibly the topic for a future post. However, one side consequence to adopting rig is that I ended up with adorably fresh copies of R that had no installed packages and needed to be properly set up. \n\nAlso for reasons unknown I decided that *this* was the moment I would start to ask some serious questions about where these packages were coming from and what sordid undisclosed system dependencies were hitching a ride...\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install(\"quarto\")\n```\n:::\n\n\nSo pak starts doing its job, resolving the R dependencies and then asking if I want to continue:\n\n```\n✓ Loading metadata database ... done\n                                                                            \n→ Will install 2 packages.\n→ Will update 1 package.\n→ Will download 3 packages with unknown size.\n+ packrat         0.8.1  [bld][dl]\n+ quarto    1.1 → 1.2    [bld][dl]\n+ rsconnect       0.8.27 [bld][dl]\n? Do you want to continue (Y/n) \n```\n\nI agree to continue, so off pak goes, fetching the appropriate R packages:\n\n```\nℹ Getting 3 pkgs with unknown sizes\n✓ Got quarto 1.2 (source) (67.58 kB)                                             \n✓ Got rsconnect 0.8.27 (source) (685.57 kB)                                      \n✓ Got packrat 0.8.1 (source) (681.50 kB)                                         \n✓ Downloaded 3 packages (1.43 MB)in 6.7s\n```\n\nSo far, so good. But then this happens:\n\n```\nℹ Installing system requirements\nℹ Executing `sudo sh -c apt-get install -y make`\nError: System command 'sudo' failed, exit status: 1, stdout + stderr:\nE> sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\n```\n\nAh. \n\n<br><br>\n\n## Configuring sudo\n\nA little bit of digging revealed that sudo is much more configurable than I had realised, and you can deal with this in a few different ways. One possibility would be to [enable passwordless sudo](https://www.simplified.guide/linux/enable-passwordless-sudo), in which case the system dependencies would be installed without requiring a password at all. That would certainly minimise the amount of hassle at my end, but it's also a hell of a security risk. Even if I personally felt willing to take the risk with my own property, this is a work laptop and I think a little risk-aversion might be a good idea.^[Okay sure, I haven't *technically* asked DevOps for their opinion about the possibility of me dumping the authentication requirements on superuser privileges on my machine, I have a suspicion I know what their answer would be. Perhaps a different approach is in order...]\n\nFortunately, the error message itself contains some hints that there is an alternative fix that doesn't require you to weaken your security settings. You can set up a `sudo.conf` file -- located at `/etc/sudo.conf` -- to specify the \"askpass helper\" referred to in the error message. From `man sudo.conf` (the [manual page](https://www.sudo.ws/docs/man/1.9.9/sudo.conf.man/) is also online):\n\n:::{.pre}\n  \n     askpass   The fully qualified path to a helper program used to read the\n               user's password when no terminal is available.  This may be\n               the case when sudo is executed from a graphical (as opposed to\n               text-based) application.  The program specified by askpass\n               should display the argument passed to it as the prompt and\n               write the user's password to the standard output.  The value\n               of askpass may be overridden by the SUDO_ASKPASS environment\n               variable.\n:::\n\nSo where do I find one of these askpass helper programs:\n\n``` bash\nsudo apt-get install ssh-askpass ssh-askpass-gnome\n```\n\nI've installed both ssh-askpass and ssh-askpass-gnome purely for the sake of prettiness. Initially I only installed ssh-askpass and it did work but the X11 screen it brought up when asking me to enter the password was not very pretty. When I also installed ssh-askpass-gnome the dialog box that comes up is much nicer.\n\nAt the terminal:\n\n``` bash\nssh-askpass\n```\n\nThis brings up the dialog box asking for your password. If you do this manually you'll see that whatever you type at the dialog box gets passed to the terminal (it will actually print it on screen in this instance)\n\nSo now I edit sudo.conf (I actually had to create it because it didn't already exist) and added the following lines:\n\n``` bash\n# specify ssh-askpass as my helper\nPath askpass /usr/bin/ssh-askpass\n```\n\n(As an aside, I had to use `whereis ssh-askpass` in order to find this path because the advice I'd seen on a stackoverflow page had a different path and, shockingly, it doesn't work if you don't provide the correct path)\n\nAnyway, once I did this and tried to install quarto using `pkg_install()` sudo no longer errored when pak tried to install system dependencies. Instead it brought up the askpass dialog box:\n\n![](img/askpass-screen.png)\n\nWhen I typed in my password, the installation worked just fine. The only problem is that quarto installation requires *five* system dependencies to be installed, and as the output below shows, pak creates a separate shell command for each one...\n\n``` bash\nℹ Executing `sudo sh -c apt-get install -y make`\nℹ Executing `sudo sh -c apt-get install -y libcurl4-openssl-dev`\nℹ Executing `sudo sh -c apt-get install -y libicu-dev`\nℹ Executing `sudo sh -c apt-get install -y libssl-dev`\nℹ Executing `sudo sh -c apt-get install -y pandoc`\n```\n\n...and yes, I had to enter my password five times. That's mildly irritating, and so far I haven't figured out how to fix that. My initial expectation was that entering the password once would invoke the caching mechanism so sudo wouldn't ask again for another 15 minutes, but that's not quite true here. This little gem in `man sudo` explains the issue: \n\n```\n     Security policies may support credential caching to allow the\n     user to run sudo again for a period of time without requiring\n     authentication.  By default, the sudoers policy caches creden‐\n     tials on a per-terminal basis for 15 minutes.  See the\n     timestamp_type and timestamp_timeout options in sudoers(5) for\n     more information.  By running sudo with the -v option, a user\n     can update the cached credentials without running a command.\n\n```\n\nThe reason why the \"15 minutes\" rule doesn't apply here is that the credentials are cached on a \"per-terminal\" basis. Each `sh` command invoked by pak effectively runs a new shell instance so the caching doesn't transfer. Gr.\n\n\n## Editing sudoers\n\n```\n     timestamp_type    sudoers uses per-user time stamp files for\n                       credential caching.  The timestamp_type op‐\n                       tion can be used to specify the type of time\n                       stamp record used.  It has the following\n                       possible values:\n\n                       global  A single time stamp record is used\n                               for all of a user's login sessions,\n                               regardless of the terminal or parent\n                               process ID.  An additional record is\n                               used to serialize password prompts\n                               when sudo is used multiple times in\n                               a pipeline, but this does not affect\n                               authentication.\n\n                       ppid    A single time stamp record is used\n                               for all processes with the same par‐\n                               ent process ID (usually the shell).\n                               Commands run from the same shell (or\n                               other common parent process) will\n                               not require a password for\n                               timestamp_timeout minutes (15 by\n                               default).  Commands run via sudo\n                               with a different parent process ID,\n                               for example from a shell script,\n                               will be authenticated separately.\n\n                       tty     One time stamp record is used for\n                               each terminal, which means that a\n                               user's login sessions are authenti‐\n                               cated separately.  If no terminal is\n                               present, the behavior is the same as\n                               ppid.  Commands run from the same\n                               terminal will not require a password\n                               for timestamp_timeout minutes (15 by\n                               default).\n\n                       kernel  The time stamp is stored in the ker‐\n                               nel as an attribute of the terminal\n                               device.  If no terminal is present,\n                               the behavior is the same as ppid.\n                               Negative timestamp_timeout values\n                               are not supported and positive val‐\n                               ues are limited to a maximum of 60\n                               minutes.  This is currently only\n                               supported on OpenBSD.\n\n                       The default value is tty.\n\n                       This setting is only supported by version\n                       1.8.21 or higher.\n\n```\n\n\n\nFirst, read this article on [how to edit the sudoers file](https://www.digitalocean.com/community/tutorials/how-to-edit-the-sudoers-file) carefully. Editing policies for sudo needs to be done with care: you really, really don't want to mess it up and lose the ability to invoke sudo because it's been incorrectly configured. So please, please read the linked page.\n\nRather than edit the \"core\" sudoers file, what I've done is add a file to the sudoers.d directory (by default, files in this folder are automatically included when the sudoers plugin is loaded). I created one that exists solely to manage the timestamp settings for my primary user:\n\n```\nsudo visudo -f /etc/sudoers.d/timestamp_type\n```\n\nNotice that I've used visudo, and not some other editor. If you read the linked article you know why I id that and why it is astonishingly important to do it this way. If you didn't read the linked article... well, you would be *extremely* ill-advised to try the next step without actually reading it. \n\nOkay, that feels like enough warning. Let's look at what I included in this file:\n\n```\n# specify the timeout type (usual default=tty)\nDefaults:danielle timestamp_type=global\n\n# specify the timeout interval (usual default=15)\nDefaults:danielle timestamp_timeout=5\n```\n\nI've done two things. First, in order to allow the sudo password cache to work everywhere regardless of which process invokes it, I set `timestamp_type=global`.^[Okay here's the weird thing: I really feel like the `timestamp_type=ppid` option *should* have worked here since the `sh` commands invoked by pak all come from a common source and should therefore have the same parent id, but apparently not. That one is beyond me, and I couldn't work out why. Hence: global.] Second, because this makes me a tiny bit nervous (it's a very mild softening of security policies), I shortened the cache expiry time from 15 minutes to 5 minutes by setting `timestamp_timeout=5`.\n\n## You're a star\n\nWas it worth it? Well, let me just say this: I installed the \"stars\" package with one line of code -- ON LINUX, WITH ALL THE HORRIFYING GEOSPATIAL DEPENDENCIES IT ENTAILS -- and it *just worked*. It worked fast. Unbelievable. I am horrified.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pkg_install(\"stars\")\n```\n:::\n\n\n``` bash\n→ Will install 1 package.\n→ Will download 1 package with unknown size.\n+ stars   0.5-6 [bld][dl]\nℹ Getting 1 pkg with unknown size\n✓ Got stars 0.5-6 (source) (3.42 MB)                                  \n✓ Downloaded 1 package (3.42 MB)in 4.2s                               \nℹ Installing system requirements\nℹ Executing `sudo sh -c apt-get install -y libgdal-dev`\nℹ Executing `sudo sh -c apt-get install -y gdal-bin`\nℹ Executing `sudo sh -c apt-get install -y libgeos-dev`\nℹ Executing `sudo sh -c apt-get install -y libssl-dev`\nℹ Executing `sudo sh -c apt-get install -y libproj-dev`\nℹ Executing `sudo sh -c apt-get install -y libudunits2-dev`\nℹ Building stars 0.5-6\n✓ Built stars 0.5-6 (1.4s)                                       \n✓ Installed stars 0.5-6  (98ms)                                    \n✓ 1 pkg + 16 deps: kept 12, added 1, dld 1 (3.42 MB) [20.7s]    \n```\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}