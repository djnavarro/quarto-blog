{
  "hash": "e819dd85ada50e8fffbada1cdb62c4a1",
  "result": {
    "markdown": "---\ntitle: \"Makefiles, or, the balrog and the submersible\"\ndescription: \"Fly, you fools!\"\ndate: \"2023-06-23\"\nimage: img/gothmog.jpg\nimage-alt: \"Stylised art showing a balrog. The piece is called 'Gothmog at the Storming of Gondolin', and is CC-BY licenced by Tom Loback\"\nfig-cap-location: margin\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nI have a secret to confess: I have been writing code for over 20 years, and until about a month ago I have been loathe even to try descending into the depths of   [Make](https://en.wikipedia.org/wiki/Make_(software)). For too long I have feared catastrophic implosion should I be reckless enough attempt to dive into these dark waters. Even now, as the sunlight fades and I pass below the surface into the treacherous realm of Almost Competence, I can hear the ominous sounds of compressive stress upon my psyche. I imagine betentacled krakenlike beasts of this realm outside the hull, the whispers of their hunting cry seeping into my tiny enclosed space as they call to the balrogs of open source...\n\n> Well *actually*...\n\n...they hiss at me.\n\nDrums, drums in the deep. I cannot get out. I shall have to complete this blog post in the hope that a wizard and his merry little troupe of clueless hobbits may one day discover the tale of my tragic descent.\n\n<br>\n\n![This piece is called 'Gothmog at the Storming of Gondolin', and is CC-BY licenced by Tom Loback](img/gothmog.jpg){fig-alt=\"Stylised art showing a balrog.\"}\n\n<br>\n\n## Departing the Sunlit Uplands\n\nEvery tragic narrative begins with a fatal mistake, the hubris of the doomed heroine making one terrible choice that seals her fate well before the story gets underway: in this case, deciding that now is the time to read a 1200 page book on C++. Absolutely cursed decision. There was no way I wasn't going to end up swallowed by a yawning hellmouth once that choice had been made. But as the saying goes, when descending into the abyss to be crushed by lovecraftian horrors, it's all about the journey and not the destination. \n\nHaving opened the pages of the necronomicon, I first felt my soul turning toward the darkness as I considered the consequences of C++ being a compiled language, and my obsessive need to write my own code and take notes as I read the book. Barely one chapter in and I had written almost 50 baby C\n++ programs, every one of them a helpless monster gnashing it's tiny teeth in ravenous hunger demanding to be compiled before it can do anything useful.\n\nOh no, my precious abominations, I told them. I already have human children to feed and care for, I'll not fall into the trap of lovingly passing each of you individually to the compiler for nurture and sustenance with bespoke hand crafted calls to clang++. That way lies madness and chaos. No, I shall hire a metaphorical nanny/butler/build-manager to feed you and compile you when you need compiling, to politely inform me each time a little C++ demon has grown into to a new binary file, and to take care of sundry other drudgeries with which I do not wish to be burdened.\n\nAnd with that my doomed submersible slipped below the waves. \n\n## The decay of that colossal Wreck\n\nAs the light fades away visions of my Ozymandian future cross my eyes. I imagine the Works that I will construct, upon which even the Mighty will gaze and despair. Hints of make targets that I will specify and the wonders that will get built with automations. \n\nBehold! \n\nI have written a `Makefile` for my side project, an spell to feed my tiresome C++ babies into the maw of clang++, and render my markdown inscriptions into graven html with pandoc. \n\n\n::: {.cell .column-body-outset file='examples/learning-cpp-makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\ncpp_src := $(wildcard src/*.cpp)\ncpp_out := $(patsubst src/%.cpp, bin/%, $(cpp_src))\n\npandoc_src := $(wildcard notes/*.md)\npandoc_out := $(patsubst notes/%.md, docs/%.html, $(pandoc_src))\n\nall: dirs $(cpp_out) $(pandoc_out) docs/style.css docs/.nojekyll docs/CNAME\n\ndirs:\n\t@mkdir -p ./bin\n\t@mkdir -p ./docs\n\nbin/%: src/%.cpp\n\t@echo \"[compiling]\" $<\n\t@clang++-15 --std=c++20 $< -o $@\n\ndocs/style.css: pandoc/style.css\n\t@echo \"[copying]  \" $<\n\t@cp pandoc/style.css docs/style.css\n\ndocs/.nojekyll:\n\t@echo \"[writing]  \" $@\n\t@touch docs/.nojekyll\n\ndocs/CNAME:\n\t@echo \"[writing]  \" $@\n\t@echo \"learning-cpp.djnavarro.net\" > docs/CNAME\n\ndocs/%.html: notes/%.md\n\t@echo \"[rendering]\" $<\n\t@pandoc $< -o $@ --template=./pandoc/template.html \\\n\t\t--standalone --mathjax --toc --toc-depth 2\n\nclean:\n\t@echo \"[deleting]  docs\"\n\t@echo \"[deleting]  bin\"\n\t@rm -rf docs\n\t@rm -rf bin\n\n```\n:::\n\n\nIt is not very impressive, I know. But it does work, and it does help. So perhaps I should say a little about how I got to there from here?\n\n<br>\n\n![The Ulysses mosaic at the Bardo Museum in Tunis, Tunisia (2nd century AD), depicting the temptation of Odysseus by the Sirens](img/odysseus-and-the-sirens.jpg){fig-alt=\"Mosaic depicting the temptation of Odysseus by the Sirens.\"}\n\n<br>\n\n## Love me while your wrists are bound\n\nLet's begin at the beginning, and take account of a few important truths: \n\n- Everything I know about Makefiles is from [makefiletutorial.com](https://makefiletutorial.com). This post is not going to tell you anything you cannot find in Chase Lambert's lovely tutorial. \n- There are many alternatives to Make. I've seen many projects use  [CMake](https://cmake.org/) for build automation, for example. Alternatively, if you're working in R you might prefer to use the [targets](https://docs.ropensci.org/targets/) package by Will Landau ([user manual here](https://books.ropensci.org/targets/)). There is nothing particularly special about Make per se that made me decide to learn it: it just happens to be a thing that has been around for a long time, and it was irritating me that I didn't know how to use it.\n- Like all things created by humans, it is cursed. Makefiles are indeed the Night That is Dark and Full of Terrors. The red priestesses warned us. \n\nThe blood that circulates through the beating heart of every Makefile are its **targets**. Each target is defined using syntax that looks something like this:\n\n\n::: {.cell}\n\n```{.makefile .cell-code}\ntargets: prerequisites\n\tcommand\n\tcommand\n\tcommand\n```\n:::\n\n\nIt seems simple enough. The top level command provides the name of the target, with (optionally) a set of **prerequisites** associated with that target. The prerequisites are critical: the **commands** listed below the `targets: prerequisites` line will only be executed when one or more of the prerequisites has changed. This is the mechanism by which a Makefile can be used to track the dependencies among the various files in your project.\n\nIt seems lovely, does it not? Of course it does my sweet Odysseus. You're listening to the Sirens, and fortunate indeed that your loved ones have tied you to the mast to prevent you from casting yourself overboard and drowning.\n\n> *\"But Danielle, this seems so simple! It is lovely, alluring and sweet. I see no sign of eldritch horrors or evil creatures lurking in the depths here\"*\n\nYou say that, so I presume that you have absolutely taken note of the fact that that the `command` lines in the code snippet above are indented with tabs and not spaces, yes? Those tabs are like little glass knives buried in the sand beneath your soft, bare feet. Make does not recognise spaces as indentations, and commands must be indented. You must use tabs for indentations when you use Make. \n\n> *\"But Danielle, my IDE is set to automatically convert tabs to spaces! This is going to mess me up and now I have to faff about making exceptions for specific files\"*\n\nIndeed. Don't say I didn't warn you. Build automation is so so sweet, but This Syntax is Cursed. Nevertheless, let's sip from the poisoned chalice and try writing a simple Makefile anyway. Perhaps we won't die. \n\n## Our first Makefile\n\n\n::: {.cell}\n\n:::\n\n\nHere's a very simple project:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(\"./examples/version1\", all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nLet's look at its Makefile:\n\n\n::: {.cell file='examples/version1/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\n# the \"all\" target is a set of other targets\nall: dir bin/collatz bin/species bin/swap\n\n# the \"dir\" target creates a directory for the binaries\ndir:\n\tmkdir -p ./bin\n\n# the \"bin/collatz\" target compiles the collatz.cpp program\nbin/collatz: src/collatz.cpp\n\tclang++ --std=c++20 src/collatz.cpp -o bin/collatz\n\n# the \"bin/species\" target compiles the species.cpp program\nbin/species: src/species.cpp\n\tclang++ --std=c++20 src/species.cpp -o bin/species\n\n# the \"bin/swap\" target compiles the swap.cpp program\nbin/swap: src/swap.cpp\n\tclang++ --std=c++20 src/swap.cpp -o bin/swap\n\n# the \"clean\" target deletes all binary files\nclean:\n\trm -rf bin\n```\n:::\n\n\nTo invoke this Makefile, assuming that the working directory is set to the project root folder and our file is named `Makefile` or `makefile`, all we have to do is type `make` at the command line. Normally that wouldn't require us to change directories, because usually we're working from the project folder, but because this is a blog post that contains several subprojects that each contain their own Makefile, the hidden bits of my code includes some boring bash commands used to change directories. Whatever\n\nLet's see what horrors escape our little Pandora's box, shall we?\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n```\n:::\n:::\n\n\nOkay, let's look at the state of our project now:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(\"./examples/version1\", all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n├── bin\n│   ├── collatz\n│   ├── species\n│   └── swap\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nTo be precise about what happened here, I invoked `make` without specifying a target to build. When that happens, `make` will use the first target in the file: in this case, \"all\". However, because the \"all\" target is nothing other than a list of *other* targets that need to be built, what ends up happening is that `make` builds all those targets. Traditionally, this top-level target is called `all`, and it includes all the other targets needed to build the whole project. \n\nWhat happens if you want to burn it all down and revert to the initial (unbuilt) state of the project? `make` doesn't provide that functionality automatically, but it is traditional for writers of makefiles to include a target called `clean` that includes commands that will perform this clean up job for you (don't include \"clean\" in the list of \"all\" targets, obviously: that would defeat the point entirely). For this project, clean up is really simple: delete the `bin` folder and everything in it! \n\nTo perform cleanup then, all we have to do is type `make clean` to invoke the \"clean\" target:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake clean\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nrm -rf bin\n```\n:::\n:::\n\n\n\nAnd, just like that, we are back to the clean (unbuilt) state for our project:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(\"./examples/version1\", all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\n\n## Our second Makefile\n\n\n::: {.cell}\n\n:::\n\n\nFor the second version, we have a project with the same structure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(\"./examples/version2\", all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version2\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nHowever, our makefile now uses rules:\n\n\n::: {.cell file='examples/version2/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\n\n# lists of filenames\nsrc := $(wildcard src/*.cpp)\nbin := $(patsubst src/%.cpp, bin/%, $(src))\n\n# the \"all\" target is much simpler now\nall: dir $(bin)\n\ndir:\n\tmkdir -p ./bin\n\n# each C++ binary is a target, the source is its prerequisite\nbin/%: src/%.cpp\n\tclang++ --std=c++20 $< -o $@\n\nclean:\n\trm -rf bin\n```\n:::\n\n\nThe results are the same:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(\"./examples/version2\", all = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version2\n├── .gitignore\n├── Makefile\n├── bin\n│   ├── collatz\n│   ├── species\n│   └── swap\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## Our third Makefile\n\n\n::: {.cell}\n\n:::\n\n\nThe third version is again the same in structure. But we now use `@` to prevent commands from echoing to the terminal, and instead write our own messages:\n\n\n::: {.cell file='examples/version3/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\nsrc := $(wildcard src/*.cpp)\nbin := $(patsubst src/%.cpp, bin/%, $(src))\n\nall: dir $(bin)\n\n# this target is silent\ndir:\n\t@mkdir -p ./bin\n\n# this target prints a human readable message\nbin/%: src/%.cpp\n\t@echo \"compiling\" $< \"to\" $@\n\t@clang++ --std=c++20 $< -o $@\n\nclean:\n\t@echo \"deleting binary files\"\n\t@rm -rf bin\n```\n:::\n\n\nThe same events take place, but the result is prettier:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\ncompiling src/collatz.cpp to bin/collatz\ncompiling src/species.cpp to bin/species\ncompiling src/swap.cpp to bin/swap\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}