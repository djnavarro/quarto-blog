{
  "hash": "d6deb80d80df80f715a2b9cb9b37e4b7",
  "result": {
    "markdown": "---\ntitle: \"Makefiles. Or, the balrog, the sirens, and the submersibles\"\ndescription: \"Fly, you fools!\"\ndate: \"2023-06-23\"\nimage: img/gothmog.jpg\nimage-alt: \"Stylised art showing a balrog. The piece is called 'Gothmog at the Storming of Gondolin', and is CC-BY licenced by Tom Loback\"\nfig-cap-location: margin\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nI have a secret to confess: I have been writing code for over 20 years, and until about a month ago I have been loathe even to try descending into the depths of [Make](https://en.wikipedia.org/wiki/Make_(software)). For too long I have feared catastrophic implosion should I be reckless enough attempt to dive into these dark waters.^[I did ponder briefly the question of whether this joke is in poor taste. It probably is. On the other hand, I can't help but notice there's a remarkable number of people who suddenly come out of the woodwork to handwringing about the horrors of ordinary people making jokes at the expense of reckless rich people who came to a relatively painless end due to their own overwhelming hubris, while Dave Chappelle and Ricky Gervais both make a career out of mocking and belittling the powerless. Pick your battles my sweet things. Pick your battles.] Even now, as the sunlight fades and I pass below the surface into the treacherous realm of The Nearly Competent, I can hear the ominous sounds of compressive stress upon my psyche. I imagine the betentacled krakenlike beasts native to this realm congregating outside the hull, the whispers of their hunting cry seeping into my tiny enclosed space as they sing the song to summon balrogs:\n\n> Well *actually*...\n\nDrums, drums in the deep. \n\nBut I am here now and I cannot get out. I shall have to complete this blog post in the hope that a wizard and his merry little troupe of clueless hobbits may one day discover the tale of my tragic descent.\n\n<br>\n\n![This piece is called 'Gothmog at the Storming of Gondolin', and is CC-BY licenced by Tom Loback](img/gothmog.jpg){fig-alt=\"Stylised art showing a balrog.\"}\n\n<br>\n\n## Farewell to those broad, Sunlit Uplands we loved so well\n\nEvery tragic narrative begins with a fatal mistake, the hubris of the doomed making the terrible choice that sealed their fate well before the story gets underway. In this case, that mistake was deciding that now is the time to read a 1200 page book on C++. Absolutely cursed decision. There was no way I wasn't going to end up swallowed by a yawning hellmouth once that choice had been made. But -- as the saying goes -- when one descends into the abyss to be crushed by lovecraftian horrors, it's all about the journey and not the destination. \n\nHere's how the sad story unfolded. Having read through the first hundred or so pages of the C++ necronomicon (the \"fucking around\" stage), I started encountering the inevitable consequences of the fact that (a) C++ is a compiled language, and (b) I am a person who obsessively takes notes as she reads and writes her own code to accompany the notes. And so it came to pass that (in the \"finding out\" stage of this tragedy) I was barely one chapter into the book and I'd written almost 50 little baby C++ programs, every one of them a helpless monster gnashing it's tiny teeth in ravenous hunger, demanding to be compiled before it can do anything useful.\n\nOh no, my precious abominations, I said to them. I already have human children to feed and care for, I'll not fall into the trap of lovingly passing each of you individually to the compiler for nurture and sustenance with bespoke hand crafted calls to clang++. That way lies madness and chaos. No, I shall hire a metaphorical nanny/butler/build-manager to feed you and compile you when you need compiling, to politely inform me each time a little C++ demon has grown into to a new binary file, and to take care of sundry other drudgeries with which I do not wish to be burdened. I shall write a `Makefile`. \n\nAnd with that my doomed submersible slipped below the waves. \n\n## The decay of that colossal Wreck, boundless and bare\n\nAs the light fades away visions of my Ozymandian future cross my eyes. I imagine the Works that I will construct, upon which even the Mighty will gaze and despair. Hints of make targets that I will specify and the wonders that will get built with automations. \n\nBehold! \n\nHere is the `Makefile` I wrote for my side project. It's a minor incantation at best, a small spell to feed my tiresome C++ babies into the maw of clang++ whenever necessary, and renders all my boring markdown scratchings into graven html with the help of pandoc. \n\n\n::: {.cell .column-body-outset file='examples/learning-cpp-makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\ncpp_src := $(wildcard src/*.cpp)\ncpp_out := $(patsubst src/%.cpp, bin/%, $(cpp_src))\n\npandoc_src := $(wildcard notes/*.md)\npandoc_out := $(patsubst notes/%.md, docs/%.html, $(pandoc_src))\n\nall: dirs $(cpp_out) $(pandoc_out) docs/style.css docs/.nojekyll docs/CNAME\n\ndirs:\n\t@mkdir -p ./bin\n\t@mkdir -p ./docs\n\nbin/%: src/%.cpp\n\t@echo \"[compiling]\" $<\n\t@clang++-15 --std=c++20 $< -o $@\n\ndocs/style.css: pandoc/style.css\n\t@echo \"[copying]  \" $<\n\t@cp pandoc/style.css docs/style.css\n\ndocs/.nojekyll:\n\t@echo \"[writing]  \" $@\n\t@touch docs/.nojekyll\n\ndocs/CNAME:\n\t@echo \"[writing]  \" $@\n\t@echo \"learning-cpp.djnavarro.net\" > docs/CNAME\n\ndocs/%.html: notes/%.md\n\t@echo \"[rendering]\" $<\n\t@pandoc $< -o $@ --template=./pandoc/template.html \\\n\t\t--standalone --mathjax --toc --toc-depth 2\n\nclean:\n\t@echo \"[deleting]  docs\"\n\t@echo \"[deleting]  bin\"\n\t@rm -rf docs\n\t@rm -rf bin\n\n```\n:::\n\n\nIt is not very impressive, I know. But it does work, and it does help. So perhaps I should say a little about how I got to there from here?\n\n<br>\n\n![The Ulysses mosaic at the Bardo Museum in Tunis, Tunisia (2nd century AD), depicting the temptation of Odysseus by the Sirens](img/odysseus-and-the-sirens.jpg){fig-alt=\"Mosaic depicting the temptation of Odysseus by the Sirens.\"}\n\n<br>\n\n## Love me while your wrists are bound (I'll be there when your reality drowns)\n\nIf I'm going to write something about Makefiles, I should perhaps start by acknowledging a few important truths: \n\n- I'm not an expert. Everything I know about Makefiles is from [makefiletutorial.com](https://makefiletutorial.com). This post is not going to tell you anything you cannot find in Chase Lambert's lovely tutorial. \n- There are many alternatives to Make. I've seen many projects use  [CMake](https://cmake.org/) for build automation, for example. Alternatively, if you're working in R you might prefer to use the [targets](https://docs.ropensci.org/targets/) package by Will Landau ([user manual here](https://books.ropensci.org/targets/)). There is nothing particularly special about Make per se that made me decide to learn it: it just happens to be a thing that has been around for a long time, and it was irritating me that I didn't know how to use it.\n- Like all things created by humans, it is cursed. Makefiles are indeed the Night That is Dark and Full of Terrors. The red priestesses warned us. \n\nWith that out of the way, let's begin. Reduced to its simplest form a Makefile is a collection of build **targets**, each of which is defined using syntax that looks something like this:\n\n\n::: {.cell}\n\n```{.makefile .cell-code}\ntargets: prerequisites\n\tcommand\n\tcommand\n\tcommand\n```\n:::\n\n\nIt seems simple enough. The top level command provides the name of the target, with (optionally) a set of **prerequisites** associated with that target. The prerequisites are critical: the **commands** listed below the `targets: prerequisites` line will only be executed when one or more of the prerequisites has changed. This is the mechanism by which a Makefile can be used to track the dependencies among the various files in your project.\n\nA concrete example might help to make this a little clearer:\n\n\n::: {.cell}\n\n```{.makefile .cell-code}\nbin/collatz: src/collatz.cpp\n    clang++ --std=c++20 src/collatz.cpp -o bin/collatz\n```\n:::\n\n    \n\nLet's unpack what each part of this target means: \n\n- `bin/collatz` is the name of the target, and by convention the target name is identical to the name of the file to which it refers, at least in situations where the target monitors a single output file\n- `src/collatz.cpp` is a prerequisite file. If the `src/collatz.cpp` file has been modified more recently than the `bin/collatz` file created by the compilation command underneath, then that command will be executed when `make` is called\n- The third line is a shell command. In this instance, the command takes the `src/collatz.cpp` source file and uses clang to compile it to a binary executable file `bin/collatz`. (The `--std=c++20` flag indicates that C++ version 20 should be assumed)\n    \n\nIt seems lovely, does it not? Of course it does my sweet Odysseus. You've been listening to the Sirens again, and fortunate indeed that your loved ones have tied you to the mast to prevent you from casting yourself overboard and drowning.\n\n> *\"But Danielle, this seems so simple! It is lovely, alluring and sweet. I see no sign of eldritch horrors or evil creatures lurking in the depths here\"*\n\nYou say that, so I presume that you have absolutely noticed that all those `command` lines in the code snippet above are indented with tabs and not spaces, yes? No? Those tabs are like little glass knives buried in the sand beneath your soft, bare feet. You must use tabs for indentations when you use Make, or it won't work.\n\n> *\"But Danielle, my IDE is set to automatically convert tabs to spaces! This is going to mess me up and now I have to faff about making exceptions for specific files\"*\n\nIndeed. Don't say I didn't warn you.\n\n\n## Basic Makefiles, Act I: The flickering flames of unextinguished hope\n\n*Perhaps we won't die*, we whisper to ourselves as we open a blank Makefile, and point our vessel towards Scylla and Charybdis with the kind of blind optimism that typically ends with the Coroners Court issuing a lengthy report several months later. After all, our project is so very small. We are but hobbits crossing the Brandywine river looking for mushrooms or something, surely the Willow at the heart of the Old Forest won't eat us? \n\nSorry. Got a little distracted there, didn't I? Getting back on track now. When your project is very small, it isn't hard to write a basic Makefile. Again, it helps to use concrete examples. Let us imagine a project that has this structure: \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nIn this happy Narnia -- which absolutely will never turn into a Fillory because happy endings are real, and life really truly is more than one barely-sublimated trauma after another -- we have a very easy thing to work with. In the `src` folder we have three .cpp files that each correspond to a small C++ program that needs to be compiled. \n\nBeing the sort of person who likes to separate inputs from outputs, we decide that the executable binary files should all be stored in a `bin` folder. Being also the cautious sort of person who understands the difference between inputs and outputs, our project has a `.gitignore` file that ensures that nothing we write to `bin` is placed under version control. \n\nWe also have a a file called `Makefile`,^[Traditionally a Makefile is simply named `Makefile` or `makefile`. It doesn't have to be, but if you call it something else you need to explicitly tell `make` where to find the file using the `-f` flag. A command like `make -f my_make_file`, for example, specifies that the Makefile is called `my_make_file`.] whose contents are as follows:\n\n\n::: {.cell file='examples/version1/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\n# the \"all\" target is a set of other targets\nall: dir bin/collatz bin/species bin/swap\n\n# the \"dir\" target creates a directory for the binaries\ndir:\n\tmkdir -p ./bin\n\n# the \"bin/collatz\" target compiles the collatz.cpp program\nbin/collatz: src/collatz.cpp\n\tclang++ --std=c++20 src/collatz.cpp -o bin/collatz\n\n# the \"bin/species\" target compiles the species.cpp program\nbin/species: src/species.cpp\n\tclang++ --std=c++20 src/species.cpp -o bin/species\n\n# the \"bin/swap\" target compiles the swap.cpp program\nbin/swap: src/swap.cpp\n\tclang++ --std=c++20 src/swap.cpp -o bin/swap\n\n# the \"clean\" target deletes all binary files\nclean:\n\trm -rf bin\n```\n:::\n\n\nThe central part of the Makefile is familiar. We're taking the \"compile a C++ source file\" recipe that I previously used as an example of makefile target, and repeating it three times over. It's so utterly dull that it actually reads better if we strip the comments:\n\n\n::: {.cell}\n\n```{.makefile .cell-code}\nbin/collatz: src/collatz.cpp\n\tclang++ --std=c++20 src/collatz.cpp -o bin/collatz\n\nbin/species: src/species.cpp\n\tclang++ --std=c++20 src/species.cpp -o bin/species\n\nbin/swap: src/swap.cpp\n\tclang++ --std=c++20 src/swap.cpp -o bin/swap\n```\n:::\n\n\nIt's repetitive, but for this toy project it works. If we want this project to build, we require that all three of these C++ source files be compiled to binaries.\n\nSisyphus should be so lucky.\n\nThe nature of make targets is that you can call them by name. In the snippet above I have three targets. To build each of these I could type this mind-meltingly tedious sequence of commands at the terminal:\n\n``` bash\nmake bin/collatz\nmake bin/species\nmake bin/swap\n```\n\nIt would work, but as I have said before life is short, and I'm saving my masochism for something better. Building each target individually is simply not on my to-do list. Not now, not as Valyria sinks into its Doom, and not as Rome is burning. My fiddling time is preserved for something better than this, my babes. \n\nTo accommodate the need of the dead things like myself, `make` makes it possible to group multiple targets together:\n\n``` Makefile\nall: dir bin/collatz bin/species bin/swap\n```\n\nThis is very helpful. Instead of typing this:\n\n``` bash\nmake dir\nmake bin/collatz\nmake bin/species\nmake bin/swap\n```\n\nI can now type this:\n\n``` bash\nmake all\n```\n\nIn fact, even this can be shortened because \"all\" happens to be the first target listed in the Makefile. If you don't specify a target to build, `make` defaults to the first target in the file. It is conventional, then, to call the first target in the file \"all\", and have that target be a list of all the *other* targets needed to build the whole project. Consequently, I can do this:^[Admittedly, this implicitly assumes that I'm executing the `make` command from the same directory as the `Makefile` itself. That creates some awkwardness for this blog post because the quarto file is not in the same folder as the Makefile. So when you look at the source code for this post you'll see I'm doing something slightly different. But let's put those particular nightmares on layby shall we? Instead, let's see what horrors escape from the particular Pandora's box that happens to sit before us.]\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n\nHere's what we get as output...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n```\n:::\n:::\n\n\n...and our project now contains the binary files:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n├── bin\n│   ├── collatz\n│   ├── species\n│   └── swap\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nThis is the explanation of lines 1-19 of our makefile. What of lines 20-22? \n\nI'm so glad you asked. \n\nWhat happens if you want to burn it all down and revert to the initial (unbuilt) state of the project? `make` doesn't provide that functionality automatically, but it is traditional for writers of makefiles to include a target called `clean` that includes commands that will perform this clean up job for you (don't include \"clean\" in the list of \"all\" targets, obviously: that would defeat the point entirely). For this project, clean up is really simple: delete the `bin` folder and everything in it! \n\nTo perform cleanup then, all we have to do is type `make clean` to invoke the \"clean\" target:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake clean\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nrm -rf bin\n```\n:::\n:::\n\n\nAnd, just like that, we are back to the clean (unbuilt) state for our project:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nOur submersible is sliding into the depths, all signs are nominal, and the natives are greeting us with roses as we roll our tanks across their homes and bulldoze their children. Nothing could possibly go wrong. \n\n## Basic Makefiles, Act II: The seeping sense of silent dread in your bones\n\n\n::: {.cell}\n\n:::\n\n\nFor the second version, we have a project with the same structure:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version2\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nHowever, our makefile now uses rules:\n\n\n::: {.cell file='examples/version2/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\n# lists of filenames\nsrc := $(wildcard src/*.cpp)\nbin := $(patsubst src/%.cpp, bin/%, $(src))\n\n# the \"all\" target is much simpler now\nall: dir $(bin)\n\ndir:\n\tmkdir -p ./bin\n\n# each C++ binary is a target, the source is its prerequisite\nbin/%: src/%.cpp\n\tclang++ --std=c++20 $< -o $@\n\nclean:\n\trm -rf bin\n```\n:::\n\n\nThe results are the same:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version2\n├── .gitignore\n├── Makefile\n├── bin\n│   ├── collatz\n│   ├── species\n│   └── swap\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Basic Makefiles Act III: When you paper over cracks in the walls you can still see the unseelie beasts writhing within \n\n\n::: {.cell}\n\n:::\n\n\nThe third version is again the same in structure. But we now use `@` to prevent commands from echoing to the terminal, and instead write our own messages:\n\n\n::: {.cell file='examples/version3/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\nsrc := $(wildcard src/*.cpp)\nbin := $(patsubst src/%.cpp, bin/%, $(src))\n\nall: dir $(bin)\n\n# this target is silent\ndir:\n\t@mkdir -p ./bin\n\n# this target prints a human readable message\nbin/%: src/%.cpp\n\t@echo \"compiling\" $< \"to\" $@\n\t@clang++ --std=c++20 $< -o $@\n\nclean:\n\t@echo \"deleting binary files\"\n\t@rm -rf bin\n```\n:::\n\n\nThe same events take place, but the result is prettier:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\ncompiling src/collatz.cpp to bin/collatz\ncompiling src/species.cpp to bin/species\ncompiling src/swap.cpp to bin/swap\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Death of the Authoress: Recursion is the exsanguination of hope, the catastrophic implosion of make\n\n[Calling make recursively](https://www.gnu.org/software/make/manual/make.html#Recursion)\n\n\n::: {.cell file='Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\npost := 2023-06-23_makefiles\nsite_path := ../../_site/posts/$(post)\nfreeze_path := ../../_freeze/posts/$(post)\noutput_path := ../../_site/posts/$(post)/index.html\n\nall: dirs subprojects $(output_path) end\n\ndirs:\n\t@mkdir -p ./bin\n\nsubprojects:\n\t@echo \"\\n[ making subproject v1 ]\"\n\t@$(MAKE) --directory=examples/version1 --no-print-directory\n\t@echo \"\\n[ making subproject v2 ]\"\n\t@$(MAKE) --directory=examples/version2 --no-print-directory\n\t@echo \"\\n[ making subproject v3 ]\"\n\t@$(MAKE) --directory=examples/version3 --no-print-directory\n\n$(output_path): index.qmd\n\t@echo \"\\n[ rendering quarto document ]\"\n\t@quarto render $< --quiet\n\nend:\n\t@echo \"\\n\"\n\nclean:\n\t@echo \"\\n[ cleaning subprojects ]\"\n\t@$(MAKE) clean --directory=examples/version1 --no-print-directory\n\t@$(MAKE) clean --directory=examples/version2 --no-print-directory\n\t@$(MAKE) clean --directory=examples/version3 --no-print-directory\n\t@echo \"\\n[ deleting quarto output ]\"\n\t@rm -rf $(site_path)\n\t@rm -rf $(freeze_path)\n\t@echo \"\\n\"\n```\n:::\n\n\nWhen I call `make` on clean build I get this output \n\n```\n\n[ making subproject v1 ]\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n\n[ making subproject v2 ]\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n\n[ making subproject v3 ]\ncompiling src/collatz.cpp to bin/collatz\ncompiling src/species.cpp to bin/species\ncompiling src/swap.cpp to bin/swap\n\n[ rendering quarto document ]\n\n```\n\nWhen I call `make clean` it produces this:\n\n```\n\n[ cleaning subprojects ]\nrm -rf bin\nrm -rf bin\ndeleting binary files\n\n[ deleting quarto output ]\n\n```\n\n\nThere's some spectacularly unpleasant self-reference going on in all this because the quarto render for this document necessarily requires clean-and-remake for the subprojects, and this makes some things a tiny bit difficult for `make`. But this isn't a typical case for `make`: what I'm doing here is creating a makefile for this quarto document that renders this quarto document and recursively calls the makefiles for the subprojects... but at the same time this quarto document messes with the make status of the various subprojects. Not something I would do in the normal course of events, obviously. Anyway, the long and short of it is that with this makefile you have to call make twice in order to produce this as the output:\n\n```\n\n[ making subproject v1 ]\nmkdir -p ./bin\n\n[ making subproject v2 ]\nmkdir -p ./bin\n\n[ making subproject v3 ]\n\n```\n\nBasically, because this very quarto document is (on purpose!) fucking with the make status of the subprojects, calling make on this quarto post wreaks havoc on the make status of those subproject if (and only if) the top-level make file decides it needs to re-render this post. Suffice it to say this is not an ordinary use of make. Big picture? Weirdness abounds when some parts of your build are devolved to quarto (which implicitly calls make), and other parts are devolved to make (which implicitly calls quarto). Neither quarto nor make have the ability to track that kind of indirect recursion. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}