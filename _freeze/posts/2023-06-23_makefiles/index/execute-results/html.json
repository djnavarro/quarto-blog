{
  "hash": "275feb4e8c876715d98e917072126d92",
  "result": {
    "markdown": "---\ntitle: \"Makefiles. Or, the balrog, the sirens, and the submersibles\"\ndescription: \"Fly, you fools!\"\ndate: \"2023-06-23\"\nimage: img/gothmog.jpg\nimage-alt: \"Stylised art showing a balrog. The piece is called 'Gothmog at the Storming of Gondolin', and is CC-BY licenced by Tom Loback\"\nfig-cap-location: margin\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nI have a secret to confess: I have been writing code for over 20 years, and until about a month ago I have been loathe even to try descending into the depths of [Make](https://en.wikipedia.org/wiki/Make_(software)). For too long I have feared catastrophic implosion should I be reckless enough attempt to dive into these dark waters.^[I did ponder briefly the question of whether this joke is in poor taste. On the one hand, it probably is. On the other hand, I can't help but notice there's a remarkable number of people who suddenly come out of the woodwork to handwringing about the horrors of ordinary people making jokes at the expense of reckless rich people who came to a relatively painless end due to their own overwhelming hubris, while Dave Chappelle and Ricky Gervais are both out there making bank by mocking and belittling the most vulnerable people in society. Pick your battles my sweet things. Pick your battles.] Even now, as the sunlight fades and I pass below the surface into the treacherous realm below, I can hear the ominous sounds of compressive stress upon my psyche. I imagine the betentacled krakenlike beasts native to this realm congregating outside the hull.\n\nDrums, drums in the deep. \n\nBut I am here now and I cannot get out. I shall have to complete this blog post in the hope that a wizard and his merry little troupe of clueless hobbits may one day discover the tale of my tragic descent and eventual demise at the hands of build automation balrogs.\n\n<br>\n\n![This piece is called 'Gothmog at the Storming of Gondolin', and is CC-BY licenced by Tom Loback](img/gothmog.jpg){fig-alt=\"Stylised art showing a balrog.\"}\n\n<br>\n\n## Farewell to those broad, Sunlit Uplands we loved so well\n\nEvery tragic narrative begins with a fatal mistake, the hubris of the doomed making the terrible choice that sealed their fate well before the story gets underway. In this case, that mistake was deciding that now is the time to read a 1200 page book on C++. Absolutely cursed decision. There was no way I wasn't going to end up swallowed by a yawning hellmouth once that choice had been made. But -- as the saying goes -- when one descends into the abyss to be crushed by lovecraftian horrors, it's all about the journey and not the destination. \n\nHere's how the sad story unfolded. Having read through the first hundred or so pages of the C++ necronomicon (the \"fucking around\" stage), I started encountering the inevitable consequences of the fact that (a) C++ is a compiled language, and (b) I am a person who obsessively takes notes as she reads and writes her own code to accompany the notes. And so it came to pass that (in the \"finding out\" stage of this tragedy) I was barely one chapter into the book and I'd written almost 50 little baby C++ programs, every one of them a helpless monster gnashing it's tiny teeth in ravenous hunger, demanding to be compiled before it can do anything useful.\n\nOh no, my precious abominations, I said to them. I already have human children to feed and care for, I'll not fall into the trap of lovingly passing each of you individually to the compiler for nurture and sustenance with bespoke hand crafted calls to clang++. That way lies madness and chaos. No, I shall hire a metaphorical nanny/butler/build-manager to feed you and compile you when you need compiling, to politely inform me each time a little C++ demon has grown into to a new binary file, and to take care of sundry other drudgeries with which I do not wish to be burdened. I shall write a `Makefile`. \n\nAnd with that my doomed submersible slipped below the waves. \n\n## The decay of that colossal Wreck, boundless and bare\n\nAs the light fades away visions of my Ozymandian future cross my eyes. I imagine the Works that I will construct, upon which even the Mighty will gaze and despair. Hints of make targets that I will specify and the wonders that will get built with automations. \n\nBehold! \n\nHere is the `Makefile` I wrote for my side project. It's a minor incantation at best, a small spell to feed my tiresome C++ babies into the maw of clang++ whenever necessary, and renders all my boring markdown scratchings into graven html with the help of pandoc. \n\n\n::: {.cell file='examples/learning-cpp/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\ncpp := $(patsubst src/%.cpp, bin/%, $(wildcard src/*.cpp))\nnotes := $(patsubst notes/%.md, docs/%.html, $(wildcard notes/*.md))\nstatic := docs/.nojekyll docs/CNAME docs/style.css\n\nall: dirs $(cpp) $(static) $(notes)\n\ndirs:\n\t@mkdir -p ./bin\n\t@mkdir -p ./docs\n\n$(cpp): bin/%: src/%.cpp\n\t@echo \"[compiling]\" $<\n\t@clang++-15 --std=c++20 $< -o $@\n\n$(static): docs/%: static/%\n\t@echo \"[copying]\" $< \n\t@cp $< $@\n\n$(notes): docs/%.html: notes/%.md\n\t@echo \"[rendering]\" $<\n\t@pandoc $< -o $@ --template=./pandoc/template.html \\\n\t\t--standalone --mathjax --toc --toc-depth 2\n\nclean:\n\t@echo \"[deleting] docs\"\n\t@echo \"[deleting] bin\"\n\t@rm -rf docs\n\t@rm -rf bin\n\n```\n:::\n\n\nIt is not very impressive, I know. But it does work, and it does help. So perhaps I should say a little about how I got to there from here?\n\n<br>\n\n![The Ulysses mosaic at the Bardo Museum in Tunis, Tunisia (2nd century AD), depicting the temptation of Odysseus by the Sirens](img/odysseus-and-the-sirens.jpg){fig-alt=\"Mosaic depicting the temptation of Odysseus by the Sirens.\"}\n\n<br>\n\n## Love me while your wrists are bound (I'll be there when your reality drowns)\n\nIf I'm going to write something about Makefiles, I should perhaps start by acknowledging a few important truths: \n\n- I'm not an expert. Everything I know about Makefiles is from [makefiletutorial.com](https://makefiletutorial.com). This post is not going to tell you anything you cannot find in Chase Lambert's lovely tutorial. \n- There are many alternatives to Make. I've seen many projects use  [CMake](https://cmake.org/) for build automation, for example. Alternatively, if you're working in R you might prefer to use the [targets](https://docs.ropensci.org/targets/) package by Will Landau ([user manual here](https://books.ropensci.org/targets/)). There is nothing particularly special about Make per se that made me decide to learn it: it just happens to be a thing that has been around for a long time, and it was irritating me that I didn't know how to use it.\n- Like all things created by humans, it is cursed. Makefiles are indeed the Night That is Dark and Full of Terrors. The red priestesses warned us. \n\nWith that out of the way, let's begin. Reduced to its simplest form a Makefile is a collection of build **targets**, each of which is defined using syntax that looks something like this:\n\n\n::: {.cell}\n\n```{.makefile .cell-code}\ntargets: prerequisites\n\tcommand\n\tcommand\n\tcommand\n```\n:::\n\n\nIt seems simple enough. The top level command provides the name of the target, with (optionally) a set of **prerequisites** associated with that target. The prerequisites are critical: the **commands** listed below the `targets: prerequisites` line will only be executed when one or more of the prerequisites has changed. This is the mechanism by which a Makefile can be used to track the dependencies among the various files in your project.\n\nA concrete example might help to make this a little clearer:\n\n\n::: {.cell}\n\n```{.makefile .cell-code}\nbin/collatz: src/collatz.cpp\n    clang++ --std=c++20 src/collatz.cpp -o bin/collatz\n```\n:::\n\n    \n\nLet's unpack what each part of this target means: \n\n- `bin/collatz` is the name of the target, and by convention the target name is identical to the name of the file to which it refers, at least in situations where the target monitors a single output file\n- `src/collatz.cpp` is a prerequisite file. If the `src/collatz.cpp` file has been modified more recently than the `bin/collatz` file created by the compilation command underneath, then that command will be executed when `make` is called\n- The third line is a shell command. In this instance, the command takes the `src/collatz.cpp` source file and uses clang to compile it to a binary executable file `bin/collatz`. (The `--std=c++20` flag indicates that C++ version 20 should be assumed)\n    \n\nIt seems lovely, does it not? Of course it does my sweet Odysseus. You've been listening to the Sirens again, and fortunate indeed that your loved ones have tied you to the mast to prevent you from casting yourself overboard and drowning.\n\n> *\"But Danielle, this seems so simple! It is lovely, alluring and sweet. I see no sign of eldritch horrors or evil creatures lurking in the depths here\"*\n\nYou say that, so I presume that you have absolutely noticed that all those `command` lines in the code snippet above are indented with tabs and not spaces, yes? No? Those tabs are like little glass knives buried in the sand beneath your soft, bare feet. You must use tabs for indentations when you use Make, or it won't work.\n\n> *\"But Danielle, my IDE is set to automatically convert tabs to spaces! This is going to mess me up and now I have to faff about making exceptions for specific files\"*\n\nIndeed. Don't say I didn't warn you.\n\n\n## Basic Makefiles, Act I: The flickering flames of unextinguished hope\n\n*Perhaps we won't die*, we whisper to ourselves as we open a blank Makefile, and point our vessel towards Scylla and Charybdis with the kind of blind optimism that typically ends with the Coroners Court issuing a lengthy report several months later. After all, our project is so very small. We are but hobbits crossing the Brandywine river looking for mushrooms or something, surely the Willow at the heart of the Old Forest won't eat us? \n\nSorry. Got a little distracted there, didn't I? Getting back on track now. When your project is very small, it isn't hard to write a basic Makefile. Again, it helps to use concrete examples. Let us imagine a project that has this structure: \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nIn this happy Narnia -- which absolutely will never turn into a Fillory because happy endings are real, and life really truly is more than one barely-sublimated trauma after another -- we have a very easy thing to work with. In the `src` folder we have three .cpp files that each correspond to a small C++ program that needs to be compiled. \n\nBeing the sort of person who likes to separate inputs from outputs, we decide that the executable binary files should all be stored in a `bin` folder. Being also the cautious sort of person who understands the difference between inputs and outputs, our project has a `.gitignore` file that ensures that nothing we write to `bin` is placed under version control. \n\nWe also have a a file called `Makefile`,^[Traditionally a Makefile is simply named `Makefile` or `makefile`. It doesn't have to be, but if you call it something else you need to explicitly tell `make` where to find the file using the `-f` flag. A command like `make -f my_make_file`, for example, specifies that the Makefile is called `my_make_file`.] whose contents are as follows:\n\n\n::: {.cell file='examples/version1/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\n# the \"all\" target is a set of other targets\nall: dir bin/collatz bin/species bin/swap\n\n# the \"dir\" target creates a directory for the binaries\ndir:\n\tmkdir -p ./bin\n\n# the \"bin/collatz\" target compiles the collatz.cpp program\nbin/collatz: src/collatz.cpp\n\tclang++ --std=c++20 src/collatz.cpp -o bin/collatz\n\n# the \"bin/species\" target compiles the species.cpp program\nbin/species: src/species.cpp\n\tclang++ --std=c++20 src/species.cpp -o bin/species\n\n# the \"bin/swap\" target compiles the swap.cpp program\nbin/swap: src/swap.cpp\n\tclang++ --std=c++20 src/swap.cpp -o bin/swap\n\n# the \"clean\" target deletes all binary files\nclean:\n\trm -rf bin\n```\n:::\n\n\nThe central part of the Makefile is familiar. We're taking the \"compile a C++ source file\" recipe that I previously used as an example of makefile target, and repeating it three times over. It's so utterly dull that it actually reads better if we strip the comments:\n\n\n::: {.cell}\n\n```{.makefile .cell-code}\nbin/collatz: src/collatz.cpp\n\tclang++ --std=c++20 src/collatz.cpp -o bin/collatz\n\nbin/species: src/species.cpp\n\tclang++ --std=c++20 src/species.cpp -o bin/species\n\nbin/swap: src/swap.cpp\n\tclang++ --std=c++20 src/swap.cpp -o bin/swap\n```\n:::\n\n\nIt's repetitive, but for this toy project it works. If we want this project to build, we require that all three of these C++ source files be compiled to binaries.\n\nSisyphus should be so lucky.\n\nThe nature of make targets is that you can call them by name. In the snippet above I have three targets. To build each of these I could type this mind-meltingly tedious sequence of commands at the terminal:\n\n``` bash\nmake bin/collatz\nmake bin/species\nmake bin/swap\n```\n\nIt works fine when there are only a few targets, but becomes extremely painful once there are dozens of them. Life is short, and this is not the kind of masochism I enjoy. Building each target individually is simply not on my to-do list. Not now, not as Valyria sinks into its Doom, and not as Rome is burning. My fiddling time is preserved for something better than this, my babes. \n\nTo accommodate the need of the dead things like myself, `make` makes it possible to group multiple targets together:\n\n``` Makefile\nall: dir bin/collatz bin/species bin/swap\n```\n\nThis is very helpful. Instead of typing this to make all four targets...\n\n``` bash\nmake dir\nmake bin/collatz\nmake bin/species\nmake bin/swap\n```\n\n...I can now type this and get the same result:\n\n``` bash\nmake all\n```\n\nIn fact, even this can be shortened, because \"all\" happens to be the first target listed in the Makefile. If you don't specify a target to build, `make` will use the first target in the file. It is conventional, then, to call the first target \"all\", and have that target consist of a list of all the *other* targets needed to build the whole project. Consequently, I can do this:^[Admittedly, this implicitly assumes that I'm executing the `make` command from the same directory as the `Makefile` itself. That creates some awkwardness for this blog post because the quarto file is not in the same folder as the Makefile. So when you look at the source code for this post you'll see I'm doing something slightly different. But let's put those particular nightmares on layby shall we? Instead, let's see what horrors escape from the particular Pandora's box that happens to sit before us.]\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n\nHere's what we get as output...\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n```\n:::\n:::\n\n\n...and our project now contains the binary files:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n├── bin\n│   ├── collatz\n│   ├── species\n│   └── swap\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nNice. \n\nSo, okay. This is the explanation of lines 1-19 of our Makefile. What's going on in lines 20-22? \n\nI'm so glad you asked. \n\nWhat happens if you want to burn it all down and revert to the initial (unbuilt) state of the project? `make` doesn't provide that functionality automatically, but it is traditional for writers of Makefiles to include a target called `clean` that includes commands that will perform this clean up job for you.^[Don't include \"clean\" in the list of \"all\" targets, obviously: that would defeat the point entirely.] That's generally a good thing to do, and for this project the cleanup process is very simple. All we have to do delete the `bin` folder and everything in it, so that's what our \"clean\" target does. \n\nBecause we have this target in the Makefile, all we have to do is type `make clean`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake clean\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nrm -rf bin\n```\n:::\n:::\n\n\nAnd just like that, we are back to the clean (unbuilt) state for our project:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version1\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nOur submersible is sliding into the depths, all signs are nominal, and they are greeting us with roses. Nothing could possibly go wrong. \n\n## Basic Makefiles, Act II: The seeping sense of silent dread in your bones\n\n\n::: {.cell}\n\n:::\n\n\nIn the Makefile I used in the last section, I created a separate target for every file, and wrote the code manually for every one of them. It's a little repetitive, but when you only have a handful of files that need to be processed (... regardless of whether \"processing\" means compiling a source file, rendering a markdown document, or anything else), it's not too onerous. However, it's very common for a project to grow much too large for this to be ideal. For example, here's the filetree for the side-project (including source files and output files) that motivated me to learn how to write Makefiles in the first place:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/learning-cpp\n├── .gitignore\n├── LICENSE.md\n├── Makefile\n├── README.md\n├── bin\n│   ├── add-with-logging\n│   ├── add-with-overloading\n│   ├── append-c-strings\n│   ├── array-danielle\n│   ├── array-iterator\n│   ├── beta-sample\n│   ├── beta-sample-2\n│   ├── char-code\n│   ├── circles\n│   ├── collatz\n│   ├── employee\n│   ├── enumerated-types\n│   ├── extended-raw-string-literal\n│   ├── file-extension\n│   ├── file-extension-2\n│   ├── gender-switch\n│   ├── gender-switch-2\n│   ├── helloworld\n│   ├── helloworld-using\n│   ├── immovable-reference\n│   ├── mean-value\n│   ├── na-na-hey-hey\n│   ├── pass-by-reference-to-const\n│   ├── pointer-free-store\n│   ├── pointer-stack\n│   ├── poisson-conditional\n│   ├── poisson-initialised-conditional\n│   ├── poisson-sample\n│   ├── raw-string-literal\n│   ├── scope-resolution\n│   ├── simple-reference\n│   ├── simple-string\n│   ├── species-first-pass\n│   ├── stoi\n│   ├── string-class-examples\n│   ├── string-class-handy\n│   ├── string-class-logical\n│   ├── string-escapes\n│   ├── string-to-numeric\n│   ├── string-vectors\n│   ├── structured-binding\n│   ├── structured-binding-asl\n│   ├── swap\n│   ├── try-catch\n│   ├── typecasting\n│   └── validation-check\n├── docs\n│   ├── .nojekyll\n│   ├── CNAME\n│   └── style.css\n├── notes\n│   ├── chapter-01.md\n│   ├── chapter-02.md\n│   ├── chapter-03.md\n│   ├── chapter-04.md\n│   └── index.md\n├── pandoc\n│   ├── README.md\n│   └── template.html\n├── src\n│   ├── add-with-logging.cpp\n│   ├── add-with-overloading.cpp\n│   ├── append-c-strings.cpp\n│   ├── array-danielle.cpp\n│   ├── array-iterator.cpp\n│   ├── beta-sample-2.cpp\n│   ├── beta-sample.cpp\n│   ├── char-code.cpp\n│   ├── circles.cpp\n│   ├── collatz.cpp\n│   ├── employee.cpp\n│   ├── employee.h\n│   ├── enumerated-types.cpp\n│   ├── extended-raw-string-literal.cpp\n│   ├── file-extension-2.cpp\n│   ├── file-extension.cpp\n│   ├── gender-switch-2.cpp\n│   ├── gender-switch.cpp\n│   ├── helloworld-using.cpp\n│   ├── helloworld.cpp\n│   ├── immovable-reference.cpp\n│   ├── mean-value.cpp\n│   ├── na-na-hey-hey.cpp\n│   ├── pass-by-reference-to-const.cpp\n│   ├── pointer-free-store.cpp\n│   ├── pointer-stack.cpp\n│   ├── poisson-conditional.cpp\n│   ├── poisson-initialised-conditional.cpp\n│   ├── poisson-sample.cpp\n│   ├── raw-string-literal.cpp\n│   ├── scope-resolution.cpp\n│   ├── simple-reference.cpp\n│   ├── simple-string.cpp\n│   ├── species-first-pass.cpp\n│   ├── stoi.cpp\n│   ├── string-class-examples.cpp\n│   ├── string-class-handy.cpp\n│   ├── string-class-logical.cpp\n│   ├── string-escapes.cpp\n│   ├── string-to-numeric.cpp\n│   ├── string-vectors.cpp\n│   ├── structured-binding-asl.cpp\n│   ├── structured-binding.cpp\n│   ├── swap.cpp\n│   ├── try-catch.cpp\n│   ├── typecasting.cpp\n│   └── validation-check.cpp\n└── static\n    ├── .nojekyll\n    ├── CNAME\n    └── style.css\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nIt's not a huge project by any stretch of the imagination, but it's big enough to illustrate the point. If I had to write a separate target telling `make` how to process each of these files I'd quickly lose my mind. Not only that, it would be difficult to maintain if -- for example -- I needed to change the command used to compile the C++ source files. \n\nIn practice, then, we want to write Makefiles that use pattern matching to process every file that matches that pattern. For instance, in the \"learning-cpp\" project shown above, one such rule might be something like \"compile every .cpp file in the `src` folder to a binary file of the same name in the `bin` folder\". Conveniently, that's exactly the same problem we needed to solve for the toy example. So let's revisit it. As before, our project has the following source files:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version2\n├── .gitignore\n├── Makefile\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n\nHowever, our Makefile this time around is a little different:\n\n\n::: {.cell file='examples/version2/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\n# lists of filenames\nsrc_files := $(wildcard src/*.cpp)\nbin_files := $(patsubst src/%.cpp, bin/%, $(src_files))\n\n# the \"all\" target is much simpler now\nall: dir $(bin_files)\n\ndir:\n\tmkdir -p ./bin\n\n# each C++ binary is a target, the source is its prerequisite\n$(bin_files): bin/%: src/%.cpp\n\tclang++ --std=c++20 $< -o $@\n\nclean:\n\trm -rf bin\n```\n:::\n\n\nLet's go through this line by line. First, we can use wildcard matching to find all files in the `src` folder that end with the `.cpp` file extension:\n\n``` Makefile\nsrc_files := $(wildcard src/*.cpp)\n```\n\nIt may not be immediately apparent to -- oh, say, humans -- but this is in fact a function call. The name of the function is `wildcard`, the `$( )` syntax with the function name inside the parentheses is the way you call functions in `make`,^[Oh yes, `make` uses infix notation for functions. Of course it does, for the same reason that it mandates tab indentation... because `make` is the very quintessence of evil design. It's useful enough to weasel its way into your projects, at which point it then slowly drives you toward the pit of despair by making design choices that seem chosen deliberately to make you feel like an idiot. Case in point, you can use `${ }` instead of `$( )` to call a function if you like. Because why not?] and `src/*.cpp` is the argument passed to the function. \n\nIt may also not be obvious upon first inspection -- because again, why would it be? -- why I've used `:=` instead of `=` in my assignment statement. The goal here is to create a new variable called `src_files` that contains the names of the various source files, that much is clear. But why use `:=`, exactly? The answer, of course, is that `make` supports several different kinds of assignment operators, and confusingly enough `=` is *not* the operator for \"simple\" assignment:\n\n- Use `:=` if you want \"simple assignment\": the assignment happens once and only once, the first time the assignment statement is encountered\n- Use `=` if you want \"recursive assignment\": the assignment is reevaluated every time the value of the right hand side changes (e.g., in this example, if a later make target changes the list of source files in the `src` folder, the value of `src_files` changes too)\n- Use `?=` if you want \"conditional assignment\": the assignment only happens if the variable doesn't already have a value (sure, normal humans would use an if-statement for this, but as we all know keystrokes are a precious resource and must be conserved; preserving human sanity is of course a much less important goal)\n- Use `+=` if you want the value of the right hand side to be added to the variable rather than replacing its existing value. \n\nIt sure doesn't seem like I should have had to write a small manuscript simply to explain one very modest line of code, but such is the nature of `make`.\n\nIn any case, the thing that matters here is we've scanned the `src` folder and created a variable called `src_files` that lists all the C++ source code files in that folder. In other words, `src_files` is now a synonym for this:\n\n```\nsrc/collatz.cpp src/species.cpp src/swap.cpp\n```\n\nThis will now form the basis by which we construct a list of build targets. Because our project is very simple and has a nice one-to-one mapping between source files and output files, what we really want to construct now is a variable that contains a list of build targets like this:\n\n```\nbin/collatz bin/species bin/swap\n```\n\nIf we could be assured that the binary files always exist, we could use the same trick to list all binaries in the `bin` folder. But because those might not exist (e.g., if we delete the binaries when calling `make clean`), we can't be assured of that. So instead, we'll use the `patsubst` function to do a pattern substitution: we'll take the `src_files` variable as input, strip the `.cpp` extension from the files, and replace `src` with `bin`. Here's what that looks like:\n\n``` Makefile\nbin_files := $(patsubst src/%.cpp, bin/%, $(src_files))\n```\n\nThe `patsubst` function takes three arguments, and -- of course -- they are specified in a weird order. The data argument appears in the third position, because again... why not? The pattern to which we match the data appears in the first position, and the replacement pattern appears in the second position.^[The fact that this happens to be the same batshit argument ordering used in the base R `gsub()` function makes me suspect that there is some historical reason for this that involves being lectured about grep for about an hour. Anyway there's a reason why almost everyone who uses R in real world vastly prefers the stringr pattern matching API over the base R API. But I digress.] Anyway, the point here is that what this function call does is as follows: it takes all the filenames in `src_files`, matches them against `src/%.cpp` to find the \"stem\" (e.g., the stem for `src/collatz.cpp` is the part that matches the `%` operator, i.e., `collatz`), and then uses the replacement pattern `bin/%` to construct output values from the stems (e.g., `collatz` is transformed to `bin/collatz`). And so we end up with a variable `bin_files` that contains the list of target files we want to build:\n\n```\nbin/collatz bin/species bin/swap\n```\n\nNow that we have this, we can define the \"all\" target using this variable, as follows:\n\n``` Makefile\nall: dir $(bin_files)\n```\n\nFrom the `make` perspective this is equivalent to:\n\n``` Makefile\nall: dir bin/collatz bin/species bin/swap\n```\n\nOr, to put it another way, by using the `bin_files` variable, we can programmatically ensure that the \"all\" target includes a target for every binary file that needs to be compiled. \n\nHaving defined a list of targets programmatically, our next^[I'm skipping over the `dir` target on lines 8 and 9, because the code here is the same as it was in the original version. It's very boring: it just makes sure that a `bin` folder exists.] task is to write a **static pattern rule** that programmatically defines the targets themselves. Specifically, for every target listed in `bin_files`, we want (1) to assert that it relies on the corresponding source file as a prerequisite, and (2) to specify a build action that compiles the binary from the corresponding source.\n\nHere's some code that does this:\n\n``` Makefile\n$(bin_files): bin/%: src/%.cpp\n\tclang++ --std=c++20 $< -o $@\n```\n\nThe underlying syntax here is as follows:\n\n``` Makefile\ntargets: target-pattern: prerequisites-patterns\n    commands\n```\n\nFor our example, the `bin_files` variable contains the list of targets specified by the pattern rule. The `bin/%` part (the target pattern) and the `src/%.cpp` part (the prerequisites pattern) are used for pattern substitution purposes. It's essentially the same task that we saw when I called `patsubst` using these patterns earlier: in the previous example I used them to construct the name of a binary file from the corresponding source file, this time I'm going the other direction and constructing the name of the source file (to use as a rerequisite) from the binary file (which is used as the target).\n\nOkay, now let's turn to the second line of the code snippet. In the orginal version of the code I wrote targets like this:\n\n``` Makefile\nbin/collatz: src/collatz.cpp\n\tclang++ --std=c++20 src/collatz.cpp -o bin/collatz\n```\n\nBut in the static pattern rule version I've used `$<` to refer to the prerequisite file (e.g., the source file `src/collatz.cpp`) and `$@` to refer to the file name of the target (e.g., the binary file `bin/collatz`). These are both examples of [automatic variables](https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html) in `make`. There are quite a lot of these: `$@`, `$%`, `$<`, `$?`, `$^`, `$+`, `$|`, `$*`. Some of these have \"D\" and \"F\" variants that specifically refer to directory paths or filenames: `$(@D)` and `$(@F)` are variations on `$@`, `$(*D)` and `$(*F)` are variants of `$*` and so on. If you desperately want to learn all these details the linked page explains them all. For our purposes it's enough to note that in the example above, I've used `$<` to refer to the source file and `$@` to refer to the output file. \n\nRight. After all that as explanatory background we can run `make`, and happily see that the results are indeed the same as before:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n```\n:::\n:::\n\n\nAnd now that we've built the project we see that the filetree now contains the binaries:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n./examples/version2\n├── .gitignore\n├── Makefile\n├── bin\n│   ├── collatz\n│   ├── species\n│   └── swap\n└── src\n    ├── collatz.cpp\n    ├── species.cpp\n    └── swap.cpp\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Basic Makefiles Act III: When you paper over cracks in the walls you can still see the unseelie beasts writhing within \n\nThe last step in putting together a Makefile for our toy project is some tidying. It was convenient for expository purposes to create the list of targets as a two-step process, so that I could talk about the `wildcard` function before introducing the `patsubst` function:\n\n``` Makefile\nsrc_files := $(wildcard src/*.cpp)\nbin_files := $(patsubst src/%.cpp, bin/%, $(src_files))\n```\n\nBut realistically this doesn't need to be two lines, so I'll shorten it to a single line that generates the list of compilation targets:\n\n``` Makefile\ncompile := $(patsubst src/%.cpp, bin/%, $(wildcard src/*.cpp))\n```\n\nI'm also going to preface all my commands with the `@` symbol, which prevents them from being printed to the terminal whenever `make` is called. In place of the automatic printinc, I'll use `echo` to write my own, more human-friendly output lines. So now my Makefile looks like this:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell file='examples/version3/Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\ncompile := $(patsubst src/%.cpp, bin/%, $(wildcard src/*.cpp))\n\nall: dir $(compile)\n\ndir:\n\t@mkdir -p ./bin\n\n$(compile): bin/%: src/%.cpp\n\t@echo \"compiling\" $< \"to\" $@\n\t@clang++ --std=c++20 $< -o $@\n\nclean:\n\t@echo \"deleting binary files\"\n\t@rm -rf bin\n```\n:::\n\n\nLet's have a look at what happens when we call `make` using this version of the Makefile. The same files are compiled, but the printed messages are prettier:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmake\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\ncompiling src/collatz.cpp to bin/collatz\ncompiling src/species.cpp to bin/species\ncompiling src/swap.cpp to bin/swap\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nMuch nicer.\n\n## Death of the Authoress: Recursion is the exsanguination of hope\n\nAt this point, this post has covered all the tricks that I'm using in the Makefile for my C++ side project. What this post hasn't yet covered, though, are some of the tricks that I needed to use for... um... this post. This quarto blog post is a project, and it has a Makefile. But the folder that contains all the source for this blog post *also* contains source files for all the sub-projects that I've used as the examples... and each of those has its own Makefile.\n\nThis leads to some awkwardness and some recursion, in which `make` has to call `make` in order to build the blog post as a whole. In order to do so without creating a mess, it's important to use the `$(MAKE)` variable within the top-level Makefile rather than literally using the `make` command. To illustrate, the point let's take a look at the Makefile I use to build this post:\n\n\n[Calling make recursively](https://www.gnu.org/software/make/manual/make.html#Recursion)\n\n\n::: {.cell file='Makefile'}\n\n```{.makefile .cell-code  code-line-numbers=\"true\"}\npost := 2023-06-23_makefiles\nhtml := ../../_site/posts/$(post)/index.html\nexamples = version1 version2 version3\n\n# explicitly state that these targets aren't file names\n.PHONY: all clean\n.PHONY: $(patsubst %, build_%, $(examples))\n.PHONY: $(patsubst %, clean_%, $(examples))\n\nall: $(patsubst %, build_%, $(examples)) $(html)\n\n$(patsubst %, build_%, $(examples)): build_%: examples/%\n\t@echo \"------------ building\" $< \"------------\"\n\t@$(MAKE) -C $< --no-print-directory\n\n$(html): index.qmd\n\t@echo \"------------ rendering quarto ------------\"\n\t@echo \"rendering\" $@\n\t@quarto render $< --quiet\n\n$(patsubst %, clean_%, $(examples)): clean_%: examples/%\n\t@$(MAKE) clean -C $< --no-print-directory\n\nclean_quarto: \n\t@rm -rf ../../_site/posts/$(post)\n\t@rm -rf ../../_freeze/posts/$(post)\n\nclean: $(patsubst %, clean_%, $(examples)) clean_quarto\n```\n:::\n\n\nThere are some new tricks in play here. First notice the use of `.PHONY` to declare explicitly that many of my targets aren't in fact the names of real files, and are merely labels for recipes. I've been lazy about that up till now.^[The `.ALLCAPS` thing going on here tells us that `.PHONY` is one of the [special built-in target names](https://www.gnu.org/software/make/manual/html_node/Special-Targets.html) that have particular meaning in `make`.]\n\nHere's what I get as output when I `make` this post:\n\n```\n------------ building examples/version1 ------------\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n------------ building examples/version2 ------------\nmkdir -p ./bin\nclang++ --std=c++20 src/collatz.cpp -o bin/collatz\nclang++ --std=c++20 src/species.cpp -o bin/species\nclang++ --std=c++20 src/swap.cpp -o bin/swap\n------------ building examples/version3 ------------\ncompiling src/collatz.cpp to bin/collatz\ncompiling src/species.cpp to bin/species\ncompiling src/swap.cpp to bin/swap\n------------ rendering quarto ------------\nrendering ../../_site/posts/2023-06-23_makefiles/index.html\n```\n\nEach of the example projects gets built, with a pretty header line to explain which project is building at each step of the process, and then finally the quarto document is rendered also. Somewhat awkwardly though, there's some indirect recursion going on also: the quarto document calls `make` several times internally in order to generate much of the output shown in this post. It doesn't actually break anything, but it does mean it's a little harder for `make` to infer when one of the submakes is out of date. Indirect recursion is a strange beast at the best of times, but fortunately it doesn't cause a lot of problems in this case.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}