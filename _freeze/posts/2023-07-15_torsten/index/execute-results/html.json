{
  "hash": "701bb5b2c80e431487e996cf2cd63d92",
  "result": {
    "markdown": "---\ntitle: \"Getting started with Torsten\"\ndescription: \"Another small step along the path to Bayesian pharmacometrics\"\ncategories: [\"R\", \"Stan\", \"Torsten\", \"Pharmacometrics\"]\ndate: \"2023-07-15\"\nimage: torsten-crop.png\nimage-alt: \"Hand-drawn scientific diagram from 1937 showing 'blood circulation', 'tissue boundaries', and adding pharamacometric notation\" \n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\n[Torsten](https://metrumresearchgroup.github.io/Torsten/) is essentially a forked copy of [Stan](https://mc-stan.org/) that has a collection of functions added that can be useful in pharmacometric analyses. As described by [Elmokadem et al (2023)](https://doi.org/10.1002/psp4.12926): \n\n> Torsten is a library of Stan functions built to facilitate analysis of pharmacometric data ... [It] contains functions to build specific linear compartmental models as one and two-compartment models with first-order absorption into the central compartment, general linear models that can be expressed as a system of linear ordinary differential equations (ODEs), general compartmental models that can be expressed as a system of ODEs.\n\nThe name \"Torsten\" refers to Torsten Teorell, described as the [father of pharmacokinetics](https://doi.org/10.3109/03009739509178895). The preview image of this post is taken from the figures in a 1937 paper by Teorell:\n\n![](torsten-figs.png)\n\nI do like knowing where the names of things come from, and the history to different disciplines. But to be fair that's not the purpose of this post, so let's set the history to one side and take a look at the software. The website is quite clear that Torsten is currently (as of version 0.89rc) a prototype:\n\n> WARNING: The current version of Torsten is a prototype. It is being released for review and comment, and to support limited research applications. It has not been rigorously tested and should not be used for critical applications without further testing or cross-checking by comparison with other methods. We encourage interested users to try Torsten out and are happy to assist. Please report issues, bugs, and feature requests on our GitHub page.\n\nThe help documentation is a little sparse, but no moreso than one would expect for prototype software that is still in early development.\n\n## Installation\n\nInstalling Torsten starts by cloning the [GitHub repository](https://github.com/metrumresearchgroup/Torsten)\n\n``` bash\ncd ~/GitHub\ngh repo clone metrumresearchgroup/Torsten\n```\n\nIf you don't have the cmdstanr package, you need to install it first. The cmdstanr package isn't on CRAN but you can install it by adding the Stan repository to the `repos` path when calling `remotes::install_cran()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_cran(\n    pkgs = \"cmdstanr\", \n    repos = c(\n        \"https://mc-stan.org/r-packages/\", \n        getOption(\"repos\")\n    )\n)\n```\n:::\n\n\nNext, you need to make sure that cmdstanr uses the Torsten version of Stan, and not any other version of Stan that you might have installed on your system. This is important because Torsten supplies various functions that we'll need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntorsten <- \"~/GitHub/Torsten\"\ncmdstanr::set_cmdstan_path(fs::path(torsten, \"cmdstan\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCmdStan path set to: /home/danielle/GitHub/Torsten/cmdstan\n```\n:::\n:::\n\n\nIf you already have C++ compilers set up on your machine (which I do) then you probably don't need to do anything special to make sure that everything compiles properly, but just to be safe we'll check that the toolchain is set up correctly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncmdstanr::check_cmdstan_toolchain()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThe C++ toolchain required for CmdStan is setup properly!\n```\n:::\n:::\n\n\nExcellent. Now comes the acid test: let's see if we can use Torsten to build and sample from a Stan model that specifically requires Torsten. I'm following the [instructions on the installation page](https://metrumresearchgroup.github.io/Torsten/installation/#testing) here, more or less. But I'm going to walk you through the process a little more slowly than those instructions do. \n\nThe first step here is to compile the stan model. The very first time you do this, it can take a moderately long time because two things are happening: \n\n- First, the compiler need to compile the modified copy of Stan that Torsten ships with. That takes a while, but fortunately it only has to be done once.\n- Second, the compiler needs to compile the \"pk2cpt\" model itself. This is fairly fast. This compilation step only happens when the model binary is out of date. \n\nFortunately for me I've already done this step once before and I have both binaries compiled already, so the results on my system look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_dir <- fs::path(torsten, \"example-models\", \"pk2cpt\")\nmodel_src <- fs::path(model_dir, \"pk2cpt.stan\")\nmodel <- cmdstanr::cmdstan_model(model_src)\n```\n:::\n\n\nThe key thing to note here us that the \"pk2cpt.stan\" source code relies on Torsten-specific functions that don't exist in vanilla Stan. It won't work if you're not using the Torsten version of Stan. The mere fact that it compiles is itself telling us that it's all configured correctly. \n\nSo now we fit the model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_fit <- model$sample(\n    data = fs::path(model_dir, \"pk2cpt.data.R\"),\n    init = fs::path(model_dir, \"pk2cpt.init.R\"),\n    seed = 123,\n    chains = 4,\n    parallel_chains = 2,\n    refresh = 500,\n    show_messages = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 chains, at most 2 in parallel...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 7.4 seconds.\nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 finished in 7.4 seconds.\nChain 4 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 4 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 4 finished in 6.7 seconds.\nChain 3 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 3 finished in 7.2 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 7.2 seconds.\nTotal execution time: 14.8 seconds.\n```\n:::\n:::\n\n\nWhen doing this interactively, you should set `show_messages = TRUE` so that you can see the \"informational messages\". As I'm coming to learn, it's grossly typical of ODE models that you get a few warning messages during the early stages of warmup. But Stan messages tend to be quite good, and in this case they're quite helpful in reassuring us that there's not a problem in this instance (they occur early while the MCMC sampler is in a very weird part of the space and then disappear). I've suppressed them here because they make the quarto blog output messier than it needs to be. All good. \n\nTo draw a pretty picture showing the posterior distribution of the clearance rate parameter for this model (CL), we can do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_cran(\"bayesplot\")\nbayesplot::mcmc_dens_overlay(model_fit$draws(\"CL\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/prettiness-pk2cpt-model-1.png){width=672}\n:::\n:::\n\n\nThat looks right. Torsten is configured correctly, the model compiles, the sampler works, and the posterior distributions plotted here mirror the ones that are secretly tucked away in an output file here:\n\n```\n[path-to-torsten]/example-models/pk2cpt/deliv/figure/density/pdf\n```\n\nWe are good to go!\n\n## What did we just do?\n\n### The data\n\n\nThe data, organised into a NONMEM-style [event schedule](https://metrumresearchgroup.github.io/Torsten/function/events/):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"example1/pk2cpt_data.R\")\npk2cpt_data <- tibble::tibble(\n    cmt = cmt,\n    evid = evid,\n    addl = addl,\n    ss = ss,\n    amt = amt, \n    time = time,\n    rate = rate,\n    ii = ii,\n    dv = NA\n)\npk2cpt_data$dv[iObs] <- cObs\npk2cpt_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 54 Ã— 9\n     cmt  evid  addl    ss   amt  time  rate    ii    dv\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1     1     1    14     0 80000 0         0    12   NA \n 2     2     0     0     0     0 0.083     0     0  359.\n 3     2     0     0     0     0 0.167     0     0  663.\n 4     2     0     0     0     0 0.25      0     0 1106.\n 5     2     0     0     0     0 0.5       0     0 1185.\n 6     2     0     0     0     0 0.75      0     0 1802.\n 7     2     0     0     0     0 1         0     0 2296.\n 8     2     0     0     0     0 1.5       0     0 2008.\n 9     2     0     0     0     0 2         0     0 2001.\n10     2     0     0     0     0 3         0     0 1115.\n# â„¹ 44 more rows\n```\n:::\n:::\n\n\nPicture:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npk2cpt_data |>\n    dplyr::filter(evid == 0) |>\n    ggplot2::ggplot(ggplot2::aes(time, dv)) +\n    ggplot2::geom_vline(\n        xintercept = (0:14) * 12,\n        color = \"grey50\",\n        linetype = \"dotted\"\n    ) +\n    ggplot2::geom_path() + \n    ggplot2::geom_point() +\n    ggplot2::scale_y_continuous(breaks = (0:3) * 1000) +\n    ggplot2::labs(x = \"Time\", y = \"Concentration\") +\n    ggplot2::theme(panel.grid = ggplot2::element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/pk2cpt-plot-1.png){width=672}\n:::\n:::\n\n\n\n### The model\n\nLet's take a look at the source code for the Torsten/Stan model that I fit in the last section. For the sake of my sanity I'm not going to use the actual .stan file that Torsten distributes. In the original version there's no explanation of what the parameters mean or what the data variables are. \n\nI'm about 99% certain that the reason for this is that among pharmacometricians it is \"understood\" that everyone already knows the notational specifications used in [NONMEM](https://en.wikipedia.org/wiki/NONMEM), and consequently nobody bothers to say what those terms mean. To be honest I find it a little frustrating. If you want new users to consider Torsten as a viable modelling tool for pharmacometrics, I think it's a bad idea to make it a *prerequisite* that new users already know NONMEM. But as I am Queen only of this blog and not of statistics generally, and my guess is that the primary target audience for Torsten are pharmacometricians who have already used NONMEM for many years, I'll restrict myself to mild grumbling and simply fix the comments so that the \"hidden curriculum\" aspect to all this is no longer quite so hidden. Nevertheless, given that the vast majority of my readership belong to the 99.99% of statisticians and data scientists who aren't professional pharamacometricians,^[Number obviously fictitious but probably in the right ballpark.] I've added a lot more annotation to my version of the file:\n\n\n::: {.cell .column-body-outset filename='pk2cpt.stan' file='example1/pk2cpt.stan' output.var='pk2cpt'}\n\n```{.stan .cell-code  code-line-numbers=\"true\"}\n// Two compartment model using Torsten analytical solver \n\ndata{\n  int<lower = 1> nt;                // number of events\n  int<lower = 1> nObs;              // number of observations\n  array[nObs] int<lower = 1> iObs;  // indices of observation events\n  \n  // NONMEM data\n  array[nt] int<lower = 1> cmt; // compartment number\n  array[nt] int evid;           // event id (0=observation, 1=dose, 2=other)\n  array[nt] int addl;           // number of additional identical doses given\n  array[nt] int ss;             // is it steady-state dosing? (0=false, 1=true)\n  array[nt] real amt;           // dose amount administered at this time\n  array[nt] real time;          // time of observation/administration \n  array[nt] real rate;          // rate of drug infusion (0 for bolus administration)\n  array[nt] real ii;            // interdose interval: time between additional doses \n  \n  vector<lower = 0>[nObs] cObs;  // observed concentration (the dv)\n}\n\ntransformed data{\n  vector[nObs] logCObs = log(cObs);\n  int nTheta = 5;  // number of ODE parameters describing the pharmacokinetic function\n  int nCmt = 3;    // number of compartments in model (1=gut, 2=central, 3=peripheral)\n}\n\nparameters{\n  real<lower = 0> CL;    // clearance rate from central compartment\n  real<lower = 0> Q;     // intercompartmental clearance rate\n  real<lower = 0> V1;    // volume of distribution, central compartment\n  real<lower = 0> V2;    // volume of distribution, peripheral compartment\n  real<lower = 0> ka;    // absorption rate constant from gut to central \n  real<lower = 0> sigma; // standard deviation of measurement error on log-scale\n}\n\ntransformed parameters{\n  array[nTheta] real theta;        // parameters of the pharmacokinetic function\n  matrix<lower = 0>[nCmt, nt] x;   // drug amounts in each compartment over time\n\n  // predicted drug concentrations in the central compartment\n  row_vector<lower = 0>[nt] cHat;  // row vector, one element per event\n  vector<lower = 0>[nObs] cHatObs; // column vector, one element per *observation*\n\n  // bundle pharmacokinetic parameters into a vector\n  theta[1] = CL;\n  theta[2] = Q;\n  theta[3] = V1;\n  theta[4] = V2;\n  theta[5] = ka;\n\n  // compute the pharmacokinetic function (drug amounts in all compartments)\n  x = pmx_solve_twocpt(time, amt, rate, ii, evid, cmt, addl, ss, theta);\n\n  cHat = x[2, :] ./ V1;  // compute drug concentrations in central compartment\n  cHatObs = cHat'[iObs]; // transform to column vector & keep relevant cells only\n}\n\nmodel{\n  // informative prior\n  CL ~ lognormal(log(10), 0.25);\n  Q ~ lognormal(log(15), 0.5);\n  V1 ~ lognormal(log(35), 0.25);\n  V2 ~ lognormal(log(105), 0.5);\n  ka ~ lognormal(log(2.5), 1);\n  sigma ~ cauchy(0, 1);\n\n  // measurement errors are log-normally distributed\n  logCObs ~ normal(log(cHatObs), sigma);\n}\n\ngenerated quantities{\n  array[nObs] real cObsPred; // simulated observations\n  for(i in 1:nObs) {\n    cObsPred[i] = exp(normal_rng(log(cHatObs[i]), sigma));\n  }\n}\n```\n:::\n\n\nEven with the additional commenting, it's still a little impenetrable unless you're a pharmacometric insider, because the pharmacokinetic model is not represented anywhere in this Stan code. It's simply understood that this is a two-compartment model by virtue of the fact that the `pmx_solve_twocpt()` function is called, and all the details of what that *means* have been rendered invisible in the process. \n\nThat's not wrong from the Torsten perspective -- and probably necessary -- but at the same time it makes the code difficult to follow for anyone who isn't a pharmacometrician. So let's make it a bit more explicit, yes? What precisely is the ODE system solved by the `pmx_solve_twocpt()` function? Fortunately, the actual ODEs are described by [Margossian et al (2022)](https://doi.org/10.1002/psp4.12812) and are in fact the same ones I used in a previous post. \n\nI'll reproduce the ODEs here in exactly the same form as they are presented by Margossian et al:^[The same ODE system appears in the [Torsten documentation for the two-compartment model](https://metrumresearchgroup.github.io/Torsten/function/two-cpt/), using $y$ in place of $u$ and $y^\\prime$ in place of $d/dt u$.]\n\n$$\n\\begin{array}{rcl} \n\\displaystyle\\frac{du_{\\mbox{gut}}}{dt} & = & -k_a u_{\\mbox{gut}} \\\\ \\\\ \n\\displaystyle\\frac{du_{\\mbox{cent}}}{dt} & = & k_a u_{\\mbox{gut}} - \\left( \\displaystyle\\frac{\\mbox{CL}}{V_{\\mbox{cent}}} + \\displaystyle\\frac{Q}{V_\\mbox{cent}} \\right) u_{\\mbox{cent}} + \\displaystyle\\frac{Q}{V_{\\mbox{peri}}} u_{\\mbox{peri}} \\\\ \\\\\n\\displaystyle\\frac{du_{\\mbox{peri}}}{dt} & = & \\displaystyle\\frac{Q}{V_\\mbox{cent}} u_{\\mbox{cent}} - \\displaystyle\\frac{Q}{V_{\\mbox{peri}}} u_{\\mbox{peri}}\n\\end{array}\n$$\n\nThere's still a little friction here because mathematical notation is never precisely identical to variable naming in code (nor should it be). But it does help to have a little lookup table like this one:\n\n| Stan variable | Mathematical notatation | Description                           |\n|:-------------:|:-----------------------:|:--------------------------------------|\n| `x[1, :]`     | $u_{\\mbox{gut}}$        | Drug amount in the gut                |\n| `x[2, :]`     | $u_{\\mbox{cent}}$       | Drug amount in central compartment    |\n| `x[3, :]`     | $u_{\\mbox{peri}}$       | Drug amount in peripheral compartment |\n| `ka`          | $k_a$                   | Absorption rate constant from gut     |\n| `CL`          | $\\mbox{CL}$             | Elimination clearance from central    |\n| `Q`           | $Q$                     | Intercompartmental clearance          |\n| `V1`          | $V_\\mbox{cent}$         | Volume of central compartment         |\n| `V2`          | $V_\\mbox{peri}$         | Volume of peripheral compartment      |\n\nThe differential equations are all expressed in terms of drug amounts rather than drug concentrations, and the `pmx_solve_twocpt()` function solves for drug amounts in each compartment at each point in time. However, pharmacometric functions specify how drug concentrations change over time, so the Stan code makes the appropriate transformation. With that in mind I find it helpful to extend the table slightly:\n\n| Stan transformation | Mathematical notatation    | Description                                  |\n|:-------------------:|:--------------------------:|:---------------------------------------------|\n| `x[2, :] ./ V1`     | $u_{cent} / V_\\mbox{cent}$ | Drug concentration in central compartment    |\n| `x[3, :] ./ V2`     | $u_{peri} / V_\\mbox{peri}$ | Drug concentration in peripheral compartment |\n\nHaving written that out, the Stan code seems pretty interpretable. There's still something missing here insofar as it's not entirely clear *how* the `pmx_solve_twocpt()` function computes the drug amounts in each compartment at all time points, but at least it's now clear *what* it is computing. \n\n## Where can I find the analytical solutions?\n\nIn my [previous post on pop-PK modelling](/posts/2023-06-10_pop-pk-models/), I managed to get far enough along that I could implement my own two-compartment models in Stan, without using Torsten. However, in order to do that I had to rely on numerical ODE solvers to compute solutions to the pharmacokinetic functions. It turns out that was unnecessary. On the [Torsten home page](https://metrumresearchgroup.github.io/Torsten/), it indicates that:\n\n> One and two compartment models are based on analytical solutions of governing ODEs.\n\nSo presumably there *are* some analytical solutions somewhere! A little awkwardly, the documentation doesn't explicitly say what the analytical solutions for the two-compartment model are or where they are taken from, but a little bit of digging gives us some answers. First, looking through the Torsten source reveals the relevant parts of the code:\n\n- [This file](https://github.com/metrumresearchgroup/Torsten/blob/0168482d400e4b819acadbc28cc817dd1a037c1b/cmdstan/stan/lib/stan_math/stan/math/torsten/pmx_solve_twocpt.hpp) appears to be where the `torsten::pmx_solve_twocpt()` function is defined.\n- [This file](https://github.com/metrumresearchgroup/Torsten/blob/0168482d400e4b819acadbc28cc817dd1a037c1b/cmdstan/stan/lib/stan_math/stan/math/torsten/pmx_twocpt_model.hpp) appears to be the part of the code that specifies the analytical solution.\n\nSecond, a little hunting around on the internet unearths this handy little paper by [D'Argenio and Bae (2019)](https://doi.org/10.12793/tcp.2019.27.2.43) that derives the analytical solutions of interest. Skimming the paper quickly suggests it's not too complicated an exercise to implement analytical solutions (especially if you're not trying to optimise for performance), and even the derivations don't look too painful. I may return to that topic in a later post, but for now I feel reassured that I know where to look when I want to dive deeper.\n\n## Useful resources\n\n- [Bayesian PBPK modeling using R/Stan/Torsten and Julia/SciML/Turing.Jl](https://doi.org/10.1002/psp4.12926). Journal article by Ahmed Elmokadem, Yi Zhang, Timothy Knab, Eric Jordie, and Bill Gillespie, January 2023.\n\n- [Flexible and efficient Bayesian pharmacometrics modeling using Stan and Torsten, Part I](https://doi.org/10.1002/psp4.12812). Journal article by Charles Margossian, Yi Zhang, and Bill Gillespie, April 2022.\n\n- [Bayesian modeling workflow for pharmacometric applications using bbr.bayes with Stan/Torsten](https://www.metrumrg.com/wp-content/uploads/2023/06/bbr.bayes_StanCon2023.pdf). Slides by Bill Gillespie, June 2023.\n\n- [Bayesian Data Analysis Using Stan/Torsten for Pharmacometric Applications](https://metrumrg.com/wp-content/uploads/2018/05/BayesianPmetricsMBSW2018.pdf). Slides by Bill Gillespie, May 2018.\n\n- [Analytical solution of linear multi-compartment models with non-zero initial condition and its implementation with R](https://doi.org/10.12793/tcp.2019.27.2.43). Journal article by David D'Argenio and Kyun-Seop Bae, June 2019.\n\n- *Kinetics of distribution of substances administered to the\nbody. I. The extravascular modes of administration.* Journal article by Torsten Teorell, 1937. Discussed in [Torsten Teorell, the Father of Pharmacokinetics](https://doi.org/10.3109/03009739509178895) by Lennart Paalzow, 1995.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}