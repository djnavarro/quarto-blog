{
  "hash": "ef49890b498cf8f03ab81ae12256886f",
  "result": {
    "markdown": "---\ntitle: \"mrgsolve\"\ndescription: \"This is a subtitle\"\ndate: \"2023-08-10\"\n--- \n\n\n<!--------------- my typical setup ----------------->\n\n\n\n\n\n<!--------------- post begins here ----------------->\n\nContinuing my informal series of \"Danielle learns [pharmacometric modelling](https://blog.djnavarro.net/category/pharmacometrics)\" posts, today I've decided to sit down and teach myself how to use the [mrgsolve](https://mrgsolve.org/) package in R.\n\nAs I'm rapidly coming to realise, the world of pharmacometric modelling is an intersting space where there are a large number of domain-specific languages that have been designed to solve a particular subset of the modelling problems faced by analysts in the field, and R serves as a lingua franca that stitches them all together and makes it possible to write analysis scripts that call on multiple tools.^[In this respect R is the unchallenged queen of languages in pharmacometrics. It's very different to data science in the tech space, where Python is the lingua franca and R is seen as a second-class citizen. I have not yet seen a single example of anyone using Python for data analysis in this world. Judging from papers I've read, Julia has a small presence (e.g., you can use [Turing.jl](https://turing.ml/) for building ODE models in Julia), but that's the only time I've ever seen any statistical language other than R in this space.] \n\nWith that as the structure of the ecosystem, what you tend to find are packages that carve out a specific niche by building on top of some other tool. For this post, the niche we're talking about is **model-based simulation**. In this context, it's assumed that the analyst has a specific pharmacometric model in mind (e.g., one-compartment PK model,^[The acronym PK is universally used as shorthand for \"pharmacokinetics\", and a PK model is one where the primary variable you're interested in modelling is the plasma concentration over time for some drug. If you're totally new to this space, the post I wrote on [non-compartmental analysis](/posts/2023-04-26_non-compartmental-analysis/) was written from a total-newbie perspective and spells out a lot the basic terminology used in PK modelling.] two-compartment PK model, etc etc). We are not attempting to estimate parameters from data, nor are we runing a model testing exercise. The model is presumed to exist already, usually because the analyst has already done the model fitting exercise using their tool of choice.^[There are a *lot* of tools in this space: NONMEM is the oldest and most-widely used, but in addition there's Stan/Torsten, Monolix, nlmixr, Phoenix NLME, and probably many others I don't know about yet...]\n\nWithin the specific \"model simulation\" niche there are a number of R packages that people seem to use frequently. There's the RxODE package^[I can't tell if the original package is still under active development or if it's been deprecated. The [RxODE](https://nlmixrdevelopment.github.io/RxODE/) package still appears on the nlmixr website and on GitHub, but the package is (at present?) archived on CRAN.] and its successor [rxode2](https://nlmixr2.github.io/rxode2/), for example, and mrgsolve falls within the same general niche. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mrgsolve)\n```\n:::\n\n\n## A simple example\n\nOkay, let's get started. The mrgsolve package is build on top of an open source ODE solver,^[Specifically, it wraps the public domain Fortran library [ODEPACK](https://computing.llnl.gov/projects/odepack).] but the user doesn't need to call it directly. Instead, a model is constructed using a **model specification file** (more on that later) that is then compiled to C++. This compiled model is used to run simulations, and it's this compiled model that calls the ODE solvers. As a example, let's use this code taken from the [get started](https://mrgsolve.org/vignettes/01-get-started.html) page, which uses `modlib()` to use one of the predefined model specifications that come bundled with mrgsolve:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- modlib(\"pk1\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding pk1 ... done.\n```\n:::\n:::\n\n\nIn this code, `\"pk1\"` refers to the name of one of the model that comes bundled with mrgsolve... and there will be exactly zero pharmacometricians in this world that are surprised to discover that this is a one-compartment PK model with first-order absorption into the central compartment, and first-order elimination from the central compartment. If we print out the model object, we get a nice little summary:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\n-----------------  source: pk1.cpp  -----------------\n\n  project: /home/danielle/R...gsolve/models\n  shared object: pk1-so-2e05e23770e72 \n\n  time:          start: 0 end: 24 delta: 1\n                 add: <none>\n\n  compartments:  EV CENT [2]\n  parameters:    CL V KA [3]\n  captures:      CP [1]\n  omega:         0x0 \n  sigma:         0x0 \n\n  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n------------------------------------------------------\n```\n:::\n:::\n\n\nA few months ago very little of this would have made sense to me, but I've -- apparently -- become familiar enough with conventions in pharamacometrics that this now looks very easy to read. For this initial example, the bits that matter most are these:\n\n- We have a list of compartments: CENT refers to the central compartment, and EV refers to an extravascular dosing compartment through which the drug is administered. Note that although there are two listed compartments, this is really a one-compartment model: the extravascular dosing compartments are a necessary part of the model formalism, but no more than that.\n\n- We have a list of parameters: clearance (CL) is a measure representing the volume of blood that can be fully cleared of the drug per unit time, volume of distribution (V) measures the size of the central compartment, and KA is the absorption rate constant governing how quickly the drug is absorbed from the extravascular compartment into the central compartment. \n\n- When running a simulation, the drug amounts in the compartments CENT and EV will be returned as part of the output. However, we can also specify other \"captured\" quantities, which in this case adds CP, the drug concentration in the central compartment.^[In this example it's not very interesting because CP is just the ratio of CENT and V, and since V doesn't change over time, the curves for CP and CENT look identical. That isn't true for simulations with multiple sujects, however, since V can and does vary across individuals.]\n\nThe parameter values (i.e. CL, V, KA) are part of the model specification, and you can see the values assigned to those parameters by calling `param()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparam(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Model parameters (N=3):\n name value . name value\n CL   1     | V    20   \n KA   1     | .    .    \n```\n:::\n:::\n\n\nWe see that our model assumes a clearance (CL) of 1, an aborption rate constant (KA) of 1, and a volume of distribution equal to 20. The mrgsolve package doesn't keep track of units: it's up to the user to make sure all the units are on the appropriate scale. \n\nAlso note that the `param()` function is both the \"getter\" and the \"setter\" for model parameters: `param(mod)` returns a parameter list object containing the parameters of `mod`, whereas `param(mod, CL = 2, KA = 2)` returns a modified model object with updated parameters.^[Yes, fellow developer type, that does mean that `param()` is not output type stable. It's not the worst kind of type instability because you can look at the arguments and guess the output type, but if that kind of thing distresses you please be warned that you'll see quite a bit more of it in this post. At its core, mrgsolve is not meant to be a developer-facing package, and it's not intended to support automated data processing pipelines either. It's analyst-facing, and as such the flexibility exists to support analysts. What I've found, though, is that if you look carefully at the package API, you'll find that it provides tools that would work very nicely in an automated pipeline and would be perfectly safe to use in package code.] ^[Yes, I have some lingering frustrations from spending years trying to explain to Python developers that **R usually prioritises the needs of the analyst over the needs of the developer**, and now that I'm working in an R shop rather than a C++/Python shop I find myself more willing to defend that aspect to R publicly.] \n\nOkay so now we have a model object `mod` that specifies all our pharmacokinetic assumptions. In order to run a simulation, we also need to provide an **event schedule** that provides dosing information, and we'll also need to say something about the time points at which we want to simulate the various pharmacokinetic quantities of interest. You can do this in a few different ways but for the purposes of the initial example I'll do it the same way that the \"get started\" vignette does, and use a pipe-friendly workflow: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod |> \n  ev(amt = 100, ii = 24, addl = 9) |>\n  mrgsim(start = 0, end = 480, delta = 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel:  pk1 \nDim:    4802 x 5 \nTime:   0 to 480 \nID:     1 \n    ID time     EV   CENT     CP\n1:   1  0.0   0.00  0.000 0.0000\n2:   1  0.0 100.00  0.000 0.0000\n3:   1  0.1  90.48  9.492 0.4746\n4:   1  0.2  81.87 18.034 0.9017\n5:   1  0.3  74.08 25.715 1.2858\n6:   1  0.4  67.03 32.619 1.6309\n7:   1  0.5  60.65 38.819 1.9409\n8:   1  0.6  54.88 44.383 2.2191\n```\n:::\n:::\n\n\nHere we take the `mod` object, pipe it to the `ev()` function that builds the event schedule, and then pipe the output to `mrgsim()` which then runs the simulation. In this code, the arguments to `ev()` are all very standard in the field:\n\n- `amt` is the amount of drug\n- `ii` is the interdose interval\n- `addl` is number of additional doses\n\nThe arguments to `mrgsim()` are used to specify the time points:\n\n- `start` is the initial time point (I actually didn't need to specify it in ths case because the default value is 0)\n- `end` is the final time point\n- `delta` is the step size (i.e., the amount of time between successive time points)\n\nThe output here is a tabular data structure -- not technically a data frame, but I'll get to that -- with sensible column names: \n\n- `ID` is a subject identifier (always 1 for this simple example)\n- `time` is the time point for the simulated measurement\n- `EV` is the drug amount in the extravascular compartment (e.g., the gut, if we're talking about oral dosing)\n- `CENT` is the drug amount in the central compartment\n- `CP` is the drug concentration in the central compartment\n\nTo help you get a sense of what the simulation results look like, the mrgsolve package provides a plot method for simulation results, so if I'd wanted to I could add a call to `plot()` at the end of the pipeline, and get this as the output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod |> \n  ev(amt = 100, ii = 24, addl = 9) |>\n  mrgsim(start = 0, end = 480, delta = 0.1) |>\n  plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nVery nice.\n\n## Simulation workflow\n\nNow things get a little messier. Under the hood the mrgsolve package is doing quite a lot of magic to make it all work, and there are some design choices here that you need to be aware of if you're planning to call mrgsolve functions programmatically. In particular, some of the functions -- by design -- do not produce [type stable output](https://design.tidyverse.org/out-type-stability.html), so some care is involved if you're going to write automations around them or call mrgsolve from another package.^[I should say, for the record, that I'm not being critical here. Software developers who don't work in statistics have a tendency to get very angry at R (and R developers) for writing hyper-flexible functions that produce wildly different output types depending on the input. While I do understand that annoyance, I also think it's often misplaced. R is fundamentally a *statistical programming language*. It's not trying to be Python, and it's even less interested in being Rust. You wouldn't think it from browsing the \"rstats\" hashtag on social media (which is massively biased towards developers), but the typical R user is someone working interactively at the console, constructing a script iteratively as they explore and work with the data set they've been tasked to analyse. In that context, the hyper-flexibility of a lot of R functions is designed for the convenience of the *analyst*. It's not there for your convenience as a developer. Of course, I also think that package developers should always ensure that there are type-stable versions of their functions that other R developers can call in package code, but... for example, mrgsolve does in fact support this. If you're a developer calling `mrgsolve::modlib()` from within a package then IMO you don't get to whine about mrgsolve doing it wrong. In that scenario you get what you deserve for writing *your* package the wrong way.] \n\n### The model library\n\nLet's start by taking a closer look at the library of pre-specified models that come bundled with mrgsolve. They're stored in a package folder whose location is accessible by calling `modlib()` with no arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodlib()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/home/danielle/R/x86_64-pc-linux-gnu-library/4.3/mrgsolve/models\"\n```\n:::\n:::\n\n\nAs you can see, when called with no inputs `modlib()` doesn't return a compiled model, and it simply returns the path to the model library folder. If you want a list of the models that come bundled with mrgsolve, you can call `modlib()` setting `list = TRUE`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodlib(list = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nmrgsolve internal library:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n  effect  tmdd  viral1  viral2  emax  irm1  irm2  irm3  irm4  pk1cmt  pk2cmt  pk3cmt  pk1  pk2  pk2iv  popex  pred1  pbpk  1005  nm-like\n```\n:::\n:::\n\n\nFinally, if you want to build and use one of these model you can call `modlib()` and pass the name of the model you want as the `model` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- modlib(model = \"pk1\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading model from cache.\n```\n:::\n:::\n\n\nIt's probably stating the obvious, but while the `modlib()` function works nicely as a tool to support analysts interactively, you probably wouldn't call it as a developer. For instance, if you want to access the mrgsolve package folder that contains the models, you'd write code that makes very clear that you're looking for a path (not trying to build a model). Something like this would work better:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::path_package(\"mrgsolve\", \"models\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/home/danielle/R/x86_64-pc-linux-gnu-library/4.3/mrgsolve/models\n```\n:::\n:::\n\n\nSimilarly, if you want to find the models in the model library folder, that's easy enough to do with `fs::dir_ls()` and a simple regular expression. Easy done. \n\n### Building models from file\n\nAlong the same lines, building one of the bundled models using `modlib()` is a perfectly sensible thing to do when you're just starting out and don't want to write your own model specification files, but after a while you might want to pivot to a different workflow. To that end, there's an `mread()` function -- and related functions `mread_file()` and `mread_cache()` -- that reads a model specification file and returns the model object linked to the compiled code. As an example, here's how I'd use `mread()` to build the one-compartment model in the previous section:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir <- fs::path_package(\"mrgsolve\", \"models\")\nmod <- mread(model = \"pk1\", project = dir)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding pk1 ... (waiting) ...\ndone.\n```\n:::\n:::\n\n\nOptionally you can provide a file name for the model specification file that sits within the `project` folder, but in this case we don't need to: if the `file` argument is unspecified `mread()` assumes that the file name is the same as the `model` name with file extension `.cpp`.^[Developers reading this are probably wondering where the model shared object ends up when compilation happens. By default `mread()` puts the compiled model in the R temp folder, but you can override this in a persistent way by setting the `\"mrgsolve.soloc\"` option, or overriding it in the call to `mread()` via the `soloc` argument. You can also suppress compilation if you want by setting `compile = FALSE`. But probably any devs reading this would likely discover that within 5 minutes of reading the documentation anyway so there's no real need for me to mention it.]\n\n### Model objects\n\nThe mrgsolve package is built using S4 classes and of the great many object oriented programming systems available in R that's the one I'm least comfortable with.^[I mean... of the *widely-used* OOP systems, it's the one I'm least comfortable with. The wild abandon with which R spawns new object oriented programming systems is... a lot to keep up with.] But hey... I've just reread the [S4 chapter in Advanced R](https://adv-r.hadley.nz/s4.html), so let's see how we go with this, shall we? First, I'll be polite and explicitly load the methods package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(methods)\n```\n:::\n\n\nNext let's see what kind of object `mod` is and what methods are defined for it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mrgmod\"\n```\n:::\n\n```{.r .cell-code}\nmethods(class = \"mrgmod\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] [              [[             $              all.equal     \n [5] as.environment as.list        blocks         cmtn          \n [9] data_set       ev_rx          ev             evd           \n[13] idata_set      init           initialize     knobs         \n[17] loadso         names          omat           param         \n[21] req            Req            revar          see           \n[25] show           smat           stime          summary       \n[29] update         within         zero_re       \nsee '?methods' for accessing help and source code\n```\n:::\n:::\n\n\nA lot of those methods are unsurprising. For example, the `show()` method is just the S4 analog of `print()`. When we print the `mod` object at the console we're just calling its `show()` method:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\n-----------------  source: pk1.cpp  -----------------\n\n  project: /home/danielle/R...gsolve/models\n  shared object: pk1-so-2e05e63a582a4 \n\n  time:          start: 0 end: 24 delta: 1\n                 add: <none>\n\n  compartments:  EV CENT [2]\n  parameters:    CL V KA [3]\n  captures:      CP [1]\n  omega:         0x0 \n  sigma:         0x0 \n\n  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n------------------------------------------------------\n```\n:::\n:::\n\n\nBut there are other methods that are kind of handy when inspecting a mrgmod object. For example, if we wanted to see the source code for the corresponding model specification file we could call the `see()` method:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsee(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nModel file:  pk1.cpp \n$PARAM @annotated\nCL   :  1 : Clearance (volume/time)\nV    : 20 : Central volume (volume)\nKA   :  1 : Absorption rate constant (1/time)\n\n$CMT  @annotated\nEV   : Extravascular compartment\nCENT : Central compartment\n\n$GLOBAL\n#define CP (CENT/V)\n\n$PKMODEL ncmt = 1, depot = TRUE\n\n$CAPTURE @annotated\nCP : Plasma concentration (mass/volume)\n```\n:::\n:::\n\n\nIf we didn't want quite that much detail, a `summary()` would have sufficed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: pk1\n- Parameters: [3]\n  CL, V, KA\n- Compartments: [2]\n  EV, CENT\n- Captured: [1]\n  CP\n- Outputs: [3]\n  EV, CENT, CP\n```\n:::\n:::\n\n\nI don't intend to do an exhaustive walk through of all the methods defined for mrgmod objects. That would be tiresome, and in any case I don't even know what all of them do yet. But what I will mention is that many of the methods exist to provide public accessors for these internal slots of a mrgmod object. To illustrate, here's a list of all the slot names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslotNames(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"model\"    \"modfile\"  \"package\"  \"soloc\"    \"project\"  \"start\"   \n [7] \"end\"      \"delta\"    \"add\"      \"tscale\"   \"digits\"   \"quiet\"   \n[13] \"verbose\"  \"debug\"    \"preclean\" \"atol\"     \"rtol\"     \"ss_rtol\" \n[19] \"ss_atol\"  \"maxsteps\" \"hmin\"     \"hmax\"     \"ixpr\"     \"mxhnil\"  \n[25] \"shlib\"    \"funs\"     \"omega\"    \"sigma\"    \"request\"  \"param\"   \n[31] \"init\"     \"capture\"  \"Icap\"     \"capL\"     \"Icmt\"     \"cmtL\"    \n[37] \"args\"     \"fixed\"    \"advan\"    \"trans\"    \"mindt\"    \"code\"    \n[43] \"annot\"    \"envir\"    \"plugin\"   \"ss_cmt\"  \n```\n:::\n:::\n\n\nOkay so one of the slots is called \"param\", and denoted `@param` to remind us that it's a slot of an S4 object.^[Why yes, this blog post is *also* an exercise in \"Danielle reminds herself how S4 works and no she bloody well is not going to talk about multiple inheritance and multiple dispatch in S4 here she's not that much of a masochist\".] Calling the `param()` method is the appropriate way to access the `@param` slot, for instance.^[As an aside, `param(mod)` returns an S4 object of class \"parameter_list\" which in turn has a `show()` method that provides that prettified looking table pf parameters, but from a practical perspective you might just want to coerce it to a regular list using `as.list(param(mod))`.] \nThe `see()` method is slightly fancier, but it too is essentially an accessor function for the `@modelfile` and `@code` slots. If I were an extremely unwise woman who ignored all the best practices for S4 classes I could use a command like `cat(mod@code, sep = \"\\n\")` and get roughly the same output. This is of course a terrible idea: the slots of an S4 object are considered internal details and not part of the package API. Accessing them directly is considered a faux pas and you have only yourself to blame if the developer later changes the structure of the slots and your code breaks. \n\nIndeed, the *only* reason I'm talking about them here is that I find it helpful for building my own mental model of what mrgsolve does, which will become apparent in the next section when I tackle the puzzlingly magical behaviour of the `ev()` function. \n\n### Event objects\n\nModel objects represent the underlying ODE system. They don't store information about \"interventions\" (external forcers) on the system. In the pharmacokinetic context the main intervention we're thinking about is dosing. An events object returned by `ev()` returns a event schedule that would be familiar to any pharmacometrician:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevents <- ev(amt = 100, ii = 24, addl = 9)\nevents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEvents:\n  time amt ii addl cmt evid\n1    0 100 24    9   1    1\n```\n:::\n:::\n\n\nThe `events` object looks a lot like a data frame, but is technically an S4 object with class \"ev\". However, an ev object has only two slots, one of which is `@data` and -- as you'd expect -- it stores the data set as a data frame internally. So... yeah, it's basically a data frame, and since there are `as.data.frame()` and `as_tibble()` methods defined for ev objects, so you can coerce it to whatever your preferred form of tabular data object happens to be.^[There is also an `as.ev()` function that allows conversion in the other direction.] I'm a tibble girl myself so...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::as_tibble(events)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n   time   amt    ii  addl   cmt  evid\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     0   100    24     9     1     1\n```\n:::\n:::\n\n\nI'll talk more about other ways to build fancier event schedules later, and you'll see that it's perfectly possible to use a simple data frame to specify an event schedule, but we're not yet at the point where any of that is needed. Right now, all we're trying to do is understand what happens in the simple simulation I showed at the start of this post.\n\n### Danielle briefly loses her f**king mind\n\nVery soon I will move on to `mrgsim()`, the function that we use to run the simulation itself. Truly, we will get there soon. But we have one little matter to clear up first, related to the behaviour of `ev()`. \n\nThe previous section makes it look as if `ev()` is very simple, and viewed from the analyst perspective it really is quite simple. You use it to construct event schedules. However, `ev()` is not a simple function. It's an S4 generic with dispatch on the first argument^[More precisely, method dispatch takes place off the `x` argument which is the first argument to the `ev()` generic, but since we're talking about pipelines here, the name isn't as important as the position.] and it returns a qualitatively different kind of object when called in a pipeline.\n\nTo understand the \"Danielle briefly loses her f**king mind\" aspect to this, let's return to the model simulation pipeline that I lifted from the \"Get Started\" vignette and used at the start of the post: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod |> \n  ev(amt = 100, ii = 24, addl = 9) |>\n  mrgsim(end = 480, delta = 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel:  pk1 \nDim:    4802 x 5 \nTime:   0 to 480 \nID:     1 \n    ID time     EV   CENT     CP\n1:   1  0.0   0.00  0.000 0.0000\n2:   1  0.0 100.00  0.000 0.0000\n3:   1  0.1  90.48  9.492 0.4746\n4:   1  0.2  81.87 18.034 0.9017\n5:   1  0.3  74.08 25.715 1.2858\n6:   1  0.4  67.03 32.619 1.6309\n7:   1  0.5  60.65 38.819 1.9409\n8:   1  0.6  54.88 44.383 2.2191\n```\n:::\n:::\n\n\nIf you're expecting `ev()` to return an \"ev\" object -- as indeed it would if I called `ev(amt = 100, ii = 24, addl = 9)` outside of a pipeline -- this code makes absolutely no sense whatsoever. An \"ev\" object simply does not have the information required to run the simulations. Running a model-based simulation requires an actual model, and an \"ev\" object does not contain any slots that could possibly store a model object. So... something magical is happening. This code shouldn't work, but it does???\n\nI cried briefly. Then I read the [documentation](https://mrgsolve.org/docs/reference/ev.html) properly. Then I cried some more. \n\nAfter reading the documentation carefully, I now understand what's going on here, but an explanation is required because if you don't look closely it looks like magic.^[As a rule I don't dislike \"magic\" code. I mean... it would be weird to be an R user and not appreciate its virtues. Lazy evaluation and non-standard evaluation in R are powerful tools, and are the basis of a lot of \"magic\" in R. They make life a lot easier for the analyst but it comes at the price of making life harder for the developer. Because of that I've ended up with a habit of trying to dig into the details every time I find R code that feels magical.] Recall from earlier in the post I mentioned that `modlib()` is not type stable: you get qualitatively different results depending on what kind of input you pass it. The `ev()` function has the same property. When passed a model object as the first argument, it doesn't in fact return an events schedule. It returns... a model object?^[To be precise, `ev()` is an S4 generic function that does method dispatch on the `x` argument. If `x` is missing, the relevant `ev()` method returns an \"ev\" object. However, if `x` has class \"mrgmod\", the relevant method returns another \"mrgmod\" object. I'll confess this makes me a little uneasy.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev(mod, amt = 100, ii = 24, addl = 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\n-----------------  source: pk1.cpp  -----------------\n\n  project: /home/danielle/R...gsolve/models\n  shared object: pk1-so-2e05e63a582a4 \n\n  time:          start: 0 end: 24 delta: 1\n                 add: <none>\n\n  compartments:  EV CENT [2]\n  parameters:    CL V KA [3]\n  captures:      CP [1]\n  omega:         0x0 \n  sigma:         0x0 \n\n  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n------------------------------------------------------\n```\n:::\n:::\n\n\nLooking at the printed output, you might think that the output here is identical to the original model object `mod`, but in this case looks are deceving. The new model stores the event schedule internally: it's tucked away in the `@args` slot.^[Oh look, that apparently-irrelevant excursion she did talking about the mrgmod object slots turns out to be relevant! It's almost as if she's written things before!] To illustrate, let's assign the output to a variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_with_ev <- ev(mod, amt = 100, ii = 24, addl = 9)\n```\n:::\n\n\nNow compare the pair:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod@args\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist()\n```\n:::\n\n```{.r .cell-code}\nmod_with_ev@args\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$events\nEvents:\n  time amt ii addl cmt evid\n1    0 100 24    9   1    1\n```\n:::\n:::\n\n\nSo now things become a little clearer. After seeing this, what you might -- correctly! -- conclude is that at the other end of the pipeline the `mrgsim()` function is aware that the event schedule might not be passed explicitly, and knows to check within the model object if that is the case. Knowing all this, we're now in a position to understand what happens during a pipeline like this: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodlib(\"pk1\", quiet = TRUE) |> \n  ev(amt = 100, ii = 24, addl = 9) |>\n  mrgsim(end = 480, delta = 0.1)\n```\n:::\n\n\nIt's a clever trick, and I imagine it's something that a lot of data analysts find super handy. That said, it's probably not something I would use myself. I'm a simple girl who likes her coffee black and her functions bland, so if I were inclined to use `ev()` in my workflow at all, I'd probably be more keen on code that looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up the simulation\ndir    <- fs::path_package(\"mrgsolve\", \"models\")\nmod    <- mread_file(file = \"pk1.cpp\", project = dir, quiet = TRUE)\nevents <- ev(amt = 100, ii = 24, addl = 9)\n\n# run the simulation\nout <- mrgsim_e(mod, events = events, end = 480, delta = 0.1)\n```\n:::\n\n\nNotice that I called `mrgsim_e()` here rather than `mrgsim()`. Because mrgsolve recognises that sometimes developers might want to call simulation functions programmatically, it provides several restricted versions of `mrgsim()` that require input in a specific format. The sneaky \"event-schedule-inside-the-model-object\" piping trick I showed at the start of the post does not work with `mrgsim_e()`, which makes it a safer choice when running simulations programmatically. Later in this post you'll see me pivot to using `mrgsim_d()`, for much the same reason. \n\n### Data frames as event schedules\n\nIn the last section I kind of wrapped myself up in knots trying to get a handle on what `ev()` does under the hood, and as you can probably tell I have some mixed feelings about the `ev()` function itself. Fortunately, you don't have to use it at all if you don't want to: the `mrgsim_d()` function takes regular data frame as the `data` argument, and which plays the same role as the `events` argument in `mrgsim_e()`. You can generate event schedules in data frame format using the `ev_expand()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev_expand(amt = 100, ii = 24, addl = 9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID time amt ii addl cmt evid\n1  1    0 100 24    9   1    1\n```\n:::\n:::\n\n\nThe output here looks the same, but this time the output is a regular data frame, and so to be defensive in our code we would call `mrgsim_d()` to run a simulation that *requires* a data frame as input:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up the simulation\ndir    <- fs::path_package(\"mrgsolve\", \"models\")\nmod    <- mread_file(file = \"pk1.cpp\", project = dir, quiet = TRUE)\nevents <- ev_expand(amt = 100, ii = 24, addl = 9)\n\n# run the simulation\nout <- mrgsim_d(mod, data = events, end = 480, delta = 0.1)\n```\n:::\n\n\nAs an aside, you might be wondering why this function is named `ev_expand()`. It's not obvious from the example I showed above, but the main way you'd use this function in practice would be to generate event schedules using `expand.grid()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev_expand(amt = 100, ii = 24, addl = 9, ID = 1:6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID time amt ii addl cmt evid\n1  1    0 100 24    9   1    1\n2  2    0 100 24    9   1    1\n3  3    0 100 24    9   1    1\n4  4    0 100 24    9   1    1\n5  5    0 100 24    9   1    1\n6  6    0 100 24    9   1    1\n```\n:::\n:::\n\n\nLater in this post I'll use `ev_expand()` in exactly this way.\n\n### Simulation times\n\nWe're almost done unpacking the simple example, but I want to rewrite the code one last time. Until now, every time I've `mrgsim()` and its variants I've passed arguments `end` and `delta` as a way to override the default assumptions about what time points we would use when running our simulations. Internally, these arguments are used to construct a \"tgrid\" object that specifies the time points. We can construct this object explicitly by calling `tgrid()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntgrid(start = 0, end = 480, delta = 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstart:  0  end:    480  delta:  0.1  offset: 0  min:    0   max:    480 \n```\n:::\n:::\n\n\nUsing this knowledge, we can now write our simulation code like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set up the simulation\ndir    <- fs::path_package(\"mrgsolve\", \"models\")\nmod    <- mread_file(file = \"pk1.cpp\", project = dir, quiet = TRUE)\nevents <- ev_expand(amt = 100, ii = 24, addl = 9)\ntimes  <- tgrid(start = 0, end = 480, delta = 0.1)\n\n# run simulation\nout <- mrgsim_d(x = mod, data = events, tgrid = times)\n```\n:::\n\n\n\nFor the simple example, calling `tgrid()` explicitly doesn't by us much, but if you dive into the documentation a little you discover that there are tools for working with tgrid objects that allow you to define the simulation times in much richer ways than a simple grid.\n\nBut -- again -- I digress. \n\n### Simulation code\n\nTaking a step back, it's worth thinking a little about the code I've ended up with. The piped code I started with probably works nicely for some people, but it's not my preferred way to do this. The way I think of these things, a simulation has three main inputs (model object, event schedule, simulation times), and I find the code easier to read when these three inputs are passed as three separate arguments. The syntax used to specify the original simulation pipeline is very compact...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- modlib(\"pk1\", quiet = TRUE) |> \n  ev(amt = 100, ii = 24, addl = 9) |>\n  mrgsim(end = 480, delta = 0.1)\n```\n:::\n\n\n...but that compactness comes at the expense of slightly obfuscating the inputs to `mrgsim()`. By way of contrast, this version of the code is considerably more verbose...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this would normally be the project folder\ndir <- fs::path_package(\"mrgsolve\", \"models\")\n\n# define model, events, and times\nmod    <- mread_file(file = \"pk1.cpp\", project = dir, quiet = TRUE)\nevents <- ev_expand(amt = 100, ii = 24, addl = 9)\ntimes  <- tgrid(start = 0, end = 480, delta = 0.1)\n\n# run simulation\nout <- mrgsim_d(x = mod, data = events, tgrid = times)\n```\n:::\n\n\n...but personally I find it a little easier to understand the structure of the simulation when its written like this. Other people might have different views though.\n\n### Simulation output\n\nAll that remains is to have a look at the output we've created:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel:  pk1 \nDim:    4802 x 5 \nTime:   0 to 480 \nID:     1 \n    ID time     EV   CENT     CP\n1:   1  0.0   0.00  0.000 0.0000\n2:   1  0.0 100.00  0.000 0.0000\n3:   1  0.1  90.48  9.492 0.4746\n4:   1  0.2  81.87 18.034 0.9017\n5:   1  0.3  74.08 25.715 1.2858\n6:   1  0.4  67.03 32.619 1.6309\n7:   1  0.5  60.65 38.819 1.9409\n8:   1  0.6  54.88 44.383 2.2191\n```\n:::\n:::\n\n\nAs you've probably come to expect at this point, this is not technically a data frame, it's an S4 object of class \"mrgsims\", and can easily be coerced to a data frame using `as.data.frame()` or `as_tibble()`. \n\nThe mrgsolve package supplies a plot method for mrgsims objects that generates nice looking lattice plots, making it very easy to quickly produce helpful data visualisations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(out)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nIf additional customisation is needed, however, it's pretty easy to convert the output to a tibble and then using ggplot2 to create the specific visualisation you want:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nout |>\n  tibble::as_tibble() |>\n  tidyr::pivot_longer(\n    cols = c(EV, CENT, CP), \n    names_to = \"variable\", \n    values_to = \"value\"\n  ) |> \n  dplyr::mutate(\n    variable = dplyr::case_when(\n      variable == \"EV\" ~ \"Gut amount\",\n      variable == \"CENT\" ~ \"Central amount\",\n      variable == \"CP\" ~ \"Central concentration\"\n    )\n  ) |>\n  ggplot(aes(time, value)) + \n  geom_line() +\n  facet_wrap(~ variable, scales = \"free_y\") + \n  theme_bw() +\n  theme(strip.background = element_rect(fill = \"white\")) + \n  labs(\n    title = \"Drug amounts and concentrations over time\",\n    x = \"Time (hours)\",\n    y = NULL\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n## Model specification\n\nUp till now I've been relying entirely on prespecified pharmacokinetic models included in the mrgsolve model library. That was a useful thing to do earlier in this post while discussing the mechanics of `mrgsim()`, `ev()`, `mread()`, `tgrid()` and so on, but in practice you really need to understand how models are specified. I'm not going to attempt a comprehensive discussion of this topic, but if you want more detail, the chapters in the user guide I found most relevant are:\n\n- The [model specification chapter](https://mrgsolve.org/user-guide/specification.html)\n- The [topics chapter](https://mrgsolve.org/user-guide/topics.html)\n\n### Example 1: Two compartment PK model\n\nThere are two ways to construct a model specification in mrgsolve: you can pass a string to `mread_code()`, or you can read it from a model specification file using `mread_file()`. I'll be using the latter method here. By convention, model specification files use a \".cpp\" file extension, but it's important to recognise that despite that, a model specification file is not C++ code. A model specification consists of a set of code blocks, and only some of those code blocks contain C++ code.^[I'm guessing that the logic here is that, even though some code blocks use R syntax, and others aren't interpreted as code at all, the model build process is such that eventually it all becomes C++, and a C++ compiler constructs the binary. There's logic to it, but it does feel a bit disorienting seeing \".cpp\" files that aren't actually C++ source.] \n\nTo get a sense of what a model specification looks like, here's an example:\n\n\n::: {.cell filename='example1.cpp' file='example1.cpp'}\n\n```{.cpp .cell-code  code-line-numbers=\"true\"}\n[PROB]\n\nThis is a minor variation of the \"pk2cmt\" model that is distributed as\npart of the mrgsolve internal model library. It has a single extravascular\ndosing compartment (the GUT), a central compartment (CENT), and a\nperipheral compartment (PERIPH). Absorption from GUT is first order,\nwhereas elimination from CENT follows Michaelis-Menten kinetics.\n\n[PARAM] @annotated\n\nVC   :  20  : Central volume (volume)\nQ    :   2  : Inter-compartmental clearance (volume/time)\nVP   :  10  : Peripheral volume of distribution (volume)\nKA   : 0.5  : Absorption rate constant (1/time)\nVMAX :   1  : Maximum velocity of elimination (mass/time)\nKM   :   2  : Michaelis constant for elimination (mass/volume)\n\n[CMT] @annotated\n\nGUT    : Drug amount in gut (mass)\nCENT   : Drug amount in central compartment (mass)\nPERIPH : Drug amount in peripherhal compartment (mass)\n\n[GLOBAL]\n\n#define CP (CENT / VC)          // concentration in central compartment\n#define CT (PERIPH / VP)        // concentration in peripheral compartment\n#define CLNL (VMAX / (KM + CP)) // non-linear clearance, per MM kinetics\n\n[ODE]\n\ndxdt_GUT = -KA * GUT;\ndxdt_CENT = KA * GUT - (CLNL + Q) * CP  + Q * CT;\ndxdt_PERIPH = (Q * CP) - (Q * CT);\n\n[CAPTURE] @annotated\n\nCP : Plasma concentration (mass/time)\n\n```\n:::\n\n\nThere are six code blocks in this file. I've specified them using square brackets (e.g., `[BLOCKNAME]`) because it reminds me of [TOML](https://toml.io/en/), but it's also valid to use the dollar sign (e.g., `$BLOCKNAME`).^[I suspect that the `$BLOCKNAME` format is actually canonical because that's the version you see when model code is printed when calling `see()`, but I'm going to use `[BLOCKNAME]` throughout this post because I personally find it easier to read. [YMMV](https://dictionary.cambridge.org/dictionary/english/ymmv).] Block names are case insensitive: mrgsolve treats `[BLOCKNAME]` and `[blockname]` identically. The order in which you specify blocks doesn't matter, but the order of statements within a block often does matter because some blocks are interpreted as C++ or R code.\n\nThe interpretation of these blocks is as follows:\n\n- The [`[PROB]`](https://mrgsolve.org/user-guide/specification.html#sec-block-prob) block is purely used to specify comments or notes on the model. It has no functional effect. You'll very often see this block written in markdown format. \n\n- The [`[PARAM]`](https://mrgsolve.org/user-guide/specification.html#sec-block-param) block is used to pass a list of parameter values to be used in the model. When parsing this code block, mrgsolve interprets the values as R expressions (evaluated at build time), so if you were to define the central compartment volume `VC` to be `sqrt(400)`, the resulting model would store `VC` as the numeric value `20` within the internal parameter list. Normally, parameters would be defined as a comma separated list of name-value pairs (e.g., `VC = 20, Q = 2, ...`), but when you use the `@annotated` option as I have done here, you can write `VC : 20 : Central volume (volume)`. This version of the syntax allows you to provide comments on how each parameter is interpreted. Many of the code blocks support the `@annotated` option, and in most cases I find myself strongly preferring the annotated syntax.\n\n- The [`[CMT]`](https://mrgsolve.org/user-guide/specification.html#cmt-and-init) block is used to specify compartment names, and much like the `[PARAM]` block it supports the `@annotated` keyword. By default, all compartments are presumed to be initialised with value 0. If you need to set different initial values for the drug amounts in each compartment, use an `[INIT]` block instead of a `[CMT]` block.\n\n- The [`[GLOBAL]`](https://mrgsolve.org/user-guide/specification.html#global) block is used to specify global variables and [preprocessor directives](https://cplusplus.com/doc/tutorial/preprocessor/) in the C++ code that mrgsolve constructs from the model specification file. This block is, not surprisingly, interpreted as literal C++ code. In this example I've used the `#define` directive to indicate that the plasma concentration `CP` is simply an alias for `(CENT / VP)`, and similarly the tissue^[Confession: I'm not 100% certain that the \"T\" in \"CT\" stands for tissue, since I copied this line from one of the models in the mrgsolve model library, but I think it's the right interpretation given that the central compartment amount is usually intended to refer to \"amount of drug the blood, sort of\" and the peripheral compartment is \"amount of drug in body tissues, sort of\". The \"sort of\" is important though: pharamacokinetic compartments are abstractions, and are they only loosely related to the corresponding physiology.] concentration `CT` is an alias for `(PERIPH / VP)`, and so on.\n\n- The [`[ODE]`](https://mrgsolve.org/user-guide/specification.html#sec-block-ode) block is used to specify the differential equations that define the model. For every compartment in your model there is a corresponding `dxdt_` variable: for instance, if `CENT` denotes the drug amount in the central compartment, then there is automatically a variable `dxdt_CENT` that denotes its first derivative with respect to time, and you must specify the value for *all* compartment derivatives even if they are zero. The `[ODE]` block is interpreted as literal C++ code, and you can declare and initialise new variables within the `[ODE]` block if you want to. Note that you may sometimes see a `[DES]` code block instead of an `[ODE]` block. They're the same thing: `[DES]` is an alias for `[ODE]`.\n\n- The [`[CAPTURE]`](https://mrgsolve.org/user-guide/specification.html#sec-block-capture) block is used to indicate variables that should be \"captured\" in the simulation and returned to the user in R when `mrgsim()` is called. The user guide doesn't say so explicitly, but from what I can tell the compartment amount variables are always captured, and you don't need to list those here. The only things you need to specify here are the *other* quantities that you want the simulation to return. It supports the `@annotated` keyword, and I've used that here because honestly my sanity dissolves very quickly when trying to read model specification files that don't use the annotations.\n\nOkay, now that I've saved my model specification file as `example1.cpp`, let's pivot back to my R session and use it to run a simulation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define model, events, and times\nmod    <- mread_file(file = \"example1.cpp\", quiet = TRUE)\nevents <- ev_expand(amt = 10, ii = 24, addl = 19)\ntimes  <- tgrid(start = 0, end = 960, delta = 0.2)\n\n# run simulation and plot results\nout <- mrgsim_d(mod, data = events, tgrid = times)\nplot(out)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nYes, that all seems to work nicely. No, I did not have any solid justification for choosing these parameters. It's just a toy.\n\n### Example 2: Two compartment population-PK model\n\nThe simulation in the previous section is relatively simple. It's a one compartment model, there are no random effects or covariates, and the simulation involves only a single subject. The nonlinear clearance aspect is a little fancy, since [Michaelis-Menten kinetics](https://en.wikipedia.org/wiki/Michaelis%E2%80%93Menten_kinetics) aren't entirely simple, but apart from that there's not much going on in this model. \n\nTime to add some complexity. This time around I'll build a standard two compartment model with first-order absorption and first-order elimination, but I'll now allow random effects on all model parameters. Conventionally,^[As far as I can tell, most of these conventions are \"for compatibility with NONMEM\", and I am very rapidly starting to read \"for compatibility with NONMEM\" with exactly the same level of jaundiced cynicism that I apply when I find base R documentation that explains that R does something absolutely unhinged \"for compatibility with S\". I deeply admire the commitment to backward compatibility and/or notational consistency, but also oh sweet lord in heaven it is **EXHAUSTING**.] the variables in a population-PK model follow a uniform convention, and this is very often mirrored in software and analysis code. I'm now familiar enough with PK modelling that I've internalised these conventions, but since the audience of my blog is wider, here are the key ones:\n\n- Population typical values are denoted with thetas ($\\theta$, $\\boldsymbol\\theta$, $\\boldsymbol\\Theta$)^[In the spirit of stating assumptions, I'll also add this. As is typical in many (but not all) disciplines: italicised lower case denotes a scalar, bold italic lower case denotes a vector, bold upper case denotes a matrix.]\n- Population scale parameters are denoted with omegas ($\\omega$, $\\boldsymbol\\omega$, $\\boldsymbol\\Omega$)\n- Random effect terms are denoted with etas ($\\eta$, $\\boldsymbol\\eta$)\n- Variability of the measurement is denoted with sigmas ($\\sigma$, $\\boldsymbol\\sigma$, $\\boldsymbol\\Sigma$)\n\nWith that little refresher out of the way, let's have a look at the model specification file:\n\n\n::: {.cell filename='example2.cpp' file='example2.cpp'}\n\n```{.cpp .cell-code  code-line-numbers=\"true\"}\n[PROB]\n\nThis is a population-PK two-compartment model.\n\n[PARAM] @annotated\n\nTVVC   : 20  : Typical value for VC (volume)\nTVVP   : 10  : Typical value for VP (volume)\nTVKA   :  1  : Typical value for KA (1/time)\nTVCL   :  1  : Typical value for CL (volume/time)\nTVQ    :  2  : Typical value for Q (volume/time)\n\n[OMEGA] @annotated\n\nEVC   :   2 : Variance of random effect on VC\nEVP   :   1 : Variance of random effect on VP\nEKA   : 0.1 : Variance of random effect on KA\nECL   : 0.1 : Variance of random effect on CL\nEQ    : 0.1 : Variance of random effect on Q\n\n[MAIN]\n\ndouble VC = TVVC * exp(EVC); // central compartment volume\ndouble VP = TVVP * exp(EVP); // peripheral compartment volume\ndouble KA = TVKA * exp(EKA); // absorption rate constant\ndouble CL = TVCL * exp(ECL); // clearance\ndouble Q  = TVQ  * exp(EQ);  // intercompartmental clearance\n\n[CMT] @annotated\n\nGUT    : Drug amount in gut (mass)\nCENT   : Drug amount in central compartment (mass)\nPERIPH : Drug amount in peripherhal compartment (mass)\n\n[GLOBAL]\n\n#define CP (CENT / VC)   // concentration in central compartment\n#define CT (PERIPH / VP) // concentration in peripheral compartment\n\n[ODE]\n\ndxdt_GUT    = -(KA * GUT);\ndxdt_CENT   =  (KA * GUT) - (CL + Q) * CP + (Q * CT);\ndxdt_PERIPH =  (Q * CP) - (Q * CT);\n\n[CAPTURE] @annotated\n\nCP : Plasma concentration (mass/time)\n\n```\n:::\n\n\nThings to notice here:\n\n- The `[PARAM]` block is essentially the same as last time. The only difference is that I've now given all the variables a \"TV\" prefix, to indicate that they now refer to the population typical value for the corresponding quantity (e.g., `TVCL` is the typical value for clearance `CL`). I would have preferred a different naming scheme, personally, but since this approach is pretty standard in the field I'll adhere to it. In any case, these \"typical value\" variables collectively form the $\\boldsymbol\\theta$ vector of fixed effects in the model.\n\n- The purpose of the [`[OMEGA]`](https://mrgsolve.org/user-guide/specification.html#sec-block-omega) block to specify a variance-covariance matrix $\\boldsymbol\\Omega$, such that the vector of random effects $\\boldsymbol\\eta_i$ for the $i$-th simulated person is sampled from a multivariate normal distribution, $\\boldsymbol\\eta_i \\sim \\mbox{Normal}(\\boldsymbol{0}, \\boldsymbol\\Omega)$. By default, mrgsolve assumes that $\\boldsymbol\\Omega$ is a diagonal matrix, so all you need to do is specify the vector of variances along the main diagonal.^[I'm not going to discuss them here, but note that the `@block` option allows you to pass a complete variance-covariance matrix, and the `@correlation` option allows you to specify correlations instead of covariances on the off-diagonals. The user guide discusses these and several other options that are supported in the `[OMEGA]` block. Of particular note: there's a section in the user guide on `[OMEGA]` shows you how to use `@block` and `@annotated` together.] The `[OMEGA]` block supports the `@annotated` option, which I've used here to provide human-readable explanations of each of the terms. Note that the variable names I've used here are things like `ECL`, `EVP`, and so on: the \"E\" prefix is short for \"ETA\" and indicates that they refer to the value of the sampled random effect term (i.e., an $\\eta$ value), not the variance itself (i.e., an $\\omega$ value). In that sense I find it helpful to think of the `[OMEGA]` block as specifying the sampling scheme for the random effect terms, rather than literally a covariance matrix. \n\n- The [`[MAIN]`](https://mrgsolve.org/user-guide/specification.html#sec-block-main) block, as you might expect given the name, is interpreted with C++ syntax.^[The `[MAIN]` block is analogous to the NONMEM `$PK` block, and indeed `[PK]` is allowed as an alias for `[MAIN]` in mrgsolve model specification files.] It serves multiple purposes, but what I'm using it for here is specifying relationships between variables. For instance, the code on line 26 defines the clearance `CL` for a specific subject as the product of the population typical value `TVCL` and the exponentiated random effect `exp(ECL)`.^[For folks used to linear regression models and random effect terms that compose additively with the fixed effect, it's worth noting that in PK models everything tends to be log-linear. For any particular PK quantity $x$, the relationship takes the form $\\log x = \\eta_x + \\log \\theta_x$.]\n\n- The `[CMT]`, `[GLOBAL]`, `[ODE]`, and `[CAPTURE]` blocks are all more or less as they were before. The code is a little different because the model is different, but there's no new concepts required to read these blocks.\n\nNow that we've talked through the code, let's go back to R and run a simulation using this model. In the extract below I've run a small simulation with six individuals. They all have the same dosing schedule, but we end up with different data in each case because the model samples the random effect terms separately for each person:\n \n\n::: {.cell}\n\n```{.r .cell-code}\n# define model, events, and times\nmod    <- mread_file(file = \"example2.cpp\", quiet = TRUE)\nevents <- ev_expand(amt = 10, ii = 24, addl = 11, ID = 1:6)\ntimes  <- tgrid(start = 0, end = 480, delta = 0.1)\n\n# run simulation and plot results\nout <- mrgsim_d(mod, data = events, tgrid = times)\nplot(out)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nAs before, I haven't tried to choose model parameters in the principled way: I just wanted to make sure the code is functioning properly. \n\n### Example 3: Other customisations\n\n\n::: {.cell filename='example3.cpp' file='example3.cpp'}\n\n```{.cpp .cell-code  code-line-numbers=\"true\"}\n[PROB]\n\nThis is an example adapted from the user guide \"topics\" section.\n\n[PARAM] @annotated\n\nTVCL : 1.1   : Typical clearance (L/hr)\nTVV  : 35.6  : Typical volume of distribution (L)\nTVKA : 1.35  : Typical absorption rate constant (1/hr)\nWT   : 70    : Weight (kg)\nSEX  : 0     : Sex coded as male = 0, female = 1\nWTCL : 0.75  : Coefficient for the effect of weight on CL\nSEXV : 0.878 : Coefficient for the effect of sex = 1 on V\n\n[MAIN]\n\ndouble CL = TVCL * pow(WT/70, WTCL) * exp(ECL);\ndouble V  = TVV  * pow(SEXV, SEX) * exp(EV);\ndouble KA = TVKA * exp(EKA);\n\n[OMEGA] @correlation @block @annotated\n\nECL : 1.23          : Random effect on CL\nEV  : 0.67 0.4      : Random effect on V\nEKA : 0.25 0.87 0.2 : Random effect on KA\n\n[SIGMA] @annotated\n\nPROP: 0.005  : Proportional residual error\nADD : 0.0001 : Additive residual error\n\n[CMT] @annotated\n\nGUT  : Dosing compartment (mg)\nCENT : Central compartment (mg)\n\n[PKMODEL]\n\nncmt = 1, depot = TRUE\n\n[TABLE]\n\ndouble CP = CENT / V;\ndouble DV = CP * (1 + PROP) + ADD;\n\n[CAPTURE] @annotated\n\nCP : True plasma concentration (mg/L)\nDV : Observed plasma concentration (mg/L)\n```\n:::\n\n\nSimulation with two male subjects both at 70kg weight:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read model from file\nmod <- mread_file(file = \"example3.cpp\", quiet = TRUE)\n\n# show default parameters\nparam(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Model parameters (N=7):\n name value . name value\n SEX  0     | TVV  35.6 \n SEXV 0.878 | WT   70   \n TVCL 1.1   | WTCL 0.75 \n TVKA 1.35  | .    .    \n```\n:::\n\n```{.r .cell-code}\n# define events and times\nevents <- ev_expand(amt = 10, ii = 48, addl = 3, ID = 1:2)\ntimes  <- tgrid(start = 0, end = 240, delta = 0.5)\n\n# run simulation and plot results\nout <- mrgsim_d(mod, data = events, tgrid = times)\nplot(out, ~ CP + DV)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nUpdate parameters and rerun as two female subjects with weight 60kg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# update model parameters\nmod <- param(mod, SEX = 1, WT = 60)\n\n# show model parameters\nparam(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Model parameters (N=7):\n name value . name value\n SEX  1     | TVV  35.6 \n SEXV 0.878 | WT   60   \n TVCL 1.1   | WTCL 0.75 \n TVKA 1.35  | .    .    \n```\n:::\n\n```{.r .cell-code}\n# run simulation and plot results\nout <- mrgsim_d(mod, data = events, tgrid = times)\nplot(out, ~ CP + DV)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n## Resources\n\n- The [mrgsolve user guide](https://mrgsolve.org/user-guide/) is probably not the place you want to start, because it very quickly dives in deep and talks about the domain specific language used to specify models, but once you've wrapped your head around the basics that's the place to look for details.\n\n- The [mrgsolve vignettes](https://mrgsolve.org/vignettes/) provide a nice place to start, but one thing you need to keep in mind is that the vignettes posted at [mrgsolve.org/vignettes](https://mrgsolve.org/vignettes/) are not identical to the vignettes that appear on the pkgdown website (i.e., [mrgsolve.org/docs/articles](https://mrgsolve.org/docs/articles/)), so it's worth being careful to check which one you're looking at!\n\n- Speaking of which, the [mrgsolve pkgdown site](https://mrgsolve.org/docs/) provides all the usual documentation that you'd expect of an R package in the usual format. Function reference guides, some vignettes, links to github, etc., all that is there.\n\n- The [learn mrgsolve](https://mrgsolve.org/learn.html) page on the mrgsolve website has links to presentations, courses, and other things that can be helpful in getting started.\n\n- Finally, there's a [blog](https://mrgsolve.org/blog/) associated with the package that has a variety of tips, tricks, updates and news. \n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}