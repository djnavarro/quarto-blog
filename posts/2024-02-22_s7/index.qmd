---
title: "Creating new generative art tool in R with grid, ambient, and S7"
description: "Let's be honest. This is another absurd side project with very little practical value. I don't even care. It was a fun thing to do and that's enough"
date: "2024-02-22"
categories: ["R", "Object-Oriented Programming", "Grid Graphics", "Art"]
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)

source("sketches.R")
```

<!--------------- post begins here ----------------->

So I wrote some code that allows me to do this...

```{r}
# colour scheme
palette <- c(
  "#e50000", "#ff8d00", "#ffee00", 
  "#028121", "#004cff", "#770088"
)

# parameters defining objects
values <- tibble::tibble(
  x = cos(seq(0, pi * 5/3, length.out = 6)),
  y = sin(seq(0, pi * 5/3, length.out = 6)),
  n = 500L,
  fill = palette,
  color = fill
)

# list of blob objects to add to a sketch
blobs <- purrr::pmap(values, blob)

# define and draw a sketch containing the objects
blobs |> sketch() |> draw()

```

Or this...

```{r}
# parameters defining objects
values <- tibble::tibble(
  x = rnorm(200L, sd = 1.5),
  y = rnorm(200L, sd = 1.5),
  xend = x + 1,
  yend = y,
  width = 1,
  n = 500L,
  fill = sample(palette, 200L, replace = TRUE),
  color = fill
)

# list of ribbon objects to add to a sketch
ribbons <- purrr::pmap(values, ribbon)

# define and draw a sketch containing the objects
ribbons |> 
  sketch() |> 
  draw(xlim = c(-2, 2), ylim = c(-2, 2))
```

There is, as the young people say a lot to unpack here...

## Act I: A bitch learns S7

> Oh you people are slow. Bringing you up to speed is like trying to explain Norway to a dog <br>
> &nbsp; &nbsp; -- [Jackson Lamb](https://www.themonthly.com.au/issue/2022/april/craig-mathieson/slow-horses)

This whole thing started because I wanted to learn how to use the relatively new [S7 object oriented programming system](https://rconsortium.github.io/S7/) that is intended to serve as a successor to the informal-but-janky [S3](https://adv-r.hadley.nz/s3.html) system and the formal-but-painful [S4](https://adv-r.hadley.nz/s4.html) system that already exist within R.^[For folks outside of the R community: S3, S4, and S7 are all considered to be "functional" OOP systems, and they are broadly similar to function overloading in C++ and, I have recently learned, is also analogous to how methods are defined in Julia for functions of the same name but with different signatures. The functional style of OOP programming is one in which methods attach to generic functions (or to function names), as opposed to more traditional "encapsulated" OOP systems in which methods attach to objects. The encapsulated style is standard in Python, for example, and also appears in R via the [R6](https://adv-r.hadley.nz/r6.html) OOP system that I have used in other blog posts (e.g., [here](https://blog.djnavarro.net/posts/2022-12-22_queue/) and [here](https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/)). I mention these tiresome details because I have learned to my detriment that if I don't exhaustively list the various distinctions between OOP systems and how R adopts multiple styles, I *will* have to deal with tiresome people mansplaining to me how R is bad at OOP and how OOP in R is wrong and isn't *really* OOP and honestly I'm asleep before I finish reading the complaint.] It seemed like a very simple exercise when I started, but as with any exercise in learning a new thing I very quickly felt like a dog trying to understand Norway. 

Okay look. It's kind of like this. While eventually the plan is for S7 to become part of base R, right now it's a package so we'll have to load the package:

```{r}
library(S7)
```

Let's say I want to define a class that represents a circle. I can do that using the `new_class()` function:

```{r}
circle <- new_class(
  name = "circle", 
  properties = list(
    x = class_numeric,
    y = class_numeric,
    radius = class_numeric
  )
)
```

By doing so, I create a new function called `circle()` that I can call to create a new circle object. In the code below I create an object `cc` that -- at least in some abstract sense of the term -- corresponds to the unit circle:

```{r}
cc <- circle(x = 0, y = 0, radius = 1)
cc
```

Here we have a circle object that has three "properties" `x`, `y`, and `radius`. We can think of it as something broadly similar to a named list, but it has rules attached. In the class definition above I specified that `x`, `y`, and `radius` must be numeric values: they are allowed to be integers or doubles, but they can't be characters. Here's what happens if I try to create a circle with `radius = "big"`:

```{r}
#| error: true
circle(x = 0, y = 0, radius = "big")
```

So here we see something that we wouldn't normally have in, say, an S3 class:^[Or at least not without a lot of extra effort on the developer side.] the class definition explicitly says that the `radius` property must be numeric, so my `circle()` function throws an error if I foolishly try to pass it a non-numeric radius.

Okay so what's going on with these "properties"? Properties are analogous to "slots" in an S4 object^[In contrast S3 is so chaotically informal that it doesn't have any real notion of an "accessor" operator. Some S3 classes are atomic objects internally (e.g., a Date is simply a double with some attributes) and have no accessor operator, whereas others are lists internally and as such use `$` as the accessor.] and can be accessed using `@`:

```{r}
cc@radius
```

One nice thing about S7 is that you can modify (most) properties of an object directly. So if I want to update my `cc` object so that it now (nominally) represents a circle with radius 2, I can do this:^[Like S3 and S4 and like the vast majority of R objects, S7 objects have copy-on-modify semantics. This is distinct to environments and R6 classes which have reference semantics. But let's be honest, shall we? You either (a) already know this, (b) don't care, or (c) don't find this telegraphic explanation very helpful because it really isn't very helpful. My aims in this post are pretty limited so really if you want to wrap your head around this stuff a better bet is to read [Advanced R](https://adv-r.hadley.nz/).]

```{r}
cc@radius <- 2
cc
```


## Act II: Grid

## Act III: Ambient

