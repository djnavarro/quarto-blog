---
title: "s7"
description: "This is a subtitle"
date: "2024-02-22"
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

<!--------------- post begins here ----------------->

> At least within Bioconductor, slots are generally thought of as implementation detail that should not be directly accessed by the end-user. This leads to two problems. Firstly, implementing an S4 Bioconductor class often also requires a plethora of accessor functions that are a thin wrapper around @ or @<-. Secondly, users know about @ and use it to access object internals even though they’re not supposed to. S7 avoids these problems by accepting the fact that R is a data language, and that there’s no way to stop users from pulling the data they need out of an object. <br>
> &nbsp;&nbsp; -- The [S7 documentation](https://rconsortium.github.io/S7/articles/motivation.html)

So this is one of those posts where I talk about two things at the same time. On the one hand it is a post about the relatively new [S7 object oriented programming system](https://rconsortium.github.io/S7/) in R, and that's the fun part of the post. But it's something else too, and that something else is related to the little snippet from the S7 documentation I quoted above:

> There's no way to stop people from pulling data out of an object

In the context of R programming, this is a simple truism about how the language is designed. But it touches on something broader about what happens in real life when aspects to a person's private life ought to be "implementation details" of no direct relevance to anything in their public life, but you have no way to prevent that information from leaking from the private to the public.



