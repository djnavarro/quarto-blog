---
title: "Plotting data in Julia"
description: "Part three of this three-part series of Julia posts, in which I try to figure out how to draw some nice plots"
date: "2024-03-03"
categories: ["Julia", "Data Visualisation"]
jupyter: julia-1.10
--- 

<!--------------- post begins here ----------------->


And so we come to the third post in the authors extremely ill-considered foray into Julia. In the [first part](/posts/2024-03-01_julia-foundation/) of the series I taught myself some of the foundations for writing Julia code, in the [second part](/posts/2024-03-02_julia-data-frames/) I discussed data wrangling in Julia, and so in the third and -- dear god in heaven please -- last of them, I'll take a look at data visualisation using the [Plots](https://docs.juliaplots.org/latest/) package, and using [PalmerPenguins](https://juliapackages.com/p/palmerpenguins) as my data set.

It will be brief this time, right? Right????


::: {.column-margin}

![Olaf Stapledon. See, it's a Penguin science fiction book so it keeps to the penguins theme of this post and the sci-fi theme of the series. I'm soooooo clever](olaf-stapledon.jpg){fig-alt="Cover of 'Olaf Stapledon'"}

:::

## Penguins data


```{julia}
using CSV
using DataFrames
using Plots
using StatsPlots
```

Originally when I was playing around in Julia I used the [PalmerPenguins](https://juliapackages.com/p/palmerpenguins) package to import the penguins data, but I have been having some difficulty getting it to work properly in the quarto context (though in hindsight I think the problem was my Julia environment), so I've resorted to using a CSV file instead.


```{julia}
penguins = DataFrame(CSV.File("penguins.csv"; missingstring = "NA")) 
```

Indeed, that is a lot of penguins. Precisely what I was looking for.



::: {.column-margin}

![The Handmaids Tale, because obviously what every queer person and woman wants to be thinking about in 2024 is what's probably going to happen to us in the near future](handmaids-tale.jpg){fig-alt="Cover of 'The Handmaids Tale'"}

:::


## Scatter plots


I'll start with scatter plot. I could use `scatter()` here to avoid needing to set the seriestype
explicitly, but for learning purposes I find it a little easier to work with `plot()` for everything and control plot type via explicit attribute values:

```{julia}
plot(
  penguins.bill_length_mm, 
  penguins.bill_depth_mm, 
  seriestype=:scatter
)
```




## Using the `@df` macro

It's little awkward to refer to the `penguins` data frame repeatedly in this code, and so it's more convenient to use the `@df` macro:

```{julia}
@df penguins plot(
  :bill_length_mm,
  :bill_depth_mm,
  seriestype=:scatter,
  group=:species
)
```

Adding labels is achieved by modifying the relevant attributes:

```{julia}
@df penguins plot(
  :bill_length_mm,
  :bill_depth_mm,
  seriestype=:scatter,
  group=:species,
  title="Palmer Penguins",
  xlabel="Bill Length (mm)",
  ylabel="Bill Depth (mm)"
)
```




::: {.column-margin}

![The Day of the Triffids. Well, it's more optimistic than Handmaids Tale I guess](day-of-the-triffids.jpg){fig-alt="Cover of 'The Day of the Triffids'"}

:::


## Macros

Siiiiiiigh. Okay, I used a macro. Better take a quick look at how the hell those work, right? 



::: {.column-margin}

![The Earthsea Quartet. Much better!](earthsea.jpg){fig-alt="Cover of 'Earthsea: The First Four Books'"}

:::

## Violin plots

Filter rows that have missing bill lengths, because violin series can't handle missing values. Then we can create a violin plot

```{julia}
bill_lengths = penguins |> 
  d -> subset(d, :bill_length_mm => b -> .!ismissing.(b)) |>
  d -> select(d, [:species, :bill_length_mm])

@df bill_lengths plot(
    string.(:species),
    :bill_length_mm,
    seriestype=:violin,
    legend=false,
    xlabel="Species",
    ylabel="Bill Length (mm)"
)
```


::: {.column-margin}

![A science fiction omnibus. Yes I was getting lazy at this point](omnibus.jpg){fig-alt="Cover of 'Science Fiction Omnibus'"}

:::



