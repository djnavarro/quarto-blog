---
title: "Makefiles, or, the balrog and the submersible"
description: "Fly, you fools!"
date: "2023-06-23"
image: img/gothmog.jpg
image-alt: "Stylised art showing a balrog. The piece is called 'Gothmog at the Storming of Gondolin', and is CC-BY licenced by Tom Loback"
fig-cap-location: margin
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

<!--------------- post begins here ----------------->

I have a secret to confess: I have been writing code for over 20 years, and until about a month ago I have been loathe even to try descending into the depths of   [Make](https://en.wikipedia.org/wiki/Make_(software)). For too long I have feared catastrophic implosion should I be reckless enough attempt to dive into these dark waters. Even now, as the sunlight fades and I pass below the surface into the treacherous realm of Almost Competence, I can hear the ominous sounds of compressive stress upon my psyche. I imagine betentacled krakenlike beasts of this realm outside the hull, the whispers of their hunting cry seeping into my tiny enclosed space as they call to the balrogs of open source...

> Well *actually*...

...they hiss at me.

Drums, drums in the deep. I cannot get out. I shall have to complete this blog post in the hope that a wizard and his merry little troupe of clueless hobbits may one day discover the tale of my tragic descent.

<br>

![This piece is called 'Gothmog at the Storming of Gondolin', and is CC-BY licenced by Tom Loback](img/gothmog.jpg){fig-alt="Stylised art showing a balrog."}

<br>

## Farewell to those broad, Sunlit Uplands we loved so well

Every tragic narrative begins with a fatal mistake, the hubris of the doomed heroine making one terrible choice that seals her fate well before the story gets underway: in this case, deciding that now is the time to read a 1200 page book on C++. Absolutely cursed decision. There was no way I wasn't going to end up swallowed by a yawning hellmouth once that choice had been made. But as the saying goes, when descending into the abyss to be crushed by lovecraftian horrors, it's all about the journey and not the destination. 

Having opened the pages of the necronomicon, I first felt my soul turning toward the darkness as I considered the consequences of C++ being a compiled language, and my obsessive need to write my own code and take notes as I read the book. Barely one chapter in and I had written almost 50 baby C
++ programs, every one of them a helpless monster gnashing it's tiny teeth in ravenous hunger demanding to be compiled before it can do anything useful.

Oh no, my precious abominations, I told them. I already have human children to feed and care for, I'll not fall into the trap of lovingly passing each of you individually to the compiler for nurture and sustenance with bespoke hand crafted calls to clang++. That way lies madness and chaos. No, I shall hire a metaphorical nanny/butler/build-manager to feed you and compile you when you need compiling, to politely inform me each time a little C++ demon has grown into to a new binary file, and to take care of sundry other drudgeries with which I do not wish to be burdened.

And with that my doomed submersible slipped below the waves. 

## The decay of that colossal Wreck, boundless and bare

As the light fades away visions of my Ozymandian future cross my eyes. I imagine the Works that I will construct, upon which even the Mighty will gaze and despair. Hints of make targets that I will specify and the wonders that will get built with automations. 

Behold! 

I have written a `Makefile` for my side project, an spell to feed my tiresome C++ babies into the maw of clang++, and render my markdown inscriptions into graven html with pandoc. 

```{Makefile}
#| label: "learning-cpp-makefile"
#| file: "examples/learning-cpp-makefile"
#| code-line-numbers: true
#| column: body-outset
#| eval: false
```

It is not very impressive, I know. But it does work, and it does help. So perhaps I should say a little about how I got to there from here?

<br>

![The Ulysses mosaic at the Bardo Museum in Tunis, Tunisia (2nd century AD), depicting the temptation of Odysseus by the Sirens](img/odysseus-and-the-sirens.jpg){fig-alt="Mosaic depicting the temptation of Odysseus by the Sirens."}

<br>

## Love me while your wrists are bound (I'll be there when your reality drowns)

Let's begin at the beginning, and take account of a few important truths: 

- Everything I know about Makefiles is from [makefiletutorial.com](https://makefiletutorial.com). This post is not going to tell you anything you cannot find in Chase Lambert's lovely tutorial. 
- There are many alternatives to Make. I've seen many projects use  [CMake](https://cmake.org/) for build automation, for example. Alternatively, if you're working in R you might prefer to use the [targets](https://docs.ropensci.org/targets/) package by Will Landau ([user manual here](https://books.ropensci.org/targets/)). There is nothing particularly special about Make per se that made me decide to learn it: it just happens to be a thing that has been around for a long time, and it was irritating me that I didn't know how to use it.
- Like all things created by humans, it is cursed. Makefiles are indeed the Night That is Dark and Full of Terrors. The red priestesses warned us. 

The blood that circulates through the beating heart of every Makefile are its **targets**. Each target is defined using syntax that looks something like this:

```{Makefile}
#| eval: false
targets: prerequisites
	command
	command
	command
```

A concrete example might look like this:

```{Makefile}
#| eval: false
bin/collatz: src/collatz.cpp
    clang++ --std=c++20 src/collatz.cpp -o bin/collatz
```
    
For this target:

- `bin/collatz` specifies the name of the target, and by convention the target name is identical to the name of the file to which it refers (in cases where the target monitors a single output file, that is)
- `src/collatz.cpp` is a prerequisite file. If the `src/collatz.cpp` file has been modified more recently than the `bin/collatz` file created by the compilation command underneath, then that command will be executed when `make` is called
- The third line is a shell command. In this instance, the command takes the `src/collatz.cpp` source file and uses clang to compile it to a binary executable file `bin/collatz`. (The `--std=c++20` flag indicates that C++ version 20 should be assumed)
    
It seems simple enough. The top level command provides the name of the target, with (optionally) a set of **prerequisites** associated with that target. The prerequisites are critical: the **commands** listed below the `targets: prerequisites` line will only be executed when one or more of the prerequisites has changed. This is the mechanism by which a Makefile can be used to track the dependencies among the various files in your project.

It seems lovely, does it not? Of course it does my sweet Odysseus. You're listening to the Sirens, and fortunate indeed that your loved ones have tied you to the mast to prevent you from casting yourself overboard and drowning.

> *"But Danielle, this seems so simple! It is lovely, alluring and sweet. I see no sign of eldritch horrors or evil creatures lurking in the depths here"*

You say that, so I presume that you have absolutely taken note of the fact that that the `command` lines in the code snippet above are indented with tabs and not spaces, yes? Those tabs are like little glass knives buried in the sand beneath your soft, bare feet. Make does not recognise spaces as indentations, and commands must be indented. You must use tabs for indentations when you use Make. 

> *"But Danielle, my IDE is set to automatically convert tabs to spaces! This is going to mess me up and now I have to faff about making exceptions for specific files"*

Indeed. Don't say I didn't warn you. Build automation is so so sweet, but This Syntax is Cursed. Nevertheless, let's sip from the poisoned chalice and try writing a simple Makefile anyway. Perhaps we won't die. 

## Basic Makefiles, Act I: The flickering flames of unextinguished hope

```{bash}
#| echo: false
#| results: hide
cd ./examples/version1
make clean
cd ../..
```

Here's a very simple project:

```{r}
fs::dir_tree("./examples/version1", all = TRUE)
```

Let's look at its Makefile:

```{Makefile}
#| label: "makefile-1"
#| file: "examples/version1/Makefile"
#| code-line-numbers: true
#| eval: false
```

To invoke this Makefile, assuming that the working directory is set to the project root folder and our file is named `Makefile` or `makefile`, all we have to do is type `make` at the command line. Normally that wouldn't require us to change directories, because usually we're working from the project folder, but because this is a blog post that contains several subprojects that each contain their own Makefile, the hidden bits of my code includes some boring bash commands used to change directories. Whatever

Let's see what horrors escape our little Pandora's box, shall we?

```{bash}
#| eval: false
make
```

```{bash}
#| echo: false
cd ./examples/version1
make --no-print-directory
cd ../..
```

Okay, let's look at the state of our project now:

```{r}
fs::dir_tree("./examples/version1", all = TRUE)
```

To be precise about what happened here, I invoked `make` without specifying a target to build. When that happens, `make` will use the first target in the file: in this case, "all". However, because the "all" target is nothing other than a list of *other* targets that need to be built, what ends up happening is that `make` builds all those targets. Traditionally, this top-level target is called `all`, and it includes all the other targets needed to build the whole project. 

What happens if you want to burn it all down and revert to the initial (unbuilt) state of the project? `make` doesn't provide that functionality automatically, but it is traditional for writers of makefiles to include a target called `clean` that includes commands that will perform this clean up job for you (don't include "clean" in the list of "all" targets, obviously: that would defeat the point entirely). For this project, clean up is really simple: delete the `bin` folder and everything in it! 

To perform cleanup then, all we have to do is type `make clean` to invoke the "clean" target:

```{bash}
#| eval: false
make clean
```

```{bash}
#| echo: false
cd ./examples/version1
make clean --no-print-directory
cd ../..
```


And, just like that, we are back to the clean (unbuilt) state for our project:

```{r}
fs::dir_tree("./examples/version1", all = TRUE)
```


## Basic Makefiles, Act II: The seeping sense of silent dread in your bones

```{bash}
#| echo: false
#| results: hide
cd ./examples/version2
make clean
cd ../..
```

For the second version, we have a project with the same structure:

```{r}
fs::dir_tree("./examples/version2", all = TRUE)
```

However, our makefile now uses rules:

```{Makefile}
#| label: "makefile-2"
#| file: "examples/version2/Makefile"
#| code-line-numbers: true
#| eval: false
```

The results are the same:

```{bash}
#| eval: false
make
```

```{bash}
#| echo: false
cd ./examples/version2
make --no-print-directory
cd ../..
```

```{r}
fs::dir_tree("./examples/version2", all = TRUE)
```

```{bash}
#| echo: false
#| results: hide
cd ./examples/version2
make clean
cd ../..
```



## Basic Makefiles Act III: When you paper over cracks in the walls you can still see the unseelie beasts writhing within 

```{bash}
#| echo: false
#| results: hide
cd ./examples/version3
make clean
cd ../..
```

The third version is again the same in structure. But we now use `@` to prevent commands from echoing to the terminal, and instead write our own messages:

```{Makefile}
#| label: "makefile-3"
#| file: "examples/version3/Makefile"
#| code-line-numbers: true
#| eval: false
```

The same events take place, but the result is prettier:

```{bash}
#| eval: false
make
```

```{bash}
#| echo: false
cd ./examples/version3
make --no-print-directory
cd ../..
```


```{bash}
#| echo: false
#| results: hide
cd ./examples/version3
make clean
cd ../..
```


## Recursion is the death of hope, the catastrophic implosion of Makefiles


```{Makefile}
#| label: "makefile-this-post"
#| file: "Makefile"
#| code-line-numbers: true
#| eval: false
```

When I call `make` on clean build I get this output 

```

[ making subproject v1 ]
mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap

[ making subproject v2 ]
mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap

[ making subproject v3 ]
compiling src/collatz.cpp to bin/collatz
compiling src/species.cpp to bin/species
compiling src/swap.cpp to bin/swap

[ rendering quarto document ]

```

When I call `make clean` it produces this:

```

[ cleaning subprojects ]
rm -rf bin
rm -rf bin
deleting binary files

[ deleting quarto output ]

```


There's some spectacularly unpleasant self-reference going on in all this because the quarto render for this document necessarily requires clean-and-remake for the subprojects, and this makes some things a tiny bit difficult for `make`. But this isn't a typical case for `make`: what I'm doing here is creating a makefile for this quarto document that renders this quarto document and recursively calls the makefiles for the subprojects... but at the same time this quarto document messes with the make status of the various subprojects. Not something I would do in the normal course of events, obviously. Anyway, the long and short of it is that with this makefile you have to call make twice in order to produce this as the output:

```

[ making subproject v1 ]
mkdir -p ./bin

[ making subproject v2 ]
mkdir -p ./bin

[ making subproject v3 ]

```

Basically, because this very quarto document is (on purpose!) fucking with the make status of the subprojects, calling make on this quarto post wreaks havoc on the make status of those subproject if (and only if) the top-level make file decides it needs to re-render this post. Suffice it to say this is not an ordinary use of make. Big picture? Weirdness abounds when some parts of your build are devolved to quarto (which implicitly calls make), and other parts are devolved to make (which implicitly calls quarto). Neither quarto nor make have the ability to track that kind of indirect recursion. 

