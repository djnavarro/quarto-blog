---
title: "Working with data in Julia"
description: "Part two of a three-part series on Julia, in which the author teaches herself the basics of wrangling rectangular data in Julia"
date: "2024-03-02"
categories: ["Julia", "Data Wrangling"]
jupyter: julia-1.10
--- 

```{julia}
#| include: false
using Pkg
Pkg.activate("sandbox");
```

<!--------------- post begins here ----------------->


This is the second of an impromptu three-part series in which, in a decision I am rapidly starting to regret as these posts get longer and longer, I decided it was time to teach myself how to use Julia. In the [first part](/posts/2024-03-01_julia-foundation/) of the series I looked at some foundational concepts (types, functions, pipes, etc), though in a completely idiosyncratic way and ignoring concepts that I find boring (loops, conditionals). I mean, this is a blog where I write "notes to self". It's not a textbook.

Anyway... my thought for the second part of the series is to shift away from core programming concepts and instead look at a practical task that data analysts have to work with on a daily basis: wrangling rectangular data sets. In other words, I'm going to talk about data frames and tools for manipulating them. 

::: {.column-margin}

![[Mass Effect 1](https://www.deviantart.com/lagota/art/Mass-Effect-1-Final-Poster-295106207). By user [lagota](https://www.deviantart.com/lagota) on Deviant Art, released under a CC-BY-NC-ND licence. The astute observer will notice that at no point in this post does the main text reference the *Mass Effect* games. But I don't care, because they are awesome.](mass-effect-1.jpg){fig-alt="Reimagined Mass Effect 1 cover showing the Normandy departing the Citadel"}

:::

## Creating data frames

Unlike R, Julia doesn't come with a native class to represent data frames. Instead, there is the [DataFrames](https://dataframes.juliadata.org/stable/) package which provides the functionality needed to represent tabular data. The `DataFrame()` function allows you to manually construct a data frame, with a syntax that feels very familiar to an R user. Vectors passed as inputs to `DataFrame()` must all have one element for every row in the data frame, or else be length one. 

Continuing the vague science fiction theme that started in the previous post, I'll start by constructing a small data frame listing the novels from William Gibson's *Sprawl* trilogy, which I enjoyed considerably more than Asimov's *Foundation* series that (very very loosely) inspired the TV show of the same name. Anyway, here's how you do that:

```{julia}
using DataFrames

sprawl = DataFrame(
  title = ["Neuromancer", "Count Zero", "Mona Lisa Overdrive"],
  published = [1984, 1986, 1988], 
  author = "William Gibson"
)
```

Data frames have pretty print methods so the output looks quite nice here. But internally it's essentially a collection of vectors, one for each column. For example, `sprawl.title` is a vector of three strings:

```{julia}
sprawl.title
```

In real life though, you don't usually construct a data frame manually. It's more typical to import a data frame from a CSV file or similar. To that end, we can take advantage of the CSV package to read data from a data file:

```{julia}
using CSV
starwars_csv = CSV.File("starwars.csv"; missingstring = "NA");
```

This `starwars_csv` object isn't a data frame yet, it's an object of type CSV.file. Data frames are *columnar* data structures (i.e., a collection of vectors, one per column), whereas a CSV.file is a *rowwise* data structure (i.e., a collection of CSV.row objects, one per row). You could test this for yourself by taking a look at the first element `starwars_csv[1]` to verify that it's a representation of a single CSV row, but the output isn't very interesting so I'm going to move on.

To convert this CSV.file object to a DataFrame object, we can simply pass it to `DataFrame()`, and this time around the data we end up with is a little bit richer than the last one (even if the *Star Wars* movies are incredibly boring compared to the infinitely superior *Sprawl* novels...)

```{julia}
#| column: page
starwars = DataFrame(starwars_csv)
```

## Subsetting data frames I

The core tools for working with data frames in Julia feel quite familiar coming from either Matlab or R. You can subset a data frame by passing it numeric indices, for instance:

```{julia}
starwars[1:6, 1:5]
```

However, there are other methods for subsetting a data frame. You can also filter the rows of a data frame using logical expressions. Again, this is quite similar to how it works in base R. For instance, I can construct a boolean vector `fair_skinned` which indicates whether the corresponding row in `starwars` refers to a person with fair skin:^[As an aside, notice that I've used `.==` rather than `==` as the equality test. This is because `==` is a scalar operator: it doesn't work for vectors unless you broadcast it using `.`]

```{julia}
fair_skinned = starwars.skin_color .== "fair";
```

Now that I have these indices, I can create a subset of the data frame containing only those rows referring to fair skinned person (or robot, or...)

```{julia}
starwars[fair_skinned, 1:5]
```

On the columns side, we also have more flexible options for subsetting a data frame. For example, instead of referring to columns using numerical indices, we can select the variables that we want to keep using their names:

```{julia}
starwars[1:6, [:name, :gender, :homeworld]]
```

Referring to columns by name is very handy in practice, and there's some hidden Julia concepts here that I didn't talk about in the last post. So with that in mind I'll digress slightly to talk about...

## Symbols

Looking at the syntax in the last code cell, it's fairly clear that `[:name, :gender, :homeworld]` is a vector of three... somethings, but it's not immediately obvious what `:name` actually is. Much like R (and also inherited from Lisp) Julia has extensive [Metaprogramming](https://docs.julialang.org/en/v1/manual/metaprogramming/) capabilities because it has the ability to represent Julia code as data structures within the language itself. In the simplest case, we have [Symbols](https://docs.julialang.org/en/v1/base/base/#Core.Symbol) like `:name`, which are constructed using the quotation operator `:` and used to represent object names. So as you can see, `:name` is an object of type Symbol:

```{julia}
typeof(:name)
```

Symbols can be assigned to variables, and those variables can be used as part of expressions to be evaluated. In the code below I create a variable `colname` that stores the symbolic representation of a column name that I can invoke later:

```{julia}
colname = :title
```

As a simple example of how symbols can be used in practice, here's a Julia implementation of something like the `pull()` function in the R package dplyr, which allows the user to extract a single column from a data frame:

```{julia}
function pull(data::DataFrame, column::Symbol)
  getproperty(data, column)
end;
```

In this code I'm using the `getproperty()` function to do the same job that the `.` operator would do in an expression like `sprawl.title`. So here it is in action:

```{julia}
pull(sprawl, :title)
```

I know, it's exciting right?

Okay yeah, at the moment this `pull()` function isn't very useful at all -- `pull(sprawl, :title)` is really not an improvement on `sprawl.title` -- but a little bit later when I get around to talking about data wrangling pipelines it might turn out to be a little less silly. 


::: {.column-margin}

![[Mass Effect 2](https://www.deviantart.com/lagota/art/Mass-Effect-2-Final-Poster-294884760). By user [lagota](https://www.deviantart.com/lagota) on Deviant Art, released under a CC-BY-NC-ND licence. Still the strangest of the three games: the main storyline with the Collectors is a hot mess, but it has the best side quests in the series, and the best romance too (Thane, obviously...)](mass-effect-2.jpg){fig-alt="Reimagined Mass Effect 2 cover showing the Normandy attacked by a Collector ship"}

:::


## Subsetting data frames II

Anyway, getting back on track, the key thing to realise is that when I wrote `[:name, :gender, :homeworld]` earlier what I was really doing is constructing a vector of symbols, and it's those symbols that I was using to select the columns that I wanted to retain. The DataFrames package also supplies a various selector functions that can be used to extract a subset of the columns. For example, `Not()` will select every column except the ones that are passed to `Not()`. So if I want to drop the hair color, eye color, sex, and homeworld columns, I could do this:

```{julia}
starwars[1:6, Not([:hair_color, :eye_color, :sex, :homeworld])]
```

The `Between()` selector does what you'd think. It returns all columns in between two named columns:

```{julia}
starwars[1:6, Between(:sex, :homeworld)]
```

There's also an `All()` selector that returns all columns, but that's not super exciting. More interesting, I think, is the `Cols()` selector which takes a predicate function as input.^[In this context, a predicate function is just one that returns `true` or `false`.] The column names are passed to the function, and they are included in the output if that function returns `true`. So, for example, if I want to extract the columns in the data whose name ends in `"color"` I can do this: 

```{julia}
starwars[1:6, Cols(x -> endswith(x, "color"))]
```

I find myself liking these selector functions. Coming from the tidyverse style in R where tidyselect is used to govern column selection it feels... not terribly different. Superficially different, perhaps, but the combination of `All()`, `Not()`, `Between()`, and `Cols()` seems to provide a fairly powerful and (I think?) user-friendly way to select columns.

::: {.column-margin}

![[Mass Effect 3](https://www.deviantart.com/lagota/art/Mass-Effect-3-Final-Poster-290367120). By user [lagota](https://www.deviantart.com/lagota) on Deviant Art, released under a CC-BY-NC-ND licence. No, I will not be drawn into expressing a comment on the ending. I love ME3, in part because every Shepard I've ever played comes into this game already completely broken and makes unhinged choices because of it...](mass-effect-3.jpg){fig-alt="Reimagined Mass Effect 3 cover showing the Normandy facing a fleet fo reapers"}

:::

## Data wrangling I: groupby, combine

Up to this point I haven't really done any data wrangling with the `starwars` data. Okay, yeah, to some extent there's some data wrangling implied by the discussion of subsetting in the previous sections, but in truth none of that is how you'd normally go about it in a more real-world context. So to that end I'll talk about some of the data wrangling functions that DataFrames supplies. 

Let's start with something simple, and not very useful. Suppose what I want to do here is group the data by gender *and* sex, and then for every unique combination of gender and sex that appears in the data set have Julia pick one row at random and report the corresponding mass. To do that is a two step operation. First, I need to use `groupby()` to describe the groups, and then I need to call `combine()` to tell Julia what function to apply separately for each group. This does the trick:

```{julia}
combine(groupby(starwars, [:gender, :sex]), :mass => rand) 
```

In the call to `groupby(starwars, [:gender, :sex])` what Julia does is construct a grouped data frame (very similar to what you expect in R, really), and then this grouped data frame is passed to `combine()`. For each such group, we take the relevant subset of the `:mass` column and pass it to the `rand()` function, and by doing so a random mass is returned. 

There's some obvious limitations to note in my code here though. Firstly, I'm not using the pipe `|>` at all, and while it's sort of fine in this context because there's only two steps in my data wrangling exercise, the code is going to get very ugly very quickly if I try to do something fancier.^[The other issue is that my code doesn't handle missing data gracefully, but that will come up later so I'm ignoring it for now.] So let's start by fixing this. 

As I mentioned in the first post in this series, one way I could transform this into a pipeline is to use the [Pipe](https://juliapackages.com/p/pipe) package, which supplies a pipe that behaves very similarly to the base pipe in R. However, I'm not going to do that. Instead, I'm going to adopt a workflow where I use the Julia base pipe together with anonymous functions. Here's the same code expressed in this kind of pipeline:

```{julia}
starwars |>
  d -> groupby(d, [:gender, :sex]) |>
  d -> combine(d, :mass => rand)
```

I genuinely wasn't expecting this when I first learned about the restrictiveness of the Julia pipe, but I think I really like this syntax. Because you *have* to define an anonymous function at each step in the pipeline, I find noticing that: 

- It's only slightly more verbose than the R style, and has the advantage (to my mind) that you can use this workflow without having to think too much about Julia macros
- The input argument (in this case `d`) serves the same role that the placeholder (`_` for the R base pipe and the Julia "Pipe-package-pipe", or `.` for the R magrittr pipe)
- You have the ability to subtly remind yourself of the internal workings of your pipeline by naming the input argument cleverly. If the input to this step in the pipeline is a data frame I tend to call the input argument `d`, but if -- as sometimes happens in real life -- at some point in the pipeline I pull out a column and do a bit of processing on that before returning the results, I might find it handy to use something else to remind myself that this step is applied to string variables. 

As regards that third point, here's an example using the `pull()` function that I defined earlier that does exactly this:

```{julia}
starwars |>
  d -> subset(d, :skin_color => x -> x.=="fair") |>
  d -> pull(d, :name) |>
  n -> map(x -> split(x, " ")[1], n)
```

Again, not the most exciting pipeline in the world -- all I'm doing is returning the first names of all the fair-skinned characters -- but it does highlight the fact that the combination of base pipe and anonymous function syntax in Julia works rather well if you're inclined to write in this style.

In fact, the ability to name the input argument is especially helpful in the last line of the pipe where there are two separate functions being used, one of which is a call to `map()` applied to the `:name` column (and takes `n` as the input), and another that is used by `map()` when extracting the first name out of every name (where I've unimaginatively used `x` to name my input).

In any case, though it may not be to everyone's tastes, I've found a pipe-centric style that I can use in Julia that I don't mind, so it's time to move on and look at some other functions available in the DataFrames package.

## Data wrangling II: subset, select, sort

In the previous section I gave an example of a workflow that uses `groupby()` and `combine()` to compute summaries of a data frame. But there are other functions that come in very handy for data wrangling: I can use `subset()` to choose a subset of rows^[There is also `filter()` which has a slightly different syntax.], `select()` to choose a subset of columns, and `sort()` to order the rows according to some criterion. For example, here's how I could find all the characters from Tattooine and sort them by weight:

```{julia}
starwars |> 
  d -> select(d, [:name, :mass, :homeworld]) |>
  d -> subset(d, :homeworld => h -> h.=="Tatooine", skipmissing=true) |>
  d -> sort(d, :mass)
```

Notice that this time I've been a little smarter about handling missing values. In the call to `subset()` I specified `skipmissing=true` to drop all cases where the homeworld is missing. The `sort()` function doesn't have a `skipmissing` argument, so the results include the two cases where someone from Tatooine doesn't have a stated weight. But hopefully it's clear that I could easily subset the data again to remove any cases with missing values on the `:mass` column if I wanted to. In fact, the DataFrames package supplies functions `dropmissing()`, `allowmissing()`, and `completecases()` that could be used for that purpose. For example:

```{julia}
starwars |> 
  d -> select(d, [:name, :mass, :homeworld]) |>
  d -> subset(d, :homeworld => h -> h.=="Tatooine", skipmissing=true) |>
  d -> sort(d, :mass, rev=true) |>
  d -> dropmissing(d, :mass)
```

The missing `:mass` rows are now gone, and -- just for my own personal amusement -- this time I've sorted the results in order of descending weight by setting `rev=true`.

::: {.column-margin}

![[Star Wars](https://www.deviantart.com/lagota/art/Stay-in-attack-position-526775903). By user [lagota](https://www.deviantart.com/lagota) on Deviant Art, released under a CC-BY-NC-ND licence. If I had more Mass Effect images to use here I would but alas, I do not.](star-wars-1.jpg){fig-alt="Star wars X-wing and tie-fighters in front of the Death Star"}

:::


## Data wrangling III: stack

Okay, now it's time to start thinking about how to reshape a data frame in Julia. Consider this, as the beginnings of a pipeline:

```{julia}
starwars |>
  d -> select(d, [:name, :eye_color, :skin_color, :hair_color])
```

Suppose what I want to do is transform this into a data set that has variables `:name`, `:body_part`, and `:color`. In other words I want to pivot this into a long-form data set where each character is represented by three rows, and has one row that specifies the colour of the relevant body part. We can do this with the `stack()` function:

```{julia}
starwars |>
  d -> select(d, [:name, :eye_color, :skin_color, :hair_color]) |>
  d -> stack(d, [:eye_color, :skin_color, :hair_color],
    variable_name=:body_part,
    value_name=:color
  )
```


## Data wrangling IV: unstack

We can also go the other way. Let's start with a slightly different data frame called `census`, one that counts the number of characters of each species on each homeworld

```{julia}
census = starwars |> 
  d -> dropmissing(d, [:homeworld, :species]) |>
  d -> groupby(d, [:homeworld, :species]) |> 
  d -> combine(d, :name => (n -> length(n)) => :count)
```

So now, if I wanted a version of this data set with one row per `:homeworld` and a column for each `:species` that contains the `:count` of the number of characters of that species on the corresponding world, I could use `unstack()` to pivot from long-form to wide-form data like this:

```{julia}
#| column: page
unstack(census, :species, :count, fill=0) 
```

Here I've specified `fill=0` to indicate missing values should be replaced with zeros, which is very sensible in this case because if there are no characters with a particular species/homeworld combination there wouldn't be a row in `census`. Also, because I can, here's a version that appears in a pipeline where I return only a subset of species, and -- in act of appalling xenophobia -- consider only planets inhabited by at least one human character:

```{julia}
census|>
  d -> unstack(d, :species, :count, fill=0) |>
  d -> select(d, [:homeworld, :Human, :Droid, :Ewok, :Wookiee, :Hutt]) |>
  d -> subset(d, :Human => h -> h .> 0)
```

Hm. Not sure what those results say about the willingness of humans to mix with other species in the *Star Wars* universe but it's probably not good to reflect on it too much.

::: {.column-margin}

![[Also Star Wars](https://www.deviantart.com/lagota/art/Dont-be-like-your-father-243841640). By user [lagota](https://www.deviantart.com/lagota) on Deviant Art, released under a CC-BY-NC-ND licence.](star-wars-2.jpg){fig-alt="Darth Vader, with the slogan 'Don't be like your father'"}

:::
## Data wrangling V: transform

In all honesty I am getting exhausted with this post, and mildly irrited at the fact that I've spent so much time in the *Star Wars* universe rather than in a fictional universe that I actually enjoy. So it's time to start wrapping this one up. There's only one more topic I really want to mention and that's the `transform()` function which you can use to add new columns to a data frame. 

```{julia}
starwars[1:6, [:name]] |> 
  d -> transform(d, :name => (n -> n.=="Darth Vader") => :lukes_father)
```

There. It's done. 

## Wrap up

No. Just no. There was already a [first post](/posts/2024-03-01_julia-foundation/) and there's about to be a [third post](/posts/2024-03-03_julia-plots/). I am not being paid for this and I do not have the energy to think of a witty and erudite way to wrap up the unloved middle child of the trilogy. So let us never speak of this again.


<!-- https://www.deviantart.com/lagota/art/The-illusive-man-306521415 -->
![](illusive-man.png)










