---
title: "Passing Arrow data between Python and R with rpy2"
description: "Part two of the data-sharing post. An approach to sharing Arrow Tables between R and Python, using the rpy2 Python module in place of the reticulate R package. The same goal is achieved, using a slightly more Pythonic toolkit"
date: "2022-09-02"
categories: [Apache Arrow, R, Python]
image: "img/cover.jpg"
jupyter: python3
---

<!-- 
cover img: https://unsplash.com/photos/C4sxVxcXEQg
artist: Reuben Juarez
licence: unsplash free-to-use 
-->

<!-- 
# bash commands to build this post
conda activate continuation
cd ~/GitHub/sites/quarto-blog/posts/2022-09-02_arrow-and-rpy2
quarto render index.qmd --execute-daemon-restart
-->

In the [last post on this blog](/posts/2022-09-01_reticulated-arrow/) I showed how Apache Arrow makes it possible to hand over data sets from R to Python (and vice versa) without making wasteful copies of the data. 

The solution I outlined there was to use the [reticulate](https://rstudio.github.io/reticulate/) package to conduct the handover, and rely on Arrow tools both sides to manage the data. In one sense it's a perfectly good solution to the problem... but it's a solution tailor made for R users who need access to Python. When viewed from the perspective of a Python user who needs access to R, it's a little awkward to have an R package (reticulate) governing the handover.^[Relatedly, if you're a Python user blogging in quarto, you are very unlikely to be using the [knitr engine](https://quarto.org/docs/reference/cells/cells-knitr.html) to execute code like I did in the last blog post. Instead you're almost certainly using the [jupyter engine](https://quarto.org/docs/reference/cells/cells-jupyter.html). With that in mind, and with the goal of making this post a little more Pythonic, I'm using Jupyter this time.] Perhaps we can find a more Pythonic way to approach this?

A solution to our problem is provided by the [rpy2 module](https://rpy2.github.io/) that provides an interface to R from Python, and the [rpy2-arrow extension module](https://rpy2.github.io/rpy2-arrow/version/main/html/index.html) that allows it to support Arrow objects. Let's take a look, shall we?

In writing this post I am heavily indebted to Isabella Vel√°squez, whose fabulous post on [calling R from Python with rpy2](https://rviews.rstudio.com/2022/05/25/calling-r-from-python-with-rpy2/) helped me immensely. The [documentation on integrating PyArrow with R](https://arrow.apache.org/docs/python/integration/python_r.html) was extremely helpful too!

## Setting up the Python environment

For the purposes of this post I'll create a fresh conda environment that I'll call "continuation", both because this post is a continuation of the previous one and because the data set I'll use later is called "To Be Continued...". I was able install most packages I need through conda-forge, but for rpy2 and rpy2-arrow I was only able to do so from pypi so I had to use pip for that. So the code for setting up my Python environment was as follows:

``` bash
conda create -n continuation
conda install -n continuation pip pyarrow pandas jupyter
conda activate continuation
pip install rpy2 rpy2-arrow
```


## Introducing rpy2

This just imports the package

```{python import-rpy2}
import rpy2
rpy2.__version__
```

Importing the robjects submodule also starts the embedded R session:

```{python import-robjects}
import rpy2.robjects as robjects
```

Normally you'd see a more verbose startup message from R but I prefer to keep mine quieter so all it does is print the version string and a pretty little rainbow. 

Meanwhile let's going with some packages. Importing the packages submodule gives us acces to `importr()`, which is allows us to load pacakges inside the R session:

```{python import rpackages}
import rpy2.robjects.packages as rpackages

base = rpackages.importr("base")
utils = rpackages.importr("utils")
```

Once we have access to utils we can call the native R function `install.packages()` to install additional packages from CRAN. A fun example:

``` python
utils.install_packages("fortunes")
```

Let's sample a fortune 

```{python use-fortunes}
fortunes = rpackages.importr("fortunes")
fortune = fortunes.fortune(3)
print(fortune)
```


## About the data 

The data set for this post comes from the [To Be Continued](https://cdhrdatasys.anu.edu.au/tobecontinued/) database of fiction published in Australian newspapers during the 19th and early 20th century. Originally collected using the incredibly cool [Trove](https://trove.nla.gov.au/) resource run by the National Library of Australia, it's released under a CC-BY-4.0 licence and maintained by Katherine Bode and Carol Hetherington. 

```{python panda-read-csv}
import pandas as pd
fiction = pd.read_csv("newspaper-fiction.csv", low_memory = False)
fiction.head()
```


## Panda to Arrow Table

 
```{python arrow-fiction}
import pyarrow
pyarrow_fiction = pyarrow.Table.from_pandas(fiction)
pyarrow_fiction
```


## Passing Tables from Python to R

This is done with the [rpy2-arrow module](https://rpy2.github.io/rpy2-arrow/version/main/html/index.html)

```{python use-rpy2-arrow}
import rpy2_arrow.pyarrow_rarrow as pyra

rarrow_fiction = pyra.pyarrow_to_r_table(pyarrow_fiction)
rarrow_fiction
```

## Calling R code 

```{python py-dplyr}
%load_ext rpy2.ipython
```

```{python call-r}
%%R
suppressMessages({
  library(dplyr)
  library(arrow)
})
```

```{python more-r, results='asis'}
%%R -i rarrow_fiction
gender <- rarrow_fiction |> 
  count(Gender) |>
  compute()
  
gender
```


## Passing Tables from R to Python

Earlier we imported `robjects` to start the embedded R session. We can access the R objects using `robjects.r`. For example:

```{python return-r-to-python}
r_gender = robjects.r('gender')
r_gender
```

Note that the `r_gender` variable refers to the Arrow Table in R. It's not a pyarrow table. We can use pyra to make the converson:

```{python convert-gender}
py_gender = pyra.rarrow_to_py_table(r_gender)
py_gender
```

## Back to Pandas

If we really want to, we can now convert this back to a Pandas DataFrame

```{python pygender-to-panda}
panda_gender = pyarrow.Table.to_pandas(py_gender)
panda_gender
```
