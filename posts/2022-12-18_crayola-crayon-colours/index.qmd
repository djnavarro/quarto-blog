---
title: "Crayola crayon colours"
description: "Am I bored in the house? Yes. And am I in the house bored? Also yes. But do I have rvest and a stubborn desire not to allow the horrors of 'data encoded in the CSS style' to defeat me? Oh my yes"
date: "2022-12-18"
categories: [R, Data Wrangling, Data Visualisation]
image: "crayola.png"
---

<!--------------- my typical setup ----------------->

```{r setup, include=FALSE}
long_slug <- "2022-11-38_crayla-crayon-colours"
#renv::use(lockfile = "renv.lock")
wide <- 136
narrow <- 76
options(width = narrow)
```


<!--------------- post begins here ----------------->

What am I doing? Why am I here? Oh that's right. So I was having coffee this morning reading the nerd news on mastodon as a girl likes to do and this [this very cool post about crayon colours](https://mas.to/@kims/109525496705672156) by Kim Scheinberg caught my attention. 

![](crayola_toot.jpg){fig-align="center" width="75%"}

The image comes from [this blog post](http://www.datapointed.net/2010/01/crayola-crayon-color-chart/) by Stephen Von Worley -- he has a [follow up](http://www.datapointed.net/2010/10/crayola-color-chart-rainbow-style/) too. Interesting. I realise I am of course about to waste half a day on this...

## It's the prologue, baby

Having read the blog posts by Von Worley I worked out that the source of the data is the Wikipedia [list of Crayola crayon colours](https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors), and as it happens I know how to pull data from Wikipedia tables into R. Thanks to [this amazing post](https://ivelasq.rbind.io/blog/politely-scraping/) by Isabella Velásquez, I'd learned all about using the [polite](https://dmi3kno.github.io/polite/) package to make sure that my webscraping is appropriate and respectful, and using the [rvest](https://rvest.tidyverse.org/) package to do the actual scraping. What I had assumed, is that reading the table into R was going to be a simple matter of writing some code like this...

```{r polite_scrape}
url <- "https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors"
raw <- url |>
  polite::bow() |>
  polite::scrape() |>
  rvest::html_nodes("table.wikitable")
```

This scrapes all the tables from the page, but I only want the first one. That's the big table with the listing of Crayolas standard colours. The table itself looks a little like this:

```{r raw_1}
raw[[1]]
```

I don't want to parse the html myself, but the hope is that I can use something like the `html_table()` function to extract the table and return a data frame. Okay, let's give it a go...

```{r standard-colours}
crayola <- raw[[1]] |> rvest::html_table()
```

Well it hasn't thrown an error, but when I look at the `crayola` data frame...

`r options(width = wide)`

```{r}
#| column: page
crayola
```

`r options(width = narrow)`

... I encounter a rather awkward problem. The `color` field, which renders on the Wikipedia page as a pretty block of colour showing what the crayon colour looks like, is empty. Sure, I do have text containing hex codes for some of the crayons, but the missing data isn't missing at random. Old crayon colours are the ones systematically missing an official hex code. Okay, so I really would like to have some data in my `color` column.

## Act I: I think it works like the hanky code

Look, that's not a big deal right? Not having any colours for a post about colours? I guess the post will be short. Eh. Let's set that aside and focus on the important things. Those column names need a little cleaning, so I'll do the thing I always do and break out [janitor](https://sfirke.github.io/janitor/) and [dplyr](https://dplyr.tidyverse.org/): 

```{r tidy-names}
crayola <- crayola |>
  janitor::clean_names() |>
  dplyr::rename(
    listed = hexadecimal_in_their_website_depiction_b,
    years = years_in_production_2
  )
```

Much nicer:

`r options(width = wide)`

```{r}
#| column: page
crayola
```

`r options(width = narrow)`

Now where was I? What's that maxim about never using background colour to encode substantive data in a table? I seem to have run afoul of that. Let's take a look at the elements of the html table and see if I can work out where things went wrong...

```{r cell-nodes}
cells <- raw[[1]] |> rvest::html_elements("td")
cells
```

Okay yeah. You can see the problem looking at the 1st and 10th line of the output here. The piece of information we need is embedded in the css style attribute, and it's *only* in the style metadata attribute. There's no data in the actual "td" element for `html_table()` to capture. I'm going to have to fix that myself I guess. Sigh.

The first part of my process was to find the relevant subset of cells. There's probably a better way to do it, but my approach was based on noting that (a) it's really easy to find the cells containing the colour names ("Red", "Maroon", etc), and (b) the cell to the left of it is always the one that has the background colour that I'm looking for. So, my first step was to manually pull out the text in each cell. That's easy to do with rvest thanks to the `html_text()` function, and just to make my life a little easier I used [stringr](https://stringr.tidyverse.org/) to remove all the `\n` characters at the end of each cell:

```{r cell-node-text}
cell_text <- cells |>
  rvest::html_text() |>
  stringr::str_remove_all("\n$")
```

And here's the text in the first 20 cells:

```{r view-cell-text}
cell_text[1:20]
```

So when I now match this text against the colour names stored in `crayola$name`, I'll detect "Red" in cell 2, "Maroon" in cell 11, and so on. If I subtract 1 from each of these values, I now have the indices of the table cells that contain the style information I need.

```{r match-tables}
ind <- which(cell_text %in% crayola$name) - 1
```

Here's what those cells look like:

```{r styled-cells}
cells[ind]
```

That's much nicer. Now I have something with a consistent format that I can process without too much pain. The rvest package has a `html_attr()` function which I can use to pull out the contents of the style attribute as a string. So, after spending a few minutes trying to remember how regular expressions work, I used `str_extract()` to pull out the hexadecimal codes like this:

```{r extract-hex}
background <- cells[ind] |>
  rvest::html_attr("style") |>
  stringr::str_extract("#[0-9ABCDEF]{6}")
```

Let's take a look:

`r options(width = wide)`

```{r extract-hex2}
#| column: page
background
```

`r options(width = narrow)`

Yay, those look like hex colours. Better yet, because I've been careful to ensure that I've matched everything to the correct colours and in the correct order, I can insert them into the `crayola` tibble where they should have been in the first place:

```{r, include=FALSE}
options(width = wide)
```

```{r reinsert-colour}
#| column: page
crayola$color <- background
crayola
```

```{r, include=FALSE}
options(width = narrow)
```


Finally!

## Act II: One hundred years of tidyr

If life were at all fair my data wrangling woes would now be over, but of course they are not. If I'm going to analyse the Crayola data by year it will be useful to me if the `year` column has nicely formatted data, and of course it does not:

```{r, include=FALSE}
options(width = wide)
```

```{r show-crayola-years-1}
#| column: page
crayola$years
```

```{r, include=FALSE}
options(width = narrow)
```


There are several problems I'm going to need to solve to get this into a regular form:

- The "circa" text will have to be removed
- White spaces will need to be removed
- Footnote text will need to be removed
- The word "present" will have to be replaced by "2022"
- The single year "1958" will need to be replaced by an interval "1958-1958"
- The comma separated list "2021,2022" will need to be an interval "2021-2022"

Here's a little bit of stringr code that does that:

```{r regularise-years}
crayola <- crayola |>
  dplyr::mutate(
    years = years |>
      stringr::str_remove_all(" ") |>
      stringr::str_remove_all("\\[.\\]") |>
      stringr::str_remove_all("circa") |>
      stringr::str_replace_all("present", "2022") |>
      stringr::str_replace_all("^1958$", "1958-1958") |>
      stringr::str_replace_all("2021,2022", "2021-2022"),
  ) 
```

The `years` column now has a regular form. Each entry is either a contiguous interval like `"1903-2022"`, or a comma separated list of two such intervals like `"1903–1910,1930–1990"`:

```{r, include=FALSE}
options(width = wide)
```

```{r show-crayola-years-2}
#| column: page
crayola$years
```

```{r, include=FALSE}
options(width = narrow)
```

That's better because the data format is now consistent, but it's not tidy. In the long run, what I really want is a nice tidy tibble: each row should correspond to a single observation. If "Red" was a colour in 1935, then there should be a row in my table for which `name = "Red"` and `year = 1935`. That's not quite what I have here, so I have more data wrangling to do and this time [tidyr](https://tidyr.tidyverse.org/) will be my best friend.

The first thing I'm going to do is use `tidyr::separate()` to split the `years` variable into two variables, `years_1` and `years_2`. The `years_1` variable will contain the first time interval for which a particular crayon colour was in production, and the `years_2` variable will contain the second interval in which it was in production. For almost all colours, `years_2` will be `NA`. It's only those special cases like `"1903–1910,1930–1990"` that will have values in both. 

Then, because I don't really see a need to have two variables that both represent a period of time, I'll use `tidyr::pivot_longer()` to give myself a data set in which there is one row for every continuous time interval:

```{r}
crayola <- crayola |>
  tidyr::separate(
    col = years,
    into = c("years_1", "years_2"),
    sep = ",",
    fill = "right"
  ) |>
  tidyr::pivot_longer(
    cols = starts_with("years_"),
    names_prefix = "years_",
    names_to = "interval",
    values_to = "years"
  ) |>
  dplyr::filter(!is.na(years))
```

To give you a sense of what the data looks like in this form, I'll pull out the rows corresponding to two different crayon colours, "Maroon" and "Violet-Blue":

```{r, include=FALSE}
options(width = wide)
```

```{r}
#| column: page
crayola |>
  dplyr::filter(name == "Maroon" | name == "Violet-Blue")
```

```{r, include=FALSE}
options(width = narrow)
```

The "Maroon" crayon has been in production continuously since 1949, so there is only one row in the table for that one. The "Violet-Blue" crayon was in production from 1903 to 1910, and again from 1930 to 1990. These two production periods are each represented as a row. 

Excellent. Next, I'll use `separate()` again to split the `years` interval into two columns, one for the `year_started` and another for the `year_ended`. Having done so, the year information is finally in a numeric format, so I can coerce it from character to integer:

```{r}
crayola <- crayola |>
  tidyr::separate(
    col = years,
    into = c("year_started", "year_ended")
  ) |>
  dplyr::mutate(
    interval = as.integer(interval),
    year_started = as.integer(year_started),
    year_ended = as.integer(year_ended)
  )
```


`r options(width = wide)`

```{r}
#| column: page
crayola
```

`r options(width = narrow)`

We're getting close. At this point the last bit of work I have to do to fix the year data is unpack it. Instead of representing the data for Maroon crayons with one row with a `year_started` value of 1949 and `year_ended` value of 2022, I want to have a single column called `year`, and the data should contain one row for every year in which Maroon was in production. Somewhere in the back of my head there is the thought that there must be an easy way to do this with tidyr, but my ingenuity failed me this time and I fell back on my usual solution... [purrr](https://purrr.tidyverse.org/).

It's a two-step process. Step one: write a little function that expects to receive the values stored in one row of the existing data frame, and returns a new data frame in the format I want. In this case, I want a tibble that has one row for each `year` in range starting `year_started` and ending `year_ended`, but otherwise has the same structure as the existing data. The `unpack_row()` function below does that:

```{r unpack-rows}
unpack_row <- function(color, name, year_started, year_ended, ...) {
  tibble::tibble(
    name = name,
    color = color,
    year = year_started:year_ended,
    ...
  )
}
```

So now I'll do the unpacking with `purrr::pmap_dfr()`, sort the rows into a nice order using `dplyr::arrange()`, and add an `id` column to ensure that every row in the table has a unique identifier:

```{r do-unpack}
crayola <- crayola |>
  purrr::pmap_dfr(unpack_row) |>
  dplyr::arrange(year, color) |>
  dplyr::mutate(id = dplyr::row_number())
```

Voilà!

`r options(width = wide)`

```{r}
#| column: page
crayola
```

`r options(width = narrow)`



## Act III: I said pet, I said LUV, I said pet...

Okay I have one last thing to do before I'm done with the data wrangling. Having hex strings associated with each crayon colour is nice and is exactly what I need for plotting, but you can't construct a nice ordering of colours since colour space is three dimensional, more or less. I'm trying my very best to forget everything I ever learned about the psychophysics of human colour perception, but even so I'm not silly enough to try to work with raw RGB values. Instead I'll use the [colorspace](http://colorspace.r-forge.r-project.org/) package to convert extract hue/saturation/value coordinates, as well as my slightly-preferred method, [CIELUV color coordinates](https://en.wikipedia.org/wiki/CIELUV):

```{r transform-colours}
HSV <- colorspace::coords(as(colorspace::hex2RGB(crayola$color), "HSV"))
LUV <- colorspace::coords(as(colorspace::hex2RGB(crayola$color), "LUV"))
```

Each of these commands returns a matrix with three columns and the same number of rows as the `crayola` data frame. The first few rows of the `HSV` matrix look like this:

```{r preview}
HSV[1:10,]
```

So now I can store all six coordinates in the `crayola` dataframe, along with the LUV-space version of "hue" which I compute in the last line here:

```{r transform-colours-2}
crayola <- crayola |>
  dplyr::mutate(
    hue = HSV[, "H"],
    sat = HSV[, "S"],
    val = HSV[, "V"],
    L = LUV[, "L"],
    U = LUV[, "U"],
    V = LUV[, "V"],
    hue2 = atan2(V, U)
  )
```

The Wikipedia page on CIELUV has a little more information on this, but really the thing that matters is that the `hue2` column is the variable I'm going to use to arrange the crayon colours when plotting them later. And so the moment arrives that, at long last, I have the data...

`r options(width = wide)`

```{r}
#| column: page
crayola
```

`r options(width = narrow)`


## The intermission is late, so what?

As a rule I make it a habit to assume that, while the internet never forgets anything at all in the general sense, it doesn't remember anything *specific* for any interval longer than I'd trust a man not to have conveniently lost my phone number. Moreover, while I also make it a habit not to care greatly about the archival properties of What Went Down In The Stalls At The Duke On Friday, I'm slightly more invested in, um ... crayons, I guess. Or data science practices in R. Whatever. 

My point here is that the table on wikipedia isn't an archival source so there's no guarantee that anything I've done up to this point is reproducible unless I do a bit of extra work myself and save a copy of the data...

```{r write-csv}
#| eval: false
folder <- here::here("posts", "2022-12-18_crayola-crayon-colours")
readr::write_csv(crayola, fs::path(folder, "crayola.csv"))
```

As a convenient side benefit, you can download a copy of [the crayola colours](https://github.com/djnavarro/quarto-blog/blob/main/posts/2022-12-18_crayola-crayon-colours/crayola.csv) data as a csv file from github should you feel so inclined. There's even a script containing most of the [code for this post](https://github.com/djnavarro/quarto-blog/blob/main/posts/2022-12-18_crayola-crayon-colours/crayola.R) too :-) 

## Act IV: Not even Chekhov expects it to go off

In any case, the final act of our little drama has arrived at last. Time to make a plot. The drums roll and the audience holds their breath in antici-- 

Oh let's just get on with it and load [ggplot2](https://ggplot2.tidyverse.org/) already. Here's a stacked bar chart showing the number of distinct crayon colours in the Crayola standard set every year from 1903 to 2022. It has grown over time but the growth looks linear, not exponential:

```{r first-plot}
library(ggplot2)
base <- crayola |> 
  dplyr::mutate(
    color = forcats::fct_reorder(color, hue2)
  ) |> 
  ggplot(aes(
    x = year,
    group = color,
    fill = color
  )) +
  scale_fill_identity() +
  NULL

base + geom_bar(show.legend = FALSE) 
```

But let's be honest, shall we? No-one at all (least of all me) is interested in determining whether the rate of growth of Crayola crayon colours in the standard set is exponential or linear. It's just fun. The real reason we all love the Crayola post was that the image was so terribly pretty, so let's start making something pretty, yes? 

We can start getting something a little closer to the original if we set `position = "fill"`, and I'm going to use `theme_void()` because honestly it's just prettier without the words and numbers getting in the way...

```{r}
#| fig-width: 8
#| fig-height: 8
#| fig-align: center
base + 
  theme_void() +
  geom_bar(
    position = "fill",
    linetype = "blank",
    width = 1,
    show.legend = FALSE
  ) 
```

It's pretty, but it's noticeably different from the original one. In my version, there are 39 separate colours depicted on the left hand side, whereas the version that was going around on mastodon (and appears in the original blog posts) has only 8. Out of paranoia, I decided to check the counts in my data...

```{r}
crayola |> 
  dplyr::count(year) |>
  dplyr::filter(year %in% seq(1903, 2003, by = 10))
```

...which does seem consistent with what the [history of Crayola crayons](https://en.wikipedia.org/wiki/History_of_Crayola_crayons) wikipedia article has to say on the topic too: 

> Early Crayola advertising mentions thirty different colors, although there is no official list; in fact thirty-eight different crayons are known from Crayola boxes of this period. The largest labeled assortment was box No. 51, titled Crayola Young Artists' Drawing Crayons, which included twenty-eight different crayons. Other colors were found in different boxes, including the "Rubens" No. 500, a twenty-four crayon assortment.

Okay, so if I haven't made a mistake, what is going on? It turns out that although Steven Von Worley's blog post still manages to point to the "same" Wikipedia page 12 years later, the contents of the page have changed considerably. The original post was published January 15th 2010. Conveniently the wayback machine has a [snapshot of that page](http://web.archive.org/web/20100209002742/https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors) from only a few weeks later, on February 9th. I have a very different version of the Crayola colours data than Steven's friend Velociraptor had. 

There are 133 colours listed in the 2010 version, and it's missing all the colours that had gone out of production earlier than 1990. "English Vermillion", for example, was in production from 1903 to 1935. It appears in the 2022 version of the Wikipedia data (and so it's represented in my plots above), but it was omitted in the 2010 version of the Wikipedia data and so doesn't appear in the version of the image that went around on Mastodon yesterday. 

Hm. So what happens to my data if I crudely simulate a censoring process a little bit like the one that applied to the 2010 version of the Wikipedia page? Let's simply ignore all crayon colours that were out of production earlier than 1990, shall we?

```{r second-plot}
#| fig-width: 8
#| fig-height: 8
#| fig-align: center
base + 
  theme_void() +
  geom_bar(
    data =  crayola |> 
      dplyr::group_by(name) |>
      dplyr::filter(max(year) > 1990) |>
      dplyr::ungroup() |>
      dplyr::mutate(color = forcats::fct_reorder(color, hue2)),
    position = "fill",
    linetype = "blank",
    width = 1,
    show.legend = FALSE
  ) 
```

Still not exactly equivalent, but it's closer.

More to the point however, I think we all have to admit that this is really the kind of data set that desperately needs to be plotted with the aid of `coord_polar()`, no?

```{r third-plot}
#| column: screen-inset
#| fig-width: 12
#| fig-height: 12
#| fig-align: center
base + 
  theme_void() +
  coord_polar(theta = "y") + 
  geom_bar(
    position = "fill",
    linetype = "blank",
    width = 1,
    show.legend = FALSE
  ) 
```

I mean... not that anyone really cares what this represents, but each concentric ring represents a year of data: 1903 is in the middle, and 2022 is on the outside. Within each annual ring there is an equal-angle segment for every crayon colour in the data for that year. Whenever the crayons changed, the rings shift a bit. The colours are arranged around the circle by hue. Well, the hue-like quantity computed from the chromaticity components of the LUV coordinates. Whatever. 

Alternatively, we could turn this into a racetrack plot, where each individual colour fills an angular section of constant size, and so only the year with the most crayon colours (2022) wraps the full way round the circle. That gives us this:

```{r fourth-plot}
#| column: screen-inset
#| fig-width: 12
#| fig-height: 12
#| fig-align: center
base + 
  theme_void() +
  coord_polar(theta = "y") + 
  geom_bar(
    linetype = "blank",
    width = 1,
    show.legend = FALSE
  ) 
```

I'm not sure it has a lot of value as a data visualisation but it is so very pretty!

<!--------------- appendices go here ----------------->


