---
title: "An ODE by Stan"
author:
  - name: Danielle Navarro
    url: https://djnavarro.net
    affiliation: I'm on smoko
    affiliation-url: https://www.youtube.com/watch?v=j58V2vC9EPc
    orcid: 0000-0001-7648-6578
description: "Yeah yeah"
date: "2023-05-11"
categories: [Statistics, Pharmacokinetics]
image: cover.jpg
---

<!--
CC0 cover:
https://unsplash.com/photos/iPl3q-gEGzY
-->

<!--------------- my typical setup ----------------->

```{r setup, include=FALSE}
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

<!--------------- post begins here ----------------->

For the sake of my sanity I'm using [CmdStanR](https://mc-stan.org/cmdstanr/), a lightweight interface to Stan.

```{r}
library(cmdstanr)
```

Since I'm doing this within a quarto blog, I'm going to register the knitr engine:

```{r}
register_knitr_engine()
```


## Posterior sampling 

Here's some Stan code for the model:

```{stan, output.var="coin"}
data {
  int<lower=0> N;
  array[N] int<lower=0,upper=1> y;
}
parameters {
  real<lower=0,upper=1> theta;
}
model {
  theta ~ beta(1,1);
  y ~ bernoulli(theta);
}
```

Over in R we can print the model:

```{r}
coin
```

This is an object of class [`CmdStanModel`](https://mc-stan.org/cmdstanr/reference/CmdStanModel.html). More precisely it's an [R6 class](https://r6.r-lib.org/). 

Specify observations to be passed to Stan:

```{r}
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))
```

Now we run the sampler:

```{r}
fit <- coin$sample(
  data = data_list, 
  seed = 123, 
  chains = 4, 
  parallel_chains = 4,
  refresh = 500 # print update every 500 iters
)
```

## A simple system

[Michaelis-Menten kinetics](https://en.wikipedia.org/wiki/Michaelis%E2%80%93Menten_kinetics)

$$
\frac{dC(t)}{dt} = - \frac{V_m}{K_m + C(t)} C(t)
$$

I'll use the example from Holz (2001).

## ODE Solving with R

The [CRAN task view for differential equations](https://cran.r-project.org/web/views/DifferentialEquations.html) has lots of options. I'll use the [deSolve package](http://desolve.r-forge.r-project.org/):

```{r}
library(deSolve)
library(ggplot2)
mmk <- function(t, y, parms) {
  dydt <- - y * parms["vm"] / (parms["km"] + y) 
  return(list(dydt))
}
dose <- 50 # does in milligrams
vd <- 5.5  # circulation volume in litres
out <- ode(
  y = c("conc" = dose/vd),
  times = seq(0, 3, .025),
  func = mmk,
  parms = c("vm" = 8, "km" = 4)
)
ggplot(as.data.frame(out), aes(time, conc)) +
  geom_line()
```

## ODE Solving with Stan

One of the many things Stan provides is an [ODE solver](https://mc-stan.org/docs/stan-users-guide/ode-solver.html). I'm not sure it makes a lot of sense to use Stan *only* as an ODE solver since you can already do that with other packages, but I find it a convenient stepping stone. Let's implement Michaelis-Menten kinetics in Stan without incorporating any statistical model: 

```{stan, output.var = "mmk"}
functions {
  vector mmk(real t,
             vector c,
             real vm,
             real km) {
    vector[1] dcdt;
    dcdt[1] = - c[1] * vm / (km + c[1]);
    return dcdt;
  }
}
data {
  int<lower=1> T;
  vector[1] c0;
  real t0;
  array[T] real ts;
  real vm;
  real km;
}
model {
}
generated quantities {
  array[T] vector[1] conc = ode_rk45(mmk, c0, t0, ts, vm, km);
}
```


Here we go:

```{r}
mmk_data <- list(
  c0 = dose/vd, 
  t0 = 0, 
  ts = seq(.025, 3, .025), 
  vm = 8,
  km = 4,
  T = 120
)
mmk_fitted <- mmk$sample(
  data = mmk_data, 
  fixed_param = TRUE, 
  chains = 1, 
  iter_sampling = 1
)
mmk_draws <- mmk_fitted$draws()
out <- as.vector(apply(mmk_draws, 3, mean))
ggplot(data.frame(time = seq(.025, 3, .025), conc = out), aes(time, conc)) +
  geom_line()
```

Yep, same thing.

## Now add statistics...

One compartment model with bolus administration and MMK elimination


## Handy resources

- https://mpopov.com/tutorials/ode-stan-r/

<!--------------- appendices go here ----------------->



