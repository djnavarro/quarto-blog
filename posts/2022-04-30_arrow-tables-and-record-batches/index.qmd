---
title: "Arrow tables and record batches"
date: "2022-04-30"
categories: [Apache Arrow]
image: "../../blank_preview.jpg"
---

<!--------------- my typical setup ----------------->

```{r setup, include=FALSE}
long_slug <- "2022-04-30_arrow-tables-and-record-batches"
renv::use(lockfile = "renv.lock")
```

<!--------------- post begins here ----------------->

>
| "The time has come," the Walrus said,
|    "To talk of many things:
| Arrays (in Arrow) and Record Batches,
|    Of Tables, Chunks and things—
| Why IPC's great for streaming blocks—
|    But for saving, Parquet wins." 
|
| (My sincere apologies to [Lewis Carroll](https://poets.org/poem/walrus-and-carpenter))


This post has been rolling around in my head since the start of April. I've known from the beginning what I want to say -- approximately! -- but not how I want to say it. It is annoying me, and at a certain point I decided I just needed to put words to metaphorical paper and see what happens. It's another post about Apache Arrow, the fourth in a series I've been writing.

My goal in this one is... well, I suppose it is partly to do my job since I am employed to write these things, but it's a little more than that. My goal is to clarify something that has been a source of confusion about Arrow for me, in the hope that once I've sorted it out in my own head I can perhaps contribute something to the official documentation that helps other people who might have the same problem that I have. 

So here's the thing that has been giving me grief. If you go to the Get Started page for the **arrow** R package, one of the first things you encounter is a table telling you that Arrow has classes for zero-dimensional data (scalars), one-dimensional data (arrays and other vector-like data), and two-dimensional data (tabular or data frame-like data). I'll reproduce the entire table in full because it's actually super important...


| Dim | Class          | Description                               | How to create an instance                                                                             |
| --- | -------------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------|
| 0   | `Scalar`       | single value and its `DataType`           | `Scalar$create(value, type)`                                                                          |
| 1   | `Array`        | vector of values and its `DataType`       | `Array$create(vector, type)`                                                                          | 
| 1   | `ChunkedArray` | vectors of values and their `DataType`    | `ChunkedArray$create(..., type)` or alias `chunked_array(..., type)`                                  |
| 2   | `RecordBatch`  | list of `Array`s with a `Schema`          | `RecordBatch$create(...)` or alias `record_batch(...)`                                                |
| 2   | `Table`        | list of `ChunkedArray` with a `Schema`    | `Table$create(...)`, alias `arrow_table(...)`, or `arrow::read_*(file, as_data_frame = FALSE)`        |
| 2   | `Dataset`      | list of `Table`s  with the same `Schema`  | `Dataset$create(sources, schema)` or alias `open_dataset(sources, schema)`                            |

...but I'm going to be honest with you, dear reader. When I first started learning Arrow, I had no idea what any of this meant. This whole table was completely intimidating. I looked at it and thoughts roughly along the following lines went through my head:


> Oh... f**k me. I'm completely out of my depth, I am too stupid to understand any of this. I should quit now and find a new job before everyone realises I'm a total fraud. They made a terrible mistake hiring me and... blah blah blah


The self-pity went on for a while, but I'll spare you the details. 

Eventually I remembered that this is my impostor syndrome talking and that I am in fact quite good at learning technical concepts. The problem I'm encountering here is that this table is not in any way self-explanatory, but it's placed in a part of the documentation where new users will easily encounter it and get confused the same way I did. The placement itself isn't the problem: the content of the table is actually pretty important for any Arrow user to grasp, but all the explanatory scaffolding is missing. 

To a new user, most of this is is incomprehensible. What exactly is a `ChunkedArray` and how is it different from an `Array`? Why are these necessary as distinct concepts? While we are at it, what the heck is a `RecordBatch`, a `Table` and a `Dataset`, and what makes them different from one another? Unless someone takes the time to explain it all to you, it does look like Arrow is unnecessarily complicated, doesn't it? And yet, some very smart people seem to think that Arrow is a very good idea indeed so... what's the story? 

Kick back, relax into whatever comfort you have available, and let me tell you a tale.^[In the near future, I hope that the documentation itself is going to tell this story -- and yes, I realise that by calling attention to the issue I've effectively volunteered to fix it -- but sometimes it's easier to do the same job in an informal blog post where you have the luxury of going overboard with "authorial voice" and "narrative", and all those other fancy things that writers love.] All will be revealed...



<!--------------- appendices go here ----------------->

```{r, echo=FALSE}
source("appendix.R")
```



