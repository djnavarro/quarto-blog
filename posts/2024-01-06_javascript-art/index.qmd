---
title: "javascript-art"
description: "This is a subtitle"
date: "2024-01-06"
image: canvas.png
image-alt: "Generative art"
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

<!--------------- post begins here ----------------->

```{ojs}
//| column: body-outset
//| fig-align: center
//| fig-cap: one art
pic1 = art(1)
```

```{ojs}
//| column: body-outset
//| fig-align: center
//| fig-cap: another art
pic2 = art(2)
```

```{ojs}
seedrandom = require('seedrandom@3.0.5')
```


```{ojs}
function art(seed) {
  // setup
  const par = {height: 600, width: 900, nrow: 6, ncol: 9, iter: 500}
  const rng = seedrandom(seed)
  const ctx = DOM.context2d(par.width, par.height)  
  const pal = pickOne(palettes, rng)
  
  // image
  ctx.fillStyle = pickOne(pal, rng)
  ctx.fillRect(0, 0, par.width, par.height)
  let particles = makeParticles(par, pal, rng)
  for (let i = 0; i < par.iter; i++) {
    particles.map(p => {p.draw(ctx); p.move(rng)})
  }
  return ctx.canvas
}
```


```{ojs}
function makeParticles(par, pal, rng) {
  const rowheight = par.height / par.nrow
  const colwidth = par.width / par.ncol
  const s = Math.min(rowheight, colwidth) * .25
  let particles = []
  let k = 0
  for (let c = 0; c < (par.ncol - 1); c++) {
    for (let r = 0; r < (par.nrow - 1); r++) {
      particles[k] = {
        id: k,
        col: c,
        row: r,
        size: 1 + (s - 1) * rng.double(),
        sizemin: 1,
        sizemax: s,
        width: 3,
        x: colwidth * (c + 1),
        y: rowheight * (r + 1),
        xmax: par.width,
        ymax: par.height,
        xstep: colwidth / 5,
        ystep: rowheight / 5,
        arc1: Math.PI * 2 * rng.double(),
        arc2: Math.PI * 2 * rng.double(),
        turn: .1,
        shade: pickOne(pal, rng),
        shrink: .005,
        draw: function(ctx) {drawParticle(this, ctx)},
        move: function(rng) {moveParticle(this, rng)}
      }
      k++
    }
  }
  return particles
}
```

```{ojs}
function drawParticle(p, ctx) {
  ctx.fillStyle = p.shade
  ctx.strokeStyle = p.shade
  ctx.lineWidth = p.width
  ctx.beginPath()
  ctx.arc(p.x, p.y, p.size, p.arc1, p.arc2)
  ctx.fill()
  ctx.stroke()
  ctx.closePath()
}
```    

```{ojs}
function moveParticle(p, rng) {
  p.y = p.y + p.ystep * (rng.double() - .5)
  p.x = p.x + p.xstep * (rng.double() - .5)
  if (p.y > p.ymax) p.y = p.y - p.ymax
  if (p.x > p.xmax) p.x = p.x - p.xmax
  if (p.y < 0) p.y = p.ymax - p.y
  if (p.x < 0) p.x = p.xmax - p.x
  if (p.size > p.sizemin) {
    p.size = p.size - p.shrink * (p.sizemax - p.sizemin)
  } else {
    p.size = p.sizemax
  }
  p.arc1 = p.arc1 + p.turn * (Math.PI * 2 * (rng.double() - .5))
  p.arc2 = p.arc2 + p.turn * (Math.PI * 2 * (rng.double() - .5))
}
```

```{ojs}
function pickOne(items, rng) {
  return items[Math.floor(rng.double()*items.length)]
}
```

```{ojs}
palettes = [
  ["#de9151", "#f34213", "#2e2e3a", "#bc5d2e", "#bbb8b2"],
  ["#a63446", "#fbfef9", "#0c6291", "#000004", "#7e1946"],
  ["#ffffff", "#ffcad4", "#b0d0d3", "#c08497", "#f7af9d"],
  ["#aa8f66", "#ed9b40", "#ffeedb", "#61c9a8", "#ba3b46"],
  ["#241023", "#6b0504", "#a3320b", "#d5e68d", "#47a025"],
  ["#64113f", "#de4d86", "#f29ca3", "#f7cacd", "#84e6f8"],
  ["#660000", "#990033", "#5f021f", "#8c001a", "#ff9000"],
  ["#c9cba3", "#ffe1a8", "#e26d5c", "#723d46", "#472d30"],
  ["#0e7c7b", "#17bebb", "#d4f4dd", "#d62246", "#4b1d3f"],
  ["#0a0908", "#49111c", "#f2f4f3", "#a9927d", "#5e503f"],
  ["#020202", "#0d324d", "#7f5a83", "#a188a6", "#9da2ab"],
  ["#c2c1c2", "#42213d", "#683257", "#bd4089", "#f51aa4"],
  ["#820263", "#d90368", "#eadeda", "#2e294e", "#ffd400"],
  ["#f4e409", "#eeba0b", "#c36f09", "#a63c06", "#710000"],
  ["#d9d0de", "#bc8da0", "#a04668", "#ab4967", "#0c1713"],
  ["#012622", "#003b36", "#ece5f0", "#e98a15", "#59114d"],
  ["#3c1518", "#69140e", "#a44200", "#d58936", "#fffb46"],
  ["#6e0d25", "#ffffb3", "#dcab6b", "#774e24", "#6a381f"],
  ["#bcabae", "#0f0f0f", "#2d2e2e", "#716969", "#fbfbfb"],
  ["#2b4162", "#385f71", "#f5f0f6", "#d7b377", "#8f754f"]
]
```


## Animation

```{ojs}
//| column: body-outset
//| fig-align: center
//| fig-cap: one animation
movie = animate(3)
```


```{ojs}
function* animate(seed) {
  // setup
  const par = {height: 600, width: 900, nrow: 6, ncol: 9, iter: 500}
  const rng = seedrandom(seed)
  const ctx = DOM.context2d(par.width, par.height)  
  const pal = pickOne(palettes, rng)
  
  // image
  ctx.fillStyle = pickOne(pal, rng)
  ctx.fillRect(0, 0, par.width, par.height)
  let particles = makeParticles(par, pal, rng)
  while (true) {
    particles.map(p => {p.draw(ctx); p.move(rng)})
    yield ctx.canvas
  }
}
```


