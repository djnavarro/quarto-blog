---
title: "Fun and games with p5.js and observable.js in quarto"
author:
  - name: Danielle Navarro
    url: https://djnavarro.net
    affiliation: I'm on smoko
    affiliation-url: https://www.youtube.com/watch?v=j58V2vC9EPc
    orcid: 0000-0001-7648-6578
description: "Because I can"
date: "2023-01-14"
categories: [Art, P5, Observable, Javascript, Quarto]
image: linear.jpg
---

<!--------------- my typical setup ----------------->

```{r setup, include=FALSE}
set.seed(8)
long_slug <- "2023-01-14_p5js"
wide <- 136
narrow <- 76
options(width = narrow)
```

<!--------------- post begins here ----------------->

> Be sweet to me, baby <br>
I wanna believe in you <br>
I wanna believe <br>
Be sweet <br>
Be sweet to me, baby <br>
I wanna believe in you <br>
I wanna believe in something <br>
&nbsp; -- Japanese Breakfast

Okay, so... I write this blog using [quarto](https://quarto.org/), and quarto has native support for [observable.js](https://observablehq.com)
... and observable.js supports third-party javascript libraries such as [p5.js](https://p5js.org/) executing in code cells... so, like... I can use p5.js to create generative art, inside the browser, inside a blog post? Right?

Apparently the answer to that is yes. 

There is but one tiny problem. I don't know anything about observable.js or p5.js. I supposed I'd best remedy that.

## Enabling p5js

The first step in the process is enabling p5.js, which is not one of the core libraries in observable, and is not immediately available. To use a third-party library that exists as an [NPM modules](https://docs.npmjs.com/about-packages-and-modules) we can import it using `require()`.

```{ojs}
//| output: all
P5 = require("p5")
```

Just like that, thanks to the joy of the [jsDelivr CDN](https://www.jsdelivr.com/), p5.js is now available to me in this post.

Well, sort of. As you can see from the output,^[An assignment like this would not normally produce any visible output for an observable.js code cell within in a quarto document, but I've set `output: all` for expository purposes.] the `P5` object is a function that takes three inputs. To do anything useful with it, I'll use a trick I learned from [this fabulous notebook by Tom MacWright](https://observablehq.com/@tmcw/p5) to run p5.js in "instance mode". Normally, p5.js works by defining a lot of global objects. That works fine if you're only doing one "sketch" on a single page, but it's not so clean if you want to write modular code where a single page (like this one) could contain multiple p5.js sketches.  

To run p5.js in instance mode, and in a way that plays nicely with observable.js and quarto, I'll define  `createSketch` as a [generator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*):

```{ojs}
function* createSketch(sketch) {
  const element = DOM.element('div');
  yield element;
  const instance = new P5(sketch, element, true);
  try {
    while (true) {
      yield element;
    }
  } finally {
    instance.remove();
  }
}
```

Using this approach, each instantiation of `P5` is attached to a div element that created when `createSketch` is called. If you want to know more about how this approach works, it's probably best to go to the original source that I adapted it from, because Tom has commented it and explained it nicely: [observablehq.com/@tmcw/p5](https://observablehq.com/@tmcw/p5)

## Example 1

Adaptation of this example: [observablehq.com/@tmcw/p5](https://observablehq.com/@tmcw/p5)

```{css}
@import url(https://fonts.googleapis.com/css?family=Courgette);
```

```{ojs}
//| column: page
createSketch(s => {
  
    s.setup = function() {
      s.createCanvas(1300, 300);
      s.textFont('Courgette');
      s.textStyle(s.BOLD);
      s.textAlign(s.CENTER, s.CENTER)
    };
    
    s.draw = function() {
      s.translate(
        s.millis() * (-0.1) % (s.width + 800), 
        s.height / 2
      );
      s.background('#222222');
      s.fill('#DC3F74').textSize(100);
      s.text('Hello Cruel World', s.width + 400, 0);
    };
    
  }
)
```



## Example 2

Example adapted from the generative art course by Bernat Ferragut: [ga-course.surge.sh](https://ga-course.surge.sh/)


```{ojs}  
//| column: page
createSketch(s => {

  let n = 100;
  let dot;
  let dotList = [];
  let palette = [
    s.color("#6B1B00"),
    s.color("#AE8B70"),
    s.color("#F9FEFB"),
    s.color("#56382D") 
  ];

  s.setup = function() {
    s.createCanvas(1300, 480);
    for(let i = 0; i < n; i++) {
      dotList.push(dot = new Dot(
        s,
        s.random(s.width),
        s.random(s.height),
        s.random(palette),
        s.random(1, 5)
      ));
    }
  };
    
  s.draw = function() {
    dotList.map(dot => {
      dot.on();
      dot.move();
    });
  };
})

```

where

```{ojs}
class Dot {
  constructor(sketch, x, y, colour, size) {
    this.s = sketch;
    this.x = x | 0;
    this.y = y | 0;
    this.colour = colour;
    this.size = size;
    this.velX = this.s.random(-2, 2);
    this.velY = this.s.random(-2, 2);
  }

  on() {
    this.s.noStroke();
    this.s.fill(this.colour);
    this.s.circle(this.x, this.y, this.size);
  }

  move() {
    this.x += this.velX;
    this.y += this.velY;
    if (this.x < 0 || this.x > this.s.width) {
      this.velX = -this.velX;
    }
    if (this.y < 0 || this.y > this.s.height) {
      this.velY = -this.velY;
    }
  }
}
```


## Example 3


```{ojs}
createSketch(s => {

  s.setup = function() {
    s.createCanvas(740, 740, s.WEBGL);
    s.noStroke();
  }

  s.draw = function() {

    s.background(0);

    let locX = s.mouseX - s.height / 2;
    let locY = s.mouseY - s.width / 2;  
    
    s.ambientLight(60, 60, 60);
    s.pointLight(190, 80, 190, locX, locY, 100);
    s.pointLight(80, 80, 190, 0, 0, 100);
  
    s.specularMaterial(255);
    s.rotateX(s.frameCount * 0.01);
    s.rotateY(s.frameCount * 0.01);
    s.torus(150, 80, 64, 64);
  }

})
```

<!--------------- appendices go here ----------------->
