---
title: "a-julia-novice"
description: "This is a subtitle"
date: "2024-02-23"
jupyter: julia-1.10
--- 

```{julia}
#| include: false
using Pkg
Pkg.activate("sandbox");
```

<!--------------- post begins here ----------------->

After many years of procrastination and telling myself I'll get around to it later, I've finally decided that now is the time for me to start learning [Julia](https://julialang.org/). At this point in my life I am strong in R, passable in Javascript, and can survive in SQL, C++ and Python if I need them for something. But despite my interest-from-afar in Julia, I haven't had much of an excuse to dive into it before. 

Part of the appeal in Julia is that it's designed to be a high-performance language for scientific computing. Like other scientific languages (e.g., R, Matlab, etc) it has 1-based indexing rather than 0-based indexing (Python, C++, etc). Julia code is automatically compiled giving you performance that is comparable to compiled languages like C++, without the hassle of actually having to deal with the compiler yourself. But we've all heard the sales pitch for Julia before, there's no need for me to repeat it here, and anyway I kinda just want to dive into the code.

## Getting started

First things first. In order to get started I had to go through the process of [installing Julia](https://julialang.org/downloads/), which was pretty straightforward. Getting it to work within my quarto blog was a bit trickier, but there's some fairly decent documentation on [Julia for Quarto](https://quarto.org/docs/computations/julia.html) which got me there. After getting it set up it was as simple as including this line in the YAML header for this post,^[Okay that's only half true. The other thing I ended up doing was creating a [project environment](https://pkgdocs.julialang.org/v1/environments/) for this blog post, and if you look at the source code for this post you can see that I've actually used `Pkg.activate()` to ensure that the Julia code in this post is executed using that environment. There's a nice blog post on setting up a project environment [here](https://towardsdatascience.com/how-to-setup-project-environments-in-julia-ec8ae73afe9c), but it's a bit beyond the scope of what I want to cover here.]

```yaml
jupyter: julia-1.10
```

and then creating executable Julia code cells by appending `{julia}` after the triple-fence used to define a block. So let's see. Is Julia working in my quarto environment? I'll start with my usual variant on the traditional "hello world" program using the `println()` (i.e., "print line") function:

```{julia}
println("hello cruel world")
```

Yes, that seems to be working, as -- shockingly -- is the ability to do some basic calculations using aritmetic [operators](https://docs.julialang.org/en/v1/manual/mathematical-operations/) that seem pretty much the same as most languages I use:

```{julia}
24 * 7
```

I can define variables, using `=` as the assignment operator:

```{julia}
hours = 24;
days = 7;
```

The semicolons here are optional: they're used as end-of-line delimiters, but the main reason I've used them in the code chunk above is to suppress printing the return value of these assignments.

So yes, we are up and running.

## Object types

Julia is a [dynamically typed language](https://docs.julialang.org/en/v1/manual/types/), so when I defined the `hours` variable earlier I was able to create an integer without explicitly defining it as such:

```{julia}
typeof(hours)
```

By default Julia creates a 64-bit integer, but -- unlike R and more like C++ -- there are several integer types. If I'd wanted to create a 128-bit integer to represent the number of minutes in an hour (but why????) I could have done so by declaring the type explicitly:

```{julia}
minutes::Int128 = 60;
typeof(minutes)
```

So while `minutes` and `hours` are both integers they are different types, and -- as you would expect -- are represented differently internally. In an extremely strict language, it would not be possible to multiple `minutes` by `hours` without first converting at least one of them to a different type, but thankfully Julia operators will automatically promote to common type and so I canc calculate the number of minutes in one day without doing the tedious type conversions myself:

```{julia}
typeof(minutes * hours)
```

You can see the same mechanism in action when I try to calculate the number of minutes in 1.7 days. The `minutes` variable^[Technically, the value referenced by the `minutes` variable: values have types, variables are simply labels that point to values. But I shan't be bothered with that distinction here.] is a 64-bit integer, the `hours` variable is a 128-bit integer, but the value of `1.7` is represented as a 64-bit floating point numbers. So when I compute `minutes * hours * 1.7`, the return value is a 64-bit float:

```{julia}
typeof(minutes * hours * 1.7)
```

## Vectors

I find myself liking the syntax Julia uses to create objects. You can create a vector using square brackets like this, which feels very much like Matlab to me:^[Fun fact. Apart from a brief period in undergraduate where I learned a little bit of C, Matlab was my first programming language. But it's been a very, very long time since I used Matlab -- or GNU Octave -- for anything. I imagine I could pick it up again if I had to but I honestly don't see the point.]

```{julia}
words = ["hello", "cruel", "world"];
```

The `words` variable I've just created is a vector of three strings:

```{julia}
typeof(words)
```

Subsetting uses square brackets too, and as I mentioned earlier indexing in Julia starts at 1:

```{julia}
words[1]
```

A couple of other things to note here. In Julia, you need to be more careful about single versus double quotes than you would be in R (where they are interchangeable). In Julia, single quotes are used to define a single character (e.g., `'h'` is a character), whereas double quotes are used to define a string (e.g. `"hello"` is a string). Strings are in fact a vector of characters, so `"hello"[1]` returns the character `'h'`. But whatevs. Let's move along. 

## Tuples

I have no intention of diving too deeply into object types in Julia, but there are two more that I feel are worth mentioning at this point: tuples and dictionaries. Let's start with tuples. A [tuple](https://docs.julialang.org/en/v1/manual/functions/#Tuples) is simply an ordered collection of values, and are constructed using parentheses:^[A tuple is an immutable type, so the idea here is that you're really supposed to use tuples to represent list of values that doesn't change.]

```{julia}
fruit = ("apple", "banana", "cherry")
```

## Dictionaries

In contrast, a [dictionary](https://docs.julialang.org/en/v1/base/collections/#Dictionaries)^[Dictionaries are mutable, so you can modify values stored in a dictionary.] is a list of key-value pairs. There's a few different ways to define a dictionary but I'm partial to this syntax:

```{julia}
danielle = Dict(
  "name" => "danielle",
  "age" => 47,
  "gender" => "female",
  "boring" => true
)
```

The entries in a dictionary can be indexed using the keys:

```{julia}
danielle["gender"]
```

## Functions

The syntax for defining functions in Julia comes in a couple of forms. The usual way to do it is using the `function` keyword, and I could define a simple `greet()` function like this:

```{julia}
function greet(name) 
  "hello $name, nice to meet you"
end;
```

The `end` keyword is required here. Note also that I've taken advantage of Julia's [string interpolation syntax](https://www.juliawiki.com/wiki/String_interpolation) to substitute the value of `name` into the string that `greet()` outputs:

```{julia}
greet("danielle")
```

You can also create functions using the anonymous function syntax (e.g., `x -> "hello $x"` defines an anonymous function), which is handy in the functional programming context if you want to map a vector of values onto another vector using `map()`:

```{julia}
map(x -> "hello $x", ["amy", "belle", "chiara"])
```

In this case though I didn't really need to resort to using `map()` because Julia also allows you to vectorise a function, using `.` to "broadcast" a scalar function to accept vector inputs:

```{julia}
greet.(["amy", "belle", "chiara"])
```

I can see that being handy. 

I'll come back to functions momentarily in order to talk about generic functions and method dispatch in Julia, but first I'll pivot a little to talk about packages.

## Packages

As with any programming language, most of the power comes in Julia comes from the extensive collection of packages that other users have contributed. The usual way to install a package is via the Julia REPL.^[REPL = "Read-evaluate-print loop". It's a fancy way of referring to the command line I guess. In R we'd usually refer to the REPL as the R console, but other languages tend to use the term REPL.] The Julia REPL is a little unusual in that it has several different "modes". Normally your command prompt in the Julia REPL looks something like this:

```
julia>
```

But if you type `]` at the REPL you'll see it transform into something like this:^[There are other modes besides regular and package. For instance if you type `?` at the REPL it takes you into help mode.]

```
(@v1.10) pkg>
```

This tells you that you've entered "package" mode, and you can type commands that can be used to install Julia packages and various other things.^[You don't actually have to do it this way. The "package" mode in the REPL exposes various functions from the [Pkg](https://docs.julialang.org/en/v1/stdlib/Pkg/) package, so if you have loaded `Pkg` then you could totally call `Pkg.add()` to install a package. In practice I find this a bit silly, but I suppose it has more useful applications in activating an environment via `Pkg.activate()` etc.] ^[The syntax here is meaningful. If you are working in the base Julia environment, the bit in parentheses tells you that if you add a package it will be added to the base environment. For this blog post, however I'm using a custom environment called "sandbox" that has the packages I'm using, so the prompt I would see looks like this: `(sandbox) pkg>`.] (If you want to get out of package mode and return to the regular REPL press "backspace".)

So then, if you want to install the [JSON](https://juliapackages.com/p/json) package, the command you'd type at the REPL in package mode would simply be `add JSON`. And having installed the JSON package into my Julia environment, I can load it using the `using` keyword:

```{julia}
using JSON
```

And now I can read the "praise.json" file that I just so happen to have sitting in my working directory by calling `JSON.parsefile()`

```{julia}
praise_dict = JSON.parsefile("praise.json")
```

Most convenient, because now that I have this `praise_dict` object I'm going to use it in the next section when I return to talking about functions...

## Methods

One of my favourite little R packages is [praise](https://github.com/rladies/praise), which you can use to create random snippets of positive feedback that can be inserted in various places. Inspired by this, I'm going to define a cute little `praise()` function that does something similar.

In the last section I defined `praise_dict`, a handy dictionary that contains some adverbs, superlatives, and exclamations that you can use to construct random praise statements. So let's define `praise()` such that it takes the `name` of a person as a string, and outputs a piece of positive feedback:

```{julia}
function praise(name::String)
    hey = rand(praise_dict["exclamation"])
    sup = rand(praise_dict["superlative"])
    adv = rand(praise_dict["adverb"])
    "$hey $name you are $adv $sup"
end;

praise("danielle")
```

Oh, that's so sweet of you to say. Notice, however, that I've been a little stricter in how I've defined the input arguments for `praise()` than I was earlier when I defined `greet()`. The `praise()` function won't work if the `name` argument is not a string:

```{julia}
#| error: true
praise(103)
```

That's probably a good thing. We don't typically provide praise to an integer, so it makes sense that the function doesn't work when you pass it an integer! 

On the other hand, we might want our `praise()` function to work if the user doesn't pass it a name at all. To accomplish that, we can write another `praise()` function that doesn't take any arguments:

```{julia}
function praise()
    hey = rand(praise_dict["exclamation"])
    sup = rand(praise_dict["superlative"])
    adv = rand(praise_dict["adverb"])
    "$hey you are $adv $sup"
end;
```

So now this works:

```{julia}
praise()
```

The key thing to notice here is that though I've defined `praise()` twice, what Julia actually does in this situation is construct a single "generic" function that has two [methods](https://docs.julialang.org/en/v1/manual/methods/). In other words, `praise()` will work if you pass it a single string, and it will also work if you don't pass it any arguments at all. It won't work for any other kind of input. On the surface that seems pretty sensible, but in practice we might need a third method. Suppose I have a vector where there are a few people's names listed, but it has missing values:^[The `missing` value is used to define missing data in Julia, analogous to how `NA` is used to define missing values in R.]

```{julia}
people = ["alex", missing, "fiona"];
```

My `praise()` function isn't inherently vectorised, but of course we can use the `.` syntax to praise several people at once and call `praise.(people)`. Unfortunately this work right now because `praise()` doesn't know what to do with the missing value. So if we want our `praise()` function to handle missing data gracefully it needs a third method:

```{julia}
function praise(name::Missing)
    hey = rand(praise_dict["exclamation"])
    sup = rand(praise_dict["superlative"])
    adv = rand(praise_dict["adverb"])
    "$hey you are $adv $sup"
end;
```

Now that we have all three methods `praise()` works just fine:

```{julia}
praise.(people)
```

As an aside, if you ever needed to find out what methods have been defined for the `praise()` function, you can do so by calling `methods(praise)`.

## Data frames I

Unlike R, Julia doesn't come with a native class to represent data frames. Instead, there is the DataFrames package which provides the functionality needed to represent tabular data. The `DataFrame()` function allows you to manually construct a data frame, with a syntax that feels very familiar to an R user. Vectors passed as inputs to `DataFrame()` must all have one element for every row in the data frame, or else be length one. So I could construct a small data frame listing the novels from William Gibson's "Sprawl" trilogy like this:

```{julia}
using DataFrames

sprawl = DataFrame(
  title = ["Neuromancer", "Count Zero", "Mona Lisa Overdrive"],
  published = [1984, 1986, 1988], 
  author = "William Gibson"
)
```

Data frames have pretty print methods so the output looks quite nice here. But internally it's essentially a collection of vectors, one for each column. For example, `sprawl.title` is a vector of three strings:

```{julia}
sprawl.title
```

In real life though, you don't usually construct a data frame manually. It's more typical to import a data frame from a CSV file or similar. To that end, we can take advantage of the CSV package to read data from a data file:

```{julia}
using CSV
starwars_csv = CSV.File("starwars.csv"; missingstring = "NA");
```

This `starwars_csv` object isn't a data frame yet, it's an object of type CSV.file. Data frames are *columnar* data structures (i.e., a collection of vectors, one per column), whereas a CSV.file is a *rowwise* data structure (i.e., a collection of CSV.row objects, one per row). We can see this by taking a look at the first element in the `starwars_csv` object:

```{julia}
starwars_csv[1]
```

To convert this to a DataFrame object, we simply pass it to `DataFrame()`:

```{julia}
starwars = DataFrame(starwars_csv)
```

The core tools for working with data frames in Julia feel quite familiar coming from either Matlab or R. You can subset a data frame by passing it numeric indices, for instance:

```{julia}
starwars[1:6, 1:5]
```

However, there are other methods for subsetting a data frame. You can also filter the rows of a data frame using logical expressions. Again, this is quite similar to how it works in base R. For instance, I can construct a boolean vector `fair_skinned` which indicates whether the corresponding row in `starwars` refers to a person with fair skin:^[As an aside, notice that I've used `.==` rather than `==` as the equality test. This is because `==` is a scalar operator: it doesn't work for vectors unless you broadcast it using `.`]

```{julia}
fair_skinned = starwars.skin_color .== "fair";
```

Now that I have these indices, I can create a subset of the data frame containing only those rows referring to fair skinned person (or robot, or...)

```{julia}
starwars[fair_skinned, 1:5]
```

On the columns side, we also have more flexible options for subsetting a data frame. For example, instead of referring to columns using numerical indices, we can select the variables that we want to keep using their names:

```{julia}
starwars[1:6, [:name, :gender, :homeworld]]
```

This syntax is worth unpacking slightly, so I'll digress slightly to talk about...

## Symbols

Looking at the syntax in the last code cell, it's fairly clear that `[:name, :gender, :homeworld]` is a vector of three... somethings, but it's not immediately obvious what `:name` actually is. Much like R (and also inherited from Lisp) Julia has extensive [Metaprogramming](https://docs.julialang.org/en/v1/manual/metaprogramming/) capabilities because it has the ability to represent Julia code as data structures within the language itself. In the simplest case, we have [Symbols](https://docs.julialang.org/en/v1/base/base/#Core.Symbol) like `:name`, which are constructed using the quotation operator `:` and used to represent object names. So as you can see, `:name` is an object of type Symbol:

```{julia}
typeof(:name)
```

Symbols can be assigned to variables, and those variables can be used as part of expressions to be evaluated. In the code below I create a variable `colname` that stores the symbolic representation of a column name that I can invoke later:

```{julia}
colname = :title
```

As a simple example of how symbols can be used in practice, here's a Julia implementation of something like the `pull()` function in the R package dplyr, which allows the user to extract a single column from a data frame:

```{julia}
function pull(data::DataFrame, column::Symbol)
  getproperty(data, column)
end;
```

In this code I'm using the `getproperty()` function to do the same job that the `.` operator would do in an expression like `sprawl.title`. So here it is in action:

```{julia}
pull(sprawl, :title)
```

At the moment this `pull()` function isn't very useful at all -- `pull(sprawl, :title)` is really not an improvement on `sprawl.title` -- but a little bit later when I get around to talking about pipes in Julia it will potentially more valuable.

## Data frames II

Anyway, getting back on track, the key thing to realise is that when I wrote `[:name, :gender, :homeworld]` earlier what I was really doing is constructing a vector of symbols, and it's those symbols that I was using to select the columns that I wanted to retain. The DataFrames package also supplies a various selector functions that can be used to extract a subset of the columns. For example, `Not()` will select every column except the ones that are passed to `Not()`. So if I want to drop the hair color, eye color, sex, and homeworld columns, I could do this:

```{julia}
starwars[1:6, Not([:hair_color, :eye_color, :sex, :homeworld])]
```

The `Between()` selector does what you'd think. It returns all columns in between two named columns:

```{julia}
starwars[1:6, Between(:sex, :homeworld)]
```

There's also an `All()` selector that returns all columns, but that's not super exciting. More interesting, I think, is the `Cols()` selector which takes a predicate function as input.^[In this context, a predicate function is just one that returns `true` or `false`.] The column names are passed to the function, and they are included in the output if that function returns `true`. So, for example, if I want to extract the columns in the data whose name ends in `"color"` I can do this: 

```{julia}
starwars[1:6, Cols(x -> endswith(x, "color"))]
```

## Pipes

Much like recent versions of R, Julia comes with a piping operator `|>` that you can use to pass the output of one function to another one. So let's say I have some numbers stored as `vals`, and I want to compute their geometric mean: 

```{julia}
vals = [10.2, 12.1, 14.3]
```

In Julia `mean()` is part of the Statistics package, so we'll load that:

```{julia}
using Statistics
```

To compute the geometric mean, we first compute the natural logarithm for each element in `vals` using `log()`, compute the arithmetic mean of those log-values with `mean()`, and then exponentiate the result with `exp()`. Written as a series of nested function calls, it looks like this:

```{julia}
exp(mean(log.(vals)))
```

This isn't the neatest looking code, so it is sometimes helpful to rewrite it by piping the output of each function to the next one:^[I should also mention that Julia has the [function composition operator](https://www.juliawiki.com/wiki/Function_composition_(Julia)) that you can use for this purpose also.]

```{julia}
# vals |> log.() |> mean() |> exp()
```
 
One limitation to the base pipe in Julia, however, is that you cannot pass other arguments to the functions in the pipeline, nor can you use a placeholder like `_` (as in the R base pipe) to specify whereabouts in the function call the piped object should be inserted. That limits its utility somewhat, though later on I'll show some examples that suggest it's not as big a limitation as it might seem to be. 
 
Nevertheless, I would be remiss if I didn't mention the [Pipe](https://juliapackages.com/p/pipe) package, which provides a more powerful piping operator than Julia's base pipe, supporting `_` placeholder syntax similar to the R base pipe. Loading this pipe generally needs to be done with a little care. If you don't want to override the behaviour of the Julia base pipe, what you need to do when using `using` is to only import the `@pipe` [Macro](https://docs.julialang.org/en/v1/manual/metaprogramming/#man-macros). Like symbols, which I discussed earlier, macros are a tool for metaprogramming in Julia. I'll talk about them in more detail later, but for now it's enough to note that this is how we import only the `@pipe` macro:

```{julia}
using Pipe: @pipe 
```

Here it is in action. This is a bit of a silly example -- I'm just computing the "mean publication year" of the sprawl novels, and I can't think of a reason why that's a sensible thing to do -- but it highlights the syntax:

```{julia}
@pipe sprawl |> 
  pull(_, :published) |> 
  mean(_)
```

The `@pipe` macro is invoked at the start of this expression, which -- thanks to the magic of metaprogramming -- means that the code that follows it is interpreted in a way that might not normally be valid Julia syntax. Notice that the `_` placeholder is required both in the call to my `pull()` function that extracts the column from the data frame, and in the call to `mean()` that is applied to the column.

## Data frames III

```{julia}
combine(groupby(starwars, :gender), :mass => rand) 
```

Now that we've talked about pipes, we can see how to rewrite this in a dplyr-like workflow. If you're willing to use the flexible pipe operator supplied by Pipes, then you can make it look very similar indeed to dplyr:

```{julia}
@pipe starwars |>
  groupby(_, :gender) |>
  combine(_, :mass => rand)
```

Similarly:

```{julia}
@pipe starwars |>
  subset(_, :skin_color => x -> x.=="fair") |>
  pull(_, :name)
```

However, you can also do something very similar by combining the Julia base pipe with anonymous functions:

```{julia}
starwars |>
  (x -> groupby(x, :gender)) |>
  (x -> combine(x, :mass => rand))
```


## Plots

Using the [Plots](https://docs.juliaplots.org/latest/) package

```{julia}
#| eval: false
using PalmerPenguins
using Plots
using StatsPlots
```

Load penguins data: initially importat as CSV.file, then converted to DataFrame

```{julia}
#| eval: false
penguins = DataFrame(PalmerPenguins.load()) 
```

I'll start with scatter plot. I could use `scatter()` here to avoid needing to set the seriestype
explicitly, but for learning purposes I find it a little easier to work with `plot()` for everything and control plot type via explicit attribute values:

```{julia}
#| eval: false
plot(
  penguins.bill_length_mm, 
  penguins.bill_depth_mm, 
  seriestype=:scatter
)
```

It's little awkward to refer to the `penguins` data frame repeatedly in this code, and so it's more convenient to use the `@df` macro:

```{julia}
#| eval: false
@df penguins plot(
  :bill_length_mm,
  :bill_depth_mm,
  seriestype=:scatter,
  group=:species
)
```

Adding labels is achieved by modifying the relevant attributes:

```{julia}
#| eval: false
@df penguins plot(
  :bill_length_mm,
  :bill_depth_mm,
  seriestype=:scatter,
  group=:species,
  title="Palmer Penguins",
  xlabel="Bill Length (mm)",
  ylabel="Bill Depth (mm)"
)
```

Filter rows that have missing bill lengths, because violin series can't handle missing values. first let's find the the rows we want to keep: 

```{julia}
#| eval: false
keep = .!ismissing.(penguins.bill_length_mm)
```

So now this data frame is violin safe...

```{julia}
#| eval: false
bill_lengths = penguins[keep, [:bill_length_mm, :species]]
```

So now we can create a violin plot

```{julia}
#| eval: false
@df bill_lengths plot(
    string.(:species),
    :bill_length_mm,
    seriestype=:violin,
    legend=false,
    xlabel="Species",
    ylabel="Bill Length (mm)"
)
```



