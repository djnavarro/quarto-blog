---
title: "Generative art resources in R"
description: |
  An extremely incomplete (and probably biased) list of resources to
  help an aspiring generative artist get started making pretty pictures
  in R
date: 2021-10-19
categories: [Art, R]
image: preview-image.png
image-alt: "Generative art that looks like several stylised trees"
citation:
  url: https://blog.djnavarro.net/rtistry-posts 
params:
  slug: rtistry-posts
  date: 2021-10-19
---


<!--------------- setup post ----------------->

```{r setup, include=FALSE}
#renv::use(lockfile = "renv.lock")
```


<!--------------- post ----------------->

People often ask me if I have any words of advice for young people. No wait, that's not right. Nobody wants to hear my words of advice for young people, largely because I have none. What they often *do* ask me is if I have any words of advice for aspiring generative artists who want to use R to make pretty pictures. To be honest, I don't have a lot of advice there either, but I'll try my best.

Let's start with the big picture: there are no books or general purpose introductions out there. There are no books, no CRAN task views, no courses you can take. In fact, until quite recently generative art in R was an extremely niche topic. To my knowledge, the [#rtistry hashtag on twitter](https://twitter.com/hashtag/rtistry) is where you'll find the most art and the most posts about the topic, but that hashtag is pretty new.^[A little bit of searching on twitter suggests that I proposed the hashtag on January 20th 2021 in a now-deleted tweet.] There were resources that existed prior to that, of course: how could there not be? After all, Thomas Lin Pedersen has been building a toolkit for generative art in R for quite some time now. In his [keynote talk at celebRation2020](https://www.data-imaginist.com/slides/celebRation2020), he refers to an "art driven development" process that has led him to create several packages that are valuable to the would-be generative artist. For example:

- [ambient](https://ambient.data-imaginist.com/) is amazingly useful when you want to play around with flow fields or generate interesting multidimensional noise patterns
- [particles](https://github.com/thomasp85/particles) provides a toolkit for particle simulation in R: it's inspired by the d3-force javascript module, and is useful when you want to simulate forces acting on particles
- [ggforce](https://ggforce.data-imaginist.com/) provides a collection of tools that add some missing functionality to ggplot2, much of which is very handy when making art

These tools are great, but if you're just getting started it can be helpful to play around in a more constrained environment. If you want something extremely simple, you could play around with the [flametree](https://flametree.djnavarro.net/) package I wrote. It's not very flexible (it just draws branching things!) but it does have the advantage that you can get started with something as simple as this:

```{r flametree, cache=TRUE, fig.align='center'}
library(flametree)

# pick some colours
shades <- c("#1b2e3c", "#0c0c1e", "#74112f", "#f3e3e2")

# data structure defining the trees
dat <- flametree_grow(time = 10, trees = 10)

# draw the plot
dat %>% 
  flametree_plot(
    background = "antiquewhite",
    palette = shades, 
    style = "nativeflora"
  )
```

Playing around with a package like flametree -- or [jasmines](https://jasmines.djnavarro.net/) if you want something a little more flexible -- is a nice way to start drawing things, but at some point you might want to understand the process involved in creating a system like this. I've occasionally used art as a way to help teach people how to program in R, so you might find these [programming of aRt](https://slides.djnavarro.net/starting-programming/) slides helpful, and the precursor to flametree is discussed in my slides on [functional programming](https://slides.djnavarro.net/starting-functions/). 

Resources like mine can help get you started, but there are many other great artists out there who often post tutorials and walkthroughs. For instance, Antonio Sánchez Chinchón has a *lot* of really useful tutorials on his blog [fronkonstin.com](https://fronkonstin.com/). Ijeamaka Anyene has written a lovely and gentle introduction to her system for [rectangle subdivision](https://ijeamaka-anyene.netlify.app/posts/2021-09-07-so-you-want-to-subdivide-a-rectangle/). Will Chase writes about his process on his blog sometimes: here's [an example on a grid system](https://www.williamrchase.com/post/grid-12-months-of-art-december/). Jiwan Heo has a wonderful post on how to [get started with flow fields in R](https://jiwanheo.rbind.io/post/2021-09-17-how-to-work-with-flow-fields-in-r/) among many other lovely posts! You can look outside of the R community too: Tyler Hobbs writes a lot of essays about generative art that describe algorithms in fairly general terms. For instance, one of my systems is built from his essay on [simulating watercolour paints](https://tylerxhobbs.com/essays/2017/a-generative-approach-to-simulating-watercolor-paints). And of course there's also the walkthrough I wrote for one of my systems [here](https://blog.djnavarro.net/water-colours) and the piece I wrote that talks a little bit about the [psychological process](https://blog.djnavarro.net/generative-art-in-r/) of making art in R. 

My hope is that these resources will point you in the right direction to get started, but more than anything else I would emphasise that it takes time and effort. Art is a skill like any other. I've been practicing for about three years now, and while I am happy with the pieces I make, I still have a lot to learn. And that's okay -- one of the big things I always want to stress is that *play* is a huge part of the process. Making polished systems comes later! 

In any case, I'll leave this post as it is for now but if folks would like to suggest additional resources, I can always update it if need be!

## Postscript

Okay, I'm going to start adding things. This is just a completely unstructured list for now, but I know how my brain works: if I don't bookmark the cool posts and resources I see pop up on my timeline I'll never find them again...

### R specific

- [Thinking outside the grid](https://www.thetidytrekker.com/post/thinking-outside-the-grid) by [Meghan Harris](https://twitter.com/meghansharris)

- [Gradients](https://github.com/sharlagelfand/gradients) repository by [Sharla Gelfand](https://twitter.com/sharlagelfand)

- Generative art [package](https://github.com/nrennie/aRt) by [Nicola Rennie](https://twitter.com/nrennie35)

- Various [art posts](https://clauswilke.com/art/post/) by [Claus Wilke](https://twitter.com/ClausWilke)

- [ggbenjamini package](https://urswilke.github.io/ggbenjamini/) by [Urs Wilke](https://twitter.com/UrsWilke)

- [Generative art examples](https://github.com/picasa/generative_examples) by [Pierre Casadebaig](https://twitter.com/pircasa)

- [The art in randomness](https://medium.com/@dorit.geifman_38625/the-art-in-randomness-f236a3663cb) by [Dorit Geifman](https://twitter.com/GenerativeaRt4)

- [Generative art galleries](https://art.jacquietran.com/) by [Jacquie Tran](https://twitter.com/jacquietran)

- [Art portfolio site](https://ijeamaka.art/portfolio/) by [Ijeamaka Anyene](https://twitter.com/ijeamaka_a)

- [Mystery curves](https://georgemsavva.github.io/creativecoding/posts/mystery/) by [George Savva](https://twitter.com/georgemsavva)

### More general

- [thatcreativecode.page](https://thatcreativecode.page/) is a great general resource

- the description of [asemi.ca](https://asemi.ca) shows a design process in detail

- Tyler Hobbs [generative art essays](https://tylerxhobbs.com/essays)


<!--------------- appendices go here ----------------->

```{r, echo=FALSE}
source("appendix.R")
```



