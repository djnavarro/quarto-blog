---
title: "Pharmacometric simulation with rxode2"
description: "Basically the same post as the last one, but this time using rxode2 instead of mrgsolve"
date: "2023-08-20"
--- 

<!--------------- my typical setup ----------------->

```{r}
#| label: setup
#| include: false
very_wide <- 500
wide <- 136
narrow <- 76
options(width = narrow)
cache_images <- TRUE
set.seed(1)
```

<!--------------- post begins here ----------------->

This post is about the [rxode2](https://nlmixr2.github.io/rxode2/) package, the successor to [RxODE](https://nlmixrdevelopment.github.io/RxODE/). Although the original RxODE package is now archived on CRAN, the syntax for rxode2 is very similar, and as far as I can tell it's fully backward-comparible with the older package. When getting started, I found it a little easier to look at the [rxode2 user manual](https://nlmixr2.github.io/rxode2-manual/) than to work from the pkgdown site. 


## Installation

As with other packages for pharmacometric simulation such as [mrgsolve](https://mrgsolve.org/) -- which I wrote about in my [last blog post](/posts/2023-08-14_mrgsolve/) -- models defined with rxode2 need to be compiled before they are run, and so when you install the package you need the appropriate build tools. There are some implications to this. The package is on CRAN, so you can install it with:

``` r
install.packages("rxode2")
```

However, like most R packages that allow you to compile C/C++/Fortran/Rust/Your-Favourite-Language-Here code, it relies heavily on system dependencies that you may or may not have, and managing the build tools is an OS-specific thing. I'm running Ubuntu 22.04, and (for reasons that don't bear mentioning) I recently did a "factory reset"^[Does that term even make sense for a linux machine? It's not like the thing shipped with linux in the first place. Whatever.] and did a fresh install of Ubuntu. So, yeah, I didn't have everything I needed. Yes, I did have the `gcc` compiler installed, but that's not the only system dependency you have to care about. In my case, I was missing `gfortran`, `libblas`, and `liblapack`. As a consequence, when I tried to run the example code on the package website, all I got was a long stream of error messages. In order to get started, I had to do this: 

``` bash
sudo apt install gfortran libblas-dev liblapack-dev liblapack-doc
```

That worked for me.^[I haven't extensively checked the dependencies on other operating systems, but from what I can tell a Windows install requires [RTools](https://cran.r-project.org/bin/windows/Rtools/).]

## The rxode2 mini-language

The rxode2 package uses a domain-specific language for specifying pharmacometric models.

```{r}
library(rxode2)
library(tibble)
library(ggplot2)

mod <- rxode2({
  # initial values
  depot(0) = 0;
  cent(0) = 0;
  peri(0) = 0;
  AUC(0) = 0;
  
  # drug concentrations
  CP = cent / VC; # central
  PP = peri / VP; # peripheral
  
  # differential equations for compartmental drug amounts
  d/dt(depot) = -(KA * depot);
  d/dt(cent)  =  (KA * depot) - (Q * CP) + (Q * PP) - (CL * CP);
  d/dt(peri)  =  (Q * CP) - (Q * PP);
  
  # differential equation for a fake compartment is a 
  # convenient way to integrate the AUC statistic
  d/dt(AUC) = CP;
})

# specify parameters as a data frame
dat <- tibble(
  ID = 1,
  KA = 0.294,
  CL = 18.6,
  VC = 40.2,
  VP = 297,
  Q = 10.5
)

# specify event schedule: dosing
events <- et(amountUnits = "mg", timeUnits = "hours") |>
  et(amt = 10000, addl = 9, ii = 12, cmt = "depot") |>
  et(time = 120, amt = 2000, addl = 4, ii = 14, cmt = "depot")

events

# add observation times
events <- events |> et(time = 0:240)
events 

# run the simulation
out <- solve(mod, dat, events)
out

# plot
ggplot(out, aes(time, CP)) + geom_line()
```
