<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/</link>
<atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
<description>A data science blog by Danielle Navarro</description>
<image>
<url>https://blog.djnavarro.net/profile_hex.jpg</url>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/</link>
</image>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Sat, 02 Mar 2024 13:00:00 GMT</lastBuildDate>
<item>
  <title>Plotting data in Julia</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-03-03_julia-plots/</link>
  <description><![CDATA[ 





<!--------------- post begins here ----------------->
<p>Using the <a href="https://docs.juliaplots.org/latest/">Plots</a> package</p>
<div id="6adb0b59" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">CSV</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">DataFrames</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Plots</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">StatsPlots</span></span></code></pre></div>
</div>
<p>Originally when I was playing around in Julia I used the <a href="https://juliapackages.com/p/palmerpenguins">PalmerPenguins</a> package to import the penguins data, but I have been having some difficulty getting it to work properly in the quarto context (though in hindsight I think the problem was my Julia environment), so I’ve resorted to using a CSV file instead.</p>
<div id="07d83705" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1">penguins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DataFrame</span>(CSV.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">File</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins.csv"</span>; missingstring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>)) </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<div>
<div><div style="float: left;"><span>344×8 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">319 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">island</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">bill_length_mm</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">bill_depth_mm</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">flipper_length_mm</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">body_mass_g</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">year</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String7}">String7?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">39.1</td>
<td style="text-align: right;">18.7</td>
<td style="text-align: right;">181</td>
<td style="text-align: right;">3750</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">39.5</td>
<td style="text-align: right;">17.4</td>
<td style="text-align: right;">186</td>
<td style="text-align: right;">3800</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">40.3</td>
<td style="text-align: right;">18.0</td>
<td style="text-align: right;">195</td>
<td style="text-align: right;">3250</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">36.7</td>
<td style="text-align: right;">19.3</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">3450</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">39.3</td>
<td style="text-align: right;">20.6</td>
<td style="text-align: right;">190</td>
<td style="text-align: right;">3650</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">38.9</td>
<td style="text-align: right;">17.8</td>
<td style="text-align: right;">181</td>
<td style="text-align: right;">3625</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">39.2</td>
<td style="text-align: right;">19.6</td>
<td style="text-align: right;">195</td>
<td style="text-align: right;">4675</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">34.1</td>
<td style="text-align: right;">18.1</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">3475</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">42.0</td>
<td style="text-align: right;">20.2</td>
<td style="text-align: right;">190</td>
<td style="text-align: right;">4250</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">37.8</td>
<td style="text-align: right;">17.1</td>
<td style="text-align: right;">186</td>
<td style="text-align: right;">3300</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">37.8</td>
<td style="text-align: right;">17.3</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">3700</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">41.1</td>
<td style="text-align: right;">17.6</td>
<td style="text-align: right;">182</td>
<td style="text-align: right;">3200</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">333</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">45.2</td>
<td style="text-align: right;">16.6</td>
<td style="text-align: right;">191</td>
<td style="text-align: right;">3250</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">334</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">49.3</td>
<td style="text-align: right;">19.9</td>
<td style="text-align: right;">203</td>
<td style="text-align: right;">4050</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">335</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">50.2</td>
<td style="text-align: right;">18.8</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">3800</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">336</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">45.6</td>
<td style="text-align: right;">19.4</td>
<td style="text-align: right;">194</td>
<td style="text-align: right;">3525</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">337</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">51.9</td>
<td style="text-align: right;">19.5</td>
<td style="text-align: right;">206</td>
<td style="text-align: right;">3950</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">338</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">46.8</td>
<td style="text-align: right;">16.5</td>
<td style="text-align: right;">189</td>
<td style="text-align: right;">3650</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">339</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">45.7</td>
<td style="text-align: right;">17.0</td>
<td style="text-align: right;">195</td>
<td style="text-align: right;">3650</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">340</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">55.8</td>
<td style="text-align: right;">19.8</td>
<td style="text-align: right;">207</td>
<td style="text-align: right;">4000</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">341</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">43.5</td>
<td style="text-align: right;">18.1</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">3400</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">342</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">49.6</td>
<td style="text-align: right;">18.2</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">3775</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">343</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">50.8</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: right;">210</td>
<td style="text-align: right;">4100</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">344</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">50.2</td>
<td style="text-align: right;">18.7</td>
<td style="text-align: right;">198</td>
<td style="text-align: right;">3775</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>I’ll start with scatter plot. I could use <code>scatter()</code> here to avoid needing to set the seriestype explicitly, but for learning purposes I find it a little easier to work with <code>plot()</code> for everything and control plot type via explicit attribute values:</p>
<div id="d4f6a767" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb3-2">  penguins.bill_length_mm, </span>
<span id="cb3-3">  penguins.bill_depth_mm, </span>
<span id="cb3-4">  seriestype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>scatter</span>
<span id="cb3-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="672" height="480" viewbox="0 0 2688 1920">
<defs>
  <clippath id="clip920">
    <rect x="0" y="0" width="2688" height="1920"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip920)" d="M0 1920 L2688 1920 L2688 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip921">
    <rect x="537" y="0" width="1883" height="1883"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip920)" d="M143.576 1800.78 L2640.76 1800.78 L2640.76 47.2441 L143.576 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip922">
    <rect x="143" y="47" width="2498" height="1755"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="462.683,1800.78 462.683,47.2441 "></polyline>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="891.016,1800.78 891.016,47.2441 "></polyline>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1319.35,1800.78 1319.35,47.2441 "></polyline>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1747.68,1800.78 1747.68,47.2441 "></polyline>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2176.01,1800.78 2176.01,47.2441 "></polyline>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2604.35,1800.78 2604.35,47.2441 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,1800.78 2640.76,1800.78 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="462.683,1800.78 462.683,1781.88 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="891.016,1800.78 891.016,1781.88 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1319.35,1800.78 1319.35,1781.88 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1747.68,1800.78 1747.68,1781.88 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2176.01,1800.78 2176.01,1781.88 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2604.35,1800.78 2604.35,1781.88 "></polyline>
<path clip-path="url(#clip920)" d="M452.024 1846.85 Q455.38 1847.57 457.255 1849.84 Q459.153 1852.1 459.153 1855.44 Q459.153 1860.55 455.635 1863.35 Q452.116 1866.15 445.635 1866.15 Q443.459 1866.15 441.144 1865.71 Q438.853 1865.3 436.399 1864.44 L436.399 1859.93 Q438.343 1861.06 440.658 1861.64 Q442.973 1862.22 445.496 1862.22 Q449.894 1862.22 452.186 1860.48 Q454.501 1858.75 454.501 1855.44 Q454.501 1852.38 452.348 1850.67 Q450.218 1848.93 446.399 1848.93 L442.371 1848.93 L442.371 1845.09 L446.584 1845.09 Q450.033 1845.09 451.862 1843.72 Q453.69 1842.34 453.69 1839.74 Q453.69 1837.08 451.792 1835.67 Q449.917 1834.23 446.399 1834.23 Q444.478 1834.23 442.279 1834.65 Q440.079 1835.07 437.441 1835.95 L437.441 1831.78 Q440.103 1831.04 442.417 1830.67 Q444.755 1830.3 446.816 1830.3 Q452.14 1830.3 455.241 1832.73 Q458.343 1835.14 458.343 1839.26 Q458.343 1842.13 456.7 1844.12 Q455.056 1846.09 452.024 1846.85 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M468.065 1830.92 L486.422 1830.92 L486.422 1834.86 L472.348 1834.86 L472.348 1843.33 Q473.366 1842.98 474.385 1842.82 Q475.403 1842.64 476.422 1842.64 Q482.209 1842.64 485.588 1845.81 Q488.968 1848.98 488.968 1854.4 Q488.968 1859.97 485.496 1863.08 Q482.024 1866.15 475.704 1866.15 Q473.528 1866.15 471.26 1865.78 Q469.014 1865.41 466.607 1864.67 L466.607 1859.97 Q468.69 1861.11 470.913 1861.66 Q473.135 1862.22 475.612 1862.22 Q479.616 1862.22 481.954 1860.11 Q484.292 1858.01 484.292 1854.4 Q484.292 1850.78 481.954 1848.68 Q479.616 1846.57 475.612 1846.57 Q473.737 1846.57 471.862 1846.99 Q470.01 1847.4 468.065 1848.28 L468.065 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M879.188 1835 L867.382 1853.45 L879.188 1853.45 L879.188 1835 M877.961 1830.92 L883.84 1830.92 L883.84 1853.45 L888.771 1853.45 L888.771 1857.34 L883.84 1857.34 L883.84 1865.48 L879.188 1865.48 L879.188 1857.34 L863.586 1857.34 L863.586 1852.82 L877.961 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M906.502 1834 Q902.891 1834 901.063 1837.57 Q899.257 1841.11 899.257 1848.24 Q899.257 1855.34 901.063 1858.91 Q902.891 1862.45 906.502 1862.45 Q910.137 1862.45 911.942 1858.91 Q913.771 1855.34 913.771 1848.24 Q913.771 1841.11 911.942 1837.57 Q910.137 1834 906.502 1834 M906.502 1830.3 Q912.313 1830.3 915.368 1834.9 Q918.447 1839.49 918.447 1848.24 Q918.447 1856.96 915.368 1861.57 Q912.313 1866.15 906.502 1866.15 Q900.692 1866.15 897.614 1861.57 Q894.558 1856.96 894.558 1848.24 Q894.558 1839.49 897.614 1834.9 Q900.692 1830.3 906.502 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M1308.02 1835 L1296.21 1853.45 L1308.02 1853.45 L1308.02 1835 M1306.79 1830.92 L1312.67 1830.92 L1312.67 1853.45 L1317.6 1853.45 L1317.6 1857.34 L1312.67 1857.34 L1312.67 1865.48 L1308.02 1865.48 L1308.02 1857.34 L1292.42 1857.34 L1292.42 1852.82 L1306.79 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M1325.38 1830.92 L1343.74 1830.92 L1343.74 1834.86 L1329.66 1834.86 L1329.66 1843.33 Q1330.68 1842.98 1331.7 1842.82 Q1332.72 1842.64 1333.74 1842.64 Q1339.52 1842.64 1342.9 1845.81 Q1346.28 1848.98 1346.28 1854.4 Q1346.28 1859.97 1342.81 1863.08 Q1339.34 1866.15 1333.02 1866.15 Q1330.84 1866.15 1328.57 1865.78 Q1326.33 1865.41 1323.92 1864.67 L1323.92 1859.97 Q1326 1861.11 1328.23 1861.66 Q1330.45 1862.22 1332.93 1862.22 Q1336.93 1862.22 1339.27 1860.11 Q1341.61 1858.01 1341.61 1854.4 Q1341.61 1850.78 1339.27 1848.68 Q1336.93 1846.57 1332.93 1846.57 Q1331.05 1846.57 1329.18 1846.99 Q1327.32 1847.4 1325.38 1848.28 L1325.38 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M1722.38 1830.92 L1740.74 1830.92 L1740.74 1834.86 L1726.66 1834.86 L1726.66 1843.33 Q1727.68 1842.98 1728.7 1842.82 Q1729.72 1842.64 1730.74 1842.64 Q1736.52 1842.64 1739.9 1845.81 Q1743.28 1848.98 1743.28 1854.4 Q1743.28 1859.97 1739.81 1863.08 Q1736.34 1866.15 1730.02 1866.15 Q1727.84 1866.15 1725.58 1865.78 Q1723.33 1865.41 1720.92 1864.67 L1720.92 1859.97 Q1723.01 1861.11 1725.23 1861.66 Q1727.45 1862.22 1729.93 1862.22 Q1733.93 1862.22 1736.27 1860.11 Q1738.61 1858.01 1738.61 1854.4 Q1738.61 1850.78 1736.27 1848.68 Q1733.93 1846.57 1729.93 1846.57 Q1728.05 1846.57 1726.18 1846.99 Q1724.33 1847.4 1722.38 1848.28 L1722.38 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M1762.5 1834 Q1758.89 1834 1757.06 1837.57 Q1755.25 1841.11 1755.25 1848.24 Q1755.25 1855.34 1757.06 1858.91 Q1758.89 1862.45 1762.5 1862.45 Q1766.13 1862.45 1767.94 1858.91 Q1769.77 1855.34 1769.77 1848.24 Q1769.77 1841.11 1767.94 1837.57 Q1766.13 1834 1762.5 1834 M1762.5 1830.3 Q1768.31 1830.3 1771.36 1834.9 Q1774.44 1839.49 1774.44 1848.24 Q1774.44 1856.96 1771.36 1861.57 Q1768.31 1866.15 1762.5 1866.15 Q1756.69 1866.15 1753.61 1861.57 Q1750.55 1856.96 1750.55 1848.24 Q1750.55 1839.49 1753.61 1834.9 Q1756.69 1830.3 1762.5 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M2151.21 1830.92 L2169.57 1830.92 L2169.57 1834.86 L2155.49 1834.86 L2155.49 1843.33 Q2156.51 1842.98 2157.53 1842.82 Q2158.55 1842.64 2159.57 1842.64 Q2165.36 1842.64 2168.73 1845.81 Q2172.11 1848.98 2172.11 1854.4 Q2172.11 1859.97 2168.64 1863.08 Q2165.17 1866.15 2158.85 1866.15 Q2156.67 1866.15 2154.41 1865.78 Q2152.16 1865.41 2149.75 1864.67 L2149.75 1859.97 Q2151.84 1861.11 2154.06 1861.66 Q2156.28 1862.22 2158.76 1862.22 Q2162.76 1862.22 2165.1 1860.11 Q2167.44 1858.01 2167.44 1854.4 Q2167.44 1850.78 2165.1 1848.68 Q2162.76 1846.57 2158.76 1846.57 Q2156.88 1846.57 2155.01 1846.99 Q2153.16 1847.4 2151.21 1848.28 L2151.21 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M2181.37 1830.92 L2199.73 1830.92 L2199.73 1834.86 L2185.66 1834.86 L2185.66 1843.33 Q2186.67 1842.98 2187.69 1842.82 Q2188.71 1842.64 2189.73 1842.64 Q2195.52 1842.64 2198.9 1845.81 Q2202.28 1848.98 2202.28 1854.4 Q2202.28 1859.97 2198.8 1863.08 Q2195.33 1866.15 2189.01 1866.15 Q2186.84 1866.15 2184.57 1865.78 Q2182.32 1865.41 2179.92 1864.67 L2179.92 1859.97 Q2182 1861.11 2184.22 1861.66 Q2186.44 1862.22 2188.92 1862.22 Q2192.92 1862.22 2195.26 1860.11 Q2197.6 1858.01 2197.6 1854.4 Q2197.6 1850.78 2195.26 1848.68 Q2192.92 1846.57 2188.92 1846.57 Q2187.04 1846.57 2185.17 1846.99 Q2183.32 1847.4 2181.37 1848.28 L2181.37 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M2589.75 1846.34 Q2586.6 1846.34 2584.75 1848.49 Q2582.92 1850.65 2582.92 1854.4 Q2582.92 1858.12 2584.75 1860.3 Q2586.6 1862.45 2589.75 1862.45 Q2592.9 1862.45 2594.73 1860.3 Q2596.58 1858.12 2596.58 1854.4 Q2596.58 1850.65 2594.73 1848.49 Q2592.9 1846.34 2589.75 1846.34 M2599.04 1831.69 L2599.04 1835.95 Q2597.28 1835.11 2595.47 1834.67 Q2593.69 1834.23 2591.93 1834.23 Q2587.3 1834.23 2584.85 1837.36 Q2582.41 1840.48 2582.07 1846.8 Q2583.43 1844.79 2585.49 1843.72 Q2587.55 1842.64 2590.03 1842.64 Q2595.24 1842.64 2598.25 1845.81 Q2601.28 1848.96 2601.28 1854.4 Q2601.28 1859.72 2598.13 1862.94 Q2594.98 1866.15 2589.75 1866.15 Q2583.76 1866.15 2580.59 1861.57 Q2577.41 1856.96 2577.41 1848.24 Q2577.41 1840.04 2581.3 1835.18 Q2585.19 1830.3 2591.74 1830.3 Q2593.5 1830.3 2595.29 1830.65 Q2597.09 1830.99 2599.04 1831.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M2619.34 1834 Q2615.72 1834 2613.9 1837.57 Q2612.09 1841.11 2612.09 1848.24 Q2612.09 1855.34 2613.9 1858.91 Q2615.72 1862.45 2619.34 1862.45 Q2622.97 1862.45 2624.78 1858.91 Q2626.6 1855.34 2626.6 1848.24 Q2626.6 1841.11 2624.78 1837.57 Q2622.97 1834 2619.34 1834 M2619.34 1830.3 Q2625.15 1830.3 2628.2 1834.9 Q2631.28 1839.49 2631.28 1848.24 Q2631.28 1856.96 2628.2 1861.57 Q2625.15 1866.15 2619.34 1866.15 Q2613.53 1866.15 2610.45 1861.57 Q2607.39 1856.96 2607.39 1848.24 Q2607.39 1839.49 2610.45 1834.9 Q2613.53 1830.3 2619.34 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="143.576,1573.91 2640.76,1573.91 "></polyline>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="143.576,1180.03 2640.76,1180.03 "></polyline>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="143.576,786.155 2640.76,786.155 "></polyline>
<polyline clip-path="url(#clip922)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="143.576,392.279 2640.76,392.279 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,1800.78 143.576,47.2441 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,1573.91 162.473,1573.91 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,1180.03 162.473,1180.03 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,786.155 162.473,786.155 "></polyline>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,392.279 162.473,392.279 "></polyline>
<path clip-path="url(#clip920)" d="M51.4734 1587.25 L59.1123 1587.25 L59.1123 1560.89 L50.8021 1562.55 L50.8021 1558.29 L59.066 1556.63 L63.7419 1556.63 L63.7419 1587.25 L71.3807 1587.25 L71.3807 1591.19 L51.4734 1591.19 L51.4734 1587.25 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M93.6723 1560.7 L81.8668 1579.15 L93.6723 1579.15 L93.6723 1560.7 M92.4454 1556.63 L98.325 1556.63 L98.325 1579.15 L103.256 1579.15 L103.256 1583.04 L98.325 1583.04 L98.325 1591.19 L93.6723 1591.19 L93.6723 1583.04 L78.0705 1583.04 L78.0705 1578.52 L92.4454 1556.63 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M51.7975 1193.38 L59.4363 1193.38 L59.4363 1167.01 L51.1262 1168.68 L51.1262 1164.42 L59.39 1162.75 L64.0659 1162.75 L64.0659 1193.38 L71.7048 1193.38 L71.7048 1197.31 L51.7975 1197.31 L51.7975 1193.38 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M91.7278 1178.17 Q88.5797 1178.17 86.7279 1180.32 Q84.8992 1182.47 84.8992 1186.22 Q84.8992 1189.95 86.7279 1192.13 Q88.5797 1194.28 91.7278 1194.28 Q94.876 1194.28 96.7047 1192.13 Q98.5565 1189.95 98.5565 1186.22 Q98.5565 1182.47 96.7047 1180.32 Q94.876 1178.17 91.7278 1178.17 M101.01 1163.51 L101.01 1167.77 Q99.2509 1166.94 97.4454 1166.5 Q95.663 1166.06 93.9037 1166.06 Q89.2741 1166.06 86.8204 1169.19 Q84.3899 1172.31 84.0427 1178.63 Q85.4084 1176.62 87.4686 1175.55 Q89.5288 1174.46 92.0056 1174.46 Q97.2139 1174.46 100.223 1177.64 Q103.256 1180.78 103.256 1186.22 Q103.256 1191.55 100.107 1194.76 Q96.9593 1197.98 91.7278 1197.98 Q85.7325 1197.98 82.5612 1193.4 Q79.3899 1188.79 79.3899 1180.07 Q79.3899 1171.87 83.2788 1167.01 Q87.1677 1162.13 93.7186 1162.13 Q95.4778 1162.13 97.2602 1162.47 Q99.0657 1162.82 101.01 1163.51 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M52.0521 799.5 L59.691 799.5 L59.691 773.134 L51.3808 774.801 L51.3808 770.542 L59.6447 768.875 L64.3206 768.875 L64.3206 799.5 L71.9594 799.5 L71.9594 803.435 L52.0521 803.435 L52.0521 799.5 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M91.4038 787.023 Q88.0704 787.023 86.1492 788.806 Q84.251 790.588 84.251 793.713 Q84.251 796.838 86.1492 798.62 Q88.0704 800.403 91.4038 800.403 Q94.7371 800.403 96.6584 798.62 Q98.5796 796.815 98.5796 793.713 Q98.5796 790.588 96.6584 788.806 Q94.7602 787.023 91.4038 787.023 M86.7279 785.032 Q83.7186 784.292 82.0288 782.232 Q80.3621 780.171 80.3621 777.208 Q80.3621 773.065 83.3019 770.658 Q86.2649 768.25 91.4038 768.25 Q96.5658 768.25 99.5056 770.658 Q102.445 773.065 102.445 777.208 Q102.445 780.171 100.756 782.232 Q99.0889 784.292 96.1028 785.032 Q99.4824 785.82 101.357 788.111 Q103.256 790.403 103.256 793.713 Q103.256 798.736 100.177 801.421 Q97.1213 804.106 91.4038 804.106 Q85.6862 804.106 82.6075 801.421 Q79.552 798.736 79.552 793.713 Q79.552 790.403 81.4501 788.111 Q83.3482 785.82 86.7279 785.032 M85.0149 777.648 Q85.0149 780.333 86.6816 781.838 Q88.3714 783.343 91.4038 783.343 Q94.413 783.343 96.1028 781.838 Q97.8158 780.333 97.8158 777.648 Q97.8158 774.963 96.1028 773.458 Q94.413 771.954 91.4038 771.954 Q88.3714 771.954 86.6816 773.458 Q85.0149 774.963 85.0149 777.648 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M55.1771 405.624 L71.4965 405.624 L71.4965 409.559 L49.5521 409.559 L49.5521 405.624 Q52.2141 402.87 56.7975 398.24 Q61.4039 393.587 62.5845 392.245 Q64.8298 389.721 65.7094 387.985 Q66.6122 386.226 66.6122 384.536 Q66.6122 381.782 64.6678 380.046 Q62.7465 378.309 59.6447 378.309 Q57.4456 378.309 54.9919 379.073 Q52.5614 379.837 49.7836 381.388 L49.7836 376.666 Q52.6077 375.532 55.0614 374.953 Q57.515 374.374 59.5521 374.374 Q64.9224 374.374 68.1168 377.059 Q71.3113 379.745 71.3113 384.235 Q71.3113 386.365 70.5011 388.286 Q69.7141 390.184 67.6076 392.777 Q67.0289 393.448 63.927 396.666 Q60.8252 399.86 55.1771 405.624 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M91.3112 378.078 Q87.7001 378.078 85.8714 381.643 Q84.0658 385.184 84.0658 392.314 Q84.0658 399.42 85.8714 402.985 Q87.7001 406.527 91.3112 406.527 Q94.9454 406.527 96.7509 402.985 Q98.5796 399.42 98.5796 392.314 Q98.5796 385.184 96.7509 381.643 Q94.9454 378.078 91.3112 378.078 M91.3112 374.374 Q97.1213 374.374 100.177 378.981 Q103.256 383.564 103.256 392.314 Q103.256 401.041 100.177 405.647 Q97.1213 410.231 91.3112 410.231 Q85.501 410.231 82.4223 405.647 Q79.3668 401.041 79.3668 392.314 Q79.3668 383.564 82.4223 378.981 Q85.501 374.374 91.3112 374.374 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip922)" cx="813.916" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="848.183" cy="904.318" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="916.716" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="608.317" cy="530.136" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="831.05" cy="274.117" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="796.783" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="822.483" cy="471.054" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="385.584" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1062.35" cy="352.892" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="702.55" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="702.55" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="985.25" cy="864.93" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="771.083" cy="155.954" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="428.417" cy="175.648" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="599.75" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="779.65" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1105.18" cy="254.423" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="411.284" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1405.02" cy="96.8724" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="702.55" cy="727.074" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="693.983" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="539.783" cy="549.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="736.817" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="788.216" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="488.383" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="942.416" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="933.85" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="711.117" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="933.85" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="848.183" cy="1042.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="651.15" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="848.183" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="968.116" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="582.617" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="822.483" cy="175.648" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="788.216" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1079.48" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="685.417" cy="530.136" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="873.883" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="591.183" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="959.55" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="548.35" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1242.25" cy="451.361" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="634.017" cy="1002.79" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="856.75" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="985.25" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="676.85" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="548.35" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1088.05" cy="155.954" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="856.75" cy="845.237" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="899.583" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="462.683" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1062.35" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="419.85" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1010.95" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="805.35" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="942.416" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="591.183" cy="1061.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="685.417" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="522.65" cy="1002.79" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1002.38" cy="175.648" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="685.417" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="985.25" cy="746.768" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="582.617" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1028.08" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="505.517" cy="1140.64" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="985.25" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="539.783" cy="1061.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1045.22" cy="510.442" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="334.184" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="865.316" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="856.75" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1387.88" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="505.517" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1130.88" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="968.116" cy="1022.48" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="651.15" cy="510.442" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="565.483" cy="1160.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1070.92" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="428.417" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1139.45" cy="864.93" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="608.317" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="471.25" cy="510.442" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="659.717" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1002.38" cy="333.198" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="574.05" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="625.45" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="745.383" cy="549.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="796.783" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="522.65" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="985.25" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="377.017" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="856.75" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="565.483" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="959.55" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="728.25" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="916.716" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="299.917" cy="1160.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1165.15" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="462.683" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="976.683" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="693.983" cy="1180.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="702.55" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="711.117" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="865.316" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="771.083" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="736.817" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="728.25" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1165.15" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="728.25" cy="1081.56" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1370.75" cy="333.198" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="865.316" cy="845.237" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1079.48" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="856.75" cy="254.423" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1122.32" cy="727.074" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="771.083" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="659.717" cy="293.81" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="522.65" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="985.25" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="565.483" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="693.983" cy="431.667" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="908.15" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1010.95" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="479.817" cy="1199.72" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="942.416" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="788.216" cy="864.93" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1019.52" cy="727.074" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="805.35" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1242.25" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="762.516" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1156.58" cy="549.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="616.883" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="676.85" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="728.25" cy="864.93" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="985.25" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="514.083" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="908.15" cy="372.586" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="634.017" cy="1081.56" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="865.316" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="908.15" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="942.416" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="214.25" cy="1278.5" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="950.983" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="659.717" cy="1022.48" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="805.35" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="822.483" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="599.75" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="548.35" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="702.55" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="548.35" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1019.52" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1413.58" cy="1731.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1747.68" cy="1120.95" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1636.32" cy="1554.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1747.68" cy="1337.58" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1542.08" cy="1475.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1447.85" cy="1672.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1353.62" cy="1455.74" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1464.98" cy="1317.89" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1173.72" cy="1692.07" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1473.55" cy="1298.19" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="968.116" cy="1632.99" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1662.02" cy="1160.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1362.18" cy="1632.99" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1610.62" cy="1455.74" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1387.88" cy="1455.74" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1687.72" cy="1239.11" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1062.35" cy="1672.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1679.15" cy="1337.58" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1422.15" cy="1475.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1636.32" cy="1357.28" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1764.82" cy="1514.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1327.92" cy="1475.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1447.85" cy="1475.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1430.72" cy="1219.42" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1139.45" cy="1751.15" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1413.58" cy="1357.28" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1276.52" cy="1514.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1559.22" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1593.48" cy="1514.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1747.68" cy="1317.89" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1516.38" cy="1317.89" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1130.88" cy="1534.52" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1327.92" cy="1475.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2570.08" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1670.58" cy="1416.36" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1610.62" cy="1120.95" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1113.75" cy="1632.99" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1267.95" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1233.68" cy="1652.68" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1636.32" cy="1239.11" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1122.32" cy="1632.99" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1713.42" cy="1180.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1345.05" cy="1632.99" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1713.42" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1790.52" cy="1199.72" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1199.42" cy="1593.6" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1362.18" cy="1593.6" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1790.52" cy="1199.72" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1310.78" cy="1711.76" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1336.48" cy="1219.42" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1456.42" cy="1534.52" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1619.18" cy="1554.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1327.92" cy="1495.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1756.25" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1447.85" cy="1495.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1319.35" cy="1298.19" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1216.55" cy="1593.6" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1362.18" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1165.15" cy="1475.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1781.95" cy="1317.89" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1345.05" cy="1613.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1422.15" cy="1396.66" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1379.32" cy="1593.6" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2116.05" cy="1239.11" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1387.88" cy="1534.52" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1730.55" cy="1022.48" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1422.15" cy="1495.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1704.85" cy="1140.64" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1190.85" cy="1534.52" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1807.65" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1550.65" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1439.28" cy="1258.81" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1593.48" cy="1258.81" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1447.85" cy="1416.36" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1439.28" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1627.75" cy="1180.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1533.52" cy="1534.52" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1841.92" cy="1120.95" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1336.48" cy="1613.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1336.48" cy="1101.26" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1670.58" cy="1475.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1961.85" cy="1258.81" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1524.95" cy="1455.74" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1747.68" cy="1199.72" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1310.78" cy="1613.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1816.22" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1182.28" cy="1495.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1859.05" cy="1534.52" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1533.52" cy="1573.91" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1927.58" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1533.52" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1936.15" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1362.18" cy="1475.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1704.85" cy="1160.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1276.52" cy="1436.05" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1816.22" cy="1239.11" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1696.28" cy="1219.42" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1482.12" cy="1455.74" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1610.62" cy="1495.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1841.92" cy="1081.56" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1619.18" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2253.11" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1507.82" cy="1278.5" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1670.58" cy="1376.97" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1516.38" cy="1613.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1473.55" cy="1160.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1036.65" cy="1436.05" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2038.95" cy="1219.42" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1173.72" cy="1573.91" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1584.92" cy="1357.28" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1790.52" cy="1337.58" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1730.55" cy="1199.72" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1190.85" cy="1337.58" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1876.18" cy="1120.95" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1422.15" cy="1554.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2184.58" cy="1180.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1276.52" cy="1239.11" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1644.88" cy="1140.64" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1507.82" cy="1632.99" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1473.55" cy="1514.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1781.95" cy="1239.11" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1336.48" cy="1416.36" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1739.12" cy="1160.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1447.85" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1747.68" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1859.05" cy="549.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1353.62" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1978.98" cy="431.667" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1336.48" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1413.58" cy="746.768" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1859.05" cy="746.768" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1405.02" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1859.05" cy="411.973" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1456.42" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1893.32" cy="333.198" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1490.68" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1919.02" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1396.45" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1790.52" cy="471.054" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1773.38" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2433.01" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1439.28" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1679.15" cy="746.768" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1096.62" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1619.18" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1165.15" cy="1061.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1799.08" cy="510.442" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1464.98" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1919.02" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1790.52" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1704.85" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1439.28" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1987.55" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="968.116" cy="1061.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2107.48" cy="234.729" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1105.18" cy="1042.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1833.35" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1721.98" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1533.52" cy="1022.48" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1542.08" cy="727.074" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1919.02" cy="254.423" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1482.12" cy="1061.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2047.51" cy="411.973" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1662.02" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1422.15" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1824.78" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1362.18" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1824.78" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1816.22" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1756.25" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1662.02" cy="471.054" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1876.18" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1730.55" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1584.92" cy="1101.26" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1867.62" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1379.32" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1807.65" cy="451.361" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1105.18" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1936.15" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1336.48" cy="1061.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1687.72" cy="411.973" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1764.82" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1370.75" cy="510.442" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1910.45" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1473.55" cy="1081.56" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1379.32" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="2244.55" cy="431.667" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1190.85" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1713.42" cy="746.768" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1816.22" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip922)" cx="1764.82" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<path clip-path="url(#clip920)" d="M2255.37 1742.33 L2557.52 1742.33 L2557.52 1638.65 L2255.37 1638.65  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip920)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2255.37,1742.33 2557.52,1742.33 2557.52,1638.65 2255.37,1638.65 2255.37,1742.33 "></polyline>
<circle clip-path="url(#clip920)" cx="2366.35" cy="1690.49" r="20.48" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.46133"></circle>
<path clip-path="url(#clip920)" d="M2491.18 1710.18 Q2489.38 1714.81 2487.66 1716.22 Q2485.95 1717.63 2483.08 1717.63 L2479.68 1717.63 L2479.68 1714.06 L2482.18 1714.06 Q2483.94 1714.06 2484.91 1713.23 Q2485.88 1712.4 2487.06 1709.3 L2487.83 1707.35 L2477.34 1681.84 L2481.85 1681.84 L2489.96 1702.12 L2498.06 1681.84 L2502.57 1681.84 L2491.18 1710.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip920)" d="M2509.86 1703.83 L2517.5 1703.83 L2517.5 1677.47 L2509.19 1679.13 L2509.19 1674.87 L2517.46 1673.21 L2522.13 1673.21 L2522.13 1703.83 L2529.77 1703.83 L2529.77 1707.77 L2509.86 1707.77 L2509.86 1703.83 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>
<p>It’s little awkward to refer to the <code>penguins</code> data frame repeatedly in this code, and so it’s more convenient to use the <code>@df</code> macro:</p>
<div id="faff662f" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@df</span> penguins <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb4-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm,</span>
<span id="cb4-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_depth_mm,</span>
<span id="cb4-4">  seriestype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>scatter,</span>
<span id="cb4-5">  group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>species</span>
<span id="cb4-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="672" height="480" viewbox="0 0 2688 1920">
<defs>
  <clippath id="clip010">
    <rect x="0" y="0" width="2688" height="1920"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip010)" d="M0 1920 L2688 1920 L2688 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip011">
    <rect x="537" y="0" width="1883" height="1883"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip010)" d="M143.576 1800.78 L2640.76 1800.78 L2640.76 47.2441 L143.576 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip012">
    <rect x="143" y="47" width="2498" height="1755"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="462.683,1800.78 462.683,47.2441 "></polyline>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="891.016,1800.78 891.016,47.2441 "></polyline>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1319.35,1800.78 1319.35,47.2441 "></polyline>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1747.68,1800.78 1747.68,47.2441 "></polyline>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2176.01,1800.78 2176.01,47.2441 "></polyline>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2604.35,1800.78 2604.35,47.2441 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,1800.78 2640.76,1800.78 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="462.683,1800.78 462.683,1781.88 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="891.016,1800.78 891.016,1781.88 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1319.35,1800.78 1319.35,1781.88 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1747.68,1800.78 1747.68,1781.88 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2176.01,1800.78 2176.01,1781.88 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2604.35,1800.78 2604.35,1781.88 "></polyline>
<path clip-path="url(#clip010)" d="M452.024 1846.85 Q455.38 1847.57 457.255 1849.84 Q459.153 1852.1 459.153 1855.44 Q459.153 1860.55 455.635 1863.35 Q452.116 1866.15 445.635 1866.15 Q443.459 1866.15 441.144 1865.71 Q438.853 1865.3 436.399 1864.44 L436.399 1859.93 Q438.343 1861.06 440.658 1861.64 Q442.973 1862.22 445.496 1862.22 Q449.894 1862.22 452.186 1860.48 Q454.501 1858.75 454.501 1855.44 Q454.501 1852.38 452.348 1850.67 Q450.218 1848.93 446.399 1848.93 L442.371 1848.93 L442.371 1845.09 L446.584 1845.09 Q450.033 1845.09 451.862 1843.72 Q453.69 1842.34 453.69 1839.74 Q453.69 1837.08 451.792 1835.67 Q449.917 1834.23 446.399 1834.23 Q444.478 1834.23 442.279 1834.65 Q440.079 1835.07 437.441 1835.95 L437.441 1831.78 Q440.103 1831.04 442.417 1830.67 Q444.755 1830.3 446.816 1830.3 Q452.14 1830.3 455.241 1832.73 Q458.343 1835.14 458.343 1839.26 Q458.343 1842.13 456.7 1844.12 Q455.056 1846.09 452.024 1846.85 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M468.065 1830.92 L486.422 1830.92 L486.422 1834.86 L472.348 1834.86 L472.348 1843.33 Q473.366 1842.98 474.385 1842.82 Q475.403 1842.64 476.422 1842.64 Q482.209 1842.64 485.588 1845.81 Q488.968 1848.98 488.968 1854.4 Q488.968 1859.97 485.496 1863.08 Q482.024 1866.15 475.704 1866.15 Q473.528 1866.15 471.26 1865.78 Q469.014 1865.41 466.607 1864.67 L466.607 1859.97 Q468.69 1861.11 470.913 1861.66 Q473.135 1862.22 475.612 1862.22 Q479.616 1862.22 481.954 1860.11 Q484.292 1858.01 484.292 1854.4 Q484.292 1850.78 481.954 1848.68 Q479.616 1846.57 475.612 1846.57 Q473.737 1846.57 471.862 1846.99 Q470.01 1847.4 468.065 1848.28 L468.065 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M879.188 1835 L867.382 1853.45 L879.188 1853.45 L879.188 1835 M877.961 1830.92 L883.84 1830.92 L883.84 1853.45 L888.771 1853.45 L888.771 1857.34 L883.84 1857.34 L883.84 1865.48 L879.188 1865.48 L879.188 1857.34 L863.586 1857.34 L863.586 1852.82 L877.961 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M906.502 1834 Q902.891 1834 901.063 1837.57 Q899.257 1841.11 899.257 1848.24 Q899.257 1855.34 901.063 1858.91 Q902.891 1862.45 906.502 1862.45 Q910.137 1862.45 911.942 1858.91 Q913.771 1855.34 913.771 1848.24 Q913.771 1841.11 911.942 1837.57 Q910.137 1834 906.502 1834 M906.502 1830.3 Q912.313 1830.3 915.368 1834.9 Q918.447 1839.49 918.447 1848.24 Q918.447 1856.96 915.368 1861.57 Q912.313 1866.15 906.502 1866.15 Q900.692 1866.15 897.614 1861.57 Q894.558 1856.96 894.558 1848.24 Q894.558 1839.49 897.614 1834.9 Q900.692 1830.3 906.502 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M1308.02 1835 L1296.21 1853.45 L1308.02 1853.45 L1308.02 1835 M1306.79 1830.92 L1312.67 1830.92 L1312.67 1853.45 L1317.6 1853.45 L1317.6 1857.34 L1312.67 1857.34 L1312.67 1865.48 L1308.02 1865.48 L1308.02 1857.34 L1292.42 1857.34 L1292.42 1852.82 L1306.79 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M1325.38 1830.92 L1343.74 1830.92 L1343.74 1834.86 L1329.66 1834.86 L1329.66 1843.33 Q1330.68 1842.98 1331.7 1842.82 Q1332.72 1842.64 1333.74 1842.64 Q1339.52 1842.64 1342.9 1845.81 Q1346.28 1848.98 1346.28 1854.4 Q1346.28 1859.97 1342.81 1863.08 Q1339.34 1866.15 1333.02 1866.15 Q1330.84 1866.15 1328.57 1865.78 Q1326.33 1865.41 1323.92 1864.67 L1323.92 1859.97 Q1326 1861.11 1328.23 1861.66 Q1330.45 1862.22 1332.93 1862.22 Q1336.93 1862.22 1339.27 1860.11 Q1341.61 1858.01 1341.61 1854.4 Q1341.61 1850.78 1339.27 1848.68 Q1336.93 1846.57 1332.93 1846.57 Q1331.05 1846.57 1329.18 1846.99 Q1327.32 1847.4 1325.38 1848.28 L1325.38 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M1722.38 1830.92 L1740.74 1830.92 L1740.74 1834.86 L1726.66 1834.86 L1726.66 1843.33 Q1727.68 1842.98 1728.7 1842.82 Q1729.72 1842.64 1730.74 1842.64 Q1736.52 1842.64 1739.9 1845.81 Q1743.28 1848.98 1743.28 1854.4 Q1743.28 1859.97 1739.81 1863.08 Q1736.34 1866.15 1730.02 1866.15 Q1727.84 1866.15 1725.58 1865.78 Q1723.33 1865.41 1720.92 1864.67 L1720.92 1859.97 Q1723.01 1861.11 1725.23 1861.66 Q1727.45 1862.22 1729.93 1862.22 Q1733.93 1862.22 1736.27 1860.11 Q1738.61 1858.01 1738.61 1854.4 Q1738.61 1850.78 1736.27 1848.68 Q1733.93 1846.57 1729.93 1846.57 Q1728.05 1846.57 1726.18 1846.99 Q1724.33 1847.4 1722.38 1848.28 L1722.38 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M1762.5 1834 Q1758.89 1834 1757.06 1837.57 Q1755.25 1841.11 1755.25 1848.24 Q1755.25 1855.34 1757.06 1858.91 Q1758.89 1862.45 1762.5 1862.45 Q1766.13 1862.45 1767.94 1858.91 Q1769.77 1855.34 1769.77 1848.24 Q1769.77 1841.11 1767.94 1837.57 Q1766.13 1834 1762.5 1834 M1762.5 1830.3 Q1768.31 1830.3 1771.36 1834.9 Q1774.44 1839.49 1774.44 1848.24 Q1774.44 1856.96 1771.36 1861.57 Q1768.31 1866.15 1762.5 1866.15 Q1756.69 1866.15 1753.61 1861.57 Q1750.55 1856.96 1750.55 1848.24 Q1750.55 1839.49 1753.61 1834.9 Q1756.69 1830.3 1762.5 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2151.21 1830.92 L2169.57 1830.92 L2169.57 1834.86 L2155.49 1834.86 L2155.49 1843.33 Q2156.51 1842.98 2157.53 1842.82 Q2158.55 1842.64 2159.57 1842.64 Q2165.36 1842.64 2168.73 1845.81 Q2172.11 1848.98 2172.11 1854.4 Q2172.11 1859.97 2168.64 1863.08 Q2165.17 1866.15 2158.85 1866.15 Q2156.67 1866.15 2154.41 1865.78 Q2152.16 1865.41 2149.75 1864.67 L2149.75 1859.97 Q2151.84 1861.11 2154.06 1861.66 Q2156.28 1862.22 2158.76 1862.22 Q2162.76 1862.22 2165.1 1860.11 Q2167.44 1858.01 2167.44 1854.4 Q2167.44 1850.78 2165.1 1848.68 Q2162.76 1846.57 2158.76 1846.57 Q2156.88 1846.57 2155.01 1846.99 Q2153.16 1847.4 2151.21 1848.28 L2151.21 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2181.37 1830.92 L2199.73 1830.92 L2199.73 1834.86 L2185.66 1834.86 L2185.66 1843.33 Q2186.67 1842.98 2187.69 1842.82 Q2188.71 1842.64 2189.73 1842.64 Q2195.52 1842.64 2198.9 1845.81 Q2202.28 1848.98 2202.28 1854.4 Q2202.28 1859.97 2198.8 1863.08 Q2195.33 1866.15 2189.01 1866.15 Q2186.84 1866.15 2184.57 1865.78 Q2182.32 1865.41 2179.92 1864.67 L2179.92 1859.97 Q2182 1861.11 2184.22 1861.66 Q2186.44 1862.22 2188.92 1862.22 Q2192.92 1862.22 2195.26 1860.11 Q2197.6 1858.01 2197.6 1854.4 Q2197.6 1850.78 2195.26 1848.68 Q2192.92 1846.57 2188.92 1846.57 Q2187.04 1846.57 2185.17 1846.99 Q2183.32 1847.4 2181.37 1848.28 L2181.37 1830.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2589.75 1846.34 Q2586.6 1846.34 2584.75 1848.49 Q2582.92 1850.65 2582.92 1854.4 Q2582.92 1858.12 2584.75 1860.3 Q2586.6 1862.45 2589.75 1862.45 Q2592.9 1862.45 2594.73 1860.3 Q2596.58 1858.12 2596.58 1854.4 Q2596.58 1850.65 2594.73 1848.49 Q2592.9 1846.34 2589.75 1846.34 M2599.04 1831.69 L2599.04 1835.95 Q2597.28 1835.11 2595.47 1834.67 Q2593.69 1834.23 2591.93 1834.23 Q2587.3 1834.23 2584.85 1837.36 Q2582.41 1840.48 2582.07 1846.8 Q2583.43 1844.79 2585.49 1843.72 Q2587.55 1842.64 2590.03 1842.64 Q2595.24 1842.64 2598.25 1845.81 Q2601.28 1848.96 2601.28 1854.4 Q2601.28 1859.72 2598.13 1862.94 Q2594.98 1866.15 2589.75 1866.15 Q2583.76 1866.15 2580.59 1861.57 Q2577.41 1856.96 2577.41 1848.24 Q2577.41 1840.04 2581.3 1835.18 Q2585.19 1830.3 2591.74 1830.3 Q2593.5 1830.3 2595.29 1830.65 Q2597.09 1830.99 2599.04 1831.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2619.34 1834 Q2615.72 1834 2613.9 1837.57 Q2612.09 1841.11 2612.09 1848.24 Q2612.09 1855.34 2613.9 1858.91 Q2615.72 1862.45 2619.34 1862.45 Q2622.97 1862.45 2624.78 1858.91 Q2626.6 1855.34 2626.6 1848.24 Q2626.6 1841.11 2624.78 1837.57 Q2622.97 1834 2619.34 1834 M2619.34 1830.3 Q2625.15 1830.3 2628.2 1834.9 Q2631.28 1839.49 2631.28 1848.24 Q2631.28 1856.96 2628.2 1861.57 Q2625.15 1866.15 2619.34 1866.15 Q2613.53 1866.15 2610.45 1861.57 Q2607.39 1856.96 2607.39 1848.24 Q2607.39 1839.49 2610.45 1834.9 Q2613.53 1830.3 2619.34 1830.3 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="143.576,1573.91 2640.76,1573.91 "></polyline>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="143.576,1180.03 2640.76,1180.03 "></polyline>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="143.576,786.155 2640.76,786.155 "></polyline>
<polyline clip-path="url(#clip012)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="143.576,392.279 2640.76,392.279 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,1800.78 143.576,47.2441 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,1573.91 162.473,1573.91 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,1180.03 162.473,1180.03 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,786.155 162.473,786.155 "></polyline>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="143.576,392.279 162.473,392.279 "></polyline>
<path clip-path="url(#clip010)" d="M51.4734 1587.25 L59.1123 1587.25 L59.1123 1560.89 L50.8021 1562.55 L50.8021 1558.29 L59.066 1556.63 L63.7419 1556.63 L63.7419 1587.25 L71.3807 1587.25 L71.3807 1591.19 L51.4734 1591.19 L51.4734 1587.25 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M93.6723 1560.7 L81.8668 1579.15 L93.6723 1579.15 L93.6723 1560.7 M92.4454 1556.63 L98.325 1556.63 L98.325 1579.15 L103.256 1579.15 L103.256 1583.04 L98.325 1583.04 L98.325 1591.19 L93.6723 1591.19 L93.6723 1583.04 L78.0705 1583.04 L78.0705 1578.52 L92.4454 1556.63 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M51.7975 1193.38 L59.4363 1193.38 L59.4363 1167.01 L51.1262 1168.68 L51.1262 1164.42 L59.39 1162.75 L64.0659 1162.75 L64.0659 1193.38 L71.7048 1193.38 L71.7048 1197.31 L51.7975 1197.31 L51.7975 1193.38 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M91.7278 1178.17 Q88.5797 1178.17 86.7279 1180.32 Q84.8992 1182.47 84.8992 1186.22 Q84.8992 1189.95 86.7279 1192.13 Q88.5797 1194.28 91.7278 1194.28 Q94.876 1194.28 96.7047 1192.13 Q98.5565 1189.95 98.5565 1186.22 Q98.5565 1182.47 96.7047 1180.32 Q94.876 1178.17 91.7278 1178.17 M101.01 1163.51 L101.01 1167.77 Q99.2509 1166.94 97.4454 1166.5 Q95.663 1166.06 93.9037 1166.06 Q89.2741 1166.06 86.8204 1169.19 Q84.3899 1172.31 84.0427 1178.63 Q85.4084 1176.62 87.4686 1175.55 Q89.5288 1174.46 92.0056 1174.46 Q97.2139 1174.46 100.223 1177.64 Q103.256 1180.78 103.256 1186.22 Q103.256 1191.55 100.107 1194.76 Q96.9593 1197.98 91.7278 1197.98 Q85.7325 1197.98 82.5612 1193.4 Q79.3899 1188.79 79.3899 1180.07 Q79.3899 1171.87 83.2788 1167.01 Q87.1677 1162.13 93.7186 1162.13 Q95.4778 1162.13 97.2602 1162.47 Q99.0657 1162.82 101.01 1163.51 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M52.0521 799.5 L59.691 799.5 L59.691 773.134 L51.3808 774.801 L51.3808 770.542 L59.6447 768.875 L64.3206 768.875 L64.3206 799.5 L71.9594 799.5 L71.9594 803.435 L52.0521 803.435 L52.0521 799.5 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M91.4038 787.023 Q88.0704 787.023 86.1492 788.806 Q84.251 790.588 84.251 793.713 Q84.251 796.838 86.1492 798.62 Q88.0704 800.403 91.4038 800.403 Q94.7371 800.403 96.6584 798.62 Q98.5796 796.815 98.5796 793.713 Q98.5796 790.588 96.6584 788.806 Q94.7602 787.023 91.4038 787.023 M86.7279 785.032 Q83.7186 784.292 82.0288 782.232 Q80.3621 780.171 80.3621 777.208 Q80.3621 773.065 83.3019 770.658 Q86.2649 768.25 91.4038 768.25 Q96.5658 768.25 99.5056 770.658 Q102.445 773.065 102.445 777.208 Q102.445 780.171 100.756 782.232 Q99.0889 784.292 96.1028 785.032 Q99.4824 785.82 101.357 788.111 Q103.256 790.403 103.256 793.713 Q103.256 798.736 100.177 801.421 Q97.1213 804.106 91.4038 804.106 Q85.6862 804.106 82.6075 801.421 Q79.552 798.736 79.552 793.713 Q79.552 790.403 81.4501 788.111 Q83.3482 785.82 86.7279 785.032 M85.0149 777.648 Q85.0149 780.333 86.6816 781.838 Q88.3714 783.343 91.4038 783.343 Q94.413 783.343 96.1028 781.838 Q97.8158 780.333 97.8158 777.648 Q97.8158 774.963 96.1028 773.458 Q94.413 771.954 91.4038 771.954 Q88.3714 771.954 86.6816 773.458 Q85.0149 774.963 85.0149 777.648 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M55.1771 405.624 L71.4965 405.624 L71.4965 409.559 L49.5521 409.559 L49.5521 405.624 Q52.2141 402.87 56.7975 398.24 Q61.4039 393.587 62.5845 392.245 Q64.8298 389.721 65.7094 387.985 Q66.6122 386.226 66.6122 384.536 Q66.6122 381.782 64.6678 380.046 Q62.7465 378.309 59.6447 378.309 Q57.4456 378.309 54.9919 379.073 Q52.5614 379.837 49.7836 381.388 L49.7836 376.666 Q52.6077 375.532 55.0614 374.953 Q57.515 374.374 59.5521 374.374 Q64.9224 374.374 68.1168 377.059 Q71.3113 379.745 71.3113 384.235 Q71.3113 386.365 70.5011 388.286 Q69.7141 390.184 67.6076 392.777 Q67.0289 393.448 63.927 396.666 Q60.8252 399.86 55.1771 405.624 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M91.3112 378.078 Q87.7001 378.078 85.8714 381.643 Q84.0658 385.184 84.0658 392.314 Q84.0658 399.42 85.8714 402.985 Q87.7001 406.527 91.3112 406.527 Q94.9454 406.527 96.7509 402.985 Q98.5796 399.42 98.5796 392.314 Q98.5796 385.184 96.7509 381.643 Q94.9454 378.078 91.3112 378.078 M91.3112 374.374 Q97.1213 374.374 100.177 378.981 Q103.256 383.564 103.256 392.314 Q103.256 401.041 100.177 405.647 Q97.1213 410.231 91.3112 410.231 Q85.501 410.231 82.4223 405.647 Q79.3668 401.041 79.3668 392.314 Q79.3668 383.564 82.4223 378.981 Q85.501 374.374 91.3112 374.374 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip012)" cx="813.916" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="848.183" cy="904.318" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="916.716" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="608.317" cy="530.136" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="831.05" cy="274.117" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="796.783" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="822.483" cy="471.054" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="385.584" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1062.35" cy="352.892" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="702.55" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="702.55" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="985.25" cy="864.93" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="771.083" cy="155.954" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="428.417" cy="175.648" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="599.75" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="779.65" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1105.18" cy="254.423" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="411.284" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1405.02" cy="96.8724" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="702.55" cy="727.074" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="693.983" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="539.783" cy="549.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="736.817" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="788.216" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="488.383" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="942.416" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="933.85" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="711.117" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="933.85" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="848.183" cy="1042.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="651.15" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="848.183" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="968.116" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="582.617" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="822.483" cy="175.648" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="788.216" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1079.48" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="685.417" cy="530.136" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="873.883" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="591.183" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="959.55" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="548.35" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1242.25" cy="451.361" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="634.017" cy="1002.79" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="856.75" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="985.25" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="676.85" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="548.35" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1088.05" cy="155.954" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="856.75" cy="845.237" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="899.583" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="462.683" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1062.35" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="419.85" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1010.95" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="805.35" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="942.416" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="591.183" cy="1061.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="685.417" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="522.65" cy="1002.79" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1002.38" cy="175.648" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="685.417" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="985.25" cy="746.768" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="582.617" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1028.08" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="505.517" cy="1140.64" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="985.25" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="539.783" cy="1061.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1045.22" cy="510.442" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="334.184" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="865.316" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="856.75" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1387.88" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="505.517" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1130.88" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="968.116" cy="1022.48" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="651.15" cy="510.442" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="565.483" cy="1160.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1070.92" cy="569.523" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="428.417" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1139.45" cy="864.93" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="608.317" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="471.25" cy="510.442" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="659.717" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1002.38" cy="333.198" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="574.05" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="625.45" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="745.383" cy="549.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="796.783" cy="628.605" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="522.65" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="985.25" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="377.017" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="856.75" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="565.483" cy="924.012" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="959.55" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="728.25" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="916.716" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="299.917" cy="1160.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1165.15" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="462.683" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="976.683" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="693.983" cy="1180.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="702.55" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="711.117" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="865.316" cy="608.911" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="771.083" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="736.817" cy="392.279" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="728.25" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1165.15" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="728.25" cy="1081.56" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1370.75" cy="333.198" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="865.316" cy="845.237" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1079.48" cy="490.748" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="856.75" cy="254.423" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1122.32" cy="727.074" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="771.083" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="659.717" cy="293.81" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="522.65" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="985.25" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="565.483" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="693.983" cy="431.667" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="908.15" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1010.95" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="479.817" cy="1199.72" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="942.416" cy="589.217" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="788.216" cy="864.93" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1019.52" cy="727.074" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="805.35" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1242.25" cy="786.155" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="762.516" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1156.58" cy="549.83" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="616.883" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="676.85" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="728.25" cy="864.93" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="985.25" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="514.083" cy="884.624" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="908.15" cy="372.586" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="634.017" cy="1081.56" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="865.316" cy="805.849" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="908.15" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="942.416" cy="943.705" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="214.25" cy="1278.5" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="950.983" cy="983.093" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="659.717" cy="1022.48" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="805.35" cy="648.299" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="822.483" cy="667.992" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="599.75" cy="707.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="548.35" cy="825.543" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="702.55" cy="766.461" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="548.35" cy="963.399" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1019.52" cy="687.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1447.85" cy="805.849" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1747.68" cy="490.748" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1859.05" cy="549.83" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1353.62" cy="648.299" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1978.98" cy="431.667" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1336.48" cy="825.543" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1413.58" cy="746.768" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1859.05" cy="746.768" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1405.02" cy="608.911" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1859.05" cy="411.973" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1456.42" cy="825.543" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1893.32" cy="333.198" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1490.68" cy="924.012" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1919.02" cy="766.461" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1396.45" cy="963.399" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1790.52" cy="471.054" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1773.38" cy="392.279" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2433.01" cy="825.543" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1439.28" cy="667.992" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1679.15" cy="746.768" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1096.62" cy="924.012" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1619.18" cy="884.624" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1165.15" cy="1061.87" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1799.08" cy="510.442" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1464.98" cy="805.849" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1919.02" cy="589.217" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1790.52" cy="707.38" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1704.85" cy="589.217" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1439.28" cy="825.543" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1987.55" cy="392.279" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="968.116" cy="1061.87" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2107.48" cy="234.729" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1105.18" cy="1042.17" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1833.35" cy="628.605" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1721.98" cy="667.992" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1533.52" cy="1022.48" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1542.08" cy="727.074" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1919.02" cy="254.423" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1482.12" cy="1061.87" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2047.51" cy="411.973" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1662.02" cy="490.748" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1422.15" cy="884.624" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1824.78" cy="569.523" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1362.18" cy="983.093" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1824.78" cy="805.849" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1816.22" cy="687.686" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1756.25" cy="805.849" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1662.02" cy="471.054" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1876.18" cy="648.299" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1730.55" cy="924.012" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1584.92" cy="1101.26" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1867.62" cy="589.217" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1379.32" cy="924.012" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1807.65" cy="451.361" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1105.18" cy="924.012" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1936.15" cy="628.605" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1336.48" cy="1061.87" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1687.72" cy="411.973" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1764.82" cy="628.605" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1370.75" cy="510.442" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1910.45" cy="490.748" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1473.55" cy="1081.56" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1379.32" cy="983.093" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2244.55" cy="431.667" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1190.85" cy="766.461" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1713.42" cy="746.768" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1816.22" cy="589.217" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1764.82" cy="648.299" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1413.58" cy="1731.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1747.68" cy="1120.95" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1636.32" cy="1554.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1747.68" cy="1337.58" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1542.08" cy="1475.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1447.85" cy="1672.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1353.62" cy="1455.74" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1464.98" cy="1317.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1173.72" cy="1692.07" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1473.55" cy="1298.19" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="968.116" cy="1632.99" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1662.02" cy="1160.34" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1362.18" cy="1632.99" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1610.62" cy="1455.74" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1387.88" cy="1455.74" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1687.72" cy="1239.11" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1062.35" cy="1672.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1679.15" cy="1337.58" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1422.15" cy="1475.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1636.32" cy="1357.28" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1764.82" cy="1514.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1327.92" cy="1475.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1447.85" cy="1475.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1430.72" cy="1219.42" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1139.45" cy="1751.15" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1413.58" cy="1357.28" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1276.52" cy="1514.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1559.22" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1593.48" cy="1514.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1747.68" cy="1317.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1516.38" cy="1317.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1130.88" cy="1534.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1327.92" cy="1475.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2570.08" cy="983.093" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1670.58" cy="1416.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1610.62" cy="1120.95" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1113.75" cy="1632.99" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1267.95" cy="924.012" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1233.68" cy="1652.68" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1636.32" cy="1239.11" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1122.32" cy="1632.99" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1713.42" cy="1180.03" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1345.05" cy="1632.99" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1713.42" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1790.52" cy="1199.72" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1199.42" cy="1593.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1362.18" cy="1593.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1790.52" cy="1199.72" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1310.78" cy="1711.76" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1336.48" cy="1219.42" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1456.42" cy="1534.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1619.18" cy="1554.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1327.92" cy="1495.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1756.25" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1447.85" cy="1495.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1319.35" cy="1298.19" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1216.55" cy="1593.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1362.18" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1165.15" cy="1475.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1781.95" cy="1317.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1345.05" cy="1613.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1422.15" cy="1396.66" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1379.32" cy="1593.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2116.05" cy="1239.11" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1387.88" cy="1534.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1730.55" cy="1022.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1422.15" cy="1495.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1704.85" cy="1140.64" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1190.85" cy="1534.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1807.65" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1550.65" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1439.28" cy="1258.81" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1593.48" cy="1258.81" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1447.85" cy="1416.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1439.28" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1627.75" cy="1180.03" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1533.52" cy="1534.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1841.92" cy="1120.95" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1336.48" cy="1613.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1336.48" cy="1101.26" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1670.58" cy="1475.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1961.85" cy="1258.81" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1524.95" cy="1455.74" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1747.68" cy="1199.72" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1310.78" cy="1613.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1816.22" cy="924.012" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1182.28" cy="1495.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1859.05" cy="1534.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1533.52" cy="1573.91" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1927.58" cy="983.093" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1533.52" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1936.15" cy="963.399" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1362.18" cy="1475.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1704.85" cy="1160.34" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1276.52" cy="1436.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1816.22" cy="1239.11" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1696.28" cy="1219.42" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1482.12" cy="1455.74" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1610.62" cy="1495.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1841.92" cy="1081.56" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1619.18" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2253.11" cy="983.093" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1507.82" cy="1278.5" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1670.58" cy="1376.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1516.38" cy="1613.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1473.55" cy="1160.34" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1036.65" cy="1436.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2038.95" cy="1219.42" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1173.72" cy="1573.91" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1584.92" cy="1357.28" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1790.52" cy="1337.58" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1730.55" cy="1199.72" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1190.85" cy="1337.58" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1876.18" cy="1120.95" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1422.15" cy="1554.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="2184.58" cy="1180.03" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1276.52" cy="1239.11" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1644.88" cy="1140.64" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1507.82" cy="1632.99" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1473.55" cy="1514.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1781.95" cy="1239.11" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1336.48" cy="1416.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip012)" cx="1739.12" cy="1160.34" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<path clip-path="url(#clip010)" d="M2084.77 1742.33 L2557.52 1742.33 L2557.52 1534.97 L2084.77 1534.97  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip010)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2084.77,1742.33 2557.52,1742.33 2557.52,1534.97 2084.77,1534.97 2084.77,1742.33 "></polyline>
<circle clip-path="url(#clip010)" cx="2195.75" cy="1586.81" r="20.48" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.46133"></circle>
<path clip-path="url(#clip010)" d="M2322.57 1574.13 L2316.23 1591.33 L2328.94 1591.33 L2322.57 1574.13 M2319.93 1569.53 L2325.23 1569.53 L2338.41 1604.09 L2333.54 1604.09 L2330.4 1595.22 L2314.82 1595.22 L2311.67 1604.09 L2306.74 1604.09 L2319.93 1569.53 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2359.49 1582.1 L2359.49 1568.07 L2363.75 1568.07 L2363.75 1604.09 L2359.49 1604.09 L2359.49 1600.2 Q2358.15 1602.51 2356.09 1603.65 Q2354.05 1604.76 2351.18 1604.76 Q2346.48 1604.76 2343.52 1601.01 Q2340.58 1597.26 2340.58 1591.15 Q2340.58 1585.04 2343.52 1581.29 Q2346.48 1577.54 2351.18 1577.54 Q2354.05 1577.54 2356.09 1578.67 Q2358.15 1579.78 2359.49 1582.1 M2344.98 1591.15 Q2344.98 1595.85 2346.9 1598.53 Q2348.85 1601.19 2352.22 1601.19 Q2355.6 1601.19 2357.55 1598.53 Q2359.49 1595.85 2359.49 1591.15 Q2359.49 1586.45 2357.55 1583.79 Q2355.6 1581.1 2352.22 1581.1 Q2348.85 1581.1 2346.9 1583.79 Q2344.98 1586.45 2344.98 1591.15 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2394.7 1590.06 L2394.7 1592.14 L2375.12 1592.14 Q2375.4 1596.54 2377.76 1598.86 Q2380.14 1601.15 2384.38 1601.15 Q2386.83 1601.15 2389.12 1600.55 Q2391.44 1599.94 2393.71 1598.74 L2393.71 1602.77 Q2391.41 1603.74 2389.01 1604.25 Q2386.6 1604.76 2384.12 1604.76 Q2377.92 1604.76 2374.28 1601.15 Q2370.67 1597.54 2370.67 1591.38 Q2370.67 1585.01 2374.1 1581.29 Q2377.55 1577.54 2383.38 1577.54 Q2388.61 1577.54 2391.65 1580.92 Q2394.7 1584.27 2394.7 1590.06 M2390.44 1588.81 Q2390.4 1585.32 2388.47 1583.23 Q2386.58 1581.15 2383.43 1581.15 Q2379.86 1581.15 2377.71 1583.16 Q2375.58 1585.18 2375.26 1588.83 L2390.44 1588.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2401.69 1568.07 L2405.95 1568.07 L2405.95 1604.09 L2401.69 1604.09 L2401.69 1568.07 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2414.86 1578.16 L2419.12 1578.16 L2419.12 1604.09 L2414.86 1604.09 L2414.86 1578.16 M2414.86 1568.07 L2419.12 1568.07 L2419.12 1573.46 L2414.86 1573.46 L2414.86 1568.07 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2450.21 1590.06 L2450.21 1592.14 L2430.63 1592.14 Q2430.9 1596.54 2433.27 1598.86 Q2435.65 1601.15 2439.89 1601.15 Q2442.34 1601.15 2444.63 1600.55 Q2446.95 1599.94 2449.21 1598.74 L2449.21 1602.77 Q2446.92 1603.74 2444.52 1604.25 Q2442.11 1604.76 2439.63 1604.76 Q2433.43 1604.76 2429.79 1601.15 Q2426.18 1597.54 2426.18 1591.38 Q2426.18 1585.01 2429.61 1581.29 Q2433.06 1577.54 2438.89 1577.54 Q2444.12 1577.54 2447.15 1580.92 Q2450.21 1584.27 2450.21 1590.06 M2445.95 1588.81 Q2445.9 1585.32 2443.98 1583.23 Q2442.09 1581.15 2438.94 1581.15 Q2435.37 1581.15 2433.22 1583.16 Q2431.09 1585.18 2430.77 1588.83 L2445.95 1588.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip010)" cx="2195.75" cy="1638.65" r="20.48" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.46133"></circle>
<path clip-path="url(#clip010)" d="M2334.61 1624.03 L2334.61 1628.96 Q2332.25 1626.76 2329.56 1625.67 Q2326.9 1624.59 2323.89 1624.59 Q2317.97 1624.59 2314.82 1628.22 Q2311.67 1631.83 2311.67 1638.68 Q2311.67 1645.51 2314.82 1649.15 Q2317.97 1652.76 2323.89 1652.76 Q2326.9 1652.76 2329.56 1651.67 Q2332.25 1650.58 2334.61 1648.38 L2334.61 1653.27 Q2332.16 1654.93 2329.4 1655.77 Q2326.67 1656.6 2323.61 1656.6 Q2315.77 1656.6 2311.25 1651.81 Q2306.74 1646.99 2306.74 1638.68 Q2306.74 1630.35 2311.25 1625.56 Q2315.77 1620.74 2323.61 1620.74 Q2326.72 1620.74 2329.45 1621.58 Q2332.2 1622.39 2334.61 1624.03 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2363.2 1640.28 L2363.2 1655.93 L2358.94 1655.93 L2358.94 1640.42 Q2358.94 1636.74 2357.5 1634.91 Q2356.07 1633.08 2353.2 1633.08 Q2349.75 1633.08 2347.76 1635.28 Q2345.77 1637.48 2345.77 1641.28 L2345.77 1655.93 L2341.48 1655.93 L2341.48 1619.91 L2345.77 1619.91 L2345.77 1634.03 Q2347.29 1631.69 2349.35 1630.53 Q2351.44 1629.38 2354.15 1629.38 Q2358.61 1629.38 2360.91 1632.16 Q2363.2 1634.91 2363.2 1640.28 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2371.69 1630 L2375.95 1630 L2375.95 1655.93 L2371.69 1655.93 L2371.69 1630 M2371.69 1619.91 L2375.95 1619.91 L2375.95 1625.3 L2371.69 1625.3 L2371.69 1619.91 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2406.41 1640.28 L2406.41 1655.93 L2402.16 1655.93 L2402.16 1640.42 Q2402.16 1636.74 2400.72 1634.91 Q2399.28 1633.08 2396.41 1633.08 Q2392.97 1633.08 2390.97 1635.28 Q2388.98 1637.48 2388.98 1641.28 L2388.98 1655.93 L2384.7 1655.93 L2384.7 1630 L2388.98 1630 L2388.98 1634.03 Q2390.51 1631.69 2392.57 1630.53 Q2394.66 1629.38 2397.36 1629.38 Q2401.83 1629.38 2404.12 1632.16 Q2406.41 1634.91 2406.41 1640.28 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2431.44 1630.77 L2431.44 1634.79 Q2429.63 1633.87 2427.69 1633.41 Q2425.74 1632.94 2423.66 1632.94 Q2420.49 1632.94 2418.89 1633.91 Q2417.32 1634.89 2417.32 1636.83 Q2417.32 1638.31 2418.45 1639.17 Q2419.59 1640 2423.01 1640.77 L2424.47 1641.09 Q2429.01 1642.06 2430.9 1643.84 Q2432.83 1645.6 2432.83 1648.78 Q2432.83 1652.39 2429.96 1654.49 Q2427.11 1656.6 2422.11 1656.6 Q2420.03 1656.6 2417.76 1656.18 Q2415.51 1655.79 2413.01 1654.98 L2413.01 1650.58 Q2415.37 1651.81 2417.66 1652.43 Q2419.96 1653.03 2422.2 1653.03 Q2425.21 1653.03 2426.83 1652.02 Q2428.45 1650.97 2428.45 1649.1 Q2428.45 1647.36 2427.27 1646.44 Q2426.11 1645.51 2422.15 1644.66 L2420.67 1644.31 Q2416.72 1643.47 2414.96 1641.76 Q2413.2 1640.03 2413.2 1637.02 Q2413.2 1633.36 2415.79 1631.37 Q2418.38 1629.38 2423.15 1629.38 Q2425.51 1629.38 2427.59 1629.72 Q2429.68 1630.07 2431.44 1630.77 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2443.82 1622.64 L2443.82 1630 L2452.59 1630 L2452.59 1633.31 L2443.82 1633.31 L2443.82 1647.39 Q2443.82 1650.56 2444.68 1651.46 Q2445.56 1652.36 2448.22 1652.36 L2452.59 1652.36 L2452.59 1655.93 L2448.22 1655.93 Q2443.29 1655.93 2441.41 1654.1 Q2439.54 1652.25 2439.54 1647.39 L2439.54 1633.31 L2436.41 1633.31 L2436.41 1630 L2439.54 1630 L2439.54 1622.64 L2443.82 1622.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2473.22 1633.98 Q2472.5 1633.57 2471.65 1633.38 Q2470.81 1633.17 2469.79 1633.17 Q2466.18 1633.17 2464.24 1635.53 Q2462.32 1637.87 2462.32 1642.27 L2462.32 1655.93 L2458.03 1655.93 L2458.03 1630 L2462.32 1630 L2462.32 1634.03 Q2463.66 1631.67 2465.81 1630.53 Q2467.96 1629.38 2471.04 1629.38 Q2471.48 1629.38 2472.02 1629.45 Q2472.55 1629.49 2473.2 1629.61 L2473.22 1633.98 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2489.47 1642.9 Q2484.31 1642.9 2482.32 1644.08 Q2480.33 1645.26 2480.33 1648.1 Q2480.33 1650.37 2481.81 1651.72 Q2483.31 1653.03 2485.88 1653.03 Q2489.42 1653.03 2491.55 1650.53 Q2493.71 1648.01 2493.71 1643.84 L2493.71 1642.9 L2489.47 1642.9 M2497.96 1641.14 L2497.96 1655.93 L2493.71 1655.93 L2493.71 1651.99 Q2492.25 1654.35 2490.07 1655.49 Q2487.9 1656.6 2484.75 1656.6 Q2480.77 1656.6 2478.4 1654.38 Q2476.07 1652.13 2476.07 1648.38 Q2476.07 1644.01 2478.98 1641.78 Q2481.92 1639.56 2487.73 1639.56 L2493.71 1639.56 L2493.71 1639.15 Q2493.71 1636.21 2491.76 1634.61 Q2489.84 1632.99 2486.34 1632.99 Q2484.12 1632.99 2482.02 1633.52 Q2479.91 1634.05 2477.96 1635.12 L2477.96 1631.18 Q2480.3 1630.28 2482.5 1629.84 Q2484.7 1629.38 2486.78 1629.38 Q2492.41 1629.38 2495.19 1632.29 Q2497.96 1635.21 2497.96 1641.14 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2510.86 1652.04 L2510.86 1665.79 L2506.58 1665.79 L2506.58 1630 L2510.86 1630 L2510.86 1633.94 Q2512.2 1631.62 2514.24 1630.51 Q2516.3 1629.38 2519.15 1629.38 Q2523.87 1629.38 2526.81 1633.13 Q2529.77 1636.88 2529.77 1642.99 Q2529.77 1649.1 2526.81 1652.85 Q2523.87 1656.6 2519.15 1656.6 Q2516.3 1656.6 2514.24 1655.49 Q2512.2 1654.35 2510.86 1652.04 M2525.35 1642.99 Q2525.35 1638.29 2523.4 1635.63 Q2521.48 1632.94 2518.1 1632.94 Q2514.72 1632.94 2512.78 1635.63 Q2510.86 1638.29 2510.86 1642.99 Q2510.86 1647.69 2512.78 1650.37 Q2514.72 1653.03 2518.1 1653.03 Q2521.48 1653.03 2523.4 1650.37 Q2525.35 1647.69 2525.35 1642.99 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip010)" cx="2195.75" cy="1690.49" r="20.48" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.46133"></circle>
<path clip-path="url(#clip010)" d="M2332.29 1702.84 L2332.29 1693.56 L2324.66 1693.56 L2324.66 1689.71 L2336.92 1689.71 L2336.92 1704.55 Q2334.22 1706.47 2330.95 1707.47 Q2327.69 1708.44 2323.98 1708.44 Q2315.88 1708.44 2311.3 1703.72 Q2306.74 1698.97 2306.74 1690.52 Q2306.74 1682.05 2311.3 1677.33 Q2315.88 1672.58 2323.98 1672.58 Q2327.36 1672.58 2330.4 1673.42 Q2333.45 1674.25 2336.02 1675.87 L2336.02 1680.85 Q2333.43 1678.65 2330.51 1677.54 Q2327.6 1676.43 2324.38 1676.43 Q2318.04 1676.43 2314.84 1679.97 Q2311.67 1683.51 2311.67 1690.52 Q2311.67 1697.51 2314.84 1701.06 Q2318.04 1704.6 2324.38 1704.6 Q2326.85 1704.6 2328.8 1704.18 Q2330.74 1703.74 2332.29 1702.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2367.46 1693.74 L2367.46 1695.82 L2347.87 1695.82 Q2348.15 1700.22 2350.51 1702.54 Q2352.9 1704.83 2357.13 1704.83 Q2359.59 1704.83 2361.88 1704.23 Q2364.19 1703.62 2366.46 1702.42 L2366.46 1706.45 Q2364.17 1707.42 2361.76 1707.93 Q2359.35 1708.44 2356.88 1708.44 Q2350.67 1708.44 2347.04 1704.83 Q2343.43 1701.22 2343.43 1695.06 Q2343.43 1688.69 2346.85 1684.97 Q2350.3 1681.22 2356.14 1681.22 Q2361.37 1681.22 2364.4 1684.6 Q2367.46 1687.95 2367.46 1693.74 M2363.2 1692.49 Q2363.15 1689 2361.23 1686.91 Q2359.33 1684.83 2356.18 1684.83 Q2352.62 1684.83 2350.47 1686.84 Q2348.34 1688.86 2348.01 1692.51 L2363.2 1692.49 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2396 1692.12 L2396 1707.77 L2391.74 1707.77 L2391.74 1692.26 Q2391.74 1688.58 2390.3 1686.75 Q2388.87 1684.92 2386 1684.92 Q2382.55 1684.92 2380.56 1687.12 Q2378.57 1689.32 2378.57 1693.12 L2378.57 1707.77 L2374.28 1707.77 L2374.28 1681.84 L2378.57 1681.84 L2378.57 1685.87 Q2380.09 1683.53 2382.16 1682.37 Q2384.24 1681.22 2386.95 1681.22 Q2391.41 1681.22 2393.71 1684 Q2396 1686.75 2396 1692.12 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2408.71 1674.48 L2408.71 1681.84 L2417.48 1681.84 L2417.48 1685.15 L2408.71 1685.15 L2408.71 1699.23 Q2408.71 1702.4 2409.56 1703.3 Q2410.44 1704.2 2413.1 1704.2 L2417.48 1704.2 L2417.48 1707.77 L2413.1 1707.77 Q2408.17 1707.77 2406.3 1705.94 Q2404.42 1704.09 2404.42 1699.23 L2404.42 1685.15 L2401.3 1685.15 L2401.3 1681.84 L2404.42 1681.84 L2404.42 1674.48 L2408.71 1674.48 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2433.13 1684.83 Q2429.7 1684.83 2427.71 1687.51 Q2425.72 1690.18 2425.72 1694.83 Q2425.72 1699.48 2427.69 1702.17 Q2429.68 1704.83 2433.13 1704.83 Q2436.53 1704.83 2438.52 1702.14 Q2440.51 1699.46 2440.51 1694.83 Q2440.51 1690.22 2438.52 1687.54 Q2436.53 1684.83 2433.13 1684.83 M2433.13 1681.22 Q2438.68 1681.22 2441.85 1684.83 Q2445.03 1688.44 2445.03 1694.83 Q2445.03 1701.19 2441.85 1704.83 Q2438.68 1708.44 2433.13 1708.44 Q2427.55 1708.44 2424.38 1704.83 Q2421.23 1701.19 2421.23 1694.83 Q2421.23 1688.44 2424.38 1684.83 Q2427.55 1681.22 2433.13 1681.22 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip010)" d="M2462.13 1684.83 Q2458.71 1684.83 2456.71 1687.51 Q2454.72 1690.18 2454.72 1694.83 Q2454.72 1699.48 2456.69 1702.17 Q2458.68 1704.83 2462.13 1704.83 Q2465.53 1704.83 2467.53 1702.14 Q2469.52 1699.46 2469.52 1694.83 Q2469.52 1690.22 2467.53 1687.54 Q2465.53 1684.83 2462.13 1684.83 M2462.13 1681.22 Q2467.69 1681.22 2470.86 1684.83 Q2474.03 1688.44 2474.03 1694.83 Q2474.03 1701.19 2470.86 1704.83 Q2467.69 1708.44 2462.13 1708.44 Q2456.55 1708.44 2453.38 1704.83 Q2450.23 1701.19 2450.23 1694.83 Q2450.23 1688.44 2453.38 1684.83 Q2456.55 1681.22 2462.13 1681.22 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>
<p>Adding labels is achieved by modifying the relevant attributes:</p>
<div id="e37957be" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@df</span> penguins <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb5-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm,</span>
<span id="cb5-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_depth_mm,</span>
<span id="cb5-4">  seriestype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>scatter,</span>
<span id="cb5-5">  group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>species,</span>
<span id="cb5-6">  title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins"</span>,</span>
<span id="cb5-7">  xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Length (mm)"</span>,</span>
<span id="cb5-8">  ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Depth (mm)"</span></span>
<span id="cb5-9">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="672" height="480" viewbox="0 0 2688 1920">
<defs>
  <clippath id="clip100">
    <rect x="0" y="0" width="2688" height="1920"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip100)" d="M0 1920 L2688 1920 L2688 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip101">
    <rect x="537" y="0" width="1883" height="1883"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip100)" d="M210.238 1734.12 L2640.76 1734.12 L2640.76 127.792 L210.238 127.792  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip102">
    <rect x="210" y="127" width="2432" height="1607"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="520.827,1734.12 520.827,127.792 "></polyline>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="937.726,1734.12 937.726,127.792 "></polyline>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1354.62,1734.12 1354.62,127.792 "></polyline>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1771.52,1734.12 1771.52,127.792 "></polyline>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2188.42,1734.12 2188.42,127.792 "></polyline>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2605.32,1734.12 2605.32,127.792 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="210.238,1734.12 2640.76,1734.12 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="520.827,1734.12 520.827,1715.22 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="937.726,1734.12 937.726,1715.22 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1354.62,1734.12 1354.62,1715.22 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1771.52,1734.12 1771.52,1715.22 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2188.42,1734.12 2188.42,1715.22 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2605.32,1734.12 2605.32,1715.22 "></polyline>
<path clip-path="url(#clip100)" d="M510.168 1780.19 Q513.524 1780.9 515.399 1783.17 Q517.297 1785.44 517.297 1788.77 Q517.297 1793.89 513.779 1796.69 Q510.26 1799.49 503.779 1799.49 Q501.603 1799.49 499.288 1799.05 Q496.996 1798.64 494.543 1797.78 L494.543 1793.27 Q496.487 1794.4 498.802 1794.98 Q501.117 1795.56 503.64 1795.56 Q508.038 1795.56 510.33 1793.82 Q512.644 1792.08 512.644 1788.77 Q512.644 1785.72 510.492 1784.01 Q508.362 1782.27 504.543 1782.27 L500.515 1782.27 L500.515 1778.43 L504.728 1778.43 Q508.177 1778.43 510.006 1777.06 Q511.834 1775.67 511.834 1773.08 Q511.834 1770.42 509.936 1769.01 Q508.061 1767.57 504.543 1767.57 Q502.621 1767.57 500.422 1767.99 Q498.223 1768.4 495.584 1769.28 L495.584 1765.12 Q498.246 1764.38 500.561 1764.01 Q502.899 1763.64 504.959 1763.64 Q510.283 1763.64 513.385 1766.07 Q516.487 1768.47 516.487 1772.59 Q516.487 1775.46 514.843 1777.46 Q513.2 1779.42 510.168 1780.19 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M526.209 1764.26 L544.566 1764.26 L544.566 1768.2 L530.492 1768.2 L530.492 1776.67 Q531.51 1776.32 532.529 1776.16 Q533.547 1775.97 534.566 1775.97 Q540.353 1775.97 543.732 1779.15 Q547.112 1782.32 547.112 1787.73 Q547.112 1793.31 543.64 1796.41 Q540.167 1799.49 533.848 1799.49 Q531.672 1799.49 529.404 1799.12 Q527.158 1798.75 524.751 1798.01 L524.751 1793.31 Q526.834 1794.45 529.056 1795 Q531.279 1795.56 533.755 1795.56 Q537.76 1795.56 540.098 1793.45 Q542.436 1791.34 542.436 1787.73 Q542.436 1784.12 540.098 1782.02 Q537.76 1779.91 533.755 1779.91 Q531.88 1779.91 530.005 1780.33 Q528.154 1780.74 526.209 1781.62 L526.209 1764.26 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M925.897 1768.34 L914.092 1786.78 L925.897 1786.78 L925.897 1768.34 M924.67 1764.26 L930.55 1764.26 L930.55 1786.78 L935.48 1786.78 L935.48 1790.67 L930.55 1790.67 L930.55 1798.82 L925.897 1798.82 L925.897 1790.67 L910.295 1790.67 L910.295 1786.16 L924.67 1764.26 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M953.212 1767.34 Q949.601 1767.34 947.772 1770.9 Q945.966 1774.45 945.966 1781.58 Q945.966 1788.68 947.772 1792.25 Q949.601 1795.79 953.212 1795.79 Q956.846 1795.79 958.651 1792.25 Q960.48 1788.68 960.48 1781.58 Q960.48 1774.45 958.651 1770.9 Q956.846 1767.34 953.212 1767.34 M953.212 1763.64 Q959.022 1763.64 962.077 1768.24 Q965.156 1772.83 965.156 1781.58 Q965.156 1790.3 962.077 1794.91 Q959.022 1799.49 953.212 1799.49 Q947.402 1799.49 944.323 1794.91 Q941.267 1790.3 941.267 1781.58 Q941.267 1772.83 944.323 1768.24 Q947.402 1763.64 953.212 1763.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1343.29 1768.34 L1331.49 1786.78 L1343.29 1786.78 L1343.29 1768.34 M1342.07 1764.26 L1347.95 1764.26 L1347.95 1786.78 L1352.88 1786.78 L1352.88 1790.67 L1347.95 1790.67 L1347.95 1798.82 L1343.29 1798.82 L1343.29 1790.67 L1327.69 1790.67 L1327.69 1786.16 L1342.07 1764.26 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1360.65 1764.26 L1379.01 1764.26 L1379.01 1768.2 L1364.94 1768.2 L1364.94 1776.67 Q1365.96 1776.32 1366.97 1776.16 Q1367.99 1775.97 1369.01 1775.97 Q1374.8 1775.97 1378.18 1779.15 Q1381.56 1782.32 1381.56 1787.73 Q1381.56 1793.31 1378.08 1796.41 Q1374.61 1799.49 1368.29 1799.49 Q1366.12 1799.49 1363.85 1799.12 Q1361.6 1798.75 1359.2 1798.01 L1359.2 1793.31 Q1361.28 1794.45 1363.5 1795 Q1365.72 1795.56 1368.2 1795.56 Q1372.21 1795.56 1374.54 1793.45 Q1376.88 1791.34 1376.88 1787.73 Q1376.88 1784.12 1374.54 1782.02 Q1372.21 1779.91 1368.2 1779.91 Q1366.33 1779.91 1364.45 1780.33 Q1362.6 1780.74 1360.65 1781.62 L1360.65 1764.26 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1746.22 1764.26 L1764.58 1764.26 L1764.58 1768.2 L1750.5 1768.2 L1750.5 1776.67 Q1751.52 1776.32 1752.54 1776.16 Q1753.56 1775.97 1754.58 1775.97 Q1760.37 1775.97 1763.74 1779.15 Q1767.12 1782.32 1767.12 1787.73 Q1767.12 1793.31 1763.65 1796.41 Q1760.18 1799.49 1753.86 1799.49 Q1751.68 1799.49 1749.42 1799.12 Q1747.17 1798.75 1744.76 1798.01 L1744.76 1793.31 Q1746.85 1794.45 1749.07 1795 Q1751.29 1795.56 1753.77 1795.56 Q1757.77 1795.56 1760.11 1793.45 Q1762.45 1791.34 1762.45 1787.73 Q1762.45 1784.12 1760.11 1782.02 Q1757.77 1779.91 1753.77 1779.91 Q1751.89 1779.91 1750.02 1780.33 Q1748.17 1780.74 1746.22 1781.62 L1746.22 1764.26 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1786.34 1767.34 Q1782.73 1767.34 1780.9 1770.9 Q1779.09 1774.45 1779.09 1781.58 Q1779.09 1788.68 1780.9 1792.25 Q1782.73 1795.79 1786.34 1795.79 Q1789.97 1795.79 1791.78 1792.25 Q1793.61 1788.68 1793.61 1781.58 Q1793.61 1774.45 1791.78 1770.9 Q1789.97 1767.34 1786.34 1767.34 M1786.34 1763.64 Q1792.15 1763.64 1795.2 1768.24 Q1798.28 1772.83 1798.28 1781.58 Q1798.28 1790.3 1795.2 1794.91 Q1792.15 1799.49 1786.34 1799.49 Q1780.53 1799.49 1777.45 1794.91 Q1774.39 1790.3 1774.39 1781.58 Q1774.39 1772.83 1777.45 1768.24 Q1780.53 1763.64 1786.34 1763.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2163.62 1764.26 L2181.97 1764.26 L2181.97 1768.2 L2167.9 1768.2 L2167.9 1776.67 Q2168.92 1776.32 2169.94 1776.16 Q2170.96 1775.97 2171.97 1775.97 Q2177.76 1775.97 2181.14 1779.15 Q2184.52 1782.32 2184.52 1787.73 Q2184.52 1793.31 2181.05 1796.41 Q2177.58 1799.49 2171.26 1799.49 Q2169.08 1799.49 2166.81 1799.12 Q2164.57 1798.75 2162.16 1798.01 L2162.16 1793.31 Q2164.24 1794.45 2166.47 1795 Q2168.69 1795.56 2171.16 1795.56 Q2175.17 1795.56 2177.51 1793.45 Q2179.84 1791.34 2179.84 1787.73 Q2179.84 1784.12 2177.51 1782.02 Q2175.17 1779.91 2171.16 1779.91 Q2169.29 1779.91 2167.41 1780.33 Q2165.56 1780.74 2163.62 1781.62 L2163.62 1764.26 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2193.78 1764.26 L2212.14 1764.26 L2212.14 1768.2 L2198.06 1768.2 L2198.06 1776.67 Q2199.08 1776.32 2200.1 1776.16 Q2201.12 1775.97 2202.14 1775.97 Q2207.92 1775.97 2211.3 1779.15 Q2214.68 1782.32 2214.68 1787.73 Q2214.68 1793.31 2211.21 1796.41 Q2207.74 1799.49 2201.42 1799.49 Q2199.24 1799.49 2196.97 1799.12 Q2194.73 1798.75 2192.32 1798.01 L2192.32 1793.31 Q2194.4 1794.45 2196.63 1795 Q2198.85 1795.56 2201.33 1795.56 Q2205.33 1795.56 2207.67 1793.45 Q2210.01 1791.34 2210.01 1787.73 Q2210.01 1784.12 2207.67 1782.02 Q2205.33 1779.91 2201.33 1779.91 Q2199.45 1779.91 2197.58 1780.33 Q2195.72 1780.74 2193.78 1781.62 L2193.78 1764.26 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2590.72 1779.68 Q2587.58 1779.68 2585.72 1781.83 Q2583.9 1783.98 2583.9 1787.73 Q2583.9 1791.46 2585.72 1793.64 Q2587.58 1795.79 2590.72 1795.79 Q2593.87 1795.79 2595.7 1793.64 Q2597.55 1791.46 2597.55 1787.73 Q2597.55 1783.98 2595.7 1781.83 Q2593.87 1779.68 2590.72 1779.68 M2600.01 1765.02 L2600.01 1769.28 Q2598.25 1768.45 2596.44 1768.01 Q2594.66 1767.57 2592.9 1767.57 Q2588.27 1767.57 2585.82 1770.7 Q2583.39 1773.82 2583.04 1780.14 Q2584.41 1778.13 2586.47 1777.06 Q2588.53 1775.97 2591 1775.97 Q2596.21 1775.97 2599.22 1779.15 Q2602.25 1782.29 2602.25 1787.73 Q2602.25 1793.06 2599.1 1796.27 Q2595.96 1799.49 2590.72 1799.49 Q2584.73 1799.49 2581.56 1794.91 Q2578.39 1790.3 2578.39 1781.58 Q2578.39 1773.38 2582.28 1768.52 Q2586.16 1763.64 2592.72 1763.64 Q2594.47 1763.64 2596.26 1763.98 Q2598.06 1764.33 2600.01 1765.02 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2620.31 1767.34 Q2616.7 1767.34 2614.87 1770.9 Q2613.06 1774.45 2613.06 1781.58 Q2613.06 1788.68 2614.87 1792.25 Q2616.7 1795.79 2620.31 1795.79 Q2623.94 1795.79 2625.75 1792.25 Q2627.58 1788.68 2627.58 1781.58 Q2627.58 1774.45 2625.75 1770.9 Q2623.94 1767.34 2620.31 1767.34 M2620.31 1763.64 Q2626.12 1763.64 2629.17 1768.24 Q2632.25 1772.83 2632.25 1781.58 Q2632.25 1790.3 2629.17 1794.91 Q2626.12 1799.49 2620.31 1799.49 Q2614.5 1799.49 2611.42 1794.91 Q2608.36 1790.3 2608.36 1781.58 Q2608.36 1772.83 2611.42 1768.24 Q2614.5 1763.64 2620.31 1763.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1166.33 1860.61 L1166.33 1878.02 L1176.65 1878.02 Q1181.83 1878.02 1184.32 1875.88 Q1186.83 1873.72 1186.83 1869.3 Q1186.83 1864.84 1184.32 1862.74 Q1181.83 1860.61 1176.65 1860.61 L1166.33 1860.61 M1166.33 1841.06 L1166.33 1855.39 L1175.85 1855.39 Q1180.56 1855.39 1182.85 1853.64 Q1185.18 1851.85 1185.18 1848.23 Q1185.18 1844.63 1182.85 1842.85 Q1180.56 1841.06 1175.85 1841.06 L1166.33 1841.06 M1159.9 1835.78 L1176.33 1835.78 Q1183.68 1835.78 1187.66 1838.84 Q1191.64 1841.89 1191.64 1847.53 Q1191.64 1851.89 1189.6 1854.46 Q1187.56 1857.04 1183.62 1857.68 Q1188.36 1858.7 1190.97 1861.94 Q1193.61 1865.16 1193.61 1870 Q1193.61 1876.36 1189.28 1879.83 Q1184.95 1883.3 1176.96 1883.3 L1159.9 1883.3 L1159.9 1835.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1204.37 1847.65 L1210.22 1847.65 L1210.22 1883.3 L1204.37 1883.3 L1204.37 1847.65 M1204.37 1833.78 L1210.22 1833.78 L1210.22 1841.19 L1204.37 1841.19 L1204.37 1833.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1222.48 1833.78 L1228.34 1833.78 L1228.34 1883.3 L1222.48 1883.3 L1222.48 1833.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1240.59 1833.78 L1246.45 1833.78 L1246.45 1883.3 L1240.59 1883.3 L1240.59 1833.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1279.67 1835.78 L1286.1 1835.78 L1286.1 1877.89 L1309.24 1877.89 L1309.24 1883.3 L1279.67 1883.3 L1279.67 1835.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1345.08 1864.01 L1345.08 1866.88 L1318.16 1866.88 Q1318.54 1872.92 1321.78 1876.11 Q1325.06 1879.26 1330.89 1879.26 Q1334.26 1879.26 1337.41 1878.43 Q1340.59 1877.6 1343.71 1875.95 L1343.71 1881.49 Q1340.56 1882.82 1337.25 1883.52 Q1333.94 1884.22 1330.54 1884.22 Q1322.01 1884.22 1317.01 1879.26 Q1312.04 1874.29 1312.04 1865.83 Q1312.04 1857.07 1316.75 1851.95 Q1321.5 1846.79 1329.52 1846.79 Q1336.71 1846.79 1340.88 1851.44 Q1345.08 1856.06 1345.08 1864.01 M1339.23 1862.29 Q1339.16 1857.49 1336.52 1854.62 Q1333.91 1851.76 1329.58 1851.76 Q1324.68 1851.76 1321.72 1854.53 Q1318.79 1857.3 1318.35 1862.33 L1339.23 1862.29 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1384.33 1861.78 L1384.33 1883.3 L1378.47 1883.3 L1378.47 1861.98 Q1378.47 1856.92 1376.5 1854.4 Q1374.52 1851.89 1370.58 1851.89 Q1365.83 1851.89 1363.1 1854.91 Q1360.36 1857.93 1360.36 1863.15 L1360.36 1883.3 L1354.47 1883.3 L1354.47 1847.65 L1360.36 1847.65 L1360.36 1853.19 Q1362.46 1849.98 1365.29 1848.39 Q1368.16 1846.79 1371.88 1846.79 Q1378.02 1846.79 1381.18 1850.61 Q1384.33 1854.4 1384.33 1861.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1419.47 1865.06 Q1419.47 1858.7 1416.82 1855.2 Q1414.21 1851.7 1409.47 1851.7 Q1404.76 1851.7 1402.12 1855.2 Q1399.51 1858.7 1399.51 1865.06 Q1399.51 1871.4 1402.12 1874.9 Q1404.76 1878.4 1409.47 1878.4 Q1414.21 1878.4 1416.82 1874.9 Q1419.47 1871.4 1419.47 1865.06 M1425.32 1878.88 Q1425.32 1887.98 1421.28 1892.4 Q1417.24 1896.86 1408.9 1896.86 Q1405.81 1896.86 1403.07 1896.38 Q1400.34 1895.94 1397.76 1894.98 L1397.76 1889.28 Q1400.34 1890.69 1402.85 1891.35 Q1405.37 1892.02 1407.98 1892.02 Q1413.74 1892.02 1416.6 1889 Q1419.47 1886.01 1419.47 1879.93 L1419.47 1877.03 Q1417.65 1880.18 1414.82 1881.74 Q1411.99 1883.3 1408.04 1883.3 Q1401.48 1883.3 1397.47 1878.3 Q1393.46 1873.31 1393.46 1865.06 Q1393.46 1856.79 1397.47 1851.79 Q1401.48 1846.79 1408.04 1846.79 Q1411.99 1846.79 1414.82 1848.35 Q1417.65 1849.91 1419.47 1853.06 L1419.47 1847.65 L1425.32 1847.65 L1425.32 1878.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1443.18 1837.53 L1443.18 1847.65 L1455.24 1847.65 L1455.24 1852.2 L1443.18 1852.2 L1443.18 1871.56 Q1443.18 1875.92 1444.36 1877.16 Q1445.56 1878.4 1449.23 1878.4 L1455.24 1878.4 L1455.24 1883.3 L1449.23 1883.3 Q1442.45 1883.3 1439.87 1880.79 Q1437.29 1878.24 1437.29 1871.56 L1437.29 1852.2 L1432.99 1852.2 L1432.99 1847.65 L1437.29 1847.65 L1437.29 1837.53 L1443.18 1837.53 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1492.58 1861.78 L1492.58 1883.3 L1486.72 1883.3 L1486.72 1861.98 Q1486.72 1856.92 1484.75 1854.4 Q1482.77 1851.89 1478.83 1851.89 Q1474.08 1851.89 1471.35 1854.91 Q1468.61 1857.93 1468.61 1863.15 L1468.61 1883.3 L1462.72 1883.3 L1462.72 1833.78 L1468.61 1833.78 L1468.61 1853.19 Q1470.71 1849.98 1473.54 1848.39 Q1476.41 1846.79 1480.13 1846.79 Q1486.27 1846.79 1489.42 1850.61 Q1492.58 1854.4 1492.58 1861.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1539.05 1833.84 Q1534.78 1841.16 1532.71 1848.32 Q1530.64 1855.48 1530.64 1862.84 Q1530.64 1870.19 1532.71 1877.41 Q1534.81 1884.61 1539.05 1891.89 L1533.95 1891.89 Q1529.18 1884.41 1526.79 1877.19 Q1524.44 1869.96 1524.44 1862.84 Q1524.44 1855.74 1526.79 1848.54 Q1529.15 1841.35 1533.95 1833.84 L1539.05 1833.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1578.16 1854.5 Q1580.36 1850.55 1583.41 1848.67 Q1586.47 1846.79 1590.61 1846.79 Q1596.18 1846.79 1599.2 1850.71 Q1602.22 1854.59 1602.22 1861.78 L1602.22 1883.3 L1596.34 1883.3 L1596.34 1861.98 Q1596.34 1856.85 1594.52 1854.37 Q1592.71 1851.89 1588.98 1851.89 Q1584.43 1851.89 1581.79 1854.91 Q1579.15 1857.93 1579.15 1863.15 L1579.15 1883.3 L1573.26 1883.3 L1573.26 1861.98 Q1573.26 1856.82 1571.45 1854.37 Q1569.63 1851.89 1565.84 1851.89 Q1561.36 1851.89 1558.72 1854.94 Q1556.07 1857.97 1556.07 1863.15 L1556.07 1883.3 L1550.19 1883.3 L1550.19 1847.65 L1556.07 1847.65 L1556.07 1853.19 Q1558.08 1849.91 1560.88 1848.35 Q1563.68 1846.79 1567.53 1846.79 Q1571.41 1846.79 1574.12 1848.77 Q1576.86 1850.74 1578.16 1854.5 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1641.66 1854.5 Q1643.86 1850.55 1646.91 1848.67 Q1649.97 1846.79 1654.11 1846.79 Q1659.68 1846.79 1662.7 1850.71 Q1665.72 1854.59 1665.72 1861.78 L1665.72 1883.3 L1659.83 1883.3 L1659.83 1861.98 Q1659.83 1856.85 1658.02 1854.37 Q1656.21 1851.89 1652.48 1851.89 Q1647.93 1851.89 1645.29 1854.91 Q1642.65 1857.93 1642.65 1863.15 L1642.65 1883.3 L1636.76 1883.3 L1636.76 1861.98 Q1636.76 1856.82 1634.94 1854.37 Q1633.13 1851.89 1629.34 1851.89 Q1624.85 1851.89 1622.21 1854.94 Q1619.57 1857.97 1619.57 1863.15 L1619.57 1883.3 L1613.68 1883.3 L1613.68 1847.65 L1619.57 1847.65 L1619.57 1853.19 Q1621.58 1849.91 1624.38 1848.35 Q1627.18 1846.79 1631.03 1846.79 Q1634.91 1846.79 1637.62 1848.77 Q1640.36 1850.74 1641.66 1854.5 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1676.48 1833.84 L1681.57 1833.84 Q1686.35 1841.35 1688.7 1848.54 Q1691.09 1855.74 1691.09 1862.84 Q1691.09 1869.96 1688.7 1877.19 Q1686.35 1884.41 1681.57 1891.89 L1676.48 1891.89 Q1680.71 1884.61 1682.78 1877.41 Q1684.88 1870.19 1684.88 1862.84 Q1684.88 1855.48 1682.78 1848.32 Q1680.71 1841.16 1676.48 1833.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="210.238,1526.29 2640.76,1526.29 "></polyline>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="210.238,1165.48 2640.76,1165.48 "></polyline>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="210.238,804.671 2640.76,804.671 "></polyline>
<polyline clip-path="url(#clip102)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="210.238,443.861 2640.76,443.861 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="210.238,1734.12 210.238,127.792 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="210.238,1526.29 229.135,1526.29 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="210.238,1165.48 229.135,1165.48 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="210.238,804.671 229.135,804.671 "></polyline>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="210.238,443.861 229.135,443.861 "></polyline>
<path clip-path="url(#clip100)" d="M118.136 1539.64 L125.775 1539.64 L125.775 1513.27 L117.464 1514.94 L117.464 1510.68 L125.728 1509.01 L130.404 1509.01 L130.404 1539.64 L138.043 1539.64 L138.043 1543.57 L118.136 1543.57 L118.136 1539.64 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M160.335 1513.08 L148.529 1531.53 L160.335 1531.53 L160.335 1513.08 M159.108 1509.01 L164.987 1509.01 L164.987 1531.53 L169.918 1531.53 L169.918 1535.42 L164.987 1535.42 L164.987 1543.57 L160.335 1543.57 L160.335 1535.42 L144.733 1535.42 L144.733 1530.91 L159.108 1509.01 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M118.46 1178.83 L126.099 1178.83 L126.099 1152.46 L117.789 1154.13 L117.789 1149.87 L126.052 1148.2 L130.728 1148.2 L130.728 1178.83 L138.367 1178.83 L138.367 1182.76 L118.46 1182.76 L118.46 1178.83 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M158.39 1163.62 Q155.242 1163.62 153.39 1165.77 Q151.561 1167.92 151.561 1171.67 Q151.561 1175.4 153.39 1177.58 Q155.242 1179.73 158.39 1179.73 Q161.538 1179.73 163.367 1177.58 Q165.219 1175.4 165.219 1171.67 Q165.219 1167.92 163.367 1165.77 Q161.538 1163.62 158.39 1163.62 M167.673 1148.96 L167.673 1153.22 Q165.913 1152.39 164.108 1151.95 Q162.325 1151.51 160.566 1151.51 Q155.936 1151.51 153.483 1154.64 Q151.052 1157.76 150.705 1164.08 Q152.071 1162.07 154.131 1161 Q156.191 1159.91 158.668 1159.91 Q163.876 1159.91 166.885 1163.09 Q169.918 1166.23 169.918 1171.67 Q169.918 1177 166.77 1180.21 Q163.622 1183.43 158.39 1183.43 Q152.395 1183.43 149.224 1178.85 Q146.052 1174.24 146.052 1165.52 Q146.052 1157.32 149.941 1152.46 Q153.83 1147.58 160.381 1147.58 Q162.14 1147.58 163.923 1147.92 Q165.728 1148.27 167.673 1148.96 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M118.714 818.016 L126.353 818.016 L126.353 791.65 L118.043 793.317 L118.043 789.058 L126.307 787.391 L130.983 787.391 L130.983 818.016 L138.622 818.016 L138.622 821.951 L118.714 821.951 L118.714 818.016 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M158.066 805.539 Q154.733 805.539 152.811 807.322 Q150.913 809.104 150.913 812.229 Q150.913 815.354 152.811 817.136 Q154.733 818.919 158.066 818.919 Q161.399 818.919 163.321 817.136 Q165.242 815.331 165.242 812.229 Q165.242 809.104 163.321 807.322 Q161.423 805.539 158.066 805.539 M153.39 803.548 Q150.381 802.808 148.691 800.748 Q147.024 798.687 147.024 795.724 Q147.024 791.581 149.964 789.174 Q152.927 786.766 158.066 786.766 Q163.228 786.766 166.168 789.174 Q169.108 791.581 169.108 795.724 Q169.108 798.687 167.418 800.748 Q165.751 802.808 162.765 803.548 Q166.145 804.336 168.02 806.627 Q169.918 808.919 169.918 812.229 Q169.918 817.252 166.839 819.937 Q163.784 822.622 158.066 822.622 Q152.349 822.622 149.27 819.937 Q146.214 817.252 146.214 812.229 Q146.214 808.919 148.112 806.627 Q150.011 804.336 153.39 803.548 M151.677 796.164 Q151.677 798.849 153.344 800.354 Q155.034 801.859 158.066 801.859 Q161.075 801.859 162.765 800.354 Q164.478 798.849 164.478 796.164 Q164.478 793.479 162.765 791.974 Q161.075 790.47 158.066 790.47 Q155.034 790.47 153.344 791.974 Q151.677 793.479 151.677 796.164 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M121.839 457.206 L138.159 457.206 L138.159 461.141 L116.214 461.141 L116.214 457.206 Q118.876 454.452 123.46 449.822 Q128.066 445.169 129.247 443.827 Q131.492 441.304 132.372 439.567 Q133.275 437.808 133.275 436.118 Q133.275 433.364 131.33 431.628 Q129.409 429.892 126.307 429.892 Q124.108 429.892 121.654 430.655 Q119.224 431.419 116.446 432.97 L116.446 428.248 Q119.27 427.114 121.724 426.535 Q124.177 425.956 126.214 425.956 Q131.585 425.956 134.779 428.642 Q137.974 431.327 137.974 435.817 Q137.974 437.947 137.163 439.868 Q136.376 441.767 134.27 444.359 Q133.691 445.03 130.589 448.248 Q127.488 451.442 121.839 457.206 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M157.973 429.66 Q154.362 429.66 152.534 433.225 Q150.728 436.767 150.728 443.896 Q150.728 451.003 152.534 454.567 Q154.362 458.109 157.973 458.109 Q161.608 458.109 163.413 454.567 Q165.242 451.003 165.242 443.896 Q165.242 436.767 163.413 433.225 Q161.608 429.66 157.973 429.66 M157.973 425.956 Q163.784 425.956 166.839 430.563 Q169.918 435.146 169.918 443.896 Q169.918 452.623 166.839 457.229 Q163.784 461.813 157.973 461.813 Q152.163 461.813 149.085 457.229 Q146.029 452.623 146.029 443.896 Q146.029 435.146 149.085 430.563 Q152.163 425.956 157.973 425.956 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M38.9447 1176.97 L56.3549 1176.97 L56.3549 1166.66 Q56.3549 1161.47 54.2224 1158.99 Q52.0581 1156.48 47.6339 1156.48 Q43.1779 1156.48 41.0772 1158.99 Q38.9447 1161.47 38.9447 1166.66 L38.9447 1176.97 M19.402 1176.97 L33.7248 1176.97 L33.7248 1167.46 Q33.7248 1162.75 31.9743 1160.45 Q30.1919 1158.13 26.5634 1158.13 Q22.9668 1158.13 21.1844 1160.45 Q19.402 1162.75 19.402 1167.46 L19.402 1176.97 M14.1184 1183.4 L14.1184 1166.98 Q14.1184 1159.63 17.174 1155.65 Q20.2295 1151.67 25.8632 1151.67 Q30.2237 1151.67 32.8018 1153.71 Q35.3799 1155.74 36.0165 1159.69 Q37.035 1154.95 40.2815 1152.34 Q43.4962 1149.7 48.3341 1149.7 Q54.6998 1149.7 58.1691 1154.02 Q61.6384 1158.35 61.6384 1166.34 L61.6384 1183.4 L14.1184 1183.4 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M25.9905 1138.94 L25.9905 1133.08 L61.6384 1133.08 L61.6384 1138.94 L25.9905 1138.94 M12.1132 1138.94 L12.1132 1133.08 L19.5293 1133.08 L19.5293 1138.94 L12.1132 1138.94 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M12.1132 1120.83 L12.1132 1114.97 L61.6384 1114.97 L61.6384 1120.83 L12.1132 1120.83 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M12.1132 1102.72 L12.1132 1096.86 L61.6384 1096.86 L61.6384 1102.72 L12.1132 1102.72 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M19.402 1057.2 L56.3549 1057.2 L56.3549 1049.44 Q56.3549 1039.6 51.8989 1035.05 Q47.4429 1030.47 37.8307 1030.47 Q28.2821 1030.47 23.858 1035.05 Q19.402 1039.6 19.402 1049.44 L19.402 1057.2 M14.1184 1063.63 L14.1184 1050.42 Q14.1184 1036.61 19.8794 1030.15 Q25.6085 1023.69 37.8307 1023.69 Q50.1165 1023.69 55.8775 1030.18 Q61.6384 1036.67 61.6384 1050.42 L61.6384 1063.63 L14.1184 1063.63 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M42.3504 983.201 L45.2149 983.201 L45.2149 1010.13 Q51.2623 1009.75 54.4452 1006.5 Q57.5962 1003.22 57.5962 997.397 Q57.5962 994.023 56.7687 990.872 Q55.9411 987.689 54.2861 984.57 L59.8242 984.57 Q61.161 987.721 61.8612 991.031 Q62.5615 994.341 62.5615 997.747 Q62.5615 1006.28 57.5962 1011.27 Q52.631 1016.24 44.1646 1016.24 Q35.4117 1016.24 30.2873 1011.53 Q25.1311 1006.79 25.1311 998.765 Q25.1311 991.572 29.7781 987.402 Q34.3932 983.201 42.3504 983.201 M40.6316 989.058 Q35.8255 989.121 32.9609 991.763 Q30.0964 994.373 30.0964 998.702 Q30.0964 1003.6 32.8654 1006.56 Q35.6345 1009.49 40.6634 1009.94 L40.6316 989.058 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M56.2912 967.923 L75.1974 967.923 L75.1974 973.812 L25.9905 973.812 L25.9905 967.923 L31.4013 967.923 Q28.2185 966.077 26.6907 963.276 Q25.1311 960.444 25.1311 956.529 Q25.1311 950.036 30.2873 945.994 Q35.4436 941.919 43.8463 941.919 Q52.249 941.919 57.4052 945.994 Q62.5615 950.036 62.5615 956.529 Q62.5615 960.444 61.0337 963.276 Q59.4741 966.077 56.2912 967.923 M43.8463 947.999 Q37.3851 947.999 33.7248 950.672 Q30.0327 953.314 30.0327 957.961 Q30.0327 962.608 33.7248 965.282 Q37.3851 967.923 43.8463 967.923 Q50.3075 967.923 53.9996 965.282 Q57.6599 962.608 57.6599 957.961 Q57.6599 953.314 53.9996 950.672 Q50.3075 947.999 43.8463 947.999 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M15.869 926.419 L25.9905 926.419 L25.9905 914.356 L30.542 914.356 L30.542 926.419 L49.8937 926.419 Q54.2542 926.419 55.4955 925.241 Q56.7368 924.032 56.7368 920.372 L56.7368 914.356 L61.6384 914.356 L61.6384 920.372 Q61.6384 927.151 59.124 929.729 Q56.5777 932.307 49.8937 932.307 L30.542 932.307 L30.542 936.604 L25.9905 936.604 L25.9905 932.307 L15.869 932.307 L15.869 926.419 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M40.1224 877.021 L61.6384 877.021 L61.6384 882.878 L40.3133 882.878 Q35.2526 882.878 32.7381 884.851 Q30.2237 886.824 30.2237 890.771 Q30.2237 895.513 33.2474 898.251 Q36.2711 900.988 41.491 900.988 L61.6384 900.988 L61.6384 906.876 L12.1132 906.876 L12.1132 900.988 L31.5287 900.988 Q28.314 898.887 26.7225 896.055 Q25.1311 893.19 25.1311 889.466 Q25.1311 883.323 28.9505 880.172 Q32.7381 877.021 40.1224 877.021 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M12.1769 830.551 Q19.4975 834.816 26.6589 836.885 Q33.8203 838.954 41.1727 838.954 Q48.5251 838.954 55.7502 836.885 Q62.9434 834.785 70.2321 830.551 L70.2321 835.644 Q62.7524 840.418 55.5274 842.805 Q48.3023 845.161 41.1727 845.161 Q34.0749 845.161 26.8817 842.805 Q19.6884 840.45 12.1769 835.644 L12.1769 830.551 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M32.8336 791.434 Q28.8869 789.238 27.009 786.182 Q25.1311 783.127 25.1311 778.989 Q25.1311 773.419 29.046 770.396 Q32.9291 767.372 40.1224 767.372 L61.6384 767.372 L61.6384 773.26 L40.3133 773.26 Q35.1889 773.26 32.7063 775.074 Q30.2237 776.889 30.2237 780.612 Q30.2237 785.164 33.2474 787.806 Q36.2711 790.447 41.491 790.447 L61.6384 790.447 L61.6384 796.336 L40.3133 796.336 Q35.1571 796.336 32.7063 798.15 Q30.2237 799.964 30.2237 803.752 Q30.2237 808.24 33.2792 810.881 Q36.3029 813.523 41.491 813.523 L61.6384 813.523 L61.6384 819.411 L25.9905 819.411 L25.9905 813.523 L31.5287 813.523 Q28.2503 811.518 26.6907 808.717 Q25.1311 805.916 25.1311 802.065 Q25.1311 798.182 27.1045 795.476 Q29.0779 792.739 32.8336 791.434 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M32.8336 727.936 Q28.8869 725.74 27.009 722.685 Q25.1311 719.629 25.1311 715.491 Q25.1311 709.921 29.046 706.898 Q32.9291 703.874 40.1224 703.874 L61.6384 703.874 L61.6384 709.762 L40.3133 709.762 Q35.1889 709.762 32.7063 711.576 Q30.2237 713.391 30.2237 717.115 Q30.2237 721.666 33.2474 724.308 Q36.2711 726.95 41.491 726.95 L61.6384 726.95 L61.6384 732.838 L40.3133 732.838 Q35.1571 732.838 32.7063 734.652 Q30.2237 736.466 30.2237 740.254 Q30.2237 744.742 33.2792 747.383 Q36.3029 750.025 41.491 750.025 L61.6384 750.025 L61.6384 755.914 L25.9905 755.914 L25.9905 750.025 L31.5287 750.025 Q28.2503 748.02 26.6907 745.219 Q25.1311 742.418 25.1311 738.567 Q25.1311 734.684 27.1045 731.978 Q29.0779 729.241 32.8336 727.936 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M12.1769 693.116 L12.1769 688.023 Q19.6884 683.249 26.8817 680.894 Q34.0749 678.507 41.1727 678.507 Q48.3023 678.507 55.5274 680.894 Q62.7524 683.249 70.2321 688.023 L70.2321 693.116 Q62.9434 688.883 55.7502 686.814 Q48.5251 684.713 41.1727 684.713 Q33.8203 684.713 26.6589 686.814 Q19.4975 688.883 12.1769 693.116 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1096.12 18.8205 L1096.12 41.5461 L1106.41 41.5461 Q1112.12 41.5461 1115.24 38.5889 Q1118.36 35.6318 1118.36 30.163 Q1118.36 24.7348 1115.24 21.7777 Q1112.12 18.8205 1106.41 18.8205 L1096.12 18.8205 M1087.94 12.096 L1106.41 12.096 Q1116.57 12.096 1121.76 16.714 Q1126.99 21.2916 1126.99 30.163 Q1126.99 39.1155 1121.76 43.6931 Q1116.57 48.2706 1106.41 48.2706 L1096.12 48.2706 L1096.12 72.576 L1087.94 72.576 L1087.94 12.096 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1154.53 49.7694 Q1145.5 49.7694 1142.01 51.8354 Q1138.53 53.9013 1138.53 58.8839 Q1138.53 62.8538 1141.12 65.2034 Q1143.76 67.5124 1148.25 67.5124 Q1154.45 67.5124 1158.18 63.1374 Q1161.95 58.7219 1161.95 51.4303 L1161.95 49.7694 L1154.53 49.7694 M1169.4 46.6907 L1169.4 72.576 L1161.95 72.576 L1161.95 65.6895 Q1159.39 69.8214 1155.59 71.8063 Q1151.78 73.7508 1146.27 73.7508 Q1139.3 73.7508 1135.17 69.8619 Q1131.08 65.9325 1131.08 59.3701 Q1131.08 51.7138 1136.18 47.825 Q1141.33 43.9361 1151.49 43.9361 L1161.95 43.9361 L1161.95 43.2069 Q1161.95 38.0623 1158.54 35.2672 Q1155.18 32.4315 1149.06 32.4315 Q1145.17 32.4315 1141.49 33.3632 Q1137.8 34.295 1134.4 36.1584 L1134.4 29.2718 Q1138.49 27.692 1142.34 26.9223 Q1146.19 26.1121 1149.83 26.1121 Q1159.68 26.1121 1164.54 31.2163 Q1169.4 36.3204 1169.4 46.6907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1184.75 9.54393 L1192.21 9.54393 L1192.21 72.576 L1184.75 72.576 L1184.75 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1243.13 35.9153 Q1245.92 30.8922 1249.81 28.5022 Q1253.7 26.1121 1258.96 26.1121 Q1266.05 26.1121 1269.9 31.0947 Q1273.75 36.0368 1273.75 45.1919 L1273.75 72.576 L1266.26 72.576 L1266.26 45.4349 Q1266.26 38.913 1263.95 35.7533 Q1261.64 32.5936 1256.9 32.5936 Q1251.11 32.5936 1247.74 36.4419 Q1244.38 40.2903 1244.38 46.9338 L1244.38 72.576 L1236.89 72.576 L1236.89 45.4349 Q1236.89 38.8725 1234.58 35.7533 Q1232.27 32.5936 1227.45 32.5936 Q1221.74 32.5936 1218.37 36.4824 Q1215.01 40.3308 1215.01 46.9338 L1215.01 72.576 L1207.52 72.576 L1207.52 27.2059 L1215.01 27.2059 L1215.01 34.2544 Q1217.56 30.082 1221.13 28.0971 Q1224.69 26.1121 1229.6 26.1121 Q1234.54 26.1121 1237.98 28.6237 Q1241.46 31.1352 1243.13 35.9153 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1327.42 48.0275 L1327.42 51.6733 L1293.15 51.6733 Q1293.64 59.3701 1297.77 63.421 Q1301.94 67.4314 1309.36 67.4314 Q1313.65 67.4314 1317.66 66.3781 Q1321.71 65.3249 1325.68 63.2184 L1325.68 70.267 Q1321.67 71.9684 1317.46 72.8596 Q1313.25 73.7508 1308.91 73.7508 Q1298.06 73.7508 1291.7 67.4314 Q1285.38 61.1119 1285.38 50.3365 Q1285.38 39.1965 1291.37 32.6746 Q1297.41 26.1121 1307.62 26.1121 Q1316.77 26.1121 1322.08 32.0264 Q1327.42 37.9003 1327.42 48.0275 M1319.97 45.84 Q1319.89 39.7232 1316.53 36.0774 Q1313.21 32.4315 1307.7 32.4315 Q1301.46 32.4315 1297.69 35.9558 Q1293.96 39.4801 1293.4 45.8805 L1319.97 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1365.95 34.1734 Q1364.69 33.4443 1363.19 33.1202 Q1361.74 32.7556 1359.95 32.7556 Q1353.63 32.7556 1350.23 36.8875 Q1346.87 40.9789 1346.87 48.6757 L1346.87 72.576 L1339.37 72.576 L1339.37 27.2059 L1346.87 27.2059 L1346.87 34.2544 Q1349.22 30.1225 1352.99 28.1376 Q1356.75 26.1121 1362.14 26.1121 Q1362.91 26.1121 1363.84 26.2337 Q1364.77 26.3147 1365.91 26.5172 L1365.95 34.1734 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1408.65 18.8205 L1408.65 41.5461 L1418.93 41.5461 Q1424.65 41.5461 1427.77 38.5889 Q1430.88 35.6318 1430.88 30.163 Q1430.88 24.7348 1427.77 21.7777 Q1424.65 18.8205 1418.93 18.8205 L1408.65 18.8205 M1400.46 12.096 L1418.93 12.096 Q1429.1 12.096 1434.29 16.714 Q1439.51 21.2916 1439.51 30.163 Q1439.51 39.1155 1434.29 43.6931 Q1429.1 48.2706 1418.93 48.2706 L1408.65 48.2706 L1408.65 72.576 L1400.46 72.576 L1400.46 12.096 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1486.02 48.0275 L1486.02 51.6733 L1451.75 51.6733 Q1452.23 59.3701 1456.36 63.421 Q1460.54 67.4314 1467.95 67.4314 Q1472.24 67.4314 1476.25 66.3781 Q1480.31 65.3249 1484.28 63.2184 L1484.28 70.267 Q1480.27 71.9684 1476.05 72.8596 Q1471.84 73.7508 1467.5 73.7508 Q1456.65 73.7508 1450.29 67.4314 Q1443.97 61.1119 1443.97 50.3365 Q1443.97 39.1965 1449.96 32.6746 Q1456 26.1121 1466.21 26.1121 Q1475.36 26.1121 1480.67 32.0264 Q1486.02 37.9003 1486.02 48.0275 M1478.56 45.84 Q1478.48 39.7232 1475.12 36.0774 Q1471.8 32.4315 1466.29 32.4315 Q1460.05 32.4315 1456.28 35.9558 Q1452.56 39.4801 1451.99 45.8805 L1478.56 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1535.97 45.1919 L1535.97 72.576 L1528.51 72.576 L1528.51 45.4349 Q1528.51 38.994 1526 35.7938 Q1523.49 32.5936 1518.47 32.5936 Q1512.43 32.5936 1508.95 36.4419 Q1505.46 40.2903 1505.46 46.9338 L1505.46 72.576 L1497.97 72.576 L1497.97 27.2059 L1505.46 27.2059 L1505.46 34.2544 Q1508.14 30.163 1511.74 28.1376 Q1515.39 26.1121 1520.13 26.1121 Q1527.94 26.1121 1531.95 30.9732 Q1535.97 35.7938 1535.97 45.1919 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1580.69 49.3643 Q1580.69 41.2625 1577.32 36.8065 Q1574 32.3505 1567.97 32.3505 Q1561.97 32.3505 1558.61 36.8065 Q1555.29 41.2625 1555.29 49.3643 Q1555.29 57.4256 1558.61 61.8816 Q1561.97 66.3376 1567.97 66.3376 Q1574 66.3376 1577.32 61.8816 Q1580.69 57.4256 1580.69 49.3643 M1588.14 66.9452 Q1588.14 78.5308 1583 84.1616 Q1577.85 89.8329 1567.24 89.8329 Q1563.31 89.8329 1559.82 89.2252 Q1556.34 88.6581 1553.06 87.4428 L1553.06 80.1917 Q1556.34 81.9741 1559.54 82.8248 Q1562.74 83.6755 1566.06 83.6755 Q1573.4 83.6755 1577.04 79.8271 Q1580.69 76.0193 1580.69 68.282 L1580.69 64.5957 Q1578.38 68.6061 1574.77 70.5911 Q1571.17 72.576 1566.14 72.576 Q1557.8 72.576 1552.7 66.2161 Q1547.59 59.8562 1547.59 49.3643 Q1547.59 38.832 1552.7 32.472 Q1557.8 26.1121 1566.14 26.1121 Q1571.17 26.1121 1574.77 28.0971 Q1578.38 30.082 1580.69 34.0924 L1580.69 27.2059 L1588.14 27.2059 L1588.14 66.9452 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1602.72 54.671 L1602.72 27.2059 L1610.18 27.2059 L1610.18 54.3874 Q1610.18 60.8284 1612.69 64.0691 Q1615.2 67.2693 1620.22 67.2693 Q1626.26 67.2693 1629.74 63.421 Q1633.27 59.5726 1633.27 52.9291 L1633.27 27.2059 L1640.72 27.2059 L1640.72 72.576 L1633.27 72.576 L1633.27 65.6084 Q1630.55 69.7404 1626.95 71.7658 Q1623.38 73.7508 1618.64 73.7508 Q1610.83 73.7508 1606.77 68.8897 Q1602.72 64.0286 1602.72 54.671 M1621.48 26.1121 L1621.48 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1656.07 27.2059 L1663.53 27.2059 L1663.53 72.576 L1656.07 72.576 L1656.07 27.2059 M1656.07 9.54393 L1663.53 9.54393 L1663.53 18.9825 L1656.07 18.9825 L1656.07 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1716.84 45.1919 L1716.84 72.576 L1709.38 72.576 L1709.38 45.4349 Q1709.38 38.994 1706.87 35.7938 Q1704.36 32.5936 1699.34 32.5936 Q1693.3 32.5936 1689.82 36.4419 Q1686.33 40.2903 1686.33 46.9338 L1686.33 72.576 L1678.84 72.576 L1678.84 27.2059 L1686.33 27.2059 L1686.33 34.2544 Q1689.01 30.163 1692.61 28.1376 Q1696.26 26.1121 1701 26.1121 Q1708.82 26.1121 1712.83 30.9732 Q1716.84 35.7938 1716.84 45.1919 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M1760.63 28.5427 L1760.63 35.5912 Q1757.47 33.9709 1754.07 33.1607 Q1750.66 32.3505 1747.02 32.3505 Q1741.47 32.3505 1738.67 34.0519 Q1735.92 35.7533 1735.92 39.156 Q1735.92 41.7486 1737.9 43.2475 Q1739.89 44.7058 1745.88 46.0426 L1748.43 46.6097 Q1756.37 48.3111 1759.7 51.4303 Q1763.06 54.509 1763.06 60.0587 Q1763.06 66.3781 1758.04 70.0644 Q1753.05 73.7508 1744.3 73.7508 Q1740.66 73.7508 1736.69 73.0216 Q1732.76 72.3329 1728.38 70.9151 L1728.38 63.2184 Q1732.51 65.3654 1736.53 66.4591 Q1740.54 67.5124 1744.47 67.5124 Q1749.73 67.5124 1752.57 65.73 Q1755.4 63.9071 1755.4 60.6258 Q1755.4 57.5877 1753.34 55.9673 Q1751.31 54.3469 1744.38 52.8481 L1741.79 52.2405 Q1734.86 50.7821 1731.79 47.7845 Q1728.71 44.7463 1728.71 39.4801 Q1728.71 33.0797 1733.24 29.5959 Q1737.78 26.1121 1746.13 26.1121 Q1750.26 26.1121 1753.9 26.7198 Q1757.55 27.3274 1760.63 28.5427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip102)" cx="862.684" cy="678.388" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="896.036" cy="912.914" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="962.74" cy="804.671" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="662.573" cy="570.145" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="879.36" cy="335.619" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="846.008" cy="840.752" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="871.022" cy="516.023" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="445.785" cy="786.631" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1104.49" cy="407.78" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="754.29" cy="967.036" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="754.29" cy="930.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1029.44" cy="876.833" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="820.994" cy="227.376" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="487.475" cy="245.416" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="654.235" cy="840.752" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="829.332" cy="624.266" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1146.17" cy="317.578" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="470.799" cy="732.509" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1438" cy="173.254" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="754.29" cy="750.55" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="745.952" cy="678.388" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="595.869" cy="588.185" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="787.642" cy="786.631" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="837.67" cy="948.995" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="545.841" cy="642.307" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="987.753" cy="696.428" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="979.416" cy="822.712" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="762.628" cy="696.428" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="979.416" cy="642.307" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="896.036" cy="1039.2" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="704.263" cy="786.631" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="896.036" cy="840.752" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1012.77" cy="642.307" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="637.559" cy="985.076" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="871.022" cy="245.416" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="837.67" cy="443.861" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1121.16" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="737.614" cy="570.145" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="921.05" cy="606.226" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="645.897" cy="804.671" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1004.43" cy="732.509" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="604.207" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1279.58" cy="497.983" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="687.587" cy="1003.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="904.374" cy="660.347" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1029.44" cy="624.266" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="729.276" cy="642.307" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="604.207" cy="822.712" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1129.5" cy="227.376" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="904.374" cy="858.793" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="946.064" cy="642.307" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="520.827" cy="822.712" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1104.49" cy="534.064" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="479.137" cy="786.631" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1054.46" cy="696.428" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="854.346" cy="894.874" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="987.753" cy="660.347" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="645.897" cy="1057.24" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="737.614" cy="606.226" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="579.193" cy="1003.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1046.12" cy="245.416" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="737.614" cy="985.076" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1029.44" cy="768.59" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="637.559" cy="967.036" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1071.13" cy="804.671" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="562.517" cy="1129.4" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1029.44" cy="606.226" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="595.869" cy="1057.24" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1087.81" cy="552.104" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="395.758" cy="624.266" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="912.712" cy="732.509" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="904.374" cy="948.995" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1421.33" cy="642.307" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="562.517" cy="894.874" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1171.19" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1012.77" cy="1021.16" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="704.263" cy="552.104" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="620.883" cy="1147.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1112.82" cy="606.226" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="487.475" cy="948.995" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1179.53" cy="876.833" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="662.573" cy="660.347" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="529.165" cy="552.104" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="712.601" cy="840.752" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1046.12" cy="389.74" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="629.221" cy="534.064" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="679.249" cy="696.428" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="795.98" cy="588.185" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="846.008" cy="660.347" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="579.193" cy="804.671" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1029.44" cy="786.631" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="437.448" cy="967.036" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="904.374" cy="786.631" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="620.883" cy="930.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1004.43" cy="642.307" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="779.304" cy="696.428" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="962.74" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="362.406" cy="1147.44" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1204.54" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="520.827" cy="822.712" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1021.11" cy="443.861" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="745.952" cy="1165.48" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="754.29" cy="443.861" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="762.628" cy="696.428" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="912.712" cy="642.307" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="820.994" cy="948.995" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="787.642" cy="443.861" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="779.304" cy="985.076" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1204.54" cy="624.266" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="779.304" cy="1075.28" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1404.65" cy="389.74" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="912.712" cy="858.793" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1121.16" cy="534.064" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="904.374" cy="317.578" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1162.85" cy="750.55" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="820.994" cy="985.076" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="712.601" cy="353.659" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="579.193" cy="985.076" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1029.44" cy="696.428" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="620.883" cy="948.995" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="745.952" cy="479.942" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="954.402" cy="985.076" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1054.46" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="537.503" cy="1183.52" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="987.753" cy="624.266" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="837.67" cy="876.833" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1062.8" cy="750.55" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="854.346" cy="967.036" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1279.58" cy="804.671" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="812.656" cy="822.712" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1196.2" cy="588.185" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="670.911" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="729.276" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="779.304" cy="876.833" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1029.44" cy="894.874" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="570.855" cy="894.874" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="954.402" cy="425.821" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="687.587" cy="1075.28" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="912.712" cy="822.712" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="954.402" cy="967.036" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="987.753" cy="948.995" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="279.026" cy="1255.68" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="996.091" cy="985.076" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="712.601" cy="1021.16" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="854.346" cy="678.388" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="871.022" cy="696.428" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="654.235" cy="732.509" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="604.207" cy="840.752" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="754.29" cy="786.631" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="604.207" cy="967.036" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1062.8" cy="714.469" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1479.69" cy="822.712" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1771.52" cy="534.064" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1879.92" cy="588.185" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1387.98" cy="678.388" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1996.65" cy="479.942" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1371.3" cy="840.752" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1446.34" cy="768.59" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1879.92" cy="768.59" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1438" cy="642.307" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1879.92" cy="461.902" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1488.03" cy="840.752" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1913.27" cy="389.74" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1521.38" cy="930.955" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1938.28" cy="786.631" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1429.67" cy="967.036" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1813.21" cy="516.023" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1796.54" cy="443.861" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2438.56" cy="840.752" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1471.36" cy="696.428" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1704.82" cy="768.59" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1137.84" cy="930.955" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1646.45" cy="894.874" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1204.54" cy="1057.24" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1821.55" cy="552.104" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1496.37" cy="822.712" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1938.28" cy="624.266" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1813.21" cy="732.509" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1729.83" cy="624.266" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1471.36" cy="840.752" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2004.99" cy="443.861" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1012.77" cy="1057.24" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2121.72" cy="299.538" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1146.17" cy="1039.2" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1854.9" cy="660.347" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1746.51" cy="696.428" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1563.07" cy="1021.16" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1571.41" cy="750.55" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1938.28" cy="317.578" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1513.05" cy="1057.24" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2063.35" cy="461.902" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1688.14" cy="534.064" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1454.68" cy="894.874" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1846.56" cy="606.226" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1396.31" cy="985.076" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1846.56" cy="822.712" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1838.23" cy="714.469" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1779.86" cy="822.712" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1688.14" cy="516.023" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1896.59" cy="678.388" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1754.85" cy="930.955" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1613.1" cy="1093.32" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1888.25" cy="624.266" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1412.99" cy="930.955" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1829.89" cy="497.983" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1146.17" cy="930.955" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1954.96" cy="660.347" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1371.3" cy="1057.24" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1713.16" cy="461.902" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1788.2" cy="660.347" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1404.65" cy="552.104" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1929.94" cy="534.064" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1504.71" cy="1075.28" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1412.99" cy="985.076" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2255.12" cy="479.942" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1229.55" cy="786.631" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1738.17" cy="768.59" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1838.23" cy="624.266" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1788.2" cy="678.388" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1446.34" cy="1670.61" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1771.52" cy="1111.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1663.13" cy="1508.25" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1771.52" cy="1309.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1571.41" cy="1436.09" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1479.69" cy="1616.49" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1387.98" cy="1418.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1496.37" cy="1291.76" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1212.88" cy="1634.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1504.71" cy="1273.72" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1012.77" cy="1580.41" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1688.14" cy="1147.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1396.31" cy="1580.41" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1638.12" cy="1418.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1421.33" cy="1418.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1713.16" cy="1219.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1104.49" cy="1616.49" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1704.82" cy="1309.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1454.68" cy="1436.09" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1663.13" cy="1327.85" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1788.2" cy="1472.17" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1362.96" cy="1436.09" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1479.69" cy="1436.09" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1463.02" cy="1201.56" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1179.53" cy="1688.65" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1446.34" cy="1327.85" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1312.93" cy="1472.17" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1588.09" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1621.44" cy="1472.17" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1771.52" cy="1291.76" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1546.4" cy="1291.76" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1171.19" cy="1490.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1362.96" cy="1436.09" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2571.97" cy="985.076" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1696.48" cy="1381.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1638.12" cy="1111.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1154.51" cy="1580.41" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1304.6" cy="930.955" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1271.24" cy="1598.45" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1663.13" cy="1219.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1162.85" cy="1580.41" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1738.17" cy="1165.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1379.64" cy="1580.41" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1738.17" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1813.21" cy="1183.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1237.89" cy="1544.33" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1396.31" cy="1544.33" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1813.21" cy="1183.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1346.29" cy="1652.57" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1371.3" cy="1201.56" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1488.03" cy="1490.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1646.45" cy="1508.25" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1362.96" cy="1454.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1779.86" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1479.69" cy="1454.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1354.62" cy="1273.72" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1254.57" cy="1544.33" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1396.31" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1204.54" cy="1436.09" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1804.87" cy="1291.76" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1379.64" cy="1562.37" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1454.68" cy="1363.93" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1412.99" cy="1544.33" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2130.06" cy="1219.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1421.33" cy="1490.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1754.85" cy="1021.16" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1454.68" cy="1454.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1729.83" cy="1129.4" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1229.55" cy="1490.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1829.89" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1579.75" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1471.36" cy="1237.64" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1621.44" cy="1237.64" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1479.69" cy="1381.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1471.36" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1654.79" cy="1165.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1563.07" cy="1490.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1863.24" cy="1111.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1371.3" cy="1562.37" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1371.3" cy="1093.32" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1696.48" cy="1436.09" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1979.97" cy="1237.64" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1554.74" cy="1418.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1771.52" cy="1183.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1346.29" cy="1562.37" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1838.23" cy="930.955" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1221.22" cy="1454.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1879.92" cy="1490.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1563.07" cy="1526.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1946.62" cy="985.076" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1563.07" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1954.96" cy="967.036" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1396.31" cy="1436.09" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1729.83" cy="1147.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1312.93" cy="1400.01" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1838.23" cy="1219.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1721.49" cy="1201.56" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1513.05" cy="1418.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1638.12" cy="1454.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1863.24" cy="1075.28" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1646.45" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2263.46" cy="985.076" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1538.06" cy="1255.68" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1696.48" cy="1345.89" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1546.4" cy="1562.37" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1504.71" cy="1147.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1079.47" cy="1400.01" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2055.01" cy="1201.56" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1212.88" cy="1526.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1613.1" cy="1327.85" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1813.21" cy="1309.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1754.85" cy="1183.52" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1229.55" cy="1309.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1896.59" cy="1111.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1454.68" cy="1508.25" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="2196.76" cy="1165.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1312.93" cy="1219.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1671.47" cy="1129.4" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1538.06" cy="1580.41" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1504.71" cy="1472.17" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1804.87" cy="1219.6" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1371.3" cy="1381.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<circle clip-path="url(#clip102)" cx="1763.18" cy="1147.44" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="3.84"></circle>
<path clip-path="url(#clip100)" d="M2093.66 1680.57 L2559.74 1680.57 L2559.74 1473.21 L2093.66 1473.21  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip100)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2093.66,1680.57 2559.74,1680.57 2559.74,1473.21 2093.66,1473.21 2093.66,1680.57 "></polyline>
<circle clip-path="url(#clip100)" cx="2201.68" cy="1525.05" r="20.48" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.46133"></circle>
<path clip-path="url(#clip100)" d="M2325.53 1512.38 L2319.19 1529.58 L2331.9 1529.58 L2325.53 1512.38 M2322.9 1507.77 L2328.2 1507.77 L2341.37 1542.33 L2336.51 1542.33 L2333.36 1533.47 L2317.78 1533.47 L2314.63 1542.33 L2309.7 1542.33 L2322.9 1507.77 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2362.46 1520.34 L2362.46 1506.31 L2366.72 1506.31 L2366.72 1542.33 L2362.46 1542.33 L2362.46 1538.44 Q2361.11 1540.76 2359.05 1541.89 Q2357.02 1543 2354.15 1543 Q2349.45 1543 2346.48 1539.25 Q2343.54 1535.5 2343.54 1529.39 Q2343.54 1523.28 2346.48 1519.53 Q2349.45 1515.78 2354.15 1515.78 Q2357.02 1515.78 2359.05 1516.92 Q2361.11 1518.03 2362.46 1520.34 M2347.94 1529.39 Q2347.94 1534.09 2349.86 1536.78 Q2351.81 1539.44 2355.19 1539.44 Q2358.57 1539.44 2360.51 1536.78 Q2362.46 1534.09 2362.46 1529.39 Q2362.46 1524.69 2360.51 1522.03 Q2358.57 1519.35 2355.19 1519.35 Q2351.81 1519.35 2349.86 1522.03 Q2347.94 1524.69 2347.94 1529.39 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2397.66 1528.31 L2397.66 1530.39 L2378.08 1530.39 Q2378.36 1534.79 2380.72 1537.1 Q2383.1 1539.39 2387.34 1539.39 Q2389.79 1539.39 2392.09 1538.79 Q2394.4 1538.19 2396.67 1536.99 L2396.67 1541.01 Q2394.38 1541.99 2391.97 1542.49 Q2389.56 1543 2387.09 1543 Q2380.88 1543 2377.25 1539.39 Q2373.64 1535.78 2373.64 1529.62 Q2373.64 1523.26 2377.06 1519.53 Q2380.51 1515.78 2386.34 1515.78 Q2391.58 1515.78 2394.61 1519.16 Q2397.66 1522.52 2397.66 1528.31 M2393.4 1527.06 Q2393.36 1523.56 2391.44 1521.48 Q2389.54 1519.39 2386.39 1519.39 Q2382.83 1519.39 2380.67 1521.41 Q2378.54 1523.42 2378.22 1527.08 L2393.4 1527.06 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2404.65 1506.31 L2408.91 1506.31 L2408.91 1542.33 L2404.65 1542.33 L2404.65 1506.31 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2417.83 1516.41 L2422.09 1516.41 L2422.09 1542.33 L2417.83 1542.33 L2417.83 1516.41 M2417.83 1506.31 L2422.09 1506.31 L2422.09 1511.71 L2417.83 1511.71 L2417.83 1506.31 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2453.17 1528.31 L2453.17 1530.39 L2433.59 1530.39 Q2433.87 1534.79 2436.23 1537.1 Q2438.61 1539.39 2442.85 1539.39 Q2445.3 1539.39 2447.59 1538.79 Q2449.91 1538.19 2452.18 1536.99 L2452.18 1541.01 Q2449.89 1541.99 2447.48 1542.49 Q2445.07 1543 2442.59 1543 Q2436.39 1543 2432.76 1539.39 Q2429.15 1535.78 2429.15 1529.62 Q2429.15 1523.26 2432.57 1519.53 Q2436.02 1515.78 2441.85 1515.78 Q2447.09 1515.78 2450.12 1519.16 Q2453.17 1522.52 2453.17 1528.31 M2448.91 1527.06 Q2448.87 1523.56 2446.95 1521.48 Q2445.05 1519.39 2441.9 1519.39 Q2438.34 1519.39 2436.18 1521.41 Q2434.05 1523.42 2433.73 1527.08 L2448.91 1527.06 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip100)" cx="2201.68" cy="1576.89" r="20.48" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.46133"></circle>
<path clip-path="url(#clip100)" d="M2337.57 1562.27 L2337.57 1567.21 Q2335.21 1565.01 2332.53 1563.92 Q2329.86 1562.83 2326.85 1562.83 Q2320.93 1562.83 2317.78 1566.46 Q2314.63 1570.08 2314.63 1576.93 Q2314.63 1583.76 2317.78 1587.39 Q2320.93 1591 2326.85 1591 Q2329.86 1591 2332.53 1589.91 Q2335.21 1588.83 2337.57 1586.63 L2337.57 1591.51 Q2335.12 1593.18 2332.36 1594.01 Q2329.63 1594.84 2326.58 1594.84 Q2318.73 1594.84 2314.22 1590.05 Q2309.7 1585.24 2309.7 1576.93 Q2309.7 1568.59 2314.22 1563.8 Q2318.73 1558.99 2326.58 1558.99 Q2329.68 1558.99 2332.41 1559.82 Q2335.16 1560.63 2337.57 1562.27 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2366.16 1578.52 L2366.16 1594.17 L2361.9 1594.17 L2361.9 1578.66 Q2361.9 1574.98 2360.47 1573.15 Q2359.03 1571.33 2356.16 1571.33 Q2352.71 1571.33 2350.72 1573.52 Q2348.73 1575.72 2348.73 1579.52 L2348.73 1594.17 L2344.45 1594.17 L2344.45 1558.15 L2348.73 1558.15 L2348.73 1572.27 Q2350.26 1569.94 2352.32 1568.78 Q2354.4 1567.62 2357.11 1567.62 Q2361.58 1567.62 2363.87 1570.4 Q2366.16 1573.15 2366.16 1578.52 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2374.66 1568.25 L2378.91 1568.25 L2378.91 1594.17 L2374.66 1594.17 L2374.66 1568.25 M2374.66 1558.15 L2378.91 1558.15 L2378.91 1563.55 L2374.66 1563.55 L2374.66 1558.15 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2409.38 1578.52 L2409.38 1594.17 L2405.12 1594.17 L2405.12 1578.66 Q2405.12 1574.98 2403.68 1573.15 Q2402.25 1571.33 2399.38 1571.33 Q2395.93 1571.33 2393.94 1573.52 Q2391.95 1575.72 2391.95 1579.52 L2391.95 1594.17 L2387.66 1594.17 L2387.66 1568.25 L2391.95 1568.25 L2391.95 1572.27 Q2393.47 1569.94 2395.53 1568.78 Q2397.62 1567.62 2400.33 1567.62 Q2404.79 1567.62 2407.09 1570.4 Q2409.38 1573.15 2409.38 1578.52 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2434.4 1569.01 L2434.4 1573.04 Q2432.59 1572.11 2430.65 1571.65 Q2428.71 1571.19 2426.62 1571.19 Q2423.45 1571.19 2421.85 1572.16 Q2420.28 1573.13 2420.28 1575.08 Q2420.28 1576.56 2421.41 1577.41 Q2422.55 1578.25 2425.97 1579.01 L2427.43 1579.33 Q2431.97 1580.31 2433.87 1582.09 Q2435.79 1583.85 2435.79 1587.02 Q2435.79 1590.63 2432.92 1592.74 Q2430.07 1594.84 2425.07 1594.84 Q2422.99 1594.84 2420.72 1594.43 Q2418.47 1594.03 2415.97 1593.22 L2415.97 1588.83 Q2418.34 1590.05 2420.63 1590.68 Q2422.92 1591.28 2425.16 1591.28 Q2428.17 1591.28 2429.79 1590.26 Q2431.41 1589.22 2431.41 1587.34 Q2431.41 1585.61 2430.23 1584.68 Q2429.08 1583.76 2425.12 1582.9 L2423.64 1582.55 Q2419.68 1581.72 2417.92 1580.01 Q2416.16 1578.27 2416.16 1575.26 Q2416.16 1571.6 2418.75 1569.61 Q2421.34 1567.62 2426.11 1567.62 Q2428.47 1567.62 2430.56 1567.97 Q2432.64 1568.32 2434.4 1569.01 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2446.78 1560.89 L2446.78 1568.25 L2455.56 1568.25 L2455.56 1571.56 L2446.78 1571.56 L2446.78 1585.63 Q2446.78 1588.8 2447.64 1589.71 Q2448.52 1590.61 2451.18 1590.61 L2455.56 1590.61 L2455.56 1594.17 L2451.18 1594.17 Q2446.25 1594.17 2444.38 1592.34 Q2442.5 1590.49 2442.5 1585.63 L2442.5 1571.56 L2439.38 1571.56 L2439.38 1568.25 L2442.5 1568.25 L2442.5 1560.89 L2446.78 1560.89 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2476.18 1572.23 Q2475.46 1571.81 2474.61 1571.63 Q2473.77 1571.42 2472.76 1571.42 Q2469.15 1571.42 2467.2 1573.78 Q2465.28 1576.12 2465.28 1580.52 L2465.28 1594.17 L2461 1594.17 L2461 1568.25 L2465.28 1568.25 L2465.28 1572.27 Q2466.62 1569.91 2468.77 1568.78 Q2470.93 1567.62 2474.01 1567.62 Q2474.45 1567.62 2474.98 1567.69 Q2475.51 1567.74 2476.16 1567.85 L2476.18 1572.23 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2492.43 1581.14 Q2487.27 1581.14 2485.28 1582.32 Q2483.29 1583.5 2483.29 1586.35 Q2483.29 1588.62 2484.77 1589.96 Q2486.27 1591.28 2488.84 1591.28 Q2492.39 1591.28 2494.52 1588.78 Q2496.67 1586.26 2496.67 1582.09 L2496.67 1581.14 L2492.43 1581.14 M2500.93 1579.38 L2500.93 1594.17 L2496.67 1594.17 L2496.67 1590.24 Q2495.21 1592.6 2493.03 1593.73 Q2490.86 1594.84 2487.71 1594.84 Q2483.73 1594.84 2481.37 1592.62 Q2479.03 1590.38 2479.03 1586.63 Q2479.03 1582.25 2481.95 1580.03 Q2484.89 1577.81 2490.7 1577.81 L2496.67 1577.81 L2496.67 1577.39 Q2496.67 1574.45 2494.72 1572.85 Q2492.8 1571.23 2489.31 1571.23 Q2487.08 1571.23 2484.98 1571.77 Q2482.87 1572.3 2480.93 1573.36 L2480.93 1569.43 Q2483.27 1568.52 2485.46 1568.09 Q2487.66 1567.62 2489.75 1567.62 Q2495.37 1567.62 2498.15 1570.54 Q2500.93 1573.46 2500.93 1579.38 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2513.82 1590.28 L2513.82 1604.03 L2509.54 1604.03 L2509.54 1568.25 L2513.82 1568.25 L2513.82 1572.18 Q2515.16 1569.87 2517.2 1568.76 Q2519.26 1567.62 2522.11 1567.62 Q2526.83 1567.62 2529.77 1571.37 Q2532.73 1575.12 2532.73 1581.23 Q2532.73 1587.34 2529.77 1591.09 Q2526.83 1594.84 2522.11 1594.84 Q2519.26 1594.84 2517.2 1593.73 Q2515.16 1592.6 2513.82 1590.28 M2528.31 1581.23 Q2528.31 1576.53 2526.37 1573.87 Q2524.45 1571.19 2521.07 1571.19 Q2517.69 1571.19 2515.74 1573.87 Q2513.82 1576.53 2513.82 1581.23 Q2513.82 1585.93 2515.74 1588.62 Q2517.69 1591.28 2521.07 1591.28 Q2524.45 1591.28 2526.37 1588.62 Q2528.31 1585.93 2528.31 1581.23 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip100)" cx="2201.68" cy="1628.73" r="20.48" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.46133"></circle>
<path clip-path="url(#clip100)" d="M2335.26 1641.08 L2335.26 1631.8 L2327.62 1631.8 L2327.62 1627.96 L2339.89 1627.96 L2339.89 1642.8 Q2337.18 1644.72 2333.91 1645.71 Q2330.65 1646.68 2326.95 1646.68 Q2318.85 1646.68 2314.26 1641.96 Q2309.7 1637.22 2309.7 1628.77 Q2309.7 1620.3 2314.26 1615.57 Q2318.85 1610.83 2326.95 1610.83 Q2330.33 1610.83 2333.36 1611.66 Q2336.41 1612.49 2338.98 1614.11 L2338.98 1619.09 Q2336.39 1616.89 2333.47 1615.78 Q2330.56 1614.67 2327.34 1614.67 Q2321 1614.67 2317.8 1618.21 Q2314.63 1621.75 2314.63 1628.77 Q2314.63 1635.76 2317.8 1639.3 Q2321 1642.84 2327.34 1642.84 Q2329.82 1642.84 2331.76 1642.42 Q2333.71 1641.99 2335.26 1641.08 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2370.42 1631.99 L2370.42 1634.07 L2350.84 1634.07 Q2351.11 1638.47 2353.47 1640.78 Q2355.86 1643.07 2360.09 1643.07 Q2362.55 1643.07 2364.84 1642.47 Q2367.16 1641.87 2369.42 1640.67 L2369.42 1644.69 Q2367.13 1645.67 2364.72 1646.17 Q2362.32 1646.68 2359.84 1646.68 Q2353.64 1646.68 2350 1643.07 Q2346.39 1639.46 2346.39 1633.3 Q2346.39 1626.94 2349.82 1623.21 Q2353.27 1619.46 2359.1 1619.46 Q2364.33 1619.46 2367.36 1622.84 Q2370.42 1626.2 2370.42 1631.99 M2366.16 1630.74 Q2366.11 1627.24 2364.19 1625.16 Q2362.29 1623.07 2359.15 1623.07 Q2355.58 1623.07 2353.43 1625.09 Q2351.3 1627.1 2350.97 1630.76 L2366.16 1630.74 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2398.96 1630.36 L2398.96 1646.01 L2394.7 1646.01 L2394.7 1630.5 Q2394.7 1626.82 2393.27 1624.99 Q2391.83 1623.17 2388.96 1623.17 Q2385.51 1623.17 2383.52 1625.36 Q2381.53 1627.56 2381.53 1631.36 L2381.53 1646.01 L2377.25 1646.01 L2377.25 1620.09 L2381.53 1620.09 L2381.53 1624.11 Q2383.06 1621.78 2385.12 1620.62 Q2387.2 1619.46 2389.91 1619.46 Q2394.38 1619.46 2396.67 1622.24 Q2398.96 1624.99 2398.96 1630.36 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2411.67 1612.73 L2411.67 1620.09 L2420.44 1620.09 L2420.44 1623.4 L2411.67 1623.4 L2411.67 1637.47 Q2411.67 1640.64 2412.53 1641.55 Q2413.4 1642.45 2416.07 1642.45 L2420.44 1642.45 L2420.44 1646.01 L2416.07 1646.01 Q2411.14 1646.01 2409.26 1644.18 Q2407.39 1642.33 2407.39 1637.47 L2407.39 1623.4 L2404.26 1623.4 L2404.26 1620.09 L2407.39 1620.09 L2407.39 1612.73 L2411.67 1612.73 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2436.09 1623.07 Q2432.66 1623.07 2430.67 1625.76 Q2428.68 1628.42 2428.68 1633.07 Q2428.68 1637.73 2430.65 1640.41 Q2432.64 1643.07 2436.09 1643.07 Q2439.49 1643.07 2441.48 1640.39 Q2443.47 1637.7 2443.47 1633.07 Q2443.47 1628.47 2441.48 1625.78 Q2439.49 1623.07 2436.09 1623.07 M2436.09 1619.46 Q2441.65 1619.46 2444.82 1623.07 Q2447.99 1626.68 2447.99 1633.07 Q2447.99 1639.44 2444.82 1643.07 Q2441.65 1646.68 2436.09 1646.68 Q2430.51 1646.68 2427.34 1643.07 Q2424.19 1639.44 2424.19 1633.07 Q2424.19 1626.68 2427.34 1623.07 Q2430.51 1619.46 2436.09 1619.46 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip100)" d="M2465.09 1623.07 Q2461.67 1623.07 2459.68 1625.76 Q2457.69 1628.42 2457.69 1633.07 Q2457.69 1637.73 2459.65 1640.41 Q2461.65 1643.07 2465.09 1643.07 Q2468.5 1643.07 2470.49 1640.39 Q2472.48 1637.7 2472.48 1633.07 Q2472.48 1628.47 2470.49 1625.78 Q2468.5 1623.07 2465.09 1623.07 M2465.09 1619.46 Q2470.65 1619.46 2473.82 1623.07 Q2476.99 1626.68 2476.99 1633.07 Q2476.99 1639.44 2473.82 1643.07 Q2470.65 1646.68 2465.09 1646.68 Q2459.52 1646.68 2456.34 1643.07 Q2453.2 1639.44 2453.2 1633.07 Q2453.2 1626.68 2456.34 1623.07 Q2459.52 1619.46 2465.09 1619.46 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>
<p>Filter rows that have missing bill lengths, because violin series can’t handle missing values. first let’s find the the rows we want to keep:</p>
<div id="8bee4ff1" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb6-1">keep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> .!<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ismissing</span>.(penguins.bill_length_mm)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>344-element BitVector:
 1
 1
 1
 0
 1
 1
 1
 1
 1
 1
 1
 1
 1
 ⋮
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1</code></pre>
</div>
</div>
<p>So now this data frame is violin safe…</p>
<div id="84bba18d" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb8-1">bill_lengths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> penguins[keep, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>species]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<div>
<div><div style="float: left;"><span>342×2 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">317 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">bill_length_mm</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: right;">39.1</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: right;">39.5</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: right;">40.3</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: right;">36.7</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: right;">39.3</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: right;">38.9</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: right;">39.2</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: right;">34.1</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: right;">42.0</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: right;">37.8</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: right;">37.8</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: right;">41.1</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: right;">38.6</td>
<td style="text-align: left;">Adelie</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">331</td>
<td style="text-align: right;">45.2</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">332</td>
<td style="text-align: right;">49.3</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">333</td>
<td style="text-align: right;">50.2</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">334</td>
<td style="text-align: right;">45.6</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">335</td>
<td style="text-align: right;">51.9</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">336</td>
<td style="text-align: right;">46.8</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">337</td>
<td style="text-align: right;">45.7</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">338</td>
<td style="text-align: right;">55.8</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">339</td>
<td style="text-align: right;">43.5</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">340</td>
<td style="text-align: right;">49.6</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">341</td>
<td style="text-align: right;">50.8</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">342</td>
<td style="text-align: right;">50.2</td>
<td style="text-align: left;">Chinstrap</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>So now we can create a violin plot</p>
<div id="21c1e359" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@df</span> bill_lengths <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb9-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">string</span>.(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>species),</span>
<span id="cb9-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm,</span>
<span id="cb9-4">    seriestype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>violin,</span>
<span id="cb9-5">    legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb9-6">    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>,</span>
<span id="cb9-7">    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Length (mm)"</span></span>
<span id="cb9-8">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="672" height="480" viewbox="0 0 2688 1920">
<defs>
  <clippath id="clip190">
    <rect x="0" y="0" width="2688" height="1920"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip190)" d="M0 1920 L2688 1920 L2688 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip191">
    <rect x="537" y="0" width="1883" height="1883"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip190)" d="M211.395 1734.12 L2640.76 1734.12 L2640.76 47.2441 L211.395 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip192">
    <rect x="211" y="47" width="2430" height="1688"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="607.558,1734.12 607.558,47.2441 "></polyline>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1426.08,1734.12 1426.08,47.2441 "></polyline>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="2244.59,1734.12 2244.59,47.2441 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="211.395,1734.12 2640.76,1734.12 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="607.558,1734.12 607.558,1715.22 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1426.08,1734.12 1426.08,1715.22 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2244.59,1734.12 2244.59,1715.22 "></polyline>
<path clip-path="url(#clip190)" d="M551.655 1768.87 L545.313 1786.07 L558.021 1786.07 L551.655 1768.87 M549.016 1764.26 L554.317 1764.26 L567.489 1798.82 L562.628 1798.82 L559.479 1789.96 L543.901 1789.96 L540.753 1798.82 L535.822 1798.82 L549.016 1764.26 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M588.576 1776.83 L588.576 1762.8 L592.836 1762.8 L592.836 1798.82 L588.576 1798.82 L588.576 1794.93 Q587.234 1797.25 585.174 1798.38 Q583.137 1799.49 580.266 1799.49 Q575.567 1799.49 572.604 1795.74 Q569.665 1791.99 569.665 1785.88 Q569.665 1779.77 572.604 1776.02 Q575.567 1772.27 580.266 1772.27 Q583.137 1772.27 585.174 1773.4 Q587.234 1774.52 588.576 1776.83 M574.063 1785.88 Q574.063 1790.58 575.984 1793.27 Q577.928 1795.93 581.308 1795.93 Q584.688 1795.93 586.632 1793.27 Q588.576 1790.58 588.576 1785.88 Q588.576 1781.18 586.632 1778.52 Q584.688 1775.83 581.308 1775.83 Q577.928 1775.83 575.984 1778.52 Q574.063 1781.18 574.063 1785.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M623.785 1784.79 L623.785 1786.88 L604.201 1786.88 Q604.479 1791.27 606.84 1793.59 Q609.225 1795.88 613.461 1795.88 Q615.914 1795.88 618.206 1795.28 Q620.521 1794.68 622.789 1793.47 L622.789 1797.5 Q620.498 1798.47 618.09 1798.98 Q615.683 1799.49 613.206 1799.49 Q607.002 1799.49 603.368 1795.88 Q599.757 1792.27 599.757 1786.11 Q599.757 1779.75 603.183 1776.02 Q606.632 1772.27 612.465 1772.27 Q617.697 1772.27 620.729 1775.65 Q623.785 1779.01 623.785 1784.79 M619.525 1783.54 Q619.479 1780.05 617.558 1777.96 Q615.66 1775.88 612.512 1775.88 Q608.947 1775.88 606.794 1777.9 Q604.664 1779.91 604.34 1783.57 L619.525 1783.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M630.775 1762.8 L635.035 1762.8 L635.035 1798.82 L630.775 1798.82 L630.775 1762.8 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M643.947 1772.9 L648.206 1772.9 L648.206 1798.82 L643.947 1798.82 L643.947 1772.9 M643.947 1762.8 L648.206 1762.8 L648.206 1768.2 L643.947 1768.2 L643.947 1762.8 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M679.294 1784.79 L679.294 1786.88 L659.71 1786.88 Q659.988 1791.27 662.349 1793.59 Q664.733 1795.88 668.97 1795.88 Q671.423 1795.88 673.715 1795.28 Q676.03 1794.68 678.298 1793.47 L678.298 1797.5 Q676.007 1798.47 673.599 1798.98 Q671.192 1799.49 668.715 1799.49 Q662.511 1799.49 658.877 1795.88 Q655.266 1792.27 655.266 1786.11 Q655.266 1779.75 658.692 1776.02 Q662.141 1772.27 667.974 1772.27 Q673.206 1772.27 676.238 1775.65 Q679.294 1779.01 679.294 1784.79 M675.034 1783.54 Q674.988 1780.05 673.067 1777.96 Q671.169 1775.88 668.02 1775.88 Q664.456 1775.88 662.303 1777.9 Q660.173 1779.91 659.849 1783.57 L675.034 1783.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1342.43 1766.92 L1342.43 1771.85 Q1340.07 1769.65 1337.38 1768.57 Q1334.72 1767.48 1331.71 1767.48 Q1325.79 1767.48 1322.64 1771.11 Q1319.49 1774.72 1319.49 1781.58 Q1319.49 1788.4 1322.64 1792.04 Q1325.79 1795.65 1331.71 1795.65 Q1334.72 1795.65 1337.38 1794.56 Q1340.07 1793.47 1342.43 1791.27 L1342.43 1796.16 Q1339.98 1797.83 1337.22 1798.66 Q1334.49 1799.49 1331.43 1799.49 Q1323.59 1799.49 1319.07 1794.7 Q1314.56 1789.89 1314.56 1781.58 Q1314.56 1773.24 1319.07 1768.45 Q1323.59 1763.64 1331.43 1763.64 Q1334.54 1763.64 1337.27 1764.47 Q1340.02 1765.28 1342.43 1766.92 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1371.02 1783.17 L1371.02 1798.82 L1366.76 1798.82 L1366.76 1783.31 Q1366.76 1779.63 1365.32 1777.8 Q1363.89 1775.97 1361.02 1775.97 Q1357.57 1775.97 1355.58 1778.17 Q1353.59 1780.37 1353.59 1784.17 L1353.59 1798.82 L1349.31 1798.82 L1349.31 1762.8 L1353.59 1762.8 L1353.59 1776.92 Q1355.12 1774.59 1357.18 1773.43 Q1359.26 1772.27 1361.97 1772.27 Q1366.43 1772.27 1368.73 1775.05 Q1371.02 1777.8 1371.02 1783.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1379.51 1772.9 L1383.77 1772.9 L1383.77 1798.82 L1379.51 1798.82 L1379.51 1772.9 M1379.51 1762.8 L1383.77 1762.8 L1383.77 1768.2 L1379.51 1768.2 L1379.51 1762.8 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1414.24 1783.17 L1414.24 1798.82 L1409.98 1798.82 L1409.98 1783.31 Q1409.98 1779.63 1408.54 1777.8 Q1407.11 1775.97 1404.24 1775.97 Q1400.79 1775.97 1398.8 1778.17 Q1396.8 1780.37 1396.8 1784.17 L1396.8 1798.82 L1392.52 1798.82 L1392.52 1772.9 L1396.8 1772.9 L1396.8 1776.92 Q1398.33 1774.59 1400.39 1773.43 Q1402.48 1772.27 1405.18 1772.27 Q1409.65 1772.27 1411.94 1775.05 Q1414.24 1777.8 1414.24 1783.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1439.26 1773.66 L1439.26 1777.69 Q1437.45 1776.76 1435.51 1776.3 Q1433.56 1775.83 1431.48 1775.83 Q1428.31 1775.83 1426.71 1776.81 Q1425.14 1777.78 1425.14 1779.72 Q1425.14 1781.21 1426.27 1782.06 Q1427.41 1782.9 1430.83 1783.66 L1432.29 1783.98 Q1436.83 1784.96 1438.73 1786.74 Q1440.65 1788.5 1440.65 1791.67 Q1440.65 1795.28 1437.78 1797.39 Q1434.93 1799.49 1429.93 1799.49 Q1427.85 1799.49 1425.58 1799.08 Q1423.33 1798.68 1420.83 1797.87 L1420.83 1793.47 Q1423.19 1794.7 1425.49 1795.33 Q1427.78 1795.93 1430.02 1795.93 Q1433.03 1795.93 1434.65 1794.91 Q1436.27 1793.87 1436.27 1791.99 Q1436.27 1790.26 1435.09 1789.33 Q1433.93 1788.4 1429.98 1787.55 L1428.49 1787.2 Q1424.54 1786.37 1422.78 1784.65 Q1421.02 1782.92 1421.02 1779.91 Q1421.02 1776.25 1423.61 1774.26 Q1426.2 1772.27 1430.97 1772.27 Q1433.33 1772.27 1435.42 1772.62 Q1437.5 1772.96 1439.26 1773.66 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1451.64 1765.53 L1451.64 1772.9 L1460.42 1772.9 L1460.42 1776.21 L1451.64 1776.21 L1451.64 1790.28 Q1451.64 1793.45 1452.5 1794.35 Q1453.38 1795.26 1456.04 1795.26 L1460.42 1795.26 L1460.42 1798.82 L1456.04 1798.82 Q1451.11 1798.82 1449.24 1796.99 Q1447.36 1795.14 1447.36 1790.28 L1447.36 1776.21 L1444.24 1776.21 L1444.24 1772.9 L1447.36 1772.9 L1447.36 1765.53 L1451.64 1765.53 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1481.04 1776.88 Q1480.32 1776.46 1479.47 1776.27 Q1478.63 1776.07 1477.61 1776.07 Q1474 1776.07 1472.06 1778.43 Q1470.14 1780.77 1470.14 1785.16 L1470.14 1798.82 L1465.86 1798.82 L1465.86 1772.9 L1470.14 1772.9 L1470.14 1776.92 Q1471.48 1774.56 1473.63 1773.43 Q1475.79 1772.27 1478.86 1772.27 Q1479.3 1772.27 1479.84 1772.34 Q1480.37 1772.39 1481.02 1772.5 L1481.04 1776.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1497.29 1785.79 Q1492.13 1785.79 1490.14 1786.97 Q1488.15 1788.15 1488.15 1791 Q1488.15 1793.27 1489.63 1794.61 Q1491.13 1795.93 1493.7 1795.93 Q1497.24 1795.93 1499.37 1793.43 Q1501.53 1790.9 1501.53 1786.74 L1501.53 1785.79 L1497.29 1785.79 M1505.79 1784.03 L1505.79 1798.82 L1501.53 1798.82 L1501.53 1794.89 Q1500.07 1797.25 1497.89 1798.38 Q1495.72 1799.49 1492.57 1799.49 Q1488.59 1799.49 1486.23 1797.27 Q1483.89 1795.02 1483.89 1791.27 Q1483.89 1786.9 1486.8 1784.68 Q1489.74 1782.46 1495.55 1782.46 L1501.53 1782.46 L1501.53 1782.04 Q1501.53 1779.1 1499.58 1777.5 Q1497.66 1775.88 1494.17 1775.88 Q1491.94 1775.88 1489.84 1776.41 Q1487.73 1776.95 1485.79 1778.01 L1485.79 1774.08 Q1488.12 1773.17 1490.32 1772.73 Q1492.52 1772.27 1494.61 1772.27 Q1500.23 1772.27 1503.01 1775.19 Q1505.79 1778.1 1505.79 1784.03 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1518.68 1794.93 L1518.68 1808.68 L1514.4 1808.68 L1514.4 1772.9 L1518.68 1772.9 L1518.68 1776.83 Q1520.02 1774.52 1522.06 1773.4 Q1524.12 1772.27 1526.97 1772.27 Q1531.69 1772.27 1534.63 1776.02 Q1537.59 1779.77 1537.59 1785.88 Q1537.59 1791.99 1534.63 1795.74 Q1531.69 1799.49 1526.97 1799.49 Q1524.12 1799.49 1522.06 1798.38 Q1520.02 1797.25 1518.68 1794.93 M1533.17 1785.88 Q1533.17 1781.18 1531.23 1778.52 Q1529.3 1775.83 1525.92 1775.83 Q1522.54 1775.83 1520.6 1778.52 Q1518.68 1781.18 1518.68 1785.88 Q1518.68 1790.58 1520.6 1793.27 Q1522.54 1795.93 1525.92 1795.93 Q1529.3 1795.93 1531.23 1793.27 Q1533.17 1790.58 1533.17 1785.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M2186.5 1793.89 L2186.5 1784.61 L2178.86 1784.61 L2178.86 1780.77 L2191.13 1780.77 L2191.13 1795.6 Q2188.42 1797.52 2185.16 1798.52 Q2181.9 1799.49 2178.19 1799.49 Q2170.09 1799.49 2165.51 1794.77 Q2160.95 1790.02 2160.95 1781.58 Q2160.95 1773.1 2165.51 1768.38 Q2170.09 1763.64 2178.19 1763.64 Q2181.57 1763.64 2184.61 1764.47 Q2187.66 1765.3 2190.23 1766.92 L2190.23 1771.9 Q2187.64 1769.7 2184.72 1768.59 Q2181.8 1767.48 2178.59 1767.48 Q2172.24 1767.48 2169.05 1771.02 Q2165.88 1774.56 2165.88 1781.58 Q2165.88 1788.57 2169.05 1792.11 Q2172.24 1795.65 2178.59 1795.65 Q2181.06 1795.65 2183.01 1795.23 Q2184.95 1794.79 2186.5 1793.89 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M2221.67 1784.79 L2221.67 1786.88 L2202.08 1786.88 Q2202.36 1791.27 2204.72 1793.59 Q2207.11 1795.88 2211.34 1795.88 Q2213.79 1795.88 2216.09 1795.28 Q2218.4 1794.68 2220.67 1793.47 L2220.67 1797.5 Q2218.38 1798.47 2215.97 1798.98 Q2213.56 1799.49 2211.09 1799.49 Q2204.88 1799.49 2201.25 1795.88 Q2197.64 1792.27 2197.64 1786.11 Q2197.64 1779.75 2201.06 1776.02 Q2204.51 1772.27 2210.35 1772.27 Q2215.58 1772.27 2218.61 1775.65 Q2221.67 1779.01 2221.67 1784.79 M2217.41 1783.54 Q2217.36 1780.05 2215.44 1777.96 Q2213.54 1775.88 2210.39 1775.88 Q2206.83 1775.88 2204.67 1777.9 Q2202.54 1779.91 2202.22 1783.57 L2217.41 1783.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M2250.21 1783.17 L2250.21 1798.82 L2245.95 1798.82 L2245.95 1783.31 Q2245.95 1779.63 2244.51 1777.8 Q2243.08 1775.97 2240.21 1775.97 Q2236.76 1775.97 2234.77 1778.17 Q2232.78 1780.37 2232.78 1784.17 L2232.78 1798.82 L2228.49 1798.82 L2228.49 1772.9 L2232.78 1772.9 L2232.78 1776.92 Q2234.3 1774.59 2236.36 1773.43 Q2238.45 1772.27 2241.16 1772.27 Q2245.62 1772.27 2247.92 1775.05 Q2250.21 1777.8 2250.21 1783.17 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M2262.91 1765.53 L2262.91 1772.9 L2271.69 1772.9 L2271.69 1776.21 L2262.91 1776.21 L2262.91 1790.28 Q2262.91 1793.45 2263.77 1794.35 Q2264.65 1795.26 2267.31 1795.26 L2271.69 1795.26 L2271.69 1798.82 L2267.31 1798.82 Q2262.38 1798.82 2260.51 1796.99 Q2258.63 1795.14 2258.63 1790.28 L2258.63 1776.21 L2255.51 1776.21 L2255.51 1772.9 L2258.63 1772.9 L2258.63 1765.53 L2262.91 1765.53 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M2287.34 1775.88 Q2283.91 1775.88 2281.92 1778.57 Q2279.93 1781.23 2279.93 1785.88 Q2279.93 1790.53 2281.9 1793.22 Q2283.89 1795.88 2287.34 1795.88 Q2290.74 1795.88 2292.73 1793.2 Q2294.72 1790.51 2294.72 1785.88 Q2294.72 1781.27 2292.73 1778.59 Q2290.74 1775.88 2287.34 1775.88 M2287.34 1772.27 Q2292.89 1772.27 2296.06 1775.88 Q2299.23 1779.49 2299.23 1785.88 Q2299.23 1792.25 2296.06 1795.88 Q2292.89 1799.49 2287.34 1799.49 Q2281.76 1799.49 2278.59 1795.88 Q2275.44 1792.25 2275.44 1785.88 Q2275.44 1779.49 2278.59 1775.88 Q2281.76 1772.27 2287.34 1772.27 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M2316.34 1775.88 Q2312.91 1775.88 2310.92 1778.57 Q2308.93 1781.23 2308.93 1785.88 Q2308.93 1790.53 2310.9 1793.22 Q2312.89 1795.88 2316.34 1795.88 Q2319.74 1795.88 2321.73 1793.2 Q2323.72 1790.51 2323.72 1785.88 Q2323.72 1781.27 2321.73 1778.59 Q2319.74 1775.88 2316.34 1775.88 M2316.34 1772.27 Q2321.9 1772.27 2325.07 1775.88 Q2328.24 1779.49 2328.24 1785.88 Q2328.24 1792.25 2325.07 1795.88 Q2321.9 1799.49 2316.34 1799.49 Q2310.76 1799.49 2307.59 1795.88 Q2304.44 1792.25 2304.44 1785.88 Q2304.44 1779.49 2307.59 1775.88 Q2310.76 1772.27 2316.34 1772.27 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1334.97 1837.34 L1334.97 1843.61 Q1331.31 1841.86 1328.06 1841 Q1324.81 1840.14 1321.79 1840.14 Q1316.54 1840.14 1313.67 1842.18 Q1310.84 1844.22 1310.84 1847.97 Q1310.84 1851.12 1312.72 1852.75 Q1314.63 1854.34 1319.91 1855.32 L1323.79 1856.12 Q1330.99 1857.49 1334.39 1860.96 Q1337.83 1864.39 1337.83 1870.19 Q1337.83 1877.09 1333.18 1880.66 Q1328.57 1884.22 1319.63 1884.22 Q1316.25 1884.22 1312.43 1883.46 Q1308.64 1882.7 1304.57 1881.2 L1304.57 1874.58 Q1308.49 1876.78 1312.24 1877.89 Q1316 1879 1319.63 1879 Q1325.13 1879 1328.12 1876.84 Q1331.12 1874.68 1331.12 1870.67 Q1331.12 1867.16 1328.95 1865.19 Q1326.82 1863.22 1321.92 1862.23 L1318 1861.47 Q1310.81 1860.03 1307.59 1856.98 Q1304.38 1853.92 1304.38 1848.48 Q1304.38 1842.18 1308.8 1838.55 Q1313.26 1834.92 1321.06 1834.92 Q1324.4 1834.92 1327.87 1835.53 Q1331.34 1836.13 1334.97 1837.34 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1353.27 1877.95 L1353.27 1896.86 L1347.38 1896.86 L1347.38 1847.65 L1353.27 1847.65 L1353.27 1853.06 Q1355.11 1849.88 1357.91 1848.35 Q1360.75 1846.79 1364.66 1846.79 Q1371.16 1846.79 1375.2 1851.95 Q1379.27 1857.11 1379.27 1865.51 Q1379.27 1873.91 1375.2 1879.07 Q1371.16 1884.22 1364.66 1884.22 Q1360.75 1884.22 1357.91 1882.7 Q1355.11 1881.14 1353.27 1877.95 M1373.19 1865.51 Q1373.19 1859.05 1370.52 1855.39 Q1367.88 1851.7 1363.23 1851.7 Q1358.58 1851.7 1355.91 1855.39 Q1353.27 1859.05 1353.27 1865.51 Q1353.27 1871.97 1355.91 1875.66 Q1358.58 1879.32 1363.23 1879.32 Q1367.88 1879.32 1370.52 1875.66 Q1373.19 1871.97 1373.19 1865.51 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1419.47 1864.01 L1419.47 1866.88 L1392.54 1866.88 Q1392.93 1872.92 1396.17 1876.11 Q1399.45 1879.26 1405.28 1879.26 Q1408.65 1879.26 1411.8 1878.43 Q1414.98 1877.6 1418.1 1875.95 L1418.1 1881.49 Q1414.95 1882.82 1411.64 1883.52 Q1408.33 1884.22 1404.93 1884.22 Q1396.4 1884.22 1391.4 1879.26 Q1386.43 1874.29 1386.43 1865.83 Q1386.43 1857.07 1391.14 1851.95 Q1395.89 1846.79 1403.91 1846.79 Q1411.1 1846.79 1415.27 1851.44 Q1419.47 1856.06 1419.47 1864.01 M1413.61 1862.29 Q1413.55 1857.49 1410.91 1854.62 Q1408.3 1851.76 1403.97 1851.76 Q1399.07 1851.76 1396.11 1854.53 Q1393.18 1857.3 1392.74 1862.33 L1413.61 1862.29 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1454.74 1849.02 L1454.74 1854.5 Q1452.25 1853.13 1449.74 1852.46 Q1447.26 1851.76 1444.71 1851.76 Q1439.01 1851.76 1435.86 1855.39 Q1432.71 1858.98 1432.71 1865.51 Q1432.71 1872.03 1435.86 1875.66 Q1439.01 1879.26 1444.71 1879.26 Q1447.26 1879.26 1449.74 1878.59 Q1452.25 1877.89 1454.74 1876.52 L1454.74 1881.93 Q1452.29 1883.08 1449.64 1883.65 Q1447.03 1884.22 1444.07 1884.22 Q1436.02 1884.22 1431.28 1879.16 Q1426.54 1874.1 1426.54 1865.51 Q1426.54 1856.79 1431.31 1851.79 Q1436.12 1846.79 1444.46 1846.79 Q1447.16 1846.79 1449.74 1847.37 Q1452.32 1847.91 1454.74 1849.02 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1464.92 1847.65 L1470.78 1847.65 L1470.78 1883.3 L1464.92 1883.3 L1464.92 1847.65 M1464.92 1833.78 L1470.78 1833.78 L1470.78 1841.19 L1464.92 1841.19 L1464.92 1833.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1513.52 1864.01 L1513.52 1866.88 L1486.6 1866.88 Q1486.98 1872.92 1490.23 1876.11 Q1493.5 1879.26 1499.33 1879.26 Q1502.7 1879.26 1505.85 1878.43 Q1509.04 1877.6 1512.16 1875.95 L1512.16 1881.49 Q1509 1882.82 1505.69 1883.52 Q1502.38 1884.22 1498.98 1884.22 Q1490.45 1884.22 1485.45 1879.26 Q1480.49 1874.29 1480.49 1865.83 Q1480.49 1857.07 1485.2 1851.95 Q1489.94 1846.79 1497.96 1846.79 Q1505.15 1846.79 1509.32 1851.44 Q1513.52 1856.06 1513.52 1864.01 M1507.67 1862.29 Q1507.6 1857.49 1504.96 1854.62 Q1502.35 1851.76 1498.02 1851.76 Q1493.12 1851.76 1490.16 1854.53 Q1487.23 1857.3 1486.79 1862.33 L1507.67 1862.29 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M1545.86 1848.7 L1545.86 1854.24 Q1543.38 1852.97 1540.71 1852.33 Q1538.03 1851.7 1535.17 1851.7 Q1530.81 1851.7 1528.61 1853.03 Q1526.45 1854.37 1526.45 1857.04 Q1526.45 1859.08 1528.01 1860.26 Q1529.57 1861.4 1534.28 1862.45 L1536.28 1862.9 Q1542.52 1864.24 1545.13 1866.69 Q1547.77 1869.11 1547.77 1873.47 Q1547.77 1878.43 1543.83 1881.33 Q1539.91 1884.22 1533.04 1884.22 Q1530.17 1884.22 1527.05 1883.65 Q1523.96 1883.11 1520.53 1882 L1520.53 1875.95 Q1523.77 1877.64 1526.92 1878.49 Q1530.08 1879.32 1533.16 1879.32 Q1537.3 1879.32 1539.53 1877.92 Q1541.76 1876.49 1541.76 1873.91 Q1541.76 1871.52 1540.13 1870.25 Q1538.54 1868.98 1533.1 1867.8 L1531.06 1867.32 Q1525.62 1866.18 1523.2 1863.82 Q1520.78 1861.43 1520.78 1857.3 Q1520.78 1852.27 1524.35 1849.53 Q1527.91 1846.79 1534.47 1846.79 Q1537.71 1846.79 1540.58 1847.27 Q1543.44 1847.75 1545.86 1848.7 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="211.395,1520.78 2640.76,1520.78 "></polyline>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="211.395,1229.8 2640.76,1229.8 "></polyline>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="211.395,938.825 2640.76,938.825 "></polyline>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="211.395,647.848 2640.76,647.848 "></polyline>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="211.395,356.871 2640.76,356.871 "></polyline>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="211.395,65.8943 2640.76,65.8943 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="211.395,1734.12 211.395,47.2441 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="211.395,1520.78 230.293,1520.78 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="211.395,1229.8 230.293,1229.8 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="211.395,938.825 230.293,938.825 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="211.395,647.848 230.293,647.848 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="211.395,356.871 230.293,356.871 "></polyline>
<polyline clip-path="url(#clip190)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="211.395,65.8943 230.293,65.8943 "></polyline>
<path clip-path="url(#clip190)" d="M134.131 1519.42 Q137.487 1520.14 139.362 1522.41 Q141.261 1524.68 141.261 1528.01 Q141.261 1533.13 137.742 1535.93 Q134.224 1538.73 127.742 1538.73 Q125.566 1538.73 123.251 1538.29 Q120.96 1537.87 118.506 1537.02 L118.506 1532.5 Q120.451 1533.64 122.765 1534.22 Q125.08 1534.79 127.603 1534.79 Q132.001 1534.79 134.293 1533.06 Q136.608 1531.32 136.608 1528.01 Q136.608 1524.96 134.455 1523.24 Q132.325 1521.51 128.506 1521.51 L124.478 1521.51 L124.478 1517.67 L128.691 1517.67 Q132.14 1517.67 133.969 1516.3 Q135.798 1514.91 135.798 1512.32 Q135.798 1509.66 133.9 1508.24 Q132.025 1506.81 128.506 1506.81 Q126.585 1506.81 124.386 1507.23 Q122.187 1507.64 119.548 1508.52 L119.548 1504.36 Q122.21 1503.61 124.525 1503.24 Q126.863 1502.87 128.923 1502.87 Q134.247 1502.87 137.349 1505.3 Q140.45 1507.71 140.45 1511.83 Q140.45 1514.7 138.807 1516.69 Q137.163 1518.66 134.131 1519.42 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M150.173 1503.5 L168.529 1503.5 L168.529 1507.43 L154.455 1507.43 L154.455 1515.91 Q155.473 1515.56 156.492 1515.4 Q157.511 1515.21 158.529 1515.21 Q164.316 1515.21 167.696 1518.38 Q171.075 1521.55 171.075 1526.97 Q171.075 1532.55 167.603 1535.65 Q164.131 1538.73 157.811 1538.73 Q155.636 1538.73 153.367 1538.36 Q151.122 1537.99 148.714 1537.25 L148.714 1532.55 Q150.798 1533.68 153.02 1534.24 Q155.242 1534.79 157.719 1534.79 Q161.723 1534.79 164.061 1532.69 Q166.399 1530.58 166.399 1526.97 Q166.399 1523.36 164.061 1521.25 Q161.723 1519.15 157.719 1519.15 Q155.844 1519.15 153.969 1519.56 Q152.117 1519.98 150.173 1520.86 L150.173 1503.5 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M131.816 1216.6 L120.011 1235.04 L131.816 1235.04 L131.816 1216.6 M130.589 1212.52 L136.469 1212.52 L136.469 1235.04 L141.399 1235.04 L141.399 1238.93 L136.469 1238.93 L136.469 1247.08 L131.816 1247.08 L131.816 1238.93 L116.214 1238.93 L116.214 1234.42 L130.589 1212.52 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M159.131 1215.6 Q155.52 1215.6 153.691 1219.17 Q151.886 1222.71 151.886 1229.84 Q151.886 1236.94 153.691 1240.51 Q155.52 1244.05 159.131 1244.05 Q162.765 1244.05 164.571 1240.51 Q166.399 1236.94 166.399 1229.84 Q166.399 1222.71 164.571 1219.17 Q162.765 1215.6 159.131 1215.6 M159.131 1211.9 Q164.941 1211.9 167.997 1216.5 Q171.075 1221.09 171.075 1229.84 Q171.075 1238.56 167.997 1243.17 Q164.941 1247.75 159.131 1247.75 Q153.321 1247.75 150.242 1243.17 Q147.186 1238.56 147.186 1229.84 Q147.186 1221.09 150.242 1216.5 Q153.321 1211.9 159.131 1211.9 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M132.812 925.619 L121.006 944.068 L132.812 944.068 L132.812 925.619 M131.585 921.545 L137.464 921.545 L137.464 944.068 L142.395 944.068 L142.395 947.957 L137.464 947.957 L137.464 956.105 L132.812 956.105 L132.812 947.957 L117.21 947.957 L117.21 943.443 L131.585 921.545 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M150.173 921.545 L168.529 921.545 L168.529 925.48 L154.455 925.48 L154.455 933.952 Q155.473 933.605 156.492 933.443 Q157.511 933.258 158.529 933.258 Q164.316 933.258 167.696 936.429 Q171.075 939.6 171.075 945.017 Q171.075 950.596 167.603 953.698 Q164.131 956.776 157.811 956.776 Q155.636 956.776 153.367 956.406 Q151.122 956.036 148.714 955.295 L148.714 950.596 Q150.798 951.73 153.02 952.286 Q155.242 952.841 157.719 952.841 Q161.723 952.841 164.061 950.735 Q166.399 948.628 166.399 945.017 Q166.399 941.406 164.061 939.3 Q161.723 937.193 157.719 937.193 Q155.844 937.193 153.969 937.61 Q152.117 938.026 150.173 938.906 L150.173 921.545 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M119.015 630.568 L137.372 630.568 L137.372 634.503 L123.298 634.503 L123.298 642.975 Q124.316 642.628 125.335 642.466 Q126.353 642.281 127.372 642.281 Q133.159 642.281 136.538 645.452 Q139.918 648.624 139.918 654.04 Q139.918 659.619 136.446 662.721 Q132.974 665.799 126.654 665.799 Q124.478 665.799 122.21 665.429 Q119.964 665.059 117.557 664.318 L117.557 659.619 Q119.64 660.753 121.863 661.309 Q124.085 661.864 126.562 661.864 Q130.566 661.864 132.904 659.758 Q135.242 657.651 135.242 654.04 Q135.242 650.429 132.904 648.323 Q130.566 646.216 126.562 646.216 Q124.687 646.216 122.812 646.633 Q120.96 647.049 119.015 647.929 L119.015 630.568 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M159.131 633.647 Q155.52 633.647 153.691 637.212 Q151.886 640.753 151.886 647.883 Q151.886 654.989 153.691 658.554 Q155.52 662.096 159.131 662.096 Q162.765 662.096 164.571 658.554 Q166.399 654.989 166.399 647.883 Q166.399 640.753 164.571 637.212 Q162.765 633.647 159.131 633.647 M159.131 629.943 Q164.941 629.943 167.997 634.55 Q171.075 639.133 171.075 647.883 Q171.075 656.61 167.997 661.216 Q164.941 665.799 159.131 665.799 Q153.321 665.799 150.242 661.216 Q147.186 656.61 147.186 647.883 Q147.186 639.133 150.242 634.55 Q153.321 629.943 159.131 629.943 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M120.011 339.591 L138.367 339.591 L138.367 343.526 L124.293 343.526 L124.293 351.999 Q125.312 351.651 126.33 351.489 Q127.349 351.304 128.367 351.304 Q134.154 351.304 137.534 354.475 Q140.913 357.647 140.913 363.063 Q140.913 368.642 137.441 371.744 Q133.969 374.823 127.65 374.823 Q125.474 374.823 123.205 374.452 Q120.96 374.082 118.552 373.341 L118.552 368.642 Q120.636 369.776 122.858 370.332 Q125.08 370.887 127.557 370.887 Q131.562 370.887 133.9 368.781 Q136.237 366.674 136.237 363.063 Q136.237 359.452 133.9 357.346 Q131.562 355.239 127.557 355.239 Q125.682 355.239 123.807 355.656 Q121.955 356.073 120.011 356.952 L120.011 339.591 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M150.173 339.591 L168.529 339.591 L168.529 343.526 L154.455 343.526 L154.455 351.999 Q155.473 351.651 156.492 351.489 Q157.511 351.304 158.529 351.304 Q164.316 351.304 167.696 354.475 Q171.075 357.647 171.075 363.063 Q171.075 368.642 167.603 371.744 Q164.131 374.823 157.811 374.823 Q155.636 374.823 153.367 374.452 Q151.122 374.082 148.714 373.341 L148.714 368.642 Q150.798 369.776 153.02 370.332 Q155.242 370.887 157.719 370.887 Q161.723 370.887 164.061 368.781 Q166.399 366.674 166.399 363.063 Q166.399 359.452 164.061 357.346 Q161.723 355.239 157.719 355.239 Q155.844 355.239 153.969 355.656 Q152.117 356.073 150.173 356.952 L150.173 339.591 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M129.548 64.0309 Q126.4 64.0309 124.548 66.1837 Q122.719 68.3365 122.719 72.0864 Q122.719 75.8133 124.548 77.9892 Q126.4 80.1419 129.548 80.1419 Q132.696 80.1419 134.525 77.9892 Q136.376 75.8133 136.376 72.0864 Q136.376 68.3365 134.525 66.1837 Q132.696 64.0309 129.548 64.0309 M138.83 49.3782 L138.83 53.6375 Q137.071 52.8041 135.265 52.3643 Q133.483 51.9245 131.724 51.9245 Q127.094 51.9245 124.64 55.0495 Q122.21 58.1745 121.863 64.4939 Q123.228 62.48 125.288 61.4152 Q127.349 60.3272 129.825 60.3272 Q135.034 60.3272 138.043 63.4985 Q141.075 66.6466 141.075 72.0864 Q141.075 77.4105 137.927 80.6281 Q134.779 83.8456 129.548 83.8456 Q123.552 83.8456 120.381 79.2623 Q117.21 74.6559 117.21 65.9291 Q117.21 57.7347 121.099 52.8736 Q124.988 47.9893 131.538 47.9893 Q133.298 47.9893 135.08 48.3366 Q136.886 48.6838 138.83 49.3782 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M159.131 51.693 Q155.52 51.693 153.691 55.2578 Q151.886 58.7995 151.886 65.9291 Q151.886 73.0355 153.691 76.6003 Q155.52 80.1419 159.131 80.1419 Q162.765 80.1419 164.571 76.6003 Q166.399 73.0355 166.399 65.9291 Q166.399 58.7995 164.571 55.2578 Q162.765 51.693 159.131 51.693 M159.131 47.9893 Q164.941 47.9893 167.997 52.5958 Q171.075 57.1791 171.075 65.9291 Q171.075 74.6559 167.997 79.2623 Q164.941 83.8456 159.131 83.8456 Q153.321 83.8456 150.242 79.2623 Q147.186 74.6559 147.186 65.9291 Q147.186 57.1791 150.242 52.5958 Q153.321 47.9893 159.131 47.9893 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M38.9447 1149.84 L56.3549 1149.84 L56.3549 1139.53 Q56.3549 1134.34 54.2224 1131.86 Q52.0581 1129.35 47.6339 1129.35 Q43.1779 1129.35 41.0772 1131.86 Q38.9447 1134.34 38.9447 1139.53 L38.9447 1149.84 M19.402 1149.84 L33.7248 1149.84 L33.7248 1140.33 Q33.7248 1135.62 31.9743 1133.33 Q30.1919 1131 26.5634 1131 Q22.9668 1131 21.1844 1133.33 Q19.402 1135.62 19.402 1140.33 L19.402 1149.84 M14.1184 1156.27 L14.1184 1139.85 Q14.1184 1132.5 17.174 1128.52 Q20.2295 1124.54 25.8632 1124.54 Q30.2237 1124.54 32.8018 1126.58 Q35.3799 1128.61 36.0165 1132.56 Q37.035 1127.82 40.2815 1125.21 Q43.4962 1122.57 48.3341 1122.57 Q54.6998 1122.57 58.1691 1126.9 Q61.6384 1131.22 61.6384 1139.21 L61.6384 1156.27 L14.1184 1156.27 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M25.9905 1111.81 L25.9905 1105.95 L61.6384 1105.95 L61.6384 1111.81 L25.9905 1111.81 M12.1132 1111.81 L12.1132 1105.95 L19.5293 1105.95 L19.5293 1111.81 L12.1132 1111.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M12.1132 1093.7 L12.1132 1087.84 L61.6384 1087.84 L61.6384 1093.7 L12.1132 1093.7 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M12.1132 1075.59 L12.1132 1069.73 L61.6384 1069.73 L61.6384 1075.59 L12.1132 1075.59 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M14.1184 1036.5 L14.1184 1030.07 L56.2276 1030.07 L56.2276 1006.93 L61.6384 1006.93 L61.6384 1036.5 L14.1184 1036.5 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M42.3504 971.095 L45.2149 971.095 L45.2149 998.022 Q51.2623 997.64 54.4452 994.394 Q57.5962 991.115 57.5962 985.291 Q57.5962 981.917 56.7687 978.766 Q55.9411 975.583 54.2861 972.464 L59.8242 972.464 Q61.161 975.615 61.8612 978.925 Q62.5615 982.235 62.5615 985.641 Q62.5615 994.171 57.5962 999.168 Q52.631 1004.13 44.1646 1004.13 Q35.4117 1004.13 30.2873 999.423 Q25.1311 994.68 25.1311 986.659 Q25.1311 979.466 29.7781 975.297 Q34.3932 971.095 42.3504 971.095 M40.6316 976.952 Q35.8255 977.015 32.9609 979.657 Q30.0964 982.267 30.0964 986.596 Q30.0964 991.497 32.8654 994.457 Q35.6345 997.386 40.6634 997.831 L40.6316 976.952 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M40.1224 931.851 L61.6384 931.851 L61.6384 937.707 L40.3133 937.707 Q35.2526 937.707 32.7381 939.681 Q30.2237 941.654 30.2237 945.601 Q30.2237 950.343 33.2474 953.08 Q36.2711 955.818 41.491 955.818 L61.6384 955.818 L61.6384 961.706 L25.9905 961.706 L25.9905 955.818 L31.5287 955.818 Q28.314 953.717 26.7225 950.884 Q25.1311 948.02 25.1311 944.296 Q25.1311 938.153 28.9505 935.002 Q32.7381 931.851 40.1224 931.851 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M43.4007 896.712 Q37.035 896.712 33.5338 899.354 Q30.0327 901.964 30.0327 906.706 Q30.0327 911.417 33.5338 914.059 Q37.035 916.669 43.4007 916.669 Q49.7346 916.669 53.2357 914.059 Q56.7368 911.417 56.7368 906.706 Q56.7368 901.964 53.2357 899.354 Q49.7346 896.712 43.4007 896.712 M57.2143 890.856 Q66.3172 890.856 70.7414 894.898 Q75.1974 898.94 75.1974 907.279 Q75.1974 910.366 74.72 913.104 Q74.2744 915.841 73.3195 918.419 L67.6222 918.419 Q69.0227 915.841 69.6911 913.327 Q70.3595 910.812 70.3595 908.202 Q70.3595 902.441 67.3358 899.577 Q64.3439 896.712 58.2646 896.712 L55.3682 896.712 Q58.5192 898.526 60.0788 901.359 Q61.6384 904.192 61.6384 908.138 Q61.6384 914.695 56.6414 918.706 Q51.6443 922.716 43.4007 922.716 Q35.1253 922.716 30.1282 918.706 Q25.1311 914.695 25.1311 908.138 Q25.1311 904.192 26.6907 901.359 Q28.2503 898.526 31.4013 896.712 L25.9905 896.712 L25.9905 890.856 L57.2143 890.856 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M15.869 873 L25.9905 873 L25.9905 860.937 L30.542 860.937 L30.542 873 L49.8937 873 Q54.2542 873 55.4955 871.822 Q56.7368 870.613 56.7368 866.952 L56.7368 860.937 L61.6384 860.937 L61.6384 866.952 Q61.6384 873.732 59.124 876.31 Q56.5777 878.888 49.8937 878.888 L30.542 878.888 L30.542 883.185 L25.9905 883.185 L25.9905 878.888 L15.869 878.888 L15.869 873 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M40.1224 823.602 L61.6384 823.602 L61.6384 829.458 L40.3133 829.458 Q35.2526 829.458 32.7381 831.432 Q30.2237 833.405 30.2237 837.352 Q30.2237 842.094 33.2474 844.832 Q36.2711 847.569 41.491 847.569 L61.6384 847.569 L61.6384 853.457 L12.1132 853.457 L12.1132 847.569 L31.5287 847.569 Q28.314 845.468 26.7225 842.635 Q25.1311 839.771 25.1311 836.047 Q25.1311 829.904 28.9505 826.753 Q32.7381 823.602 40.1224 823.602 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M12.1769 777.132 Q19.4975 781.397 26.6589 783.466 Q33.8203 785.535 41.1727 785.535 Q48.5251 785.535 55.7502 783.466 Q62.9434 781.365 70.2321 777.132 L70.2321 782.225 Q62.7524 786.999 55.5274 789.386 Q48.3023 791.742 41.1727 791.742 Q34.0749 791.742 26.8817 789.386 Q19.6884 787.031 12.1769 782.225 L12.1769 777.132 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M32.8336 738.015 Q28.8869 735.819 27.009 732.763 Q25.1311 729.708 25.1311 725.57 Q25.1311 720 29.046 716.976 Q32.9291 713.953 40.1224 713.953 L61.6384 713.953 L61.6384 719.841 L40.3133 719.841 Q35.1889 719.841 32.7063 721.655 Q30.2237 723.469 30.2237 727.193 Q30.2237 731.745 33.2474 734.387 Q36.2711 737.028 41.491 737.028 L61.6384 737.028 L61.6384 742.917 L40.3133 742.917 Q35.1571 742.917 32.7063 744.731 Q30.2237 746.545 30.2237 750.333 Q30.2237 754.82 33.2792 757.462 Q36.3029 760.104 41.491 760.104 L61.6384 760.104 L61.6384 765.992 L25.9905 765.992 L25.9905 760.104 L31.5287 760.104 Q28.2503 758.099 26.6907 755.298 Q25.1311 752.497 25.1311 748.646 Q25.1311 744.763 27.1045 742.057 Q29.0779 739.32 32.8336 738.015 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M32.8336 674.517 Q28.8869 672.321 27.009 669.265 Q25.1311 666.21 25.1311 662.072 Q25.1311 656.502 29.046 653.478 Q32.9291 650.455 40.1224 650.455 L61.6384 650.455 L61.6384 656.343 L40.3133 656.343 Q35.1889 656.343 32.7063 658.157 Q30.2237 659.971 30.2237 663.695 Q30.2237 668.247 33.2474 670.889 Q36.2711 673.53 41.491 673.53 L61.6384 673.53 L61.6384 679.419 L40.3133 679.419 Q35.1571 679.419 32.7063 681.233 Q30.2237 683.047 30.2237 686.835 Q30.2237 691.323 33.2792 693.964 Q36.3029 696.606 41.491 696.606 L61.6384 696.606 L61.6384 702.494 L25.9905 702.494 L25.9905 696.606 L31.5287 696.606 Q28.2503 694.601 26.6907 691.8 Q25.1311 688.999 25.1311 685.148 Q25.1311 681.265 27.1045 678.559 Q29.0779 675.822 32.8336 674.517 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip190)" d="M12.1769 639.697 L12.1769 634.604 Q19.6884 629.83 26.8817 627.474 Q34.0749 625.087 41.1727 625.087 Q48.3023 625.087 55.5274 627.474 Q62.7524 629.83 70.2321 634.604 L70.2321 639.697 Q62.9434 635.463 55.7502 633.395 Q48.5251 631.294 41.1727 631.294 Q33.8203 631.294 26.6589 633.395 Q19.4975 635.463 12.1769 639.697 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip192)" d="M636.999 1686.38 L640.358 1678.73 L644.013 1671.09 L647.978 1663.44 L652.266 1655.8 L656.89 1648.16 L661.859 1640.51 L667.182 1632.87 L672.864 1625.23 L678.905 1617.58 L685.306 1609.94 L692.06 1602.3 L699.159 1594.65 L706.589 1587.01 L714.334 1579.37 L722.371 1571.72 L730.676 1564.08 L739.218 1556.43 L747.966 1548.79 L756.882 1541.15 L765.929 1533.5 L775.065 1525.86 L784.248 1518.22 L793.435 1510.57 L802.581 1502.93 L811.645 1495.29 L820.584 1487.64 L829.356 1480 L837.925 1472.36 L846.252 1464.71 L854.306 1457.07 L862.057 1449.42 L869.478 1441.78 L876.545 1434.14 L883.241 1426.49 L889.549 1418.85 L895.456 1411.21 L900.953 1403.56 L906.034 1395.92 L910.696 1388.28 L914.937 1380.63 L918.759 1372.99 L922.163 1365.35 L925.155 1357.7 L927.738 1350.06 L929.919 1342.41 L931.703 1334.77 L933.096 1327.13 L934.101 1319.48 L934.723 1311.84 L934.965 1304.2 L934.827 1296.55 L934.308 1288.91 L933.406 1281.27 L932.118 1273.62 L930.436 1265.98 L928.353 1258.33 L925.862 1250.69 L922.952 1243.05 L919.616 1235.4 L915.843 1227.76 L911.625 1220.12 L906.958 1212.47 L901.838 1204.83 L896.263 1197.19 L890.239 1189.54 L883.772 1181.9 L876.876 1174.26 L869.569 1166.61 L861.874 1158.97 L853.818 1151.32 L845.437 1143.68 L836.768 1136.04 L827.853 1128.39 L818.74 1120.75 L809.476 1113.11 L800.114 1105.46 L790.705 1097.82 L781.302 1090.18 L771.958 1082.53 L762.723 1074.89 L753.645 1067.25 L744.769 1059.6 L736.137 1051.96 L727.787 1044.31 L719.751 1036.67 L712.056 1029.03 L704.724 1021.38 L697.772 1013.74 L691.212 1006.1 L685.048 998.453 L679.283 990.81 L673.911 983.166 L668.925 975.523 L664.312 967.879 L660.055 960.235 L656.136 952.592 L652.534 944.948 L649.225 937.305 L646.185 929.661 L643.391 922.018 L640.818 914.374 L638.442 906.73 L636.242 899.087 L634.195 891.443 L632.284 883.8 L582.831 883.8 L580.92 891.443 L578.874 899.087 L576.673 906.73 L574.298 914.374 L571.724 922.018 L568.93 929.661 L565.891 937.305 L562.582 944.948 L558.98 952.592 L555.061 960.235 L550.804 967.879 L546.19 975.523 L541.204 983.166 L535.833 990.81 L530.067 998.453 L523.904 1006.1 L517.344 1013.74 L510.392 1021.38 L503.06 1029.03 L495.365 1036.67 L487.329 1044.31 L478.978 1051.96 L470.347 1059.6 L461.471 1067.25 L452.393 1074.89 L443.158 1082.53 L433.813 1090.18 L424.411 1097.82 L415.002 1105.46 L405.639 1113.11 L396.376 1120.75 L387.262 1128.39 L378.348 1136.04 L369.679 1143.68 L361.297 1151.32 L353.242 1158.97 L345.547 1166.61 L338.239 1174.26 L331.344 1181.9 L324.877 1189.54 L318.852 1197.19 L313.278 1204.83 L308.157 1212.47 L303.49 1220.12 L299.273 1227.76 L295.5 1235.4 L292.163 1243.05 L289.254 1250.69 L286.762 1258.33 L284.68 1265.98 L282.998 1273.62 L281.709 1281.27 L280.808 1288.91 L280.289 1296.55 L280.151 1304.2 L280.392 1311.84 L281.015 1319.48 L282.02 1327.13 L283.412 1334.77 L285.196 1342.41 L287.377 1350.06 L289.961 1357.7 L292.953 1365.35 L296.357 1372.99 L300.179 1380.63 L304.42 1388.28 L309.081 1395.92 L314.163 1403.56 L319.66 1411.21 L325.567 1418.85 L331.875 1426.49 L338.57 1434.14 L345.638 1441.78 L353.059 1449.42 L360.809 1457.07 L368.864 1464.71 L377.191 1472.36 L385.759 1480 L394.532 1487.64 L403.47 1495.29 L412.534 1502.93 L421.681 1510.57 L430.868 1518.22 L440.051 1525.86 L449.187 1533.5 L458.234 1541.15 L467.15 1548.79 L475.898 1556.43 L484.44 1564.08 L492.745 1571.72 L500.782 1579.37 L508.527 1587.01 L515.957 1594.65 L523.056 1602.3 L529.81 1609.94 L536.211 1617.58 L542.252 1625.23 L547.933 1632.87 L553.256 1640.51 L558.226 1648.16 L562.85 1655.8 L567.138 1663.44 L571.103 1671.09 L574.758 1678.73 L578.117 1686.38 L636.999 1686.38  Z" fill="#009af9" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="636.999,1686.38 640.358,1678.73 644.013,1671.09 647.978,1663.44 652.266,1655.8 656.89,1648.16 661.859,1640.51 667.182,1632.87 672.864,1625.23 678.905,1617.58 685.306,1609.94 692.06,1602.3 699.159,1594.65 706.589,1587.01 714.334,1579.37 722.371,1571.72 730.676,1564.08 739.218,1556.43 747.966,1548.79 756.882,1541.15 765.929,1533.5 775.065,1525.86 784.248,1518.22 793.435,1510.57 802.581,1502.93 811.645,1495.29 820.584,1487.64 829.356,1480 837.925,1472.36 846.252,1464.71 854.306,1457.07 862.057,1449.42 869.478,1441.78 876.545,1434.14 883.241,1426.49 889.549,1418.85 895.456,1411.21 900.953,1403.56 906.034,1395.92 910.696,1388.28 914.937,1380.63 918.759,1372.99 922.163,1365.35 925.155,1357.7 927.738,1350.06 929.919,1342.41 931.703,1334.77 933.096,1327.13 934.101,1319.48 934.723,1311.84 934.965,1304.2 934.827,1296.55 934.308,1288.91 933.406,1281.27 932.118,1273.62 930.436,1265.98 928.353,1258.33 925.862,1250.69 922.952,1243.05 919.616,1235.4 915.843,1227.76 911.625,1220.12 906.958,1212.47 901.838,1204.83 896.263,1197.19 890.239,1189.54 883.772,1181.9 876.876,1174.26 869.569,1166.61 861.874,1158.97 853.818,1151.32 845.437,1143.68 836.768,1136.04 827.853,1128.39 818.74,1120.75 809.476,1113.11 800.114,1105.46 790.705,1097.82 781.302,1090.18 771.958,1082.53 762.723,1074.89 753.645,1067.25 744.769,1059.6 736.137,1051.96 727.787,1044.31 719.751,1036.67 712.056,1029.03 704.724,1021.38 697.772,1013.74 691.212,1006.1 685.048,998.453 679.283,990.81 673.911,983.166 668.925,975.523 664.312,967.879 660.055,960.235 656.136,952.592 652.534,944.948 649.225,937.305 646.185,929.661 643.391,922.018 640.818,914.374 638.442,906.73 636.242,899.087 634.195,891.443 632.284,883.8 582.831,883.8 580.92,891.443 578.874,899.087 576.673,906.73 574.298,914.374 571.724,922.018 568.93,929.661 565.891,937.305 562.582,944.948 558.98,952.592 555.061,960.235 550.804,967.879 546.19,975.523 541.204,983.166 535.833,990.81 530.067,998.453 523.904,1006.1 517.344,1013.74 510.392,1021.38 503.06,1029.03 495.365,1036.67 487.329,1044.31 478.978,1051.96 470.347,1059.6 461.471,1067.25 452.393,1074.89 443.158,1082.53 433.813,1090.18 424.411,1097.82 415.002,1105.46 405.639,1113.11 396.376,1120.75 387.262,1128.39 378.348,1136.04 369.679,1143.68 361.297,1151.32 353.242,1158.97 345.547,1166.61 338.239,1174.26 331.344,1181.9 324.877,1189.54 318.852,1197.19 313.278,1204.83 308.157,1212.47 303.49,1220.12 299.273,1227.76 295.5,1235.4 292.163,1243.05 289.254,1250.69 286.762,1258.33 284.68,1265.98 282.998,1273.62 281.709,1281.27 280.808,1288.91 280.289,1296.55 280.151,1304.2 280.392,1311.84 281.015,1319.48 282.02,1327.13 283.412,1334.77 285.196,1342.41 287.377,1350.06 289.961,1357.7 292.953,1365.35 296.357,1372.99 300.179,1380.63 304.42,1388.28 309.081,1395.92 314.163,1403.56 319.66,1411.21 325.567,1418.85 331.875,1426.49 338.57,1434.14 345.638,1441.78 353.059,1449.42 360.809,1457.07 368.864,1464.71 377.191,1472.36 385.759,1480 394.532,1487.64 403.47,1495.29 412.534,1502.93 421.681,1510.57 430.868,1518.22 440.051,1525.86 449.187,1533.5 458.234,1541.15 467.15,1548.79 475.898,1556.43 484.44,1564.08 492.745,1571.72 500.782,1579.37 508.527,1587.01 515.957,1594.65 523.056,1602.3 529.81,1609.94 536.211,1617.58 542.252,1625.23 547.933,1632.87 553.256,1640.51 558.226,1648.16 562.85,1655.8 567.138,1663.44 571.103,1671.09 574.758,1678.73 578.117,1686.38 636.999,1686.38 "></polyline>
<path clip-path="url(#clip192)" d="M1464.96 1173.17 L1468.2 1164.59 L1471.5 1156.01 L1474.84 1147.43 L1478.22 1138.85 L1481.62 1130.27 L1485.04 1121.69 L1488.48 1113.11 L1491.97 1104.54 L1495.51 1095.96 L1499.15 1087.38 L1502.9 1078.8 L1506.83 1070.22 L1510.97 1061.64 L1515.38 1053.06 L1520.11 1044.48 L1525.22 1035.9 L1530.74 1027.32 L1536.7 1018.74 L1543.14 1010.16 L1550.04 1001.58 L1557.4 993.003 L1565.18 984.424 L1573.32 975.844 L1581.75 967.265 L1590.35 958.685 L1599.03 950.106 L1607.65 941.527 L1616.08 932.947 L1624.18 924.368 L1631.83 915.789 L1638.89 907.209 L1645.26 898.63 L1650.87 890.05 L1655.65 881.471 L1659.58 872.892 L1662.66 864.312 L1664.93 855.733 L1666.47 847.154 L1667.38 838.574 L1667.77 829.995 L1667.8 821.415 L1667.63 812.836 L1667.42 804.257 L1667.34 795.677 L1667.56 787.098 L1668.22 778.518 L1669.44 769.939 L1671.32 761.36 L1673.95 752.78 L1677.34 744.201 L1681.5 735.622 L1686.39 727.042 L1691.94 718.463 L1698.05 709.883 L1704.57 701.304 L1711.37 692.725 L1718.25 684.145 L1725.02 675.566 L1731.49 666.986 L1737.46 658.407 L1742.73 649.828 L1747.12 641.248 L1750.47 632.669 L1752.63 624.09 L1753.48 615.51 L1752.95 606.931 L1750.97 598.351 L1747.52 589.772 L1742.6 581.193 L1736.27 572.613 L1728.58 564.034 L1719.63 555.455 L1709.55 546.875 L1698.47 538.296 L1686.55 529.716 L1673.94 521.137 L1660.83 512.558 L1647.37 503.978 L1633.73 495.399 L1620.08 486.819 L1606.56 478.24 L1593.3 469.661 L1580.43 461.081 L1568.05 452.502 L1556.25 443.923 L1545.08 435.343 L1534.59 426.764 L1524.83 418.184 L1515.8 409.605 L1507.51 401.026 L1499.94 392.446 L1493.08 383.867 L1486.89 375.287 L1481.34 366.708 L1476.4 358.129 L1472.01 349.549 L1468.13 340.97 L1464.71 332.391 L1461.71 323.811 L1459.09 315.232 L1456.81 306.652 L1454.81 298.073 L1453.07 289.494 L1451.56 280.914 L1450.23 272.335 L1449.06 263.755 L1448.02 255.176 L1447.08 246.597 L1446.23 238.017 L1445.44 229.438 L1444.69 220.859 L1443.98 212.279 L1443.27 203.7 L1442.57 195.12 L1441.85 186.541 L1410.3 186.541 L1409.59 195.12 L1408.88 203.7 L1408.18 212.279 L1407.46 220.859 L1406.71 229.438 L1405.92 238.017 L1405.07 246.597 L1404.14 255.176 L1403.1 263.755 L1401.92 272.335 L1400.6 280.914 L1399.08 289.494 L1397.34 298.073 L1395.35 306.652 L1393.06 315.232 L1390.44 323.811 L1387.44 332.391 L1384.03 340.97 L1380.15 349.549 L1375.75 358.129 L1370.81 366.708 L1365.26 375.287 L1359.08 383.867 L1352.21 392.446 L1344.65 401.026 L1336.35 409.605 L1327.32 418.184 L1317.56 426.764 L1307.08 435.343 L1295.91 443.923 L1284.1 452.502 L1271.72 461.081 L1258.85 469.661 L1245.59 478.24 L1232.07 486.819 L1218.42 495.399 L1204.78 503.978 L1191.32 512.558 L1178.21 521.137 L1165.6 529.716 L1153.68 538.296 L1142.6 546.875 L1132.52 555.455 L1123.57 564.034 L1115.88 572.613 L1109.55 581.193 L1104.64 589.772 L1101.18 598.351 L1099.2 606.931 L1098.67 615.51 L1099.53 624.09 L1101.69 632.669 L1105.03 641.248 L1109.42 649.828 L1114.69 658.407 L1120.66 666.986 L1127.13 675.566 L1133.9 684.145 L1140.78 692.725 L1147.58 701.304 L1154.11 709.883 L1160.21 718.463 L1165.76 727.042 L1170.66 735.622 L1174.81 744.201 L1178.21 752.78 L1180.83 761.36 L1182.71 769.939 L1183.94 778.518 L1184.59 787.098 L1184.81 795.677 L1184.73 804.257 L1184.53 812.836 L1184.35 821.415 L1184.38 829.995 L1184.78 838.574 L1185.68 847.154 L1187.22 855.733 L1189.49 864.312 L1192.57 872.892 L1196.5 881.471 L1201.28 890.05 L1206.89 898.63 L1213.26 907.209 L1220.32 915.789 L1227.97 924.368 L1236.07 932.947 L1244.5 941.527 L1253.12 950.106 L1261.8 958.685 L1270.4 967.265 L1278.83 975.844 L1286.97 984.424 L1294.75 993.003 L1302.11 1001.58 L1309.01 1010.16 L1315.45 1018.74 L1321.41 1027.32 L1326.93 1035.9 L1332.04 1044.48 L1336.77 1053.06 L1341.18 1061.64 L1345.32 1070.22 L1349.25 1078.8 L1353 1087.38 L1356.64 1095.96 L1360.18 1104.54 L1363.67 1113.11 L1367.11 1121.69 L1370.54 1130.27 L1373.93 1138.85 L1377.31 1147.43 L1380.65 1156.01 L1383.95 1164.59 L1387.19 1173.17 L1464.96 1173.17  Z" fill="#009af9" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1464.96,1173.17 1468.2,1164.59 1471.5,1156.01 1474.84,1147.43 1478.22,1138.85 1481.62,1130.27 1485.04,1121.69 1488.48,1113.11 1491.97,1104.54 1495.51,1095.96 1499.15,1087.38 1502.9,1078.8 1506.83,1070.22 1510.97,1061.64 1515.38,1053.06 1520.11,1044.48 1525.22,1035.9 1530.74,1027.32 1536.7,1018.74 1543.14,1010.16 1550.04,1001.58 1557.4,993.003 1565.18,984.424 1573.32,975.844 1581.75,967.265 1590.35,958.685 1599.03,950.106 1607.65,941.527 1616.08,932.947 1624.18,924.368 1631.83,915.789 1638.89,907.209 1645.26,898.63 1650.87,890.05 1655.65,881.471 1659.58,872.892 1662.66,864.312 1664.93,855.733 1666.47,847.154 1667.38,838.574 1667.77,829.995 1667.8,821.415 1667.63,812.836 1667.42,804.257 1667.34,795.677 1667.56,787.098 1668.22,778.518 1669.44,769.939 1671.32,761.36 1673.95,752.78 1677.34,744.201 1681.5,735.622 1686.39,727.042 1691.94,718.463 1698.05,709.883 1704.57,701.304 1711.37,692.725 1718.25,684.145 1725.02,675.566 1731.49,666.986 1737.46,658.407 1742.73,649.828 1747.12,641.248 1750.47,632.669 1752.63,624.09 1753.48,615.51 1752.95,606.931 1750.97,598.351 1747.52,589.772 1742.6,581.193 1736.27,572.613 1728.58,564.034 1719.63,555.455 1709.55,546.875 1698.47,538.296 1686.55,529.716 1673.94,521.137 1660.83,512.558 1647.37,503.978 1633.73,495.399 1620.08,486.819 1606.56,478.24 1593.3,469.661 1580.43,461.081 1568.05,452.502 1556.25,443.923 1545.08,435.343 1534.59,426.764 1524.83,418.184 1515.8,409.605 1507.51,401.026 1499.94,392.446 1493.08,383.867 1486.89,375.287 1481.34,366.708 1476.4,358.129 1472.01,349.549 1468.13,340.97 1464.71,332.391 1461.71,323.811 1459.09,315.232 1456.81,306.652 1454.81,298.073 1453.07,289.494 1451.56,280.914 1450.23,272.335 1449.06,263.755 1448.02,255.176 1447.08,246.597 1446.23,238.017 1445.44,229.438 1444.69,220.859 1443.98,212.279 1443.27,203.7 1442.57,195.12 1441.85,186.541 1410.3,186.541 1409.59,195.12 1408.88,203.7 1408.18,212.279 1407.46,220.859 1406.71,229.438 1405.92,238.017 1405.07,246.597 1404.14,255.176 1403.1,263.755 1401.92,272.335 1400.6,280.914 1399.08,289.494 1397.34,298.073 1395.35,306.652 1393.06,315.232 1390.44,323.811 1387.44,332.391 1384.03,340.97 1380.15,349.549 1375.75,358.129 1370.81,366.708 1365.26,375.287 1359.08,383.867 1352.21,392.446 1344.65,401.026 1336.35,409.605 1327.32,418.184 1317.56,426.764 1307.08,435.343 1295.91,443.923 1284.1,452.502 1271.72,461.081 1258.85,469.661 1245.59,478.24 1232.07,486.819 1218.42,495.399 1204.78,503.978 1191.32,512.558 1178.21,521.137 1165.6,529.716 1153.68,538.296 1142.6,546.875 1132.52,555.455 1123.57,564.034 1115.88,572.613 1109.55,581.193 1104.64,589.772 1101.18,598.351 1099.2,606.931 1098.67,615.51 1099.53,624.09 1101.69,632.669 1105.03,641.248 1109.42,649.828 1114.69,658.407 1120.66,666.986 1127.13,675.566 1133.9,684.145 1140.78,692.725 1147.58,701.304 1154.11,709.883 1160.21,718.463 1165.76,727.042 1170.66,735.622 1174.81,744.201 1178.21,752.78 1180.83,761.36 1182.71,769.939 1183.94,778.518 1184.59,787.098 1184.81,795.677 1184.73,804.257 1184.53,812.836 1184.35,821.415 1184.38,829.995 1184.78,838.574 1185.68,847.154 1187.22,855.733 1189.49,864.312 1192.57,872.892 1196.5,881.471 1201.28,890.05 1206.89,898.63 1213.26,907.209 1220.32,915.789 1227.97,924.368 1236.07,932.947 1244.5,941.527 1253.12,950.106 1261.8,958.685 1270.4,967.265 1278.83,975.844 1286.97,984.424 1294.75,993.003 1302.11,1001.58 1309.01,1010.16 1315.45,1018.74 1321.41,1027.32 1326.93,1035.9 1332.04,1044.48 1336.77,1053.06 1341.18,1061.64 1345.32,1070.22 1349.25,1078.8 1353,1087.38 1356.64,1095.96 1360.18,1104.54 1363.67,1113.11 1367.11,1121.69 1370.54,1130.27 1373.93,1138.85 1377.31,1147.43 1380.65,1156.01 1383.95,1164.59 1387.19,1173.17 1464.96,1173.17 "></polyline>
<path clip-path="url(#clip192)" d="M2292.21 1171.61 L2297.93 1162.57 L2304.07 1153.52 L2310.61 1144.47 L2317.56 1135.42 L2324.91 1126.38 L2332.64 1117.33 L2340.74 1108.28 L2349.2 1099.23 L2357.99 1090.19 L2367.1 1081.14 L2376.51 1072.09 L2386.19 1063.05 L2396.12 1054 L2406.27 1044.95 L2416.61 1035.9 L2427.09 1026.86 L2437.68 1017.81 L2448.33 1008.76 L2458.97 999.714 L2469.54 990.667 L2479.98 981.62 L2490.19 972.572 L2500.11 963.525 L2509.64 954.478 L2518.7 945.431 L2527.21 936.383 L2535.09 927.336 L2542.28 918.289 L2548.72 909.241 L2554.38 900.194 L2559.22 891.147 L2563.24 882.1 L2566.45 873.052 L2568.89 864.005 L2570.59 854.958 L2571.6 845.91 L2572 836.863 L2571.85 827.816 L2571.24 818.769 L2570.22 809.721 L2568.87 800.674 L2567.24 791.627 L2565.37 782.579 L2563.3 773.532 L2561.04 764.485 L2558.58 755.438 L2555.91 746.39 L2552.99 737.343 L2549.78 728.296 L2546.22 719.248 L2542.25 710.201 L2537.82 701.154 L2532.86 692.107 L2527.32 683.059 L2521.16 674.012 L2514.36 664.965 L2506.89 655.917 L2498.76 646.87 L2490 637.823 L2480.65 628.776 L2470.76 619.728 L2460.4 610.681 L2449.68 601.634 L2438.67 592.586 L2427.49 583.539 L2416.25 574.492 L2405.04 565.445 L2393.99 556.397 L2383.19 547.35 L2372.72 538.303 L2362.68 529.255 L2353.12 520.208 L2344.1 511.161 L2335.66 502.114 L2327.83 493.066 L2320.62 484.019 L2314.02 474.972 L2308.04 465.924 L2302.64 456.877 L2297.79 447.83 L2293.47 438.783 L2289.63 429.735 L2286.22 420.688 L2283.2 411.641 L2280.51 402.593 L2278.13 393.546 L2275.99 384.499 L2274.06 375.452 L2272.29 366.404 L2270.67 357.357 L2269.15 348.31 L2267.72 339.262 L2266.35 330.215 L2265.03 321.168 L2263.75 312.121 L2262.52 303.073 L2261.31 294.026 L2260.15 284.979 L2259.04 275.931 L2257.98 266.884 L2256.98 257.837 L2256.04 248.79 L2255.19 239.742 L2254.41 230.695 L2253.73 221.648 L2253.14 212.6 L2252.64 203.553 L2252.23 194.506 L2251.91 185.459 L2251.66 176.411 L2251.48 167.364 L2251.36 158.317 L2251.29 149.269 L2251.25 140.222 L2251.22 131.175 L2251.21 122.128 L2251.18 113.08 L2251.14 104.033 L2251.07 94.9858 L2238.12 94.9858 L2238.05 104.033 L2238.01 113.08 L2237.98 122.128 L2237.96 131.175 L2237.94 140.222 L2237.9 149.269 L2237.82 158.317 L2237.7 167.364 L2237.53 176.411 L2237.28 185.459 L2236.96 194.506 L2236.55 203.553 L2236.05 212.6 L2235.46 221.648 L2234.77 230.695 L2234 239.742 L2233.14 248.79 L2232.21 257.837 L2231.21 266.884 L2230.15 275.931 L2229.03 284.979 L2227.87 294.026 L2226.67 303.073 L2225.43 312.121 L2224.16 321.168 L2222.84 330.215 L2221.47 339.262 L2220.04 348.31 L2218.52 357.357 L2216.89 366.404 L2215.13 375.452 L2213.2 384.499 L2211.06 393.546 L2208.67 402.593 L2205.99 411.641 L2202.97 420.688 L2199.56 429.735 L2195.72 438.783 L2191.39 447.83 L2186.55 456.877 L2181.15 465.924 L2175.16 474.972 L2168.57 484.019 L2161.36 493.066 L2153.52 502.114 L2145.09 511.161 L2136.07 520.208 L2126.51 529.255 L2116.46 538.303 L2106 547.35 L2095.19 556.397 L2084.14 565.445 L2072.94 574.492 L2061.7 583.539 L2050.52 592.586 L2039.51 601.634 L2028.78 610.681 L2018.43 619.728 L2008.54 628.776 L1999.18 637.823 L1990.42 646.87 L1982.3 655.917 L1974.83 664.965 L1968.02 674.012 L1961.87 683.059 L1956.33 692.107 L1951.37 701.154 L1946.93 710.201 L1942.97 719.248 L1939.41 728.296 L1936.2 737.343 L1933.28 746.39 L1930.6 755.438 L1928.15 764.485 L1925.88 773.532 L1923.81 782.579 L1921.95 791.627 L1920.32 800.674 L1918.97 809.721 L1917.95 818.769 L1917.33 827.816 L1917.19 836.863 L1917.59 845.91 L1918.6 854.958 L1920.3 864.005 L1922.73 873.052 L1925.95 882.1 L1929.97 891.147 L1934.81 900.194 L1940.46 909.241 L1946.9 918.289 L1954.09 927.336 L1961.98 936.383 L1970.49 945.431 L1979.55 954.478 L1989.08 963.525 L1998.99 972.572 L2009.21 981.62 L2019.64 990.667 L2030.22 999.714 L2040.86 1008.76 L2051.5 1017.81 L2062.09 1026.86 L2072.58 1035.9 L2082.92 1044.95 L2093.07 1054 L2102.99 1063.05 L2112.68 1072.09 L2122.08 1081.14 L2131.2 1090.19 L2139.99 1099.23 L2148.45 1108.28 L2156.55 1117.33 L2164.28 1126.38 L2171.63 1135.42 L2178.58 1144.47 L2185.12 1153.52 L2191.26 1162.57 L2196.97 1171.61 L2292.21 1171.61  Z" fill="#009af9" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip192)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="2292.21,1171.61 2297.93,1162.57 2304.07,1153.52 2310.61,1144.47 2317.56,1135.42 2324.91,1126.38 2332.64,1117.33 2340.74,1108.28 2349.2,1099.23 2357.99,1090.19 2367.1,1081.14 2376.51,1072.09 2386.19,1063.05 2396.12,1054 2406.27,1044.95 2416.61,1035.9 2427.09,1026.86 2437.68,1017.81 2448.33,1008.76 2458.97,999.714 2469.54,990.667 2479.98,981.62 2490.19,972.572 2500.11,963.525 2509.64,954.478 2518.7,945.431 2527.21,936.383 2535.09,927.336 2542.28,918.289 2548.72,909.241 2554.38,900.194 2559.22,891.147 2563.24,882.1 2566.45,873.052 2568.89,864.005 2570.59,854.958 2571.6,845.91 2572,836.863 2571.85,827.816 2571.24,818.769 2570.22,809.721 2568.87,800.674 2567.24,791.627 2565.37,782.579 2563.3,773.532 2561.04,764.485 2558.58,755.438 2555.91,746.39 2552.99,737.343 2549.78,728.296 2546.22,719.248 2542.25,710.201 2537.82,701.154 2532.86,692.107 2527.32,683.059 2521.16,674.012 2514.36,664.965 2506.89,655.917 2498.76,646.87 2490,637.823 2480.65,628.776 2470.76,619.728 2460.4,610.681 2449.68,601.634 2438.67,592.586 2427.49,583.539 2416.25,574.492 2405.04,565.445 2393.99,556.397 2383.19,547.35 2372.72,538.303 2362.68,529.255 2353.12,520.208 2344.1,511.161 2335.66,502.114 2327.83,493.066 2320.62,484.019 2314.02,474.972 2308.04,465.924 2302.64,456.877 2297.79,447.83 2293.47,438.783 2289.63,429.735 2286.22,420.688 2283.2,411.641 2280.51,402.593 2278.13,393.546 2275.99,384.499 2274.06,375.452 2272.29,366.404 2270.67,357.357 2269.15,348.31 2267.72,339.262 2266.35,330.215 2265.03,321.168 2263.75,312.121 2262.52,303.073 2261.31,294.026 2260.15,284.979 2259.04,275.931 2257.98,266.884 2256.98,257.837 2256.04,248.79 2255.19,239.742 2254.41,230.695 2253.73,221.648 2253.14,212.6 2252.64,203.553 2252.23,194.506 2251.91,185.459 2251.66,176.411 2251.48,167.364 2251.36,158.317 2251.29,149.269 2251.25,140.222 2251.22,131.175 2251.21,122.128 2251.18,113.08 2251.14,104.033 2251.07,94.9858 2238.12,94.9858 2238.05,104.033 2238.01,113.08 2237.98,122.128 2237.96,131.175 2237.94,140.222 2237.9,149.269 2237.82,158.317 2237.7,167.364 2237.53,176.411 2237.28,185.459 2236.96,194.506 2236.55,203.553 2236.05,212.6 2235.46,221.648 2234.77,230.695 2234,239.742 2233.14,248.79 2232.21,257.837 2231.21,266.884 2230.15,275.931 2229.03,284.979 2227.87,294.026 2226.67,303.073 2225.43,312.121 2224.16,321.168 2222.84,330.215 2221.47,339.262 2220.04,348.31 2218.52,357.357 2216.89,366.404 2215.13,375.452 2213.2,384.499 2211.06,393.546 2208.67,402.593 2205.99,411.641 2202.97,420.688 2199.56,429.735 2195.72,438.783 2191.39,447.83 2186.55,456.877 2181.15,465.924 2175.16,474.972 2168.57,484.019 2161.36,493.066 2153.52,502.114 2145.09,511.161 2136.07,520.208 2126.51,529.255 2116.46,538.303 2106,547.35 2095.19,556.397 2084.14,565.445 2072.94,574.492 2061.7,583.539 2050.52,592.586 2039.51,601.634 2028.78,610.681 2018.43,619.728 2008.54,628.776 1999.18,637.823 1990.42,646.87 1982.3,655.917 1974.83,664.965 1968.02,674.012 1961.87,683.059 1956.33,692.107 1951.37,701.154 1946.93,710.201 1942.97,719.248 1939.41,728.296 1936.2,737.343 1933.28,746.39 1930.6,755.438 1928.15,764.485 1925.88,773.532 1923.81,782.579 1921.95,791.627 1920.32,800.674 1918.97,809.721 1917.95,818.769 1917.33,827.816 1917.19,836.863 1917.59,845.91 1918.6,854.958 1920.3,864.005 1922.73,873.052 1925.95,882.1 1929.97,891.147 1934.81,900.194 1940.46,909.241 1946.9,918.289 1954.09,927.336 1961.98,936.383 1970.49,945.431 1979.55,954.478 1989.08,963.525 1998.99,972.572 2009.21,981.62 2019.64,990.667 2030.22,999.714 2040.86,1008.76 2051.5,1017.81 2062.09,1026.86 2072.58,1035.9 2082.92,1044.95 2093.07,1054 2102.99,1063.05 2112.68,1072.09 2122.08,1081.14 2131.2,1090.19 2139.99,1099.23 2148.45,1108.28 2156.55,1117.33 2164.28,1126.38 2171.63,1135.42 2178.58,1144.47 2185.12,1153.52 2191.26,1162.57 2196.97,1171.61 2292.21,1171.61 "></polyline>
</svg>
</div>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Plotting Data in {Julia}},
  date = {2024-03-03},
  url = {https://blog.djnavarro.net/posts/2024-03-03_julia-plots},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Plotting Data in Julia.”</span> March 3,
2024. <a href="https://blog.djnavarro.net/posts/2024-03-03_julia-plots">https://blog.djnavarro.net/posts/2024-03-03_julia-plots</a>.
</div></div></section></div> ]]></description>
  <category>Julia</category>
  <category>Data Visualisation</category>
  <guid>https://blog.djnavarro.net/posts/2024-03-03_julia-plots/</guid>
  <pubDate>Sat, 02 Mar 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with data in Julia</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/</link>
  <description><![CDATA[ 





<!--------------- post begins here ----------------->

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/mass-effect-1.jpg" class="img-fluid figure-img" alt="Reimagined Mass Effect 1 cover showing the Normandy departing the Citadel"></p>
<figcaption><a href="https://www.deviantart.com/lagota/art/Mass-Effect-1-Final-Poster-295106207">Mass Effect 1</a>. By user <a href="https://www.deviantart.com/lagota">lagota</a> on Deviant Art, released under a CC-BY-NC-ND licence.</figcaption>
</figure>
</div>
</div></div><section id="data-frames-i" class="level2">
<h2 class="anchored" data-anchor-id="data-frames-i">Data frames I</h2>
<p>Unlike R, Julia doesn’t come with a native class to represent data frames. Instead, there is the DataFrames package which provides the functionality needed to represent tabular data. The <code>DataFrame()</code> function allows you to manually construct a data frame, with a syntax that feels very familiar to an R user. Vectors passed as inputs to <code>DataFrame()</code> must all have one element for every row in the data frame, or else be length one. So I could construct a small data frame listing the novels from William Gibson’s “Sprawl” trilogy like this:</p>
<div id="9c7952e3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">DataFrames</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">sprawl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DataFrame</span>(</span>
<span id="cb1-4">  title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Neuromancer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count Zero"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mona Lisa Overdrive"</span>],</span>
<span id="cb1-5">  published <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1984</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1986</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1988</span>], </span>
<span id="cb1-6">  author <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"William Gibson"</span></span>
<span id="cb1-7">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<div>
<div><div style="float: left;"><span>3×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">title</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">published</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">author</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String">String</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String">String</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Neuromancer</td>
<td style="text-align: right;">1984</td>
<td style="text-align: left;">William Gibson</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Count Zero</td>
<td style="text-align: right;">1986</td>
<td style="text-align: left;">William Gibson</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Mona Lisa Overdrive</td>
<td style="text-align: right;">1988</td>
<td style="text-align: left;">William Gibson</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Data frames have pretty print methods so the output looks quite nice here. But internally it’s essentially a collection of vectors, one for each column. For example, <code>sprawl.title</code> is a vector of three strings:</p>
<div id="7edb33c3" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1">sprawl.title</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>3-element Vector{String}:
 "Neuromancer"
 "Count Zero"
 "Mona Lisa Overdrive"</code></pre>
</div>
</div>
<p>In real life though, you don’t usually construct a data frame manually. It’s more typical to import a data frame from a CSV file or similar. To that end, we can take advantage of the CSV package to read data from a data file:</p>
<div id="8467ed35" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">CSV</span></span>
<span id="cb4-2">starwars_csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CSV.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">File</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"starwars.csv"</span>; missingstring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>);</span></code></pre></div>
</div>
<p>This <code>starwars_csv</code> object isn’t a data frame yet, it’s an object of type CSV.file. Data frames are <em>columnar</em> data structures (i.e., a collection of vectors, one per column), whereas a CSV.file is a <em>rowwise</em> data structure (i.e., a collection of CSV.row objects, one per row). We can see this by taking a look at the first element in the <code>starwars_csv</code> object:</p>
<div id="11731ac9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb5-1">starwars_csv[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>CSV.Row: (name = String31("Luke Skywalker"), height = 172, mass = 77.0, hair_color = String15("blond"), skin_color = String31("fair"), eye_color = String15("blue"), birth_year = 19.0, sex = String15("male"), gender = String15("masculine"), homeworld = String15("Tatooine"), species = String15("Human"))</code></pre>
</div>
</div>
<p>To convert this to a DataFrame object, we simply pass it to <code>DataFrame()</code>:</p>
<div id="2319d13d" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb7-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DataFrame</span>(starwars_csv)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<div>
<div><div style="float: left;"><span>87×11 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">62 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">eye_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">birth_year</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">167</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">gold</td>
<td style="text-align: left;">yellow</td>
<td style="text-align: right;">112.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: right;">96</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">white, blue</td>
<td style="text-align: left;">red</td>
<td style="text-align: right;">33.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Naboo</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">yellow</td>
<td style="text-align: right;">41.9</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: right;">150</td>
<td style="text-align: right;">49.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Alderaan</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">120.0</td>
<td style="text-align: left;">brown, grey</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">52.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Beru Whitesun Lars</td>
<td style="text-align: right;">165</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">47.0</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">R5-D4</td>
<td style="text-align: right;">97</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">white, red</td>
<td style="text-align: left;">red</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Biggs Darklighter</td>
<td style="text-align: right;">183</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
<td style="text-align: right;">24.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Obi-Wan Kenobi</td>
<td style="text-align: right;">182</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">auburn, white</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue-gray</td>
<td style="text-align: right;">57.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Stewjon</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Anakin Skywalker</td>
<td style="text-align: right;">188</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">41.9</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Wilhuff Tarkin</td>
<td style="text-align: right;">180</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">auburn, grey</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">64.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Eriadu</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Chewbacca</td>
<td style="text-align: right;">228</td>
<td style="text-align: right;">112.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">unknown</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">200.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Kashyyyk</td>
<td style="text-align: left;">Wookiee</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">76</td>
<td style="text-align: left;">San Hill</td>
<td style="text-align: right;">191</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">grey</td>
<td style="text-align: left;">gold</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Muunilinst</td>
<td style="text-align: left;">Muun</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">77</td>
<td style="text-align: left;">Shaak Ti</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">57.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">red, blue, white</td>
<td style="text-align: left;">black</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Shili</td>
<td style="text-align: left;">Togruta</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">78</td>
<td style="text-align: left;">Grievous</td>
<td style="text-align: right;">216</td>
<td style="text-align: right;">159.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">brown, white</td>
<td style="text-align: left;">green, yellow</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Kalee</td>
<td style="text-align: left;">Kaleesh</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">79</td>
<td style="text-align: left;">Tarfful</td>
<td style="text-align: right;">234</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Kashyyyk</td>
<td style="text-align: left;">Wookiee</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">80</td>
<td style="text-align: left;">Raymus Antilles</td>
<td style="text-align: right;">188</td>
<td style="text-align: right;">79.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Alderaan</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">81</td>
<td style="text-align: left;">Sly Moore</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">48.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">pale</td>
<td style="text-align: left;">white</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Umbara</td>
<td style="text-align: left; font-style: italic;">missing</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">82</td>
<td style="text-align: left;">Tion Medon</td>
<td style="text-align: right;">206</td>
<td style="text-align: right;">80.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">grey</td>
<td style="text-align: left;">black</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Utapau</td>
<td style="text-align: left;">Pau'an</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">83</td>
<td style="text-align: left;">Finn</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">dark</td>
<td style="text-align: left;">dark</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">84</td>
<td style="text-align: left;">Rey</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">hazel</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">85</td>
<td style="text-align: left;">Poe Dameron</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">86</td>
<td style="text-align: left;">BB8</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">black</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">87</td>
<td style="text-align: left;">Captain Phasma</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">unknown</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Human</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>The core tools for working with data frames in Julia feel quite familiar coming from either Matlab or R. You can subset a data frame by passing it numeric indices, for instance:</p>
<div id="5affcdaf" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb8-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<div>
<div><div style="float: left;"><span>6×5 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">167</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">gold</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: right;">96</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">white, blue</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">white</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: right;">150</td>
<td style="text-align: right;">49.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">120.0</td>
<td style="text-align: left;">brown, grey</td>
<td style="text-align: left;">light</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>However, there are other methods for subsetting a data frame. You can also filter the rows of a data frame using logical expressions. Again, this is quite similar to how it works in base R. For instance, I can construct a boolean vector <code>fair_skinned</code> which indicates whether the corresponding row in <code>starwars</code> refers to a person with fair skin:<sup>1</sup></p>
<div id="afbe58c7" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb9-1">fair_skinned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> starwars.skin_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fair"</span>;</span></code></pre></div>
</div>
<p>Now that I have these indices, I can create a subset of the data frame containing only those rows referring to fair skinned person (or robot, or…)</p>
<div id="69b75177" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb10-1">starwars[fair_skinned, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<div>
<div><div style="float: left;"><span>17×5 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Obi-Wan Kenobi</td>
<td style="text-align: right;">182</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">auburn, white</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Anakin Skywalker</td>
<td style="text-align: right;">188</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Wilhuff Tarkin</td>
<td style="text-align: right;">180</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">auburn, grey</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Han Solo</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">80.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Wedge Antilles</td>
<td style="text-align: right;">170</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Jek Tono Porkins</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">110.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">Boba Fett</td>
<td style="text-align: right;">183</td>
<td style="text-align: right;">78.2</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Mon Mothma</td>
<td style="text-align: right;">150</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">auburn</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Arvel Crynyd</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Qui-Gon Jinn</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">89.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Finis Valorum</td>
<td style="text-align: right;">170</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Ric Olié</td>
<td style="text-align: right;">183</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">14</td>
<td style="text-align: left;">Shmi Skywalker</td>
<td style="text-align: right;">163</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">15</td>
<td style="text-align: left;">Cliegg Lars</td>
<td style="text-align: right;">183</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">16</td>
<td style="text-align: left;">Dooku</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">80.0</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">17</td>
<td style="text-align: left;">Jocasta Nu</td>
<td style="text-align: right;">167</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">fair</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>On the columns side, we also have more flexible options for subsetting a data frame. For example, instead of referring to columns using numerical indices, we can select the variables that we want to keep using their names:</p>
<div id="bd3426d8" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb11-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>gender, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<div>
<div><div style="float: left;"><span>6×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Naboo</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Alderaan</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>This syntax is worth unpacking slightly, so I’ll digress slightly to talk about…</p>
</section>
<section id="symbols" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="symbols">Symbols</h2>
<p>Looking at the syntax in the last code cell, it’s fairly clear that <code>[:name, :gender, :homeworld]</code> is a vector of three… somethings, but it’s not immediately obvious what <code>:name</code> actually is. Much like R (and also inherited from Lisp) Julia has extensive <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/">Metaprogramming</a> capabilities because it has the ability to represent Julia code as data structures within the language itself. In the simplest case, we have <a href="https://docs.julialang.org/en/v1/base/base/#Core.Symbol">Symbols</a> like <code>:name</code>, which are constructed using the quotation operator <code>:</code> and used to represent object names. So as you can see, <code>:name</code> is an object of type Symbol:</p>
<div id="2ccd0a92" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>Symbol</code></pre>
</div>
</div>
<p>Symbols can be assigned to variables, and those variables can be used as part of expressions to be evaluated. In the code below I create a variable <code>colname</code> that stores the symbolic representation of a column name that I can invoke later:</p>
<div id="3b3006ec" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb14-1">colname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>title</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>:title</code></pre>
</div>
</div>
<p>As a simple example of how symbols can be used in practice, here’s a Julia implementation of something like the <code>pull()</code> function in the R package dplyr, which allows the user to extract a single column from a data frame:</p>
<div id="0b3c9ebc" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DataFrame</span>, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Symbol</span>)</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getproperty</span>(data, column)</span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span></code></pre></div>
</div>
<p>In this code I’m using the <code>getproperty()</code> function to do the same job that the <code>.</code> operator would do in an expression like <code>sprawl.title</code>. So here it is in action:</p>
<div id="8acd70b1" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(sprawl, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>title)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>3-element Vector{String}:
 "Neuromancer"
 "Count Zero"
 "Mona Lisa Overdrive"</code></pre>
</div>
</div>
<p>At the moment this <code>pull()</code> function isn’t very useful at all – <code>pull(sprawl, :title)</code> is really not an improvement on <code>sprawl.title</code> – but a little bit later when I get around to talking about pipes in Julia it will potentially more valuable.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/mass-effect-2.jpg" class="img-fluid figure-img" alt="Reimagined Mass Effect 2 cover showing the Normandy attacked by a Collector ship"></p>
<figcaption><a href="https://www.deviantart.com/lagota/art/Mass-Effect-2-Final-Poster-294884760">Mass Effect 2</a>. By user <a href="https://www.deviantart.com/lagota">lagota</a> on Deviant Art, released under a CC-BY-NC-ND licence.</figcaption>
</figure>
</div>
</div></div></section>
<section id="data-frames-ii" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-frames-ii">Data frames II</h2>
<p>Anyway, getting back on track, the key thing to realise is that when I wrote <code>[:name, :gender, :homeworld]</code> earlier what I was really doing is constructing a vector of symbols, and it’s those symbols that I was using to select the columns that I wanted to retain. The DataFrames package also supplies a various selector functions that can be used to extract a subset of the columns. For example, <code>Not()</code> will select every column except the ones that are passed to <code>Not()</code>. So if I want to drop the hair color, eye color, sex, and homeworld columns, I could do this:</p>
<div id="7230318a" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb19-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Not</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>hair_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>eye_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sex, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld])]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<div>
<div><div style="float: left;"><span>6×7 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">birth_year</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">fair</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">167</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left;">gold</td>
<td style="text-align: right;">112.0</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: right;">96</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left;">white, blue</td>
<td style="text-align: right;">33.0</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">white</td>
<td style="text-align: right;">41.9</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: right;">150</td>
<td style="text-align: right;">49.0</td>
<td style="text-align: left;">light</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">120.0</td>
<td style="text-align: left;">light</td>
<td style="text-align: right;">52.0</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Human</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>The <code>Between()</code> selector does what you’d think. It returns all columns in between two named columns:</p>
<div id="9ec69378" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb20-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Between</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sex, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<div>
<div><div style="float: left;"><span>6×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Naboo</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Alderaan</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>There’s also an <code>All()</code> selector that returns all columns, but that’s not super exciting. More interesting, I think, is the <code>Cols()</code> selector which takes a predicate function as input.<sup>2</sup> The column names are passed to the function, and they are included in the output if that function returns <code>true</code>. So, for example, if I want to extract the columns in the data whose name ends in <code>"color"</code> I can do this:</p>
<div id="d27f1a8e" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb21-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Cols</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">endswith</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>))]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<div>
<div><div style="float: left;"><span>6×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">eye_color</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">gold</td>
<td style="text-align: left;">yellow</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">white, blue</td>
<td style="text-align: left;">red</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">yellow</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">brown, grey</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">blue</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/mass-effect-3.jpg" class="img-fluid figure-img" alt="Reimagined Mass Effect 3 cover showing the Normandy facing a fleet fo reapers"></p>
<figcaption><a href="https://www.deviantart.com/lagota/art/Mass-Effect-3-Final-Poster-290367120">Mass Effect 3</a>. By user <a href="https://www.deviantart.com/lagota">lagota</a> on Deviant Art, released under a CC-BY-NC-ND licence.</figcaption>
</figure>
</div>
</div></div></section>
<section id="data-frames-iii" class="level2">
<h2 class="anchored" data-anchor-id="data-frames-iii">Data frames III</h2>
<div id="5c725f1c" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">combine</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">groupby</span>(starwars, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>gender), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> rand) </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<div>
<div><div style="float: left;"><span>3×2 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass_rand</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">110.0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div id="b45d4d32" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb23-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">groupby</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>gender) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">combine</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> rand)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<div>
<div><div style="float: left;"><span>3×2 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass_rand</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: right;">83.0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: right;">57.0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div id="bea16141" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb24-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>skin_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fair"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>17-element Vector{String31}:
 "Luke Skywalker"
 "Obi-Wan Kenobi"
 "Anakin Skywalker"
 "Wilhuff Tarkin"
 "Han Solo"
 "Wedge Antilles"
 "Jek Tono Porkins"
 "Boba Fett"
 "Mon Mothma"
 "Arvel Crynyd"
 "Qui-Gon Jinn"
 "Finis Valorum"
 "Ric Olié"
 "Shmi Skywalker"
 "Cliegg Lars"
 "Dooku"
 "Jocasta Nu"</code></pre>
</div>
</div>
</section>
<section id="image-credit" class="level2">
<h2 class="anchored" data-anchor-id="image-credit">Image credit</h2>
<p>All the lovely Mass Effect images in this post are from <a href="https://www.deviantart.com/lagota">lagota</a> on DeviantArt, and are released under a CC-BY-NC-ND licence.</p>
<!-- https://www.deviantart.com/lagota/art/The-illusive-man-306521415 -->
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/illusive-man.png" class="img-fluid"></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>As an aside, notice that I’ve used <code>.==</code> rather than <code>==</code> as the equality test. This is because <code>==</code> is a scalar operator: it doesn’t work for vectors unless you broadcast it using <code>.</code>↩︎</p></li>
<li id="fn2"><p>In this context, a predicate function is just one that returns <code>true</code> or <code>false</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Working with Data in {Julia}},
  date = {2024-03-02},
  url = {https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Working with Data in Julia.”</span>
March 2, 2024. <a href="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames">https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames</a>.
</div></div></section></div> ]]></description>
  <category>Julia</category>
  <category>Data Wrangling</category>
  <guid>https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/</guid>
  <pubDate>Fri, 01 Mar 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>A foundation in Julia</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/</link>
  <description><![CDATA[ 





<!--------------- post begins here ----------------->
<p>After many years of procrastination and telling myself I’ll get around to it later, I’ve finally decided that now is the time for me to start learning <a href="https://julialang.org/">Julia</a>. At this point in my life I am strong in R, passable in Javascript, and can survive in SQL, C++ and Python if I need them for something. But despite my interest-from-afar in Julia, I haven’t had much of an excuse to dive into it before.</p>
<p>Part of the appeal in Julia is that it’s designed to be a high-performance language for scientific computing. Like other scientific languages (e.g., R, Matlab, etc) it has 1-based indexing rather than 0-based indexing (Python, C++, etc). Julia code is automatically compiled giving you performance that is comparable to compiled languages like C++, without the hassle of actually having to deal with the compiler yourself. But we’ve all heard the sales pitch for Julia before, there’s no need for me to repeat it here, and anyway I kinda just want to dive into the code.</p>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation1.png" class="img-fluid"></p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>First things first. In order to get started I had to go through the process of <a href="https://julialang.org/downloads/">installing Julia</a>, which was pretty straightforward. Getting it to work within my quarto blog was a bit trickier, but there’s some fairly decent documentation on <a href="https://quarto.org/docs/computations/julia.html">Julia for Quarto</a> which got me there. After getting it set up it was as simple as including this line in the YAML header for this post,<sup>1</sup></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jupyter</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> julia-1.10</span></span></code></pre></div>
<p>and then creating executable Julia code cells by appending <code>{julia}</code> after the triple-fence used to define a block. So let’s see. Is Julia working in my quarto environment? I’ll start with my usual variant on the traditional “hello world” program using the <code>println()</code> (i.e., “print line”) function:</p>
<div id="4ee1867e" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello cruel world"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>hello cruel world</code></pre>
</div>
</div>
<p>Yes, that seems to be working, as – shockingly – is the ability to do some basic calculations using aritmetic <a href="https://docs.julialang.org/en/v1/manual/mathematical-operations/">operators</a> that seem pretty much the same as most languages I use:</p>
<div id="aac9958a" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>168</code></pre>
</div>
</div>
<p>I can define variables, using <code>=</code> as the assignment operator:</p>
<div id="cb78507e" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb6-1">hours <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>;</span>
<span id="cb6-2">days <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>;</span></code></pre></div>
</div>
<p>The semicolons here are optional: they’re used as end-of-line delimiters, but the main reason I’ve used them in the code chunk above is to suppress printing the return value of these assignments.</p>
<p>So yes, we are up and running.</p>
</section>
<section id="object-types" class="level2">
<h2 class="anchored" data-anchor-id="object-types">Object types</h2>
<p>Julia is a <a href="https://docs.julialang.org/en/v1/manual/types/">dynamically typed language</a>, so when I defined the <code>hours</code> variable earlier I was able to create an integer without explicitly defining it as such:</p>
<div id="76e4d3d7" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(hours)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Int64</code></pre>
</div>
</div>
<p>By default Julia creates a 64-bit integer, but – unlike R and more like C++ – there are several integer types. If I’d wanted to create a 128-bit integer to represent the number of minutes in an hour (but why????) I could have done so by declaring the type explicitly:</p>
<div id="29cfbb4c" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb9-1">minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int128 </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>;</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(minutes)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>Int128</code></pre>
</div>
</div>
<p>So while <code>minutes</code> and <code>hours</code> are both integers they are different types, and – as you would expect – are represented differently internally. In an extremely strict language, it would not be possible to multiple <code>minutes</code> by <code>hours</code> without first converting at least one of them to a different type, but thankfully Julia operators will automatically promote to common type and so I can calculate the number of minutes in one day without doing the tedious type conversions myself:</p>
<div id="37b3ff6b" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hours)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>Int128</code></pre>
</div>
</div>
<p>You can see the same mechanism in action when I try to calculate the number of minutes in 1.7 days. The <code>minutes</code> variable<sup>2</sup> is a 64-bit integer, the <code>hours</code> variable is a 128-bit integer, but the value of <code>1.7</code> is represented as a 64-bit floating point numbers. So when I compute <code>minutes * hours * 1.7</code>, the return value is a 64-bit float:</p>
<div id="c056cda5" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hours <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Float64</code></pre>
</div>
</div>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation2.png" class="img-fluid"></p>
</section>
<section id="vectors" class="level2">
<h2 class="anchored" data-anchor-id="vectors">Vectors</h2>
<p>I find myself liking the syntax Julia uses to create objects. You can create a vector using square brackets like this, which feels very much like Matlab to me:<sup>3</sup></p>
<div id="95dbb3e2" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb15-1">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cruel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>];</span></code></pre></div>
</div>
<p>The <code>words</code> variable I’ve just created is a vector of three strings:</p>
<div id="7432b756" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(words)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div class="ansi-escaped-output">
<pre>Vector{String}<span class="ansi-bright-black-fg"> (alias for </span><span class="ansi-bright-black-fg">Array{String, 1}</span><span class="ansi-bright-black-fg">)</span></pre>
</div>
</div>
</div>
<p>Subsetting uses square brackets too, and as I mentioned earlier indexing in Julia starts at 1:</p>
<div id="7baed7af" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb17-1">words[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>"hello"</code></pre>
</div>
</div>
<p>A couple of other things to note here. In Julia, you need to be more careful about single versus double quotes than you would be in R (where they are interchangeable). In Julia, single quotes are used to define a single character (e.g., <code>'h'</code> is a character), whereas double quotes are used to define a string (e.g.&nbsp;<code>"hello"</code> is a string). Strings are in fact a vector of characters, so <code>"hello"[1]</code> returns the character <code>'h'</code>. But whatevs. Let’s move along.</p>
</section>
<section id="tuples" class="level2">
<h2 class="anchored" data-anchor-id="tuples">Tuples</h2>
<p>I have no intention of diving too deeply into object types in Julia, but there are two more that I feel are worth mentioning at this point: tuples and dictionaries. Let’s start with tuples. A <a href="https://docs.julialang.org/en/v1/manual/functions/#Tuples">tuple</a> is simply an ordered collection of values, and are constructed using parentheses:<sup>4</sup></p>
<div id="6e8c3f38" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb19-1">fruit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>("apple", "banana", "cherry")</code></pre>
</div>
</div>
</section>
<section id="dictionaries" class="level2">
<h2 class="anchored" data-anchor-id="dictionaries">Dictionaries</h2>
<p>In contrast, a <a href="https://docs.julialang.org/en/v1/base/collections/#Dictionaries">dictionary</a><sup>5</sup> is a list of key-value pairs. There’s a few different ways to define a dictionary but I’m partial to this syntax:</p>
<div id="1e1527d6" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb21-1">danielle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Dict</span>(</span>
<span id="cb21-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"danielle"</span>,</span>
<span id="cb21-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>,</span>
<span id="cb21-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>,</span>
<span id="cb21-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boring"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb21-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Dict{String, Any} with 4 entries:
  "name"   =&gt; "danielle"
  "boring" =&gt; true
  "gender" =&gt; "female"
  "age"    =&gt; 47</code></pre>
</div>
</div>
<p>The entries in a dictionary can be indexed using the keys:</p>
<div id="c7c875b5" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb23-1">danielle[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>"female"</code></pre>
</div>
</div>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation3.png" class="img-fluid"></p>
</section>
<section id="functions" class="level2">
<h2 class="anchored" data-anchor-id="functions">Functions</h2>
<p>The syntax for defining functions in Julia comes in a couple of forms. The usual way to do it is using the <code>function</code> keyword, and I could define a simple <code>greet()</code> function like this:</p>
<div id="c7d722ea" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">greet</span>(name) </span>
<span id="cb25-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, nice to meet you"</span></span>
<span id="cb25-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span></code></pre></div>
</div>
<p>The <code>end</code> keyword is required here. Note also that I’ve taken advantage of Julia’s <a href="https://www.juliawiki.com/wiki/String_interpolation">string interpolation syntax</a> to substitute the value of <code>name</code> into the string that <code>greet()</code> outputs:</p>
<div id="9c1fb026" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">greet</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"danielle"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>"hello danielle, nice to meet you"</code></pre>
</div>
</div>
<p>You can also create functions using the anonymous function syntax (e.g., <code>x -&gt; "hello $x"</code> defines an anonymous function), which is handy in the functional programming context if you want to map a vector of values onto another vector using <code>map()</code>:</p>
<div id="ef9d826c" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"belle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chiara"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>3-element Vector{String}:
 "hello amy"
 "hello belle"
 "hello chiara"</code></pre>
</div>
</div>
<p>In this case though I didn’t really need to resort to using <code>map()</code> because Julia also allows you to vectorise a function, using <code>.</code> to “broadcast” a scalar function to accept vector inputs:</p>
<div id="ee6427ff" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">greet</span>.([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"belle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chiara"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>3-element Vector{String}:
 "hello amy, nice to meet you"
 "hello belle, nice to meet you"
 "hello chiara, nice to meet you"</code></pre>
</div>
</div>
<p>I can see that being handy.</p>
<p>I’ll come back to functions momentarily in order to talk about generic functions and method dispatch in Julia, but first I’ll pivot a little to talk about packages.</p>
</section>
<section id="packages" class="level2">
<h2 class="anchored" data-anchor-id="packages">Packages</h2>
<p>As with any programming language, most of the power comes in Julia comes from the extensive collection of packages that other users have contributed. The usual way to install a package is via the Julia REPL.<sup>6</sup> The Julia REPL is a little unusual in that it has several different “modes”. Normally your command prompt in the Julia REPL looks something like this:</p>
<pre><code>julia&gt;</code></pre>
<p>But if you type <code>]</code> at the REPL you’ll see it transform into something like this:<sup>7</sup></p>
<pre><code>(@v1.10) pkg&gt;</code></pre>
<p>This tells you that you’ve entered “package” mode, and you can type commands that can be used to install Julia packages and various other things.<sup>8</sup> <sup>9</sup> (If you want to get out of package mode and return to the regular REPL press “backspace”.)</p>
<p>So then, if you want to install the <a href="https://juliapackages.com/p/json">JSON</a> package, the command you’d type at the REPL in package mode would simply be <code>add JSON</code>. And having installed the JSON package into my Julia environment, I can load it using the <code>using</code> keyword:</p>
<div id="f5777e8b" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">JSON</span></span></code></pre></div>
</div>
<p>And now I can read the “praise.json” file that I just so happen to have sitting in my working directory by calling <code>JSON.parsefile()</code></p>
<div id="53e474a3" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb35-1">praise_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JSON.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parsefile</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"praise.json"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>Dict{String, Any} with 3 entries:
  "exclamation" =&gt; Any["ah", "aha", "ahh", "ahhh", "aw", "aww", "awww", "aye", …
  "superlative" =&gt; Any["ace", "amazing", "astonishing", "astounding", "awe-insp…
  "adverb"      =&gt; Any["beautifully", "bravely", "brightly", "calmly", "careful…</code></pre>
</div>
</div>
<p>Most convenient, because now that I have this <code>praise_dict</code> object I’m going to use it in the next section when I return to talking about functions…</p>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation4.png" class="img-fluid"></p>
</section>
<section id="methods" class="level2">
<h2 class="anchored" data-anchor-id="methods">Methods</h2>
<p>One of my favourite little R packages is <a href="https://github.com/rladies/praise">praise</a>, which you can use to create random snippets of positive feedback that can be inserted in various places. Inspired by this, I’m going to define a cute little <code>praise()</code> function that does something similar.</p>
<p>In the last section I defined <code>praise_dict</code>, a handy dictionary that contains some adverbs, superlatives, and exclamations that you can use to construct random praise statements. So let’s define <code>praise()</code> such that it takes the <code>name</code> of a person as a string, and outputs a piece of positive feedback:</p>
<div id="3e91d653" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span>)</span>
<span id="cb37-2">    hey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exclamation"</span>])</span>
<span id="cb37-3">    sup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"superlative"</span>])</span>
<span id="cb37-4">    adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adverb"</span>])</span>
<span id="cb37-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hey<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> you are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adv<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sup<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb37-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span>
<span id="cb37-7"></span>
<span id="cb37-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"danielle"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>"ahhh danielle you are frantically priceless"</code></pre>
</div>
</div>
<p>Oh, that’s so sweet of you to say. Notice, however, that I’ve been a little stricter in how I’ve defined the input arguments for <code>praise()</code> than I was earlier when I defined <code>greet()</code>. The <code>praise()</code> function won’t work if the <code>name</code> argument is not a string:</p>
<div id="93dd6104" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre>MethodError: no method matching praise(::Int64)

Closest candidates are:
  praise(<span class="ansi-bright-red-fg">::String</span>)
<span class="ansi-bright-black-fg">   @</span> <span class="ansi-magenta-fg">Main</span> <span style="text-decoration:underline" class="ansi-bright-black-fg">In[22]:1</span>
</pre>
</div>
</div>
</div>
<p>That’s probably a good thing. We don’t typically provide praise to an integer, so it makes sense that the function doesn’t work when you pass it an integer!</p>
<p>On the other hand, we might want our <code>praise()</code> function to work if the user doesn’t pass it a name at all. To accomplish that, we can write another <code>praise()</code> function that doesn’t take any arguments:</p>
<div id="21671ace" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>()</span>
<span id="cb40-2">    hey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exclamation"</span>])</span>
<span id="cb40-3">    sup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"superlative"</span>])</span>
<span id="cb40-4">    adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adverb"</span>])</span>
<span id="cb40-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hey<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> you are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adv<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sup<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb40-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span></code></pre></div>
</div>
<p>So now this works:</p>
<div id="90776c5c" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>"mmhm you are kindly funkadelic"</code></pre>
</div>
</div>
<p>The key thing to notice here is that though I’ve defined <code>praise()</code> twice, what Julia actually does in this situation is construct a single “generic” function that has two <a href="https://docs.julialang.org/en/v1/manual/methods/">methods</a>. In other words, <code>praise()</code> will work if you pass it a single string, and it will also work if you don’t pass it any arguments at all. It won’t work for any other kind of input. On the surface that seems pretty sensible, but in practice we might need a third method. Suppose I have a vector where there are a few people’s names listed, but it has missing values:<sup>10</sup></p>
<div id="b847a071" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb43-1">people <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alex"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">missing</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fiona"</span>];</span></code></pre></div>
</div>
<p>My <code>praise()</code> function isn’t inherently vectorised, but of course we can use the <code>.</code> syntax to praise several people at once and call <code>praise.(people)</code>. Unfortunately this work right now because <code>praise()</code> doesn’t know what to do with the missing value. So if we want our <code>praise()</code> function to handle missing data gracefully it needs a third method:</p>
<div id="9d158d38" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Missing</span>)</span>
<span id="cb44-2">    hey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exclamation"</span>])</span>
<span id="cb44-3">    sup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"superlative"</span>])</span>
<span id="cb44-4">    adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adverb"</span>])</span>
<span id="cb44-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hey<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> you are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adv<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sup<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb44-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span></code></pre></div>
</div>
<p>Now that we have all three methods <code>praise()</code> works just fine:</p>
<div id="75832e50" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>.(people)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>3-element Vector{String}:
 "hah alex you are justly astonishing"
 "mmhm you are frankly groovy"
 "mm fiona you are gently first-class"</code></pre>
</div>
</div>
<p>As an aside, if you ever needed to find out what methods have been defined for the <code>praise()</code> function, you can do so by calling <code>methods(praise)</code>.</p>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation5.png" class="img-fluid"></p>
</section>
<section id="piping" class="level2">
<h2 class="anchored" data-anchor-id="piping">Piping</h2>
<p>Much like recent versions of R, Julia comes with a piping operator <code>|&gt;</code> that you can use to pass the output of one function to another one. So let’s say I have some numbers stored as <code>vals</code>, and I want to compute their geometric mean:</p>
<div id="f34d11a0" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb47-1">vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>3-element Vector{Float64}:
 10.2
 12.1
 14.3</code></pre>
</div>
</div>
<p>In Julia <code>mean()</code> is part of the Statistics package, so we’ll load that:</p>
<div id="9c3e7ad2" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb49-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Statistics</span></span></code></pre></div>
</div>
<p>To compute the geometric mean, we first compute the natural logarithm for each element in <code>vals</code> using <code>log()</code>, compute the arithmetic mean of those log-values with <code>mean()</code>, and then exponentiate the result with <code>exp()</code>. Written as a series of nested function calls, it looks like this:</p>
<div id="bdf01ad3" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>.(vals)))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>12.084829472557535</code></pre>
</div>
</div>
<p>As has been noted many times in the past, one awkward feature of code written in this form is that you have to read it from the inside (innermost parentheses) to the outside in order to understand the sequence of events: first you take <code>vals</code> and pass it to <code>log.()</code>, then you take these logarithms and pass them to <code>mean()</code>, and then you take this mean and pass it to <code>exp()</code>. In this specific case it’s not terrible to read, because it just so happens that “exp mean log value” is pretty much how the formula for the geometric mean is written mathematically, but most data oriented programming isn’t structured to look exactly like an equation, and “inside out” code quickly becomes difficult to read.</p>
<p>This is where the “pipe” operator <code>|&gt;</code> comes in handy. You start with an object on the left hand side, and then pass it to the function named on the right hand side. When you chain a series of piping operations together you end up with code that reads left-to-right rather than inside-out:</p>
<div id="2a313d35" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb52-1">vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.|&gt;</span> log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> exp</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>12.084829472557535</code></pre>
</div>
</div>
<p>Notice that like other operators, I can use <code>.</code> to broadcast when using the pipe.</p>
<p>Much like R, Julia has multiple versions of the pipe. For the purpose of this post I’m only going to talk about the base pipe, which is much much stricter than the magrittr pipe <code>%&gt;%</code> in R, and indeed considerably stricter than the base pipe <code>|&gt;</code> in R.<sup>11</sup> As you can see from the code above, the right hand side of the pipe is a function, <em>not</em> a call. The object supplied on the left hand side of the pipe is passed as the first argument to the function. No additional arguments can be supplied to the function on the right.</p>
<p>On the surface this seems very restrictive, but the longer I’ve been playing with Julia the more I realise it’s not as restrictive as I first thought. Because Julia makes it very easy to write anonymous functions, and because there’s very little overhead to calling one, you can write a pipeline that consists entirely of calls to anonymous functions. As a very simple example of a “split, apply, combine” style workflow constructed with the Julia pipe, here’s how you could use this to reverse each of the individual words in a string:</p>
<div id="420f9b8e" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb54-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello cruel world"</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-2">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-3">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reverse</span>.(x)   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-4">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>"olleh leurc dlrow"</code></pre>
</div>
</div>
<p>To make this work I really do need to be able to specify additional arguments to <code>split()</code> and <code>join()</code>, which would not be permitted in a simpler application of the Julia pipe, but it works perfectly well here because those additional arguments are specified inside the anonymous functions to which the inputs are piped.</p>
<p>Honestly, as much as I was initially like “ugh this is unwieldy”, I’m starting to appreciate the simplicity of the design and how it really does force you to start thinking about your pipelines in functional programming terms.<sup>12</sup></p>
</section>
<section id="function-composition" class="level2">
<h2 class="anchored" data-anchor-id="function-composition">Function composition</h2>
<p>I should also mention that Julia has the <a href="https://www.juliawiki.com/wiki/Function_composition_(Julia)">function composition operator</a> <code>∘</code> that you can use for this purpose, using much the same notation as in mathematics.<sup>13</sup> So I could define a <code>geomean()</code> function as the following composition:</p>
<div id="79055907" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb56-1">geomean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>.(x))</span>
<span id="cb56-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geomean</span>(vals)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>12.084829472557535</code></pre>
</div>
</div>
<p>In this expression I’ve used an anonymous function as the third function to be composed so as to ensure that if the user passes a vector such as <code>vals</code>, the default behaviour of <code>geomean()</code> is to broadcast the call top <code>log()</code> (i.e., compute the log of each input individually), then pass the resulting vector of logarithms to <code>mean()</code> <em>as</em> a vector, and then pass the resulting scalar to <code>exp()</code>.</p>
<p>To be honest, as cute as this is, I’m not sure I see much utility to this right now. So yeah, time to move onto the last “topic” in this foundations post, in which the author will mention but in no way actually explain the extensive capabilities that Julia has for allowing…</p>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation6.png" class="img-fluid"></p>
</section>
<section id="metaprogramming" class="level2">
<h2 class="anchored" data-anchor-id="metaprogramming">Metaprogramming</h2>
<p>Much like R – and very unlike Matlab, which Julia syntax sometimes resembles – the design choices underpinning Julia have been influnced heavily by <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a>. While I have never actually learned to program in any of the major dialects of Lisp, I’ve always wanted to, and I’m a huge fan of the way that Lisp and its descendants contain programming constructs that directly represent <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax trees</a> and provide tools that let you manipulate user-supplied code.<sup>14</sup></p>
<p>Because <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/">Julia Metaprogramming</a> is such a powerful tool, what I’ve noticed already – even as a novice – is that most practical uses of the language end up relying on it heavily. Julia supports abstract <a href="https://docs.julialang.org/en/v1/base/base/#Core.Symbol">Symbols</a>, <a href="https://docs.julialang.org/en/v1/base/base/#Core.Expr">Expressions</a>, and <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/#man-macros">Macros</a>, all of which start to pop up in your code once you start using it for real world data wrangling and visualisation. So it’s pretty important to understand something about how it all works. That said… it’s an advanced topic rather than a basic one, so what I think I’m going to do for now is issue a promissory note: I’ll talk more about this in later posts as those topics become relevant.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Okay that’s only half true. The other thing I ended up doing was creating a <a href="https://pkgdocs.julialang.org/v1/environments/">project environment</a> for this blog post, and if you look at the source code for this post you can see that I’ve actually used <code>Pkg.activate()</code> to ensure that the Julia code in this post is executed using that environment. There’s a nice blog post on setting up a project environment <a href="https://towardsdatascience.com/how-to-setup-project-environments-in-julia-ec8ae73afe9c">here</a>, but it’s a bit beyond the scope of what I want to cover here.↩︎</p></li>
<li id="fn2"><p>Technically, the value referenced by the <code>minutes</code> variable: values have types, variables are simply labels that point to values. But I shan’t be bothered with that distinction here.↩︎</p></li>
<li id="fn3"><p>Fun fact. Apart from a brief period in undergraduate where I learned a little bit of C, Matlab was my first programming language. But it’s been a very, very long time since I used Matlab – or GNU Octave – for anything. I imagine I could pick it up again if I had to but I honestly don’t see the point.↩︎</p></li>
<li id="fn4"><p>A tuple is an immutable type, so the idea here is that you’re really supposed to use tuples to represent list of values that doesn’t change.↩︎</p></li>
<li id="fn5"><p>Dictionaries are mutable, so you can modify values stored in a dictionary.↩︎</p></li>
<li id="fn6"><p>REPL = “Read-evaluate-print loop”. It’s a fancy way of referring to the command line I guess. In R we’d usually refer to the REPL as the R console, but other languages tend to use the term REPL.↩︎</p></li>
<li id="fn7"><p>There are other modes besides regular and package. For instance if you type <code>?</code> at the REPL it takes you into help mode.↩︎</p></li>
<li id="fn8"><p>You don’t actually have to do it this way. The “package” mode in the REPL exposes various functions from the <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/">Pkg</a> package, so if you have loaded <code>Pkg</code> then you could totally call <code>Pkg.add()</code> to install a package. In practice I find this a bit silly, but I suppose it has more useful applications in activating an environment via <code>Pkg.activate()</code> etc.↩︎</p></li>
<li id="fn9"><p>The syntax here is meaningful. If you are working in the base Julia environment, the bit in parentheses tells you that if you add a package it will be added to the base environment. For this blog post, however I’m using a custom environment called “sandbox” that has the packages I’m using, so the prompt I would see looks like this: <code>(sandbox) pkg&gt;</code>.↩︎</p></li>
<li id="fn10"><p>The <code>missing</code> value is used to define missing data in Julia, analogous to how <code>NA</code> is used to define missing values in R.↩︎</p></li>
<li id="fn11"><p>If you are interested in such things, the <a href="https://juliapackages.com/p/pipe">Pipe</a> package supplies a pipe that is very similar to the R base pipe.↩︎</p></li>
<li id="fn12"><p>So much so, in fact, that while my original plan for these Julia posts was to briefly dispense of the base pipe and spend more time talking about the <a href="https://juliapackages.com/p/pipe">Pipe</a> package, I think I’m going to skip the package entirely and just use base pipe + anonymous functions. ↩︎</p></li>
<li id="fn13"><p>For most editors that are configured to handle Julia syntax can type the <code>∘</code> operator by typing <code>\circ</code> and then hitting tab.↩︎</p></li>
<li id="fn14"><p>Very often I see programmers who have never worked in a Lisp-descended language (e.g., they know Python, C, etc. but not R, Julia, Scheme, etc.) react in horror and outrage at the things that you are permitted to do in languages that rely extensively on metaprogramming, but honestly I love it. I think it’s such a powerful tool for constructing <a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain specific languages</a> <em>within</em> the confines of a more general language.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {A Foundation in {Julia}},
  date = {2024-03-01},
  url = {https://blog.djnavarro.net/posts/2024-03-01_julia-foundation},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“A Foundation in Julia.”</span> March 1,
2024. <a href="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation">https://blog.djnavarro.net/posts/2024-03-01_julia-foundation</a>.
</div></div></section></div> ]]></description>
  <category>Julia</category>
  <guid>https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/</guid>
  <pubDate>Thu, 29 Feb 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating new generative art tools in R with grid, ambient, and S7</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-02-25_s7/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Content note: This post includes mentions of sexual assaults, and other unpleasant topics that relate to LGBT experiences of the world</p>
</div>
</div>
<section id="prelude-i" class="level2">
<h2 class="anchored" data-anchor-id="prelude-i">Prelude I</h2>
<p>It has been a minute since I wrote anything new, but thankfully I have found time for another side project and, by extension, another blog post. This one is going to be a little different though. Like everything on this blog it is in fact a data science post. I’m going to talk about art, object-oriented programming in R, and the grid graphics system. It being the time of the <a href="https://www.mardigras.org.au/">Sydney Gay and Lesbian Mardi Gras</a> – or “Gay Christmas” as it is affectionately known – I’ll do it with a rainbow palette. Nevertheless, pretty palettes notwithstanding this won’t be a particularly upbeat pride-flag-waving kind of post. There will be art, and there will be code. But there will also be little slivers of darker stories, and in a moment I’ll explain why I’ve made the decision to include them. But let’s start with the art.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># colour scheme</span></span>
<span id="cb1-2">palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e50000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff8d00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffee00"</span>, </span>
<span id="cb1-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#028121"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004cff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#770088"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters defining objects</span></span>
<span id="cb1-8">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)),</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)),</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L,</span>
<span id="cb1-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> palette,</span>
<span id="cb1-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fill</span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of blob objects to add to a sketch</span></span>
<span id="cb1-17">blobs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, blob)</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define and draw a sketch containing the objects</span></span>
<span id="cb1-20">blobs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The piece is very simple, but has a lovely balance to my eye. Each colour of the pride flag is captured in a single “blob”, with the blobs arranged in a circular overlapping pattern that conveys a sense of movement and progress. More subtly, if you look at the blobs closely you can detect a kind of spatial autocorrelation. Notice how the green, yellow, and orange blobs all have a protrusion on their right hand side at approximately the same place. You’d be tempted to think this is coincidental, but it isn’t. Hidden under the hood there is a vector field that induces correlations on the random process that creates the blob shapes. This is by design.</p>
<p>The spatial autocorrelation that provides hidden structure to this artwork becomes a little more obvious if I switch to a different piece constructed with very similar tools:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters defining objects</span></span>
<span id="cb2-2">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x,</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L,</span>
<span id="cb2-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb2-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fill</span>
<span id="cb2-11">)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of ribbon objects to add to a sketch</span></span>
<span id="cb2-14">ribbons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, ribbon)</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define and draw a sketch containing the objects</span></span>
<span id="cb2-17">ribbons <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In this piece the blobs are more ribbon shaped, and the piece as a whole feels a little like a rainbow coloured lava lamp. The spatial autocorrelation is more obvious. The ribbons tend to be thick in the same regions of the plot, and thin in other regions.</p>
<p>Each of these ribbons is a distinct individual object, yet somehow they all have similar experiences when embedded in the environment that defines the art. There is a <em>pattern</em> to how they flow through this world.<sup>1</sup></p>
<p>An artist looking at this piece might wonder about the trickery used to create this structure. An R programmer looking at it, however, might be wondering something very different. They would likely be asking questions like “what the fuck is this <code>ribbon()</code> function, and what the hell is a <code>sketch()</code>, and how are you rendering this with this <code>draw()</code> function that you piped it to? Absolutely none of this is part of base R, it’s clearly not ggplot2 code, and it’s not even consistent with <em>any</em> well-known data visualisation tool in the R ecosystem. What the hell are you doing here girl?</p>
</section>
<section id="prelude-ii" class="level2">
<h2 class="anchored" data-anchor-id="prelude-ii">Prelude II</h2>
<p>As I was saying. Mardi Gras is in full swing in Sydney at the moment, a multi-week festival and parade sprawling across multiple sites across the city. As I write this I am sitting in the sunshine at a bar on Bondi Beach, while a massive stage is being constructed below for the “Bondi Beach Party” event. The surfers, swimmers, and sunbathers are having a lovely day at the beach. Everyone is partying.</p>
<p>About a kilometer away, above the iconic limestone cliffs that surround almost every Sydney beach, is the <a href="https://www.bondimemorial.com.au/">Marks Park Memorial</a> in Tamarama. The memorial serves as a remembrance for the LGBT victims of hate crimes in Sydney, a stark reminder of the perennial apathy that the NSW police show towards these crimes, and most especially to the gay men who were murdered at these cliffs back in the 1970s and 1980s and whose deaths are to this day the subject of inquests into the appalling behaviour of the police in this city.</p>
<p>The contrast is stark. It is one that few people are willing to face up to, particularly cisgender straight people who fancy themselves to be allies of our community but think that allyship means nothing more than waving a little rainbow flag and reciting empty slogans like “love is love”. It’s these people who – oh so frequently – hasten to inform me that things have changed. It’s different now, they confidently tell me. Everyone is so accepting, they say with a certainty I do not share. You don’t need to hide who you are, they reassure me. It’s a surprisingly predictable narrative.</p>
<p>None of it is true, of course. I could tell the very recent story of <a href="https://www.thepinknews.com/2024/02/23/nex-benedict-hrc-investigation-demand/">Nex Benedict</a>, the non-binary teenager whose death the Oklahoma authorities seem to be trying very hard not to investigate. I could tell the story of <a href="https://en.wikipedia.org/wiki/Murder_of_Brianna_Ghey">Brianna Ghey</a>, a trans girl stabbed to death in the UK. Closer to home, I could tell the story of <a href="https://www.abc.net.au/news/2021-07-02/background-briefing-mhelody-bruno-investigation/100256330">Mhelody Bruno</a>, a Filipina trans woman strangled to death by her boyfriend in regional NSW and whose death was barely even investigated by the NSW police and courts. These events all took place in the US, the UK, and Australia, and all quite recently. They are not stories from a time long past.</p>
<p>I could tell all these stories, but what I have learned is that describing these events has very little impact on the people who keep telling me that actually things are <em>fine</em> now. Those stories are the outliers, they tell me. The bad stories are the exceptions, not the norm.</p>
<p>Again, it is not true. The thing that well-meaning cis and straight people have this massive blindspot about, is the fact that so many LGBT people have dark stories from our own experience that we aren’t telling them about, and so they impute a much happier backstory to us than is even remotely plausible. People who barely even know me will, to my utter bewilderment, confidently tell me to my face that – despite being transgender and bisexual – I could not <em>possibly</em> have had any particularly traumatic experiences. The gall of it is shocking, actually.</p>
</section>
<section id="act-i-learning-to-love-s7" class="level2">
<h2 class="anchored" data-anchor-id="act-i-learning-to-love-s7">Act I: Learning to love S7</h2>
<p>This whole thing started because I wanted to learn how to use the relatively new <a href="https://rconsortium.github.io/S7/">S7 object oriented programming system</a> that is intended to serve as a successor to the informal-but-janky <a href="https://adv-r.hadley.nz/s3.html">S3</a> system and the formal-but-painful <a href="https://adv-r.hadley.nz/s4.html">S4</a> system that already exist within R.<sup>2</sup> It seemed like a very simple exercise when I started, but as with any exercise in learning a new thing I very quickly felt like a dog trying to understand Norway.<sup>3</sup></p>
<p>As is my habit, I’ve taken my learning process and used it to create art. What I want to do with S7 here is create a system for programmatically constructing “drawable shapes” that abide by particular rules, alongside a toolkit that can take these objects and render them within an abstract “sketch” that can later be rendered to an image with the help of the grid graphics system. In that sense, the basic idea underpinning my tool is not that different – though far less sophisticated – to how ggplot2 works, but I’ve designed it with different considerations in mind. My tools are not designed for data visualisation, they are designed for generative art. Spiritually they have more in common with p5.js than ggplot2.</p>
<section id="writing-a-new-s7-class" class="level3">
<h3 class="anchored" data-anchor-id="writing-a-new-s7-class">Writing a new S7 class</h3>
<p>Okay look. It’s kind of like this. While eventually the stated plan is for S7 to become part of base R and be easily available to any R user – no different to S3 and S4 – it’s still in development and there are still quirks. So for now it’s a regular package like any other one and if we want to start building classes with it we’ll have to load the package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(S7)</span></code></pre></div>
</div>
<p>Let’s have a look at how you define classes in S7, and for the moment we’ll keep it simple. All I’m going to do right now is create a new class that represents a circle. The way we do this in S7 is with the <code>new_class()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> class_numeric,</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> class_numeric,</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> class_numeric</span>
<span id="cb4-7">  )</span>
<span id="cb4-8">)</span></code></pre></div>
</div>
<p>By doing so, I create a new function called <code>circle()</code> that has arguments corresponding to the <code>x</code>, <code>y</code> and <code>radius</code> properites. I can call this function to create a new circle object. In the code below I create an object <code>cc</code> that – at least in some very abstract sense of the term – corresponds to the unit circle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 0
 @ y     : num 0
 @ radius: num 1</code></pre>
</div>
</div>
<p>Here we have a circle object that has three “properties” <code>x</code>, <code>y</code>, and <code>radius</code>. We can think of it as something broadly similar to a named list, but it has rules attached. In the class definition above I specified that <code>x</code>, <code>y</code>, and <code>radius</code> must be numeric values: they are allowed to be integers or doubles, but they can’t be characters. Here’s what happens if I try to create a circle with <code>radius = "big"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"big"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: &lt;circle&gt; object properties are invalid:
- @radius must be &lt;integer&gt; or &lt;double&gt;, not &lt;character&gt;</code></pre>
</div>
</div>
<p>So here we see something that we wouldn’t normally have in, say, an S3 class:<sup>4</sup> the class definition explicitly says that the <code>radius</code> property must be numeric, so my <code>circle()</code> function throws an error if I foolishly try to pass it a non-numeric radius.</p>
<p>Okay so what’s going on with these “properties”? Properties are analogous to “slots” in an S4 object<sup>5</sup> and can be accessed using <code>@</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>One nice thing about S7 is that you can modify (most) properties of an object directly. So if I want to update my <code>cc</code> object so that it now (nominally) represents a circle with radius 2, I can do this:<sup>6</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 0
 @ y     : num 0
 @ radius: num 2</code></pre>
</div>
</div>
<p>Amazing. Thrilling. The excitement, it cannot be contained.</p>
</section>
<section id="default-values" class="level3">
<h3 class="anchored" data-anchor-id="default-values">Default values</h3>
<blockquote class="blockquote">
<p>The bar has pride flags plastered on the window, and they’re advertising a drag show. These superficial safety signals do not make me feel safe though, because what I remember about this bar is the feel of a strangers hands at my neck as he forced his tongue down my throat in full view of the patrons in the queer themed rainbow bar upstairs. He was so strong.</p>
</blockquote>
<p>One limitation to the <code>circle()</code> function I just created is that it doesn’t supply default values for the <code>x</code>, <code>y</code>, and <code>radius</code> properties, so the user has to explicitly pass values every time it is called. That’s not always ideal, especially as your classes become more complex (we’ll see this later) and have many properties that only rarely need to be modified by the user.</p>
<p>To fix this, it’s helpful to note that when I wrote <code>x = class_numeric</code> in the previous definition for the <code>circle</code> class I was relying on a shorthand notation. If you want to be more explicit in how properties are defined, you can use the <code>new_property()</code> function. One of the arguments to <code>new_property()</code> is <code>default</code> and allows you to provide a default value for that property in case the user doesn’t supply one. So here’s a modified version of our <code>circle</code> class that supplies defaults for all three properties:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb13-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb13-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb13-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-7">  )</span>
<span id="cb13-8">)</span></code></pre></div>
</div>
<p>Now that I’ve done so, it’s possible for the user to construct a new circle by supplying values only for those properties where they want to override the default. So this now works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 2
 @ y     : num 0
 @ radius: num 1</code></pre>
</div>
</div>
<p>As you can see, this object describes a circle with default values <code>y = 0</code> and <code>radius = 1</code>, as well as a user supplied value <code>x = 0</code>.</p>
</section>
<section id="computed-properties" class="level3">
<h3 class="anchored" data-anchor-id="computed-properties">Computed properties</h3>
<p>Let’s be honest. This circle class only represents a circle in the most abstract sense. It’s a list of three numbers that you need to describe a circle, but it doesn’t actually compute any points that lie on the circumference of said circle. If you wanted to <em>draw</em> the circle in question, you’d have to actually compute those points yourself. For a circle this computation is so very straightforward that it seems strange to bother doing it within the <code>circle</code> object, but other kinds of parametrised shapes (notably the <code>blob</code> and <code>ribbon</code> objects that are going to appear later) are more complex and the relationship between the parameters and the vertices of the shape is more complex. In those cases, it seems very sensible to compute the vertices of the shape within the object itself.</p>
<p>One very handy feature of S7 classes is that they support <em>computed properties</em>. A computed property is one that is not supplied by the user, and whose value is constructed (initially at the time of object creation, but we’ll revisit this) on the basis of the regular properties of the object. So, for instance, our <code>circle</code> class already has ordinary properties <code>x</code>, <code>y</code>, and <code>radius</code>, but we could add a computed property called <code>points</code> that contains the coordinates of the vertices of the circle that is defined by the <code>x</code>, <code>y</code>, and <code>radius</code> values. In practice, however, that means we’ll need to add another new property to our class. As a mathematical abstraction, there are an infinite number of points that sit on the perimeter of a circle. In real life, we’ll have to approximate this by choosing <code>n</code> evenly spaced locations on the circle.</p>
<p>To that end, we can update our <code>circle</code> class like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb16-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb16-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_integer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L),</span>
<span id="cb16-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb16-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_data.frame,</span>
<span id="cb16-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb16-11">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb16-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb16-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb16-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb16-15">        )</span>
<span id="cb16-16">      } </span>
<span id="cb16-17">    )    </span>
<span id="cb16-18">  )</span>
<span id="cb16-19">)</span></code></pre></div>
</div>
<p>Even a moments inspection of the code makes clear that the <code>points</code> property is rather different to the others. The data stored within <code>points</code> is structured as a data frame (we’ll improve on this later) that has columns corresponding to the x- and y-coordinates of the points. Critically, however, the user does <em>not</em> supply the value for <code>points</code>. Instead, what I have done here is use the <code>getter</code> argument to <code>new_property()</code> to supply a function that is executed whenever a new circle is created. The getter function always takes a single argument <code>self</code>, referring to the circle object itself, and returns the value that will be assigned to the computed property (in this case <code>points</code>).</p>
<p>The key thing about the getter function is that you can reference the other properties of the object. So, in the code above, you can see that I’ve used <code>self@x</code>, <code>self@radius</code>, etc, to refer to the values of the <code>x</code> and <code>radius</code> values that were supplied by the user. By doing so, it’s pretty easy to write code that programmatically constructs the value of a computed property, using the user-supplied property values to do so.</p>
<p>So let’s have a look at what happens when we use our updated <code>circle</code> class. When I create a new circle, the <code>points</code> property is automatically computed using the user-specified <code>x</code>, <code>y</code>, <code>radius</code>, and <code>n</code> properties:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">cc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>L)</span>
<span id="cb17-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 1
 @ y     : num 2
 @ radius: num 3
 @ n     : int 50
 @ points:'data.frame': 50 obs. of  2 variables:
 .. $ x: num  4 3.98 3.9 3.78 3.61 ...
 .. $ y: num  2 2.38 2.76 3.13 3.47 ...</code></pre>
</div>
</div>
<p>Another nice feature of computed properties in S7 is that they are dynamic. When I update one of the other properties, the computed <code>points</code> property is automatically updated. For example, let’s take the circle object <code>cc</code> that I constructed in the last code snippet, and instruct R to compute it using a mere 5 points along the perimeter:<sup>7</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>L</span>
<span id="cb19-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 1
 @ y     : num 2
 @ radius: num 3
 @ n     : int 5
 @ points:'data.frame': 5 obs. of  2 variables:
 .. $ x: num  4 1 -2 1 4
 .. $ y: num  2 5 2 -1 2</code></pre>
</div>
</div>
<p>The same trick could be used dynamically to change the size or location of the circle (I leave it to the reader to imagine the potential here in the generative art context).</p>
<p>A key thing to note about the <code>points</code> property that I just created is that it is read-only. Formally, the way you know that it is read-only is because I have defined a <code>getter</code> function for it but have (deliberately) not defined a <code>setter</code> function that would be executed if the user tries to change <code>points</code> directly. Because of this, <code>points</code> is read-only. The user is permitted to read and extract the property via the <code>@</code> accessor operator…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  4  2
2  1  5
3 -2  2
4  1 -1
5  4  2</code></pre>
</div>
</div>
<p>but they are not allowed to write directly to that property. The only<sup>8</sup> way to modify a computed property is by modifying the other properties from which it is computed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: Can't set read-only property &lt;circle&gt;@points</code></pre>
</div>
</div>
<p>For the purposes of the tool I want to create, the read-only nature of <code>points</code> is a desirable feature. I <em>don’t</em> want users trying to manually create the <code>points</code> that lie on the circumference of a circle. The abstract concept of a circle is defined by <code>x</code>, <code>y</code> and <code>radius</code>, and if I want to create <code>n</code> evenly spaced points on the circle, then these points are automatically computed as a byproduct of specifying these values.</p>
</section>
<section id="validators" class="level3">
<h3 class="anchored" data-anchor-id="validators">Validators</h3>
<blockquote class="blockquote">
<p>Am I a woman? I mean, there are men who seem pretty happy to humiliate me, choke me, and rape me as if I <em>were</em> a woman, but is that the validation I want? It says “female” on all my documents now, and I fought tooth and nail for years to make that happen. Is the fight itself enough for me to earn my place as a valid woman? But if so, then why am I repeatedly having to justify my life to the satisfaction of men who ignore me when I talk about the reality of life as a trans woman, who treat every interaction with me like they’re having an academic debate, and whose only interest in my life is using me as a vehicle to argue that I have an unfair advantage in the sporting contests that I’m too frightened to participate in? This must all count for something, surely. Does there come a point at which I too can make a valid claim to be the victim of misogyny?</p>
</blockquote>
<p>Another limitation to the <code>circle</code> class that I’ve just created is that there is no <em>validator</em> function. The role of a validator is to ensure that the values that the user passes during object construction correspond to a valid object. A circle can’t really have a negative <code>radius</code>. The <code>x</code> and <code>y</code> values that define the center of the circle need to be scalar values. The number of points <code>n</code> can’t be non-negative. The class that I’ve just created doesn’t enforce these constraints. Sometimes this means that you can pass nonsense values and end up with something that <em>looks</em> like a valid circle, but isn’t:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : int [1:2] 1 2
 @ y     : num 1
 @ radius: num 1
 @ n     : int 100
 @ points:'data.frame': 100 obs. of  2 variables:
 .. $ x: num  2 3 1.99 2.98 1.97 ...
 .. $ y: num  1 1.06 1.13 1.19 1.25 ...</code></pre>
</div>
</div>
<p>Other times, you can pass nonsense values and get an error message because one of the internal function calls doesn’t work properly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in seq.default(0, 2 * pi, length.out = self@n): 'length.out' must be a non-negative number</code></pre>
</div>
</div>
<p>Neither of these outcomes is a good thing. What you really need here is a validator function that checks the user inputs and throws an informative error whenever those inputs are invalid. A nice feature of S7 is that it supports validators “out of the box”, and makes the validator part of the class definition itself.</p>
<p>So here is an updated <code>circle</code> class definition that incorporates a validator function. It’s a relatively clean setup, because you can simply have the validator return the string for your error message, or else have a <code>NULL</code> return value if the inputs are good:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb30-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb30-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb30-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb30-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb30-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb30-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_integer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L),</span>
<span id="cb30-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb30-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_data.frame,</span>
<span id="cb30-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb30-11">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb30-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb30-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb30-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb30-15">        )</span>
<span id="cb30-16">      } </span>
<span id="cb30-17">    )    </span>
<span id="cb30-18">  ),</span>
<span id="cb30-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb30-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb30-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb30-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be length 1"</span>)</span>
<span id="cb30-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb30-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be a non-negative number"</span>)</span>
<span id="cb30-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb30-26">  }</span>
<span id="cb30-27">)</span></code></pre></div>
</div>
<p>This probably isn’t the ideal form for the <code>circle</code> validator (e.g., I could probably think more about what messages should be returned) but it illustrates the basic idea. The key thing is that, for example, if I try to pass a negative <code>radius</code> I get an error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.234</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: &lt;circle&gt; object is invalid:
- radius must be a non-negative number</code></pre>
</div>
</div>
<p>One thing I’m learning very quickly is that when you’re designing a system that is built from many different classes, it is <em>extremely</em> valuable to have validators for all your classes. Debugging becomes much easier on the one hand, and on the other hand you can always move forward in your code knowing that when class A depend on class B in some fashion, you can always rely on knowing that every class B object that class A works with will be a valid instance of class B. A little bit of extra effort when writing the class definition spares you a lot of pain down the track when you’re trying to make sense of how your classes interact with each other.</p>
</section>
<section id="building-structure" class="level3">
<h3 class="anchored" data-anchor-id="building-structure">Building structure</h3>
<blockquote class="blockquote">
<p>The constituent pieces of an oppressive system are often innocuous on their face, very often the result of thoughtlessness rather than malice. The consequences, however, are cruel. Crying in a hotel lobby at a conference when your documentation doesn’t match your appearance and the staff are arguing with each other over whether you’re really the person pictured on the drivers licence you have not yet been able to change. Crying in a lecture theatre in front of an audience because the programmer who designed the IT system didn’t consider name and gender to be malleable properties so even though you’ve updated your records with HR, the IT system has just outed you to all your students. Trying to work out if you’re allowed to use the bathroom next to your office because nobody bothered to write a policy document, and instead walking a kilometer to go off-campus to pee. Living in dread waiting for the next time you fall into the cracks in the system.</p>
</blockquote>
<p>Up to this point, all I have done when designing my system is define a <code>circle</code> class that creates objects with a specific structure. In order to expand this into a richer tool that can eventually support the artistic goals I have in mind, I’m going to need to broaden my vision and think about a collection of related classes that play nicely with one another.</p>
<p>In order to make this shift, a natural place to start is thinking about what kind of objects should be stored internally within a <code>circle</code> object (and other shapes). For instance, in the code above I stored the computed <code>points</code> as a simple data frame. It would be more sensible to define an actual S7 class for this, with its own validator to make sure that any shape classes I define compute a valid set of points:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb33-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"points"</span>,</span>
<span id="cb33-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb33-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> class_numeric,</span>
<span id="cb33-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> class_numeric</span>
<span id="cb33-6">  ),</span>
<span id="cb33-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb33-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y)) {</span>
<span id="cb33-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x and y must be the same length"</span></span>
<span id="cb33-10">    }</span>
<span id="cb33-11">  }</span>
<span id="cb33-12">)</span></code></pre></div>
</div>
<p>Similarly, when the time comes to start drawing these things, my circles (and other shapes) will need to have a defined visual <code>style</code>. Again, I can create a class for this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">style <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb34-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"style"</span>,</span>
<span id="cb34-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb34-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color     =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_character, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>),</span>
<span id="cb34-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_character, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>),</span>
<span id="cb34-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb34-7">  )</span>
<span id="cb34-8">)</span></code></pre></div>
</div>
<p>You’ll notice that <code>style</code> currently doesn’t have a validator, and it doesn’t support a very wide range of properties. The artistic system I want to consider has the constraint that <em>every</em> drawable shape is a polygon of some kind, and needs to have stylistic properties that one associates with polygons. The <code>color</code>, <code>fill</code>, and <code>linewidth</code> properties that exist within this <code>style</code> class are a beginning, but nothing more than that. Similarly, the absence of a validator is a strong hint that I haven’t finished thinking through what I want this class to be. For the current purposes the <code>style</code> class works, but it’s very far from complete.</p>
<p>Let’s move on, and start thinking about what happens when my system has a richer collection of drawable shapes than just circles. Later on in this post I’m going to define several different kinds of drawable shapes (e.g., the <code>blob</code> and <code>ribbon</code> objects in the initial artwork), and they’ll all have some structural similarities to one another that I want to enforce. To that end I’ll create a class called <code>drawable</code>.<sup>9</sup> The <code>drawable</code> class will later be used as the parent class for all the shape classes that I want to be, well, drawable. But it’s not super interesting in itself. Here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">drawable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb35-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drawable"</span>,</span>
<span id="cb35-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb35-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb35-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> style,</span>
<span id="cb35-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>()</span>
<span id="cb35-7">    ),</span>
<span id="cb35-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb35-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb35-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L))</span>
<span id="cb35-11">    )</span>
<span id="cb35-12">  )</span>
<span id="cb35-13">)</span></code></pre></div>
</div>
<p>The true purpose of the <code>drawable</code> class is that it enforces structure. Every drawable shape class that I later define will necessarily have a computed <code>points</code> property, and a user-defined <code>style</code> property. As an added benefit, because the only information I’ll ever need to draw a shape is captured by <code>style</code> and <code>points</code>, I will be able to define a single drawing method that works for all <code>drawable</code> objects regardless of their specific character.</p>
<p>Okay so now we can define <code>circle</code> as a subclass of <code>drawable</code>. It doesn’t change the code very much. All I’m doing here is adding <code>parent = drawable</code> to the class definition:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb36-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>,</span>
<span id="cb36-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb36-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb36-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb36-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb36-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb36-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_integer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L),</span>
<span id="cb36-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb36-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb36-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb36-12">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb36-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(</span>
<span id="cb36-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb36-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb36-16">        )</span>
<span id="cb36-17">      }</span>
<span id="cb36-18">    )</span>
<span id="cb36-19">  ),</span>
<span id="cb36-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb36-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb36-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb36-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be length 1"</span>)</span>
<span id="cb36-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb36-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be a non-negative number"</span>)</span>
<span id="cb36-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb36-27">  }</span>
<span id="cb36-28">)</span></code></pre></div>
</div>
<p>To see that our new <code>circle</code> class is indeed a subclass of <code>drawable</code>, we can create a new circle and check its class attribute:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">cc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>()</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(cc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "circle"    "drawable"  "S7_object"</code></pre>
</div>
</div>
<p>The primary class is <code>circle</code>, as you’d expect, and the parent class is <code>drawable</code>. Notice also that the object has a third class, <code>S7_object</code>: all S7 objects possess this class.</p>
</section>
<section id="constructors" class="level3">
<h3 class="anchored" data-anchor-id="constructors">Constructors</h3>
<p>Imposing this structure on our drawable objects is valuable, and will pay off later because everything that we need to draw the shape is captured by the embedded <code>style</code> and <code>points</code> objects. However, as an unfortunate side effect of this, I’ve accidentally defined a class that makes it very hard for the user to supply the stylistic features: the arguments to our new <code>circle()</code> function are now:</p>
<ul>
<li><code>style</code>, which has to be a call to the <code>style()</code> constructor</li>
<li><code>x</code>, <code>y</code>, <code>radius</code>, and <code>n</code>, as before</li>
</ul>
<p>That means that if I want to define a red circle with radius 2, my poor user (i.e., <em>me</em>) has to do something rather unpleasant:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ style : &lt;style&gt;
 .. @ color    : chr "red"
 .. @ fill     : chr "black"
 .. @ linewidth: num 1
 @ points: &lt;points&gt;
 .. @ x: num [1:100] 2 2 1.98 1.96 1.94 ...
 .. @ y: num [1:100] 0 0.127 0.253 0.379 0.502 ...
 @ x     : num 0
 @ y     : num 0
 @ radius: num 2
 @ n     : int 100</code></pre>
</div>
</div>
<p>The reason this is cumbersome is that my <code>drawable</code> class imposes a structure in which all the stylistic features are captured by the <code>style</code> property (shared by all drawables), whereas all the parameters that are used to construct the <code>points</code> property are specific to the particular drawable class (<code>circle</code>, <code>blob</code>, <code>ribbon</code>, etc). This internal structure is a good thing insofar as it ensures I can always extract the two key properties from any drawable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;style&gt;
 @ color    : chr "black"
 @ fill     : chr "black"
 @ linewidth: num 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;points&gt;
 @ x: num [1:100] 1 0.998 0.992 0.982 0.968 ...
 @ y: num [1:100] 0 0.0634 0.1266 0.1893 0.2511 ...</code></pre>
</div>
</div>
<p>As you can imagine, this is a handy feature in a generative art tool. Nevertheless it’s a huge pain in the arse from the user perspective when it comes to constructing a new <code>circle</code> object.</p>
<p>Fortunately, S7 makes it possible to fix this by allowing the class definition to include a custom <em>constructor</em> function that allows the developer to customise the arguments that the user supplies.</p>
<p>Here’s what the <code>circle</code> class looks like with a custom constructor:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb45-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>,</span>
<span id="cb45-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb45-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb45-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x      =</span> class_numeric,</span>
<span id="cb45-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y      =</span> class_numeric,</span>
<span id="cb45-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> class_numeric,</span>
<span id="cb45-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n      =</span> class_integer,</span>
<span id="cb45-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb45-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb45-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb45-12">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb45-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(</span>
<span id="cb45-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb45-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb45-16">        )</span>
<span id="cb45-17">      }</span>
<span id="cb45-18">    )</span>
<span id="cb45-19">  ),</span>
<span id="cb45-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb45-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb45-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb45-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be length 1"</span>)</span>
<span id="cb45-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb45-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be a non-negative number"</span>)</span>
<span id="cb45-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb45-27">  },</span>
<span id="cb45-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constructor =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, ...) {</span>
<span id="cb45-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_object</span>(</span>
<span id="cb45-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawable</span>(),</span>
<span id="cb45-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb45-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb45-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> radius,</span>
<span id="cb45-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb45-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(...)</span>
<span id="cb45-36">    )</span>
<span id="cb45-37">  }</span>
<span id="cb45-38">)</span></code></pre></div>
</div>
<p>There’s a few things to note here:</p>
<ul>
<li>The constructor function always ends with a call to <code>new_object()</code>, and the first argument is always the parent class (i.e., in this case the parent of <code>circle</code> is <code>drawable</code>).</li>
<li>The way I’ve cleaned up my arguments is by having four explicitly defined arguments for a circle (<code>x</code>, <code>y</code>, <code>radius</code>, and <code>n</code>), and then included the dots <code>...</code> that are then passed onto <code>style()</code></li>
<li>I’ve surreptitiously changed the way that my default arguments are specified: the constructor function is now responsible for defining defaults.</li>
</ul>
<p>The extra effort that goes into writing a custom constructor is in some ways a pain (especially because it does mean that any subclass of <code>circle</code> will also need a custom constructor), but in this case it’s worth it because I can create a blue circle in a natural way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">cc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7acbf5"</span>)</span>
<span id="cb46-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ style : &lt;style&gt;
 .. @ color    : chr "black"
 .. @ fill     : chr "#7acbf5"
 .. @ linewidth: num 1
 @ points: &lt;points&gt;
 .. @ x: num [1:100] 2 2 1.98 1.96 1.94 ...
 .. @ y: num [1:100] 0 0.127 0.253 0.379 0.502 ...
 @ x     : num 0
 @ y     : num 0
 @ radius: num 2
 @ n     : int 100</code></pre>
</div>
</div>
</section>
<section id="other-drawables" class="level3">
<h3 class="anchored" data-anchor-id="other-drawables">Other drawables</h3>
<p>Later in the post I’ll go on to define the <code>blob</code> and <code>ribbon</code> classes that are so much fun for artistic purposes, but we have a long way to go before we get to that. One thing I will do now, however, is define a general purpose <code>shape</code> class that isn’t very interesting, but handy to have as a fallback. The <code>shape</code> class has no interesting parameters: the user directly supplies the <code>x</code> and <code>y</code> coordinates that define the <code>points</code> property for the shape. This is very handy artistically in situations where you don’t really want to bother defining a shape parametrically, and instead just want to supply the vertices directly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">shape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb48-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shape"</span>,</span>
<span id="cb48-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb48-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb48-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> class_numeric,</span>
<span id="cb48-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> class_numeric,</span>
<span id="cb48-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb48-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb48-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb48-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y)</span>
<span id="cb48-11">      }</span>
<span id="cb48-12">    )</span>
<span id="cb48-13">  ),</span>
<span id="cb48-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb48-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y)) {</span>
<span id="cb48-16">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x and y must be the same length"</span></span>
<span id="cb48-17">    }</span>
<span id="cb48-18">  },</span>
<span id="cb48-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constructor =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y, ...) {</span>
<span id="cb48-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_object</span>(</span>
<span id="cb48-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawable</span>(),</span>
<span id="cb48-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb48-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb48-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(...)</span>
<span id="cb48-25">    )</span>
<span id="cb48-26">  }</span>
<span id="cb48-27">)</span></code></pre></div>
</div>
<p>It’s not interesting, but you can use it to manually define a pink triangle like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">tr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shape</span>(</span>
<span id="cb49-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb49-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb49-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eaacb8"</span></span>
<span id="cb49-5">)</span>
<span id="cb49-6">tr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;shape&gt;
 @ style : &lt;style&gt;
 .. @ color    : chr "black"
 .. @ fill     : chr "#eaacb8"
 .. @ linewidth: num 1
 @ points: &lt;points&gt;
 .. @ x: num [1:3] 0 2 1
 .. @ y: num [1:3] 1.73 1.73 0
 @ x     : num [1:3] 0 2 1
 @ y     : num [1:3] 1.73 1.73 0</code></pre>
</div>
</div>
<p>Honestly, I’m only mentioning it now because in a moment I’m going to define drawing functions that I’ll apply to the circle object <code>cc</code> from before, and the <code>tr</code> object I’ve just created.</p>
</section>
</section>
<section id="act-ii-sketching-with-grid" class="level2">
<h2 class="anchored" data-anchor-id="act-ii-sketching-with-grid">Act II: Sketching with grid</h2>
<blockquote class="blockquote">
<p>I am sitting in shock on my couch. That was… that was rape, right? If I were a cisgender woman that would clearly be rape, right? I said no, repeatedly. He forced his way in. Into my apartment. Into me. It happened, right? I mean, I know it happened, because it hurts where he forced me. So I <em>know</em> it happened, my body is telling me exactly what happened. But… that really did just happen, right?</p>
</blockquote>
<p>At this stage in the development process I have a sensible collection of S7 classes that I can use to represent polygons in a systematic way. I have <code>style</code> and <code>points</code> classes that capture the “raw” characteristics of the polygons, and I have <code>drawable</code> and its child classes <code>circle</code> and <code>shape</code> (with <code>blob</code> and <code>ribbon</code> to come shortly) that allows me to construct drawable shapes in a convenient way.</p>
<p>What I <em>don’t</em> have yet is a method for actually drawing these things.</p>
<section id="drawing-drawables" class="level3">
<h3 class="anchored" data-anchor-id="drawing-drawables">Drawing drawables</h3>
<p>There are a lot of ways I could go about creating actual drawings from <code>drawable</code> objects, and I did spend a little time thinking about the pros and cons of different approaches. What I landed on in the end, however, was a strategy where I would define a new generic function called <code>draw()</code> and then supply methods for it that use the grid graphics system in R to do the rendering.</p>
<p>To construct a new generic function in S7, we use the <code>new_generic()</code> function. Here’s is how I’ve done that to create <code>draw()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">draw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_generic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dispatch_args =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>)</span></code></pre></div>
</div>
<p>In this code, the <code>dispatch_args</code> argument is used to indicate which arguments to the <code>draw()</code> function should be used in method dispatch. I’ve kept it simple in this case: the specific method that S7 will choose for <code>draw()</code> is based on the class of the <code>object</code> argument. For the moment, the only class for which I really need to supply a method is the <code>drawable</code> class (i.e., how should <code>draw()</code> handle the input when it is passed a single <code>drawable</code> object), but very shortly I’m going to define a <code>sketch</code> class that allows many <code>drawable</code> objects to be composed into a single image, so I’ll need a <code>draw()</code> method to handle <code>sketch</code> inputs as well.</p>
<p>But I am getting ahead of myself. To specify a method for an S7 generic function, we call the <code>method()</code> function and specify the generic for which the method is to be defined (i.e., <code>draw()</code>), and the class for which the method is defined (i.e., <code>drawable</code>). Here’s the code that I used:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span>(draw, drawable) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb52-2"></span>
<span id="cb52-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plotting area is a single viewport with equal-axis scaling</span></span>
<span id="cb52-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(xlim)) xlim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x)</span>
<span id="cb52-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(ylim)) ylim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x)</span>
<span id="cb52-6">  x_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb52-7">  y_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ylim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ylim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb52-8">  vp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(</span>
<span id="cb52-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xscale =</span> xlim,</span>
<span id="cb52-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yscale =</span> ylim,</span>
<span id="cb52-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width  =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y_width), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snpc"</span>),</span>
<span id="cb52-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> x_width), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snpc"</span>),</span>
<span id="cb52-13">  )</span>
<span id="cb52-14"></span>
<span id="cb52-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shapes are always polygon grobs</span></span>
<span id="cb52-16">  grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygonGrob</span>(</span>
<span id="cb52-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x,</span>
<span id="cb52-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y,</span>
<span id="cb52-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(</span>
<span id="cb52-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>color,</span>
<span id="cb52-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>fill,</span>
<span id="cb52-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>linewidth</span>
<span id="cb52-23">    ),</span>
<span id="cb52-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp,</span>
<span id="cb52-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default.units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native"</span></span>
<span id="cb52-26">  )</span>
<span id="cb52-27"></span>
<span id="cb52-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw the grob</span></span>
<span id="cb52-29">  grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb52-30">  grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(grob)</span>
<span id="cb52-31">}</span></code></pre></div>
</div>
<p>If you are familiar with the grid package, you can immediately see that this is a very simple use of grid (e.g., compare it to ggplot2, which is very sophisticated in how it uses grid). All I’m doing here is defining a <em>single</em> plotting region (i.e., the viewport) and – because this is art rather than data visualisation – using <code>"snpc"</code> units to enforce a strong constraint that the x and y axes of this plot region will always be on the same scale, similar to how <code>coord_equal()</code> works in ggplot2. Our <code>drawable</code> object is then used to construct a single polygon grob: the internal <code>points</code> object contained within every drawable is used to define the vertices of the polygon, and the internal <code>style</code> object contained within every drawable is used to specify the graphical parameters associated with the polygon. See? I told you that all the effort we went to in imposing structure on the <code>drawable</code> class would come in handy. The <code>draw()</code> method is easy to write because the structure of the objects is aligned with the underlying functions we want those objects to support.</p>
<p>So here we go. At last we can draw simple shapes. Here’s our blue circle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(cc)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-34-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Here is our pink triangle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(tr)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Not exactly high-calibre art, but the foundations are in place for us to start building more interesting tools atop these classes and methods.</p>
</section>
<section id="making-sketches" class="level3">
<h3 class="anchored" data-anchor-id="making-sketches">Making sketches</h3>
<blockquote class="blockquote">
<p>Early in transition, walking into the office in my academic department. “So you’re a woman now? Are you going to get the surgery? Or did you already have it? Are you looking for a husband?” Um, I was hoping to use the photocopier if that’s okay? I have a class handout to prepare. Wasn’t planning to have a conversation about my genital status actually, and I feel like if I were a cis woman you’d realise that your professional colleagues’ genitals are not an appropriate workplace conversation topic.</p>
</blockquote>
<p>At last the time has come to define the <code>sketch</code> class that will allow us to compose multiple drawables into a single drawing. Happily for us this is very simple to do. My first pass at defining a <code>sketch</code> class looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">sketch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb55-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sketch"</span>,</span>
<span id="cb55-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb55-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shapes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>())</span>
<span id="cb55-5">  ),</span>
<span id="cb55-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb55-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(d) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(d, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drawable"</span>)))) {</span>
<span id="cb55-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shapes must be a list of drawable-classed objects"</span></span>
<span id="cb55-9">    }</span>
<span id="cb55-10">  }</span>
<span id="cb55-11">)</span></code></pre></div>
</div>
<p>Internally it is very simple: it has one property <code>shapes</code>, which is defined to be a list of <code>drawable</code> objects. Notice that we have a validator function for the class that checks to see that every element of the <code>shapes</code> list inherits from the <code>drawable</code> class. Easy.</p>
<p>Defining a <code>draw()</code> method for the <code>sketch</code> class is only slightly more complicated than the corresponding method was for a single <code>drawable</code> object. The only subtlety to it is determining what the “plot limits” should be if the user doesn’t manually specify <code>xlim</code> and <code>ylim</code>. Here, all I’ve done is set the default limits so that the plot includes all the constituent objects in the <code>sketch</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span>(draw, sketch) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb56-2"></span>
<span id="cb56-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set default axis limits</span></span>
<span id="cb56-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(xlim)) {</span>
<span id="cb56-5">    xlim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb56-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(s, id) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x))),</span>
<span id="cb56-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(s, id) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x)))</span>
<span id="cb56-8">    )</span>
<span id="cb56-9">  }</span>
<span id="cb56-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(ylim)) {</span>
<span id="cb56-11">    ylim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb56-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(s) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y))),</span>
<span id="cb56-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(s) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y)))</span>
<span id="cb56-14">    )</span>
<span id="cb56-15">  }</span>
<span id="cb56-16"></span>
<span id="cb56-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plotting area is a single viewport with equal-axis scaling</span></span>
<span id="cb56-18">  x_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb56-19">  y_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ylim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ylim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb56-20">  vp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(</span>
<span id="cb56-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xscale =</span> xlim,</span>
<span id="cb56-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yscale =</span> ylim,</span>
<span id="cb56-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width  =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y_width), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snpc"</span>),</span>
<span id="cb56-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> x_width), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snpc"</span>),</span>
<span id="cb56-25">  )</span>
<span id="cb56-26"></span>
<span id="cb56-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw the grobs</span></span>
<span id="cb56-28">  grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb56-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes) {</span>
<span id="cb56-30">    grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygonGrob</span>(</span>
<span id="cb56-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x,</span>
<span id="cb56-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y,</span>
<span id="cb56-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(</span>
<span id="cb56-34">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>color,</span>
<span id="cb56-35">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>fill,</span>
<span id="cb56-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>linewidth</span>
<span id="cb56-37">      ),</span>
<span id="cb56-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp,</span>
<span id="cb56-39">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default.units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native"</span></span>
<span id="cb56-40">    )</span>
<span id="cb56-41">    grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(grob)</span>
<span id="cb56-42">  }</span>
<span id="cb56-43">}</span></code></pre></div>
</div>
<p>You’ll notice that the drawing code isn’t very sophisticated here either: it’s a simple loop that draws the individual shape objects in the same order that they appear in the <code>sketch</code>. I’ve made no effort at all to make the code efficient. For now all I care about is that it works.</p>
<p>You can see it in action here, where I’ve created a very simple sketch called <code>sk</code> that includes the blue circle <code>cc</code> and pink triangle <code>tr</code>, and then drawn it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">sk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(cc, tr))</span>
<span id="cb57-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(sk)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<!-- 
### Fallback methods

The final thing we might want to do with this `draw()` method is provide a default method that S7 will use as a fallback in case it cannot find a more specific method. In the code below I use `class_any` to capture this, and all it does is provide a warning that `draw()` cannot plot the object and invisibly returns `NULL`. 


::: {.cell}

```{.r .cell-code}
method(draw, class_any) <- function(object, ...) {
  rlang::warn("No appropriate draw method found")
  return(invisible(NULL))
}
```
:::

::: {.cell}

```{.r .cell-code}
draw("a string is not drawable")
```

::: {.cell-output .cell-output-stderr}
```
Warning: No appropriate draw method found
```
:::
:::


-->
</section>
<section id="creating-art-programmatically" class="level3">
<h3 class="anchored" data-anchor-id="creating-art-programmatically">Creating art programmatically</h3>
<p>Recall earlier, back when I was talking about constructors, how I said that the primary reason for writing my custom constructor functions was user convenience, so that stylistic properties could be passed to <code>circle()</code> etc as “top level” arguments rather than being bundled within a call to <code>style()</code>? Well, that was true as far as it goes, but the convenience factor is a little bit more substantial than saving myself some keystrokes. By creating an API that exposes the stylistic and structural parameters as top level arguments, I can create a data frame that describes all the desired features of a sketch, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb58-2">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb58-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb58-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill   =</span> color,</span>
<span id="cb58-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb58-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb58-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb58-8">)</span>
<span id="cb58-9">values</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 100 × 5
   color   fill        x     y radius
   &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt; &lt;int&gt;  &lt;dbl&gt;
 1 #e50000 #e50000     3     5  0.162
 2 #028121 #028121     2     5  0.239
 3 #e50000 #e50000     2     1  0.364
 4 #ff8d00 #ff8d00     5     5  0.225
 5 #004cff #004cff     2     4  0.241
 6 #ffee00 #ffee00     5     2  0.159
 7 #770088 #770088     4     6  0.364
 8 #ff8d00 #ff8d00     5     2  0.174
 9 #ffee00 #ffee00     4     1  0.482
10 #ffee00 #ffee00     6     5  0.459
# ℹ 90 more rows</code></pre>
</div>
</div>
<p>Because the column names in <code>values</code> match the corresponding arguments to <code>circle()</code>, including those that are passed down to <code>style()</code>, I can create a list of 100 circles to plot using a single call to <code>purrr::pmap()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">circles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, circle)</span></code></pre></div>
</div>
<p>I’m not going to print this <code>circles</code> object because the output would be quite long, but the key thing is that it is a list of 100 objects that possess the <code>drawable</code> class, so I can pass it straight to <code>sketch()</code>, and then pass the corresponding sketch straight to <code>draw()</code>. So the process of constructing my plot is as simple as this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">circles <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-43-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Finally we are starting to see some artistic payoff here, and some potential benefit to using a system like this rather than ggplot2. As much as I adore using ggplot2 for artistic purposes, it’s often clunky to do so precisely because ggplot2 is an extremely powerful tool that is designed for a different purposes. Art is not data visualisation (though arguably they are related), and the design goals of an artistic system are not always aligned with the design goals of a data visualisation tool.</p>
</section>
</section>
<section id="act-iii-ambient" class="level2">
<h2 class="anchored" data-anchor-id="act-iii-ambient">Act III: Ambient</h2>
<blockquote class="blockquote">
<p>I have become fearful now. Anxiety about travelling too far from home has become severe. I know my neighbourhood. I know where all the exits are. I know which bathrooms are safe. Travel to an unfamiliar part of Sydney makes me anxious. Travel to another city makes me panic. Travel to another country is terrifying.</p>
</blockquote>
<p>To be entirely honest with you, dear reader, everything up to this point in the post has been an exercise in creating the infrastructure for artistic work using S7 and grid. The <code>circle()</code> and <code>shape()</code> functions are both handy little things for illustrating the basic ideas, while <code>sketch()</code> and <code>draw()</code> serve as the core vehicles for turning abstract descriptions into actual art. But there’s a limit to how much artistic work you can pull off using only circles, so the time has come to spread our wings and start writing more interesting <code>drawable</code> subclasses that can be used to create more intricate pieces.</p>
<p>Let’s get to it, shall we?</p>
<section id="blobs" class="level3">
<h3 class="anchored" data-anchor-id="blobs">Blobs</h3>
<p>At this point in the process of exploring my new system I’ve only written two fun classes that I’ve defined so far, the <code>blob</code> and <code>ribbon</code> objects that you saw at the start of the post. Let’s start with blobs.</p>
<p>A blob object is essentially a circle with a non-constant radius, where pointwise variation in the radius is calculated using Perlin noise with the assistance of the ambient package. This is actually a type of object I’ve used in my art before. The <a href="https://art.djnavarro.net/gallery/perlin-blobs/">Perlin Blobs</a> series I created a few years ago uses exactly this trick. In the code below all I’m really doing is defining a <code>blob()</code> function (and corresponding S7 class) that incorporates this idea within the “sketches” framework that I’ve just built. Here’s the entire source code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">blob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb62-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blob"</span>,</span>
<span id="cb62-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb62-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb62-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x          =</span> class_numeric,</span>
<span id="cb62-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y          =</span> class_numeric,</span>
<span id="cb62-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius     =</span> class_numeric,</span>
<span id="cb62-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range      =</span> class_numeric,</span>
<span id="cb62-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n          =</span> class_integer,</span>
<span id="cb62-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency  =</span> class_numeric,</span>
<span id="cb62-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves    =</span> class_integer,</span>
<span id="cb62-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed       =</span> class_integer,</span>
<span id="cb62-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb62-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb62-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb62-16">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb62-17">        pointwise_radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb62-18">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb62-19">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fbm,</span>
<span id="cb62-20">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius,</span>
<span id="cb62-21">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius,</span>
<span id="cb62-22">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency,</span>
<span id="cb62-23">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>seed,</span>
<span id="cb62-24">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves</span>
<span id="cb62-25">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-26">          ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>range)</span>
<span id="cb62-27">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(</span>
<span id="cb62-28">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pointwise_radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb62-29">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pointwise_radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb62-30">        )</span>
<span id="cb62-31">      }</span>
<span id="cb62-32">    )</span>
<span id="cb62-33">  ),</span>
<span id="cb62-34">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constructor =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb62-35">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb62-36">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb62-37">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb62-38">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L,</span>
<span id="cb62-39">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb62-40">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L,</span>
<span id="cb62-41">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L,</span>
<span id="cb62-42">                         ...) {</span>
<span id="cb62-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_object</span>(</span>
<span id="cb62-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawable</span>(),</span>
<span id="cb62-45">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb62-46">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb62-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> radius,</span>
<span id="cb62-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> range,</span>
<span id="cb62-49">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb62-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb62-51">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb62-52">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb62-53">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(...)</span>
<span id="cb62-54">    )</span>
<span id="cb62-55">  },</span>
<span id="cb62-56">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb62-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb62-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb62-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be length 1"</span>)</span>
<span id="cb62-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>range) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"range must be length 1"</span>)</span>
<span id="cb62-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb62-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency must be length 1"</span>)</span>
<span id="cb62-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octaves must be length 1"</span>)</span>
<span id="cb62-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seed must be length 1"</span>)</span>
<span id="cb62-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be a non-negative number"</span>)</span>
<span id="cb62-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>range <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"range must be a non-negative number"</span>)</span>
<span id="cb62-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency must be a non-negative number"</span>)</span>
<span id="cb62-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb62-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octaves must be a positive integer"</span>)</span>
<span id="cb62-70">  }</span>
<span id="cb62-71">)</span></code></pre></div>
</div>
<p>The code for <code>blob()</code> is a bit longer than the corresponding code for <code>circle()</code>, and all the interesting work is done within the computed property that constructs the <code>points</code> object. This post is already fairly long, so I won’t unpack all the detail, but I will note that if you read my blog post on the <a href="https://blog.djnavarro.net/posts/2024-01-26_splatter/">Splatter</a> system this code probably seems familiar, at least to the extent that I’m using the tools from the ambient package in a fairly similar way.</p>
<p>The one new trick hidden in this code is the fact that the Perlin noise is computed at the <em>actual</em> coordinates where the object is to be drawn in the plot (see the <code>x</code> and <code>y</code> arguments to <code>ambient::fracture()</code>. This part is critical to producing the spatial autocorrelation, because any two blobs constructed using the same <code>seed</code> value will use the same underlying generator, and the distortions associated with those objects will vary smoothly in the actual coordinate space within which the are subsequently drawn.</p>
<p>In any case, here is a simple <code>blob</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">bb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">blob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L)</span>
<span id="cb63-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(bb)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-45-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>So, using the rainbow <code>palette</code> I defined at the top of the post, we can create a new piece that is somewhat similar in style to the blob-based art I showed at the very beginning:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb64-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>),</span>
<span id="cb64-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>),</span>
<span id="cb64-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb64-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb64-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L,</span>
<span id="cb64-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb64-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb64-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fill</span>
<span id="cb64-10">)</span>
<span id="cb64-11"></span>
<span id="cb64-12">blobs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, blob)</span>
<span id="cb64-13">blobs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-46-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Honestly, I feel it could do with a bit of work to be interesting, but you get the idea.</p>
</section>
<section id="ribbons" class="level3">
<h3 class="anchored" data-anchor-id="ribbons">Ribbons</h3>
<blockquote class="blockquote">
<p>At least once a week, my mind flashes back to the time early in transition when I was told that if I was ever caught using the women’s bathroom I’d be violently assaulted as punishment for the transgression. I find myself wondering how serious that threat was, if it was meant in earnest. The context for the threat is long gone. The fear it created has never quite disappeared.</p>
</blockquote>
<p>Next let’s take a look at <code>ribbon()</code>. Once you’ve wrapped your head around the Perlin noise trick used by <code>blob()</code>, you can see that ribbons are a fairly trivial variation on the theme. Ribbons are similar to blobs insofar as they use Perlin noise to describe pointwise variation along a path, but whereas <code>blob()</code> uses this trick to vary the radius of a “circle”, <code>ribbon()</code> starts with a linear segment and then constructs a symmetric polygon around it whose width at any given point is defined using the Perlin noise trick. The result is that <code>ribbon</code> objects end up looking rather similar to violin plots used to vidualise distributions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">ribbon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb65-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ribbon"</span>,</span>
<span id="cb65-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb65-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb65-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x          =</span> class_numeric,</span>
<span id="cb65-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y          =</span> class_numeric,</span>
<span id="cb65-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend       =</span> class_numeric,</span>
<span id="cb65-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend       =</span> class_numeric,</span>
<span id="cb65-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width      =</span> class_numeric,</span>
<span id="cb65-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n          =</span> class_integer,</span>
<span id="cb65-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency  =</span> class_numeric,</span>
<span id="cb65-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves    =</span> class_integer,</span>
<span id="cb65-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed       =</span> class_integer,</span>
<span id="cb65-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb65-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb65-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb65-17">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>xend, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb65-18">        y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>yend, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb65-19">        displacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb65-20">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb65-21">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fbm,</span>
<span id="cb65-22">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb65-23">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb65-24">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency,</span>
<span id="cb65-25">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>seed,</span>
<span id="cb65-26">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves</span>
<span id="cb65-27">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb65-28">          ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb65-29">        taper <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(</span>
<span id="cb65-30">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb65-31">        )</span>
<span id="cb65-32">        width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> displacement <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> taper <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>width</span>
<span id="cb65-33">        dx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>xend <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x</span>
<span id="cb65-34">        dy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>yend <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y</span>
<span id="cb65-35">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(</span>
<span id="cb65-36">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dy, x[self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width[self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dy),</span>
<span id="cb65-37">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx, y[self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> width[self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx)</span>
<span id="cb65-38">        )</span>
<span id="cb65-39">      }</span>
<span id="cb65-40">    )</span>
<span id="cb65-41">  ),</span>
<span id="cb65-42">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constructor =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb65-43">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb65-44">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb65-45">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb65-46">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb65-47">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L,</span>
<span id="cb65-48">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb65-49">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L,</span>
<span id="cb65-50">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L,</span>
<span id="cb65-51">                         ...) {</span>
<span id="cb65-52">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_object</span>(</span>
<span id="cb65-53">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawable</span>(),</span>
<span id="cb65-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb65-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb65-56">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> xend,</span>
<span id="cb65-57">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> yend,</span>
<span id="cb65-58">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> width,</span>
<span id="cb65-59">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb65-60">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb65-61">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb65-62">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb65-63">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(...)</span>
<span id="cb65-64">    )</span>
<span id="cb65-65">  },</span>
<span id="cb65-66">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb65-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb65-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb65-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>xend) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xend must be length 1"</span>)</span>
<span id="cb65-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>yend) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yend must be length 1"</span>)</span>
<span id="cb65-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>width) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width must be length 1"</span>)</span>
<span id="cb65-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb65-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency must be length 1"</span>)</span>
<span id="cb65-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octaves must be length 1"</span>)</span>
<span id="cb65-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seed must be length 1"</span>)</span>
<span id="cb65-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width must be a non-negative number"</span>)</span>
<span id="cb65-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency must be a non-negative number"</span>)</span>
<span id="cb65-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb65-79">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octaves must be a positive integer"</span>)</span>
<span id="cb65-80">  }</span>
<span id="cb65-81">)</span></code></pre></div>
</div>
<p>Here’s the <code>ribbon</code> class in action:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">rb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ribbon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L)</span>
<span id="cb66-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(rb)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-48-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Using the same general tricks as before, we can construct the image by defining a <code>values</code> data frame, passing it to <code>purrr::pmap()</code> to construct a list of ribbons, and then passing those ribbons to <code>sketch()</code> and <code>draw()</code>. Here’s the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>L)</span>
<span id="cb67-2">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb67-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb67-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb67-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb67-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y,</span>
<span id="cb67-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb67-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L,</span>
<span id="cb67-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb67-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fill</span>
<span id="cb67-11">)</span>
<span id="cb67-12"></span>
<span id="cb67-13">ribbons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, ribbon)</span>
<span id="cb67-14">ribbons <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb67-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb67-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-49-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I’m quite fond of this one. Honestly I prefer it to most of the Mardi Gras graphic design work I’ve seen plastered all over Sydney lately.</p>
</section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>So we come to the end of another blog post and, unsurprisingly, I have ended up back where I started. I find myself thinking about the Mardi Gras festivities that are currently taking over Sydney. I do like Mardi Gras. It’s a celebration and a party, true, but there is value in a highly visible event that allow the queer community to take centre stage for a few short weeks every year. Besides, parties are fun.</p>
<p>But there is a side to it that I don’t love. Lately it has often felt to me that there is a pressure on us to tell <em>only</em> the happy and uplifting stories. Yes, we deserve to celebrate, but I can’t help thinking about the Marks Park Memorial. I visited it this morning, and it was not an uplifting or happy moment. It felt dark, sombre, and sad.</p>
<p>And therein lies the part that makes me uneasy. I keep thinking about all those people who are not part of the queer community who insist on telling me that “everything is different now, everyone is so accepting now”. I keep wondering if the reason that people keep telling me this – despite the obvious falseness to the claim – is that the only thing they ever see are the parties. The celebrations are what they remember; the hate crimes are what they forget.</p>
<p>Queer people don’t have those memory lapses. We remember the hate crimes, both past and present. We remember because those stories are still a part of our daily experience of the world. But they seem to have become invisible to those outside our community, even those who believe themselves to be allies. So it comes to pass that outsiders come to believe that the world is much kinder to us than it actually is.</p>
<p>The little slivers from my personal experience are not things I share lightly. The events they refer to were traumatic, and of course there are other like them I’ve chosen not to discuss. I have shared only a small slice of what my life is actually like. I chose to share these ones specifically because these are the ones I’m mostly recovered from. These memories do cause problems for me from time to time, but not as much as they used to.</p>
<p>Even so, it is not pleasant to revisit this history. I do so here not because I want to, but because if we keep our histories secret then people start to believe the pleasant lies that they tell themselves about our world.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Look, I know I’m hitting the reader over the head with the metaphor, but I’m not trying to be subtle here.↩︎</p></li>
<li id="fn2"><p>For folks outside of the R community: S3, S4, and S7 are all considered to be “functional” OOP systems, and they are broadly similar to function overloading in C++ and, I have recently learned, is also analogous to how methods are defined in Julia for functions of the same name but with different signatures. The functional style of OOP programming is one in which methods attach to generic functions (or to function names), as opposed to more traditional “encapsulated” OOP systems in which methods attach to objects. The encapsulated style is standard in Python, for example, and also appears in R via the <a href="https://adv-r.hadley.nz/r6.html">R6</a> OOP system that I have used in other blog posts (e.g., <a href="https://blog.djnavarro.net/posts/2022-12-22_queue/">here</a> and <a href="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/">here</a>). I mention these tiresome details because I have learned to my detriment that if I don’t exhaustively list the various distinctions between OOP systems and how R adopts multiple styles, I <em>will</em> have to deal with tiresome people mansplaining to me how R is bad at OOP and how OOP in R is wrong and isn’t <em>really</em> OOP and honestly I’m asleep before I finish reading the complaint.↩︎</p></li>
<li id="fn3"><p>A <em>Slow Horses</em> reference, in case you missed it.↩︎</p></li>
<li id="fn4"><p>Or at least not without a lot of extra effort on the developer side.↩︎</p></li>
<li id="fn5"><p>In contrast S3 is so chaotically informal that it doesn’t have any real notion of an “accessor” operator. Some S3 classes are atomic objects internally (e.g., a Date is simply a double with some attributes) and have no accessor operator, whereas others are lists internally and as such use <code>$</code> as the accessor.↩︎</p></li>
<li id="fn6"><p>Like S3 and S4 and like the vast majority of R objects, S7 objects have copy-on-modify semantics. This is distinct to environments and R6 classes which have reference semantics. But let’s be honest, shall we? You either (a) already know this, (b) don’t care, or (c) don’t find this telegraphic explanation very helpful because it really isn’t very helpful. My aims in this post are pretty limited so really if you want to wrap your head around this stuff a better bet is to read <a href="https://adv-r.hadley.nz/">Advanced R</a>.↩︎</p></li>
<li id="fn7"><p>I mean, at this point I’m effectively turning my circle into a pentagon, but of course I could always change <code>n</code> again later if I wanted a different number of points.↩︎</p></li>
<li id="fn8"><p>LOL. Let’s be honest, there is always another way if you try hard enough but the point here is that you’re not supposed to modify a read-only property and S7 will throw up roadblocks if you try to do it.↩︎</p></li>
<li id="fn9"><p>Ideally I’d like to make this an abstract class, in which users can’t directly create a new <code>drawable</code>. In principle this is achievable by setting <code>abstract = TRUE</code> in the call to <code>new_class()</code>, but what I’ve found so far is that creates problems when – as happens slightly later in the post – I define a custom constructor function for my “circle-subclassing-drawable” class. I imagine this will be dealt with at some point, but for now I’m just ignoring the idea of abstract classes.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Creating New Generative Art Tools in {R} with Grid, Ambient,
    and {S7}},
  date = {2024-02-25},
  url = {https://blog.djnavarro.net/posts/2024-02-25_s7},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Creating New Generative Art Tools in R
with Grid, Ambient, and S7.”</span> February 25, 2024. <a href="https://blog.djnavarro.net/posts/2024-02-25_s7">https://blog.djnavarro.net/posts/2024-02-25_s7</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Object-Oriented Programming</category>
  <category>Grid Graphics</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-02-25_s7/</guid>
  <pubDate>Sat, 24 Feb 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-02-25_s7/mardi-gras.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Splatter</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-26_splatter/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Over the last few weeks I’ve been posting generative art pieces on mastodon from a generative art system I’ve called <a href="https://art.djnavarro.net/gallery/splatter/">splatter</a>. It creates pieces like these:</p>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_708.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_709.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_973.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>The splatter series has a lot in common with other generative art systems I’ve built in the past, and in many respects is a spiritual descendant of both <a href="https://art.djnavarro.net/gallery/curled/">curled</a> and <a href="https://art.djnavarro.net/gallery/water-colours/">water colours</a>.<sup>1</sup> However, the system has developed enough of its own “look and feel” by now that I think of splatter as its own thing, deserving a writeup of its very own.</p>
<section id="the-basic-idea" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-basic-idea">The basic idea</h2>
<p>The core logic of splatter is pretty simple three-step process:</p>
<ol type="1">
<li><p>Create a “base” image that provides the large-scale structure to the piece (left panel below).</p></li>
<li><p>Using the “base” data as input, create a “flowing” version of the same image (middle panel below). We do this by placing a particle at every cell in the grid, defining a vector field over the grid that describes how each particle moves, and then tracing out the paths of all the particles over many iterations.</p></li>
<li><p>Taking the “flowing” data as input, apply a randomly generated palette and create a prettily-coloured version of the image (right panel below).</p></li>
</ol>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/base.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/flow.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/splatter.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>I’ll unpack these steps below, showing the actual code used to create these images and walking through some of the logic and design considerations that goes into building a system like this one.<sup>2</sup></p>
</section>
<section id="creating-a-base-image" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="creating-a-base-image">Creating a base image</h2>
<p>First let’s take a look at the base images. As you can see from the one shown in the left panel above, these aren’t super-complicated things and they could be generated in many different ways. Somewhat arbitrarily, I decided that for this system I’d build them using via simple cellular automaton implemented in C++ and called from R via <a href="https://www.rcpp.org/">Rcpp</a>. There’s no principled reason for this, I just happened to have suitable code lying around from a previous generative art system called <a href="https://art.djnavarro.net/gallery/stoneskip/">stoneskip</a>, which produces pieces like these:<sup>3</sup></p>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_9.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_14.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_16.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>That said, the implementation used in splatter is different from the stoneskip system. The C++ code below defines an <code>automaton()</code> function that is exposed to R via Rcpp, and can be used to create the base images:<sup>4</sup> <sup>5</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// wrap position to grid</span></span>
<span id="cb1-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// automaton run function</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb1-13">NumericMatrix automaton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">  </span>
<span id="cb1-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">  </span>
<span id="cb1-25">  NumericMatrix grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-28">      grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-31">  </span>
<span id="cb1-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-33">    source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-34">    source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-35">    source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>source_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> source_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-36">    span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-37">    span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-38">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-39">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-41">      c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-43">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-44">        grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> source_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-45">        row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-46">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-47">      col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-49">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-50">  </span>
<span id="cb1-51">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>Ultimately this algorithm is very simple. It’s approximately this:</p>
<ol type="1">
<li>Create a <code>grid</code> matrix and populate every element with a random number.</li>
<li>On every iteration:
<ol type="a">
<li>Pick a random cell in <code>grid</code> to be the “source cell” and treat the value currently assigned to that cell to be the “source value”.</li>
<li>Define a rectangular “neighbourhood” around that cell (with a random width and height).</li>
<li>For every cell in the neighbourhood, update the value to be the average of its current value and the source value.</li>
</ol></li>
<li>Return <code>grid</code>.</li>
</ol>
<p>If you ran it long enough it would eventually produce a completely homogeneous grid, but if you run it for a modest amount of time you end up with somewhat smooth blobbish shapes.</p>
<p>In the normal course of events this code would live in <code>.cpp</code> file and then I’d call <code>Rcpp::sourceCpp()</code> from R to trigger compilation and linking to R, but in the context of this blog post I don’t have to because I’m <a href="https://bookdown.org/yihui/rmarkdown/language-engines.html#rcpp">using the Rcpp language engine</a> which automatically takes care of that within the R session that is used to render the post. So we can skip that step, and go straight to the part where we define a <code>base_data()</code> function in R that constructs a data frame with columns specifying row and column indices, and using the <code>automaton()</code> function to assign a value to the corresponding cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">base_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, rows, cols, iterations, span) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb2-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> cols),</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> rows),</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-9">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(),</span>
<span id="cb2-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automaton</span>(rows, cols, iterations, span)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-13">        ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb2-14">    )</span>
<span id="cb2-15">}</span></code></pre></div>
</div>
<p>The primary intention in this function is to create a data frame that has columns <code>x</code> and <code>y</code> that specify coordinates for every element in a grid, and a <code>value</code> column that is populated by calling the <code>automaton()</code> function that Rcpp exposes to the R session.<sup>6</sup> Here it is in action:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"></span>
<span id="cb3-9">base</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,000 × 6
       x      y     z  iter    id value
   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1     0 0          1     0     1 0.850
 2     0 0.0101     1     0     2 0.801
 3     0 0.0202     1     0     3 0.818
 4     0 0.0303     1     0     4 0.814
 5     0 0.0404     1     0     5 0.736
 6     0 0.0505     1     0     6 0.704
 7     0 0.0606     1     0     7 0.704
 8     0 0.0707     1     0     8 0.740
 9     0 0.0808     1     0     9 0.640
10     0 0.0909     1     0    10 0.595
# ℹ 9,990 more rows</code></pre>
</div>
</div>
<p>You can see from the output that there are a few other columns in the output. These are added because this base data is used as the initial state for a set of particles that we’re going to place within a vector field and then trace their paths. The logic for including each of these:</p>
<ul>
<li><p>We might want to use a vector field that moves points in three dimensions, so there’s also a <code>z</code> column (which is set to a constant value in this case). I’m not really using this feature in the splatter system, but I’ve done it in the past in other systems. One handy trick if you want to give a system a feeling of “mild inhomogeneity” – with different points appearing to move according to similar but not identical flow fields – is to displace each point by a small amount in the <code>z</code> coordinate, and then use a three-dimensional flow field to move the points in three dimensions, while only plotting the <code>x</code> and <code>y</code> values. You can also use the “hidden <code>z</code> coordinate” trick as a way of smoothly changing the colour.</p></li>
<li><p>Similarly, because this base data is used as the initial state for an iterative process, there is also a column <code>iter</code> that records the iteration number (set to 0 for the base data). One the one hand this is nice for housekeeping purposes (e.g., filtering the data to find the subset corresponding to a particular iteration), but later on we’ll actually use this in the plots.</p></li>
<li><p>Finally, we have a <code>id</code> column that assigns each element of the grid a unique number, which can come in handy later on if we want to trace out the path followed by a single particle.</p></li>
</ul>
<p>All that being said, at this point in the development of our system the things we’re most interested in are the <code>x</code> and <code>y</code> coordinates of each cell in our grid, and the <code>value</code> that we use to provide an initial colour to that location. At this point we don’t actually have a genuine palette to map <code>value</code> onto an actual colour, so for now we’ll just use the <a href="https://ggplot2.tidyverse.org/">ggplot2</a> default:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> value</span>
<span id="cb5-6">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-7">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-9">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-10">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-11">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/base-image-plot-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>This is our base image. It’s not super exciting or even particularly aesthetically pleasing, but that’s not the point. What I’m looking for in the base image is something that varies fairly smoothly to create an overall “shape” for the final image, and with enough random variations and irregularities to produce interesting textures in the final image. When building a system like this I’ve found that it’s important to have <em>something</em> that plays this role. They do a huge amount of work in defining the “composition” of the final art work, and if you don’t put a bit of thought into what this part of the system looks like you can end up with pieces that don’t have global structure, and feel a bit bland.</p>
<p>That being said, I don’t think there’s anything very special about the <code>automaton()</code> function I have used in the splatter system. It was a pretty arbitrary choice, and I’m entirely certain that you could swap it out for any number of alternative algorithms and end up with fabulous pieces.</p>
</section>
<section id="creating-the-flow" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-flow">Creating the flow</h2>
<p>Now that we have a base image to provide a bit of global structure, we’re going to need a vector field that we can use to create a sense of flow in the piece. This part is by far the most elaborate part of splatter, and it relies heavily on the <a href="https://ambient.data-imaginist.com/">ambient</a> package. I’ll start by writing a function <code>curl_step()</code> that defines a vector field that specifies, for every point defined by <code>x</code>, <code>y</code>, and <code>z</code> coordinates, how quickly and in what direction a particle located at that point is moving. When passed a data frame <code>data</code> that contains columns <code>x</code>, <code>y</code>, and <code>z</code>, it returns a new data frame with updated coordinates derived by moving each point a small distance defined by the relevant element in the vector field.<sup>7</sup> Additionally, since our input data frame has an <code>iter</code> column corresponding to the iteration number (recall earlier our “base image” has <code>iter = 0</code> for every cell), the output data frame records the updated iteration number.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">curl_step <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb6-2">                      iteration, </span>
<span id="cb6-3">                      scale, </span>
<span id="cb6-4">                      octaves, </span>
<span id="cb6-5">                      seed) {</span>
<span id="cb6-6">  </span>
<span id="cb6-7">  noise_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb6-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x,</span>
<span id="cb6-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb6-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z,</span>
<span id="cb6-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb6-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fracture,</span>
<span id="cb6-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb6-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>ridged,</span>
<span id="cb6-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb6-16">  )</span>
<span id="cb6-17">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iteration</span>
<span id="cb6-18">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-19">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-20">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-21">  data</span>
<span id="cb6-22">}</span></code></pre></div>
</div>
<p>There’s quite a lot going on internally here, and I’m not going to dive deeply into the ambient package in this post. I’ll provide a visual illustration of what happens when <code>curl_step()</code> is called – it’s a bit lower in the post after I define the <code>curl_loop()</code> function – but if you’re interested in a more detailed explanation of the logic underpinning this code, I’ll refer you to the notes I wrote for my <a href="https://art-from-code.netlify.app/">art from code</a> workshop I gave a couple of years ago. The notes have a section discussing <a href="https://art-from-code.netlify.app/day-1/session-2/#curl-of-a-spatial-noise-pattern">curl fields</a> and how they are generated using <code>ambient::curl_noise()</code>, along with sections discussing how <code>ambient::fracture()</code> can be used to create more elaborate and visually interesting flow fields with fractals.</p>
<p>In any case let’s move onto the next step, in which I’ll define a function <code>curl_loop()</code>that uses <code>purrr::accumulate()</code> to iteratively apply the <code>curl_step()</code> function. It starts with an initial state provided by the base image, and then treats the output of every call to <code>curl_step()</code> as the input to the next call. All the intermediate results are stored, resulting in a list of data frames (one per iteration) that is then collapsed into one large data frame that traces the paths of all points across many iterations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">curl_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb7-2">                      seed, </span>
<span id="cb7-3">                      iterations, </span>
<span id="cb7-4">                      scale, </span>
<span id="cb7-5">                      octaves) {</span>
<span id="cb7-6">  states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(</span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations,</span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> curl_step,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> data,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> scale,</span>
<span id="cb7-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb7-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed</span>
<span id="cb7-13">  )</span>
<span id="cb7-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(states)</span>
<span id="cb7-15">}</span></code></pre></div>
</div>
<p>Now that we have these functions, let’s apply them to create a data frame called <code>flow</code> that takes the grid of points defined in our <code>base</code> data frame and repeatedly moves each of them along paths defined by our vector field:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">flow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-7">  )</span>
<span id="cb8-8"></span>
<span id="cb8-9">flow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 6
       x      y     z  iter    id value
   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1     0 0          1     0     1 0.850
 2     0 0.0101     1     0     2 0.801
 3     0 0.0202     1     0     3 0.818
 4     0 0.0303     1     0     4 0.814
 5     0 0.0404     1     0     5 0.736
 6     0 0.0505     1     0     6 0.704
 7     0 0.0606     1     0     7 0.704
 8     0 0.0707     1     0     8 0.740
 9     0 0.0808     1     0     9 0.640
10     0 0.0909     1     0    10 0.595
# ℹ 999,990 more rows</code></pre>
</div>
</div>
<p>This <code>flow</code> data frame provides all the structural elements required to draw the plot. Here’s what it looks like when we create an image using the default shades-of-blue palette in ggplot2:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> flow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb10-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb10-7">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb10-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-12">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb10-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb10-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb10-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-16">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb10-17">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb10-18"></span>
<span id="cb10-19">pic</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/flowing-plot-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>Looking at this plot you get a visceral sense of motion and flow, which is of course the intention, but it’s hard to get a sense of how each of the “cells” in our original base image is moving. Again this is by design. You’re not supposed to be able to see that in the final image. But, for the purposes of unpacking it, here’s an animated version created using <a href="https://gganimate.com/">gganimate</a> which traces out the pattern of movement for every cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gganimate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition_time</span>(iter)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/anim.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" width="800"></p>
</figure>
</div>
<p>In this animation you can see how the plot begins with 10000 “particles” laid out on a regular grid (i.e., there’s one particle for each cell in the original base data), and then iteratively “moves” each of those particles along a path defined by the vector field (created by repeatedly calling <code>curl_step()</code>). You can also see that each particle is gradually shrinking in size over time, a feature that is also used in the splatter plots.</p>
<p>To unpack it a little further, we can use the <code>flow</code> data to create a visual representation of what the vector field itself looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">flow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(iter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id</span>
<span id="cb12-7">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb12-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(</span>
<span id="cb12-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">008</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>),</span>
<span id="cb12-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ends =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>,</span>
<span id="cb12-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"open"</span></span>
<span id="cb12-13">    )</span>
<span id="cb12-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-15">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb12-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb12-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb12-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-19">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/vector-field-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>In this plot, what I’ve done is taken the locations of each of the particles at iteration 0 (because at time 0 the points all sit on a regular grid) and drawn a little arrow that shows where each of them move to when <code>curl_step()</code> is applied. This gives us a rough visualisation of what the vector field looks like. The field itself doesn’t change, but of course once you start moving the particles they no longer sit on a nice grid. To illustrate both of these facts, here’s the same plot but this time I show the step from iteration 10 to iteration 11:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/vector-field-2-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>At any given location the arrow is still the same (because the vector field itself is invariant), but it’s not a nice clean grid in this version because the particles will naturally tend to bunch up as you move them through the field.<sup>8</sup></p>
<p>In any case, I think that at this point we have a fairly decent sense of how the splatter pieces are shaped by the underlying vector field, so it’s time to move on…</p>
</section>
<section id="choosing-a-palette" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="choosing-a-palette">Choosing a palette</h2>
<p>The final part of the splatter system is the paletting system. At this point I confess I started to get a little bit lazy, and created a very simple paletting system that doesn’t always work. Basically, the system is hard coded with a list of 100 colours and it randomly samples 4 of them to define a linear gradient palette that interpolates between those four shades. Here’s a <code>sample_palette()</code> function that implements this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">sample_palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, size) {</span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb13-3">  cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb13-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>,</span>
<span id="cb13-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>,</span>
<span id="cb13-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>,</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>,</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>,</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>,</span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>,</span>
<span id="cb13-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>,</span>
<span id="cb13-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>,</span>
<span id="cb13-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>,</span>
<span id="cb13-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>,</span>
<span id="cb13-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>,</span>
<span id="cb13-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>,</span>
<span id="cb13-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>,</span>
<span id="cb13-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>,</span>
<span id="cb13-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>,</span>
<span id="cb13-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>,</span>
<span id="cb13-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>,</span>
<span id="cb13-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>,</span>
<span id="cb13-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span></span>
<span id="cb13-24">  )</span>
<span id="cb13-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cols, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size)</span>
<span id="cb13-26">}</span></code></pre></div>
</div>
<p>Here’s a few random palettes generated using this function:</p>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb14-2">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb14-3">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-1.png" class="img-fluid" width="480"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-2.png" class="img-fluid" width="480"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-3.png" class="img-fluid" width="480"></p>
</div>
</div>
</div>
<p>It doesn’t always produce satisfying colour schemes, but it succeeds often enough for the system to be workable. And now that we have a paletting system we can write a <code>make_plot()</code> function that applies the palette using <code>ggplot2::scale_colour_gradientn()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">make_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, seed) {</span>
<span id="cb15-2">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-3">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-4">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb15-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb15-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb15-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb15-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb15-9">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-10">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb15-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb15-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb15-13">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-14">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb15-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb15-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb15-17">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-18">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-19">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-20">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb15-21">}</span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(flow, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/shading-plots-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>At this point, we have our final image.</p>
</section>
<section id="exploring-the-system" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="exploring-the-system">Exploring the system</h2>
<p>In order to play around with system, it’s helpful to wrap the whole generative process from beginning to end in a <code>splatter()</code> function that generates images. It takes a single argument <code>seed</code>, which can either be a scalar seed value that is used for all components to the system, or it can be a three-element vector that supplies separate seeds for the base data, the vector field, and the palette:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">splatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb16-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb16-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb16-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb16-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb16-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb16-18">}</span></code></pre></div>
</div>
<p>The ability to set the seed separately for each of the components is useful for illustrating the role played by each one. First let’s look at what happens when we hold the base image and the vector field constant, but vary the palette:</p>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>As you’d expect, these are all structurally the same image: same shapes, same flowing look, but with very different colour schemes, and of course this drastically changes the feel of each piece.</p>
<p>Alternatively, we can keep the base image and palette constant, but use a different vector field each time. Looking at the images below, you can see how this changes the “fine grain” of the image. The effect is much subtler, but it’s definitely noticeable. It’s almost as if someone were trying to paint the same piece all three times, but the brush strokes are different every time:</p>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>Finally, we can vary the base image but keep the vector field and palette the same:</p>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>This, to my mind, is the strangest effect of all. Varying the base image changes the overall distribution of, as you’d expect, but when you look very closely at the images you can see that they all have the same “brush strokes”. The swirling circular pattern in the centre-left of image (which was very evident in the animated image) is present in all three images: on the left image it shows up as a pattern of red and orange strokes curling around one another, but on the right that same swirl is now mostly pink and black. For the image in the middle the swirl is harder to see because it’s almost entirely painted in orange, with just a little bit of black.</p>
</section>
<section id="the-artist-statement" class="level2">
<h2 class="anchored" data-anchor-id="the-artist-statement">The artist statement</h2>
<p>So that’s everything, I guess. I wanted to write something about the splatter pieces because I’ve enjoyed building the system, and I really like the look and feel of these pieces. They’re naturalistic enough to feel organic, and artificial enough to feel like generative art unashamedly <em>being</em> generative art. Splatter is not trying to look like painted artwork, it is deliberately its own thing.</p>
<p>The ethos that underpins splatter is one I’m fond of artistically, and one that cuts a little deeply personally. So much of my everyday existence is spent worrying about “passing” for something I’m not,<sup>9</sup> and it’s not a great feeling. Generative art shouldn’t need to “pass”. It shouldn’t be viewed as a second-class artistic citizen that is merely a simulacrum of other kinds of artwork. It can be its own thing, with its own coherent and meaningful standards for artistic merit. Are the “splatter” pieces aesthetically appealing? Sometimes they are. Do they evoke emotions in the audience? Well, they do for me. Does the artist have some underlying intention behind the artwork that makes a claim about the world we live in? At the risk of making the subtext in this paragraph obvious, yes she does. Splatter isn’t a completely arbitrary thing, it was designed to walk that fine line between “pretending to be something else” and “being honest about what it truly is”.</p>
<p>As anyone who has lived in a closet can attest, that is a treacherous tightrope to walk.</p>
</section>



<div id="quarto-appendix" class="default"><section id="source-code" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Source code</h2><div class="quarto-appendix-contents">

<div class="cell">
<div class="code-with-filename">
<details class="code-fold">
<summary>C++ code for the splatter system</summary>
<div class="code-with-filename-file">
<pre><strong>automaton.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// wrap position to grid</span></span>
<span id="cb20-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// automaton run function</span></span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb20-13">NumericMatrix automaton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-14">  </span>
<span id="cb20-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-24">  </span>
<span id="cb20-25">  NumericMatrix grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-28">      grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-31">  </span>
<span id="cb20-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-33">    source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-34">    source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-35">    source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>source_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> source_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-36">    span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-37">    span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-38">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-39">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-41">      c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-43">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-44">        grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> source_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-45">        row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb20-46">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-47">      col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb20-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-49">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-50">  </span>
<span id="cb20-51">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<details class="code-fold">
<summary>R code for the splatter system</summary>
<div class="code-with-filename-file">
<pre><strong>splatter.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">Rcpp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sourceCpp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"automaton.cpp"</span>)</span>
<span id="cb21-2"></span>
<span id="cb21-3">base_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, rows, cols, iterations, span) {</span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb21-5">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb21-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> cols),</span>
<span id="cb21-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> rows),</span>
<span id="cb21-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb21-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-11">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb21-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(),</span>
<span id="cb21-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automaton</span>(rows, cols, iterations, span)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-15">        ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb21-16">    )</span>
<span id="cb21-17">}</span>
<span id="cb21-18"></span>
<span id="cb21-19">curl_step <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb21-20">                      iteration, </span>
<span id="cb21-21">                      scale, </span>
<span id="cb21-22">                      octaves, </span>
<span id="cb21-23">                      seed) {</span>
<span id="cb21-24">  </span>
<span id="cb21-25">  noise_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb21-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x,</span>
<span id="cb21-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb21-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z,</span>
<span id="cb21-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb21-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fracture,</span>
<span id="cb21-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb21-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>ridged,</span>
<span id="cb21-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb21-34">  )</span>
<span id="cb21-35">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iteration</span>
<span id="cb21-36">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-37">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-38">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-39">  data</span>
<span id="cb21-40">}</span>
<span id="cb21-41"></span>
<span id="cb21-42">curl_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb21-43">                      seed, </span>
<span id="cb21-44">                      iterations, </span>
<span id="cb21-45">                      scale, </span>
<span id="cb21-46">                      octaves) {</span>
<span id="cb21-47">  states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(</span>
<span id="cb21-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations,</span>
<span id="cb21-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> curl_step,</span>
<span id="cb21-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> data,</span>
<span id="cb21-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> scale,</span>
<span id="cb21-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb21-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed</span>
<span id="cb21-54">  )</span>
<span id="cb21-55">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(states)</span>
<span id="cb21-56">}</span>
<span id="cb21-57"></span>
<span id="cb21-58">sample_palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, size) {</span>
<span id="cb21-59">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb21-60">  cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb21-61">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>,</span>
<span id="cb21-62">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>,</span>
<span id="cb21-63">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>,</span>
<span id="cb21-64">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>,</span>
<span id="cb21-65">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>,</span>
<span id="cb21-66">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>,</span>
<span id="cb21-67">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>,</span>
<span id="cb21-68">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>,</span>
<span id="cb21-69">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>,</span>
<span id="cb21-70">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>,</span>
<span id="cb21-71">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>,</span>
<span id="cb21-72">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>,</span>
<span id="cb21-73">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>,</span>
<span id="cb21-74">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>,</span>
<span id="cb21-75">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>,</span>
<span id="cb21-76">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>,</span>
<span id="cb21-77">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>,</span>
<span id="cb21-78">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>,</span>
<span id="cb21-79">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>,</span>
<span id="cb21-80">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span></span>
<span id="cb21-81">  )</span>
<span id="cb21-82">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cols, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size)</span>
<span id="cb21-83">}</span>
<span id="cb21-84"></span>
<span id="cb21-85">make_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, seed) {</span>
<span id="cb21-86">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb21-87">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-88">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb21-89">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb21-90">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb21-91">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb21-92">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb21-93">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-94">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb21-95">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb21-96">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb21-97">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-98">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb21-99">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb21-100">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb21-101">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-102">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-103">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-104">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb21-105">}</span>
<span id="cb21-106"></span>
<span id="cb21-107">splatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb21-108">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb21-109">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb21-110">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb21-111">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb21-112">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb21-113">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb21-114">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb21-115">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb21-116">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-117">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb21-118">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb21-119">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb21-120">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb21-121">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb21-122">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-123">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb21-124">}</span></code></pre></div>
</details>
</div>
</div>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>See <a href="../../posts/2021-09-07_water-colours/">this post</a> for an old write up of the water colours system.↩︎</p></li>
<li id="fn2"><p>Okay fine. It’s not the <em>actual</em> source code for the original system, because the original system is an absolute mess of things I decided to modify on a whim and is not particularly pleasant. Instead, the code here (which is reproduced in full in the “source code” appendix) is a cleaner version that is almost equivalent to the original. And to be honest, if I were starting from scratch I’d be using this cleaned up version and not the bizarre mess that is the original source code.↩︎</p></li>
<li id="fn3"><p>I should also mention that this code is very loosely based on the “stepping-stone automaton” that I discovered a few years ago when looking at Antonio Sánchez Chinchón’s <a href="https://github.com/aschinchon/watercolors">watercolour art</a>, and was the inspiration for my stoneskip system which I adapted to implement the <code>automaton()</code> function.↩︎</p></li>
<li id="fn4"><p>In complete honesty this code is slightly different to the version I implemented in the original <a href="https://github.com/djnavarro/series-splatter">splatter</a> code. In the original version I was a little sloppy about managing the random seed, and in several places I was using the C++ native <code>rand()</code> function for some of the random number generation. That’s problematic in the generative art context because I want to exercise control over the RNG seed from R using the usual <code>set.seed()</code> function, so I need my C++ code to consistently call the random number generators in R using <code>R::runif()</code>↩︎</p></li>
<li id="fn5"><p>At some level I’m mildly amused that I’m writing a C++ function that I can call from R, and said C++ function reaches back up to R to invoke a random number generator that is implemented in C.↩︎</p></li>
<li id="fn6"><p>In the code here I’m using <code>as.vector()</code> to “flatten” the matrix to a vector. To control for any restriction of range that might have happened due to repeated averaging inside the C++ function, I use <code>ambient::normalise()</code> to ensure that the smallest <code>value</code> in this vector is always 0, and the largest <code>value</code> is always 1.↩︎</p></li>
<li id="fn7"><p>Yes I do know this is the worst explanation of fields ever. Hush.↩︎</p></li>
<li id="fn8"><p>It is of course also true to note that the paths that emerge when you do this are only a piecewise-linear approximation to the continuous-flow paths. When you take a series of discrete linear steps like this, errors are introduced at each step. But this is generative art not real analysis class so I’m not at all bothered by that.↩︎</p></li>
<li id="fn9"><p>I probably don’t have to spell it out, right? By now everyone who reads my blog knows what I am, I should imagine.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Splatter},
  date = {2024-01-26},
  url = {https://blog.djnavarro.net/posts/2024-01-26_splatter},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Splatter.”</span> January 26, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-26_splatter">https://blog.djnavarro.net/posts/2024-01-26_splatter</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-26_splatter/</guid>
  <pubDate>Thu, 25 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-26_splatter/splatter.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Making generative art with observable.js</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>About this time last year I wrote a little blog post about my first attempts to make <a href="../../posts/2023-01-14_p5js/">generative art in javascript with p5.js</a>. Because I was using this <a href="https://quarto.org/">quarto</a>-based blog as the vehicle for that exploration, and because quarto supports <a href="https://observablehq.com/">observable.js</a> as a method for javascript-based computational notebooks – which is slightly different to embedding a js script in a regular webpage – I also talked a little bit about observable. To be honest though I didn’t talk about it very much: at the time I was focused mostly on p5.js, and didn’t really think too much about how observable works.</p>
<p>Lately, though, I’ve been making a few new generative art systems in javascript. The <a href="https://art.djnavarro.net/gallery/advent/">advent</a> and <a href="https://art.djnavarro.net/gallery/pastiche/">pastiche</a> series I posted to my art site were both written in javascript. In both cases I used <a href="https://nodejs.org/en">node.js</a> to run the js code locally, calling the scripts from the terminal rather than running them in a browser context.</p>
<p>Making art with javascript has been quite a lot of fun, and since it’s been on my mind lately, I thought it might be time to it prompted me take another look at observable in this post. I’m not planning a deep dive or anything, but I will talk a little bit about little art system I made that makes dynamic pieces like this one:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" data-startfrom="34" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 33;"><span id="cb1-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-1" data-nodetype="expression">

</div>
</div>
</div>
<section id="what-is-observable-and-whats-it-doing-in-quarto" class="level2">
<h2 class="anchored" data-anchor-id="what-is-observable-and-whats-it-doing-in-quarto">What is observable, and what’s it doing in quarto?</h2>
<p>At its heart, observable.js provides a method for creating <a href="https://en.wikipedia.org/wiki/Notebook_interface">computational notebooks</a> that execute javascript code in the context of a document containing regular text, in much the same way that <a href="https://jupyter.org/">jupyter</a> notebooks execute code cells that contain R, Python, or Julia code, and allow the author to interleave regular text with the code.</p>
<p>I’ll talk more about the code execution and the structure of observable notebooks first, but it helps to start by making a clear distinction between the code execution engine that powers observable notebooks, and the hosted service that most people use when creating one. To see what I mean, notice that most of the time when someone wants to create an observable notebook, they use the hosted service provided by the company which – somewhat confusingly – is also called observable.<sup>1</sup> For example, <a href="https://observablehq.com/@observablehq/keep-saving-mono-lake">here is a notebook by Allison Horst</a>: it uses the observable javascript library, and it’s hosted on observable service provided by observable-the-company. When people talk about “observable notebooks”, this is the kind of thing they usually mean.</p>
<p>However, this isn’t the only possible approach. You could, for instance, include the <a href="https://github.com/observablehq">observable.js core libraries</a> in a regular webpage (i.e., using the javascript libraries but not the hosted service). Alternatively – and this is the approach I’m taking here – you can create quarto documents that rely on observable to execute javascript code, which is fairly painless to do because <a href="https://quarto.org/docs/interactive/ojs/">quarto provides native support for observable.js</a>. To create an observable-javascript code chunk (“code cell”, in the terminology used by observable), you’d create an <code>{ojs}</code> chunk like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" data-startfrom="47" data-source-offset="9" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java" style="counter-reset: source-line 46;"><span id="cb2-47">```<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ojs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//| echo: fenced</span></span>
<span id="cb2-49"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-50">```</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-2" data-nodetype="expression">

</div>
</div>
</div>
<p>Here you can see the javascript code (<code>1 + 1</code>), the output (<code>2</code>), and the quarto syntax used to create the chunk itself (the <code>{ojs}</code> bit), but from now on I’ll drop the quarto syntax.<sup>2</sup> The important thing to realise here is that although superficially this page looks rather different to a notebook on the observable hosted service, the underlying “execution engine” is more or less the same.</p>
</section>
<section id="code-cells-execute-in-logical-order" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="code-cells-execute-in-logical-order">Code cells execute in logical order</h2>
<p>For the most part, the code execution within an observable notebook (or a quarto document like this one that uses observable) follows all the usual syntax for vanilla javascript. You can use a cell to define variables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" data-startfrom="58" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 57;"><span id="cb3-58">msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-3" data-nodetype="declaration">

</div>
</div>
</div>
<p>and you can refer to those variables later:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" data-startfrom="64" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 63;"><span id="cb4-64">msg</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-4" data-nodetype="expression">

</div>
</div>
</div>
<p>However, a key characteristic to observable.js is its reactive runtime engine: much like a spreadsheet, cells are executed in “topological order” based on the logical dependencies among them. For example, the cell below refers to a variable called <code>surprise</code>, and it works even though (reading this document from top to bottom) I haven’t actually defined it yet:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" data-startfrom="70" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 69;"><span id="cb5-70">surprise</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-5" data-nodetype="expression">

</div>
</div>
</div>
<p>This works because, at a later point in this document, there is a code cell that does specify a value for <code>surprise</code>, and observable.js detects that the later cell is the <em>logical</em> precursor to the one above, and executes that cell before this one. It is also the reason why I can call the <code>art()</code> function in the code cell below. Because the <code>art()</code> function is defined later in the document, I’m permitted to call it now, knowing that observable will determine the order in which all the cells need to be executed:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" data-startfrom="78" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 77;"><span id="cb6-78"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-6" data-nodetype="expression">

</div>
</div>
</div>
<p>To unpack this still further, the image below shows all the dependencies of the call to <code>art(101)</code> that occurs in the cell above. As you can see, all of the cells upon which the cell above depends appear lower in the document, but that’s okay, because observable.js uses the logical dependencies (which take the form of a directed acyclic graph) among these cells to determine the order in which they execute:</p>
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/topological_order.png" class="img-fluid"></p>
</section>
<section id="loading-modules-in-observable" class="level2">
<h2 class="anchored" data-anchor-id="loading-modules-in-observable">Loading modules in observable</h2>
<p>One of the things about javascript that sometimes gives me headaches is getting used to the numerous different ways you can import javascript code depending on the context in which you’re using the language.</p>
<p>When I first started using javascript in web pages, I didn’t use any external javascript code at all. I’d write an html file that embedded my hand-rolled javascript coded directly into the document, with the code wrapped within a <code>&lt;script&gt;</code> tag:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/javascript"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// comment</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Later, I learned that it was often better to separate the javascript code from the html document, so my web page would contain an <code>.html</code> file and a <code>.js</code> file. Within the html document, I would again have a <code>&lt;script&gt;</code> tag, but instead of including the javascript source code it would reference the <code>.js</code> file:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./myscript.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>This is the traditional way of using javascript in a webpage. All javascript code that I wanted to use in my webpage would be stored in local copies of the relevant <code>.js</code> files, and I’d include them with <code>&lt;script&gt;</code> tags. However, once I learned about content delivery networks (CDN) like <a href="https://www.jsdelivr.com/">jsDelivr</a>, I started to realise that I didn’t have to have a local copy of all the files: instead, I could import the files I needed through a CDN. A common example of this in the javascript that I used to write during that stage of my life would be to load <a href="https://jquery.com/">jquery</a> with code like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Until quite recently, that was essentially everything I knew about loading javascript modules. I’d only ever used javascript in the context of an html document, and in that context it is the <code>.html</code> file that does the work of loading the javascript.</p>
<p>Enter, stage left, the <a href="https://nodejs.org/en">node.js</a> runtime environment for javascript being chased by the node package manager <a href="https://www.npmjs.com/">npm</a>. Traditionally javascript is a scripting language used in the context of a webpage, but it doesn’t actually <em>have</em> to be used that way thanks to node.js. Node allows javascript to function as a pure scripting language: you write code in javascript that you can then execute from the terminal without any browser at all. That’s what I’ve been doing with my recent generative art code that uses javascript. For instance, <a href="https://github.com/djnavarro/series-advent/blob/main/source/advent_06.js">advent_06.js</a> is one of those generative art scripts, and – because I have node installed on my machine – when executing the script I’d use this command at the terminal to create the images:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">node</span> advent_06.js</span></code></pre></div>
<p>One question that you’d naturally have, when running javascript in this fashion, is how to import modules: you can’t use a <code>&lt;script&gt;</code> tag for this because there’s no html file and the javascript code is not executing within a browser. To that end node provides a <code>require()</code> function that you can use for this. As I have previously installed the seedrandom.js library (which allows you to create random number generators that give you control over the <a href="../../posts/2023-12-27_seedcatcher/">RNG seed</a>) using <code>npm</code>, I can include a line of code like this in my js script:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// this code is from the advent_06 script, it's not an ojs cell</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> seedrandom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seedrandom'</span>) </span></code></pre></div>
<p>This creates a <code>seedrandom</code> object that exposes all the functionality of the library, which is then used elsewhere in the script. This works just fine, but it’s important to recognise that <a href="https://stackoverflow.com/questions/9901082/what-is-require-in-javascript-and-nodejs#9901097"><code>require()</code> is not part of vanilla javascript, it’s specific to nodeJS</a>. You can’t use it in vanilla javascript.</p>
<p>…and yet, you <em>can</em> use it with observable.js. This is because <a href="https://observablehq.com/documentation/cells/require">observable supplies its own <code>require()</code> function</a> that behaves similarly to the node.js <code>require()</code> function. For this document, I decided to be smart and import a specific version of seedrandom, like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" data-startfrom="129" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 128;"><span id="cb12-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// this is the ojs cell that imports seedrandom in this document</span></span>
<span id="cb12-130">seedrandom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seedrandom@3.0.5'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-7" data-nodetype="declaration">

</div>
</div>
</div>
<p>The key thing to remember here (and I’ll confess this threw me for a loop for a little while) is that although this <em>looks</em> like I’m writing “server-side” code like you’d do with node.js, this calls the observable.js version of the <code>require()</code> function. Per the documentation:</p>
<blockquote class="blockquote">
<p>By default, require uses modules published on npm, a service that hosts over 1 million different modules created by thousands of individual developers. Because notebooks run in a web environment, we use another service, jsDelivr, that takes npm’s modules and makes them accessible to browsers.</p>
</blockquote>
<p>In other words, when calling the <code>require()</code> function in an observable notebook (or quarto document that uses observable code cells), we’re still relying on a CDN to do the work of importing the javascript modules. The observable <code>require()</code> function abstracts away from the tedious details and means you don’t have to write any html to import from the CDN.</p>
</section>
<section id="cells-implicitly-iterate-over-generators" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cells-implicitly-iterate-over-generators">Cells implicitly iterate over generators</h2>
<p>So now we turn to the generative art system itself. The core mechanic underpinning the system is that each piece is defined by a large number of “particles” that are drawn onto an html5 canvas. The particles move around over time, changing shape and size as they do, sometimes obscuring one another when they are drawn onto the canvas. This leads to dynamic pieces like this:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" data-startfrom="146" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 145;"><span id="cb13-146"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-8" data-nodetype="expression">

</div>
</div>
</div>
<p>Later on in the document I’ll define a <code>makeParticles()</code> function that returns an array containing many of these particles, each of which is an object that has fields like <code>x</code>, <code>y</code>, <code>size</code>, etc that defines the state of the particle, as well as a <code>.draw()</code> method used to draw said particle to the canvas, and a <code>.move()</code> method to update the location, shape, size, etc for the particle. The details of that don’t matter for the moment. Let’s just assume that this mechanism works, and examine the top-level <code>art()</code> function that creates the pieces:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" data-startfrom="152" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 151;"><span id="cb14-152"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(seed) {</span>
<span id="cb14-153">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// setup</span></span>
<span id="cb14-154">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> par <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">nrow</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ncol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>}</span>
<span id="cb14-155">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seedrandom</span>(seed)</span>
<span id="cb14-156">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context2d</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span>)  </span>
<span id="cb14-157">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> pal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(palettes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-158">  </span>
<span id="cb14-159">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// image</span></span>
<span id="cb14-160">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-161">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fillRect</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span>)</span>
<span id="cb14-162">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeParticles</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-163">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb14-164">    particles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(ctx)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">move</span>(rng)})</span>
<span id="cb14-165">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">canvas</span></span>
<span id="cb14-166">  }</span>
<span id="cb14-167">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-9" data-nodetype="declaration">

</div>
</div>
</div>
<p>The key part of this function is that it’s a generator function: it is defined with the <code>function*</code> keyword, and instead of having a <code>return</code> value it has a <code>yield</code> value. Generators (also called iterators) are stateful functions. The first time they are called they execute up to the point that the <code>yield</code> statement is encountered, and then return that value. Any subsequent time the generator is called, it doesn’t start from the beginning: it picks up from where it left off last time, and keeps executing until <code>yield</code> is encountered again. So, in this case, <code>art()</code> is a generator function that yields an html5 canvas object when it is called the first time; later invocations of <code>art()</code> will update the state of the canvas, and then yield the updated canvas as its return value. This provides a natural mechanism for animation: each <code>yield</code> value is, in effect, a frame of the animation.</p>
<p>So far, so good. While I’m not an expert at using generators in vanilla javascript, I grasp the basic idea. The part that is a little peculiar here – and is specific to the reactive runtime used in observable.js – is that nowhere in this document do I <em>appear</em> to be calling the <code>art()</code> generator repeatedly. In vanilla javascript, if I’d defined <code>art()</code> in the way I did in the previous cell and then called <code>art(103)</code>, I would get a static canvas that corresponds to the first frame of the animation because I’ve only called the generator once. And yet…</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" data-startfrom="177" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 176;"><span id="cb15-177"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-10" data-nodetype="expression">

</div>
</div>
</div>
<p>What’s happening here is that the reactive runtime used in observable.js <a href="https://observablehq.com/documentation/cells/observable-javascript#cells-implicitly-iterate-over-generators">implicitly iterates over a generator function</a>. The code cell above appears to be invoking the <code>art()</code> generator once (with a seed of 103), but that’s not actually true: what’s really happening is that observable.js calls the generator repeatedly behind the scenes (i.e., implicitly iterates). I haven’t done a deep dive on how this behaviour works yet, but according to the documentation this iteration typically occurs 60 times a second. So that’s what’s happening here.</p>
</section>
<section id="the-workhorse-code" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-workhorse-code">The workhorse code</h2>
<p>Having now discussed everything that is specific to observable.js, all that remains to do is add some code cells that contain the “workhorse” functions for our generative art system. Here’s the <code>makeParticles()</code> function that takes a collection of parameters <code>par</code>, a palette <code>pal</code>, and a random number generator <code>rng</code> as its arguments, and returns an array of <code>particles</code>. Initially the particles are all laid out on a grid, with <code>x</code> coordinates lined up in columns and <code>y</code> coordinates lined up in rows. As the system evolves, these particles are moved around using the <code>move()</code> function, and can be drawn to a canvas using the <code>draw()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" data-startfrom="187" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 186;"><span id="cb16-187"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeParticles</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb16-188">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> rowheight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow</span></span>
<span id="cb16-189">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> colwidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol</span></span>
<span id="cb16-190">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(rowheight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colwidth) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-191">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-192">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-193">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb16-194">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb16-195">      particles[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-196">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-197">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">col</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-198">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">row</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-199">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-200">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sizemin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-201">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sizemax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-202">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-203">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> colwidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-204">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> rowheight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-205">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xmax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-206">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ymax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-207">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xstep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-208">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ystep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-209">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-210">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-211">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">turn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-212">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">shade</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-213">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">shrink</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-214">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">draw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ctx) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawParticle</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ctx)}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-215">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">move</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(rng) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moveParticle</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)}</span>
<span id="cb16-216">      }</span>
<span id="cb16-217">      k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span></span>
<span id="cb16-218">    }</span>
<span id="cb16-219">  }</span>
<span id="cb16-220">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> particles</span>
<span id="cb16-221">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-11" data-nodetype="declaration">

</div>
</div>
</div>
<p>As you can see, the <code>draw()</code> function for any given particle is just a call to the <code>drawParticle()</code> function, and similarly the <code>move()</code> function is just a call to <code>moveParticle()</code>. Here’s those two functions, each defined in their own code cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" data-startfrom="227" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 226;"><span id="cb17-227"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawParticle</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ctx) {</span>
<span id="cb17-228">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade</span></span>
<span id="cb17-229">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strokeStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade</span></span>
<span id="cb17-230">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineWidth</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span></span>
<span id="cb17-231">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beginPath</span>()</span>
<span id="cb17-232">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arc</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span>)</span>
<span id="cb17-233">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>()</span>
<span id="cb17-234">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>()</span>
<span id="cb17-235">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">closePath</span>()</span>
<span id="cb17-236">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-12" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" data-startfrom="240" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 239;"><span id="cb18-240"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moveParticle</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb18-241">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ystep</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span></span>
<span id="cb18-242">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xstep</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span></span>
<span id="cb18-243">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span></span>
<span id="cb18-244">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span></span>
<span id="cb18-245">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span></span>
<span id="cb18-246">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span></span>
<span id="cb18-247">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemin</span>) {</span>
<span id="cb18-248">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shrink</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemin</span>)</span>
<span id="cb18-249">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb18-250">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemax</span></span>
<span id="cb18-251">  }</span>
<span id="cb18-252">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb18-253">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-13" data-nodetype="declaration">

</div>
</div>
</div>
<p>At several points in the code that defines this system, I’ve relied on a <code>pickOne()</code> function that uses a specific random number generator <code>rng</code> to sample a single element from an array. So of course that too needs to be defined as an observable code cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" data-startfrom="259" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 258;"><span id="cb19-259"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb19-260">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> items[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span>)]</span>
<span id="cb19-261">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-14" data-nodetype="declaration">

</div>
</div>
</div>
<p>Finally, in order for the <code>art()</code> function to choose a random palette every time a new piece is created, I need to have an array <code>palettes</code> that defines a bunch of different palettes (I created these palettes by playing around on <a href="https://coolors.co/">cooolors.co</a> and saving some that I liked):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" data-startfrom="267" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 266;"><span id="cb20-267">palettes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb20-268">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-269">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-270">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-271">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-272">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-273">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-274">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-275">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-276">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-277">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-278">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-279">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-280">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-281">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-282">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-283">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-284">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-285">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-286">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-287">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span>]</span>
<span id="cb20-288">]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-15" data-nodetype="declaration">

</div>
</div>
</div>
<p>Oh, and yeah… it’s not part of the generative art system, but because earlier on I referenced a <code>surprise</code> variable in order to illustrate the “spreadsheet-style” code execution order in observable, I’d better have a cell that actually defines that variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" data-startfrom="294" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 293;"><span id="cb21-294">surprise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a variable defined at the bottom of the document"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-16" data-nodetype="declaration">

</div>
</div>
</div>
<p>And we are done!</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" data-startfrom="302" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 301;"><span id="cb22-302"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-17" data-nodetype="expression">

</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I realise it’s a small gripe, but I do think it’s a problem when companies create this confusion by conflating the organisation with the product and/or service. For many years it was difficult to distinguish between rstudio-the-company and rstudio-the-IDE. Observable makes this confusion even messier, since we have observable-the-company, observable-the-javascript-library, and observable-the-hosting-service. They’re three different things that all have the same name and it’s a pain to write about.↩︎</p></li>
<li id="fn2"><p>This is a little different than what would have happened if I’d used <code>{js}</code> rather than <code>{ojs}</code>: when you use <code>{js}</code> in quarto, the javascript code is embedded as a script within the html page, rather than executed with observable.js↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Making Generative Art with Observable.js},
  date = {2024-01-09},
  url = {https://blog.djnavarro.net/posts/2024-01-09_observable-js-art},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Making Generative Art with
Observable.js.”</span> January 9, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art">https://blog.djnavarro.net/posts/2024-01-09_observable-js-art</a>.
</div></div></section></div> ]]></description>
  <category>Javascript</category>
  <category>Art</category>
  <category>Observable</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/</guid>
  <pubDate>Mon, 08 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/canvas.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Notes on the Emax model</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-09_emax-models/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I’m back at work after my all-too-brief summer vacation, and thankfully it’s not too busy since everyone else has been on break too. It’s given me a bit of breathing room to do some reading for professional development purposes, and – since I find it helps me a lot to write up my notes – it’s time for another pharmacometrics post. This time around I’m going to talk about the “Emax model” that is often used in exposure-response analyses. The Emax model is based on the <a href="https://en.wikipedia.org/wiki/Hill_equation_(biochemistry)">Hill equation</a>, and is used to model a continuous-valued “effect” or “response” that is observed when a drug is administered.</p>
<section id="the-model" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-model">The model</h2>
<p>To introduce the basic model, let’s have some notation:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?E"> denotes the observed biological effect, or response. In the context of this kind of model, the response is a continuous variable bounded below at 0 and has some theoretical upper bound corresponding to the maximum possible effect, denoted <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D">.</li>
<li><img src="https://latex.codecogs.com/png.latex?C"> denotes the plasma concentration (typically the molar concentration, in this context) of the molecule that produces the effect, either the drug itself or a metabolite.</li>
</ul>
<p>The goal in this exercise is to model the effect <img src="https://latex.codecogs.com/png.latex?E"> as a function of the concentration <img src="https://latex.codecogs.com/png.latex?C">. It is therefore a <em>pharmacodynamic</em> model (modelling the effect of a drug at a given concentration) rather than a <em>pharmacokinetic</em> model (modelling the concentration of a drug when administered in a particular dose). Ignoring the statistical issues around measurement error etc (errors are typically assumed to be log-normally distributed), here’s what the Emax model asserts about the relationship between <img src="https://latex.codecogs.com/png.latex?E"> and <img src="https://latex.codecogs.com/png.latex?C">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BEC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>There are three parameters in this model:</p>
<ul>
<li>As mentioned earlier, <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> is the maximum value of the effect</li>
<li><img src="https://latex.codecogs.com/png.latex?%7BEC%7D_%7B50%7D"> is the concentration that produces a 50% of the maximum effect. That is, it refers to the concentration <img src="https://latex.codecogs.com/png.latex?C"> at which <img src="https://latex.codecogs.com/png.latex?E%20=%20E_%7Bmax%7D%20/%202">)</li>
<li><img src="https://latex.codecogs.com/png.latex?n"> is the <em>Hill coefficient</em>, which controls the steepness of the curve. In the “simple” model <img src="https://latex.codecogs.com/png.latex?n"> is fixed at 1, but in practice that often doesn’t work.</li>
</ul>
<p>This is a model in which the effect <img src="https://latex.codecogs.com/png.latex?E"> increases monotonically but with constantly decreasing slope, and asymptotically approaches <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> as <img src="https://latex.codecogs.com/png.latex?C%20%5Crightarrow%20%5Cinfty">. More precisely, it’s a model in which <img src="https://latex.codecogs.com/png.latex?E"> is described by a <a href="https://en.wikipedia.org/wiki/Logistic_function">three-parameter logistic</a> function of <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20%20%5Cfrac%7BE_%7Bmax%7D%7D%7B1%20+%20%5Cexp(-n(%5Cln%20C%20-%20%5Cln%20EC_%7B50%7D))%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D"> is a location parameter that shifts the curve (expressed as a function of <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">) left or right, <img src="https://latex.codecogs.com/png.latex?n"> is a gain parameter that controls the steepness of the curve, and <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> is the maximum height of the logistic curve.</p>
<p>After a little rearrangement, we can also express this relationship as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cln%20%5Cleft(%5Cfrac%7BE%7D%7BE_%7Bmax%7D%20-%20E%7D%20%5Cright)%20=%20n(%5Cln%20C%20-%20%5Cln%20EC_%7B50%7D)%0A"></p>
<p>Here’s what it looks like:</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the emax model</span></span>
<span id="cb1-2">emax <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(conc, emax, ec50, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb1-3">  (emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> conc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (ec50<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n)</span>
<span id="cb1-4">}</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load packages</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a fake data set</span></span>
<span id="cb1-11">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">concentration =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>),</span>
<span id="cb1-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">emax</span>(concentration, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">emax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ec50 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) </span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the data on linear and logarithmic x-axis scales</span></span>
<span id="cb1-17">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(concentration, response)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span>
<span id="cb1-18">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>))</span>
<span id="cb1-19">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration (log scale)"</span>)</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_emax-models/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_emax-models/index_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
<p>This is not the only version of the Emax model. For example, if there is some baseline level of effect (i.e., the curve starts at <img src="https://latex.codecogs.com/png.latex?E_0"> not 0), then we would have a relationship of the following form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_0%20+%20E_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BEC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>Along the same lines, notice that this is a model that implicitly assumes that the drug is an <em>agonist</em>: increasing the concentration <img src="https://latex.codecogs.com/png.latex?C"> increases the effect <img src="https://latex.codecogs.com/png.latex?E">. There is also a version that can be use for drugs that decrease the effect:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_0%20-%20I_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BIC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>where again <img src="https://latex.codecogs.com/png.latex?E_0"> is the baseline effect, and the inhibition effect is described in terms of a maximum inhibition <img src="https://latex.codecogs.com/png.latex?I_%7Bmax%7D"> and the concentration that produces 50% of the maximum inhibition <img src="https://latex.codecogs.com/png.latex?%7BIC%7D_%7B50%7D">.</p>
<p>For the purposes of this post I’m just going to consider the basic model.</p>
</section>
<section id="why-this-model" class="level2">
<h2 class="anchored" data-anchor-id="why-this-model">Why this model?</h2>
<p>Looking at this from the perspective of a scientist with a strong statistics and modelling background but who is still relatively new to pharmacometrics, I completely understand the value of the three-parameter logistic model: it’s used in many different disciplines, and I’ve encountered it before in psychometric contexts (and others). What wasn’t immediately clear to me is <em>why</em> it is considered sensible to model the effect <img src="https://latex.codecogs.com/png.latex?E"> of a drug as a logistic function of the log-concentration <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">. If I’ve learned nothing else from my long career in science that has somehow bounced around from discipline to discipline, it’s that if you don’t understand the theoretical foundations that underpin why researchers in the field use <em>this</em> specific statistical model and not <em>that</em> other possible statistical model, you’ll eventually make a silly mistake. I’ve made a lot of silly mistakes in my life and would like to minimise the chances of making even more.</p>
<p>With that in mind, I turned to <a href="https://www.routledge.com/Pharmacokinetic-and-Pharmacodynamic-Data-Analysis-Concepts-and-Applications/Gabrielsson-Weiner/p/book/9789198299106">Pharmacokinetic and Pharmacodynamic Data Analysis (5th ed)</a> by Johan Gabrielsson and Daniel Weiner, which is the book I’ve been reading at work to try to get myself up to speed on these kinds of things. It turns out that the basic ideas here can be derived from the <a href="https://en.wikipedia.org/wiki/Law_of_mass_action">law of mass action</a>, which I vaguely recall from my long-disused undergraduate chemistry classes, and Chapter 3 of the book shows how this is done. What follows are my own notes based on that section of the book, and as is traditional for such acknowledgements I note that I’ve lifted the core ideas from the authors, but if there are mistakes then yeah those are probably mine alone.</p>
<p>So here goes.</p>
</section>
<section id="applying-the-law-of-mass-action" class="level2">
<h2 class="anchored" data-anchor-id="applying-the-law-of-mass-action">Applying the law of mass action</h2>
<p>First, let’s start by switching notation slightly. Let <img src="https://latex.codecogs.com/png.latex?R"> refer to a <a href="https://en.wikipedia.org/wiki/Receptor_(biochemistry)">receptor</a>, a macromolecule that is involved in signalling within biological systems (e.g., <a href="https://en.wikipedia.org/wiki/Cell_surface_receptor">cell surface receptors</a>). Receptors can bind to chemical messengers (e.g., ligands outside a cell), that triggers some physiological response (e.g., a messenger is released inside a cell). In the context of the Emax model, we’re implicitly assuming a mechanism of action in which the drug (or metabolite) is an agonist molecule <img src="https://latex.codecogs.com/png.latex?A"> that can bind to the receptor (forming the compound molecule <img src="https://latex.codecogs.com/png.latex?AR">), and trigger some response that produces the drug effect. Since this is a chemical reaction that can go both ways, we can denote it as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%20+%20R%20%5C%20%5Cleftrightharpoons%20%5C%20AR%0A"></p>
<p>The concentrations of the receptor <img src="https://latex.codecogs.com/png.latex?R">, the agonist molecule <img src="https://latex.codecogs.com/png.latex?A">, and the compound <img src="https://latex.codecogs.com/png.latex?AR"> are denoted <img src="https://latex.codecogs.com/png.latex?%5BR%5D">, <img src="https://latex.codecogs.com/png.latex?%5BA%5D"> and <img src="https://latex.codecogs.com/png.latex?%5BAR%5D"> respectively.</p>
<p>Okay, so now for some science rather than mere notation. The law of mass action tells us that the rate of the forward reaction <img src="https://latex.codecogs.com/png.latex?A%20+%20R%20%5Crightarrow%20AR"> is proportional to the product of the concentrations of the two reactants, <img src="https://latex.codecogs.com/png.latex?%5BA%5D%20%5Ctimes%20%5BR%5D">, with <img src="https://latex.codecogs.com/png.latex?k_1"> denoting the constant of proportionality. Similarly, the rate of the backward reaction <img src="https://latex.codecogs.com/png.latex?AR%20%5Crightarrow%20A%20+%20R"> is proportional to the concentration of the compound <img src="https://latex.codecogs.com/png.latex?%5BAR%5D">, with proportionality constant <img src="https://latex.codecogs.com/png.latex?k_%7B-1%7D">. This gives us the differential equation to describe how the concentration of the compound <img src="https://latex.codecogs.com/png.latex?AR"> changes over time:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdt%7D%20%5BAR%5D%20%5Cpropto%20k_1%20%5BA%5D%5BR%5D%20-%20k_%7B-1%7D%20%5BAR%5D%0A"></p>
<p>When this reaction is at equilibrium <img src="https://latex.codecogs.com/png.latex?d/dt%20%5BAR%5D%20=%200"> by definition, so it follows that <img src="https://latex.codecogs.com/png.latex?k_1%20%5BA%5D%5BR%5D%20=%20k_%7B-1%7D%20%5BAR%5D"> and therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5BA%5D%5BR%5D%7D%7B%5BAR%5D%7D%20=%20%5Cfrac%7Bk_%7B-1%7D%7D%7Bk_1%7D%20%5Coverset%7Bdef%7D%7B=%7D%20K_d%0A"> where <img src="https://latex.codecogs.com/png.latex?K_d"> is referred to as the <em>equilibrium dissociation constant</em> for this reaction and defined as the ratio of the rate constants for the forward and backward reactions.</p>
<p>Next, we define <img src="https://latex.codecogs.com/png.latex?%5BR_t%5D"> to be the total concentration of receptors regardless of whether they are bound or unbound to the agonist:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5BR_t%5D%20%5Coverset%7Bdef%7D%7B=%7D%20%5BR%5D%20+%20%5BAR%5D%0A"></p>
<p>With this definition we can do the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brrcl%7D%0A&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%5BR%5D%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D(%5BR_t%5D%20-%20%5BAR%5D)%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5BR_t%5D%20-%20%5BAR%5D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BAR%5D%7D%7B%5BA%5D%7D%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5BR_t%5D%20&amp;=&amp;%20%5BAR%5D%20%5Cleft(1%20+%20%5Cdisplaystyle%5Cfrac%7BK_d%7D%7B%5BA%5D%7D%20%5Cright)%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BR_t%5D%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%20+%20K_d%7D%7B%5BA%5D%7D%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>In this expression <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> is referred to as the <em>fractional occupancy</em> of the total receptor pool. That is, it describes the proportion of the receptors that are currently bound to the agonist molecule.</p>
</section>
<section id="motivating-a-simple-model" class="level2">
<h2 class="anchored" data-anchor-id="motivating-a-simple-model">Motivating a simple model</h2>
<p>At this point we have the something that we can turn into theoretical model for the effect of a drug, but we need to impose additional assumptions in order to flesh it out. One proposal is that the effect <img src="https://latex.codecogs.com/png.latex?E"> of the drug is proportional to the fractional occupancy <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> of the relevant receptor pool. That is,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20%5Calpha%20%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%0A"> for some proportionality constant <img src="https://latex.codecogs.com/png.latex?%5Calpha">. Now, noting that the maximum possible value of <img src="https://latex.codecogs.com/png.latex?%5BAR%5D"> is <img src="https://latex.codecogs.com/png.latex?%5BR_t%5D">, it follows that the maximum possible value for <img src="https://latex.codecogs.com/png.latex?E"> is in fact <img src="https://latex.codecogs.com/png.latex?%5Calpha">, so it makes more sense to denote it as <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%0A"></p>
<p>and by substitution back into the earlier equation we obtain something that is beginning to look a lot like the Emax model with a Hill coefficient <img src="https://latex.codecogs.com/png.latex?n%20=%201">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A"></p>
</section>
<section id="incorporating-signal-amplification" class="level2">
<h2 class="anchored" data-anchor-id="incorporating-signal-amplification">Incorporating signal amplification</h2>
<p>It comes as little surprise to discover that the theoretical model just derived is a bit of an oversimplification. Taken at face value, you’d be tempted to assume that the value of the <img src="https://latex.codecogs.com/png.latex?%7BEC%7D_%7B50%7D"> parameter in an Emax model is equal to the value of the equilibrium dissociation constant <img src="https://latex.codecogs.com/png.latex?K_d"> for the reaction between a ligand <img src="https://latex.codecogs.com/png.latex?%5BA%5D"> and receptor <img src="https://latex.codecogs.com/png.latex?%5BR%5D">. This is not generally the case, because biology is more complicated than this simple model suggests. In many situations we observe some kind of <em>signal amplification</em>, in which you get a much stronger response than you’d expect on the basis of this simple response. One way to frame it is like this. We consider the fractional occupancy of the receptor <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> to be a <em>stimulus</em>,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bstimulus%7D%20=%20%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A"> and this stimulus triggers a nonlinear <em>response</em> (equivalent to our effect <img src="https://latex.codecogs.com/png.latex?E"> in the previous notation) that rises quickly to some asymptote level:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bresponse%7D%20=%20%5Cfrac%7B%5Cmbox%7Bstimulus%7D%7D%7B%5Cmbox%7Bstimulus%7D%20+%20%5Cbeta%7D%0A"></p>
<p>In this expression <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> denotes the value of the stimulus that produces 50% of the maximum response.</p>
<p>As it turns out, this doesn’t affect the overall structure of the model predictions, since</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0AE%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%5Cright)%7D%7B%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%20%5Cright)%20+%20%5Cbeta%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20(%5BA%5D%20+%20K_d)%20%5Cbeta%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B(%5Cbeta%20+%201)%20%5BA%5D%20+%20%5Cbeta%20K_d%7D%20%5C%5C%0A&amp;=&amp;%20(%5Cbeta%20+%201)%5E%7B-1%7D%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20%5Cbeta%20(%5Cbeta%20+%201)%5E%7B-1%7D%20K_d%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>In other words, we again have something that looks like Emax model (with <img src="https://latex.codecogs.com/png.latex?n=1">),</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BA%5D%7D%7B%7BEC%7D_%7B50%7D%20+%20%5BA%5D%7D%0A"></p>
<p>but this time <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D%20=%201/(%5Cbeta%20+%201)"> and <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D%20=%20(%5Cbeta/(%5Cbeta%20+%201))%20%5Ctimes%20K_d">. Since the <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> quantity is interpreted as a fraction (i.e., it’s on the same scale as the fractional occupancy <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D">), the net effect is that under a model like this one what we should expect to see is <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D%20%3C%20K_d">. In the event that there is a stimulus-response cascade at play (e.g., the initial response is the stimulus for another response, etc, ultimately leading to an effect), the overall shape of the function would remain the same.</p>
</section>
<section id="interpreting-the-hill-coefficient" class="level2">
<h2 class="anchored" data-anchor-id="interpreting-the-hill-coefficient">Interpreting the Hill coefficient</h2>
<p>Okay, so at this point we have a sensible motivation for using an Emax model in an exposure-response analysis (at least in some situations). What we don’t have is an explanation of the Hill coefficient <img src="https://latex.codecogs.com/png.latex?n">. The Gabrielsson &amp; Weiner book doesn’t say much about this, other than to note that:</p>
<blockquote class="blockquote">
<p>The exponent <img src="https://latex.codecogs.com/png.latex?n"> does not have a direct biological interpretation and should be viewed as an extension of the original <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> model to account for the curvature [i.e., steepness of the logistic function]. It provides a further degree of flexibility in the sensitivity of the response-concentration relationship.</p>
</blockquote>
<p>That doesn’t mean it’s an arbitrary parameter though. It was introduced by Hill originally to describe <a href="https://en.wikipedia.org/wiki/Cooperative_binding#The_Hill_equation">cooperative binding</a> in the oxygen-haemoglobin relationship. Essentially, the derivation earlier is based on the assumption that every time a drug molecule binds to a receptor it’s entirely independent of the all other binding events. That doesn’t have to be the case. Quoting from the linked Wikipedia page:</p>
<blockquote class="blockquote">
<p>Cooperative binding occurs in a molecular binding system where two or more ligand molecules can bind to a receptor molecule. Binding can be considered “cooperative” if the actual binding of the first molecule of the ligand to the receptor changes the binding affinity of the second ligand molecule. The binding of ligand molecules to the different sites on the receptor molecule do not constitute mutually independent events. Cooperativity can be positive or negative, meaning that it becomes more or less likely that successive ligand molecules will bind to the receptor molecule.</p>
</blockquote>
<p>That makes sense to me. It’s not a situation covered by the derivation I considered at the start, because if a receptor can bind to two or more ligands you’d need to consider bound-receptor compounds like <img src="https://latex.codecogs.com/png.latex?AAR"> and, <img src="https://latex.codecogs.com/png.latex?AAAR"> (to use an oversimplified notation) as well as <img src="https://latex.codecogs.com/png.latex?AR">, and then your model would need to include reactions like <img src="https://latex.codecogs.com/png.latex?AR%20+%20A%20%5Cleftrightharpoons%20AAR"> and their associated <img src="https://latex.codecogs.com/png.latex?K_d"> values. The derivation above is – like any such excercise – a simplification of the real situation. So while the Hill coefficient <img src="https://latex.codecogs.com/png.latex?n"> doesn’t immediately fall out of a simplified model, it’s not too hard to see how cooperative binding could give rise to logistic curves (on the log-concentration scale) with steeper slopes than those observed with <img src="https://latex.codecogs.com/png.latex?n%20=%201">.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Okay, so now the Emax model makes more sense to me. That’s all I was aiming for, and it’s 6pm now so I’m quitting work for the day!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Notes on the {Emax} Model},
  date = {2024-01-09},
  url = {https://blog.djnavarro.net/posts/2024-01-09_emax-models},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Notes on the Emax Model.”</span> January
9, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-09_emax-models">https://blog.djnavarro.net/posts/2024-01-09_emax-models</a>.
</div></div></section></div> ]]></description>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-09_emax-models/</guid>
  <pubDate>Mon, 08 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-09_emax-models/d-koi-5nI9N2wNcBU-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Writing knitr hooks</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A very common situation I encounter when writing a blog post or writing a book chapter using R markdown or quarto arises when the command I want to use generates a lot of output, and I don’t want all of the output to be displayed in the output. Every time I run into this problem, I have this vague recollection that “oh yeah, I need to write a knit hook for this”, but I can never quite remember how to do that and have to search online for the answer. In my last post I wrote a jokey <a href="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/#fn9">footnote</a> grumbling about this and saying I was thinking of writing a short blog post on it just so that I’d know where to look next time.</p>
<p>So, uh, yeah… that’s exactly what I did.</p>
<p>The answer to that specific question, incidentally, is described explicitly in the <a href="https://bookdown.org/yihui/rmarkdown-cookbook/hook-truncate.html">R Markdown Cookbook</a>, and – to set expectations appropriately – there’s nothing in this post that isn’t already covered in the documentation and books. I don’t actually <em>need</em> to write a blog post about this. But I’m going to anyway, because every time I actually do need to write a knit hook, I find myself realising that I don’t understand them as well as I ought to. So here goes.</p>
<section id="chunk-options" class="level2">
<h2 class="anchored" data-anchor-id="chunk-options">Chunk options</h2>
<p>This is a post about knit hooks, but it helps to start with a refresher on knitr chunk options. I’m assuming, for the purposes of this post, that anyone reading is already pretty familiar with R markdown and quarto, and knows that when I write a document like this and want to execute some R code, I include an appropriately annotated code chunk in the source like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb1-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">1 + 1</span></span>
<span id="cb1-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p>When the document is rendered to HTML, it’s the job of the knitr package to parse this chunk, execute the code, and append the output to the document as necessary. You can customise the manner in which knitr does this via <a href="https://bookdown.org/yihui/rmarkdown/r-code.html">chunk options</a>, but the code chunk above doesn’t specify any options, so default values are used.</p>
<p>So what are the defaults, and where are they stored?</p>
<p>The <code>knitr::opts_chunk</code> object is used to control the options for code chunks. The object is a list of several functions. The two we use most often are <code>$get()</code> and <code>$set()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">options <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span></code></pre></div>
</div>
<p>This <code>options</code> variable is a list containing all the default values that are applied when knitting the code chunks in the markdown document. If the user doesn’t specify a value for a specific chunk option, these are the default values that are applied. There’s a lot of these options:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(options)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "eval"          "echo"          "results"       "tidy"         
 [5] "tidy.opts"     "collapse"      "prompt"        "comment"      
 [9] "highlight"     "size"          "background"    "strip.white"  
[13] "cache"         "cache.path"    "cache.vars"    "cache.lazy"   
[17] "dependson"     "autodep"       "cache.rebuild" "fig.keep"     
[21] "fig.show"      "fig.align"     "fig.path"      "dev"          
[25] "dev.args"      "dpi"           "fig.ext"       "fig.width"    
[29] "fig.height"    "fig.env"       "fig.cap"       "fig.scap"     
[33] "fig.lp"        "fig.subcap"    "fig.pos"       "out.width"    
[37] "out.height"    "out.extra"     "fig.retina"    "external"     
[41] "sanitize"      "interval"      "aniopts"       "warning"      
[45] "error"         "message"       "render"        "ref.label"    
[49] "child"         "engine"        "split"         "include"      
[53] "purl"          "fenced.echo"   "ft.shadow"    </code></pre>
</div>
</div>
<p>The <code>fig.path</code> option, for example, is used to specify where generated output images should be written. It’s a nice one to illustrate the customisability of knitr because you get a different output depending on context. The blog post is a quarto document, and has different knitr defaults to what you’d see if the same code were run at the console:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fig.path</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "index_files/figure-html/"</code></pre>
</div>
</div>
<p>If I’d run the same output at the console, I would get a different answer. When called from the console the default option for <code>fig.path</code> is <code>"figures"</code>. For example, when I constructed my <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">“knitr + eleventy” blog</a> this is how I was calling knitr, and accordingly the images were written to a “figures” folder. The defaults, when knitr is used in the context of this on this quarto blog, are different.</p>
</section>
<section id="knit-hooks" class="level2">
<h2 class="anchored" data-anchor-id="knit-hooks">Knit hooks</h2>
<p>So now we turn to <a href="https://yihui.org/knitr/hooks/">knitr hooks</a>. Hooks are user-customisable functions that you can use to control how the knitr options are interpreted, and modify the output that knitr creates. In the same fashion that the <code>knitr::opts_chunk</code> object is used to control the chunk options, there’s a <code>knitr::knit_hooks</code> object used to control hooks. Again, this object is a list of functions, and the two we use most often are <code>$get()</code> and <code>$set()</code>.<sup>1</sup> We can retrieve the hooks by calling the <code>$get()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">hooks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span></code></pre></div>
</div>
<p>There are 12 default knit hooks in this list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(hooks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "source"          "output"          "warning"         "message"        
 [5] "error"           "plot"            "inline"          "chunk"          
 [9] "text"            "evaluate.inline" "evaluate"        "document"       </code></pre>
</div>
</div>
<p>The documentation for <a href="https://bookdown.org/yihui/rmarkdown-cookbook/output-hooks.html">output hooks</a> gives a nice summary for most of these. Seven of the hooks are quite specific, and are applied to only one type of output:</p>
<ul>
<li><code>source</code>: Handles how knitr processes the source code inside a chunk</li>
<li><code>output</code>: Handles how knitr processes ordinary R output (i.e., not warnings, messages, or errors)</li>
<li><code>warning</code>: Handles how knitr processes warning output (e.g., from <code>warning()</code>)</li>
<li><code>message</code>: Handles how knitr processes message output (e.g., from <code>message()</code>)</li>
<li><code>error</code>: Handles how knitr processes error output (e.g., from <code>stop()</code>)</li>
<li><code>plot</code>: Handles how knitr processes graphics output</li>
<li><code>inline</code>: Handles how knitr processes output from inline R code</li>
</ul>
<p>There are two output hooks that are broader in scope:</p>
<ul>
<li><code>chunk</code>: Applied to all output from a code chunk</li>
<li><code>document</code>: Applied to all output within the document</li>
</ul>
<p>The other three (<code>evaluate</code>, <code>evaluate.inline</code>, and <code>text</code>) aren’t discussed as much, and while I did get a little curious and started going down a rabbit hole looking at them, for once in my life I’ll be smart and not get sucked all the way in.</p>
</section>
<section id="custom-output-hooks" class="level2">
<h2 class="anchored" data-anchor-id="custom-output-hooks">Custom output hooks</h2>
<p>The general advice when writing custom output hooks is that you shouldn’t try to write the whole thing yourself. By design, knitr will create default hooks that are appropriate to the specific context, and your safest bet is to first retrieve the default hook by calling the <code>$get()</code> function, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">default_hook_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>)</span></code></pre></div>
</div>
<p>Then you can write your own hook that does some pre-processing to the inputs, before passing the modified inputs to the default hook. So, having already saved the default hook as <code>default_hook_output</code> I’d write my custom output hook like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">custom_hook_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, options) {</span>
<span id="cb12-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out.lines</span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(n)) {</span>
<span id="cb12-4">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xfun<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_lines</span>(x)</span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n) x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x, n), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"....</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-6">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-7">  }</span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">default_hook_output</span>(x, options)</span>
<span id="cb12-9">}</span></code></pre></div>
</div>
<p>There’s a few things going on here that are worth highlighting. First, notice that output hooks take two arguments <code>x</code> and <code>options</code>. The <code>x</code> argument is the raw text string that needs to be rendered: in this case, the string would correspond to the output that would normally be printed to the R console. The <code>options</code> argument is the list of knitr chunk options. The value of <code>options</code> that gets passed to the hook includes any values that were specified by the user in the chunk options, and also any default values that were not specified by the user. In this instance, <code>out.lines</code> is intended to indicate the maximum number of lines of R output to write to the rendered output document. It’s not one of the default chunk options (i.e., it wasn’t one of the options we saw in the previous section), and so if the user doesn’t specify a value for <code>out.lines</code> in the chunk options, <code>options$out.lines</code> will return a value of <code>NULL</code> in our custom hook, and so our <code>custom_hook_output()</code> will skip all the pre-processing in that case. However, if the user does specify a value for <code>out.lines</code>, it does a little text manipulation to alter the value of <code>x</code> before it is passed onto the default output hook.</p>
<p>Having written our custom hook, we apply it by using the <code>$set()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> custom_hook_output)</span></code></pre></div>
</div>
<p>Now that we have a knit hook that knows how to interpret <code>out.lines</code> as a chunk option, I can incorporate it into a knitr code chunk just like any other one:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r, out.lines = 4}</span></span>
<span id="cb14-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(200)</span></span>
<span id="cb14-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.26550866 0.37212390 0.57285336 0.90820779 0.20168193 0.89838968
  [7] 0.94467527 0.66079779 0.62911404 0.06178627 0.20597457 0.17655675
 [13] 0.68702285 0.38410372 0.76984142 0.49769924 0.71761851 0.99190609
 [19] 0.38003518 0.77744522 0.93470523 0.21214252 0.65167377 0.12555510
....</code></pre>
</div>
</div>
<p>The output here would normally be considerably longer than 4 lines, but we’ve applied a custom hook that enforces the truncation, so we get nicer output. Notice also that, in the same way that standard chunk options like <code>fig.width</code> and <code>fig.height</code> become <code>fig-width</code> and <code>fig-height</code> when you’re setting them via custom code comments, our new <code>out.lines</code> option becomes <code>out-lines</code> when used in that context:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb16-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| out-lines: 4</span></span>
<span id="cb16-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(200)</span></span>
<span id="cb16-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.26750821 0.21864528 0.51679684 0.26895059 0.18116833 0.51857614
  [7] 0.56278294 0.12915685 0.25636760 0.71793528 0.96140994 0.10014085
 [13] 0.76322269 0.94796635 0.81863469 0.30829233 0.64957946 0.95335545
 [19] 0.95373265 0.33997920 0.26247411 0.16545393 0.32216806 0.51012521
....</code></pre>
</div>
</div>
</section>
<section id="custom-chunk-hooks" class="level2">
<h2 class="anchored" data-anchor-id="custom-chunk-hooks">Custom chunk hooks</h2>
<p>In the previous section, we effectively created a new chunk option called <code>out.lines</code> simply by virtue of modifying one of the standard output hooks that is able to interpret it and modify the output accordingly. That approach doesn’t always work, particularly if the new option that you want to create requires that code be executed before and after knitr processes the chunk. In those situations we may need to write a “chunk hook” that is triggered whenever the new chunk option has a non-null value. Chunk hooks have a different structure than output hooks. The <em>R Markdown Cookbook</em> has some nice examples of this, including one for <a href="https://bookdown.org/yihui/rmarkdown-cookbook/time-chunk.html">timing how long it takes the chunk to execute</a>. I’ll adapt that one here.</p>
<p>To understand how to write a chunk hook, the key thing to realise is that it gets called twice: once before knitr executes the code in the chunk, and once again afterwards. The function can take up to four arguments, all of which are optional:</p>
<ul>
<li><code>before</code> is a logical value indicating whether the function is being called before or after the code chunk is executed</li>
<li><code>options</code> is the list of chunk options</li>
<li><code>envir</code> is the environment in which the code chunk is executed</li>
<li><code>name</code> is the name of the code chunk option that triggered the hook function</li>
</ul>
<p>As a general rule, the chunk hook is called for its side effects not the return value. However, if it returns a character output, knitr will add that output to the document output as-is.</p>
<p>Designing a chunk hook that records the amount of time taken to execute takes a little thought. When the hook is triggered the first time (with <code>before = TRUE</code>) we want to record the system time somewhere (e.g., in a variable called <code>start_time</code>). Then, when the hook is triggered the second time (with <code>before = FALSE</code>) we want to record the system time again (e.g., as <code>stop_time</code>), and compute the difference in time. We can do this using a <a href="https://adv-r.hadley.nz/function-factories.html">function factory</a> to create stateful functions. Here’s what that looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">create_timer_hook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb18-2">  start_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb18-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(before, options) {</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (before) {</span>
<span id="cb18-5">      start_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb18-6">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb18-7">      stop_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb18-8">      elapsed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(stop_time, start_time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>)</span>
<span id="cb18-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb18-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;div style='font-size: 70%; text-align: right'&gt;"</span>,</span>
<span id="cb18-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elapsed time:"</span>, </span>
<span id="cb18-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(elapsed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb18-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>,</span>
<span id="cb18-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/div&gt;"</span></span>
<span id="cb18-15">      )</span>
<span id="cb18-16">    }</span>
<span id="cb18-17">  }</span>
<span id="cb18-18">}</span></code></pre></div>
</div>
<p>When <code>create_timer_hook()</code> is called it returns a function that will become our custom hook. Or – to be more precise, because in this instance the distinction matters – it returns a closure. When called with <code>before == TRUE</code>, it records the system time and uses the super assignment operator <code>&lt;&lt;-</code> to store that value as <code>start_time</code>. Normally, an assignment that takes place during the function execution isn’t persistent and can’t be reused on later calls to that function. But we’ve structured things differently here: in this case, the <code>start_time</code> variable is defined in the enclosing environment (the one in which the function was defined) rather than the execution environment (in which the function body code executes). That changes things: the execution environment is inherently ephemeral and lasts as long as a single function call is in progress. The enclosing environment, however, is persistent, and will survive for (at least) as long as the function itself exists. As a consequence, the value assigned to <code>start_time</code> is persistent also, and still exists when the hook is triggered a second time with <code>before == FALSE</code>. That makes it possible to compute the difference between <code>start_time</code> and <code>stop_time</code> with <code>difftime()</code>.</p>
<p>Having computed the elapsed time, all that remains is to format it a little bit and then return a nice character string with some HTML that will be printed in the final document. To put this into action, we set the custom hook like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_timer_hook</span>())</span></code></pre></div>
</div>
<p>By doing this <code>timer</code> become the code chunk option that triggers the hook, and we can now use it in the document:</p>
<div class="cell" data-timer="true" data-out.lines="4">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb20-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb20-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| timer: true</span></span>
<span id="cb20-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| out-lines: 4</span></span>
<span id="cb20-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(10000)</span></span>
<span id="cb20-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    [1] 0.6588776091 0.1850699645 0.9543781369 0.8978484920 0.9436970544
    [6] 0.7236907512 0.3703570659 0.7810175403 0.0111495086 0.9403087122
   [11] 0.9937492262 0.3574057452 0.7476350635 0.7929090238 0.7058590064
   [16] 0.4758250387 0.4946545260 0.3080524488 0.6950122463 0.8227933056
....</code></pre>
</div>
<div style="font-size: 70%; text-align: right">
Elapsed time: 0.03 secs
</div>
</div>
<p>And with that, we are done!</p>
<p>Yes, there are other kinds of hooks that you can write for knitr,<sup>2</sup> but the only two kinds of hooks I’ve ever actually had the need for myself are output hooks and chunk hooks, so in the interests of brevity I’ll leave it at that.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In addition to <code>knit_hooks</code> and <code>opt_chunks</code>, knitr has several other objects that can be used to control the behaviour of the package. These are <code>knit_patterns</code>, <code>knit_patterns</code>, <code>opts_current</code>, and <code>opts_knit</code>. They all have the same basic structure, including <code>$get()</code> and <code>$set()</code> functions. These objects are documented <a href="https://yihui.org/knitr/objects/">here</a>.↩︎</p></li>
<li id="fn2"><p>There are also <a href="https://yihui.org/knitr/hooks/#option-hooks">option hooks</a> that you can use to modify the value of some options based on the values of other options, and those are managed by <code>opts_hooks</code> in the same way that <code>knit_hooks</code> manages output hooks and chunk hooks.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Writing Knitr Hooks},
  date = {2023-12-30},
  url = {https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Writing Knitr Hooks.”</span> December
30, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks">https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Literate Programming</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/</guid>
  <pubDate>Fri, 29 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/yarn.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Fine-grained control of RNG seeds in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Ah fuck it. So. Earlier this morning<sup>1</sup> I <a href="https://hachyderm.io/@djnavarro/111655059799138922">posted on mastodon</a> about the sense of sadness I have about the death of turn-of-the-century-yes-this-century blog culture:</p>
<blockquote class="blockquote">
<p>I was reading a thread about how the norms around blog posts have changed over the years, where “writing something up a blog post” now has a kind of formality to it that it didn’t have 20 years ago (yes, I did in fact have a blog in 2003), which in turn makes blogging feel more like work than joy. This seems like a genuine cultural loss.</p>
</blockquote>
<p>Once upon a much happier time, we had a blogging culture where writing a blog post didn’t have to be “A Very Serious Blog Post By A Very Serious Person”. The craft of blogging wasn’t built around the idea that blog posts are miniature journal articles. Back then it was understood that a blog post was an inherently ephemeral and rarely serious thing. You’d have an idle thought, spend a small amount of time developing the idea, write it up, and <strong>ET FUCKING VOILA BITCHES I HAVE A BLOG POST</strong>.</p>
<p>I kind of loved that culture. It’s precisely in that spirit that I decided, in my last post, to cobble together an absolutely-cursed rethinking of the <a href="https://bookdown.org/yihui/blogdown/">blogdown</a> R package and write an unapologetically-unhinged <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">post</a> about it. The “eleventy plus knitr” system I built in an afternoon – following the <a href="https://www.youtube.com/watch?v=1i739SyCu9I">Bob Katter principle</a> in which “I ain’t spending any time on it, because in the meantime, every three months a person’s torn to pieces by a crocodile in North Queensland” – was a fun toy, and nothing more than that. This is <em>exactly</em> what blogs are for, and precisely the reason why the subtitle on that post is “Because you know what? I <em>am</em> here to <a href="https://www.urbandictionary.com/define.php?term=Not%20here%20to%20Fuck%20Spiders">fuck spiders</a>”. The entire purpose of blogging is to have some fun. It’s not a public relations exercise.<sup>2</sup> <sup>3</sup> <sup>4</sup></p>
<p>So let’s fuck some spiders.</p>
<section id="managing-computational-state-when-generating-pseudo-random-numbers" class="level2">
<h2 class="anchored" data-anchor-id="managing-computational-state-when-generating-pseudo-random-numbers">Managing computational state when generating pseudo-random numbers</h2>
<p>The spider I’m thinking about today relates to the problem of generating pseudo-random numbers in a reproducible way. Generating a sequence of numbers that satisfy formal definitions of randomness is an inherently tricky business and programming languages have a very, ummmmm, mixed track record in finding ways to do it sanely. The core of the problem lies in the fact that computers are Turing machines, and as such are deterministic systems. You can’t make a deterministic system behave “randomly” without doing quite a bit of mathematical work to (a) decide what “randomly” means in this context and, (b) constructing algorithms that produce behaviour that we are willing to describe as “random”. Fortunately for us, this part of the problem was solved a long time ago, and I have no desire whatsoever to use this post to discuss the <a href="https://en.wikipedia.org/wiki/Mersenne_Twister">Mersenne Twister</a> in relation to <a href="https://en.wikipedia.org/wiki/Algorithmically_random_sequence">Martin-Löf randomness</a>.<sup>5</sup> The algorithm is good enough for my purposes, it’s implemented as a random number generator (usually one of many) in various language, and that is <em>fine</em>.</p>
<p>The tricky part, from a practical perspective, is that pseudo-random number generators are <a href="https://en.wikipedia.org/wiki/State_(computer_science)">stateful</a> entities that depend on a “random number generator seed”, and – by design! – they are spectacularly sensitive to the seed. If you do even the tiniest thing in your code that touches the RNG seed, <em>every</em> subsequent action that uses that RNG will be changed in fundamental ways. If you want to program carefully around random number generators, you need to be super careful with managing the RNG seed.</p>
<p>Ah fuck it. <a href="https://www.youtube.com/watch?v=suAR1PYFNYA">Dua Lipa</a> already said it better:</p>
<blockquote class="blockquote">
<p>I come and I go <br> Tell me all the ways you need me <br> I’m not here for long <br> Catch me or I go Houdini <br> I come and I go <br> Prove you got the right to please me <br> Everybody knows <br> Catch me or I go Houdini</p>
</blockquote>
<p>From a reproducible computing perspective, you’d better catch the RNG state and work carefully with it, or else it will be gone forever.</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/houdini.png" class="img-fluid" alt="Screenshot from the video clip to 'Houdini'"></p>
</section>
<section id="how-do-different-languages-manage-rng-state" class="level2">
<h2 class="anchored" data-anchor-id="how-do-different-languages-manage-rng-state">How do different languages manage RNG state?</h2>
<p>How should we manage the RNG state in a programming language? It’s a difficult problem, and I am absolutely <em>not</em> the person to resolve the question. I’m basically an idiot, and I don’t even pretend to know what the right answer to this is. That being said, I think there’s essentially three categories of solution that exist in the wild:</p>
<ul>
<li><p><strong>The javascript style:</strong> The solution in vanilla javascript is basically a “fuck you” to the user. The core random number generator is <code>Math.random()</code> and it doesn’t let you specify the seed at all. If you want reproducible sequences of random numbers in javascript you can go fuck yourself.<sup>6</sup></p></li>
<li><p><strong>The C++ style:</strong> The solution in C++ is to use the <code>random</code> library, in which the RNG state is itself an object that must be passed to a probabilistic function, creating an object that can then be used to generate random numbers using the RNG state. It’s somewhat rigorous, but it leads to code like this, which is so obnoxiously painful that I barely even have words:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;random&gt;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// set seed using time, define PRNG with Mersenne Twister</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mt19937_64 mersenne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// sample_poisson() draws from Poisson(4.1) and returns an integer.</span></span>
<span id="cb1-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>poisson_distribution<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> sample_poisson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// draw poisson sample (passing the PRNG as argument) and write to stdout</span></span>
<span id="cb1-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"poisson sample: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sample_poisson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mersenne<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Honey I just wanted some Poisson variates I didn’t want your life story.</p></li>
<li><p><strong>The R style:</strong> Okay what if we secretly placed the RNG state into a <code>.Random.seed</code> variable that exists in the global environment but made it invisible so a typical user will never see it or think about it, and then have a <code>set.seed()</code> function to control it in ways that 99% of users won’t ever think about?</p></li>
</ul>
<p>Um. There is, as the young people say, a lot to unpack here.</p>
</section>
<section id="on-the-particulars-of-the-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="on-the-particulars-of-the-r-approach">On the particulars of the R approach</h2>
<p>Okay yes, that little summary is a bit of rhetorical largesse on my part. It should be obvious to anyone who knows me that the primary focus I have in writing about this topic is thinking about how R solves this. The whole purpose of talking about the “three styles” in the previous section is that I want to contrast the core approach in R with two other styles I’ve seen in other languages: compared to R, javascript is utterly lacking in rigour on this topic and as a consequence is utterly useless for analysts, whereas – by way of deliberately constructed contrast – C++ has rigour but is utterly lacking in practicality for everyday data analysis. The set of analysts who are going to put up with C++ bullshit when trying to simulate from a model is perilously close to measure zero. There is a <em>reason</em> why R adopts the peculiar solution it does.<sup>7</sup></p>
<p>So let’s unpack it a tiny bit. We’ll start by looking at the <code>.Random.seed</code> object itself.</p>
<section id="whats-in-the-.random.seed-babe" class="level3">
<h3 class="anchored" data-anchor-id="whats-in-the-.random.seed-babe">What’s in the <code>.Random.seed</code> babe?</h3>
<p>As I mentioned, what R does when you call <code>set.seed()</code> is create a hidden variable called <code>.Random.seed</code> that exists in the users global workspace, and is used to specify the state of the random number generator.<sup>8</sup> Here’s what it looks like when we call <code>set.seed()</code> with <code>seed = 1</code>:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb2-3">state</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1]       10403         624  -169270483  -442010614  -603558397
  [6]  -222347416  1489374793   865871222  1734802815    98005428
 [11]   268448037    63650722 -1754793285 -2135275840  -779982911
 [16]  -864886130  1880007095   463784588  1271615005  1390544442
....</code></pre>
</div>
</div>
<p>I’ve truncated the output because the actual <code>state</code> variable here is quite long and we don’t need all that clutter.<sup>9</sup> It’s noticeable, when you look at this thing, that the first two elements of the <code>.Random.seed</code> seem to be rather different from the others. Let’s test that by calling <code>set.seed()</code> with <code>seed = 2</code>:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb4-3">state</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1]       10403         624 -1619336578  -714750745  -765106180
  [6]   158863565 -1093870294   242367651 -1691232888 -1538791959
 [11]   438890646  -141146593   721730004  1779208901   575310018
 [16]  -949789349   329933024  -952437919  2079445422  1509473879
....</code></pre>
</div>
</div>
<p>Yeah okay, there’s something going on here. The first two values in this vector are clearly different in some sense from the rest of the numbers. Let’s start with the first element of our state vector, the <code>10403</code> value. This one is not part of the random number generator itself. Rather, it’s used to encode the <em>kind</em> of random number generator in use. The way to decode what means is to split it up into three numbers, like this <code>1 04 03</code>. From the help documentation:</p>
<blockquote class="blockquote">
<p>The lowest two decimal digits are in 0:(k-1) where k is the number of available RNGs. The hundreds represent the type of normal generator (starting at 0), and the ten thousands represent the type of discrete uniform sampler.</p>
</blockquote>
<p>To help make sense of this, it helps to realise that <code>set.seed()</code> has more arguments to it than just the <code>seed</code> value. There are in fact four arguments, as shown below:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">normal.kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample.kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<p>The <code>kind</code> argument specifies which RNG algorithm should be used to generate uniform random numbers (e.g., Mersenne Twister, the default), which is usually the thing we’re interested in, at least to the extent that most probabilistic process require that we have a generator for uniform random numbers. This is what the <code>03</code> part of that <code>10403</code> number refers to. However. There are two special cases that come up so often that R allows you to customise them. The <code>normal.kind</code> argument to <code>set.seed()</code> specifies the algorithm to by used when generating normally distributed numbers (e.g., Box-Muller), and this is is what the <code>04</code> part of <code>10403</code> references. The <code>sample.kind</code> argument refers to the algorithm used when sampling from a discrete set (e.g., as in the <code>sample()</code> function), and the <code>1</code> part of <code>10403</code> refers to that.</p>
<p>As to what the different options are, what defaults are used, and how those defaults have changed across different versions of R, I’ll just refer the interested reader to the help documentation, because honestly that’s not the point of this post. For now, it’s enough to recognise that the first element of <code>.Random.seed</code> specifies the kind of RNG, and that by default we’re using the Mersenne Twister any time we need uniform random numbers.</p>
<p>Okay, what about that second element? Much like the <code>10403</code> value in the first position, the <code>624</code> number in the second position seems to be screaming out “hello I am not actually a part of the RNG state” too, and indeed that’s correct. It’s specific to the Mersenne Twister, and is used to indicate that the <em>actual</em> Mersenne Twister RNG state is an integer vector of length 624. And shockingly, if we take a look at how long our <code>state</code> variable is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(state)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 626</code></pre>
</div>
</div>
<p>we get an answer of 626: there are 624 integers used to specify the state of the Mersenne Twister, one integer used to indicate that yes the Mersenne Twister state has length 624, and one more integer used to indicate that (among other things) we’re using the Mersenne Twister.</p>
<p>That checks out.</p>
</section>
<section id="lets-be-random" class="level3">
<h3 class="anchored" data-anchor-id="lets-be-random">Let’s be random</h3>
<p>Well that was tiresome. I seem to be pathologically incapable of writing a short blog post without going off on bizarre yak-shaving tangents. Sorry. Anyway, let’s get back on track and do something that relies on the state of the RNG, shall we? First, we’ll reset the value of <code>.Random.seed</code> and capture its initial value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span></code></pre></div>
</div>
<p>Next, I’ll do something that requires the random number generator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>When I do this, there are two things that happen. Most obviously, by calling <code>sample()</code> I now have a random permutation of the numbers between 1 to 10. But as a hidden side effect, the value of <code>.Random.seed</code> has changed.<sup>10</sup> Because the RNG state has changed, if I repeat the exercise I get a different random permutation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  3  1  5  8  2  6 10  9  4  7</code></pre>
</div>
</div>
<p>This is of course the desired behaviour, but the only reason it works is by relying on the <code>.Random.seed</code> vector. If I restore the original state of the RNG before calling <code>sample()</code>, I get the exact same result as the first time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">.Random.seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> state</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Again, this is expected and desired behaviour.</p>
</section>
<section id="strengths-and-weaknesses-of-the-r-approach" class="level3">
<h3 class="anchored" data-anchor-id="strengths-and-weaknesses-of-the-r-approach">Strengths and weaknesses of the R approach</h3>
<p>The approach used in R reflect as a specific philosophy that emerges from the core purpose of the language: <strong>R is a scripting language designed to support scientific data analysis</strong>. This core goal leads to two key features:</p>
<ul>
<li><p>Scientists care about computational reproducibility, so (unlike javascript) base R comes with the <code>set.seed()</code> function that allows you to initialise the state of the RNG in a reproducible way. In fact, R goes one step further and provides a <code>RNGversion()</code> function that supports backward-compatibility across R versions, because the low level details of how R implements random number generation have changed over the years.</p></li>
<li><p>Data analysts need simple, practical solutions. The C++ style where you have to construct an RNG object and then explicitly pass it as an argument when you want to sample from a distribution is awkward and frustrating, and rarely helpful when doing everyday data analysis.</p></li>
</ul>
<p>These twin considerations lead to the R solution: there’s <em>one</em> RNG state variable in R, tucked away in a hidden variable in the user workspace, and you rarely have to think about it in any more detail than remembering to include <code>set.seed()</code> in your analysis script. In some ways it’s an inelegant solution, but it’s shockingly effective from a practical standpoint.</p>
<p>However.</p>
<p>There are edge cases when the R solution doesn’t quite work as well as you’d hope, and I’ve encountered them more than once. Because R relies on a single <code>.Random.seed</code> variable to manage state, there’s no easy way for the analyst to make a distinction between “things I’m doing that incidentally require some random numbers”, and “other probabilistic things I’m doing that are utterly essential to a simulation”. Everything you do in an R script relies on the <em>same</em> random number generator, and uses the <em>same</em> seed to manage that state. This can sometimes be fragile, because any line of code that “incidentally” touches the RNG will affect the results from any “essential” probabilistic code you write later in the script. That happens a lot with code that has this structure:</p>
<ol type="1">
<li>set the RNG seed</li>
<li>do some essential probabilistic simulations</li>
<li>do something that incidentally calls the RNG</li>
<li>do some more essential probabilistic simulation</li>
</ol>
<p>When you write the code, what you sort of have in your head is that “I’m setting the RNG seed in part 1 in order to ensure that the simulations in part 2 and 4 are reproducible”, but you have a hidden dependence on the code in part 3. Often times, you don’t even realise that the code in part 3 is affecting the RNG state because there are lots of R functions that incidentally use the RNG without you realising it.</p>
<p>Often what people do to address this, when they are aware of this issue, is to set the seed multiple times, at key points in the code:</p>
<ol type="1">
<li>set the RNG seed</li>
<li>do some essential probabilistic simulations</li>
<li>do something that incidentally calls the RNG</li>
<li>set the RNG seed again</li>
<li>do some more essential probabilistic simulation</li>
</ol>
<p>By setting the seed in multiple places, you have a solution that is more robust. If, for example, there are package updates that change the manner in which the code in part 3 touches the RNG, your simulation in part 5 won’t be affected. It’s a defensive coding trick to minimise your exposure to unexpected changes to RNG state, and it works pretty well.<sup>11</sup></p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/dance-the-night.png" class="img-fluid" alt="Screenshot from the video clip to 'Dance The Night' by Dua Lipa"></p>
</section>
</section>
<section id="creating-an-isolated-rng-seed" class="level2">
<h2 class="anchored" data-anchor-id="creating-an-isolated-rng-seed">Creating an “isolated” RNG seed</h2>
<p>As you can probably guess, I am actually a huge fan of the R solution. Yes, it’s an unprincipled hack where the language “cheats” by creating a hidden global state variable, but it really does work for the vast majority of use cases and it doesn’t waste the analysts time by making them do all the dirty work managing the RNG themselves. From its inception R has <em>never</em> been a language that cares about ideological purity: as Hadley Wickham once noted,<sup>12</sup> R is first and foremost a language for “getting shit done”.</p>
<p>That being said, sometimes I find myself wishing there was a way of creating an “isolated” RNG seed. The idea here is that as the data analyst, I know perfectly well which parts of my code are essential to my probabilistic simulations, and what I really want to do is “protect” those parts of the code by executing them with a dedicated RNG. All my incidental code can use the global RNG state, but nothing I do in the incidental code would affect the output of the protected simulation code, <a href="https://www.youtube.com/watch?v=OiC1rgCPmUQ">not one hair out of place</a>.</p>
<blockquote class="blockquote">
<p>Watch me dance, dance the night away <br> My heart could be burnin’, but you won’t see it on my face <br> Watch me dance, dance the night away <br> I’ll still keep the party runnin’, not one hair out of place</p>
</blockquote>
<p>On the face of it, this seems hard to accomplish with R because the <code>.Random.seed</code> variable is aggressively unique. The documentation makes it very clear that the only place R will look for the RNG state is the <code>.Random.seed</code> variable in the user global environment, so you cannot solve this problem by creating a new <code>.Random.seed</code> variable in another environment. However, the documentation also makes clear that you are <em>absolutely</em> allowed to save the value of <code>.Random.seed</code> and restore it later.<sup>13</sup> In other words, you totally could do something like this:</p>
<ol type="1">
<li>Use <code>set.seed()</code> to create the “to-be-isolated” RNG, and then do something like <code>protected_state &lt;- .Random.seed</code> to store the state of that RNG</li>
<li>Use <code>set.seed()</code> again to set the “global” RNG state</li>
<li>Do some “incidental” random things (implicitly using the global RNG state)</li>
<li>In preparation for the protected step, cache the global state in a temporary <code>global_state &lt;- .Random.seed</code></li>
<li>Restore the protected RNG with <code>.Random.seed &lt;- protected_state</code></li>
<li>Run your “protected” simulation code</li>
<li>Capture the updated state <code>protected_state &lt;- .Random.seed</code></li>
<li>Restore the global RNG with <code>.Random.seed &lt;- global_state</code></li>
</ol>
<p>This approach works perfectly well, actually. There is absolutely nothing stopping you from caching the state of a protected RNG separately from the global RNG, and occasionally restoring it when you specifically want to use the protected RNG. The only problem with the solution is that I am <em>absolutely</em> not willing to faff about writing code that does this in my everyday analysis work. It’s time-consuming and annoying, and I have deadlines to meet.</p>
<p>Enter, stage left, the <a href="https://r6.r-lib.org/">R6</a> package. It is almost obnoxiously easy to design a stateful R6 class that solves this problem. Here’s how you do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">Seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R6<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seed"</span>,</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb16-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb16-4">      old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(...)</span>
<span id="cb16-6">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, old, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-8">    },</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">state =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb16-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>()) {</span>
<span id="cb16-11">      old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-13">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(expr), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> envir)</span>
<span id="cb16-14">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, old, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb16-17">    }</span>
<span id="cb16-18">  )</span>
<span id="cb16-19">)</span></code></pre></div>
</div>
<p>The <code>Seed</code> class is terribly simple. When you initialise a new <code>Seed</code> object, it temporarily caches the global <code>.Random.seed</code> state, then calls <code>set.seed()</code> to create the protected RNG state. This protected state is then cached within the <code>Seed</code> object itself as the <code>$state</code> field.<sup>14</sup> Finally, it restores the global <code>.Random.seed</code> variable to its original state.</p>
<p>Using the protected seed is pretty straightforward: the <code>Seed</code> class has a <code>$use()</code> method to which you pass an R expression. All code in that expression is evaluated using the protected RNG state rather than the global state. The mechanism here is exatly the same: the <code>$use()</code> method caches the global RNG state, copies the <code>$state</code> field to the <code>.Random.seed</code>, then executes the R code. After the code has executed, the new value of <code>.Random.seed</code> is copied back to the <code>$state</code> field, and then the global state is restored.</p>
<p>Let’s have a look at how it works. First, I’ll set the “usual” RNG state using <code>set.seed()</code> with <code>seed = 123</code>. Then, I’ll create two new isolated RNG seeds, both of which use <code>seed = 1</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb17-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb17-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-4">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Next, I’ll call <code>sample()</code> using these isolated seeds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb18-2">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8
 [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Notice that both of these produce identical output (as they should, since they were both initialised using the same <code>seed</code> value), and the output is exactly the same as the results we saw earlier when I used <code>set.seed(1)</code>. So far, so good. Okay, now let’s use these isolated seeds a second time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb20-2">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  3  1  5  8  2  6 10  9  4  7
 [1]  3  1  5  8  2  6 10  9  4  7</code></pre>
</div>
</div>
<p>Again, the results are identical to each other, and they’re also identical to the results we saw earlier when I called <code>sample()</code> a second time after using <code>set.seed(1)</code>. Also what we’re expecting. Yay! Finally, let’s check that using these isolated RNG seeds has left the state of <code>.Random.seed</code> in the global workspace unchanged:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(state, .Random.seed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Yup. It works.<sup>15</sup></p>
<p>Importantly for the desired functionality, the protection runs the other way too. RNG-sensitive code executed using the global RNG doesn’t affect the behaviour of code executed using one of the protected generators. This is actually the key feature, so let’s take a look. As before, we’ll set up our global generator and two identical protected generators.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb24-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb24-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-4">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Next, I’ll use the <code>x</code> generator to do something that we might imagine is part of an “essential” simulation exercise:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Unsurprisingly, it produces the same output. Now here’s the key part. What would have happened if I ran some incidental code beforehand? Well, let’s do exactly that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2875775</code></pre>
</div>
</div>
<p>In my hypothetical scenario, this would be something that happens during the incidental code (e.g., maybe a function I called on the side – in order to explore something that came up during the scientific reasoning process, because analysis code is <em>not</em> production code and it has an inherently different logic<sup>16</sup> – happened to generate a random number in order to break a tie or whatever). In the normal course of events, this would alter the state of the RNG for all subsequent code. But, if we now repeat the “essential” line of code using the <code>y</code> generator, we see that it still produces the exact same answer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Well that’s a relief. I mean, this is what we should expect because <code>x</code> and <code>y</code> were both created to be identical generators and they were both designed to be isolated from the global RNG state, so of course state changes in the global RNG are entirely irrelevant to the behaviour of code that uses one of the protected generators, but it’s nice to confirm.</p>
<p>This is the behaviour I wish I had easy access to in R. There are times when I have “special” code that I really, really, really want to be executed with its very own RNG, completely isolated from the global RNG. It actually irritates me that the solution to the problem can be implemented in R6 with a mere 19 lines of code. Annoyed that I didn’t think of this years ago tbqh.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>So okay, I solved the problem I was idly thinking about when I decided to fuck this particular spider. What now?</p>
<p>It would be pretty easy to wrap something like this in a package I suppose,<sup>17</sup> but (a) I’m too lazy to write it myself, and (b) I think the use case for it is pretty narrowly confined to situations when you are writing a very long script that performs an “essential” simulation and also contains incidental code isn’t supposed to affect the simulation itself. Plus, and perhaps most importantly, (c) remember how I said this was a spider-fucking post? I said it and I bloody well meant it. I’m not trying to Solve A Big Problem here. I’m just playing around with code and enjoying the act of writing about it.</p>
<p>That being said, I have to admit I’ve encountered a few situations in my professional life where I really wished there were a package that implemented something like the <code>Seed</code> class. I had one experience a little while back where I’d inherited a long simulation script that did the right thing insofar as it called <code>set.seed()</code> at the top of the script, but it had lots of essential simulation code interleaved between other code that was used for non-essential purposes and incidentally modified the RNG state. It was a nightmare to try to refactor the code without breaking reproducibility. Eventually I just had to give up. The code absolutely did need to be refactored because of the future use that we had in mind, and – despite the original programmers laudable effort to do the right thing – it was absolutely impossible to do so without changing the results of the simulations. It would have been a lot easier to do this if the “essential” simulation code had been properly isolated from the incidental code. Situations like this are exactly the ones where you want something like the <code>Seed</code> class.</p>
<p>Anyway. Whatever. This was supposed to be an exercise in fucking a spider not shaving a yak, and frankly there has been altogether too much <a href="https://en.wiktionary.org/wiki/yak_shaving">yak shaving</a> going on in this post. So let’s leave it there, yes?</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Okay fine it was yesterday morning, because instead of finishing this blog post last night as I’d intended I went out for cocktails. Sue me.↩︎</p></li>
<li id="fn2"><p>One of the most cursed things that has happened to public tech culture is the idea of corporate-style “community”. Oh look at me, I’m a tHouGHt lEaDer iN tEcH blah blah blah. Honey, if I wanted to masturbate in public there are much easier ways to make men pay to watch me do it.↩︎</p></li>
<li id="fn3"><p>Somewhat relatedly, I often think to myself that the reason why a lot of technical blog posts end up with very bland writing is that the author feels obligated to “act professionally” on their blog, for fear that their employer might see it and react negatively if they ever use the word “fuck”. I understand and share that sentiment but also… I’ve worked as an academic, I’ve worked in tech, and I now work in pharma. Anyone who knows me professionally knows that (especially as I’ve gotten older) I don’t ever talk like this at work. Professionalism is important, <em>in a professional context</em>. But my blog is not my job, and in much the same way that <a href="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/#art">trying to be a professional artist sucked all the joy out of making art for me</a>, trying to be professional in my blog posts sucks all the joy out of writing. In my professional life I have to be restrained, and things that are essential to my very character – my queerness, for instance – are inadmissable and unspeakable in a work context. I’m frankly unwilling to extend that level of self-imposed closeting to my personal life. This blog is part of my personal life, not my professional life. So I get to be me here. If that bothers people they are free to not read my blog.↩︎</p></li>
<li id="fn4"><p>As Dan Simpson once remarked, it is <em>extremely</em> homophobic of quarto not to support nested footnotes. Like, what the hell are queers supposed to do when we can’t turn our blog posts into a tangled web of unhinged footnotes? This is our primary defence mechanism to ensure that the straights on linkedin won’t ever try to interact with us, damn it.↩︎</p></li>
<li id="fn5"><p>No seriously. I spent a solid six months of my mid-20s life reading journal articles about algorithmic randomness and its relationships to Kolmogorov complexity and Bayesian inference, when instead I could have spent that time doing literally anything else and it was a terrible fucking decision.↩︎</p></li>
<li id="fn6"><p>Yes I know about <a href="https://www.npmjs.com/package/seedrandom">seedrandom</a>, shut up.↩︎</p></li>
<li id="fn7"><p>In defence of both C++ and javascript, you could probably argue the same for those languages: C++ is a systems language, and you’re not really supposed to use it for everyday data analysis. The tedious verbosity of C++ code in this context reflects the function of the language. Similarly, javascript was designed to support scripting for web pages, and while there are now libraries that support data analysis in javascript, it wasn’t originally designed for that purpose and so “vanilla” javascript doesn’t come with the same level of careful thought on this topic that you see in base R. My point in using those two as contrasts to R is not to call them bad languages, but to highlight the fact that different languages make different choices that reflect the primary function those languages were designed to support.↩︎</p></li>
<li id="fn8"><p>Note that the <code>.Random.seed</code> vector doesn’t actually exist at start up: it is created explicitly when the user calls <code>set.seed()</code>, but it will also be created for you if you do something that requires the RNG without previously calling <code>set.seed()</code>, using the current time and the process ID as the input.↩︎</p></li>
<li id="fn9"><p>I swear to the almighty femme top above, every single time I have to write a knitr hook I have to spend 20 minutes googling to find <a href="https://bookdown.org/yihui/rmarkdown-cookbook/hook-truncate.html">this page</a> again. I don’t know why this specific thing is so hard to search for, but I’m about <em>this</em> close to writing a pointless blog post on my own site that just copies the damn code line for line, just so that I don’t have to search for it again.↩︎</p></li>
<li id="fn10"><p>Parenthetically, if you want to configure R so that you get notified every time <code>.Random.seed</code> changes, you can set up a callback handler to do this. Henrik Bengtsson has a <a href="https://www.jottr.org/2020/09/21/detect-when-the-random-number-generator-was-used/">nice post</a> showing you how to do this. I have something similar set up in my <code>.Rprofile</code>.↩︎</p></li>
<li id="fn11"><p>More generally, though, if you want to be completely safe you’d probably need to use tools like <a href="https://www.docker.com/">Docker</a>, <a href="https://rstudio.github.io/renv/">renv</a>, and <a href="https://github.com/r-lib/rig">rig</a> to control the computational environment. But that’s beyond the scope.↩︎</p></li>
<li id="fn12"><p>I’m too lazy to track down the original citation or the exact quote, but I think he said it during an rstudio::conf / posit::conf talk. The specifics don’t matter very much.↩︎</p></li>
<li id="fn13"><p>The exact phrasing in the documentation says that <code>.Random.seed</code> “can be saved and restored, but should not be altered by the user”, i.e., it’s totally fine to copy the RNG state, just don’t try to modify the values stored in the vector yourself because you’ll almost certainly mess it up.↩︎</p></li>
<li id="fn14"><p>I should probably have made this a private field rather than a public field, and then written a public accessor method like <code>$get_state()</code> or whatever. But this is a toy example, I’m not trying to be rigorous here.↩︎</p></li>
<li id="fn15"><p>It should go without saying that this isn’t guaranteed to work properly if we’re doing a multi-threaded execution thing. But that’s true for normal random number generation anyway: you need special tools when doing random number generation in parallel. One of these days I want to do a deep dive on that topic, but it’s totally something for a future post.↩︎</p></li>
<li id="fn16"><p>One of these days I want to write a post about what counts as “best practice” for writing analysis code that doesn’t go into prod but might be sent to a regulator, because seriously my babes that is a fucking different beast altogether. But that’s for another time.↩︎</p></li>
<li id="fn17"><p>On the off chance anyone does go down this path, I propose the name “seedcatcher” so that all the stats gays can make “no loads refused” jokes about it. See also, “lubridate”.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Fine-Grained Control of {RNG} Seeds in {R}},
  date = {2023-12-27},
  url = {https://blog.djnavarro.net/posts/2023-12-27_seedcatcher},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Fine-Grained Control of RNG Seeds in
R.”</span> December 27, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher">https://blog.djnavarro.net/posts/2023-12-27_seedcatcher</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Randomness</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/</guid>
  <pubDate>Tue, 26 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/houdini.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The blogdown of theseus</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>It is the first day of my summer vacation. The out-of-office autoreply is on. I have a full tank of gas, half a pack of cigarettes, the sun is shining, and I’m wearing a sequined dress. Blues Brothers it is most certainly not, but a certain attitude is in force. And so it is that I’ve decided to get the band back together. Where “the band” in this case happens to be “a tool chain that looks like a shit version of <a href="https://pkgs.rstudio.com/blogdown/">blogdown</a>”.</p>
<p>Is it a good use of my time? No.&nbsp;Will I do a good job of it? No.&nbsp;But will it it make a good blog post? Also no.</p>
<p>Okay. So here’s the backstory. Literate programming in R has been around for a very long time. So much so that we’ve all become accustomed to thinking about tools like <a href="https://rmarkdown.rstudio.com/">R markdown</a>, <a href="https://pkgs.rstudio.com/blogdown/">blogdown</a>, and <a href="https://quarto.org/">quarto</a>, as baked-in aspects to the language. That’s not actually a bad thing. They’re good tools. I have no intention of abandoning any of them. But they aren’t primitives. Each of them is an opinionated tool that takes a code execution engine like <a href="https://yihui.org/knitr/">knitr</a> as a starting point, and builds from it in different ways. R markdown and quarto both use knitr to execute the R code within an appropriately annotated markdown document and then feed the results to <a href="https://pandoc.org/">pandoc</a> to create outputs in different formats. Blogdown takes the same idea, but passes the output to the <a href="https://gohugo.io/">hugo</a> static site generator to create full featured blogs and static websites. Et cetera.</p>
<p>What would happen if those “upstream” tools were taken away? What if you needed to create an R blog from scratch and the only part of this tool chain you had available to you was knitr. What choices would you make? Could you cobble together something vaguely similar to a blogdown site or a quarto blog, using entirely different constituent parts?</p>
<p>Why would you do this? You wouldn’t.</p>
<p>But for reasons that absolutely made sense to me at the time, this is precisely what I did. The website is live at <a href="https://knitr-11ty.djnavarro.net/">knitr-11ty.djnavarro.net/</a>, and – because I have absolutely no intention of writing the same blog post twice – if you want to “read more” as they used to say, you can check out the actual blog post <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">here</a>.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {The Blogdown of Theseus},
  date = {2023-12-23},
  url = {https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“The Blogdown of Theseus.”</span>
December 23, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus">https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus</a>.
</div></div></section></div> ]]></description>
  <category>Javascript</category>
  <category>R</category>
  <category>Blogging</category>
  <category>Literate Programming</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/</guid>
  <pubDate>Fri, 22 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/theseus-and-ariadne.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Closed form solutions for a two-compartment pharmacokinetic model</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>It is late December, the office is quiet on the eve of the annual ritual of everyone vanishing into their own personal end of year vacations, and I have time to breathe and – heaven forfend – to think. As such, and in the spirit of trying to do something professionally useful during this strangely empty moment of the year, it is time for another post in my irregular and unsystematic <a href="http://blog.djnavarro.net/category/pharmacometrics">series on pharmacometrics</a>. Does anyone except Danielle care? Unlikely. Will it make the world a better place? Absolutely not. But neither of these has ever been a governing consideration on this blog.<sup>1</sup></p>
<section id="the-matter-at-hand" class="level2">
<h2 class="anchored" data-anchor-id="the-matter-at-hand">The matter at hand</h2>
<p>The topic for today’s installment in Danielle’s ongoing public display of blog-based narcissism is deriving closed-form solutions for two-compartment pharmacokinetic (PK) models. There is absolutely nothing in the post that is not already extremely well known by pharmacometricians, and the scope of the post is somewhat narrower than the full range of two-compartment PK models. I’m mostly going to consider this model:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/2-cpt-phys.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%"></p>
</figure>
</div>
<p>Here we have the garden-variety two-compartment model with first-order absorption and first-order elimination. In the usual application of this model we have a drug that is administered orally. The drug is absorbed gradually from the gut into systemic circulation (central compartment), and is gradually eliminated from the body, again from the central compartment. During the time that the drug is within the body, it does not stay solely within the blood: it is distributed through various other tissues, and so the volume over which it is distributed changes over time. In a two-compartment model the complexity of this is simplified: the drug concentration in a typical study is measured only in the central compartment (e.g., by measuring plasma concentration), and so the model does not concern itself with the fine grained details of what is happening elsewhere in the body. It is often (not always) sufficient to assume that the “other” tissues in which the drug distributes comprise a single “peripheral compartment”.</p>
<p>In order to attach physiologically meaningful interpretation to this model, it’s typically parameterised in terms of the following five quantities:</p>
<ul>
<li>Volume of distribution for the central compartment <img src="https://latex.codecogs.com/png.latex?V_c"> refers to the volume over which the drug amount in the central compartment is assumed to be evenly distributed. It’s a fictional quantity – and can take on values that are much larger than the actual volume of blood or plasma for a variety of reasons – but it’s a convenient one.</li>
<li>Volume of distribution for the peripheral compartment <img src="https://latex.codecogs.com/png.latex?V_p">: as above but for the peripheral compartment</li>
<li>Clearance <img src="https://latex.codecogs.com/png.latex?Cl"> is the volume within the central compartment that can be completely cleared of drug per unit time, and governs the elimination of drug from the body</li>
<li>Intercompartmental clearance <img src="https://latex.codecogs.com/png.latex?Q"> governs the exchange of drug between the central and peripheral compartments</li>
<li>The absorption rate constant <img src="https://latex.codecogs.com/png.latex?k_a"> is a scaling factor used to describe the proportion of the drug amount currently in the gut that is transferred into systemic circulation at any moment in time<sup>2</sup></li>
</ul>
<p>This model is probably the one I come across most in my everyday work, and these are the parameters used to interpret model behaviour. However, it’s not the most convenient form to use when working with the model mathematically, so let’s rewrite it in terms that are more convenient.</p>
</section>
<section id="a-two-compartment-pharmacokinetic-model" class="level2">
<h2 class="anchored" data-anchor-id="a-two-compartment-pharmacokinetic-model">A two compartment pharmacokinetic model</h2>
<p>As in every mathematical fairy tale and religious text, we begin with some notation. The state of our system will at time <img src="https://latex.codecogs.com/png.latex?t"> be described in terms of three quantities: <img src="https://latex.codecogs.com/png.latex?x_%7B0t%7D"> is the drug amount in the depot compartment (generally the gut) at time <img src="https://latex.codecogs.com/png.latex?t"> units post-dose, <img src="https://latex.codecogs.com/png.latex?x_%7B1t%7D"> is the amount in the central compartment, and <img src="https://latex.codecogs.com/png.latex?x_%7B2t%7D"> is the amount in the peripheral compartment. Our state vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t%20%5Cin%20%5Cmathbb%7BR%7D%5E3_%7B%5Cgeq%200%7D"> is the collection of these three things, and if you care deeply about such matters you might wish to assert that the drug amounts are described by a function <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D(t)"> that takes on such values:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D(t)%20=%20%5Cmathbf%7Bx%7D_t%20=%20(x_%7B0t%7D,%20x_%7B1t%7D,%20x_%7B2t%7D)%0A"> In an act of perversity, however, I’m not going to use the functional notation <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D(t)"> here. I’m simply going to talk about the state vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> because honestly no-one wants to see what this post would look like if I added all those extra parentheses.</p>
<p>Having established this notation and – in a Barbie-like state of best-day-ever excitement – we can now describe how the state vector changes over time using a system of ordinary differential equations (ODEs):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B0t%7D%20&amp;%20=%20&amp;%20-k_%7B01%7D%20x_%7B0t%7D%20%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B1t%7D%20&amp;%20=%20&amp;%20k_%7B01%7D%20x_%7B0t%7D%20-%20(k_%7B12%7D%20+%20k_%7B10%7D)%20x_%7B1t%7D%20+%20k_%7B21%7D%20x_%7B2t%7D%20%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B2t%7D%20&amp;%20=%20&amp;%20k_%7B12%7D%20x_%7B1t%7D%20-%20k_%7B21%7D%20x_%7B2t%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Here we have four rate constant parameters (<img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">), each of which describes the instantaneous transfer of drug quantity from one compartment to another: the notational convention is to refer to the source compartment as the first subscript and the destination compartment as the second, so for instance <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D"> is the rate constant associated with the movement of drug from the central compartment (compartment 1) to the peripheral compartment (compartment 2). In this notation the “zero-th” compartment is an abstraction: <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D"> describes absorption (generally from the gut) and <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D"> describes elimination (generally to urine).<sup>3</sup></p>
<p>Schematically, the exchange of drug amounts between the compartments in this formalism can be visualised in the following way:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/2-cpt-micro.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%"></p>
</figure>
</div>
<p>Structurally you can see it’s the same as the model described at the start, and it’s not at all difficult to convert between the physiologically-interpretable parameterisation and the mathematically-convenient parameterisation using these rate constants.<sup>4</sup> <sup>5</sup></p>
<p>In matrix form we can express the ODE system as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdt%7D%20%5Cmathbf%7Bx%7D_t%20=%20%5Cmathbf%7BK%7D%20%5Cmathbf%7Bx%7D_t%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BK%7D%20=%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bccc%7D%0A-k_%7B01%7D%20&amp;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20&amp;%20%20%20%20%20%20%200%20%5C%5C%0Ak_%7B01%7D%20&amp;%20-k_%7B12%7D%20-%20k_%7B10%7D%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%200%20&amp;%20%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>and our initial conditions for a dose administered orally at time <img src="https://latex.codecogs.com/png.latex?t=0"> are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_%7B0%7D%20=%20(%5Cmbox%7Bdose%7D,%200,%200)%0A"></p>
<p>This particular parameterisation is most helpful when we want to think about the underlying ODE system, and it’s the one I’ll use for deriving solutions in this post, but when we want to interpret the models we usually rewrite it in terms of the parameters I described at the start of the post.<sup>6</sup></p>
</section>
<section id="solving-linear-time-homogeneous-ode-systems" class="level2">
<h2 class="anchored" data-anchor-id="solving-linear-time-homogeneous-ode-systems">Solving linear time-homogeneous ODE systems</h2>
<p>So now we get to the part of the post where the mathematics begins to intrude. Per our model, we have a linear time-homogeneous ODE system that we want to solve, in the sense that we would like a nice algebraic expression that describes the state <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> at time <img src="https://latex.codecogs.com/png.latex?t">. Of course, I want all sorts of things in life that I can’t obtain without suffering, and this is no exception. If you want to solve a linear homogeneous ODE, you’re going to have to work with matrix exponentials, and with matrix exponentials comes pain. Especially if, like me, you vaguely remember matrix exponentials from an undergrad maths class you took 30 years ago and you actually haven’t needed to use them for anything much in the decades that followed.</p>
<p>Perhaps a small “refresher” will help us all then. The <a href="https://en.wikipedia.org/wiki/Matrix_exponential">matrix exponential</a> <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D"> of a matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is a quantity that is broadly analogous to its scalar equivalent <img src="https://latex.codecogs.com/png.latex?e%5Ek"> for scalar value <img src="https://latex.codecogs.com/png.latex?k">, and has similar (but not identical) properties. In the same way that we can define a scalar exponential <img src="https://latex.codecogs.com/png.latex?e%5Ek"> via a <a href="https://en.wikipedia.org/wiki/Taylor_series#List_of_Maclaurin_series_of_some_common_functions">series expansion</a>, the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D"> is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ae%5E%7B%5Cmathbf%7BK%7D%7D%20&amp;=&amp;%20%5Cmathbf%7BI%7D%20+%20%5Cmathbf%7BK%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cmathbf%7BK%7D%5E2%20+%20%5Cfrac%7B1%7D%7B6%7D%20%5Cmathbf%7BK%7D%5E3%20+%20%5Cldots%20+%20%5Cfrac%7B1%7D%7Bj!%7D%20%5Cmathbf%7BK%7D%5Ej%20+%20%5Cldots%20%5C%5C%0A&amp;=&amp;%20%5Csum_%7Bj%20=%200%7D%5E%5Cinfty%20%5Cfrac%7B1%7D%7Bj!%7D%20%5Cmathbf%7BK%7D%5Ej%0A%5Cend%7Barray%7D%0A"></p>
<p>Some handy properties for matrix exponentials, most of which we’ll need:</p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is a matrix of zeros, <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D%20=%201"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is the identity <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BI%7D">, <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D%20=%20e%5E%7B%5Cmathbf%7BI%7D%7D%20=%20%5Cmathbf%7BI%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?t"> is a scalar, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20e%5Et%20e%5E%5Cmathbf%7BK%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?m"> and <img src="https://latex.codecogs.com/png.latex?n"> are scalars, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bm%5Cmathbf%7BK%7D%7D%20e%5E%7Bn%20%5Cmathbf%7BK%7D%7D%20=%20e%5E%7B(m%20+%20n)%5Cmathbf%7BK%7D%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BD%7D%20=%20%5Cmbox%7Bdiag%7D(d_1,%20d_2,%20%5Cldots)"> is a diagonal matrix, <img src="https://latex.codecogs.com/png.latex?e%5E%5Cmathbf%7BD%7D"> is the diagonal matrix <img src="https://latex.codecogs.com/png.latex?e%5E%5Cmathbf%7BD%7D%20=%20%5Cmbox%7Bdiag%7D(e%5E%7Bd_1%7D,%20e%5E%7Bd_2%7D,%20%5Cldots)"></li>
<li>The derivative is analogous to the scalar case, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%7D%7Bdt%7D%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BK%7D%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D"></li>
<li>For an invertible matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BH%7D"> such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BHMH%5E%7B-1%7D%7D">, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BH%7D%20e%5E%7Bt%20%5Cmathbf%7BM%7D%7D%20%5Cmathbf%7BH%5E%7B-1%7D%7D"></li>
</ul>
<p>On the basis of the derivative property above, it’s immediately clear that the solution to our ODE system is going to take the following form:<sup>7</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_t%20=%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5Cmathbf%7Bx%7D_0%0A"></p>
<p>Seeing that this is the form of the solution is the easy part. The hard part, of course, is finding the expression that describes the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D">. Fortunately, this is something that cleverer people than I have already thought about, and in any case the properties of matrix exponentials suggest a general strategy for such problems:</p>
<ol type="1">
<li>Find the eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda_1,%20%5Clambda_2,%20%5Cldots">, for the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"></li>
<li>Find the corresponding eigenvectors <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bu%7D_1,%20%5Cmathbf%7Bu%7D_2,%20%5Cldots"></li>
<li>Construct the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%20=%20%5B%5Cmathbf%7Bu%7D_1,%20%5Cmathbf%7Bu%7D_2,%20%5Cldots%5D"> with the eigenvectors as columns, and diagonal matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> whose diagonals correspond to eigenvalues, and invert it to obtain <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D"></li>
<li>Noting that we have the eigendecomposition <img src="https://latex.codecogs.com/png.latex?K%20=%20%5Cmathbf%7BU%20%5CLambda%20U%5E%7B-1%7D%7D">, rewrite <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BU%7D%20e%5E%7Bt%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%5E%7B-1%7D%7D"></li>
<li>Since <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> is diagonal, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7B%5CLambda%7D%7D"> is straightforward, and we can calculate <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D"> by matrix multiplication</li>
</ol>
<p>Okay then. Much like the Cylons, we have a Plan.<sup>8</sup></p>
</section>
<section id="solve-a-simpler-problem" class="level2">
<h2 class="anchored" data-anchor-id="solve-a-simpler-problem">Solve a simpler problem</h2>
<p>As Jane Austen famously said, “it is a truth universally acknowledged, that a woman in possession of a three-state ODE system must be in want of a two-state ODE that is easier to solve”. And so it is here. Rather than try to work with the model as described, I’ll start with a simpler model (one that is itself quite useful) that will be easier to solve, and whose solution will make it massively easier to solve the full system. And so it is that our first step will be to retreat from a two-compartment model with oral dosing to a two-compartment model with bolus IV dosing.</p>
<p>In most cases I’ve come across in my pharmacometric work so far, the drug we’re modelling is orally administered, and the model with first-order absorption into the central compartment described above (or some variation thereof) is the one we want to use. However, it’s convenient to start with a simpler case where the drug is administered by a bolus IV dose, and of course this scenario does arise in real life. In this scenario there is no depot compartment, and entire dose appears in the central compartment at <img src="https://latex.codecogs.com/png.latex?t%20=%200">. Or, to frame it in technical terms, we have zero-order absorption into the central compartment rather than first-order absorption. Again assuming first-order elimination, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is now a simpler 2x2 matrix.<sup>9</sup> In this situation our state vector consists only of the central and peripheral compartments:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D(t)%20=%20%5Cmathbf%7Bx%7D_t%20=%20(x_%7B1t%7D,%20x_%7B2t%7D)%0A"></p>
<p>Our state transition matrix is now this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BK%7D%20=%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>and our initial state at time <img src="https://latex.codecogs.com/png.latex?t=0"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_%7B0%7D%20=%20(%5Cmbox%7Bdose%7D,%200)%0A"></p>
<p>As before, our solution will be of the form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_t%20=%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5Cmathbf%7Bx%7D_0%0A"></p>
<p>and we can find this solution by following the general strategy outlined earlier. To that end, I’ll begin by finding the <a href="https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors">eigenvalues</a> <img src="https://latex.codecogs.com/png.latex?%5Clambda"> that satisfy <img src="https://latex.codecogs.com/png.latex?%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20=%200">. Well, technically speaking, I’ll begin by taking a little trip down memory lane to 1994 and my first-year undergraduate maths classes, but I’ll spare you that traumatic recollection and jump straight to the derivation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%0A&amp;=&amp;%20%5Cdet%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20-%20%5Clambda%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;=&amp;%20(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)(-k_%7B21%7D%20-%20%5Clambda)%20-%20k_%7B12%7D%20k_%7B21%7D%20%5C%5C%0A&amp;=&amp;%20%5Clambda%5E2%20+%20(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%20%5Clambda%20+%20k_%7B10%7D%20k_%7B21%7D%0A%5Cend%7Barray%7D%0A"> The final expression doesn’t factorise into anything very pretty, so it’s conventional to simply define new variables <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> such that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Calpha%20%5Cbeta%20&amp;%20=%20&amp;%20k_%7B10%7D%20k_%7B21%7D%20%5C%5C%0A%5Calpha%20+%20%5Cbeta%20&amp;%20=%20&amp;%20k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>when written in these new variables, which were constructed <em>specifically</em> to make an expression that factorises easily, the left hand side of our characteristic equation turns out to be shockingly simple to factorise:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20=%20%5Clambda%5E2%20+%20(%5Calpha%20+%20%5Cbeta)%20%5Clambda%20+%20%5Calpha%20%5Cbeta%20=%20(%5Clambda%20+%20%5Calpha)(%5Clambda%20+%20%5Cbeta)%0A"></p>
<p>Wonders will never cease. In any case, when written in these terms, our two eigenvalues are <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Cbeta">. This is – of course – a pure notational convenience since <img src="https://latex.codecogs.com/png.latex?-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?-%5Cbeta"> were defined such that they would end up being the eigenvalues, but it’s worth mentioning this because these are the exact variables that show up in various software systems (e.g., <a href="https://www.iconplc.com/solutions/technologies/nonmem">NONMEM</a>) and textbooks. Nevertheless, it’s still no good to us if we don’t go through tedious business of applying the quadratic formula to express <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> in terms of <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">. So here it is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Calpha,%20%5Cbeta%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B(%5Calpha%20+%20%5Cbeta)%20%5Cpm%20%5Csqrt%7B(%5Calpha%20+%20%5Cbeta)%5E2%20-%204%5Calpha%20%5Cbeta%7D%7D%7B2%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%20%5Cpm%20%5Csqrt%7B(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%5E2%20-%204k_%7B10%7D%20k_%7B21%7D%7D%7D%7B2%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Now that we have the eigenvalues, we proceed to the eigenvectors. For each eigenvalue <img src="https://latex.codecogs.com/png.latex?%5Clambda"> there is a corresponding eigenvector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bu%7D"> such that <img src="https://latex.codecogs.com/png.latex?(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20%5Cmathbf%7Bu%7D%20=%20%5Cmathbf%7B0%7D">. In our case:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20-%20%5Clambda%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bc%7D%0Au_1%20%5C%5C%0Au_2%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A=%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bc%7D%0A0%20%5C%5C%0A0%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>If this were a bigger matrix we’d probably use <a href="https://en.wikipedia.org/wiki/Gaussian_elimination">Gauss-Jordan elimination</a> to construct the row-reduced echelon form (RREF) and then read off the solutions using the RREF. That’s kind of overkill in this case because – let’s be brutally honest here – you can <em>look</em> at the bottom row and guess that the solution is going to have the form <img src="https://latex.codecogs.com/png.latex?u_1%20=%20k_%7B21%7D%20+%20%5Clambda">, <img src="https://latex.codecogs.com/png.latex?u_2%20=%20k_%7B12%7D">.</p>
<p>To convince ourselves that this is the correct solution, we’ll substitute it into both rows and see that, shockingly, we end up with zero. We’ll start with the bottom row because that was the one we used to guess the solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ak_%7B12%7D%20u_1%20+%20(-k_%7B21%7D%20-%20%5Clambda)%20u_2%0A&amp;=&amp;%20k_%7B12%7D%20(k_%7B21%7D%20+%20%5Clambda)%20+%20(-k_%7B21%7D%20-%20%5Clambda)%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%200%0A%5Cend%7Barray%7D%0A"></p>
<p>I mean. Of course that was going to work. We literally chose expressions for <img src="https://latex.codecogs.com/png.latex?u_1"> and <img src="https://latex.codecogs.com/png.latex?u_2"> that would cause the two terms to cancel out. The actual test of our guess arrives when we try the same thing with the top row. This time it’s takes a little more effort:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)%20u_1%20+%20k_%7B21%7D%20u_2%0A&amp;=&amp;%20(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)%20(k_%7B21%7D%20+%20%5Clambda)%20+%20k_%7B21%7D%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%20-k_%7B12%7D%20k_%7B21%7D%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20%5Clambda%20k_%7B21%7D%20-%20k_%7B12%7D%20%5Clambda%20-%20k_%7B10%7D%20%5Clambda%20-%20%5Clambda%5E2%20+%20k_%7B21%7D%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20%5Clambda%20k_%7B21%7D%20-%20k_%7B12%7D%20%5Clambda%20-%20k_%7B10%7D%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20(k_%7B21%7D%20+%20k_%7B12%7D%20+%20k_%7B10%7D)%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20%5Calpha%20%5Cbeta%20-%20(%5Calpha%20+%20%5Cbeta)%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20(%5Clambda%20+%20%5Calpha)%20(%5Clambda%20+%20%5Cbeta)%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>Once we have arrived at this expression, it’s clear that our guess is correct. The only two values that <img src="https://latex.codecogs.com/png.latex?%5Clambda"> can take are the eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Cbeta">, and both of those yield a value of zero. So our guess was indeed correct and we have our eigenvectors. Awesome.<sup>10</sup></p>
<p>Now that we are in possession of eigenvalues and eigenvectors we can construct the matrices <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> that will give us the <a href="https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix">eigendecomposition</a> <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BU%20%5CLambda%20U%7D%5E%7B-1%7D">. Here they are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7B%5CLambda%7D%20&amp;=&amp;%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-%5Calpha%20&amp;%200%20%5C%5C%0A0%20&amp;%20-%5Cbeta%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A%5Cmathbf%7BU%7D%20&amp;=&amp;%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ak_%7B21%7D%20-%5Calpha%20&amp;%20k_%7B21%7D%20-%20%5Cbeta%20%5C%5C%0Ak_%7B12%7D%20&amp;%20k_%7B12%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>The last thing we need is the inverse <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D">, which is also fairly easy to derive. It’s a 2x2 matrix, after all, and inverting a 2x2 matrix isn’t even undergrad level maths: they taught us that one in high school. Noting first that determinant <img src="https://latex.codecogs.com/png.latex?%5Cdet%20%5Cmathbf%7BU%7D"> is as follows,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdet%20%5Cmathbf%7BU%7D%20=%20(k_%7B21%7D%20-%20%5Calpha)%20k_%7B12%7D%20-%20k_%7B12%7D%20(k_%7B21%7D%20-%20%5Cbeta)%20=%20k_%7B12%7D%20(%5Cbeta%20-%20%5Calpha)%0A"></p>
<p>we then write down the inverse as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BU%7D%5E%7B-1%7D%20=%0A%5Cfrac%7B1%7D%7Bk_%7B12%7D(%5Cbeta%20-%20%5Calpha)%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ak_%7B12%7D%20&amp;%20%5Cbeta%20-%20k_%7B21%7D%20%5C%5C%0A-k_%7B12%7D%20&amp;%20k_%7B21%7D%20-%5Calpha%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>So now we have <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D">, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D">, and we could proceed straight to doing the matrix multiplication but for the sake of what is left of my sanity I’m going to simplify my notation a bit and define two new constants <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Aa%20&amp;%20=%20&amp;%20(k_%7B21%7D%20-%20%5Calpha)%20/%20k_%7B12%7D%20%5C%5C%0Ab%20&amp;%20=%20&amp;%20(k_%7B21%7D%20-%20%5Cbeta)%20/%20k_%7B12%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>With the help of these two constant, the expressions for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D"> are now considerably less unpleasant on the eye:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7BU%7D%20&amp;=&amp;%0Ak_%7B12%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20&amp;%20b%20%5C%5C%0A1%20&amp;%201%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A%5Cmathbf%7BU%7D%5E%7B-1%7D%20&amp;=&amp;%0A%5Cdisplaystyle%5Cfrac%7B1%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>Now that we have the eigendecomposition <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BU%20%5CLambda%20U%7D%5E%7B-1%7D">, we can solve our matrix exponential. Using the last of the matrix exponential properties in the potted list I provided earlier in the pose, we can express the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%20%5Cmathbf%7BK%7D%7D"> as the matrix product <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%20e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%7D%5E%7B-1%7D">. Conveniently, <img src="https://latex.codecogs.com/png.latex?%5CLambda"> is a diagonal matrix which makes <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D"> trivially easy, and so we obtain this:<sup>11</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ae%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20&amp;%20=%20&amp;%0A%5Cmathbf%7BU%7D%20e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%7D%5E%7B-1%7D%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20&amp;%20b%20%5C%5C%0A1%20&amp;%201%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ae%5E%7B-%5Calpha%20t%7D%20&amp;%200%20%5C%5C%0A0%20&amp;%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20e%5E%7B-%5Calpha%20t%7D%20&amp;%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5C%5C%0Ae%5E%7B-%5Calpha%20t%7D%20&amp;%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;=&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A(a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20-ab%20(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20%5C%5C%0A-(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20(-b%20e%5E%7B-%5Calpha%20t%7D%20+%20a%20e%5E%7B-%5Cbeta%20t%7D)%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>So now we can turn to our solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7Bx%7D_t%20&amp;%20=%20&amp;%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5C%20%5Cmathbf%7Bx%7D_0%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A(a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20-ab%20(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20%5C%5C%0A-(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20(-b%20e%5E%7B-%5Calpha%20t%7D%20+%20a%20e%5E%7B-%5Cbeta%20t%7D)%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A%5Cmbox%7Bdose%7D%20%5C%5C%0A0%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5C%5C%0Ae%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"> Recalling that the central compartment corresponds to the first element of the state vector (top row), we can focus on this and compute the drug amount (not concentration) in the central compartment at time <img src="https://latex.codecogs.com/png.latex?t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ax_%7B1t%7D%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Ctimes%20%5Cleft(%20%20a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Ctimes%20%5Cleft(%20%5Cleft(%5Cfrac%7Bk_%7B21%7D%20-%20%5Calpha%7D%7Bk_%7B12%7D%7D%20%5Cright)%20%20e%5E%7B-%5Calpha%20t%7D%20-%20%5Cleft(%5Cfrac%7Bk_%7B21%7D%20-%20%5Cbeta%7D%7Bk_%7B12%7D%7D%20%5Cright)%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cleft(%20%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5Calpha%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5Cright)%20e%5E%7B-%5Calpha%20t%7D%20-%20%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5Cbeta%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5Cright)%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cleft(A%20e%5E%7B-%5Calpha%20t%7D%20+%20%20B%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%0A%5Cend%7Barray%7D%0A"></p>
<p>and thus we have a model that can be expressed as a sum of two exponentials where:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0AA%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Calpha%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5C%5C%20%5C%5C%0AB%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Cbeta%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>If I’m being completely honest, it’s precisely this biexponential<sup>12</sup> form that motivated me to suck it up and derive the solution myself. One of the textbooks I was reading at work – in order to familiarise myself with some of the pharmacokinetic background that I need – introduced the two-compartment model by defining it formally in terms of this biexponential expression,<sup>13</sup> but then drew this model schematically using a state-transition diagram similar to the ones I used at the start of this post. I was <em>baffled</em>, because it was not at all obvious to me from inspection how the diagram and the equation were linked, and the book did not present a derivation.</p>
<p>So yes, as with most things I do on this blog, my true motivation was in fact pig-headed stubbornness. I’m terribly bad at taking certain things on faith, and felt a deep – and let’s be honest, pathological – need to derive the solution myself. It is the very essence of spite-driven mathematics.</p>
</section>
<section id="returning-to-the-original-problem" class="level2">
<h2 class="anchored" data-anchor-id="returning-to-the-original-problem">Returning to the original problem</h2>
<p>Now that we have a closed form solution for a two-compartment model with zero-order absorption into the central compartment (i.e., bolus IV dosing), we can return to the oral dosing model (assuming first-order absorption) that we started with. It’s a relatively straightforward solution at this point since we have a continuous influx from the gut, so we can convolve this time-dependent influx with the zero-order solution. Since I’m assuming bioavailability <img src="https://latex.codecogs.com/png.latex?F%20=%201"> for this post<sup>14</sup> I’ll happily act as if the drug amount arriving in the central compartment from the gut at time <img src="https://latex.codecogs.com/png.latex?t"> is the same as the amount that left the gut at time <img src="https://latex.codecogs.com/png.latex?t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A-%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B0t%7D%20=%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20e%5E%7B-k_%7B01%7D%20t%7D%0A"></p>
<p>Thus the drug amount in the central compartment at time <img src="https://latex.codecogs.com/png.latex?t"> is given:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ax_%7B1t%7D%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cdisplaystyle%5Cint_0%5Et%20e%5E%7B-k_%7B01%7D%20u%7D%20%5Cleft(%20A%20e%5E%7B-%5Calpha%20(t-u)%7D%20+%20B%20e%5E%7B-%5Cbeta%20(t-u)%7D%20%5Cright)%20%5C%20du%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cdisplaystyle%5Cint_0%5Et%20A%20e%5E%7B-%5Calpha%20(t-u)%20-k_%7B01%7D%20u%7D%20+%20B%20e%5E%7B-%5Cbeta%20(t-u)%20-k_%7B01%7D%20u%7D%20%20%5C%20du%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cleft(%20Ae%5E%7B-%5Calpha%20t%7D%20%5Cleft%5B%20%5Cfrac%7B1%7D%7B%5Calpha%20-%20k_%7B01%7D%7D%20e%5E%7B(%5Calpha%20-%20k_%7B01%7D)u%7D%20%5Cright%5D_0%5Et%20+%20Be%5E%7B-%5Cbeta%20t%7D%20%5Cleft%5B%20%5Cfrac%7B1%7D%7B%5Cbeta%20-%20k_%7B01%7D%7D%20e%5E%7B(%5Cbeta%20-%20k_%7B01%7D)u%7D%20%5Cright%5D_0%5Et%20%20%20%5Cright)%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cleft(%20%5Cdisplaystyle%5Cfrac%7BAe%5E%7B-%5Calpha%20t%7D%20(e%5E%7B(%5Calpha%20-%20k_%7B01%7D)t%7D%20-%201)%7D%7B%5Calpha%20-%20k_%7B01%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BBe%5E%7B-%5Cbeta%20t%7D%20(e%5E%7B(%5Cbeta%20-%20k_%7B01%7D)t%7D%20-%201)%7D%7B%5Cbeta%20-%20k_%7B01%7D%7D%20%20%20%5Cright)%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>And just like that we have a solution.</p>
</section>
<section id="does-it-work" class="level2">
<h2 class="anchored" data-anchor-id="does-it-work">Does it work?</h2>
<p>I’m not so arrogant as to simply assume I got it right. It’s reassuring that all the expressions that came out along the way bear a striking resemblance to those I’ve seen in the textbooks, but I still want to compare to a numerical method that I trust. In an earlier post I talked about <a href="../../posts/2023-08-28_rxode2/">using the rxode2 package to simulate from pharmacokinetic models</a>, and while I could certainly use some other tool for this purpose (e.g., the deSolve package would be totally fine here) I might as well use rxode2 here as well. Here’s an R function that solves the problem numerically:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">numeric_solution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(k01, k12, k21, k10, time) {</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rxode2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxode</span>({</span>
<span id="cb1-4">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A0) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A0;</span>
<span id="cb1-5">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k10) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k21 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A2;</span>
<span id="cb1-6">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A2;</span>
<span id="cb1-7">  })</span>
<span id="cb1-8">  inits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-9">  </span>
<span id="cb1-10">  ev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rxode2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eventTable</span>()</span>
<span id="cb1-11">  ev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add.sampling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time)</span>
<span id="cb1-12">  pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k01 =</span> k01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k12 =</span> k12, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k21 =</span> k21, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k10 =</span> k10)</span>
<span id="cb1-13">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(pars, ev, inits)</span>
<span id="cb1-14">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(dat)</span>
<span id="cb1-15">  </span>
<span id="cb1-16">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time, </span>
<span id="cb1-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>A1, </span>
<span id="cb1-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solution =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span></span>
<span id="cb1-20">  )</span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(out)</span>
<span id="cb1-22">}</span></code></pre></div>
</div>
<p>Here’s the corresponding function implementing the analytic solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">analytic_solution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(k01, k12, k21, k10, time) {</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  ks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k21</span>
<span id="cb2-4">  alpha <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (ks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(ks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k21))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-5">  beta  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (ks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(ks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k21))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-6">  </span>
<span id="cb2-7">  A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta)</span>
<span id="cb2-8">  B <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(beta <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta) </span>
<span id="cb2-9">  </span>
<span id="cb2-10">  A_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb2-11">  B_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> B <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb2-12"></span>
<span id="cb2-13">  A_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)  </span>
<span id="cb2-14">  B_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> B_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)</span>
<span id="cb2-15">  </span>
<span id="cb2-16">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time, </span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> A_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B_term, </span>
<span id="cb2-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solution =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analytic"</span></span>
<span id="cb2-20">  )</span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(out)</span>
<span id="cb2-22">}</span></code></pre></div>
</div>
<p>Now let’s compare the two:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">k01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-2">k12 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-3">k21 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-4">k10 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-5">time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">dat_numb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb3-8">dat_anal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analytic_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb3-9">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(dat_numb, dat_anal)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, amount, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> solution)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>solution) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Looks good to me? The differences between the two are small enough that we can attribute them to simulation precision etc…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(dat_numb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dat_anal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.920889e-08</code></pre>
</div>
</div>
<p>…and yes, you get similar agreement between the two versions<sup>15</sup> if you feed in other parameter values. That’s good enough for me.</p>
</section>
<section id="was-it-worth-it" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="was-it-worth-it">Was it worth it?</h2>
<p>And so we come to the end. The problem is solved, Danielle has convinced herself that she understands the formalism properly, and a great many pieces of scrap paper were sacrificed to the dark gods of mathematics in the process. Was it all worthwhile? I mean… in one sense, probably not. The analytic solutions I’ve derived here are <em>highly</em> unoriginal, and of course they have already been implemented and incorporated into standard tools used in pharmacometric modelling. Nothing new has been added to the world by me doing this. But also, it’s worth highlighting that it was a <em>very</em> good thing that these solutions exist thanks to the hard work of those that have come before us,<sup>16</sup> because they do make a massive difference in terms of computational performance:</p>
<div class="cell column-page-right">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">microbenchmark<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric_solution</span>(k01, k12, k21, k10, time),</span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analytic_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb6-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: microseconds
                                        expr       min         lq       mean     median         uq      max neval
  numeric_solution(k01, k12, k21, k10, time) 39558.780 45899.2650 51754.4014 49391.4505 55292.3945 92581.17   100
 analytic_solution(k01, k12, k21, k10, time)   137.652   170.0235   314.0824   237.3915   313.8525  5412.48   100</code></pre>
</div>
</div>
<p>The units here are microseconds, so yeah okay they’re both fast. They’re both fast enough that I have no reason at all to care when running a small simulation: <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta%E2%80%93Fehlberg_method">RK45</a> and <a href="https://en.wikipedia.org/wiki/Backward_differentiation_formula">BDF</a> exist for a <em>reason</em>, and as Dan Simpson reminded me the other day, generations of numerical analysts have suffered so that I don’t have to.</p>
<p>However, a speedup of a this magnitude makes a very big difference in the context of model fitting. Even my lazy R implementation of the analytic solution is hundreds of times faster than the very efficient numerical solution implemented by rxode2, and of course the speed up would be even more extreme if I could be bothered writing it in a compiled language like C++ or Rust or whatever. But of course I have no need to do that because that’s already been done in software. All I really care about for this post is deriving the solution and verifying that it works.</p>
<p>I’ve suffered enough.</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>Open access resources:</p>
<ul>
<li>Alex Best has an open textbook <em>Introducing Mathematical Biology</em>, and chapter 20 derives the <a href="https://sheffield.pressbooks.pub/introducingmathematicalbiology/chapter/a-two-compartment-bolus-model/">solution for the two-compartment bolus IV model</a>. It doesn’t go into quite as much detail as I do in this post (it spares the reader from the pain of matrix exponentials, for example) but I found it very helpful.</li>
<li>Jiří Lebl and Trefor Bazett have an open resouce <em>Introduction to Differential Equations</em> whose section on <a href="https://web.uvic.ca/~tbazett/diffyqs/sec_matexp.html">matrix exponentials</a> I found useful when trying to “refresh my memory” (i.e., learn something that I kind of ignored 30 years ago when it came up in my undergrad maths classes). Relatedly, the list of properties for matrix exponentials is mostly sourced from the wikipedia page on <a href="https://en.wikipedia.org/wiki/Matrix_exponential">matrix exponentials</a>.</li>
</ul>
<p>Other resources:</p>
<ul>
<li>It’s not open access, and it doesn’t dive into the derivations, but one of the books I’ve been reading at work is <a href="https://www.routledge.com/Pharmacokinetic-and-Pharmacodynamic-Data-Analysis-Concepts-and-Applications/Gabrielsson-Weiner/p/book/9789198299106">Pharmacokinetic and Pharmacodynamic Data Analysis (5th ed)</a> by Johan Gabrielsson and Daniel Weiner: chapter 2 presents the bi-exponential model using the “macro” parameters (<img src="https://latex.codecogs.com/png.latex?A">, <img src="https://latex.codecogs.com/png.latex?B">, <img src="https://latex.codecogs.com/png.latex?%5Calpha">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta">) and the formulas for converting to the “micro” parameters (the fractional rate constants <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">), along with the more general scientific considerations around the model.</li>
<li>The other book I’m reading at work is <a href="https://onlinelibrary.wiley.com/doi/book/10.1002/9781118784860">Introduction to Population Pharmacokinetic / Pharmacodynamic Analysis with Nonlinear Mixed Effects Models</a> by Joel S. Owen and Jill Fiedler-Kelly. It provides a good coverage of compartmental models in the context of the NONMEM software package, and is somewhat relevant insofar as the different parameterisations (i.e., TRANS subroutines<sup>17</sup>) for the ADVAN3 and ADVAN4 subroutines appear in this post (and make more sense to me now that I’ve derived the solutions).</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>If she were to only write posts when she thought someone cared or when it would somehow improve the state of world affairs, she’d never write anything at all. No, she writes blog posts for the same reason twinks make sex tapes in senate hearing rooms: for the pure and unsullied chaos of the thing itself.↩︎</p></li>
<li id="fn2"><p>This is of course not quite true: for simplicity I’m not considering <a href="https://en.wikipedia.org/wiki/Bioavailability">bioavailability</a> in this post, nor am I considering lag time. I’m certainly not considering transit compartments and the like. The focus of the post is about the ODE system used to model what happens to the drug once it arrives in systemic circulation.↩︎</p></li>
<li id="fn3"><p>By convention we also don’t count the “depot” compartment (usually the gut) as one of the compartments: although the state <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> is a vector of length 3, only two of the compartments (central and peripheral) are used to model the disposition (a term of art referring to both “distribution” and “elimination”) of the drug, so this is a two-compartment model.↩︎</p></li>
<li id="fn4"><p>Yes, I do realise that there are 4 rate constants and 5 physiological parameters. In the rate-constants version there would also be a fifth parameter: when fitting models we need a volumetric scaling parameter to convert between drug amount and drug concentration in the central compartment (where the concentration is typically measured), and as such we would include <img src="https://latex.codecogs.com/png.latex?V_c"> as a parameter in the rate-constant version too. I’ve omitted that in this post for the same reason I have ignored the bioavailability <img src="https://latex.codecogs.com/png.latex?F"> and the lag time to absorption: none of these parameters are super-relevant to solving the ODE. <img src="https://latex.codecogs.com/png.latex?V_c"> and <img src="https://latex.codecogs.com/png.latex?F"> are both scaling factors that multiply various terms by a constant factor, the lag-time is a shift parameter applied to <img src="https://latex.codecogs.com/png.latex?t">. None of them affect the general form of the solution, which is the thing I care about for the purposes of the post.↩︎</p></li>
<li id="fn5"><p>For example, to obtain the rate constants from the physiological parameters, we use <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D%20=%20Cl%20/%20V_c">, <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D%20=%20k_a">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D%20=%20Q/V_c">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D%20=%20Q/V_p">. It’s pretty similar going the other way.↩︎</p></li>
<li id="fn6"><p>In the Gabrielsson and Weiner textbook I’m reading at work, the parameterisation in terms of the fractional rate constants <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D"> and <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D"> is referred to as the “micro-” parameterisation, taking its name from the fact that the parameters describe the low-level operation of the ODE. This is in contrast to the “physiological” parameterisation in terms of <img src="https://latex.codecogs.com/png.latex?Cl">, <img src="https://latex.codecogs.com/png.latex?Q">, <img src="https://latex.codecogs.com/png.latex?V_c">, <img src="https://latex.codecogs.com/png.latex?V_p"> and <img src="https://latex.codecogs.com/png.latex?k_a"> that attempts to ascribe biological interpretation to the quantities. There is also a third “macro-” parameterisation in terms of <img src="https://latex.codecogs.com/png.latex?%5Calpha">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, <img src="https://latex.codecogs.com/png.latex?A">, and <img src="https://latex.codecogs.com/png.latex?B"> in which the parameters correspond to the coefficients of the concentration-time curve. As we’ll see later in the post, something like the “macro-” parameterisation you see in the textbooks emerges more or less naturally from the solution to the ODE system. The version that shows up in this post isn’t 100% identical to the version in the textbook (it’s off by a scaling factor because I don’t bother to account for <img src="https://latex.codecogs.com/png.latex?V_c"> or to fold the dose into the coefficients <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">) but honestly nobody should care about this because the macro-scale parameterisation doesn’t have any scientific meaning. It’s just a convenient description of a biexponential curve that makes you sound fancy at very boring parties when you tell people that the exponents are eigenvalues of the ODE state transition matrix.↩︎</p></li>
<li id="fn7"><p>Yes, I know. If I were being rigorous here I’d be precise about how I ended up with this as the exact expression, but I am tired and this is neither a journal article nor a textbook.↩︎</p></li>
<li id="fn8"><p>As has been so often noted in the BSG fandom, the Cylons quite clearly did not have a Plan. The writers did not ever think of a coherent Plan, and badly tried to retcon a Plan onto the plot in the TV movie by the same name. As <a href="https://www.latimes.com/entertainment/tv/la-et-hc-battlestar-galactica-reunion-atx-fest-20170611-story.html">Mike Moore</a> later explained, it was just something that looked cool in the opening credits. Much the same could be said for me pretending I ever have a plan when trying to derive something: the Plan is the thing you make up after the fact after you accidentally end up with the answer.↩︎</p></li>
<li id="fn9"><p>Formally speaking, I suppose I ought to be using subscripts to distinguish the 3x3 oral-dosing matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D_%7Bo%7D"> from the 2x2 bolus IV dosing matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D_%7Biv%7D">, but I’ll refrain from doing so in this post because it’s always clear from context which one I’m referring to.↩︎</p></li>
<li id="fn10"><p>For extremely specific values of “awesome”.↩︎</p></li>
<li id="fn11"><p>No I do not know why those stray <code>$$</code> fences are showing up in the rendered document. The equations are as-intended, but those should not be included in the output. I kinda think I might have broken the parser with my extremely ugly latex, which is normally a thing I only expect to get told at kink parties↩︎</p></li>
<li id="fn12"><p>Where of course a biexponential is a model that is sexually attracted to two exponents.↩︎</p></li>
<li id="fn13"><p>Technically – <em>per</em>. <em>my</em>. <em>earlier</em>. <em>footnote</em> – the one in the book differed from this one by a multiplicative scale factor since it was expressed in terms of concentrations, but whatever. That’s not germane to the post.↩︎</p></li>
<li id="fn14"><p>I mean, multiplying everything by <img src="https://latex.codecogs.com/png.latex?F"> is not exactly difficult right? If you can follow the rest of this solution you absolutely know how to generalise it to other values of <img src="https://latex.codecogs.com/png.latex?F">. But okay, if you care deeply about the niceties I will be like Bart and <a href="https://knowyourmeme.com/memes/say-the-line-bart">say the line</a>: without loss of generality, I set <img src="https://latex.codecogs.com/png.latex?F=1"> in this post. I’m sure that makes everyone happier.↩︎</p></li>
<li id="fn15"><p>Yes those variable names were deliberate. Of <em>course</em> those variable names were deliberate, whose blog do you think you are reading girl? Now, let’s review our safety tips for numbing lubric…↩︎</p></li>
<li id="fn16"><p>She pauses, wondering if this is the right moment to link to her favourite Lily Allen song? <a href="https://www.youtube.com/watch?v=fUYaosyR4bE">Yes, it is</a>.↩︎</p></li>
<li id="fn17"><p>Technically speaking they only count as trans subroutines in the UK legal system if they have a fortran recognition certificate and a permission slip from a doctor that despises them.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Closed Form Solutions for a Two-Compartment Pharmacokinetic
    Model},
  date = {2023-12-19},
  url = {https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Closed Form Solutions for a
Two-Compartment Pharmacokinetic Model.”</span> December 19, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models">https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models</a>.
</div></div></section></div> ]]></description>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/</guid>
  <pubDate>Mon, 18 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/gayatri-malhotra-4wF66_KWJxA-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Another year ends</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Content note: This post refers briefly to sexual assault</p>
</div>
</div>
<p>At the end of last year I wrote a wrap-up post listing the things I’d done during 2022, (<a href="../../posts/2022-12-26_strange-year/">A Very Strange Year</a>), and perhaps I’ll do another one for 2023. Much like last time, I’ll break with my usual policy on this blog and be a little more open about my personal life. If you read last year’s post, you’d know that 2022 was a grim year for me. Among other things I got raped,<sup>1</sup> and – in the world’s least-surprising plot twist – that messed me up rather badly. Losing my job at the end of 2022 didn’t help matters either.</p>
<p>What I didn’t anticipate when I wrote that post is that I was going to be unemployed for the majority of 2023. That was unpleasant. What I also didn’t see coming, is that rape trauma and unemployment interact with each other rather badly. On the one hand you start to feel worthless to society because you can’t find work, and on the other hand you also feel worthless as a human being because that’s what sexual assault does to you. So then you find yourself losing motivation to be upbeat and outgoing in the job search (and the job search gets worse), and you spend days on end lying in bed trying to believe you’re not a worthless person (and the trauma gets worse). Not exactly a deep insight, I’ll confess. Nevertheless, despite the triteness of the observation, the consequences are still real. Before the unemployment started to cut deep, I’d been making genuine progress in recovery from the sexual assault stuff, but after being out of work for a few months I went backwards.</p>
<p>Coming back from all that has been rough, and trying to work on recovery has been the dominant feature of 2023. I found work in the middle of the year, and am enjoying my new role. It’s nice to feel useful again. I’ve been doing better with the sexual assault fallout over the last few months too. I rarely get flashbacks these days, and I don’t fall to pieces (not often, anyway) whenever there’s another sexual assault story in the news. That’s real progress, and I’m proud of myself for that. But it’s still hard, and my self-confidence is in tatters. I’m working at it, but I suspect it will be a long and slow journey.</p>
<p>Anyway. Enough of that. Life is hard sometimes, and there’s not much to do except acknowledge from time to time that, yes, bad things happen. Let’s move on to other topics, shall we?</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/pastiche.png" class="img-fluid" alt="Abstract geometric patterns in red and orange"></p>
<section id="data-science-tech-and-statistics" class="level2">
<h2 class="anchored" data-anchor-id="data-science-tech-and-statistics">Data science, tech, and statistics</h2>
<p>Not surprisingly given the focus on data science on this blog, I wrote a number posts about R packages and related topics in tech during 2023. Several of them were posts where I chose an R package that I wanted to play around with and wrote about it:</p>
<ul>
<li><a href="../../posts/2023-05-22_santoku/">The santoku package</a></li>
<li><a href="../../posts/2023-06-12_pins-and-needles/">The pins package</a></li>
<li><a href="../../posts/2023-06-14_ansi-tricks/">The asciicast package</a></li>
<li><a href="../../posts/2023-06-16_tabulizer/">The tabulizer package</a></li>
</ul>
<p>Others were built around a specific topic, though still very heavily focused on workflows in R:</p>
<ul>
<li><a href="../../posts/2023-04-09_webr/">Running R on the web with webR</a></li>
<li><a href="../../posts/2023-08-08_being-assertive/">Assertion checking in R</a></li>
</ul>
<p>Not all of my tech posts were about R though. Some are general purpose posts in which I taught myself new tools: learning about Docker and Kubernetes was fun, though in truth I’ve not had much opportunity to use either of these skills.<sup>2</sup> On the other hand, learning about Makefiles was super useful and I’ve found myself using them a lot.<sup>3</sup></p>
<ul>
<li><a href="../../posts/2023-01-01_playing-with-docker/">Playing with docker and the github container registry</a></li>
<li><a href="../../posts/2023-01-10_kubernetes/">Deploying R with kubernetes</a></li>
<li><a href="../../posts/2023-06-30_makefiles/">Makefiles. Or, the balrog and the submersible</a></li>
</ul>
<p>In a refreshing change for this blog – which has historically focused on code – I started writing a little more about statistical inference this year. Not as much as I’d have liked, and not as in-depth as I’d have liked either, but perhaps it will be the beginning of a trend for me. Two old statistics posts returned from the dead in 2023, both relics from my former life as an academic,<sup>4</sup> and a third post estimating the number of internally displaced trans people within the United States:</p>
<ul>
<li><a href="../../posts/2023-04-12_metropolis-hastings/">A gentle introduction to the Metropolis-Hastings algorithm</a></li>
<li><a href="../../posts/2023-04-12_bayes-factors/">A personal essay on Bayes factors</a></li>
<li><a href="../../posts/2023-06-15_dark-times/">On living in dark times</a></li>
</ul>
<p>Finally, I wrote a couple of other posts on other topics broadly related to data science and software. My new personal machine is (for reasons!) using Windows as the primary OS, with an Ubuntu installation (<a href="../../posts/2022-12-31_btw-i-use-arch/">no, not Arch</a>) running concurrently thanks to Windows Subsystem for Linux. I wrote about some of the practicalities of using a setup like this, and specifically about how to use the RStudio IDE and VS Code effectively if you’re using linux for your data science work but you want your IDE to run smoothly as a windows application:</p>
<ul>
<li><a href="../../posts/2023-07-02_the-ides-of-wsl/">RStudio and VS Code in WSL</a></li>
</ul>
<p>Oh, and I wrote a book review of Greg Wilson’s “Software design by example” in which I followed his guidance and wrote a regular expression tokeniser:</p>
<ul>
<li><a href="../../posts/2023-05-31_software-design-by-example/">Software design by example</a></li>
</ul>
<p>That one was fun, and I learned a lot.</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/shattered.png" class="img-fluid" alt="A shattered landscape in a palette of grey and brown against an orange background"></p>
</section>
<section id="pharmacometrics" class="level2">
<h2 class="anchored" data-anchor-id="pharmacometrics">Pharmacometrics</h2>
<p>Around the middle of the year I managed to find work, which came as something of a relief. My new role is in <a href="https://en.wikipedia.org/wiki/Pharmacometrics">pharmacometrics</a>, and while the job is pretty intense – honestly, I’m working longer hours now than I did even as an academic – it’s been rewarding. There’s a lot of new and fascinating things to learn, and I do love being able to learn new things. That’s shown up in this blog quite a bit this year, with several posts discussing pharmacokinetic (PK) models generally and population-pharmacokinetic (pop-PK) models specifically:</p>
<ul>
<li><a href="../../posts/2023-04-26_non-compartmental-analysis/">Non-compartmental analysis</a></li>
<li><a href="../../posts/2023-05-16_stan-ode/">Simple PK models in Stan</a></li>
<li><a href="../../posts/2023-06-10_pop-pk-models/">Minimal pop-PK models in Stan</a></li>
<li><a href="../../posts/2023-07-15_torsten/">Getting started with pop-PK in Torsten</a></li>
<li><a href="../../posts/2023-08-14_mrgsolve/">Simulating from PK models with mrgsolve</a></li>
<li><a href="../../posts/2023-08-28_rxode2/">Simulating from PK models with rxode2</a></li>
</ul>
<p>There’s several other topics in this area I want to write, especially now that my knowledge of the field is considerably stronger than it was when I wrote these pieces.<sup>5</sup> It’s likely I’ll write more posts about pharmacometrics in 2024, but probably at a slower rate. That’s mostly because the nature of my employment is different these days: all my previous jobs before this one were in some sense public-facing roles, and writing blog posts about the substantive topic were part and parcel of the job itself. That’s not the case in my current role, so any writing I do is “off the books” so to speak, and only happens when I have spare time. Which is entirely okay, of course, but it’s hardly a surprise that it’s easier to find time to do a thing when it is central to your job than it is to do the same thing when it’s not actually part of the role!<sup>6</sup></p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/curled.png" class="img-fluid" alt="Swirling patterns in orange, purple and blue"></p>
</section>
<section id="art" class="level2">
<h2 class="anchored" data-anchor-id="art">Art</h2>
<p>On the art front, I changed course a bit in 2023. Early in the year I reluctantly concluded that there isn’t any point in trying to generate income from my art. I haven’t been taking commissions, I turned down a few opportunities to write books on generative art, and I haven’t been doing workshops the way I used to. There are a couple of reasons for that, but mostly they boil down to “return on investment”. It takes a lot of time, energy, and <em>work</em> to do the things that allow you to make money from art, and the bitter truth to it is that unless you’re one of the lucky few who “makes it big”, you really don’t make enough money from the art to justify the effort.<sup>7</sup> People love art. They don’t love paying for it. Nowadays I don’t even bother to try: I make art when I feel like making art, I write about art when I feel like writing about art, and that’s it.</p>
<p>That doesn’t mean I abandoned making art of course, or even writing about it. I wrote three blog posts on generative art this year, for example:</p>
<ul>
<li><a href="../../posts/2023-01-14_p5js/">Generative art with p5.js</a></li>
<li><a href="../../posts/2023-03-13_shattered-landscapes/">Making shattered landscapes in R</a></li>
<li><a href="../../posts/2023-03-31_generative-art-with-grid/">Generative art with grid</a></li>
</ul>
<p>I published seven art series on my art website, mostly created with R but also with javascript in some cases:</p>
<ul>
<li><a href="https://art.djnavarro.net/gallery/subdivision/">Subdivision</a></li>
<li><a href="https://art.djnavarro.net/gallery/broken-lands/">Broken lands</a></li>
<li><a href="https://art.djnavarro.net/gallery/bound/">Bound</a></li>
<li><a href="https://art.djnavarro.net/gallery/curled/">Curled</a></li>
<li><a href="https://art.djnavarro.net/gallery/splotches/">Splotches</a></li>
<li><a href="https://art.djnavarro.net/gallery/pastiche/">Pastiche</a></li>
<li><a href="https://art.djnavarro.net/gallery/advent/">Advent</a></li>
</ul>
<p>I even wrote a custom <a href="https://arttools.djnavarro.net/">arttools</a> R package that I use to help me manage my art workflows,<sup>8</sup> and gave an invited talk at the University of Auckland on generative art (<a href="https://djnavarro.net/slides-auckland-2023/">unpredictable paintings</a>). I’m grateful to the lovely folks at Auckland for the invitation, and it was really wonderful to give the talk to such a kind audience.</p>
<p>So yeah. I’m still making art and sharing it on mastodon, but mostly as a hobbyist these days. I’ve lost any real desire to be a professional artist, and that’s okay. Sometimes a hobby can be just a hobby. Not everything in life needs to be a side hustle.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I honestly don’t like talking about any of this, but I also don’t want to hide the fact that it happened, so I’m not going to shy away from it. But also please don’t be like the stranger who messaged me after my 2022 post to tell me I should carry a gun. That’s not a helpful thing for anyone to tell a rape survivor, and it’s an <em>especially</em> terrible thing to say to her when you’re a man she doesn’t know.↩︎</p></li>
<li id="fn2"><p>I mean, let’s face it: while there’s a strong case to be made that Docker is an important tool for a lot of scientists, Kubernetes is … not. I learned it because it’s occasionally relevant for deploying applications at scale, but that’s not at all relevant in my current role.↩︎</p></li>
<li id="fn3"><p>Yes yes, I know, there are many alternatives, and if I’m an R person I should probably get off my lazy arse and learn <a href="https://books.ropensci.org/targets/">targets</a> but life is short and I am tired okay?↩︎</p></li>
<li id="fn4"><p>Strangely, despite being out of academia for over two years now, <a href="https://papers.djnavarro.net">papers</a> from that life still continue to trickle out, and another six journal articles emerged in 2023 that have my name on them. Academia really makes it hard for you to draw a line in the sand, which… actually is not great when the reason you left is not a pleasant one. Sigh.↩︎</p></li>
<li id="fn5"><p>Gonna be honest: I now look at most of these pieces and smile. They’re good posts, really, but I can now spot a <em>lot</em> of things in each of them that reveal that the author didn’t have a lot of practical experience with PK modelling at the time. But that’s good – that’s what happens when you learn things!↩︎</p></li>
<li id="fn6"><p>This lack of time, incidentally, is also the reason why (despite Hadley’s very kind support and encouragement) I haven’t made much progress on the project to work on the 3rd edition of the ggplot2 book, and haven’t done much of the work on updating my “learning statistics with R” book this year either. I’m sad about both of those things, and hoping that somehow I’ll be able to find some time in the future.↩︎</p></li>
<li id="fn7"><p>And, yes, with the rise of tools like DALL-E and midjourney, the situation has gotten worse over the past year.↩︎</p></li>
<li id="fn8"><p>Note that it’s not a tool for making generative art, it’s a tool for managing art repos and organising output in a format that makes it easy for me to publish art to my website. It’s also not intended for general use. I wrote the package for myself. For anyone else it’s a “use at your own risk” kind of deal. You can use it if it’s useful for you, but I have no intention whatsoever of maintaining it for any purpose except my own use.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Another Year Ends},
  date = {2023-12-16},
  url = {https://blog.djnavarro.net/posts/2023-12-16_another-year-ends},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Another Year Ends.”</span> December 16,
2023. <a href="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends">https://blog.djnavarro.net/posts/2023-12-16_another-year-ends</a>.
</div></div></section></div> ]]></description>
  <category>End of Year</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/</guid>
  <pubDate>Fri, 15 Dec 2023 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Pharmacometric simulation with rxode2</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-28_rxode2/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Hello, yes, this is another <a href="../../category/pharmacometrics">pharmacometrics</a> post. There have been quite a few of these lately as I try to bring myself up to speed on a new discipline. This one is about the <a href="https://nlmixr2.github.io/rxode2/">rxode2</a> package, a pharmacometric simulation tool and the successor to the widely-used <a href="https://nlmixrdevelopment.github.io/RxODE/">RxODE</a> package.<sup>1</sup> Although the original RxODE package is now archived on CRAN, the syntax for rxode2 is very similar, and as far as I can tell it’s fairly (fully?) backward-compatible with the older package.</p>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>As with other packages for pharmacometric simulation such as <a href="https://mrgsolve.org/">mrgsolve</a>, models defined with rxode2 need to be compiled before they are run, and so when you install the package you need the appropriate build tools. There are some implications to this. The package is on CRAN, so you can install it with:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rxode2"</span>)</span></code></pre></div>
<p>However, like most R packages that allow you to compile C/C++/Fortran/Rust/Your-Favourite-Language-Here code, it relies heavily on system dependencies that you may or may not have, and managing the build tools is an OS-specific thing. I’m running Ubuntu 22.04, and (for reasons that don’t bear mentioning) I recently did a “factory reset”<sup>2</sup> and did a fresh install of Ubuntu. So, yeah, I didn’t have everything I needed. Yes, I did have the <code>gcc</code> compiler installed, but that’s not the only system dependency you have to care about. In my case, I was missing <code>gfortran</code>, <code>libblas</code>, and <code>liblapack</code>. As a consequence, when I tried to run the example code on the package website, all I got was a long stream of error messages. In order to get started, I had to do this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install gfortran libblas-dev liblapack-dev liblapack-doc</span></code></pre></div>
<p>That worked for me, but I make no promises that it will work for you. Caveat emptor and all that.<sup>3</sup> But let’s not stand on installation formalities when there are simulations to run. It is time to load some packages and dive once more into the abyss…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rxode2)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(microbenchmark)</span></code></pre></div>
</div>
</section>
<section id="the-rxode2-mini-language" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-rxode2-mini-language">The rxode2 mini-language</h2>
<blockquote class="blockquote">
<p>I don’t understand <br> You claiming I’m a handful when you show up all empty-handed <br> The way you say you love me like you’ve just been reprimanded <br> ’Cause I know you like mind games <br> &nbsp; &nbsp; – <a href="https://www.youtube.com/watch?v=ZyKu6noOxR8">BANKS</a></p>
</blockquote>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/mind-games.jpg" class="img-fluid"></p>
</div></div><p>The story begins with a little commentary on the slippery nature of R as a programming language. It’s not exactly news to many people at this point, but R is famous<sup>4</sup> for the extremely widespread use of <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a> as a tool for implementing domain-specific languages within R itself.<sup>5</sup> As a consequence of this, the same code can have different meaning when called in different contexts. It’s both a curse and a blessing: one the one hand it makes R very flexible in a way that is convenient for analysts, but on the other hand it can be a bit confusing to people from a more conventional programming background who don’t expect R to work this way.</p>
<p>The use of domain-specific languages in pharmacometric modelling is not uncommon: for instance, in my previous <a href="../../posts/2023-08-14_mrgsolve/">post about mrgsolve</a>, I talked about the mini-language used to specify models in that package. Not surprisingly, rxode2 has its own mini-language with it’s own <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html">custom syntax</a>. In mrgsolve, you can specify a model by writing the code for it in a separate file, or passing it as a string within R. You can do that with rxode2 too, but rxode2 also allows you to pass the model specification as a code block: a collection of statements enclosed in curly braces and treated as a single expression. Here’s an example of how that works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxode2</span>({</span>
<span id="cb4-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial values for all four "compartments"</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">central</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">peripheral</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-7">  </span>
<span id="cb4-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drug concentrations</span></span>
<span id="cb4-9">  CP <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> central <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> VC;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># central compartment concentration</span></span>
<span id="cb4-10">  PP <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> peripheral <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> VP; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># peripheral compartment concentration</span></span>
<span id="cb4-11">  </span>
<span id="cb4-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># differential equations</span></span>
<span id="cb4-13">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(depot)       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(KA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> depot);</span>
<span id="cb4-14">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(central)     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  (KA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> depot) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (CL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP);</span>
<span id="cb4-15">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(peripheral)  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PP);</span>
<span id="cb4-16">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(auc)         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  CP;</span>
<span id="cb4-17">})</span></code></pre></div>
</div>
<p>If you don’t look at it too closely you might think this is regular R code, but… it isn’t. The code contained within the braces is captured by the <code>rxode2()</code> function, and then interpreted according to the rules of the mini-language. We’ll need to take a moment to unpack the mini-language itself, but that can wait.</p>
<p>Let’s start by looking at this as a pharmacometrician might. Notice that although this is a two-compartment model in pharmacometric terms, from the perspective of rxode2 there are four “compartments” that define the state of the system. In addition to the usual two compartments (<code>central</code> and <code>peripheral</code>), there is an extravascular <code>depot</code> compartment used to model drug intake. For instance, for an orally-administered drug the <code>depot</code> compartment would be the gut.<sup>6</sup> The <code>depot</code> compartment is “real” in the sense that it is loosely intended to correspond to something in the physical system that we’re modelling. By convention we don’t consider it to be one of the pharmacokinetic compartments, but it’s still a real thing. In contrast, the <code>auc</code> “compartment” has no physical analog at all. It’s included so that the model keeps track of the accumulated drug exposure.<sup>7</sup> As I’m quickly coming to learn, this is a very handy trick when running pharmacometric simulations.</p>
<p>Now that we’ve looked at it as an analyst, let’s look at it as a programmer. The syntax within the rxode2 model specification is not “real” R code. The statements enclosed within the curly braces look vaguely R-like, but if you tried to evaluate these expressions outside the context of the <code>rxode2()</code> function, you’d get errors. Thanks to the magic of non-standard evaluation in R, the <code>rxode2()</code> function is able capture the code before it is evaluated, and prevents R from evaluating it the way it normally would. Instead of following the regular rules of R, it follows the syntax provided by the rxode2 mini-language. This mini-language is similar to R in some ways:</p>
<ul>
<li>Assignment statements can use <code>=</code> or <code>&lt;-</code> as the assignment operator.<sup>8</sup></li>
<li>Comments are specified using the hash (<code>#</code>) character</li>
<li>Semi-colon characters (<code>;</code>) are optional, and specify the end of a line</li>
</ul>
<p>However, there are specialised statements used in the mini-language that don’t exist in regular R code. For example, there are two kinds of special statements I’ve used in this code:</p>
<ul>
<li>Time-derivative statements (i.e., the ones that have something like <code>d/dt(central)</code> on the left hand side) are used to specify the differential equations in the ODE system.</li>
<li>Initial-condition statements (i.e., the ones where I set something like <code>central(0)</code> on the left hand side) are used to specify the initial state of the ODE system.</li>
</ul>
<p>You can check the <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html">rxode2 syntax</a> page for more information about the mini-language and what other kinds of special statements exist.</p>
</section>
<section id="the-rxode2-model-object" class="level2">
<h2 class="anchored" data-anchor-id="the-rxode2-model-object">The rxode2 model object</h2>
<p>In the previous section I used the <code>rxode2()</code> function to specify a pretty standard two-compartment pharmacokinetic model, and assigned the resulting model object to a boringly-named variable called <code>mod</code>.<sup>9</sup> The model object is the primary vehicle for interfacing with the compiled code from R, so it’s helpful to take a look at it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mod</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">rxode2 </span>2.0.13 model named <span style="color: #BBBB00; font-weight: bold;">rx_7b738a16dd646d432336a380787bd163</span> model (<span style="color: #00BB00;">✔</span> <span style="color: #00BB00; font-weight: bold;">ready</span>). 
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$state</span>: depot, central, peripheral, auc
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span>: VC, VP, KA, Q, CL
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$lhs</span>: CP, PP
</code></pre>
</div>
<p>Again, there are a few things to unpack in this output:</p>
<ul>
<li>The first line of the output has some technical information about the model. It tells us what version of rxode2 was used to build the model, gives us the name of the built model (see below), and tells us that it’s ready to use.<sup>10</sup></li>
<li>The second line tells us about <code>mod$state</code>, which in this case are the four “compartment” variables that comprise the state vector for the underlying ODE system.</li>
<li>The third line tells us about <code>mod$params</code>, the list of parameters that need to be passed to the model as input to the simulation</li>
<li>The fourth line tells us about <code>mod$lhs</code>, the list of additional defined variables that are created by the model and whose value will be recorded in the output.</li>
</ul>
<p>Like many R packages that generate compiled code, rxode2 manages the compiled object for you. The long unintelligible “name” assigned to our model gives us the hint we need to find the compiled objects. Within the R session temp directory, the rxode2 package has created an “rxode2” subfolder.<sup>11</sup> And indeed, if I take a peek at the contents of this folder, I find something with an identical name:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempdir</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rxode2"</span>))</span></code></pre></div>
<pre class="fansi fansi-output"><code>/tmp/RtmpC0i8oK/rxode2/018374b1ca9115fbc3be9f765f32e47f.md5
<span style="color: #0000BB; font-weight: bold;">/tmp/RtmpC0i8oK/rxode2/rx_7b738a16dd646d432336a380787bd163__.rxd</span>
</code></pre>
</div>
<p>Okay, makes sense.</p>
</section>
<section id="event-tables" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="event-tables">Event tables</h2>
<p>Event tables (also called event schedules) are the primary way the user specifies things that happen in the simulation. These mostly consist of two kinds of event: dosing events, where the drug is administered, and observation events, where the state of the system is measured. In the rxode2 package these are specified with the <code>et()</code> function, and you can use the pipe operator to build up complex event schedules. I’ll take my example from the rxode2 documentation, and walk through it slowly. One nice thing about the event schedules in rxode2 is that you can specify units, so we’ll start with an event table that doesn’t contain any actual <em>events</em>, but specifies the units in which those events will be expressed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amountUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours"</span>)</span>
<span id="cb7-2">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 0 records ──</span>
0 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
</code></pre>
</div>
<p>The output here isn’t super exciting, since there are no actual events encoded here. But it does let me mention one nice little feature of rxode2: the print methods are generally quite informative, and have nice little “nudges” like the ones you can see above that can help new (or even experienced) users work out what they might need to do next.</p>
<p>Anyway, let’s add some dosing events, shall we? Let’s assume an initial dose of <code>amt = 10000</code> (in milligrams) is administered at <code>time = 0</code>, and repeated for an additional 9 times at 12 hour intervals (i.e., <code>addl = 9</code>, <code>ii = 12</code>). In the interests of being explicit, I’ll set <code>cmt = "depot"</code> to be clear about which compartment the dose is administered to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 1 records ──</span>
1 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 1 × 6</span>
   time cmt     amt    ii  addl evid        
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>      
<span style="color: #555555;">1</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
</code></pre>
</div>
<p>This format for an event table – where <code>time</code>, <code>amt</code>, <code>addl</code>, and <code>ii</code> are used to specify a sequence of regularly spaced dosing events in a single row – will seem quite familiar to anyone in the field, and since I’ve talked about this notation in previous posts, I’ll not bore people by explaining it yet again.</p>
<p>Moving along, let’s also assume that after 120 hours has passed (<code>time = 120</code>) the dosing schedule changes: the dose drops to <code>amt = 2000</code> milligrams, the interdose interval is increased slightly to <code>ii = 14</code> hours, and this dosing regime is maintained for <code>addl = 4</code> additional doses (i.e., 5 in total). So now we have this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 2 records ──</span>
2 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 2 × 6</span>
   time cmt     amt    ii  addl evid        
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>      
<span style="color: #555555;">1</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
<span style="color: #555555;">2</span>   120 depot  <span style="text-decoration: underline;">2</span>000    14     4 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
</code></pre>
</div>
<p>Now that we have specified all the dosing events, we need to add the “observation” events. In a real study, observation times would be the times at which we take a real-world measurement of some kind, but in the context of the simulation it’s just a set of times at which the state of the system is computed. Let’s compute the state of the system for the first 300 hours:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb10-2">events </span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 303 records ──</span>
2 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
301 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 303 × 6</span>
    time cmt     amt    ii  addl evid         
   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>       
<span style="color: #555555;"> 1</span>     0 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 2</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span> 
<span style="color: #555555;"> 3</span>     1 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 4</span>     2 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 5</span>     3 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 6</span>     4 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 7</span>     5 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 8</span>     6 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 9</span>     7 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;">10</span>     8 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"># ℹ 293 more rows</span>
</code></pre>
</div>
<p>And now we’re done. We have a complete events table that can be used in our simulation. Admittedly, I went through that awfully slowly. The whole thing could have been bundled into a single pipeline like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amountUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span></code></pre></div>
</div>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/meds.png" class="img-fluid"></p>
</div>
</section>
<section id="simulating-one-subject" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="simulating-one-subject">Simulating one subject</h2>
<blockquote class="blockquote">
<p>I was alone, falling free<br>
Trying my best not to forget<br>
What happened to us<br>
What happened to me<br>
&nbsp;&nbsp; – <a href="https://www.youtube.com/watch?v=WO9ewCO7TYI">Placebo</a><sup>12</sup></p>
</blockquote>
<p>We’re now almost at a point where we can run a simple simulation using the model specified via the <code>mod</code> object, and the events table in <code>events</code>. The only thing we haven’t done yet is specify pharmacokinetic parameters that need to be passed to the model as input. To keep things simple, I’ll simulate only a single subject, and so the input parameters will be passed as a table with one row corresponding to our lone subject, and one column per parameter that needs to be specified. If we look at the model spec we can see that requires all of the following to be given:</p>
<ul>
<li>elimination clearance (<code>CL</code>)</li>
<li>absorption rate constant (<code>KA</code>)</li>
<li>intercompartmental clearance (<code>Q</code>)</li>
<li>volume of distribution for the central compartment (<code>VC</code>)</li>
<li>volume of distribution for the peripheral compartment (<code>VP</code>)</li>
</ul>
<p>Indeed, if we take a look at <code>mod$params</code> we see the same listing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>params</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "VC" "VP" "KA" "Q"  "CL"</code></pre>
</div>
</div>
<p>Okay, so let’s put together a one-row data frame <code>params</code> containing all these parameters for a single simulated subject:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">KA =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.294</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CL =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.6</span>,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VC =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.2</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VP =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">297</span>,</span>
<span id="cb14-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span></span>
<span id="cb14-7">)</span>
<span id="cb14-8">params</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="color: #555555;"># A tibble: 1 × 5</span>
     KA    CL    VC    VP     Q
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span> 0.294  18.6  40.2   297  10.5
</code></pre>
</div>
<p>Now that we have our parameters, we’re ready to go. There are several ways you can call the solver and run the simulation (<a href="https://nlmixr2.github.io/rxode2/reference/rxSolve.html">documentation here</a>), but I’m currently quite partial to calling <code>solve()</code>,<sup>13</sup> like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events)</span></code></pre></div>
</div>
<p>When we print <code>out</code>, we get a fairly detailed description of the simulation that includes information about the parameters and the initial state:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">out</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── Solved rxode2 object ──</span>
<span style="font-weight: bold;">── Parameters (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span><span style="font-weight: bold;">): ──</span>
     VC      VP      KA       Q      CL 
 40.200 297.000   0.294  10.500  18.600 
<span style="font-weight: bold;">── Initial Conditions (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$inits</span><span style="font-weight: bold;">): ──</span>
     depot    central peripheral        auc 
         0          0          0          0 
<span style="font-weight: bold;">── First part of data (object): ──</span>
<span style="color: #555555;"># A tibble: 301 × 7</span>
   time    CP    PP  depot central peripheral   auc
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span>     0   0   0     <span style="text-decoration: underline;">10</span>000       0          0    0  
<span style="color: #555555;">2</span>     1  44.4 0.920  <span style="text-decoration: underline;">7</span>453.   <span style="text-decoration: underline;">1</span>784.       273.  26.4
<span style="color: #555555;">3</span>     2  54.9 2.67   <span style="text-decoration: underline;">5</span>554.   <span style="text-decoration: underline;">2</span>206.       794.  77.7
<span style="color: #555555;">4</span>     3  51.9 4.46   <span style="text-decoration: underline;">4</span>140.   <span style="text-decoration: underline;">2</span>087.      <span style="text-decoration: underline;">1</span>324. 132. 
<span style="color: #555555;">5</span>     4  44.5 5.98   <span style="text-decoration: underline;">3</span>085.   <span style="text-decoration: underline;">1</span>789.      <span style="text-decoration: underline;">1</span>776. 180. 
<span style="color: #555555;">6</span>     5  36.5 7.18   <span style="text-decoration: underline;">2</span>299.   <span style="text-decoration: underline;">1</span>467.      <span style="text-decoration: underline;">2</span>132. 221. 
<span style="color: #555555;"># ℹ 295 more rows</span>
</code></pre>
</div>
<p>Extremely pretty print method notwithstanding, under the hood it’s nothing fancy. It’s a regular data frame with a few extra classes and some metadata, which means we can pass it straight to ggplot without any coercion, and draw a pretty picture:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(out, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, CP)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Yep, that looks about right.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/boys.png" class="img-fluid"></p>
</div>
</section>
<section id="simulating-multiple-subjects" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="simulating-multiple-subjects">Simulating multiple subjects</h2>
<blockquote class="blockquote">
<p>I like big boys, itty bitty boys<br>
Mississippi boys, inner city boys<br>
I like the pretty boys with the bow tie<br>
Get your nails did, let it blow dry<br>
I like a big beard, I like a clean face<br>
I don’t discriminate, come and get a taste<br>
From the playboys to the gay boys<br>
Go and slay, boys, you my fave boys<br>
&nbsp; &nbsp; –<a href="https://www.youtube.com/watch?v=HQliEKPg1Qk">Lizzo</a></p>
</blockquote>
<p>The previous example shows how to simulate a single subject. However, the world is full of lots of different people with different characteristics, so in a more realistic simulation scenario we would want to simulate many people with different parameter values. In order to accommodate this, the parameter table now has multiple rows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">KA =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.294</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>),</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VC =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VP =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">297</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb18-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-7">)</span>
<span id="cb18-8">params</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="color: #555555;"># A tibble: 20 × 5</span>
      KA    CL    VC    VP     Q
   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;"> 1</span> 0.275  20.4  39.9  321.  9.93
<span style="color: #555555;"> 2</span> 0.300  20.2  39.7  297. 10.4 
<span style="color: #555555;"> 3</span> 0.269  18.7  41.6  304. 11.7 
<span style="color: #555555;"> 4</span> 0.342  14.6  41.3  297.  8.98
<span style="color: #555555;"> 5</span> 0.304  19.8  38.8  290. 11.1 
<span style="color: #555555;"> 6</span> 0.269  18.5  38.8  299. 10.8 
<span style="color: #555555;"> 7</span> 0.309  18.3  40.9  279. 11.6 
<span style="color: #555555;"> 8</span> 0.316  15.7  41.7  312. 10.2 
<span style="color: #555555;"> 9</span> 0.311  17.6  40.0  299. 10.9 
<span style="color: #555555;">10</span> 0.285  19.4  42.0  319. 10.8 
<span style="color: #555555;">11</span> 0.339  21.3  41.0  302.  9.96
<span style="color: #555555;">12</span> 0.306  18.4  39.0  290. 11.7 
<span style="color: #555555;">13</span> 0.275  19.4  40.9  303. 11.7 
<span style="color: #555555;">14</span> 0.228  18.5  37.9  288. 11.2 
<span style="color: #555555;">15</span> 0.328  15.8  43.1  284. 12.1 
<span style="color: #555555;">16</span> 0.293  17.8  44.2  300. 11.1 
<span style="color: #555555;">17</span> 0.294  17.8  39.5  293.  9.22
<span style="color: #555555;">18</span> 0.322  18.5  38.1  297.  9.93
<span style="color: #555555;">19</span> 0.319  20.8  41.3  298.  9.28
<span style="color: #555555;">20</span> 0.312  20.1  39.9  291. 10.0 
</code></pre>
</div>
<p>The command to run the simulation remains unchanged:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events)</span></code></pre></div>
</div>
<p>I’ll show you the <code>out</code> object in a moment, but it’s probably easier to understand it if we start with a plot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">out <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sim.id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject"</span>, sim.id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, CP, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> sim.id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sim.id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As you can see, all 20 subjects have qualitatively similar profiles, but there are noticeable differences in the details. Not surprisingly really. I didn’t build in very much variability into the simulation, and I didn’t even <em>try</em> to incorporate an appropriate covariance structure among the parameters (that’s a topic for another post).<sup>14</sup> The main thing that matters here is that we can see that the variation <em>exists</em>.</p>
<p>Anyway, let’s have a look at the table of results <code>out</code> produced by our simulation. As you probably guessed from the ggplot2 code, there’s a column called <code>sim.id</code> that stores the subject identifier, and there are 20 times as many rows as last time, but it’s essentially the same:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">out</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── Solved rxode2 object ──</span>
<span style="font-weight: bold;">── Parameters (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span><span style="font-weight: bold;">): ──</span>
<span style="color: #555555;"># A tibble: 20 × 6</span>
   sim.id    VC    VP    KA     Q    CL
    <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;"> 1</span>      1  39.9  321. 0.275  9.93  20.4
<span style="color: #555555;"> 2</span>      2  39.7  297. 0.300 10.4   20.2
<span style="color: #555555;"> 3</span>      3  41.6  304. 0.269 11.7   18.7
<span style="color: #555555;"> 4</span>      4  41.3  297. 0.342  8.98  14.6
<span style="color: #555555;"> 5</span>      5  38.8  290. 0.304 11.1   19.8
<span style="color: #555555;"> 6</span>      6  38.8  299. 0.269 10.8   18.5
<span style="color: #555555;"> 7</span>      7  40.9  279. 0.309 11.6   18.3
<span style="color: #555555;"> 8</span>      8  41.7  312. 0.316 10.2   15.7
<span style="color: #555555;"> 9</span>      9  40.0  299. 0.311 10.9   17.6
<span style="color: #555555;">10</span>     10  42.0  319. 0.285 10.8   19.4
<span style="color: #555555;">11</span>     11  41.0  302. 0.339  9.96  21.3
<span style="color: #555555;">12</span>     12  39.0  290. 0.306 11.7   18.4
<span style="color: #555555;">13</span>     13  40.9  303. 0.275 11.7   19.4
<span style="color: #555555;">14</span>     14  37.9  288. 0.228 11.2   18.5
<span style="color: #555555;">15</span>     15  43.1  284. 0.328 12.1   15.8
<span style="color: #555555;">16</span>     16  44.2  300. 0.293 11.1   17.8
<span style="color: #555555;">17</span>     17  39.5  293. 0.294  9.22  17.8
<span style="color: #555555;">18</span>     18  38.1  297. 0.322  9.93  18.5
<span style="color: #555555;">19</span>     19  41.3  298. 0.319  9.28  20.8
<span style="color: #555555;">20</span>     20  39.9  291. 0.312 10.0   20.1
<span style="font-weight: bold;">── Initial Conditions (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$inits</span><span style="font-weight: bold;">): ──</span>
     depot    central peripheral        auc 
         0          0          0          0 

Simulation <span style="font-weight: bold;">without uncertainty</span> in parameters, omega, or sigma matricies

<span style="font-weight: bold;">── First part of data (object): ──</span>
<span style="color: #555555;"># A tibble: 6,020 × 8</span>
  sim.id  time    CP    PP  depot central peripheral   auc
   <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span>      1     0   0   0     <span style="text-decoration: underline;">10</span>000       0          0    0  
<span style="color: #555555;">2</span>      1     1  41.6 0.757  <span style="text-decoration: underline;">7</span>594.   <span style="text-decoration: underline;">1</span>657.       243.  24.7
<span style="color: #555555;">3</span>      1     2  51.2 2.20   <span style="text-decoration: underline;">5</span>767.   <span style="text-decoration: underline;">2</span>041.       705.  72.7
<span style="color: #555555;">4</span>      1     3  48.4 3.66   <span style="text-decoration: underline;">4</span>380.   <span style="text-decoration: underline;">1</span>928.      <span style="text-decoration: underline;">1</span>176. 123. 
<span style="color: #555555;">5</span>      1     4  41.5 4.93   <span style="text-decoration: underline;">3</span>326.   <span style="text-decoration: underline;">1</span>656.      <span style="text-decoration: underline;">1</span>581. 168. 
<span style="color: #555555;">6</span>      1     5  34.2 5.93   <span style="text-decoration: underline;">2</span>526.   <span style="text-decoration: underline;">1</span>362.      <span style="text-decoration: underline;">1</span>902. 206. 
<span style="color: #555555;"># ℹ 6,014 more rows</span>
</code></pre>
</div>
<p>As we’ve seen throughout the post, the print method has lots of nice touches. It shows the simulation parameters as well as the simulation results, and has a very gentle message reminding me I haven’t incorporated measurement error, random effects, or parameter uncertainty. Which… I mean, I intentionally left those things out, but actually I do appreciate the clear statement of what <em>wasn’t</em> done here.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/fastest-girl-in-town.png" class="img-fluid"></p>
</div>
</section>
<section id="performance-considerations" class="level2">
<h2 class="anchored" data-anchor-id="performance-considerations">Performance considerations</h2>
<blockquote class="blockquote">
<p>Ain’t no use in trying to slow me down<br>
’Cause you’re running with the fastest girl in town<br>
Ain’t you baby?<br>
&nbsp;&nbsp; – <a href="https://www.youtube.com/watch?v=EbaEVA259IE">Miranda Lambert</a></p>
</blockquote>
<p>For small simulations like the ones I’m running in this post, you really don’t need to care much about performance. However, when you start running larger simulations it starts to matter a lot. To that end there’s a nice <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html">article on speeding up rxode2</a> in the package documentation which I’ve already found extremely useful at work when doing a little bit of code profiling on analysis code. Since this does matter a fair bit in practice, I’ll walk through the same ideas here.</p>
<p>Let’s define a few functions that run the simulations in different ways. First, I’ll start with a <code>solve_loop()</code> function that deliberately strips out any form of multi-threading. Each row in <code>params</code> is passed as a separate call to <code>solve()</code>, nested inside a <code>for</code> loop:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">solve_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb22-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(params)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params[i, ], events)</span>
<span id="cb22-3">}</span></code></pre></div>
</div>
<p>This is our baseline case. It’s designed to make life as difficult as possible for rxode2 by enforcing single threaded execution within R. We can improve on this considerably by passing the entire <code>params</code> data frame, allowing rxode2 to run the simulations in parallel. I haven’t looked under the hood to work out exactly how rxode2 manages the parallelism<sup>15</sup> Here are three functions that explicitly request 1, 2 or 4 cores/threads:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">solve_thread_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb23-2">solve_thread_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb23-3">solve_thread_4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
<p>From experience, I’ve learned that there’s almost never anything to be gained by trying to execute more than four resource-hogging threads simultaneously on my laptop, so I’ll be sensible and won’t try anything more than that. Let’s take a look at the difference in performance for each of these functions:</p>
<div class="cell" data-hash="index_cache/html/benchmarks_15a64dfc7a69447ec3b1a389376a8a52">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">bench <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_loop</span>(),</span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_1</span>(),</span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_2</span>(),</span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_4</span>()</span>
<span id="cb24-6">)</span>
<span id="cb24-7">bench</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
             expr       min        lq      mean    median       uq       max neval
     solve_loop() 58.630598 62.227245 68.912034 64.780701 68.78793 168.11848   100
 solve_thread_1()  8.515051  8.867159  9.635308  9.126248  9.45503  26.11143   100
 solve_thread_2()  7.497051  7.720607  8.476758  7.968412  8.44852  15.94618   100
 solve_thread_4()  6.538996  7.063265  7.761950  7.160678  7.54286  17.27997   100</code></pre>
</div>
</div>
<p>You can see from looking at the table that there’s a big drop in performance when we force rxode2 to simulate each subject one at a time within a loop: <code>solve_loop()</code> is much, much slower than any of the others. Increasing the number of threads from one to four helps a fair bit too, but not to the same dramatic extent. This is even more apparent when we visualise the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(bench)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/benchmark-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Admittedly, the time scale here is such that it doesn’t really matter much, but for more realistic examples I’ve played with the speed-up seems to be pretty similar and it can make a big difference to the performance of analysis code.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>As an aside: when getting started, I found it a little easier to look at the <a href="https://nlmixr2.github.io/rxode2-manual/">rxode2 user manual</a> than to work from the pkgdown site. As far as I can tell it’s essentially the same material, but the manual organises it in a linear fashion that makes it a little clearer to new users because you get a better sense of the order in which to read things.↩︎</p></li>
<li id="fn2"><p>Does that term even make sense for a linux machine? It’s not like the thing shipped with linux in the first place. Whatever.↩︎</p></li>
<li id="fn3"><p>I haven’t extensively checked the dependencies on other operating systems, but from what I can tell a Windows install requires <a href="https://cran.r-project.org/bin/windows/Rtools/">RTools</a>.↩︎</p></li>
<li id="fn4"><p>Or notorious, depending on your perspective↩︎</p></li>
<li id="fn5"><p>Metaprogramming in R relies on the fact that R adopts a <a href="https://en.wikipedia.org/wiki/Lazy_evaluation">lazy evaluation</a> model for code execution. This allows the programmer to capture user code passed to a function <em>before</em> it is evaluated, modify the code as desired, and indeed prevent it being evaluated at all. R is hardly the only language to adopt this approach, but it does put it in contrast to languages like Python that adopt an <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Eager_evaluation">eager evaluation</a> approach.↩︎</p></li>
<li id="fn6"><p>In this post I’m assuming the drug has bioavailability of <img src="https://latex.codecogs.com/png.latex?F%20=%201">, but that’s not true generally, so you’d have to model this explicitly by scaling the drug amount that passes from the gut to the central compartment in the ODE equations.↩︎</p></li>
<li id="fn7"><p>In essence, the value of <code>auc</code> that accrues is a numerical estimate of the time-integral of drug concentration. This “area under the curve” measure is one of several different measures used to assess drug exposure. I talked a lot about the AUC measure in my post on <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a>.↩︎</p></li>
<li id="fn8"><p>The rxode2 mini-language also allows you to use <code>~</code> for this purpose, but I’m not going to do that here. For this post, I’ve chose to use <code>=</code> as a way of reminding myself that my model specification isn’t “normal” R code.↩︎</p></li>
<li id="fn9"><p>Model objects in rxode2 have S3 class “rxode2”.↩︎</p></li>
<li id="fn10"><p>You can customise this name if you care deeply about such things. As noted in the <a href="https://nlmixr2.github.io/rxode2/reference/rxode2.html"><code>roxde2()</code> documentation</a>, there is a <code>modName</code> argument that you can use for this purpose. Because this name is used throughout the C compilation process, it must start with a letter and contain only alphanumeric ASCII characters.↩︎</p></li>
<li id="fn11"><p>Yes, you can customise this too, by specifying the <code>wd</code> argument to <code>rxode2()</code>.↩︎</p></li>
<li id="fn12"><p>I actually feel bad about referencing “Meds” in this post, because let’s face it <em>“The sex, and the drugs, and the complications”</em> would be a fucking magnificent title for a blog post about PKPD models with covariates. Oh who am I kidding? I’m absolutely going to write a post with that title.↩︎</p></li>
<li id="fn13"><p>Experienced R users would not be surprised to discover that <code>solve()</code> is an S3 generic defined in the base package, and equally unsurprised to note that rxode2 defines a method for “rxode2” objects such as <code>mod</code>. It somehow makes me happy to see <code>solve()</code> used this way.↩︎</p></li>
<li id="fn14"><p>Note to future-Danielle: there is a nice discussion of this in the rxode2 context specifically, in the article on <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html">population simulation</a>.↩︎</p></li>
<li id="fn15"><p>Is it purely <a href="https://en.wikipedia.org/wiki/Multithreading">multi-threading</a> we’re talking about? Do we care deeply about the <a href="https://stackoverflow.com/questions/11835046/multithreading-and-multicore-differences">multi-thread/multi-core</a> distinction? Does <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">SIMD</a> come into play? Most importantly, does the author really want to be bothered writing a deep dive on these topics when the audience consists almost entirely of people who (a) already understand these topics or (b) do not care about these topics? The answer to that last one is no. No she does not.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pharmacometric Simulation with Rxode2},
  date = {2023-08-28},
  url = {https://blog.djnavarro.net/posts/2023-08-28_rxode2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pharmacometric Simulation with
Rxode2.”</span> August 28, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-28_rxode2">https://blog.djnavarro.net/posts/2023-08-28_rxode2</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-28_rxode2/</guid>
  <pubDate>Sun, 27 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-28_rxode2/boys.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Pharmacometric simulation with mrgsolve</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/</link>
  <description><![CDATA[ 





<!-- 
cover art: https://unsplash.com/photos/a7OdG45prSM
licence: unsplash public
-->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Continuing my informal series of “Danielle learns <a href="https://blog.djnavarro.net/category/pharmacometrics">pharmacometric modelling</a>” posts, today I’ve decided to sit down and teach myself how to use the <a href="https://mrgsolve.org/">mrgsolve</a> package in R.</p>
<p>As I’m rapidly coming to realise, the world of pharmacometric modelling is an intersting space where there are a large number of domain-specific languages that have been designed to solve a particular subset of the modelling problems faced by analysts in the field, and R serves as a lingua franca that stitches them all together and makes it possible to write analysis scripts that call on multiple tools.<sup>1</sup></p>
<p>With that as the structure of the ecosystem, what you tend to find are packages that carve out a specific niche by building on top of some other tool. For this post, the niche we’re talking about is <strong>model-based simulation</strong>. In this context, it’s assumed that the analyst has a specific pharmacometric model in mind (e.g., one-compartment PK model,<sup>2</sup> two-compartment PK model, etc etc). We are not attempting to estimate parameters from data, nor are we runing a model testing exercise. The model is presumed to exist already, usually because the analyst has already done the model fitting exercise using their tool of choice.<sup>3</sup></p>
<p>Within the specific “model simulation” niche there are a number of R packages that people seem to use frequently. There’s the RxODE package<sup>4</sup> and its successor <a href="https://nlmixr2.github.io/rxode2/">rxode2</a>, for example, and mrgsolve falls within the same general niche. I didn’t have any specific reason for deciding to learn mrgsolve first: I had to start somewhere and this seems as good a place as any.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mrgsolve)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/mrgsolve-hex.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Hex sticker image for the mrgsolve R package"></p>
</figure>
</div>
<section id="a-simple-example" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-example">A simple example</h2>
<p>Okay, let’s get started. The mrgsolve package is build on top of an open source ODE solver,<sup>5</sup> but the user doesn’t need to call it directly. Instead, a model is constructed using a <strong>model specification file</strong> (more on that later) that is then compiled to C++. This compiled model is used to run simulations, and it’s this compiled model that calls the ODE solvers. As a example, let’s use this code taken from the <a href="https://mrgsolve.org/vignettes/01-get-started.html">get started</a> page, which uses <code>modlib()</code> to use one of the predefined model specifications that come bundled with mrgsolve:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Building pk1 ... done.</code></pre>
</div>
</div>
<p>In this code, <code>"pk1"</code> refers to the name of one of the model that comes bundled with mrgsolve… and there will be exactly zero pharmacometricians in this world that are surprised to discover that this is a one-compartment PK model with first-order absorption into the central compartment, and first-order elimination from the central compartment. If we print out the model object, we get a nice little summary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc27212d78b 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>A few months ago very little of this would have made sense to me, but I’ve – apparently – become familiar enough with conventions in pharamacometrics that this now looks very easy to read. For this initial example, the bits that matter most are these:</p>
<ul>
<li><p>We have a list of compartments: CENT refers to the central compartment, and EV refers to an extravascular dosing compartment through which the drug is administered. Note that although there are two listed compartments, this is really a one-compartment model: the extravascular dosing compartments are a necessary part of the model formalism, but no more than that.</p></li>
<li><p>We have a list of parameters: clearance (CL) is a measure representing the volume of blood that can be fully cleared of the drug per unit time, volume of distribution (V) measures the size of the central compartment, and KA is the absorption rate constant governing how quickly the drug is absorbed from the extravascular compartment into the central compartment.</p></li>
<li><p>When running a simulation, the drug amounts in the compartments CENT and EV will be returned as part of the output. However, we can also specify other “captured” quantities, which in this case adds CP, the drug concentration in the central compartment.<sup>6</sup></p></li>
</ul>
<p>The parameter values (i.e.&nbsp;CL, V, KA) are part of the model specification, and you can see the values assigned to those parameters by calling <code>param()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=3):
 name value . name value
 CL   1     | V    20   
 KA   1     | .    .    </code></pre>
</div>
</div>
<p>We see that our model assumes a clearance (CL) of 1, an aborption rate constant (KA) of 1, and a volume of distribution equal to 20. The mrgsolve package doesn’t keep track of units: it’s up to the user to make sure all the units are on the appropriate scale.</p>
<p>Note that the <code>param()</code> function is both the “getter” and the “setter” for model parameters: <code>param(mod)</code> returns a parameter list object containing the parameters of <code>mod</code>, whereas <code>param(mod, CL = 2, KA = 2)</code> returns a modified model object with updated parameters. Later in the post I’ll use <code>param()</code> to modify model parameters in this way.</p>
<p>Okay so now we have a model object <code>mod</code> that specifies all our pharmacokinetic assumptions. In order to run a simulation, we also need to provide an <strong>event schedule</strong> that provides dosing information, and we’ll also need to say something about the time points at which we want to simulate the various pharmacokinetic quantities of interest. You can do this in a few different ways but for the purposes of the initial example I’ll do it the same way that the “get started” vignette does, and use a pipe-friendly workflow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>Here we take the <code>mod</code> object, pipe it to the <code>ev()</code> function that builds the event schedule, and then pipe the output to <code>mrgsim()</code> which then runs the simulation. In this code, the arguments to <code>ev()</code> are all very standard in the field:</p>
<ul>
<li><code>amt</code> is the amount of drug</li>
<li><code>ii</code> is the interdose interval</li>
<li><code>addl</code> is number of additional doses</li>
</ul>
<p>The arguments to <code>mrgsim()</code> are used to specify the time points:</p>
<ul>
<li><code>start</code> is the initial time point (I actually didn’t need to specify it in ths case because the default value is 0)</li>
<li><code>end</code> is the final time point</li>
<li><code>delta</code> is the step size (i.e., the amount of time between successive time points)</li>
</ul>
<p>The output here is a tabular data structure – not technically a data frame, but I’ll get to that – with sensible column names:</p>
<ul>
<li><code>ID</code> is a subject identifier (always 1 for this simple example)</li>
<li><code>time</code> is the time point for the simulated measurement</li>
<li><code>EV</code> is the drug amount in the extravascular compartment (e.g., the gut, if we’re talking about oral dosing)</li>
<li><code>CENT</code> is the drug amount in the central compartment</li>
<li><code>CP</code> is the drug concentration in the central compartment</li>
</ul>
<p>To help you get a sense of what the simulation results look like, the mrgsolve package provides a plot method for simulation results, so if I’d wanted to I could add a call to <code>plot()</code> at the end of the pipeline, and get this as the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Very nice.</p>
</section>
<section id="simulation-workflow" class="level2">
<h2 class="anchored" data-anchor-id="simulation-workflow">Simulation workflow</h2>
<p>Now things get a little messier. The mrgsolve package is designed to support several different kinds of workflow, which is of course a good thing, but very often the price of analytic flexibility is function complexity. It takes some effort to understand all the moving parts to the package, and the different ways in which mrgsolve functions can be called.<sup>7</sup></p>
<section id="the-model-library" class="level3">
<h3 class="anchored" data-anchor-id="the-model-library">The model library</h3>
<p>Let’s start by taking a closer look at the library of pre-specified models that come bundled with mrgsolve. They’re stored in a package folder whose location is accessible by calling <code>modlib()</code> with no arguments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/danielle/R/x86_64-pc-linux-gnu-library/4.3/mrgsolve/models"</code></pre>
</div>
</div>
<p>As you can see, when called with no inputs <code>modlib()</code> doesn’t return a compiled model, and it simply returns the path to the model library folder. If you want a list of the models that come bundled with mrgsolve, you can call <code>modlib()</code> setting <code>list = TRUE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>mrgsolve internal library:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  effect  tmdd  viral1  viral2  emax  irm1  irm2  irm3  irm4  pk1cmt  pk2cmt  pk3cmt  pk1  pk2  pk2iv  popex  pred1  pbpk  1005  nm-like</code></pre>
</div>
</div>
<p>Finally, if you want to build and use one of these model you can call <code>modlib()</code> and pass the name of the model you want as the <code>model</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading model from cache.</code></pre>
</div>
</div>
<p>It’s probably stating the obvious, but while the <code>modlib()</code> function works nicely as a tool to support analysts interactively, you probably wouldn’t call it as a developer. For instance, if you want to access the mrgsolve package folder that contains the models, you’d write code that makes very clear that you’re looking for a path (not trying to build a model). Something like this would work better:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/danielle/R/x86_64-pc-linux-gnu-library/4.3/mrgsolve/models</code></pre>
</div>
</div>
<p>Similarly, if you want to find the models in the model library folder, that’s easy enough to do with <code>fs::dir_ls()</code> and a simple regular expression. Easy done.</p>
</section>
<section id="building-models-from-file" class="level3">
<h3 class="anchored" data-anchor-id="building-models-from-file">Building models from file</h3>
<p>Along the same lines, building one of the bundled models using <code>modlib()</code> is a perfectly sensible thing to do when you’re just starting out and don’t want to write your own model specification files, but after a while you might want to pivot to a different workflow. To that end, there’s an <code>mread()</code> function – and related functions <code>mread_file()</code> and <code>mread_cache()</code> – that reads a model specification file and returns the model object linked to the compiled code. As an example, here’s how I’d use <code>mread()</code> to build the one-compartment model in the previous section:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb20-2">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Building pk1 ... (waiting) ...
done.</code></pre>
</div>
</div>
<p>Optionally you can provide a file name for the model specification file that sits within the <code>project</code> folder, but in this case we don’t need to: if the <code>file</code> argument is unspecified <code>mread()</code> assumes that the file name is the same as the <code>model</code> name with file extension <code>.cpp</code>.<sup>8</sup></p>
</section>
<section id="model-objects" class="level3">
<h3 class="anchored" data-anchor-id="model-objects">Model objects</h3>
<p>The mrgsolve package is built using S4 classes and of the great many object oriented programming systems available in R that’s the one I’m least comfortable with.<sup>9</sup> But hey… I’ve just reread the <a href="https://adv-r.hadley.nz/s4.html">S4 chapter in Advanced R</a>, so let’s see how we go with this, shall we? First, I’ll be polite and explicitly load the methods package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(methods)</span></code></pre></div>
</div>
<p>Next let’s see what kind of object <code>mod</code> is and what methods are defined for it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "mrgmod"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">methods</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgmod"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] [              [[             $              all.equal     
 [5] as.environment as.list        blocks         cmtn          
 [9] data_set       ev_rx          ev             evd           
[13] idata_set      init           initialize     knobs         
[17] loadso         names          omat           param         
[21] req            Req            revar          see           
[25] show           smat           stime          summary       
[29] update         within         zero_re       
see '?methods' for accessing help and source code</code></pre>
</div>
</div>
<p>A lot of those methods are unsurprising. For example, the <code>show()</code> method is just the S4 analog of <code>print()</code>. When we print the <code>mod</code> object at the console we’re just calling its <code>show()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc21a2b760d 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>But there are other methods that are kind of handy when inspecting a mrgmod object. For example, if we wanted to see the source code for the corresponding model specification file we could call the <code>see()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">see</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Model file:  pk1.cpp 
$PARAM @annotated
CL   :  1 : Clearance (volume/time)
V    : 20 : Central volume (volume)
KA   :  1 : Absorption rate constant (1/time)

$CMT  @annotated
EV   : Extravascular compartment
CENT : Central compartment

$GLOBAL
#define CP (CENT/V)

$PKMODEL ncmt = 1, depot = TRUE

$CAPTURE @annotated
CP : Plasma concentration (mass/volume)</code></pre>
</div>
</div>
<p>If we didn’t want quite that much detail, a <code>summary()</code> would have sufficed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model: pk1
- Parameters: [3]
  CL, V, KA
- Compartments: [2]
  EV, CENT
- Captured: [1]
  CP
- Outputs: [3]
  EV, CENT, CP</code></pre>
</div>
</div>
<p>I don’t intend to do an exhaustive walk through of all the methods defined for mrgmod objects. That would be tiresome, and in any case I don’t even know what all of them do yet. But what I will mention is that many of the methods exist to provide public accessors for these internal slots of a mrgmod object. To illustrate, here’s a list of all the slot names:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slotNames</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "model"    "modfile"  "package"  "soloc"    "project"  "start"   
 [7] "end"      "delta"    "add"      "tscale"   "digits"   "quiet"   
[13] "verbose"  "debug"    "preclean" "atol"     "rtol"     "ss_rtol" 
[19] "ss_atol"  "maxsteps" "hmin"     "hmax"     "ixpr"     "mxhnil"  
[25] "shlib"    "funs"     "omega"    "sigma"    "request"  "param"   
[31] "init"     "capture"  "Icap"     "capL"     "Icmt"     "cmtL"    
[37] "args"     "fixed"    "advan"    "trans"    "mindt"    "code"    
[43] "annot"    "envir"    "plugin"   "ss_cmt"  </code></pre>
</div>
</div>
<p>Okay so one of the slots is called “param”, and denoted <code>@param</code> to remind us that it’s a slot of an S4 object.<sup>10</sup> Calling the <code>param()</code> method is the appropriate way to access the <code>@param</code> slot, for instance.<sup>11</sup> The <code>see()</code> method is slightly fancier, but it too is essentially an accessor function for the <code>@modelfile</code> and <code>@code</code> slots. If I were an extremely unwise woman who ignored all the best practices for S4 classes I could use a command like <code>cat(mod@code, sep = "\n")</code> and get roughly the same output. This is of course a terrible idea: the slots of an S4 object are considered internal details and not part of the package API. Accessing them directly is considered a faux pas and you have only yourself to blame if the developer later changes the structure of the slots and your code breaks.</p>
<p>Indeed, the <em>only</em> reason I’m talking about them here is that I find it helpful for building my own mental model of what mrgsolve does, which will become apparent in the next section when I tackle the puzzlingly magical behaviour of the <code>ev()</code> function.</p>
</section>
<section id="event-objects" class="level3">
<h3 class="anchored" data-anchor-id="event-objects">Event objects</h3>
<p>Model objects represent the underlying ODE system. They don’t store information about “interventions” (external forcers) on the system. In the pharmacokinetic context the main intervention we’re thinking about is dosing. An events object returned by <code>ev()</code> returns a event schedule that would be familiar to any pharmacometrician:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb35-2">events</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Events:
  time amt ii addl cmt evid
1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>The <code>events</code> object looks a lot like a data frame, but is technically an S4 object with class “ev”. However, an ev object has only two slots, one of which is <code>@data</code> and – as you’d expect – it stores the data set as a data frame internally. So… yeah, it’s basically a data frame, and since there are <code>as.data.frame()</code> and <code>as_tibble()</code> methods defined for ev objects, so you can coerce it to whatever your preferred form of tabular data object happens to be.<sup>12</sup> I’m a tibble girl myself so…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(events)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 6
   time   amt    ii  addl   cmt  evid
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     0   100    24     9     1     1</code></pre>
</div>
</div>
<p>I’ll talk more about other ways to build fancier event schedules later, and you’ll see that it’s perfectly possible to use a simple data frame to specify an event schedule, but we’re not yet at the point where any of that is needed. Right now, all we’re trying to do is understand what happens in the simple simulation I showed at the start of this post.</p>
</section>
<section id="danielle-briefly-loses-her-fking-mind" class="level3">
<h3 class="anchored" data-anchor-id="danielle-briefly-loses-her-fking-mind">Danielle briefly loses her f**king mind</h3>
<p>Very soon I will move on to <code>mrgsim()</code>, the function that we use to run the simulation itself. Truly, we will get there soon. But we have one little matter to clear up first, related to the behaviour of <code>ev()</code>.</p>
<p>The previous section makes it look as if <code>ev()</code> is very simple, and viewed from the analyst perspective it really is quite simple. You use it to construct event schedules. However, <code>ev()</code> is not a simple function. It’s an S4 generic with dispatch on the first argument<sup>13</sup> and it returns a qualitatively different kind of object when called in a pipeline.</p>
<p>To understand the “Danielle briefly loses her f**king mind” aspect to this, let’s return to the model simulation pipeline that I lifted from the “Get Started” vignette and used at the start of the post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>If you’re expecting <code>ev()</code> to return an “ev” object – as indeed it would if I called <code>ev(amt = 100, ii = 24, addl = 9)</code> outside of a pipeline – this code makes absolutely no sense whatsoever. An “ev” object simply does not have the information required to run the simulations. Running a model-based simulation requires an actual model, and an “ev” object does not contain any slots that could possibly store a model object. So… something magical is happening. This code shouldn’t work, but it does???</p>
<p>I cried briefly. Then I read the <a href="https://mrgsolve.org/docs/reference/ev.html">documentation</a> properly. Then I cried some more.</p>
<p>After reading the documentation carefully, I now understand what’s going on here, but an explanation is required because if you don’t look closely it looks like magic.<sup>14</sup> When the first argument to <code>ev()</code> is a model object, it doesn’t return an event schedule. Instead, it returns another model object.<sup>15</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc21a2b760d 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>Looking at the printed output, you might think that the output here is identical to the original model object <code>mod</code>, but in this case looks are deceiving. The new model stores the event schedule internally: it’s tucked away in the <code>@args</code> slot.<sup>16</sup> To illustrate, let’s assign the output to a variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">mod_with_ev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>Now compare the pair:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>args</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>list()</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">mod_with_ev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>args</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$events
Events:
  time amt ii addl cmt evid
1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>So now things become a little clearer. After seeing this, what you might – correctly! – conclude is that at the other end of the pipeline the <code>mrgsim()</code> function is aware that the event schedule might not be passed explicitly, and knows to check within the model object if that is the case. Knowing all this, we’re now in a position to understand what happens during a pipeline like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>It’s a clever trick, and I imagine it’s something that a lot of data analysts find super handy. That said, it’s probably not something I would use myself. I’m a simple girl who likes her coffee black and her data pipelines transparent, so I’d probably avoid this particular workflow and instead write code that looks more like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb49-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb49-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb49-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb49-5"></span>
<span id="cb49-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the simulation</span></span>
<span id="cb49-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_e</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">events =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>Notice that I called <code>mrgsim_e()</code> here rather than <code>mrgsim()</code>. Because mrgsolve recognises that sometimes developers might want to call simulation functions programmatically, it provides several restricted versions of <code>mrgsim()</code> that require input in a specific format. The sneaky “event-schedule-inside-the-model-object” piping trick I showed at the start of the post does not work with <code>mrgsim_e()</code>, which – at least to my mind – makes it a safer choice when running simulations programmatically. Later in this post you’ll see me pivot to using <code>mrgsim_d()</code>, for much the same reason.</p>
</section>
<section id="data-frames-as-event-schedules" class="level3">
<h3 class="anchored" data-anchor-id="data-frames-as-event-schedules">Data frames as event schedules</h3>
<p>In the last section I kind of wrapped myself up in knots trying to get a handle on what <code>ev()</code> does under the hood, and as you can probably tell I have some mixed feelings about it. Fortunately, you don’t have to use it at all if you don’t want to: the <code>mrgsim_d()</code> function takes regular data frame as the <code>data</code> argument, and which plays the same role as the <code>events</code> argument in <code>mrgsim_e()</code>. You can generate event schedules in data frame format using the <code>ev_expand()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID time amt ii addl cmt evid
1  1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>The output here looks the same, but this time the output is a regular data frame, and so to be defensive in our code we would call <code>mrgsim_d()</code> to run a simulation that <em>requires</em> a data frame as input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb52-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb52-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb52-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb52-5"></span>
<span id="cb52-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the simulation</span></span>
<span id="cb52-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>As an aside, you might be wondering why this function is named <code>ev_expand()</code>. It’s not obvious from the example I showed above, but the <code>ev_expand()</code> function is essentially a convenience function that calls to <code>expand.grid()</code> to combine the levels of all variables input, with some extra syntactic sugar that auto-populates certain columns that are required for event schedule data sets. As an example, you might generate an event schedule defined for multiple subjects using a command like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID time amt ii addl cmt evid
1  1    0 100 24    9   1    1
2  2    0 100 24    9   1    1
3  3    0 100 24    9   1    1
4  4    0 100 24    9   1    1
5  5    0 100 24    9   1    1
6  6    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>Later in this post I’ll use <code>ev_expand()</code> in exactly this way.</p>
</section>
<section id="simulation-times" class="level3">
<h3 class="anchored" data-anchor-id="simulation-times">Simulation times</h3>
<p>We’re almost done unpacking the simple example, but I want to rewrite the code one last time. Until now, every time I’ve <code>mrgsim()</code> and its variants I’ve passed arguments <code>end</code> and <code>delta</code> as a way to override the default assumptions about what time points we would use when running our simulations. Internally, these arguments are used to construct a “tgrid” object that specifies the time points. We can construct this object explicitly by calling <code>tgrid()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>start:  0  end:    480  delta:  0.1  offset: 0  min:    0   max:    480 </code></pre>
</div>
</div>
<p>Using this knowledge, we can now write our simulation code like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb57-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb57-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb57-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb57-5">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation</span></span>
<span id="cb57-8">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span></code></pre></div>
</div>
<p>For the simple example, calling <code>tgrid()</code> explicitly doesn’t by us much, but if you dive into the documentation a little you discover that there are tools for working with tgrid objects that allow you to define the simulation times in much richer ways than a simple grid. But I digress.</p>
</section>
<section id="simulation-code" class="level3">
<h3 class="anchored" data-anchor-id="simulation-code">Simulation code</h3>
<p>Taking a step back, it’s worth thinking a little about the code I’ve ended up with. The piped code I started with probably works nicely for some people, but it’s not my preferred way to do this. The way I think of these things, a simulation has three main inputs (model object, event schedule, simulation times), and I find the code easier to read when these three inputs are passed as three separate arguments. The syntax used to specify the original simulation pipeline is very compact…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>…but that compactness comes at the expense of slightly obfuscating the inputs to <code>mrgsim()</code>. By way of contrast, this version of the code is considerably more verbose…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this would normally be the project folder</span></span>
<span id="cb59-2">dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb59-5">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb59-6">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb59-7">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb59-8"></span>
<span id="cb59-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation</span></span>
<span id="cb59-10">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span></code></pre></div>
</div>
<p>…but personally I find it a little easier to understand the structure of the simulation when its written like this. Other people might have different views though.</p>
</section>
<section id="simulation-output" class="level3">
<h3 class="anchored" data-anchor-id="simulation-output">Simulation output</h3>
<p>At this point the simulation is complete, so we can turn our attention to the output we’ve created. Here’s an example of the output returned by <code>mrgsim()</code> and its friends:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">out</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>As you’ve probably come to expect at this point, this is not technically a data frame, it’s an S4 object of class “mrgsims”, and can easily be coerced to a data frame using <code>as.data.frame()</code> or <code>as_tibble()</code>.</p>
<p>The mrgsolve package supplies a plot method for mrgsims objects that generates nice looking lattice plots, making it very easy to quickly produce helpful data visualisations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The plot method allows you to <a href="https://mrgsolve.org/docs/reference/plot_mrgsims.html">customise the plot</a> in a fairly flexible way, but there are some limits to what you can do with this approach. It’s not a big drawback though. If additional customisation is needed it’s pretty easy to convert the output to a tibble and then using ggplot2 to create the specific visualisation you want:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb63-2"></span>
<span id="cb63-3">out <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-4">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-5">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb63-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(EV, CENT, CP), </span>
<span id="cb63-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>, </span>
<span id="cb63-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb63-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb63-10">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb63-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb63-12">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EV"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gut amount"</span>,</span>
<span id="cb63-13">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CENT"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Central amount"</span>,</span>
<span id="cb63-14">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CP"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Central concentration"</span></span>
<span id="cb63-15">    )</span>
<span id="cb63-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb63-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Drug amounts and concentrations over time"</span>,</span>
<span id="cb63-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time (hours)"</span>,</span>
<span id="cb63-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb63-26">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="model-specification" class="level2">
<h2 class="anchored" data-anchor-id="model-specification">Model specification</h2>
<p>Up till now I’ve been relying entirely on prespecified pharmacokinetic models included in the mrgsolve model library. That was a useful thing to do earlier in this post while discussing the mechanics of <code>mrgsim()</code>, <code>ev()</code>, <code>mread()</code>, <code>tgrid()</code> and so on, but in practice you really need to understand how models are specified. I’m not going to attempt a comprehensive discussion of this topic, but if you want more detail, the chapters in the user guide I found most relevant are:</p>
<ul>
<li>The <a href="https://mrgsolve.org/user-guide/specification.html">model specification chapter</a></li>
<li>The <a href="https://mrgsolve.org/user-guide/topics.html">topics chapter</a></li>
</ul>
<section id="example-1-two-compartment-pk-model" class="level3">
<h3 class="anchored" data-anchor-id="example-1-two-compartment-pk-model">Example 1: Two compartment PK model</h3>
<p>There are two ways to specify a model in mrgsolve: you can pass a string to <code>mread_code()</code>, or you can read it from a model specification file using <code>mread_file()</code>. I’ll be using the latter method here. By convention, model specification files use a “.cpp” file extension, but it’s important to recognise that despite that, a model specification file is not, strictly speaking, C++ code. A model specification consists of a set of code blocks, and only some of those code blocks contain C++ code. Some blocks use R syntax, and others are plain text.<sup>17</sup></p>
<p>In any case, the first model specification I wrote is contained in the <a href="example1.cpp">example1.cpp</a> file bundled with this post, and is a very modest tweak to one of the models distributed with the mrgsolve package. Here’s what the file looks like:</p>
<div class="cell" data-file="example1.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example1.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb64-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-2"></span>
<span id="cb64-3">This is a minor variation of the <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cmt"</span> model that is distributed as</span>
<span id="cb64-4">part of the mrgsolve internal model library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> It has a single extravascular</span>
<span id="cb64-5">dosing compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>the GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> a central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> a</span>
<span id="cb64-6">peripheral compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span> Absorption from GUT is first order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb64-7">whereas elimination from CENT follows Michaelis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Menten kinetics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb64-8"></span>
<span id="cb64-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-10"></span>
<span id="cb64-11">VC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Central volume <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-12">Q    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Inter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compartmental clearance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-13">VP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Peripheral volume of distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-14">KA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Absorption rate constant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-15">VMAX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Maximum velocity of elimination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-16">KM   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Michaelis constant <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> elimination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-17"></span>
<span id="cb64-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-19"></span>
<span id="cb64-20">GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in gut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-21">CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-22">PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in peripherhal compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-23"></span>
<span id="cb64-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>GLOBAL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-25"></span>
<span id="cb64-26"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CP </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">          </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in central compartment</span></span>
<span id="cb64-27"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CT </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">        </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in peripheral compartment</span></span>
<span id="cb64-28"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CLNL </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>VMAX<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>KM<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// non-linear clearance, per MM kinetics</span></span>
<span id="cb64-29"></span>
<span id="cb64-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ODE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-31"></span>
<span id="cb64-32">dxdt_GUT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb64-33">dxdt_CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CLNL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb64-34">dxdt_PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb64-35"></span>
<span id="cb64-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-37"></span>
<span id="cb64-38">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>There are six code blocks in this file. I’ve specified them using square brackets (e.g., <code>[BLOCKNAME]</code>) because it reminds me of <a href="https://toml.io/en/">TOML</a>, but it’s also valid to use the dollar sign (e.g., <code>$BLOCKNAME</code>).<sup>18</sup> Block names are case insensitive: mrgsolve treats <code>[BLOCKNAME]</code> and <code>[blockname]</code> identically. The order in which you specify blocks doesn’t matter, but the order of statements within a block often does matter because some blocks are interpreted as C++ or R code.</p>
<p>The interpretation of these blocks is as follows:</p>
<ul>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-prob"><code>[PROB]</code></a> block is purely used to specify comments or notes on the model. It has no functional effect. You’ll very often see this block written in markdown format.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-param"><code>[PARAM]</code></a> block is used to pass a list of parameter values to be used in the model. When parsing this code block, mrgsolve interprets the values as R expressions (evaluated at build time), so if you were to define the central compartment volume <code>VC</code> to be <code>sqrt(400)</code>, the resulting model would store <code>VC</code> as the numeric value <code>20</code> within the internal parameter list. Normally, parameters would be defined as a comma separated list of name-value pairs (e.g., <code>VC = 20, Q = 2, ...</code>), but when you use the <code>@annotated</code> option as I have done here, you can write <code>VC : 20 : Central volume (volume)</code>. This version of the syntax allows you to provide comments on how each parameter is interpreted. Many of the code blocks support the <code>@annotated</code> option, and in most cases I find myself strongly preferring the annotated syntax.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#cmt-and-init"><code>[CMT]</code></a> block is used to specify compartment names, and much like the <code>[PARAM]</code> block it supports the <code>@annotated</code> keyword. By default, all compartments are presumed to be initialised with value 0. If you need to set different initial values for the drug amounts in each compartment, use an <code>[INIT]</code> block instead of a <code>[CMT]</code> block.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#global"><code>[GLOBAL]</code></a> block is used to specify global variables and <a href="https://cplusplus.com/doc/tutorial/preprocessor/">preprocessor directives</a> in the C++ code that mrgsolve constructs from the model specification file. This block is, not surprisingly, interpreted as literal C++ code. In this example I’ve used the <code>#define</code> directive to indicate that the plasma concentration <code>CP</code> is simply an alias for <code>(CENT / VP)</code>, and similarly the tissue<sup>19</sup> concentration <code>CT</code> is an alias for <code>(PERIPH / VP)</code>, and so on.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-ode"><code>[ODE]</code></a> block is used to specify the differential equations that define the model. For every compartment in your model there is a corresponding <code>dxdt_</code> variable: for instance, if <code>CENT</code> denotes the drug amount in the central compartment, then there is automatically a variable <code>dxdt_CENT</code> that denotes its first derivative with respect to time, and you must specify the value for <em>all</em> compartment derivatives even if they are zero. The <code>[ODE]</code> block is interpreted as literal C++ code, and you can declare and initialise new variables within the <code>[ODE]</code> block if you want to. Note that you may sometimes see a <code>[DES]</code> code block instead of an <code>[ODE]</code> block. They’re the same thing: <code>[DES]</code> is an alias for <code>[ODE]</code>.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-capture"><code>[CAPTURE]</code></a> block is used to indicate variables that should be “captured” in the simulation and returned to the user in R when <code>mrgsim()</code> is called. The user guide doesn’t say so explicitly, but from what I can tell the compartment amount variables are always captured, and you don’t need to list those here. The only things you need to specify here are the <em>other</em> quantities that you want the simulation to return. It supports the <code>@annotated</code> keyword, and I’ve used that here because honestly my sanity dissolves very quickly when trying to read model specification files that don’t use the annotations.</p></li>
</ul>
<p>Okay, now that I’ve written my model specification file let’s pivot back to my R session and use it to run a simulation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb65-2">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb65-3">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb65-4">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">960</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb65-5"></span>
<span id="cb65-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation and plot results</span></span>
<span id="cb65-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb65-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Yes, that all seems to work nicely. No, I did not have any solid justification for choosing these parameters. It’s just a toy.</p>
</section>
<section id="example-2-two-compartment-population-pk-model" class="level3">
<h3 class="anchored" data-anchor-id="example-2-two-compartment-population-pk-model">Example 2: Two compartment population-PK model</h3>
<p>The simulation in the previous section is relatively simple. It’s a one compartment model, there are no random effects or covariates, and the simulation involves only a single subject. The nonlinear clearance aspect is a little fancy, since <a href="https://en.wikipedia.org/wiki/Michaelis%E2%80%93Menten_kinetics">Michaelis-Menten kinetics</a> aren’t entirely simple, but apart from that there’s not much going on in this model.</p>
<p>Time to add some complexity. This time around I’ll build a standard two compartment model with first-order absorption and first-order elimination, but I’ll now allow random effects on all model parameters. Conventionally,<sup>20</sup> the variables in a population-PK model follow a uniform convention, and this is very often mirrored in software and analysis code. I’m now familiar enough with PK modelling that I’ve internalised these conventions, but since the audience of my blog is wider, here are the key ones:</p>
<ul>
<li>Population typical values are denoted with thetas (<img src="https://latex.codecogs.com/png.latex?%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CTheta">)<sup>21</sup></li>
<li>Population scale parameters are denoted with omegas (<img src="https://latex.codecogs.com/png.latex?%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">)</li>
<li>Random effect terms are denoted with etas (<img src="https://latex.codecogs.com/png.latex?%5Ceta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta">)</li>
<li>Variability of the measurement is denoted with sigmas (<img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CSigma">)</li>
</ul>
<p>With that little refresher out of the way, let’s have a look at the model specification file:</p>
<div class="cell" data-file="example2.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example2.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb66-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-2"></span>
<span id="cb66-3">This is a population<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>PK two<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compartment model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb66-4"></span>
<span id="cb66-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-6"></span>
<span id="cb66-7">TVVC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> VC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-8">TVVP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> VP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-9">TVKA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-10">TVCL   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-11">TVQ    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-12"></span>
<span id="cb66-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OMEGA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-14"></span>
<span id="cb66-15">EVC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on VC</span>
<span id="cb66-16">EVP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on VP</span>
<span id="cb66-17">EKA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on KA</span>
<span id="cb66-18">ECL   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on CL</span>
<span id="cb66-19">EQ    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on Q</span>
<span id="cb66-20"></span>
<span id="cb66-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-22"></span>
<span id="cb66-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> VC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVVC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EVC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// central compartment volume</span></span>
<span id="cb66-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> VP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVVP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EVP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// peripheral compartment volume</span></span>
<span id="cb66-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EKA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate constant</span></span>
<span id="cb66-26"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ECL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance</span></span>
<span id="cb66-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> Q  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVQ  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// intercompartmental clearance</span></span>
<span id="cb66-28"></span>
<span id="cb66-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-30"></span>
<span id="cb66-31">GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in gut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-32">CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-33">PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in peripherhal compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-34"></span>
<span id="cb66-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>GLOBAL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-36"></span>
<span id="cb66-37"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CP </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">   </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in central compartment</span></span>
<span id="cb66-38"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CT </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in peripheral compartment</span></span>
<span id="cb66-39"></span>
<span id="cb66-40"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ODE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-41"></span>
<span id="cb66-42">dxdt_GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-(</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-43">dxdt_CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-44">dxdt_PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-45"></span>
<span id="cb66-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-47"></span>
<span id="cb66-48">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>Things to notice here:</p>
<ul>
<li><p>The <code>[PARAM]</code> block is essentially the same as last time. The only difference is that I’ve now given all the variables a “TV” prefix, to indicate that they now refer to the population typical value for the corresponding quantity (e.g., <code>TVCL</code> is the typical value for clearance <code>CL</code>). I would have preferred a different naming scheme, personally, but since this approach is pretty standard in the field I’ll adhere to it. In any case, these “typical value” variables collectively form the <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta"> vector of fixed effects in the model.</p></li>
<li><p>The purpose of the <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-omega"><code>[OMEGA]</code></a> block to specify a variance-covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">, such that the vector of random effects <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta_i"> for the <img src="https://latex.codecogs.com/png.latex?i">-th simulated person is sampled from a multivariate normal distribution, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta_i%20%5Csim%20%5Cmbox%7BNormal%7D(%5Cboldsymbol%7B0%7D,%20%5Cboldsymbol%5COmega)">. By default, mrgsolve assumes that <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega"> is a diagonal matrix, so all you need to do is specify the vector of variances along the main diagonal.<sup>22</sup> The <code>[OMEGA]</code> block supports the <code>@annotated</code> option, which I’ve used here to provide human-readable explanations of each of the terms. Note that the variable names I’ve used here are things like <code>ECL</code>, <code>EVP</code>, and so on: the “E” prefix is short for “ETA” and indicates that they refer to the value of the sampled random effect term (i.e., an <img src="https://latex.codecogs.com/png.latex?%5Ceta"> value), not the variance itself (i.e., an <img src="https://latex.codecogs.com/png.latex?%5Comega"> value). In that sense I find it helpful to think of the <code>[OMEGA]</code> block as specifying the sampling scheme for the random effect terms, rather than literally a covariance matrix.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-main"><code>[MAIN]</code></a> block, as you might expect given the name, is interpreted with C++ syntax.<sup>23</sup> It serves multiple purposes, but what I’m using it for here is specifying relationships between variables. For instance, the code on line 26 defines the clearance <code>CL</code> for a specific subject as the product of the population typical value <code>TVCL</code> and the exponentiated random effect <code>exp(ECL)</code>.<sup>24</sup></p></li>
<li><p>The <code>[CMT]</code>, <code>[GLOBAL]</code>, <code>[ODE]</code>, and <code>[CAPTURE]</code> blocks are all more or less as they were before. The code is a little different because the model is different, but there’s no new concepts required to read these blocks.</p></li>
</ul>
<p>Now that we’ve talked through the code, let’s go back to R and run a simulation using this model. In the extract below I’ve run a small simulation with six individuals. They all have the same dosing schedule, but we end up with different data in each case because the model samples the random effect terms separately for each person:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb67-2">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example2.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb67-3">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb67-4">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb67-5"></span>
<span id="cb67-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation and plot results</span></span>
<span id="cb67-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb67-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As before, I haven’t tried to choose model parameters in the principled way: I just wanted to make sure the code is functioning properly.</p>
</section>
<section id="example-3-other-customisations" class="level3">
<h3 class="anchored" data-anchor-id="example-3-other-customisations">Example 3: Other customisations</h3>
<p>I’ll go through one last example, just to illustrate some of the other things you can build into your model specification file. The code below specifies a one-compartment population-PK model, and it incorporates a few features that haven’t appeared in any of the examples so far. First, the code:</p>
<div class="cell" data-file="example3.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example3.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb68-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-2"></span>
<span id="cb68-3">This is an example adapted from the user guide <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topics"</span> section<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb68-4"></span>
<span id="cb68-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-6"></span>
<span id="cb68-7">TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical clearance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>hr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-8">TVV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.6</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical volume of distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-9">TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.35</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical absorption rate constant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>hr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-10">WT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-11">SEX  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Sex coded as male <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> female <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb68-12">WTCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Coefficient <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> the effect of weight on CL</span>
<span id="cb68-13">SEXV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.878</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Coefficient <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> the effect of sex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> on V</span>
<span id="cb68-14"></span>
<span id="cb68-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-16"></span>
<span id="cb68-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WTCL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ECL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> V  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SEXV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EKA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-20"></span>
<span id="cb68-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OMEGA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>correlation <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>block <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-22"></span>
<span id="cb68-23">ECL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.23</span>          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on CL</span>
<span id="cb68-24">EV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on V</span>
<span id="cb68-25">EKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.87</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on KA</span>
<span id="cb68-26"></span>
<span id="cb68-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SIGMA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-28"></span>
<span id="cb68-29">PROP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Proportional residual error</span>
<span id="cb68-30">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Additive residual error</span>
<span id="cb68-31"></span>
<span id="cb68-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-33"></span>
<span id="cb68-34">GUT  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Dosing compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-35">CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-36"></span>
<span id="cb68-37"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PKMODEL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-38"></span>
<span id="cb68-39">ncmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> depot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TRUE</span>
<span id="cb68-40"></span>
<span id="cb68-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TABLE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-42"></span>
<span id="cb68-43"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb68-44"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> DV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> PROP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ADD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb68-45"></span>
<span id="cb68-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-47"></span>
<span id="cb68-48">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> True plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-49">DV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Observed plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>There’s a few things to note here.</p>
<ul>
<li><p>There is a binary-valued covariate <code>SEX</code><sup>25</sup> and a continuous covariate <code>WT</code> (weight) specified in the <code>[PARAM]</code> block. Coefficients specifying the effect of sex on distribution volume <code>SEXV</code> and the effect of weight on clearance <code>WTCL</code> are also included in the <code>[PARAM]</code> block. Although from a statistical perspective the value of the covariate that varies across person (<code>WT</code>) and the regression coefficient specifying an effect <code>WTCL</code> are very different kinds of thing, from a simulation perspective they’re both just numbers you can feed into the expressions in the <code>[MAIN]</code> block that define the pharmacokinetic quantities <code>CL</code>, <code>V</code>, and <code>KA</code>.</p></li>
<li><p>The <code>[OMEGA]</code> block now has correlated random effects. I’ve used the <code>@block</code> option to indicate that the off-diagonal elements are included in the code block, and the <code>@correlation</code> option to indicate that the off-diagonal elements are correlations (rather than covariances).</p></li>
<li><p>We now have sources of measurement error included in the model specification. The scale of the noise terms is set in the <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-sigma"><code>[SIGMA]</code></a> code block, and for this model we include both proportional error (variability scales proportional to the true value) and additive error (constant variability of error). Note that the <code>[SIGMA]</code> block is used only to declare the variables and set their values. To actually incorporate the measurement error into the model code, we use the <code>[TABLE]</code> block.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-table"><code>[TABLE]</code></a> block contains C++ code that is executed at the end of each time step, before the simulation steps forward to the next point in time. At this point the drug amounts in each compartment have been computed, as have any time-point dependent stochastic terms (i.e., the noise terms specified in the <code>[SIGMA]</code> block), and we can use them to calculate other quantities. In this case, I’ve used the <code>[TABLE]</code> block to calculate the blood plasma concentration <code>CP</code>, and to calculate a hypothetical dependent variable <code>DV</code> that has noise added.</p></li>
<li><p>The <code>[ODE]</code> block has been replaced with a <a href="https://mrgsolve.org/user-guide/specification.html#pkmodel"><code>[PKMODEL]</code></a> block. This is used to indicate that mrgsolve should use analytic solutions rather than an ODE solver. As you might expect, this is only possible for a smallish subset of models that (a) have analytic solutions that (b) are known to mrgsolve. In this particular case the model is a standard one-compartment model, for which analytic solutions are available. The <code>ncmt = 1</code> part of this block indicates that it’s a one-compartment model, and the <code>depot = TRUE</code> part indicates that the dosing compartment (the gut, in this case) should be included in the model even though it’s not a “real” compartment. Additional information on how this code block is parsed is <a href="https://mrgsolve.org/docs/reference/PKMODEL.html">here</a>.</p></li>
</ul>
<p>To see all this at work, let’s run a small simulation. First, we’ll read the model specification file and compile the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example3.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Next, let’s take a look at the default parameters in this model. As you can see in the output, by default the subject is presumed to be a male who weighs 70kg:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=7):
 name value . name value
 SEX  0     | TVV  35.6 
 SEXV 0.878 | WT   70   
 TVCL 1.1   | WTCL 0.75 
 TVKA 1.35  | .    .    </code></pre>
</div>
</div>
<p>As usual, we’ll specify some dosing events and some time points at which the simulation will be evaluated. I’ll also set it up that we always simulate two subjects at whatever parameter values we feed into the simulation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb72-2">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
</div>
<p>Okay, now let’s run a simulation at the default parameter values. Here’s some data from two male subjects who both weigh 70kg:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb73-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> CP <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> DV)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-45-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The <code>~ CP + DV</code> formula in the <code>plot()</code> command is used to control which variables are plotted. I don’t want to show everything in these plots: we’re showing the drug concentration in the central compartment <code>CP</code>, and the hypothetical dependent variable <code>DV</code> obtained by adding measurement error to the <code>CP</code> value.</p>
<p>But suppose we didn’t actually want to simulate a 70kg male, and instead we want a 60kg female. To specify this, we have to update the relevant parameters in the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SEX =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WT =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span></code></pre></div>
</div>
<p>So now our model parameters look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=7):
 name value . name value
 SEX  1     | TVV  35.6 
 SEXV 0.878 | WT   60   
 TVCL 1.1   | WTCL 0.75 
 TVKA 1.35  | .    .    </code></pre>
</div>
</div>
<p>Simulating from the model at these parameter settings gives us this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb77-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> CP <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> DV)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-48-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>Before wrapping up, some quick links to some resources:</p>
<ul>
<li><p>The <a href="https://mrgsolve.org/user-guide/">mrgsolve user guide</a> is probably not the place you want to start, because it very quickly dives in deep and talks about the domain specific language used to specify models, but once you’ve wrapped your head around the basics that’s the place to look for details.</p></li>
<li><p>The <a href="https://mrgsolve.org/vignettes/">mrgsolve vignettes</a> provide a nice place to start, but one thing you need to keep in mind is that the vignettes posted at <a href="https://mrgsolve.org/vignettes/">mrgsolve.org/vignettes</a> are not identical to the vignettes that appear on the pkgdown website (i.e., <a href="https://mrgsolve.org/docs/articles/">mrgsolve.org/docs/articles</a>), so it’s worth being careful to check which one you’re looking at!</p></li>
<li><p>Speaking of which, the <a href="https://mrgsolve.org/docs/">mrgsolve pkgdown site</a> provides all the usual documentation that you’d expect of an R package in the usual format. Function reference guides, some vignettes, links to github, etc., all that is there.</p></li>
<li><p>The <a href="https://mrgsolve.org/learn.html">learn mrgsolve</a> page on the mrgsolve website has links to presentations, courses, and other things that can be helpful in getting started.</p></li>
<li><p>Finally, there’s a <a href="https://mrgsolve.org/blog/">blog</a> associated with the package that has a variety of tips, tricks, updates and news.</p></li>
</ul>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>As with so many of my posts, I find that I’ve gotten to the end and I have no idea what else to say. I don’t write a post like this one to advocate for a package or a workflow, and I definitely don’t write these things to express opinions or whatever. I write because I enjoy writing and because the act of writing deepens my own understanding of a topic. Viewed from that perspective, writing this post has served its purpose so… mission accomplished?</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In this respect R is the unchallenged queen of languages in pharmacometrics. It’s very different to data science in the tech space, where Python is the lingua franca and R is seen as a second-class citizen. I have not yet seen a single example of anyone using Python for data analysis in this world. Judging from papers I’ve read, Julia has a small presence (e.g., you can use <a href="https://turing.ml/">Turing.jl</a> for building ODE models in Julia), but that’s the only time I’ve ever seen any statistical language other than R in this space.↩︎</p></li>
<li id="fn2"><p>The acronym PK is universally used as shorthand for “pharmacokinetics”, and a PK model is one where the primary variable you’re interested in modelling is the plasma concentration over time for some drug. If you’re totally new to this space, the post I wrote on <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a> was written from a total-newbie perspective and spells out a lot the basic terminology used in PK modelling.↩︎</p></li>
<li id="fn3"><p>There are a <em>lot</em> of tools in this space: NONMEM is the oldest and most-widely used, but in addition there’s Stan/Torsten, Monolix, nlmixr, Phoenix NLME, and probably many others I don’t know about yet…↩︎</p></li>
<li id="fn4"><p>I can’t tell if the original package is still under active development or if it’s been deprecated. The <a href="https://nlmixrdevelopment.github.io/RxODE/">RxODE</a> package still appears on the nlmixr website and on GitHub, but the package is (at present?) archived on CRAN.↩︎</p></li>
<li id="fn5"><p>Specifically, it wraps the public domain Fortran library <a href="https://computing.llnl.gov/projects/odepack">ODEPACK</a>.↩︎</p></li>
<li id="fn6"><p>In this example it’s not very interesting because CP is just the ratio of CENT and V, and since V doesn’t change over time, the curves for CP and CENT look identical. That isn’t true for simulations with multiple sujects, however, since V can and does vary across individuals.↩︎</p></li>
<li id="fn7"><p>As an aside, one thing I’ve noticed in the software development world is that developers who don’t work in statistics have a tendency to get very worked up about R having all these hyper-flexible functions that can behave in wildly different ways in different contexts. While I do understand that annoyance, I also think it’s often misplaced. R is fundamentally a <em>statistical programming language</em> and the primary goal is to support analysts. It’s not trying to be Python, and it’s even less interested in being Rust. You wouldn’t think so from social media discussions – which are massively skewed towards developers – but the typical R user is someone working interactively at the console, constructing a script iteratively as they explore and work with the data set they’ve been tasked to analyse. In that context, the hyper-flexibility of a lot of R functions is designed for the convenience of the analyst, not the convenience as a developer.↩︎</p></li>
<li id="fn8"><p>Developers reading this are probably wondering where the model shared object ends up when compilation happens. By default <code>mread()</code> puts the compiled model in the R temp folder, but you can override this in a persistent way by setting the <code>"mrgsolve.soloc"</code> option, or overriding it in the call to <code>mread()</code> via the <code>soloc</code> argument. You can also suppress compilation if you want by setting <code>compile = FALSE</code>. But probably any devs reading this would likely discover that within 5 minutes of reading the documentation anyway so there’s no real need for me to mention it.↩︎</p></li>
<li id="fn9"><p>I mean… of the <em>widely-used</em> OOP systems, it’s the one I’m least comfortable with. The wild abandon with which R spawns new object oriented programming systems is… a lot to keep up with.↩︎</p></li>
<li id="fn10"><p>Why yes, this blog post is <em>also</em> an exercise in “Danielle reminds herself how S4 works and no she bloody well is not going to talk about multiple inheritance and multiple dispatch in S4 here she’s not that much of a masochist”.↩︎</p></li>
<li id="fn11"><p>As an aside, <code>param(mod)</code> returns an S4 object of class “parameter_list” which in turn has a <code>show()</code> method that provides that prettified looking table pf parameters, but from a practical perspective you might just want to coerce it to a regular list using <code>as.list(param(mod))</code>.↩︎</p></li>
<li id="fn12"><p>There is also an <code>as.ev()</code> function that allows conversion in the other direction.↩︎</p></li>
<li id="fn13"><p>More precisely, method dispatch takes place off the <code>x</code> argument which is the first argument to the <code>ev()</code> generic, but since we’re talking about pipelines here, the name isn’t as important as the position.↩︎</p></li>
<li id="fn14"><p>As a rule I don’t dislike “magic” code. I mean… it would be weird to be an R user and not appreciate its virtues. Lazy evaluation and non-standard evaluation in R are powerful tools, and are the basis of a lot of “magic” in R. They make life a lot easier for the analyst but it comes at the price of making life harder for the developer. Because of that I’ve ended up with a habit of trying to dig into the details every time I find R code that feels magical.↩︎</p></li>
<li id="fn15"><p>To be precise, <code>ev()</code> is an S4 generic with dispatch on the <code>x</code> argument. If <code>x</code> is missing, the relevant <code>ev()</code> method returns an “ev” object. However, if <code>x</code> has class “mrgmod”, the relevant method returns another “mrgmod” object. I’ll confess this makes me a little uneasy.↩︎</p></li>
<li id="fn16"><p>Oh look, that apparently-irrelevant excursion she did talking about the mrgmod object slots turns out to be relevant! It’s almost as if she’s written things before!↩︎</p></li>
<li id="fn17"><p>I’m guessing that the logic here is that, even though some code blocks use R syntax, and others aren’t interpreted as code at all, the model build process is such that eventually it all becomes C++, and a C++ compiler constructs the binary. There’s logic to it, but it does feel a bit disorienting seeing “.cpp” files that aren’t actually C++ source.↩︎</p></li>
<li id="fn18"><p>I suspect that the <code>$BLOCKNAME</code> format is actually canonical because that’s the version you see when model code is printed when calling <code>see()</code>, but I’m going to use <code>[BLOCKNAME]</code> throughout this post because I personally find it easier to read. <a href="https://dictionary.cambridge.org/dictionary/english/ymmv">YMMV</a>.↩︎</p></li>
<li id="fn19"><p>Confession: I’m not 100% certain that the “T” in “CT” stands for tissue, since I copied this line from one of the models in the mrgsolve model library, but I think it’s the right interpretation given that the central compartment amount is usually intended to refer to “amount of drug the blood, sort of” and the peripheral compartment is “amount of drug in body tissues, sort of”. The “sort of” is important though: pharamacokinetic compartments are abstractions, and are they only loosely related to the corresponding physiology.↩︎</p></li>
<li id="fn20"><p>As far as I can tell, most of these conventions are “for compatibility with NONMEM”, and I am very rapidly starting to read “for compatibility with NONMEM” with exactly the same level of jaundiced cynicism that I apply when I find base R documentation that explains that R does something absolutely unhinged “for compatibility with S”. I deeply admire the commitment to backward compatibility and/or notational consistency, but also oh sweet lord in heaven it is <strong>EXHAUSTING</strong>.↩︎</p></li>
<li id="fn21"><p>In the spirit of stating assumptions, I’ll also add this. As is typical in many (but not all) disciplines: italicised lower case denotes a scalar, bold italic lower case denotes a vector, bold upper case denotes a matrix.↩︎</p></li>
<li id="fn22"><p>I’m not going to discuss them here, but note that the <code>@block</code> option allows you to pass a complete variance-covariance matrix, and the <code>@correlation</code> option allows you to specify correlations instead of covariances on the off-diagonals. The user guide discusses these and several other options that are supported in the <code>[OMEGA]</code> block. Of particular note: there’s a section in the user guide on <code>[OMEGA]</code> shows you how to use <code>@block</code> and <code>@annotated</code> together.↩︎</p></li>
<li id="fn23"><p>The <code>[MAIN]</code> block is analogous to the NONMEM <code>$PK</code> block, and indeed <code>[PK]</code> is allowed as an alias for <code>[MAIN]</code> in mrgsolve model specification files.↩︎</p></li>
<li id="fn24"><p>For folks used to linear regression models and random effect terms that compose additively with the fixed effect, it’s worth noting that in PK models everything tends to be log-linear. For any particular PK quantity <img src="https://latex.codecogs.com/png.latex?x">, the relationship takes the form <img src="https://latex.codecogs.com/png.latex?%5Clog%20x%20=%20%5Ceta_x%20+%20%5Clog%20%5Ctheta_x">.↩︎</p></li>
<li id="fn25"><p>I am absolutely <strong>not</strong> going to enter into any discussion of the respects in which sex is not strictly a binary variable, not in this post. There is a time and a place for that conversation, and this is neither that time nor that place. I mean, we’re talking about a category of statistical models that simplify the entire human body into “a couple of leaky buckets and a tinfoil ODE system”. They are extremely <strong>useful</strong> models, per George Box’s famous aphorism, but one does not ever presume they are biologically accurate. That would be absurd.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pharmacometric Simulation with Mrgsolve},
  date = {2023-08-14},
  url = {https://blog.djnavarro.net/posts/2023-08-14_mrgsolve},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pharmacometric Simulation with
Mrgsolve.”</span> August 14, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve">https://blog.djnavarro.net/posts/2023-08-14_mrgsolve</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/</guid>
  <pubDate>Sun, 13 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/danilo-alvesd-a7OdG45prSM-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Four ways to write assertion checks in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-08_being-assertive/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Once upon a time in a land far, far away, I was a bright young thing who wrote my data analyses with the kind of self-assured confidence that only a bright young thing can have. I trusted myself to write analysis code that does exactly what I wanted it to do. After all, I was a smart lady who knows her data and knows her analysis tools. In those halycon days of yore, before I’d been badly burned by sequentially arriving data that don’t have precisely the same structure every single time the data updates, I had the naivete to believe that if something changed in unexpected ways, <em>I’d notice it</em>.</p>
<p>Sweet summer child.</p>
<p>What I have learned since then, following the well-trodden path of every embittered old data analyst whose heart has shrivelled into a dark ball of data cynicism, is that none of this is true:</p>
<ul>
<li>I don’t know the tools as well as I think I do.</li>
<li>I don’t know the data as well as I think I do.</li>
<li>When the data change unexpectedly, I don’t always notice it.</li>
</ul>
<p>Worst of all: <strong>when my assumptions fail, my code can silently do the wrong thing and never throw an error</strong>. This happens very, very easily when data structure can change over time, or when code is reused in a new context. Which… happens a lot, actually.</p>
<p>Real world data are horrible.</p>
<p>Learning my lessons the hard way has taught me the importance of writing assertion checks. The idea behind an assertion check is very simple: write some code that makes sure that your code fails loudly by throwing an error as soon as an assumption is violated.<sup>1</sup> As the saying goes, you want your analysis code to fail fast and fail loudly every time that something is not “as expected”.</p>
<p>So. Let’s talk about four different approaches to writing assertions in R.<sup>2</sup></p>
<section id="just-stopifnot-scott" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="just-stopifnot-scott">Just <code>stopifnot()</code>, Scott</h2>
<p>Here’s a simplified version of a function that I use a lot in my generative art workflows. The <code>identifier()</code> function constructs a unique identifier for an output generated from a particular system:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb1-2">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb1-3">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb1-5">}</span></code></pre></div>
</div>
<p>So let’s say I’m creating a piece from a version 1 system called “rtistry”, and using 203 as my random seed. The unique identifier for this piece would be as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>The idea here is that:</p>
<ul>
<li>The identifier should consist of exactly three parts, separated by underscores</li>
<li>The first part should be the name of the generative art system</li>
<li>The second part should specify the version of the system as a two-digit number</li>
<li>The third part should specify the RNG seed used to generate this piece as a four-digit number</li>
</ul>
<p>For most of my systems this will produce a globally unique identifier, since I try to design them so that the only input parameter to the system is the RNG seed.</p>
<p>Notice, though, that there are some unstated – and unchecked! – assumptions about the kind of input that the function will receive. It’s implicitly assumed that <code>name</code> will be a character string that does not have any underscores, periods, or white spaces, and it’s also assumed that <code>version</code> and <code>seed</code> are both positive valued integers (or at least “integerish”) with upper bounds of 99 and 9999 respectively. Weirdness happens when I break those assumptions with my input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "r tistry_1.02_0203"</code></pre>
</div>
</div>
<p>As a rule, of course, I don’t <em>deliberately</em> pass bad inputs to my functions, but if I want to be defensive about it, I should validate the inputs so that <code>identifier()</code> throws an error if I make a mistake and pass it input that violates the assumptions. The base R function <code>stopifnot()</code> is designed to solve exactly this problem:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb6-2">  </span>
<span id="cb6-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># throw error if any of the following assertions fail</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name must be a scalar</span></span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be a scalar</span></span>
<span id="cb6-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be a scalar</span></span>
<span id="cb6-8">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(version),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be a whole number</span></span>
<span id="cb6-9">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(seed),     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be a whole number</span></span>
<span id="cb6-10">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name can't have spaces, periods, or underscores </span></span>
<span id="cb6-11">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be positive</span></span>
<span id="cb6-12">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be less than 10000</span></span>
<span id="cb6-13">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be positive</span></span>
<span id="cb6-14">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be less than 100</span></span>
<span id="cb6-15">  )</span>
<span id="cb6-16">  </span>
<span id="cb6-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb6-18">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb6-19">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb6-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb6-21">}</span></code></pre></div>
</div>
<p>Using <code>stopifnot()</code> in this way causes all of the following to error and throw informative error messages:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("r tistry", 1, 203): !stringr::str_detect(name, "[[:space:]._]") is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1.02, 203): rlang::is_integerish(version) is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1, 20013): seed &lt; 10000 is not TRUE</code></pre>
</div>
</div>
<p>The error messages aren’t the prettiest, but they do the job. In each case you can look at the error message and figure out what went wrong when calling the <code>identifier()</code> function. That said, you can sort of see the limitations to <code>stopifnot()</code> by looking at my source code: because <code>stopifnot()</code> throws pretty generic error messages that you can’t customise, my first instinct when writing the function was to group <em>all</em> my assertions into a single <code>stopifnot()</code> call, and then – because there isn’t a lot of structure to my assertion code – I’ve added comments explaining what each assertion does. That’s… fine. But not ideal.</p>
<p>As it turns out, there <em>are</em> ways to provide more informative error messages with <code>stopifnot()</code>. You can write a <code>stopifnot()</code> assertion as a name-value pair:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be scalar"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>If this assertion is violated, the error message thrown by the <code>stopifnot()</code> function corresponds to the name of the assertion, as illustrated below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> </span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be scalar"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `version` must be scalar</code></pre>
</div>
</div>
<p>It’s kind of clunky but it works.</p>
<p>Actually, I have a confession to make. I actually didn’t know this trick until I’d already posted the original version of this post to the internet, so I have Jim Gardner to thank for kindly called my attention to it.</p>
<p><strong>Summary</strong>: <code>stopifnot()</code> is suprisingly effective. It’s very general, and works for any expression that yields <code>TRUE</code> or <code>FALSE</code>. There are no dependencies since it’s a base R function. It does have some downsides: dealing with error messages is a bit clunky, and the code isn’t always the prettiest, but nevertheless it does the job that needs doing.</p>
</section>
<section id="just-assert_that-kat" class="level2">
<h2 class="anchored" data-anchor-id="just-assert_that-kat">Just <code>assert_that()</code>, Kat</h2>
<p>The <a href="https://github.com/hadley/assertthat">assertthat</a> package is designed to provide a drop-in replacement for the <code>stopifnot()</code> function, one that allows you to compose your own error messages when an assertion fails. It does have a variety of other convenience functions, but to be honest the main advantage over <code>stopifnot()</code> is the superior control over the error message. In practice, I find that this functionality allows me to write assertion code that is (a) easier to read, and (b) produces better error messages when an assertion fails.</p>
<p>To illustrate, here’s the code I end up with when I revisit my generative art <code>identifier()</code> function using assertthat:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertthat)</span>
<span id="cb16-2"></span>
<span id="cb16-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb16-4">  </span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`name`, `version`, and `seed` must all have length 1"</span></span>
<span id="cb16-10">  )</span>
<span id="cb16-11"></span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(   </span>
<span id="cb16-13">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>),</span>
<span id="cb16-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`name` must not contain white space, periods, or underscores"</span></span>
<span id="cb16-15">  )</span>
<span id="cb16-16"></span>
<span id="cb16-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-18">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(version),</span>
<span id="cb16-19">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb16-20">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be a whole number between 1 and 99"</span></span>
<span id="cb16-22">  )</span>
<span id="cb16-23">   </span>
<span id="cb16-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-25">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(seed),</span>
<span id="cb16-26">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb16-27">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,</span>
<span id="cb16-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`seed` must be a whole number between 1 and 9999"</span>    </span>
<span id="cb16-29">  )</span>
<span id="cb16-30">  </span>
<span id="cb16-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb16-32">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb16-33">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb16-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb16-35">}</span></code></pre></div>
</div>
<p>Like <code>stopifnot()</code>, the <code>assert_that()</code> function allows you to construct arbitrary assertions, which I find useful. Additionally, the <code>assert_that()</code> function has some nice properties when compared to <code>stopifnot()</code>. Because it takes a <code>msg</code> argument that allows you to specify the error message, it gently encourages you to group together all the assertions that are of the same kind, and then write an informative message tailored to that subset of the assertion checks. This produces readable code because the error message is right there next to the assertions themselves, and the assertions end up being more organised than when I used <code>stopifnot()</code> earlier.</p>
<p>In any case, let’s have a look. First, let’s check that this works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>Second, let’s check that all of these fail and throw readable error messages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `name` must not contain white space, periods, or underscores</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `version` must be a whole number between 1 and 99</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `seed` must be a whole number between 1 and 9999</code></pre>
</div>
</div>
<p>I find myself preferring this as a way of generating error messages when input arguments to a function don’t receive appropriate input. Because I know what I want the function to do, I’m able to write concise but informative error messages that are appropriate to the specific set of assertions that I’ve included within any particular <code>assert_that()</code> call.</p>
<p><strong>Summary</strong>: The assertthat package has a pretty specific aim: to provide an <code>assert_that()</code> function works as a drop-in replacement for <code>stopifnot()</code> that allows custom error messages. Given that limited goal, it works nicely.</p>
</section>
<section id="just-assert_-it-kit" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="just-assert_-it-kit">Just <code>assert_*()</code> it, Kit</h2>
<p>The <a href="https://bitbucket.org/richierocks/assertive/">assertive</a> package provides a large collection of <code>assert_*()</code> functions that are each tailored to a specific type of assertion, and designed to produce error messages that are tailored to that specific case. Here’s an example where I apply this approach to checking the inputs to the <code>identifier()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertive)</span>
<span id="cb25-2"></span>
<span id="cb25-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb25-4"></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(version)</span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(name)</span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(seed)</span>
<span id="cb25-8">  </span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_integer</span>(version)</span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_integer</span>(seed)</span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_positive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version))</span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(version, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb25-14">  </span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_not_matching_regex</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>)</span>
<span id="cb25-16"></span>
<span id="cb25-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb25-18">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb25-19">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb25-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb25-21">}</span></code></pre></div>
</div>
<p>I’d probably argue that this is the most readable version of the code yet. The <code>assert_*()</code> functions have such transparently informative names that there’s no need at all for comments. However, there are some downsides to this approach, which become a little more apparent when we look at the error messages that it throws when I pass bad inputs to the <code>identifier()</code> function:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("r tistry", 1L, 203L): is_not_matching_regex : name does not match "[[:space:]._]"
There was 1 failure:
  Position    Value                   Cause
1        1 r tistry matches '[[:space:]._]'</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1.02, 203L): is_integer : version is not of class 'integer'; it has class 'numeric'.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1L, 20013L): is_less_than : seed are not all less than 10000.
There was 1 failure:
  Position Value                          Cause
1        1 20013 greater than or equal to 10000</code></pre>
</div>
</div>
<p>Because I don’t have custom error message code in my assertions, the errors that get returned to the user are a little bit opaque. They’re more informative than the <code>stopifnot()</code> versions, and because each assertion throws its own error message tailored to that function, the results are rather better suited to the context. Even so, they’re still quite long and there’s some cognitive effort required by the user to figure out what happened.</p>
<p>There’s a second issue here. Notice that when I wanted to pass a good input for <code>seed</code> or <code>version</code> in this version of the function, I used explicitly integer-classed values (e.g., <code>203L</code> not <code>203</code>). There’s a reason I did that. The <code>assert_is_integer()</code> function uses <code>is.integer()</code> test for integer status, which returns <code>TRUE</code> only when passed an actual integer. It returns <code>FALSE</code> when passed an “integerish” double:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>Because my assertion is a check for integer status not “integerish” status, this version of the <code>identifier()</code> function is more strict about type checking than I really want it to be, and this fails:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1, 203): is_integer : version is not of class 'integer'; it has class 'numeric'.</code></pre>
</div>
</div>
<p>Now, to be fair, there are of course many situations where you really do want to be strict about type checking integers: the integer representation of <code>203L</code> is a different underlying object to the floating point representation of <code>203</code>, and while R is usually pretty chill about this, it’s important to keep in mind that doubles and integers are fundamentally different data types. That being said, it’s vanishingly rare for this to actually matter in my generative art process, and I’d prefer to let this one slide.</p>
<p>This kind of thing is where you can run into some difficulties using the <code>assert_*()</code> functions. If there isn’t a specific assertion function tailored for your use case (as occurs with “integerish” check in <code>identifier()</code>) you’re left with the dilemma of either choosing an assertion that isn’t quite right, or else falling back on a general-purpose assertion like <code>assert_all_are_true()</code>. For example, this works…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertive)</span>
<span id="cb38-2"></span>
<span id="cb38-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb38-4"></span>
<span id="cb38-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(version)</span>
<span id="cb38-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(name)</span>
<span id="cb38-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(seed)</span>
<span id="cb38-8">  </span>
<span id="cb38-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_true</span>(rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version)))</span>
<span id="cb38-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_positive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version))</span>
<span id="cb38-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb38-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(version, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb38-13">  </span>
<span id="cb38-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_not_matching_regex</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>)</span>
<span id="cb38-15"></span>
<span id="cb38-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb38-17">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb38-18">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb38-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb38-20">}</span>
<span id="cb38-21"></span>
<span id="cb38-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>…but it’s not quite as elegant as you might hope. Nevertheless, I’m not being critical here. It’s impossible to write a package like assertive in a way that covers every use case, and it’s pretty impressive that it has the breadth that it does.</p>
<p><strong>Summary</strong>: Because it provides a huge number of well-named assertion functions, the assertive package tends to produce very readable code, and because each of those functions produces errors that are tailored to that check, the error messages tend to be useful too. It does get a little awkward when there isn’t an assertion for your use case, but usually there’s a way to work around that.</p>
</section>
<section id="just-assertr-carr" class="level2">
<h2 class="anchored" data-anchor-id="just-assertr-carr">Just assertr, Carr</h2>
<p>The <a href="https://docs.ropensci.org/assertr/">assertr</a> package solves a different problem to the other three methods discussed here. The other three approaches are general-purpose tools and – with various strengths and weaknesses – they’re designed to be used when checking an <em>arbitrary</em> input. The assertr package is more specialised: it focuses on checking a <em>data</em> input, specifically a tabular data object like a data frame or a tibble. Because it’s focused on that particular – and extremely important – special case, it’s able to provide a more powerful way of validating the content of a data frame.</p>
<p>In that sense, assertr is complementary to the other three approaches. For example, you could use assertr to check the <code>data</code> input to a function that takes a data frame as the primary argument, but then use (say) <code>assert_that()</code> to test the others.</p>
<p>To get started, I’ll load the packages I’m going to use in this section:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb40-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertr)</span></code></pre></div>
</div>
<p>The assertr package provides three primary verbs, <code>verify()</code>, <code>assert()</code>, and <code>insist()</code>. They all take a data set as the first argument and (by default) returns the original data set unaltered if the checks pass, which makes it include them as part of a data pipeline. There’s also two row-wise variants <code>assert_rows()</code> and <code>insist_rows()</code>. For the purposes of this post I’ll limit myself to talking about the simplest cases, <code>verify()</code> and <code>assert()</code>.</p>
<p>Let’s start with <code>verify()</code>. The <code>verify()</code> function expects to receive an expression as the first non-data argument amd yields a logical value, which is then evaluated in the data context. If the expression evaluates to <code>FALSE</code>, an error is thrown.</p>
<p>Here’s a simple example using <code>verify()</code>. My data set comes from the <a href="https://en.wikipedia.org/wiki/List_of_Archibald_Prize_winners">List of Archibald Prize Winners</a> wikipedia page. The Archibald Prize is a one of the most prestigious art prizes in Australia, awarded for painted portraits, and has been awarded (almost!) annually since 1921. My data set looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">archibald <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"archibald.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb41-2">archibald</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 166 × 6
   prize           year  artist            title         subject n_finalists
   &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt;         &lt;dbl&gt;
 1 Archibald Prize 1921  William McInnes   Desbrowe Ann… Harold…          45
 2 Archibald Prize 1922  William McInnes   Professor Ha… Willia…          53
 3 Archibald Prize 1923  William McInnes   Portrait of … Violet…          50
 4 Archibald Prize 1924  William McInnes   Miss Collins  Gladys…          40
 5 Archibald Prize 1925  John Longstaff    Maurice Mosc… Mauric…          74
 6 Archibald Prize 1926  William McInnes   Silk and Lac… Esther…          58
 7 Archibald Prize 1927  George W. Lambert Mrs Annie Mu… Annie …          56
 8 Archibald Prize 1928  John Longstaff    Dr Alexander… Alexan…          66
 9 Archibald Prize 1929  John Longstaff    The Hon W A … Willia…          75
10 Archibald Prize 1930  William McInnes   Drum-Major H… Harry …          67
# ℹ 156 more rows</code></pre>
</div>
</div>
<p>To be precise, there are actually three different prizes included in the data set. There’s the original Archibald Prize (the famous one), and two more recent additions that are awarded using the same pool of entrants: the People’s Choice Award (which is what you’d think), and the Packing Room Prize (awarded by the staff who install the portraits in the gallery).</p>
<p>For my first analysis then, I want to do a simple tabulation: count the number of times any given artist has won a particular prize, and sort the results in descending count order. So the analysis part of my data pipeline would look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
</div>
<p>However, I might want to <code>verify()</code> a few things first. I’d like to check that <code>prize</code> and <code>artist</code> both exist as columns in the data, and both contain character data. I can use the base R function <code>exists()</code> to check that the variables exist within the data context, and <code>is.character()</code> to check the variable type:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>In this case, all the <code>verify()</code> checks pass, so no errors are thrown and the analysis proceeds in the usual way. But suppose that the <code>artist</code> variable was actually supposed to be called <code>painter</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"painter"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"painter"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(painter, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>verification [exists("painter")] failed! (1 failure)

    verb redux_fn         predicate column index value
1 verify       NA exists("painter")     NA     1    NA</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error: assertr stopped execution</code></pre>
</div>
</div>
<p>There is no <code>painter</code> variable in the data set, so the assertion checks fail, and an error message is thrown. The form of the error message is rather elaborate though. There is a reason why assertr defaults to this strange-looking format: often there are multiple errors that appear in an assertion check, and by default assertr will group them into a table summarising all the issues.</p>
<p>There’s something a little repetitive about the validation code I wrote above. If my analysis pipeline involved many variables, it would be a bit obnoxious to write a separate <code>verify()</code> line to check that they all exist. For the column name checks, assertr provides a convenience function <code>has_all_names()</code> that you can use specifically for this purpose:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>For the type checking, however, there’s no equivalent convenience function and if you want to group multiple <code>verify()</code> checks what you want to do is use the <code>assert()</code> function. The first non-data argument to <code>assert()</code> specifies a predicate function that is applied to a set of columns.<sup>4</sup> If the predicate function returns <code>FALSE</code>, the <code>assert()</code> function errors.</p>
<p>Rewriting the <code>verify()</code> code from our “successful” example as <code>assert()</code> checks gives us this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize, artist) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>One thing I really like about the design of assertr is that pipe-friendly assertion checks make it possible to add your assertion checks at the appropriate point in the analysis pipeline. For instance, let’s suppose I want to look at the number of finalists in the Archibald Prize each year. The raw data only records <code>n_finalists</code> for the Archibald Prize, not the Packing Room Prize or the People’s Choice Award. Rows in the data corresponding to those latter prizes will always have <code>NA</code> values for <code>n_finalists</code>, but that isn’t a problem for my proposed analysis. The <em>only</em> missingness of possible concern to me is for the Archibald Prize proper. So I can write my assertion checks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_finalists"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.numeric, n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archibald Prize"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(\(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x), n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb53-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n_finalists),</span>
<span id="cb53-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(n_finalists),</span>
<span id="cb53-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_finlists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(n_finalists)</span>
<span id="cb53-11">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Column 'n_finalists' violates assertion 'function(x) !is.na(x)' 2 times
    verb redux_fn             predicate      column index value
1 assert       NA function(x) !is.na(x) n_finalists    13    NA
2 assert       NA function(x) !is.na(x) n_finalists    69    NA</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error: assertr stopped execution</code></pre>
</div>
</div>
<p>Okay, so there is in fact a case where missingness is a problem in two rows of the data set, <em>for the explicit subset of the data I care about</em>. As it happens though, I simply don’t care when it’s only those two years, so for the purposes of this example I’ll filter those rows out before they even hit the assertion check, and unsurprisingly this runs without erroring:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb56-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_finalists"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.numeric, n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archibald Prize"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(n_finalists)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(\(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x), n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb56-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n_finalists),</span>
<span id="cb56-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(n_finalists),</span>
<span id="cb56-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_finlists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(n_finalists)</span>
<span id="cb56-11">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  min_finalists median_finalists max_finlists
          &lt;dbl&gt;            &lt;dbl&gt;        &lt;dbl&gt;
1            15               52          197</code></pre>
</div>
</div>
<p>In addition to <code>verify()</code> and <code>assert()</code>, there are three other assertion functions in assertr. I’m not going to dive into those for the purposes of this post – that’s what the package documentation is there for! – but the TL;DR is as follows:</p>
<ul>
<li><code>insist()</code> works like <code>assert()</code> but it takes a “predicate generator” function instead of a “predicate” function, which makes it possible to specify an assertion check for a tidy selection of columns and have the predicate generator handle each column according to its own logic</li>
<li><code>assert_rows()</code> is a row-wise version of <code>assert()</code></li>
<li><code>insist_rows()</code> is a row-wise version of <code>insist()</code></li>
</ul>
<p><strong>Summary</strong>: My overall feeling is that assertr is probably the most powerful tool for assertion checks applied to tabular data. It lacks the generality of the other tools, true, but the special case that it works for is a really important one for data analysts. Data objects tend to have their own special issues, and pretty much every data analysis takes at least one data frame as an input, so it’s really convenient to have a specialised tool for that scenario.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The idea is very similar to writing unit checks for software development. The difference is that unit tests are run at build time, whereas assertions apply at run time.↩︎</p></li>
<li id="fn2"><p>It should be noted that these aren’t the only packages out there to support assertions in R. There are at least three others that I’m aware of but haven’t yet tried, and probably many others that I don’t know about. For what it’s worth, these are the other three I know of: the <a href="https://github.com/smbache/ensurer">ensurer</a>, <a href="https://github.com/mllg/checkmate">checkmate</a>, and <a href="https://github.com/gastonstat/tester">tester</a> packages can all be used for this purpose, and I’m sure I could come up with terrible rhymes for those too, but there’s a limit to how much effort I want to put into this post.↩︎</p></li>
<li id="fn3"><p>In general, assertr doesn’t supply lots of convenience functions, but <code>has_all_names()</code> is an important special case because it’s used to check for the <em>existence</em> of columns, and that requires a special workflow. For type checking assertions, I can group together multiple <code>verify()</code> checks into a single <code>assert()</code> check that takes a tidy selection of columns. But for that to work the columns actually have to exist, so you can’t use <code>assert()</code> for existence checks! Hence (I presume) the inclusion of the <code>has_all_names()</code> convenience function.↩︎</p></li>
<li id="fn4"><p>Column names are unquoted and are passed through the dots <code>...</code>. The documentation notes that the dots are passed to <code>dplyr::select()</code>, and accordingly the <code>assert()</code> function supports tidy selection.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Four Ways to Write Assertion Checks in {R}},
  date = {2023-08-08},
  url = {https://blog.djnavarro.net/posts/2023-08-08_being-assertive},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Four Ways to Write Assertion Checks in
R.”</span> August 8, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-08_being-assertive">https://blog.djnavarro.net/posts/2023-08-08_being-assertive</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-08_being-assertive/</guid>
  <pubDate>Mon, 07 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-08_being-assertive/50_ways.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Getting started with Torsten</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-07-15_torsten/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>In recent months I’ve been gradually teaching myself pharmacometrics, and <a href="https://blog.djnavarro.net/category/pharmacometrics">writing blog posts as I go</a>. I started out writing about relatively simple methods for <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a>, moved on to talking about <a href="../../posts/2023-05-16_stan-ode/">compartmental analysis with Stan</a>, and then to <a href="../../posts/2023-06-10_pop-pk-models/">population pharmacokinetic models in Stan</a>. Now it feels like time for me to move on to looking at <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten</a>.</p>
<p>What’s Torsten, you ask?</p>
<p>Torsten is essentially a forked copy of <a href="https://mc-stan.org/">Stan</a> that has a collection of functions added that can be useful in pharmacometric analyses. As described by <a href="https://doi.org/10.1002/psp4.12926">Elmokadem et al (2023)</a>:</p>
<blockquote class="blockquote">
<p>Torsten is a library of Stan functions built to facilitate analysis of pharmacometric data … [It] contains functions to build specific linear compartmental models as one and two-compartment models with first-order absorption into the central compartment, general linear models that can be expressed as a system of linear ordinary differential equations (ODEs), general compartmental models that can be expressed as a system of ODEs.</p>
</blockquote>
<p>The name “Torsten” refers to Torsten Teorell, described as the <a href="https://doi.org/10.3109/03009739509178895">father of pharmacokinetics</a>. The preview image of this post is taken from the figures in a 1937 paper by Teorell:</p>
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/torsten-figs.png" class="img-fluid"></p>
<p>I do like knowing where the names of things come from, and the history to different disciplines. But to be fair that’s not the purpose of this post, so let’s set the history to one side and take a look at the software. The website is quite clear that Torsten is currently (as of version 0.89rc) a prototype:</p>
<blockquote class="blockquote">
<p>WARNING: The current version of Torsten is a prototype. It is being released for review and comment, and to support limited research applications. It has not been rigorously tested and should not be used for critical applications without further testing or cross-checking by comparison with other methods. We encourage interested users to try Torsten out and are happy to assist. Please report issues, bugs, and feature requests on our GitHub page.</p>
</blockquote>
<p>My goals in this post are modest:</p>
<ul>
<li>Install Torsten and make sure it’s working</li>
<li>Understand the data format expected by the Torsten-specific solvers</li>
<li>Work my way through the model file for simple two-compartment analysis</li>
<li>Work out what’s going on regarding analytic solutions in Torsten</li>
</ul>
<p>As usual, the notes are mostly intended for the benefit of future-me, who absolutely will have forgotten all this in a week from now. But it’s possible that other people may find them helpful too I suppose. Anyway, here goes…</p>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>Installing Torsten starts by cloning the <a href="https://github.com/metrumresearchgroup/Torsten">GitHub repository</a>. Just recently I’ve gotten into the habit of using the <a href="https://cli.github.com/">GitHub command line tool</a> for tasks like this, so the command I used was this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ~/GitHub</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> repo clone metrumresearchgroup/Torsten</span></code></pre></div>
<p>But really, anything that clones a repository will work.</p>
<p>Once you have a copy of the repo, you can build Torsten in any number of ways. Given that I’m usually working from R, the most convenient way for me to do this is with the cmdstanr package. If you don’t have the cmdstanr package, you need to install it first. It’s not on CRAN but you can install it by adding the Stan repository to the <code>repos</code> path when calling <code>remotes::install_cran()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_cran</span>(</span>
<span id="cb2-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkgs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmdstanr"</span>, </span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://mc-stan.org/r-packages/"</span>, </span>
<span id="cb2-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repos"</span>)</span>
<span id="cb2-6">    )</span>
<span id="cb2-7">)</span></code></pre></div>
</div>
<p>Next, you need to make sure that cmdstanr uses the Torsten version of Stan, and not any other version of Stan that you might have installed on your system. This is important because Torsten supplies various functions that we’ll need, and especially important in my case because I also have a “vanilla” copy of Stan installed elsewhere on my laptop. Here’s how I do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">torsten_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/GitHub/Torsten"</span></span>
<span id="cb3-2">cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_cmdstan_path</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(torsten_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmdstan"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>CmdStan path set to: /home/danielle/GitHub/Torsten/cmdstan</code></pre>
</div>
</div>
<p>In a moment, I’m going to try to compile a Stan/Torsten model (and indeed compile Torsten itself), so it’s important to make sure the C++ toolchain is set up properly. If you already have C++ compilers set up on your machine (which I do) then you probably don’t need to do anything special to make sure that everything compiles properly, but just to be safe we’ll check:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_cmdstan_toolchain</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The C++ toolchain required for CmdStan is setup properly!</code></pre>
</div>
</div>
<p>Excellent. Now comes the acid test: let’s see if we can use Torsten to build and sample from a Stan model that specifically requires Torsten functions. I’m following the <a href="https://metrumresearchgroup.github.io/Torsten/installation/#testing">instructions on the installation page</a> here, more or less. But I’m going to walk through the process a little more slowly than those instructions do.</p>
<p>The first step here is to compile the Stan model. The very first time you do this, it can take a moderately long time because two things are happening:</p>
<ul>
<li>First, the compiler need to compile the modified copy of Stan that Torsten ships with. That takes a while, but fortunately it only has to be done once.</li>
<li>Second, the compiler needs to compile the “pk2cpt” model itself. This is fairly fast. This compilation step only happens when the model binary is out of date.</li>
</ul>
<p>Fortunately for me I’ve already done this step once before and I have both binaries compiled already so it all happens instantaneously. In any case, here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">model_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(torsten_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example-models"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt"</span>)</span>
<span id="cb7-2">model_src <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.stan"</span>)</span>
<span id="cb7-3">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdstan_model</span>(model_src)</span></code></pre></div>
</div>
<p>The key thing to note here is that the “pk2cpt.stan” source code relies on Torsten-specific functions that don’t exist in vanilla Stan. It won’t work if you’re not using the Torsten version of Stan. The mere fact that it compiles is itself telling us that it’s all configured correctly.</p>
<p>So now we fit the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">model_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb8-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.data.R"</span>),</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">init =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.init.R"</span>),</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>,</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parallel_chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb8-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_messages =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 chains, at most 2 in parallel...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 7.5 seconds.
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 finished in 7.5 seconds.
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 7.1 seconds.
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 7.7 seconds.

All 4 chains finished successfully.
Mean chain execution time: 7.5 seconds.
Total execution time: 15.4 seconds.</code></pre>
</div>
</div>
<p>When doing this interactively, you should set <code>show_messages = TRUE</code> so that you can see the “informational messages”. As I’m coming to learn, it’s grossly typical of ODE models that you get a few warning messages during the early stages of warmup. But Stan messages tend to be quite good, and in this case they’re quite helpful in reassuring us that there’s not a problem in this instance (they occur early while the MCMC sampler is in a very weird part of the space and then disappear). I’ve suppressed them here because they make the quarto blog output messier than it needs to be. All good.</p>
<p>To draw a pretty picture showing the posterior distribution of the clearance rate parameter for this model (CL), we can do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_cran("bayesplot")</span></span>
<span id="cb10-2">bayesplot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mcmc_dens_overlay</span>(model_fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CL"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/index_files/figure-html/prettiness-pk2cpt-model-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>That looks right. Torsten is configured correctly, the model compiles, the sampler works, and the posterior distributions plotted here mirror the ones that are secretly tucked away in an output file here:</p>
<pre><code>[torsten-directory]/example-models/pk2cpt/deliv/figure/density.pdf</code></pre>
<p>My first goal is accomplished. We are good to go!</p>
</section>
<section id="the-data-file" class="level2">
<h2 class="anchored" data-anchor-id="the-data-file">The data file</h2>
<p>Okay, so now that I’ve succeeded in doing <em>something</em> with Torsten, it would be nice to have a better sense of what precisely I’ve done. Obviously<sup>1</sup> I’ve run a Stan model of some kind on some data set, but the Torsten documentation doesn’t really go into a lot of detail here.</p>
<p>I’ll start by taking a look at the data. I’ve cached a copy of the data file along with this post, located at <code>./example/pk2cpt_data.R</code> relative to this quarto document. The file defines the variables needed by Stan as R vectors, but to make my life a little easier I’ll organise them into a tibble that resembles a NONMEM-style <a href="https://metrumresearchgroup.github.io/Torsten/function/events/">event schedule</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./example/pk2cpt_data.R"</span>)</span>
<span id="cb12-2">pk2cpt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> cmt,</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">evid =</span> evid,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> addl,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ss =</span> ss,</span>
<span id="cb12-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> amt, </span>
<span id="cb12-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time,</span>
<span id="cb12-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rate =</span> rate,</span>
<span id="cb12-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> ii,</span>
<span id="cb12-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dv =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb12-12">)</span>
<span id="cb12-13">pk2cpt_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dv[iObs] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cObs</span>
<span id="cb12-14">pk2cpt_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 54 × 9
     cmt  evid  addl    ss   amt  time  rate    ii    dv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     1     1    14     0 80000 0         0    12   NA 
 2     2     0     0     0     0 0.083     0     0  359.
 3     2     0     0     0     0 0.167     0     0  663.
 4     2     0     0     0     0 0.25      0     0 1106.
 5     2     0     0     0     0 0.5       0     0 1185.
 6     2     0     0     0     0 0.75      0     0 1802.
 7     2     0     0     0     0 1         0     0 2296.
 8     2     0     0     0     0 1.5       0     0 2008.
 9     2     0     0     0     0 2         0     0 2001.
10     2     0     0     0     0 3         0     0 1115.
# ℹ 44 more rows</code></pre>
</div>
</div>
<p>I am firmly of the opinion that these aren’t good variable names, but they are completely standard in the field so I’m just going to have to memorise them. To that end, and despite the fact that I have written a version of this about a dozen times already, here’s what each of those variables refers to:</p>
<ul>
<li><code>cmt</code>: compartment number to which the row refers</li>
<li><code>evid</code>: event id (0=observation, 1=dose, 2=other)</li>
<li><code>addl</code>: number of additional identical doses given</li>
<li><code>ss</code>: is it steady-state dosing? (0=false, 1=true)</li>
<li><code>amt</code>: dose amount administered at this time</li>
<li><code>time</code>: time of observation/administration</li>
<li><code>rate</code>: rate of drug infusion (=0 for bolus administration)</li>
<li><code>ii</code>: interdose interval: time between additional doses</li>
<li><code>dv</code>: the dependent variable (observed concentration)</li>
</ul>
<p>The key point here is that (unlike in my previous post where I used a slightly different data structure in my bespoke Stan model), Torsten functions expect input variables that look very similar to those used in NONMEM. Fair enough.</p>
<p>Now that I have a sense of the data structure, let’s plot it to see what the observed pharmacokinetic function looks like. In the plot below, the dotted vertical lines mark the moments at which additional doses were administered. The circular markers connected by solid lines represent the observed drug concentrations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">pk2cpt_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(evid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-3">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, dv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-4">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(</span>
<span id="cb14-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb14-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey50"</span>,</span>
<span id="cb14-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span></span>
<span id="cb14-8">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-9">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-10">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-11">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-12">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-13">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/index_files/figure-html/pk2cpt-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The solid lines connecting the dots are a bit misleading. For the first, second, and last doses, measurements are taken regularly enough that you can see the rise and fall of drug concentration associated with each dose. For all other doses, however, there’s only a single measurement taken immediately before the dose is administered, with the result that it looks like a fairly flat function through the middle of the data. This makes total sense from an experimental design point of view, of course, it’s just important to remember that there’s a good reason why the observed data has this slightly odd shape.</p>
<p>Objective #2 accomplished. Time to move to the next one.</p>
</section>
<section id="the-model-file" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-model-file">The model file</h2>
<p>Let’s take a look at the source code for the Torsten/Stan model that I fit in the last section. For the sake of my sanity I’m not going to use the actual .stan file that Torsten distributes. In the original version there’s no explanation of what the parameters mean or what the data variables are.</p>
<p>I’m about 99% certain that the reason for this is that among pharmacometricians it is “understood” that everyone already knows the notational specifications used in <a href="https://en.wikipedia.org/wiki/NONMEM">NONMEM</a>, and consequently nobody bothers to say what those terms mean. To be honest I find it a little frustrating. If you want new users to consider Torsten as a viable modelling tool for pharmacometrics, I think it’s a bad idea to make it a <em>prerequisite</em> that new users already know NONMEM. But as I am Queen only of this blog and not of statistics generally, and my guess is that the primary target audience for Torsten are pharmacometricians who have already used NONMEM for many years, I’ll restrict myself to mild grumbling and simply fix the comments so that the “hidden curriculum” aspect to all this is no longer quite so hidden. Nevertheless, given that the vast majority of my readership belong to the 99.99% of statisticians and data scientists who aren’t professional pharamacometricians,<sup>2</sup> I’ve added a lot more annotation to my version of the file:</p>
<div class="cell column-body-outset" data-file="example/pk2cpt.stan" data-output.var="pk2cpt">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./example/pk2cpt.stan</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Two compartment model using Torsten analytical solver </span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span>{</span>
<span id="cb15-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; nt;                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of events</span></span>
<span id="cb15-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; nObs;              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of observations</span></span>
<span id="cb15-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nObs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; iObs;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// indices of observation events</span></span>
<span id="cb15-7">  </span>
<span id="cb15-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// NONMEM data</span></span>
<span id="cb15-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; cmt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compartment number</span></span>
<span id="cb15-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> evid;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// event id (0=observation, 1=dose, 2=other)</span></span>
<span id="cb15-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> addl;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of additional identical doses given</span></span>
<span id="cb15-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ss;             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// is it steady-state dosing? (0=false, 1=true)</span></span>
<span id="cb15-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> amt;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// dose amount administered at this time</span></span>
<span id="cb15-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> time;          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// time of observation/administration </span></span>
<span id="cb15-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> rate;          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// rate of drug infusion (0 for bolus administration)</span></span>
<span id="cb15-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> ii;            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// interdose interval: time between additional doses </span></span>
<span id="cb15-17">  </span>
<span id="cb15-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nObs] cObs;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// observed concentration (the dv)</span></span>
<span id="cb15-19">}</span>
<span id="cb15-20"></span>
<span id="cb15-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed data</span>{</span>
<span id="cb15-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[nObs] logCObs = log(cObs);</span>
<span id="cb15-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nTheta = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of ODE parameters describing the pharmacokinetic function</span></span>
<span id="cb15-24">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nCmt = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of compartments in model (1=gut, 2=central, 3=peripheral)</span></span>
<span id="cb15-25">}</span>
<span id="cb15-26"></span>
<span id="cb15-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span>{</span>
<span id="cb15-28">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; CL;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance rate from central compartment</span></span>
<span id="cb15-29">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; Q;     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// intercompartmental clearance rate</span></span>
<span id="cb15-30">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; V1;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume of distribution, central compartment</span></span>
<span id="cb15-31">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; V2;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume of distribution, peripheral compartment</span></span>
<span id="cb15-32">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; ka;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate constant from gut to central </span></span>
<span id="cb15-33">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; sigma; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// standard deviation of measurement error on log-scale</span></span>
<span id="cb15-34">}</span>
<span id="cb15-35"></span>
<span id="cb15-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed parameters</span>{</span>
<span id="cb15-37">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nTheta] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> theta;        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// parameters of the pharmacokinetic function</span></span>
<span id="cb15-38">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">matrix</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nCmt, nt] x;   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// drug amounts in each compartment over time</span></span>
<span id="cb15-39"></span>
<span id="cb15-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// predicted drug concentrations in the central compartment</span></span>
<span id="cb15-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">row_vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nt] cHat;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// row vector, one element per event</span></span>
<span id="cb15-42">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nObs] cHatObs; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// column vector, one element per *observation*</span></span>
<span id="cb15-43"></span>
<span id="cb15-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bundle pharmacokinetic parameters into a vector</span></span>
<span id="cb15-45">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = CL;</span>
<span id="cb15-46">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] = Q;</span>
<span id="cb15-47">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] = V1;</span>
<span id="cb15-48">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] = V2;</span>
<span id="cb15-49">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] = ka;</span>
<span id="cb15-50"></span>
<span id="cb15-51">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute the pharmacokinetic function (drug amounts in all compartments)</span></span>
<span id="cb15-52">  x = pmx_solve_twocpt(time, amt, rate, ii, evid, cmt, addl, ss, theta);</span>
<span id="cb15-53"></span>
<span id="cb15-54">  cHat = x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :] ./ V1;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute drug concentrations in central compartment</span></span>
<span id="cb15-55">  cHatObs = cHat'[iObs]; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// transform to column vector &amp; keep relevant cells only</span></span>
<span id="cb15-56">}</span>
<span id="cb15-57"></span>
<span id="cb15-58"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span>{</span>
<span id="cb15-59">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// informative prior</span></span>
<span id="cb15-60">  CL ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>);</span>
<span id="cb15-61">  Q ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>);</span>
<span id="cb15-62">  V1 ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>);</span>
<span id="cb15-63">  V2 ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>);</span>
<span id="cb15-64">  ka ~ lognormal(log(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb15-65">  sigma ~ cauchy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb15-66"></span>
<span id="cb15-67">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// measurement errors are log-normally distributed</span></span>
<span id="cb15-68">  logCObs ~ normal(log(cHatObs), sigma);</span>
<span id="cb15-69">}</span>
<span id="cb15-70"></span>
<span id="cb15-71"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span>{</span>
<span id="cb15-72">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nObs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> cObsPred; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// simulated observations</span></span>
<span id="cb15-73">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:nObs) {</span>
<span id="cb15-74">    cObsPred[i] = exp(normal_rng(log(cHatObs[i]), sigma));</span>
<span id="cb15-75">  }</span>
<span id="cb15-76">}</span></code></pre></div>
</div>
</div>
<p>Even with the additional commenting, it’s still a little impenetrable unless you’re a pharmacometric insider, because the pharmacokinetic model is not represented anywhere in this Stan code. It’s simply understood that this is a two-compartment model by virtue of the fact that the <code>pmx_solve_twocpt()</code> function is called, and all the details of what that <em>means</em> have been rendered invisible in the process.</p>
<p>That’s not wrong from the Torsten perspective – and probably necessary – but at the same time it makes the code difficult to follow for anyone who isn’t a pharmacometrician. So let’s make it a bit more explicit, yes? What precisely is the ODE system solved by the <code>pmx_solve_twocpt()</code> function? Fortunately, the actual ODEs are described by <a href="https://doi.org/10.1002/psp4.12812">Margossian et al (2022)</a> and are in fact the same ones I used in a previous post.</p>
<p>I’ll reproduce the ODEs here in exactly the same form as they are presented by Margossian et al:<sup>3</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bgut%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20-k_a%20u_%7B%5Cmbox%7Bgut%7D%7D%20%5C%5C%20%5C%5C%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bcent%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20k_a%20u_%7B%5Cmbox%7Bgut%7D%7D%20-%20%5Cleft(%20%5Cdisplaystyle%5Cfrac%7B%5Cmbox%7BCL%7D%7D%7BV_%7B%5Cmbox%7Bcent%7D%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%5Cmbox%7Bcent%7D%7D%20%5Cright)%20u_%7B%5Cmbox%7Bcent%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%7B%5Cmbox%7Bperi%7D%7D%7D%20u_%7B%5Cmbox%7Bperi%7D%7D%20%5C%5C%20%5C%5C%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bperi%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%5Cmbox%7Bcent%7D%7D%20u_%7B%5Cmbox%7Bcent%7D%7D%20-%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%7B%5Cmbox%7Bperi%7D%7D%7D%20u_%7B%5Cmbox%7Bperi%7D%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>There’s still a little friction here because mathematical notation is never precisely identical to variable naming in code (nor should it be). But it does help to have a little lookup table like this one:</p>
<table class="table">
<colgroup>
<col style="width: 18%">
<col style="width: 31%">
<col style="width: 49%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Stan variable</th>
<th style="text-align: center;">Mathematical notatation</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>x[1, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bgut%7D%7D"></td>
<td style="text-align: left;">Drug amount in the gut</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>x[2, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bcent%7D%7D"></td>
<td style="text-align: left;">Drug amount in central compartment</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>x[3, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bperi%7D%7D"></td>
<td style="text-align: left;">Drug amount in peripheral compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>ka</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?k_a"></td>
<td style="text-align: left;">Absorption rate constant from gut</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>CL</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmbox%7BCL%7D"></td>
<td style="text-align: left;">Elimination clearance from central</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>Q</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?Q"></td>
<td style="text-align: left;">Intercompartmental clearance</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>V1</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?V_%5Cmbox%7Bcent%7D"></td>
<td style="text-align: left;">Volume of central compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>V2</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?V_%5Cmbox%7Bperi%7D"></td>
<td style="text-align: left;">Volume of peripheral compartment</td>
</tr>
</tbody>
</table>
<p>The differential equations are all expressed in terms of drug amounts rather than drug concentrations, and the <code>pmx_solve_twocpt()</code> function solves for drug amounts in each compartment at each point in time. However, pharmacometric functions specify how drug concentrations change over time, so the Stan code makes the appropriate transformation. With that in mind I find it helpful to extend the table slightly:</p>
<table class="table">
<colgroup>
<col style="width: 22%">
<col style="width: 29%">
<col style="width: 48%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Stan transformation</th>
<th style="text-align: center;">Mathematical notatation</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>x[2, :] ./ V1</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bcent%7D%7D%20/%20V_%5Cmbox%7Bcent%7D"></td>
<td style="text-align: left;">Drug concentration in central compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>x[3, :] ./ V2</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bperi%7D%7D%20/%20V_%5Cmbox%7Bperi%7D"></td>
<td style="text-align: left;">Drug concentration in peripheral compartment</td>
</tr>
</tbody>
</table>
<p>Having written that out, the Stan code seems pretty interpretable. There’s still something missing here insofar as it’s not entirely clear <em>how</em> the <code>pmx_solve_twocpt()</code> function computes the drug amounts in each compartment at all time points, but at least it’s now clear <em>what</em> it is computing.</p>
</section>
<section id="where-can-i-find-the-analytical-solutions" class="level2">
<h2 class="anchored" data-anchor-id="where-can-i-find-the-analytical-solutions">Where can I find the analytical solutions?</h2>
<p>In my <a href="../../posts/2023-06-10_pop-pk-models/">previous post on pop-PK modelling</a>, I managed to get far enough along that I could implement my own two-compartment models in Stan, without using Torsten. However, in order to do that I had to rely on numerical ODE solvers to compute solutions to the pharmacokinetic functions. It turns out that was unnecessary. On the <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten home page</a>, it indicates that:</p>
<blockquote class="blockquote">
<p>One and two compartment models are based on analytical solutions of governing ODEs.</p>
</blockquote>
<p>So presumably there <em>are</em> some analytical solutions somewhere! A little awkwardly, the documentation doesn’t explicitly say what the analytical solutions for the two-compartment model are or where they are taken from, but a little bit of digging gives us some answers. First, looking through the Torsten source reveals the relevant parts of the code:</p>
<ul>
<li><a href="https://github.com/metrumresearchgroup/Torsten/blob/0168482d400e4b819acadbc28cc817dd1a037c1b/cmdstan/stan/lib/stan_math/stan/math/torsten/pmx_solve_twocpt.hpp">This file</a> appears to be where the <code>torsten::pmx_solve_twocpt()</code> function is defined.</li>
<li><a href="https://github.com/metrumresearchgroup/Torsten/blob/0168482d400e4b819acadbc28cc817dd1a037c1b/cmdstan/stan/lib/stan_math/stan/math/torsten/pmx_twocpt_model.hpp">This file</a> appears to be where the analytical solutions are specified.</li>
</ul>
<p>Second, a little hunting around on the internet unearths this handy little paper by <a href="https://doi.org/10.12793/tcp.2019.27.2.43">D’Argenio and Bae (2019)</a> that derives the analytical solutions of interest. Skimming the paper quickly suggests it’s not too complicated an exercise to implement analytical solutions (especially if you’re not trying to optimise for performance), and even the derivations don’t look too painful. I may return to that topic in a later post, but for now I feel reassured that I know where to look when I want to dive deeper.</p>
</section>
<section id="useful-resources" class="level2">
<h2 class="anchored" data-anchor-id="useful-resources">Useful resources</h2>
<p>I suspect that at a future date I’ll want to pick up from where this post leaves off. With that in mind, these are the resources I relied on when putting it together:</p>
<ul>
<li><p><a href="https://doi.org/10.1002/psp4.12926">Bayesian PBPK modeling using R/Stan/Torsten and Julia/SciML/Turing.Jl</a>. Journal article by Ahmed Elmokadem, Yi Zhang, Timothy Knab, Eric Jordie, and Bill Gillespie, January 2023.</p></li>
<li><p><a href="https://doi.org/10.1002/psp4.12812">Flexible and efficient Bayesian pharmacometrics modeling using Stan and Torsten, Part I</a>. Journal article by Charles Margossian, Yi Zhang, and Bill Gillespie, April 2022.</p></li>
<li><p><a href="https://www.metrumrg.com/wp-content/uploads/2023/06/bbr.bayes_StanCon2023.pdf">Bayesian modeling workflow for pharmacometric applications using bbr.bayes with Stan/Torsten</a>. Slides by Bill Gillespie, June 2023.<sup>4</sup></p></li>
<li><p><a href="https://metrumrg.com/wp-content/uploads/2018/05/BayesianPmetricsMBSW2018.pdf">Bayesian Data Analysis Using Stan/Torsten for Pharmacometric Applications</a>. Slides by Bill Gillespie, May 2018.</p></li>
<li><p><a href="https://doi.org/10.12793/tcp.2019.27.2.43">Analytical solution of linear multi-compartment models with non-zero initial condition and its implementation with R</a>. Journal article by David D’Argenio and Kyun-Seop Bae, June 2019.</p></li>
<li><p><em>Kinetics of distribution of substances administered to the body. I. The extravascular modes of administration.</em> Journal article by Torsten Teorell, 1937. Discussed in <a href="https://doi.org/10.3109/03009739509178895">Torsten Teorell, the Father of Pharmacokinetics</a> by Lennart Paalzow, 1995.</p></li>
<li><p><a href="https://stanpmx.github.io/">Stan and R for Pharmacometrics</a>. Book by Casey Davis, Yasong Lu, Arya Pourzanjani, and Pavan Vaddady.<sup>5</sup></p></li>
</ul>
</section>
<section id="done" class="level2">
<h2 class="anchored" data-anchor-id="done">Done!</h2>
<p>…and with that, I’ve accomplished my very limited goals for this post, and for once in my life I shall bloody well refrain from expanding on it further and turning a short blog post into a monograph.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I mean… “obvious” in the sense that I’m a person who has used Stan before and the output from the previous section is very familiar to me <em>as</em> Stan output.↩︎</p></li>
<li id="fn2"><p>Number obviously fictitious but probably in the right ballpark.↩︎</p></li>
<li id="fn3"><p>The same ODE system appears in the <a href="https://metrumresearchgroup.github.io/Torsten/function/two-cpt/">Torsten documentation for the two-compartment model</a>, using <img src="https://latex.codecogs.com/png.latex?y"> in place of <img src="https://latex.codecogs.com/png.latex?u"> and <img src="https://latex.codecogs.com/png.latex?y%5E%5Cprime"> in place of <img src="https://latex.codecogs.com/png.latex?du/dt">. I probably should have used that version in this post, but I found the Margossian et al version first and I’m too lazy to rewrite the LaTeX expressions.↩︎</p></li>
<li id="fn4"><p>Thank you to Mike Smith for pointing me to this resource.↩︎</p></li>
<li id="fn5"><p>Thank you to Tim Waterhouse for pointing me to this resource.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Getting Started with {Torsten}},
  date = {2023-07-15},
  url = {https://blog.djnavarro.net/posts/2023-07-15_torsten},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Getting Started with Torsten.”</span>
July 15, 2023. <a href="https://blog.djnavarro.net/posts/2023-07-15_torsten">https://blog.djnavarro.net/posts/2023-07-15_torsten</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Stan</category>
  <category>Torsten</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-07-15_torsten/</guid>
  <pubDate>Fri, 14 Jul 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-07-15_torsten/torsten-crop.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Beware the IDEs of Windows (Subsystem for Linux)</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>After many years of using Ubuntu as my primary operating system for data science work, I’ve found myself in a situation where my primary laptop runs Windows. There are reasons for this. It does, however, introduce some problems. My workflows are often built around Unix-like tools, and life without bash is too heavy a burden for me to bear. Fortunately, there is a solution: Windows Subsystem for Linux (WSL). The process for getting set up with WSL is essentially as follows:</p>
<ol type="1">
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/install">Install WSL</a></li>
<li><a href="https://ubuntu.com/wsl">Install Ubuntu for WSL</a></li>
<li><a href="https://cloud.r-project.org/bin/linux/ubuntu/">Install R for Ubuntu</a></li>
</ol>
<p>Repeat step 3 for all the other command line tools you love (and replace step 2 with your favourite distro if you don’t love Ubuntu), and just like that you have a working setup for all your favourite data science workflows on Linux, living happily within a Windows environment.</p>
<section id="some-bits-are-tricksy" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="some-bits-are-tricksy">Some bits are tricksy</h2>
<p>There’s a sense in which WSL is a kind of dark magic, one that allows me to run two operating systems side by side on the same machine, and allowing extensive interoperability between them. By installing WSL and Ubuntu for WSL on my laptop, I’ve created a situation where I have two filesystems co-existing on my machine, and two qualitatively different kinds of shell to interact with them. On the Windows side I can use powershell, and on the Ubuntu side I can use bash. Regardless of which shell I use (and which operating system powers it), I have the ability to find files on both filesystems, as long as I know what paths to look for.</p>
<p>The key thing to understand is that Ubuntu mounts the Windows C: drive at <code>/mnt/c/</code>, and Windows locates the Ubuntu root directory at <code>\\wsl.localhost\Ubuntu-22.04\</code>. So, for instance, given that my Windows user is called <code>strin</code>,<sup>1</sup> and my Ubuntu username is <code>danielle</code>, the paths to the user home directories are:</p>
<div class="column-body-outset">
<table class="table">
<colgroup>
<col style="width: 25%">
<col style="width: 26%">
<col style="width: 48%">
</colgroup>
<thead>
<tr class="header">
<th>Folder:</th>
<th>Ubuntu path (bash):</th>
<th>Windows path (powershell):</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Ubuntu user directory</td>
<td><code>/home/danielle</code></td>
<td><code>\\wsl.localhost\Ubuntu-22.04\home\danielle</code></td>
</tr>
<tr class="even">
<td>Windows user directory</td>
<td><code>/mnt/c/Users/strin</code></td>
<td><code>C:\Users\strin</code></td>
</tr>
</tbody>
</table>
</div>
<p>This illustrates some of the subtleties. Decisions need to be made about which files and applications should live in the Windows filesystem, and which should live in the Ubuntu filesystem. For example, I don’t use my Dropbox folder for data science work, so it lives in Windows at <code>C:\Users\strin\Dropbox</code>. On the other hand, my GitHub repositories are used mostly for data science and developer work, so they all live in Ubuntu and are all kept in the <code>/home/danielle/GitHub</code> folder.</p>
<p>It becomes trickier still when thinking about applications that require a GUI. The Ubuntu for WSL installation doesn’t come with a desktop environment. You certainly can install one, and if you’re willing to do the finicky work setting up an X server for Windows, you can in fact set things up so that Ubuntu for WSL has its own floating desktop environment in Windows (just like the one you’d get if you were running Ubuntu as a virtual machine). However, I don’t fancy doing all that work just to get a web browser up and running… so I made the practical decision that my Firefox installation should be the regular Windows version, living in Windows like any other Windows application.</p>
<p>The trickiness reaches its zenith when you start thinking about where your favourite IDE should live. At its heart an IDE is a GUI, and as such it’s going to run so much more smoothly if you install it as a Windows application. But IDEs are also used to start terminals, to write code, and execute all sorts of tasks that require access to the data science tooling… all of which live on Ubuntu.</p>
<p>How do we resolve this? In my case, I have two IDEs that I cannot live without. For my everyday work I am almost perfectly split between <a href="https://posit.co/products/open-source/rstudio/">RStudio</a> and <a href="https://code.visualstudio.com/">VS Code</a>. Here’s the approach I took with each.</p>
</section>
<section id="rstudio-setup" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="rstudio-setup">RStudio setup</h2>
<p>What are my options for RStudio?</p>
<ul>
<li><p>Option 1: RStudio Desktop for Windows. If I go down this path the RStudio GUI will look very nice, but I won’t be able to use the Ubuntu installation of R. I’d have to install R for Windows, and then I’d have to configure RTools if I want to do developer work, and now I’d need C/C++ compilers on Windows, and… at that point I’d essentially have to manage an entire Windows data science stack in parallel with my Ubuntu data science stack. Not loving this as an option.</p></li>
<li><p>Option 2: RStudio Desktop for Ubuntu. This version of RStudio will have no problems finding the Ubuntu installation, but without a lot of tinkering it won’t be able to create the RStudio GUI. Again, there’s a solution to this (and I did actually get it up and running), if you’re okay with running an X-server for Windows like <a href="https://x410.dev/">X410</a>. It does work, but it’s finicky. Fonts and cursors don’t look right if you’re running X410 in windowed mode, and if you want to run it in floating desktop mode then you have to set up the entire Ubuntu desktop environment just to run RStudio. Not loving this one either.</p></li>
<li><p>Option 3: RStudio Server for Ubuntu. This is easily my preferred option. RStudio Server loves to run on Ubuntu, and so of course it has no problems finding the Ubuntu installation of R. Even better, it doesn’t require an Ubuntu desktop environment. When you start RStudio Server running from bash (<code>sudo rstudio-server start</code>), it starts a server running (most likely at <code>http://localhost:8787/</code>). Back on Windows, I can open up my browser and point it to that address, and can login using my Ubuntu username and password. Works beautifully. I have Ubuntu-native versions of R and RStudio Server, and a Windows-native RStudio GUI through the browser.</p></li>
</ul>
<p>Having made my choice, I sort of know what I need to search for to solve the problem. There are good resources out there for this, and I’m not doing a walkthrough in this post. The purpose of the post is to document the approach I’ve taken so that I can remember how to do it next time, and point future-me at the right resources. That said, these are the resources I relied upon to set up option 3:</p>
<ul>
<li><a href="https://support.posit.co/hc/en-us/articles/360049776974-Using-RStudio-Server-in-Windows-WSL2">Using RStudio Server in Windows WSL2</a></li>
<li><a href="https://posit.co/download/rstudio-server/">RStudio Server</a></li>
<li><a href="https://support.posit.co/hc/en-us/articles/221303588-What-is-my-username-on-my-RStudio-Workbench-RStudio-Server-installation-">What is my username on my RStudio Workbench / RStudio Server installation?</a></li>
</ul>
<p>The result:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/rstudio.png" class="img-fluid figure-img" alt="RStudio interface rendered within a browser window. Within the RStudio interface you can see that I'm working on this blog post."></p>
<figcaption class="margin-caption">Working on this blog post within RStudio. The GUI runs within Firefox on Windows, connected to RStudio Server running on Ubuntu for WSL, both of which exist on my local machine.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="vs-code-setup" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="vs-code-setup">VS Code setup</h2>
<p>Okay that’s RStudio sorted. What about VS Code?</p>
<p>The solution for VS Code is similar but not the same. The core principle is the same: the GUI should be native to Windows, and the underlying engine should be native to Ubuntu. The way you actually do this for VS Code, however, is slightly different. Essentially, what you want to do is install the Windows version of VS Code, and then – within VS Code – install the WSL extension. You’ll also need to install a bunch of other extensions too but that’s the normal experience for VS Code, for every language and every operating system.</p>
<p>As before, I’m not going to do a walkthrough, but these are the resources I used when getting VS Code set up properly on my Windows/Ubuntu-on-WSL box:</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode">Get started using Visual Studio Code with Windows Subsystem for Linux</a></li>
<li><a href="https://code.visualstudio.com/blogs/2019/09/03/wsl2">WSL 2 with Visual Studio Code</a></li>
</ul>
<p>The result:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/vscode.png" class="img-fluid figure-img" alt="VS Code application running natively on Windows, connected to Ubuntu for WSL. The left sidebar displays the file tree for the project, there's an R console open beneath, and a quarto document open in the main panel."></p>
<figcaption class="margin-caption">Working on this blog post within VS Code. The GUI for VS Code is a native Windows application, but in the lower left hand corner you can see that it connects to Ubuntu for WSL to handle code execution and so forth.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="ubuntu-desktop" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="ubuntu-desktop">Ubuntu desktop</h2>
<p>As a kind of postscript… it’s entirely possible to have a fully functional Ubuntu desktop in a setup like this. The main thing you need is an X server. I’ve no idea what the best X server for Windows options are: I went with <a href="https://x410.dev/">X410</a> because it seems pretty professional and work has clearly gone into it, but you do have to pay actual money for it. There might be better options. Anyway, the instructions I followed are in <a href="https://x410.dev/cookbook/wsl/enable-systemd-in-wsl2-and-have-the-best-ubuntu-gui-desktop-experience/">this blog post</a>. At the end of it you have the Ubuntu desktop environment installed, and a handy bash script that does the configuration you need. You can start the session like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span> ~/.bash_ubuntu_desktop</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gnome-session</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--session</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ubuntu</span></code></pre></div>
<p>If you’ve gone to the additional effort of setting up snap, and installing the Firefox snap on your Ubuntu system (yes, I do have two copies of Firefox on my machine), you can do something unbearably absurd like run R-within-RStudio-Server-within-Firefox-within-Ubuntu-desktop-within-Windows. Screenshot, simply to prove that I actually did this:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/ubuntu.png" class="img-fluid figure-img" alt="RStudio running in a browser. The browser window is within an Ubuntu desktop. The Ubuntu desktop floats above the Windows taskbar."></p>
<figcaption class="margin-caption">Working on this blog post within RStudio… within a browser… within Ubuntu on WSL… within X410… on Windows. Yes this is absurd.</figcaption>
</figure>
</div>
<p><br></p>
<p>No, it’s not a very good idea.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A truncation of <code>stringrbelle</code>, which I occasionally use as a username.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Beware the {IDEs} of {Windows} {(Subsystem} for {Linux)}},
  date = {2023-07-02},
  url = {https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Beware the IDEs of Windows (Subsystem
for Linux).”</span> July 2, 2023. <a href="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl">https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/</guid>
  <pubDate>Sat, 01 Jul 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/death-of-ceasar.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Makefiles. Or, the balrog and the submersible</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-30_makefiles/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I have a secret to confess: I have been writing code for over 20 years, and until about a month ago I have been loathe even to try using <a href="https://en.wikipedia.org/wiki/Make_(software)">Make</a>. For too long I have feared catastrophic implosion should I be reckless enough attempt to dive into these dark waters.<sup>1</sup> Even now, as the sunlight fades and I pass below the surface into the treacherous realm below, I can hear the ominous sounds of compressive stress upon my psyche. I imagine the betentacled krakenlike beasts native to this realm congregating outside the hull.</p>
<p>Drums, drums in the deep.</p>
<p>But I am here now and I cannot get out. I shall have to complete this blog post in the hope that a wizard and his merry little troupe of clueless hobbits may one day discover the tale of my tragic descent and eventual demise at the hands of build automation balrogs.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/gothmog.jpg" class="img-fluid figure-img" alt="Stylised art showing a balrog riding a dragon."></p>
<figcaption class="margin-caption">“Gothmog at the Storming of Gondolin”, depicting a balrog riding a dragon. The piece is CC-BY licenced by the artist <a href="https://en.wikipedia.org/wiki/Tom_Loback">Tom Loback</a></figcaption>
</figure>
</div>
<p><br></p>
<section id="farewell-to-the-broad-sunlit-uplands" class="level2">
<h2 class="anchored" data-anchor-id="farewell-to-the-broad-sunlit-uplands">Farewell to the broad, Sunlit Uplands</h2>
<p>Every tragic narrative begins with a fatal mistake, the hubris of the doomed making the terrible choice that sealed their fate well before the story gets underway. In this case, that mistake was deciding that now is the time to read a 1200 page book on C++. Absolutely cursed decision. There was no way I wasn’t going to end up swallowed by a yawning hellmouth once that choice had been made. But – as the saying goes – when one descends into the abyss to be crushed by lovecraftian horrors, it’s all about the journey and not the destination.</p>
<p>Here’s how the sad story unfolded. Having read through the first hundred or so pages of the C++ necronomicon (the “fucking around” stage), I started encountering the inevitable consequences of the fact that (a) C++ is a compiled language, and (b) I am a person who obsessively takes notes as she reads and writes her own code to accompany the notes. And so it came to pass that (in the “finding out” stage of this tragedy) I was barely one chapter into the book and I’d written almost 50 little baby C++ programs, every one of them a helpless monster gnashing it’s tiny teeth in ravenous hunger, demanding to be compiled before it can do anything useful.</p>
<p>Oh no, my precious abominations, I said to them. I already have human children to feed and care for, I’ll not fall into the trap of lovingly passing each of you individually to the compiler for nurture and sustenance with bespoke hand crafted calls to clang++. That way lies madness and chaos. No, I shall hire a metaphorical nanny/butler/build-manager to feed you and compile you when you need compiling, to politely inform me each time a little C++ demon has grown into to a new binary file, and to take care of sundry other drudgeries with which I do not wish to be burdened. I shall write a <code>Makefile</code>.</p>
<p>And with that my doomed submersible slipped below the waves.</p>
</section>
<section id="the-decay-of-that-colossal-wreck" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-decay-of-that-colossal-wreck">The decay of that colossal Wreck</h2>
<p>As the light fades away visions of my Ozymandian future cross my eyes. I imagine the Works that I will construct, upon which even the Mighty will gaze and despair. Hints of make targets that I will specify and the wonders that will get built with automations.</p>
<p>Behold!</p>
<p>Here is the <code>Makefile</code> I wrote for my side project. It’s a minor incantation at best, a small spell to feed my tiresome C++ babies into the maw of clang++ whenever necessary, and renders all my boring markdown scratchings into graven html with the help of pandoc.</p>
<div class="cell" data-file="_examples/learning-cpp/Makefile">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cpp</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">notes</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> notes/%.md</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> docs/%.html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> notes/*.md</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">static</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> docs/.nojekyll docs/CNAME docs/style.css</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dirs </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">static</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">notes</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dirs:</span></span>
<span id="cb1-8"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./bin</span></span>
<span id="cb1-9">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./docs</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(cpp):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb1-12"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[compiling]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span></span>
<span id="cb1-13">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clang++-15 --std=c++20 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(static):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> docs/%: static/%</span></span>
<span id="cb1-16"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[copying]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb1-17">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(notes):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> docs/%.html: notes/%.md</span></span>
<span id="cb1-20"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[rendering]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span></span>
<span id="cb1-21">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pandoc </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --template=./pandoc/template.html </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        --standalone --mathjax --toc --toc-depth 2</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb1-25"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[deleting] docs"</span></span>
<span id="cb1-26">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[deleting] bin"</span></span>
<span id="cb1-27">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf docs</span></span>
<span id="cb1-28">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf bin</span></span></code></pre></div>
</div>
<p>It is not very impressive, I know. But it does work, and it does help. So perhaps I should say a little about how I got to there from here?</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/odysseus-and-the-sirens.jpg" class="img-fluid figure-img" alt="Mosaic depicting the temptation of Odysseus by the Sirens."></p>
<figcaption class="margin-caption">The Ulysses mosaic at the Bardo Museum in Tunis, Tunisia (2nd century AD), depicting the temptation of Odysseus by the Sirens. (Image appears to be public domain)</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="love-me-while-your-wrists-are-bound" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="love-me-while-your-wrists-are-bound">Love me while your wrists are bound</h2>
<p>If I’m going to write something about Makefiles, I should perhaps start by acknowledging a few important truths:</p>
<ul>
<li>I’m not an expert. Everything I know about Makefiles is from <a href="https://makefiletutorial.com">makefiletutorial.com</a>. This post is not going to tell you anything you cannot find in Chase Lambert’s lovely tutorial.</li>
<li>There are many alternatives to Make. I’ve seen many projects use <a href="https://cmake.org/">CMake</a> for build automation, for example. Alternatively, if you’re working in R you might prefer to use the <a href="https://docs.ropensci.org/targets/">targets</a> package by Will Landau (<a href="https://books.ropensci.org/targets/">user manual here</a>). There is nothing particularly special about Make per se that made me decide to learn it: it just happens to be a thing that has been around for a long time, and it was irritating me that I didn’t know how to use it.</li>
<li>Like all things created by humans, it is cursed. Makefiles are indeed the Night That is Dark and Full of Terrors. The red priestesses warned us.</li>
</ul>
<p>With that out of the way, let’s begin. Reduced to its simplest form a Makefile is a collection of build <strong>targets</strong>, each of which is defined using syntax that looks something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb2-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">targets:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> prerequisites</span></span>
<span id="cb2-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>command</span>
<span id="cb2-3">    command</span>
<span id="cb2-4">    command</span></code></pre></div>
</div>
<p>It seems simple enough. The top level command provides the name of the target. In the simplest case, a target is a specific file that <code>make</code> needs to build, and the name of the target is the path to that file, though it’s also possible to specify targets using arbitrary names</p>
<p>Optionally, a target can have a set of <strong>prerequisites</strong> associated with that target. Prerequisites provide a method for specifying the dependencies for a build target. If the files listed as prerequisites have changed more recently than the output target, the build target is deemed to be “out of date”, and the <strong>commands</strong> listed beneath it will be executed in order to rebuild that target.</p>
<p>A concrete example might help to make this a little clearer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb3-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb3-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span></code></pre></div>
</div>
<p>Let’s unpack what each part of this target means:</p>
<ul>
<li><code>bin/collatz</code> is the target, and is specified as the path to the output file that we’re asking <code>make</code> to build for us.</li>
<li><code>src/collatz.cpp</code> is a prerequisite file. If the <code>src/collatz.cpp</code> file has been modified more recently than the <code>bin/collatz</code> file created by the compilation command underneath, then that command will be executed when <code>make</code> is called</li>
<li>The third line is a shell command. In this instance, the command takes the <code>src/collatz.cpp</code> source file and uses clang to compile it to a binary executable file <code>bin/collatz</code>. (The <code>--std=c++20</code> flag indicates that C++ version 20 should be assumed)</li>
</ul>
<p>Targets and their prerequisites provide a mechanism by which a Makefile can be used to track the dependencies among the various files in your project. It’s worth noting a few special cases:</p>
<ul>
<li>If a target has no prerequisites it is always deemed out of date, so the commands will be executed every time.</li>
<li>If the name of the target doesn’t correspond to an actual output file, it’s considered to be a “phony” target and is always considered out of date, and hence the commands will always be executed.</li>
<li>A target can be explicitly labelled as “phony” even if the target name happens to be the same as a file in the project using the <code>.PHONY</code> keyword. We’ll see an example of this later.</li>
</ul>
<p>It seems lovely, does it not? Of course it does my sweet Odysseus. You’ve been listening to the Sirens again, and fortunate indeed that your loved ones have tied you to the mast to prevent you from casting yourself overboard and drowning.</p>
<blockquote class="blockquote">
<p><em>“But Danielle, this seems so simple! It is lovely, alluring and sweet. I see no sign of eldritch horrors or evil creatures lurking in the depths here”</em></p>
</blockquote>
<p>You say that, so I presume that you have absolutely noticed that all those <code>command</code> lines in the code snippet above are indented with tabs and not spaces, yes? No? Those tabs are like little glass knives buried in the sand beneath your soft, bare feet. You must use tabs for indentations in your Makefile, or it won’t work.</p>
<blockquote class="blockquote">
<p><em>“But Danielle, my IDE is set to automatically convert tabs to spaces! This is going to mess me up and now I have to faff about making exceptions for specific files”</em></p>
</blockquote>
<p>Indeed. Don’t say I didn’t warn you.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/hope-in-hell.jpg" class="img-fluid figure-img" alt="Cover art to 'A Hope in Hell', a Sandman comic."></p>
<figcaption>The cover art to “A Hope in Hell”, the fourth of <a href="https://en.wikipedia.org/wiki/The_Sandman_(comic_book)">The Sandman comics</a>. Written by Neil Gaiman, Sam Kieth and Mike Dringenberg, and part of the “Preludes and Nocturnes” collection. Likely a copyrighted image, but hopefully okay to reproduce here under fair use etc.</figcaption>
</figure>
</div>
</div></div></section>
<section id="hope-in-hell" class="level2">
<h2 class="anchored" data-anchor-id="hope-in-hell">Hope in hell</h2>
<p><em>Perhaps we won’t die</em>, we whisper to ourselves as we open a blank Makefile, and point our vessel towards Scylla and Charybdis with the kind of blind optimism that typically ends with the Coroners Court issuing a lengthy report several months later. After all, our project is so very small. We are but hobbits crossing the Brandywine river looking for mushrooms or something, surely the Willow at the heart of the Old Forest won’t eat us?</p>
<p>Sorry. Got a little distracted there, didn’t I? I’m going to blame Morpheus… I haven’t slept very well lately and my writing gets very weird when that happens.</p>
<p>Getting back on track now. When your project is very small, it isn’t hard to write a basic Makefile. Again, it helps to use concrete examples. Let us imagine a project that has this structure:</p>
<div class="cell">

</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>In this happy fantasy Narnia – which absolutely will never turn into a Fillory because happy endings are real, and life really truly is more than one barely-sublimated trauma after another – we have a very easy thing to work with. In the <code>src</code> folder we have three .cpp files that each correspond to a small C++ program that needs to be compiled.</p>
<p>Being the sort of person who likes to separate inputs from outputs, we decide that the executable binary files should all be stored in a <code>bin</code> folder. Being also the cautious sort of person who understands the difference between inputs and outputs, our project has a <code>.gitignore</code> file that ensures that nothing we write to <code>bin</code> is placed under version control.</p>
<p>We also have a a file called <code>Makefile</code>,<sup>2</sup> whose contents are as follows:</p>
<div class="cell" data-file="_examples/version1/Makefile">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "all" target is a set of other targets</span></span>
<span id="cb5-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "dir" target creates a directory for the binaries</span></span>
<span id="cb5-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb5-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>mkdir -p ./bin</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/collatz" target compiles the collatz.cpp program</span></span>
<span id="cb5-9"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb5-10"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/species" target compiles the species.cpp program</span></span>
<span id="cb5-13"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/species:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/species.cpp</span></span>
<span id="cb5-14"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/species.cpp -o bin/species</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/swap" target compiles the swap.cpp program</span></span>
<span id="cb5-17"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/swap:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/swap.cpp</span></span>
<span id="cb5-18"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/swap.cpp -o bin/swap</span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "clean" target deletes all binary files</span></span>
<span id="cb5-21"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb5-22"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>rm -rf bin</span></code></pre></div>
</div>
<p>The central part of the Makefile is familiar. We’re taking the “compile a C++ source file” recipe that I previously used as an example of makefile target, and repeating it three times over. It’s so utterly dull that it actually reads better if we strip the comments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb6-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb6-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/species:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/species.cpp</span></span>
<span id="cb6-5"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/species.cpp -o bin/species</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/swap:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/swap.cpp</span></span>
<span id="cb6-8"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/swap.cpp -o bin/swap</span></code></pre></div>
</div>
<p>It’s repetitive, but for this toy project it works. If we want this project to build, we require that all three of these C++ source files be compiled to binaries.</p>
<p>Sisyphus should be so lucky.</p>
<p>The nature of make targets is that you can call them by name. In the snippet above I have three targets. To build each of these I could type this mind-meltingly tedious sequence of commands at the terminal:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/collatz</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/species</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/swap</span></code></pre></div>
<p>It works fine when there are only a few targets, but becomes extremely painful once there are dozens of them. Life is short, and this is not the kind of masochism I enjoy. Building each target individually is simply not on my to-do list. Not now, not as Valyria sinks into its Doom, and not as Rome is burning. My fiddling time is preserved for something better than this, my babes.</p>
<p>To accommodate the need of the dead things like myself, <code>make</code> makes it possible to group multiple targets together:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb8-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span></code></pre></div>
<p>This is very helpful. Instead of typing this to make all four targets…</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> dir</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/collatz</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/species</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/swap</span></code></pre></div>
<p>…I can now type this and get the same result:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> all</span></code></pre></div>
<p>In fact, even this can be shortened, because “all” happens to be the first target listed in the Makefile. If you don’t specify a target to build, <code>make</code> will use the first target in the file. It is conventional, then, to call the first target “all”, and have that target consist of a list of all the <em>other</em> targets needed to build the whole project. Consequently, I can do this:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<p>Here’s what we get as output…</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap</code></pre>
</div>
</div>
<p>…and our project now contains the binary files:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
├── bin
│   ├── collatz
│   ├── species
│   └── swap
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>Nice.</p>
<p>So, okay. This is the explanation of lines 1-19 of our Makefile. What’s going on in lines 20-22?</p>
<p>I’m so glad you asked.</p>
<p>What happens if you want to burn it all down and revert to the initial (unbuilt) state of the project? <code>make</code> doesn’t provide that functionality automatically, but it is traditional for writers of Makefiles to include a target called <code>clean</code> that includes commands that will perform this clean up job for you.<sup>4</sup> That’s generally a good thing to do, and for this project the cleanup process is very simple. All we have to do delete the <code>bin</code> folder and everything in it, so that’s what our “clean” target does.</p>
<p>Because we have this target in the Makefile, all we have to do is type <code>make clean</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> clean</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>rm -rf bin</code></pre>
</div>
</div>
<p>And just like that, we are back to the clean (unbuilt) state for our project:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>Hope yet lives, despite our descent into Hell.</p>
</section>
<section id="the-filetree-yggdrasil-reaching-to-the-heavens" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-filetree-yggdrasil-reaching-to-the-heavens">The filetree Yggdrasil, reaching to the heavens</h2>
<p>In the Makefile I used in the last section, I created a separate target for every file, and wrote the code manually for every one of them. It’s a little repetitive, but when you only have a handful of files that need to be processed (… regardless of whether “processing” means compiling a source file, rendering a markdown document, or anything else), it’s not too onerous. However, it’s very common for a project to grow much too large for this to be ideal. For example, here’s the filetree for the side-project (including source files and output files) that motivated me to learn how to write Makefiles in the first place:</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/yggdrasil.jpg" class="img-fluid figure-img" alt="The world tree Yggdrasil."></p>
<figcaption>The world tree Yggdrasil from Norse mythology, as depicted by <a href="https://en.wikipedia.org/wiki/Friedrich_Wilhelm_Heine">Friedrich Wilhelm Heine</a> in 1886. (Public domain image)</figcaption>
</figure>
</div>
</div></div><div class="cell">

</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/learning-cpp
├── .gitignore
├── LICENSE.md
├── Makefile
├── README.md
├── bin
│   ├── add-with-logging
│   ├── add-with-overloading
│   ├── append-c-strings
│   ├── array-danielle
│   ├── array-iterator
│   ├── beta-sample
│   ├── beta-sample-2
│   ├── char-code
│   ├── circles
│   ├── collatz
│   ├── employee
│   ├── enumerated-types
│   ├── extended-raw-string-literal
│   ├── file-extension
│   ├── file-extension-2
│   ├── gender-switch
│   ├── gender-switch-2
│   ├── helloworld
│   ├── helloworld-using
│   ├── immovable-reference
│   ├── mean-value
│   ├── na-na-hey-hey
│   ├── pass-by-reference-to-const
│   ├── pointer-free-store
│   ├── pointer-stack
│   ├── poisson-conditional
│   ├── poisson-initialised-conditional
│   ├── poisson-sample
│   ├── raw-string-literal
│   ├── scope-resolution
│   ├── simple-reference
│   ├── simple-string
│   ├── species-first-pass
│   ├── stoi
│   ├── string-class-examples
│   ├── string-class-handy
│   ├── string-class-logical
│   ├── string-escapes
│   ├── string-to-numeric
│   ├── string-vectors
│   ├── structured-binding
│   ├── structured-binding-asl
│   ├── swap
│   ├── try-catch
│   ├── typecasting
│   └── validation-check
├── docs
│   ├── .nojekyll
│   ├── CNAME
│   ├── chapter-01.html
│   ├── chapter-02.html
│   ├── chapter-03.html
│   ├── chapter-04.html
│   ├── index.html
│   └── style.css
├── notes
│   ├── chapter-01.md
│   ├── chapter-02.md
│   ├── chapter-03.md
│   ├── chapter-04.md
│   └── index.md
├── pandoc
│   ├── README.md
│   └── template.html
├── src
│   ├── add-with-logging.cpp
│   ├── add-with-overloading.cpp
│   ├── append-c-strings.cpp
│   ├── array-danielle.cpp
│   ├── array-iterator.cpp
│   ├── beta-sample-2.cpp
│   ├── beta-sample.cpp
│   ├── char-code.cpp
│   ├── circles.cpp
│   ├── collatz.cpp
│   ├── employee.cpp
│   ├── employee.h
│   ├── enumerated-types.cpp
│   ├── extended-raw-string-literal.cpp
│   ├── file-extension-2.cpp
│   ├── file-extension.cpp
│   ├── gender-switch-2.cpp
│   ├── gender-switch.cpp
│   ├── helloworld-using.cpp
│   ├── helloworld.cpp
│   ├── immovable-reference.cpp
│   ├── mean-value.cpp
│   ├── na-na-hey-hey.cpp
│   ├── pass-by-reference-to-const.cpp
│   ├── pointer-free-store.cpp
│   ├── pointer-stack.cpp
│   ├── poisson-conditional.cpp
│   ├── poisson-initialised-conditional.cpp
│   ├── poisson-sample.cpp
│   ├── raw-string-literal.cpp
│   ├── scope-resolution.cpp
│   ├── simple-reference.cpp
│   ├── simple-string.cpp
│   ├── species-first-pass.cpp
│   ├── stoi.cpp
│   ├── string-class-examples.cpp
│   ├── string-class-handy.cpp
│   ├── string-class-logical.cpp
│   ├── string-escapes.cpp
│   ├── string-to-numeric.cpp
│   ├── string-vectors.cpp
│   ├── structured-binding-asl.cpp
│   ├── structured-binding.cpp
│   ├── swap.cpp
│   ├── try-catch.cpp
│   ├── typecasting.cpp
│   └── validation-check.cpp
└── static
    ├── .nojekyll
    ├── CNAME
    └── style.css</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>It’s not a huge project by any stretch of the imagination, but it’s big enough to illustrate the point. If I had to write a separate target telling <code>make</code> how to process each of these files I’d quickly lose my mind. Not only that, it would be difficult to maintain if – for example – I needed to change the command used to compile the C++ source files.</p>
<p>In practice, then, we want to write Makefiles that use pattern matching to process every file that matches that pattern. For instance, in the “learning-cpp” project shown above, one of the pattern rules I need is one that automatically compiles every .cpp file in the <code>src</code> folder to a binary file of the same name in the <code>bin</code> folder.<sup>5</sup> Conveniently enough, that’s exactly the same problem we needed to solve for the toy example. So let’s revisit it, keeping in mind that although you don’t really need pattern rules for a project as tiny as the toy project I’m using here, you really do need them as soon as your project moves into the real world.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/kraken.jpg" class="img-fluid figure-img" alt="'Kraken of the imagination', by John Gibson. 1887"></p>
<figcaption class="margin-caption">“The kraken, as seen by the eye of imagination”. Public domain image by John Gibson, published in <a href="https://www.biodiversitylibrary.org/page/54285093#page/85/mode/1up">Monsters of the sea, legendary and authentic</a>, 1887</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="release-the-kraken-of-the-imagination" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="release-the-kraken-of-the-imagination">Release the kraken of the imagination</h2>
<div class="cell">

</div>
<p>Now comes the part of the post where turbulent waters are encountered, and we the dark beasts of the depths might claim us. That is to say, we’ll start creating targets programmatically within our Makefile. To that end we’ll return to the toy project. As before, our project has the following source files:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version2
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>However, our Makefile this time around is a little different:</p>
<div class="cell" data-file="_examples/version2/Makefile">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lists of filenames</span></span>
<span id="cb19-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "all" target is much simpler now</span></span>
<span id="cb19-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb19-9"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>mkdir -p ./bin</span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each C++ binary is a target, the source is its prerequisite</span></span>
<span id="cb19-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(bin_files):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb19-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span> -o <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb19-14"></span>
<span id="cb19-15"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb19-16"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>rm -rf bin</span></code></pre></div>
</div>
<p>Let’s go through this line by line. First, we can use wildcard matching to find all files in the <code>src</code> folder that end with the <code>.cpp</code> file extension:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb20-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>It may not be immediately apparent to – oh, say, humans – but this is in fact a function call. The name of the function is <code>wildcard</code>, the <code>$( )</code> syntax with the function name inside the parentheses is the way you call functions in <code>make</code>,<sup>6</sup> and <code>src/*.cpp</code> is the argument passed to the function.</p>
<p>It may also not be obvious upon first inspection – because again, why would it be? – why I’ve used <code>:=</code> instead of <code>=</code> in my assignment statement. The goal here is to create a new variable called <code>src_files</code> that contains the names of the various source files, that much is clear. But why use <code>:=</code>, exactly? The answer, of course, is that <code>make</code> supports several different kinds of assignment operators, and confusingly enough <code>=</code> is <em>not</em> the operator for “simple” assignment:</p>
<ul>
<li>Use <code>:=</code> if you want “simple assignment”: the assignment happens once and only once, the first time the assignment statement is encountered</li>
<li>Use <code>=</code> if you want “recursive assignment”: the assignment is reevaluated every time the value of the right hand side changes (e.g., in this example, if a later make target changes the list of source files in the <code>src</code> folder, the value of <code>src_files</code> changes too)</li>
<li>Use <code>?=</code> if you want “conditional assignment”: the assignment only happens if the variable doesn’t already have a value (sure, normal humans would use an if-statement for this, but as we all know keystrokes are a precious resource and must be conserved; preserving human sanity is of course a much less important goal)</li>
<li>Use <code>+=</code> if you want the value of the right hand side to be added to the variable rather than replacing its existing value.</li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<p>It sure doesn’t seem like I should have had to write a small manuscript simply to explain one very modest line of code, does it? But such is the nature of <code>make</code>.</p>
</div></div><p>In any case, the thing that matters here is we’ve scanned the <code>src</code> folder and created a variable called <code>src_files</code> that lists all the C++ source code files in that folder. In other words, <code>src_files</code> is now a synonym for this:</p>
<pre><code>src/collatz.cpp src/species.cpp src/swap.cpp</code></pre>
<p>This will now form the basis by which we construct a list of build targets. Because our project is very simple and has a nice one-to-one mapping between source files and output files, what we really want to construct now is a variable that contains a list of build targets like this:</p>
<pre><code>bin/collatz bin/species bin/swap</code></pre>
<p>If we could be assured that the binary files always exist, we could use the same trick to list all binaries in the <code>bin</code> folder. But because those might not exist (e.g., if we delete the binaries when calling <code>make clean</code>), we can’t be assured of that. So instead, we’ll use the <code>patsubst</code> function to do a pattern substitution: we’ll take the <code>src_files</code> variable as input, strip the <code>.cpp</code> extension from the files, and replace <code>src</code> with <code>bin</code>. Here’s what that looks like:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb23-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>The <code>patsubst</code> function takes three arguments, and – of course – they are specified in a weird order. The data argument appears in the third position, because again… why not? The pattern to which we match the data appears in the first position, and the replacement pattern appears in the second position.<sup>7</sup> Anyway, the point here is that what this function call does is as follows: it takes all the filenames in <code>src_files</code>, matches them against <code>src/%.cpp</code> to find the “stem” (e.g., the stem for <code>src/collatz.cpp</code> is the part that matches the <code>%</code> operator, i.e., <code>collatz</code>), and then uses the replacement pattern <code>bin/%</code> to construct output values from the stems (e.g., <code>collatz</code> is transformed to <code>bin/collatz</code>). And so we end up with a variable <code>bin_files</code> that contains the list of target files we want to build:</p>
<pre><code>bin/collatz bin/species bin/swap</code></pre>
<p>Now that we have this, we can define the “all” target using this variable, as follows:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb25-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>From the <code>make</code> perspective this is equivalent to:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb26-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span></code></pre></div>
<p>Or, to put it another way, by using the <code>bin_files</code> variable, we can programmatically ensure that the “all” target includes a target for every binary file that needs to be compiled.</p>
<p>Having defined a list of targets programmatically, our next task<sup>8</sup> is to write a <a href="https://www.gnu.org/software/make/manual/html_node/Static-Usage.html">static pattern rule</a> that programmatically defines the targets themselves. Specifically, for every target listed in <code>bin_files</code>, we want (1) to assert that it relies on the corresponding source file as a prerequisite, and (2) to specify a build action that compiles the binary from the corresponding source.</p>
<p>Here’s some code that does this:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb27-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(bin_files):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb27-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span> -o <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span></code></pre></div>
<p>The underlying syntax here is as follows:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb28-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">targets:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> target-pattern: prerequisites-patterns</span></span>
<span id="cb28-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>commands</span></code></pre></div>
<p>For our example, the <code>bin_files</code> variable contains the list of targets specified by the pattern rule. The <code>bin/%</code> part (the target pattern) and the <code>src/%.cpp</code> part (the prerequisites pattern) are used for pattern substitution purposes. It’s essentially the same task that we saw when I called <code>patsubst</code> using these patterns earlier: in the previous example I used them to construct the name of a binary file from the corresponding source file, this time I’m going the other direction and constructing the name of the source file (to use as a rerequisite) from the binary file (which is used as the target).</p>
<p>Okay, now let’s turn to the second line of the code snippet. In the orginal version of the code I wrote targets like this:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb29-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb29-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span></code></pre></div>
<p>But in the static pattern rule version I’ve used <code>$&lt;</code> to refer to the prerequisite file (e.g., the source file <code>src/collatz.cpp</code>) and <code>$@</code> to refer to the file name of the target (e.g., the binary file <code>bin/collatz</code>). These are both examples of <a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html">automatic variables</a> in <code>make</code>. There are quite a lot of these: <code>$@</code>, <code>$%</code>, <code>$&lt;</code>, <code>$?</code>, <code>$^</code>, <code>$+</code>, <code>$|</code>, <code>$*</code>. Some of these have “D” and “F” variants that specifically refer to directory paths or filenames: <code>$(@D)</code> and <code>$(@F)</code> are variations on <code>$@</code>, <code>$(*D)</code> and <code>$(*F)</code> are variants of <code>$*</code> and so on. If you desperately want to learn all these details the linked page explains them all. For our purposes it’s enough to note that in the example above, I’ve used <code>$&lt;</code> to refer to the source file and <code>$@</code> to refer to the output file.</p>
<p>Right. After all that as explanatory background we can run <code>make</code>, and happily see that the results are indeed the same as before:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap</code></pre>
</div>
</div>
<p>And now that we’ve built the project we see that the filetree now contains the binaries:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version2
├── .gitignore
├── Makefile
├── bin
│   ├── collatz
│   ├── species
│   └── swap
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<div class="cell">

</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/medusa-too.jpg" class="img-fluid figure-img" alt="Oil painting of the mythological character, Medusa, reimagined through a contemporary feminist lens"></p>
<figcaption>“Me(dusa) too”. Oil painting of the mythological character, Medusa, reimagined through a contemporary feminist lens, in response to the #metoo movement.<sup>9</sup> Art by <a href="https://en.wikipedia.org/wiki/Judy_Tak%C3%A1cs">Judy Takács</a>. Released by the artist as CC-BY.</figcaption>
</figure>
</div>
</div></div></section>
<section id="the-tragedy-of-medusa-and-what-is-permitted-to-be-seen-and-said" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-tragedy-of-medusa-and-what-is-permitted-to-be-seen-and-said">The tragedy of Medusa, and what is permitted to be seen and said</h2>
<p>The last step in putting together a Makefile for our toy project is to tidy some of the code, and make choices about what messages are printed to the terminal when <code>make</code> is called. Let’s start with the tidying. It was convenient for expository purposes to create the list of targets as a two-step process, so that I could talk about the <code>wildcard</code> function before introducing the <code>patsubst</code> function:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb33-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb33-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>But realistically this doesn’t need to be two lines, so I’ll shorten it to a single line that generates the list of compilation targets:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb34-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>The second task is to add some code modifying the messages printed when targets are built. To do this, I’ll preface all my commands with the <code>@</code> symbol, which silences their raw output, thereby preventing them from being printed to the terminal whenever <code>make</code> is called. In place of the automatic printing, I’ll use <code>echo</code> to write my own, more human-friendly output lines. So now my Makefile looks like this:</p>
<div class="cell">

</div>
<div class="cell" data-file="_examples/version3/Makefile">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb35-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb35-4"></span>
<span id="cb35-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb35-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./bin</span></span>
<span id="cb35-7"></span>
<span id="cb35-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(compile):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb35-9"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compiling"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb35-10">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clang++ --std=c++20 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb35-11"></span>
<span id="cb35-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb35-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deleting binary files"</span></span>
<span id="cb35-14">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf bin</span></span></code></pre></div>
</div>
<p>Let’s have a look at what happens when we call <code>make</code> using this version of the Makefile. The same files are compiled, but the printed messages are prettier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>compiling src/collatz.cpp to bin/collatz
compiling src/species.cpp to bin/species
compiling src/swap.cpp to bin/swap</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>Much nicer.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/hercules-slaying-the-hydra.jpg" class="img-fluid figure-img" alt="Mosaic depicting Hercules and Iolaus slaying the Hydra of Lerna."></p>
<figcaption class="margin-caption">Mosaic by <a href="https://en.wikipedia.org/wiki/Sebald_Beham">Sebald Beham</a> depicting Hercules and Iolaus slaying the many-headed Hydra of Lerna, 1545. Public domain image.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="the-fourth-wall-shatters-into-little-shards-of-recursion" class="level2">
<h2 class="anchored" data-anchor-id="the-fourth-wall-shatters-into-little-shards-of-recursion">The fourth wall shatters into little shards of Recursion</h2>
<p>At this point, this post <em>has</em> covered all the tricks that I’m using in the Makefile for the accursed C++ side project that motivated me to learn <code>make</code>. What this post <em>hasn’t</em> yet covered, though, are some of the tricks that I needed to use for… um… this post. This quarto blog post is a project, and it has a Makefile. But the folder that contains all the source for this blog post <em>also</em> contains source files for all the sub-projects that I’ve used as the examples… and each of those has its own Makefile. Our simple project has become a multi-headed monster, a poisonous serpentine water beast.</p>
<p>To create a Makefile that works in this situation we need to call <a href="https://www.gnu.org/software/make/manual/make.html#Recursion">call make recursively</a>, and though much beloved by computer scientists, I personally view recursion as the little death and the exsanguination of hope. To do this with <code>make</code> some care is required. The thing you <em>don’t</em> want to do is literally use the <code>make</code> command inside a Makefile. That’s exactly the kind of intuitive strategy that get us slain by the poison breath of the Hydra. Instead, we use the <code>$(MAKE)</code> variable as an alias for <code>make</code>. To illustrate this let’s take a look at the actual Makefile used to build this post:</p>
<div class="cell" data-file="Makefile">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb38-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 2023-06-30_makefiles</span></span>
<span id="cb38-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">html</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ../../_site/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/index.html</span></span>
<span id="cb38-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> version1 version2 version3</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explicitly state that these targets aren't file names</span></span>
<span id="cb38-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> all clean clean_quarto</span></span>
<span id="cb38-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> build_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb38-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> clean_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb38-9"></span>
<span id="cb38-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> build_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">html</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-11"></span>
<span id="cb38-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(patsubst %, build_%, $(examples)):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> build_%: _examples/%</span></span>
<span id="cb38-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------ building"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------"</span></span>
<span id="cb38-14">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span>
<span id="cb38-15"></span>
<span id="cb38-16"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(html):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> index.qmd</span></span>
<span id="cb38-17"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------ rendering quarto ------------"</span></span>
<span id="cb38-18">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rendering"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb38-19">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto render </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --quiet</span></span>
<span id="cb38-20"></span>
<span id="cb38-21"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(patsubst %, clean_%, $(examples)):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> clean_%: _examples/%</span></span>
<span id="cb38-22"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> clean -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span>
<span id="cb38-23"></span>
<span id="cb38-24"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean_quarto:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb38-25"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf ../../_site/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-26">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf ../../_freeze/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-27"></span>
<span id="cb38-28"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> clean_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> clean_quarto</span></span></code></pre></div>
</div>
<p>There are some other new tricks in play here. When I call <code>make</code> via the <code>$(MAKE)</code> alias, I’m passing some additional flags: the <code>-C</code> flag tells <code>make</code> to change directories (I could also have used <code>--directory</code> here in place of <code>-C</code>), and the <code>--no-print-directory</code> flag asks <code>make</code> to do so without printing an annoyingly long message informing me that it has done so. As usual <code>$&lt;</code> refers to a prerequisite (e.g., <code>_examples/version1</code>). In other words, this command…</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb39-1"><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span></code></pre></div>
<p>… has essentially the same effect as a bash command that changes to the appropriate directory, calling <code>make</code> there, and then returning to the original directory:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> _examples/version1</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span>
<span id="cb40-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ../..</span></code></pre></div>
<p>There’s another trick in play here too. At the start of the file I’ve made use of <code>.PHONY</code> to declare explicitly that many of my targets don’t refer to real files, and are merely labels for recipes. I’ve been lazy about that up till now,<sup>10</sup> but it does matter in a lot of contexts.</p>
<p>In any case, here’s what I get as output when I <code>make</code> this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<pre><code>------------ building _examples/version1 ------------
mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap
------------ building _examples/version2 ------------
mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap
------------ building _examples/version3 ------------
compiling src/collatz.cpp to bin/collatz
compiling src/species.cpp to bin/species
compiling src/swap.cpp to bin/swap
------------ rendering quarto ------------
rendering ../../_site/posts/2023-06-23_makefiles/index.html</code></pre>
<p>Each of the example projects gets built, with a pretty header line to explain which project is building at each step of the process, and then finally the quarto document is rendered also. Somewhat awkwardly though, there’s some indirect recursion going on also: the quarto document calls <code>make</code> several times internally in order to generate much of the output shown in this post. It doesn’t actually break anything, but it does mean it’s a little harder for <code>make</code> to infer when one of the submakes is out of date. Indirect recursion is a strange beast at the best of times, but fortunately it doesn’t cause a lot of problems in this case.</p>
</section>
<section id="epilogue-and-the-death-of-the-author" class="level2">
<h2 class="anchored" data-anchor-id="epilogue-and-the-death-of-the-author">Epilogue, and the Death of the Author</h2>
<p>This was a strange post, and I honestly have no idea how to wrap it all up. If you do want to learn more about Makefiles, I highly recommend the walkthrough at <a href="https://makefiletutorial.com">makefiletutorial.com</a>. It’s how I learned. As for the rest of the narrative… I don’t know what that was all about? I was bored, I guess.</p>
</section>
<section id="postscript" class="level2">
<h2 class="anchored" data-anchor-id="postscript">Postscript</h2>
<p>After sharing this post on mastodon some folks suggested a few other resources related to make and other build automation tools. So here’s a list of resources I’ve either used in this post, or someone else suggested to me afterwards:</p>
<ul>
<li><a href="https://makefiletutorial.com">makefiletutorial.com</a> is the tutorial I learned from</li>
<li>here’s the <a href="https://www.gnu.org/software/make/manual/html_node/index.html">documentation for GNU make</a></li>
<li>a blog post by Mike Bostock: <a href="https://bost.ocks.org/mike/make/">why use make</a></li>
<li>a blog post by Jake Howard: <a href="https://theorangeone.net/posts/just-stop-using-makefile/">just! stop using make</a></li>
<li>for R users, there is the <code>usethis::use_make()</code> function which was new to me</li>
</ul>
<p>Links to some related tools:</p>
<ul>
<li><a href="https://docs.ropensci.org/targets/">targets</a></li>
<li><a href="https://cmake.org/">cmake</a></li>
<li><a href="https://snakemake.github.io/">snakemake</a></li>
<li><a href="https://ruby.github.io/rake/">rake</a></li>
<li><a href="https://microsoft.github.io/just/">just</a></li>
<li><a href="https://www.pyinvoke.org/">invoke</a></li>
<li><a href="https://taskfile.dev/">task</a></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I did ponder briefly the question of whether this joke is in poor taste. On the one hand, it probably is. On the other hand, I can’t help but notice there’s a remarkable number of people who suddenly come out of the woodwork to handwringing about the horrors of ordinary people making jokes at the expense of reckless rich people who came to a relatively painless end due to their own overwhelming hubris, while Dave Chappelle and Ricky Gervais are both out there making bank by mocking and belittling the most vulnerable people in society. Pick your battles my sweet things. Pick your battles.↩︎</p></li>
<li id="fn2"><p>Traditionally a Makefile is simply named <code>Makefile</code> or <code>makefile</code>. It doesn’t have to be, but if you call it something else you need to explicitly tell <code>make</code> where to find the file using the <code>-f</code> flag. A command like <code>make -f my_make_file</code>, for example, specifies that the Makefile is called <code>my_make_file</code>.↩︎</p></li>
<li id="fn3"><p>Admittedly, this implicitly assumes that I’m executing the <code>make</code> command from the same directory as the <code>Makefile</code> itself. That creates some awkwardness for this blog post because the quarto file is not in the same folder as the Makefile. So when you look at the source code for this post you’ll see I’m doing something slightly different. But let’s put those particular nightmares on layby shall we? Instead, let’s see what horrors escape from the particular Pandora’s box that happens to sit before us.↩︎</p></li>
<li id="fn4"><p>Don’t include “clean” in the list of “all” targets, obviously: that would defeat the point entirely.↩︎</p></li>
<li id="fn5"><p>This seems as good a moment as any to mention that yes, I am indeed aware of the <a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Rules.html">implicit rules</a> that are very often used in Makefiles to do common tasks like compiling C code without explicitly calling the compiler. I’ve chosen not to use those here because, quite frankly, implicit compilation rules make me uncomfortable.↩︎</p></li>
<li id="fn6"><p>Oh yes, <code>make</code> uses infix notation for functions. Of course it does, for the same reason that it mandates tab indentation… because <code>make</code> is the very quintessence of evil design. It’s useful enough to weasel its way into your projects, at which point it then slowly drives you toward the pit of despair by making design choices that seem chosen deliberately to make you feel like an idiot. Case in point, you can use <code>${ }</code> instead of <code>$( )</code> to call a function if you like. Because why not?↩︎</p></li>
<li id="fn7"><p>The fact that this happens to be the same batshit argument ordering used in the base R <code>gsub()</code> function makes me suspect that there is some historical reason for this that involves being lectured about grep for about an hour. Anyway there’s a reason why almost everyone who uses R in real world vastly prefers the stringr pattern matching API over the base R API. But I digress.↩︎</p></li>
<li id="fn8"><p>I’m skipping over the <code>dir</code> target on lines 8 and 9, because the code here is the same as it was in the original version. It’s very boring: it just makes sure that a <code>bin</code> folder exists.↩︎</p></li>
<li id="fn9"><p>You probably know why this piece speaks to me, and why I chose to include it even though it’s a slight departure from the narrative. If not, well, I’ll leave it for you to guess.↩︎</p></li>
<li id="fn10"><p>The <code>.ALLCAPS</code> thing going on here tells us that <code>.PHONY</code> is one of the <a href="https://www.gnu.org/software/make/manual/html_node/Special-Targets.html">special built-in target names</a> that have particular meaning in <code>make</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Makefiles. {Or,} the Balrog and the Submersible},
  date = {2023-06-30},
  url = {https://blog.djnavarro.net/posts/2023-06-30_makefiles},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Makefiles. Or, the Balrog and the
Submersible.”</span> June 30, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-30_makefiles">https://blog.djnavarro.net/posts/2023-06-30_makefiles</a>.
</div></div></section></div> ]]></description>
  <category>Reproducibility</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-30_makefiles/</guid>
  <pubDate>Thu, 29 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/gothmog.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Extracting tables from pdf files with tabulizer</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-16_tabulizer/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>In the last post I talked about <a href="../../dark-times/">something very grim</a>, and to be honest it’s not at all what wanted to be writing about yesterday. My intention when I woke up yesterday was to write about <a href="https://docs.ropensci.org/tabulizer/">tabulizer</a>, an R package you can use to extract tables from a pdf document. This isn’t my favourite of data wrangling tasks: pdf is not a very good format in which to store data, but it’s awfully common to find yourself in a situation where the data you want to work with exists only as a table in a pdf document. Because this is a thing that happens, it’s nice to have tools that make it a little easier.</p>
<section id="to-extract-a-table-we-must-first-create-the-universe" class="level2">
<h2 class="anchored" data-anchor-id="to-extract-a-table-we-must-first-create-the-universe">To extract a table, we must first create the universe</h2>
<p>The tabulizer package works by supplying bindings to <a href="https://github.com/tabulapdf/tabula-java/">tabula-java</a>, a java library for extracting tables from pdfs. So if you want tabulizer to work in R you need a working installation of Java, and you need to have the <a href="https://github.com/s-u/rJava">rJava</a> package to provide the R-to-Java bindings.</p>
<p>My experience in the past has been that getting all this setup can be a bit finicky. Happily for me, I’m on Ubuntu and <a href="https://datawookie.dev/blog/2018/02/installing-rjava-on-ubuntu/">Andrew Collier has a blog post</a> that walks you through the process step by step. Following his guide, my first step was to install the Java runtime environment and the Java development kit:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> default-jre default-jdk</span></code></pre></div>
<p>This worked smoothly, so I moved onto the next step and ensured that R knows where to find Java:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> R CMD javareconf</span></code></pre></div>
<p>Only now is it possible to install the rJava package:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rJava"</span>)</span></code></pre></div>
<p>Andrew’s post suggests that you need to restart RStudio after doing this, so I did that too. Having done so, I could finally install the tabulizer package itself:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ropensci/tabulizerjars"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ropensci/tabulizer"</span>))</span></code></pre></div>
</section>
<section id="let-there-be-tables" class="level2">
<h2 class="anchored" data-anchor-id="let-there-be-tables">Let there be tables</h2>
<p>Now that I have the tabulizer package installed, I’ll load it along with the other packages I’ll be using in this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tabulizer)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span></code></pre></div>
</div>
<p>To check that it works, I’ll need a pdf file to work with. As a convenience, the tabulizer package comes with a bundled “data.pdf” file that we can use for this purpose:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">pdf_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"examples"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.pdf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabulizer"</span>)</span></code></pre></div>
</div>
<p>I’ve embedded a copy of the “data.pdf” file in this post, and as you can see it’s very simple test case (by design). The file contains four tables, and only those four tables:</p>
<br> <object data="data.pdf" type="application/pdf" width="100%" height="500px" style="padding:10px">
<p>
Unable to display PDF file. <a href="data.pdf">Download</a> instead.
</p>
</object>
<p><br></p>
<p>We can use this data file as a way to check that the package works and does what we expect. The workhorse function in the package is <code>extract_tables()</code>. We pass it the path to the pdf file as the first argument, and use the various other arguments to provide details about how the file should be processed. In this case, the only other argument I’ll specify is <code>output = "data.frame"</code>, which tells the <code>extract_tables()</code> function to return a list of data frames rather than a list of matrices (the default behaviour). Let’s see if it’s working:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">pdf_tables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pdf_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(as_tibble)</span>
<span id="cb7-4"></span>
<span id="cb7-5">pdf_tables</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 31 × 10
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear
   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;
 1  21       6  160    110  3.9   2.62  16.5     0     1     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4
# ℹ 21 more rows

[[2]]
# A tibble: 6 × 5
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;  
1          5.1         3.5          1.4         0.2 setosa 
2          4.9         3            1.4         0.2 setosa 
3          4.7         3.2          1.3         0.2 setosa 
4          4.6         3.1          1.5         0.2 setosa 
5          5           3.6          1.4         0.2 setosa 
6          5.4         3.9          1.7         0.4 setosa 

[[3]]
# A tibble: 6 × 6
      X Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
  &lt;int&gt;        &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;    
1   145          6.7         3.3          5.7         2.5 virginica
2   146          6.7         3            5.2         2.3 virginica
3   147          6.3         2.5          5           1.9 virginica
4   148          6.5         3            5.2         2   virginica
5   149          6.2         3.4          5.4         2.3 virginica
6   150          5.9         3            5.1         1.8 virginica

[[4]]
# A tibble: 14 × 1
   supp 
   &lt;chr&gt;
 1 VC   
 2 VC   
 3 VC   
 4 VC   
 5 VC   
 6 VC   
 7 VC   
 8 VC   
 9 VC   
10 VC   
11 VC   
12 VC   
13 VC   
14 VC   </code></pre>
</div>
</div>
<p>That looks nice. With very little effort we’ve extracted all four tables from the pdf file, and returned a list of tibbles containing the data. Yay! 🎉</p>
</section>
<section id="wild-caught-pdf-files-are-trickier-to-work-with" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="wild-caught-pdf-files-are-trickier-to-work-with">Wild caught pdf files are trickier to work with</h2>
<p>Okay, let’s try a harder example. One of the two reports I referred to in yesterdays blog post is a survey of LGBTQ people conducted by <a href="https://www.dataforprogress.org/">Data For Progress</a>. Unlike the test file, it contains additional text that is not part of any table, and the tables within the report have a lot of fancier formatting that isn’t present in the test file. I’ve cached a local copy of the pdf file as “dfp_lgbtq_survey.pdf”, and you can take a look yourself to see what we’re working with this time:</p>
<br> <object data="dfp_lgbtq_survey.pdf" type="application/pdf" width="100%" height="500px" style="padding:10px">
<p>
Unable to display PDF file. <a href="dfp_lgbtq_survey.pdf">Download</a> instead.
</p>
</object>
<p><br></p>
<p>The data I used in that post comes from question 4, so I’ll try to extract the data for that table from the pdf file. This turns out to be a little harder to do. My first attempt tried to automatically pull all the tables from the second page by setting <code>pages = 2</code>, and this is what happened:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">pdf_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dfp_lgbtq_survey.pdf"</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(pdf_file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
[1,] "79" "85" "82" "70" "87" "89" "77" "79" "83" "69"  "80" 
[2,] "17" "12" "13" "29" "7"  "6"  "19" "14" "15" "27"  "17" 

[[2]]
     [,1]       [,2]      [,3]       [,4]       [,5]    [,6]     [,7]  
[1,] "Response" "Topline" "African"  "or"       "White" "Female" "Male"
[2,] ""         ""        ""         ""         ""      ""       ""    
[3,] ""         ""        "American" "Latino/a​" ""      ""       ""    
     [,8]     [,9]          [,10]         [,11] [,12] [,13] [,14] [,15]
[1,] ""       ""            "identify as" ""    ""    ""    ""    "65+"
[2,] "binary" "transgender" ""            "24"  "39"  "54"  "64"  ""   
[3,] ""       ""            "transgender" ""    ""    ""    ""    ""   </code></pre>
</div>
</div>
<p>Okay, that’s definitely not the data we want. To make this work we’re going to have to give <code>extract_tables()</code> a little more information. One way to do this is to explicitly specify the <code>area</code> of the pdf file that contains the table to be extracted. To that end, it’s helpful to first call the <code>get_page_dims()</code> function, which gives us the dimensions of each page in the pdf document:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_page_dims</span>(pdf_file)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 595 842

[[2]]
[1] 595 842

[[3]]
[1] 595 842</code></pre>
</div>
</div>
<p>Now that we have the dimensions for each page we can specify a rectangular region as a vector containing the top, left, bottom and right coordinates of the rectangle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">region <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">595</span>)</span></code></pre></div>
</div>
<p>The command we want looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> pdf_file, </span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guess =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">area =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(region)</span>
<span id="cb14-6">)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
</div>
<p>This time around, in addition to setting <code>pages = 2</code>, we’ve set <code>guess = FALSE</code> in order to stop <code>extract_tables()</code> from trying to automatically detect regions containing tabular data, and also passed a list of regions (in this case just the one region) as the <code>area</code> argument, thereby telling <code>extract_tables()</code> to look in that specific part of the document.</p>
<p>Let’s take a look at the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">mat</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code>      [,1]                                [,2]      [,3]       [,4]       [,5]    [,6]     [,7]   [,8]     [,9]            [,10]         [,11] [,12] [,13] [,14] [,15]
 [1,] ""                                  ""        "Black or" "Hispanic" ""      ""       ""     ""       ""              "Does not"    ""    ""    ""    ""    ""   
 [2,] ""                                  ""        ""         ""         ""      ""       ""     "Non-"   "Identifies as" ""            "18-" "25-" "40-" "55-" ""   
 [3,] "Response"                          "Topline" "African"  "or"       "White" "Female" "Male" ""       ""              "identify as" ""    ""    ""    ""    "65+"
 [4,] ""                                  ""        ""         ""         ""      ""       ""     "binary" "transgender"   ""            "24"  "39"  "54"  "64"  ""   
 [5,] ""                                  ""        "American" "Latino/​a" ""      ""       ""     ""       ""              "transgender" ""    ""    ""    ""    ""   
 [6,] "Yes, I have considered moving"     ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
 [7,] ""                                  "27"      "24"       "28"       "27"    "26"     "20"   "44"     "43"            "24"          "41"  "28"  "18"  "17"  "17" 
 [8,] "out of my community or state"      ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
 [9,] "No, I have not considered"         ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[10,] "moving out of my community or"     "61"      "57"       "59"       "64"    "60"     "75"   "37"     "40"            "65"          "43"  "60"  "74"  "80"  "70" 
[11,] "state"                             ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[12,] "I have already moved out of my"    ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[13,] "community or state as a result of" "5"       "6"        "4"        "3"     "3"      "3"    "13"     "8"             "4"           "8"   "4"   "2"   "1"   "9"  
[14,] "anti-LGBTQ+ legislation"           ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[15,] "Not sure"                          "7"       "14"       "8"        "6"     "11"     "3"    "6"      "8"             "7"           "9"   "8"   "7"   "2"   "4"  
[16,] "Weighted N"                        "1,036"   "93"       "217"      "632"   "426"    "368"  "135"    "166"           "870"         "249" "425" "186" "93"  "83" </code></pre>
</div>
</div>
<p>It’s not quite organised the way we want, but it’s definitely the right data.</p>
<p>Even better, you don’t actually have to do all this messing about trying to figure out the precise region containing the table. If you have the <a href="https://shiny.posit.co/">Shiny</a> and <a href="https://github.com/rstudio/miniUI">miniUI</a> packages installed, you can work interactively using a command like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_areas</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dfp_lgbtq_survey.pdf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>After using click and drag to select the region of the page containing the table, R returns the same data contained in the <code>mat</code> matrix shown earlier.</p>
</section>
<section id="cleaning-the-table" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cleaning-the-table">Cleaning the table</h2>
<p>Once we have the data in this matrix form, it’s slightly tedious to wrangle it into the format we want, but it’s not conceptually difficult once we have a few helper functions to make our lives easier. The first step is to split the matrix into a list of matrices, each of which contains the data that should belong in a single row of the final data set. The <code>row_split()</code> function below takes a matrix as input, and splits it up into a list of matrices specified by the list argument <code>rows</code>, where each element of <code>rows</code> is a vector containing the indices of the rows that should be included in the relevant element of the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">row_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, rows) {</span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(rows, \(r) {</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(x[r, ], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb18-4">    x[r, ]</span>
<span id="cb18-5">  })</span>
<span id="cb18-6">}</span>
<span id="cb18-7">groups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb18-8"></span>
<span id="cb18-9">mat_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_split</span>(mat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> groups)</span>
<span id="cb18-10">mat_split</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
     [,1]       [,2]      [,3]       [,4]       [,5]    [,6]     [,7]   [,8]     [,9]            [,10]         [,11] [,12] [,13] [,14] [,15]
[1,] ""         ""        "Black or" "Hispanic" ""      ""       ""     ""       ""              "Does not"    ""    ""    ""    ""    ""   
[2,] ""         ""        ""         ""         ""      ""       ""     "Non-"   "Identifies as" ""            "18-" "25-" "40-" "55-" ""   
[3,] "Response" "Topline" "African"  "or"       "White" "Female" "Male" ""       ""              "identify as" ""    ""    ""    ""    "65+"
[4,] ""         ""        ""         ""         ""      ""       ""     "binary" "transgender"   ""            "24"  "39"  "54"  "64"  ""   
[5,] ""         ""        "American" "Latino/​a" ""      ""       ""     ""       ""              "transgender" ""    ""    ""    ""    ""   

[[2]]
     [,1]                            [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Yes, I have considered moving" ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] ""                              "27" "24" "28" "27" "26" "20" "44" "43" "24"  "41"  "28"  "18"  "17"  "17" 
[3,] "out of my community or state"  ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[3]]
     [,1]                            [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "No, I have not considered"     ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] "moving out of my community or" "61" "57" "59" "64" "60" "75" "37" "40" "65"  "43"  "60"  "74"  "80"  "70" 
[3,] "state"                         ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[4]]
     [,1]                                [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "I have already moved out of my"    ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] "community or state as a result of" "5"  "6"  "4"  "3"  "3"  "3"  "13" "8"  "4"   "8"   "4"   "2"   "1"   "9"  
[3,] "anti-LGBTQ+ legislation"           ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[5]]
     [,1]       [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Not sure" "7"  "14" "8"  "6"  "11" "3"  "6"  "8"  "7"   "9"   "8"   "7"   "2"   "4"  

[[6]]
     [,1]         [,2]    [,3] [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Weighted N" "1,036" "93" "217" "632" "426" "368" "135" "166" "870" "249" "425" "186" "93"  "83" </code></pre>
</div>
</div>
<p>The second helper function is <code>col_paste()</code> which takes a matrix with one or more rows as input and collapses it to a vector by pasting the contents of all cells in the same column together:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">col_paste <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, \(y) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(y, ...))})</span>
<span id="cb20-3">}</span></code></pre></div>
</div>
<p>To illustrate the idea, let’s take <code>mat_split[[1]]</code>, a five-row matrix that contains the data that should eventually become our column names, and convert it to a character vector using <code>col_paste()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_paste</span>(mat_split[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "  Response  "                      
 [2] "  Topline  "                       
 [3] "Black or  African  American"       
 [4] "Hispanic  or  Latino/​a"            
 [5] "  White  "                         
 [6] "  Female  "                        
 [7] "  Male  "                          
 [8] " Non-  binary "                    
 [9] " Identifies as  transgender "      
[10] "Does not  identify as  transgender"
[11] " 18-  24 "                         
[12] " 25-  39 "                         
[13] " 40-  54 "                         
[14] " 55-  64 "                         
[15] "  65+  "                           </code></pre>
</div>
</div>
<p>Finally, we can use the <code>row_combine()</code> function below that takes a list of vectors and combines them into a matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">row_combine <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-3">}</span></code></pre></div>
</div>
<p>Equipped with these helpers, the following pipeline takes the raw output <code>mat</code> and converts it into a tibble <code>dat</code> containing the data in the format we want it to be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_split</span>(groups) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split into list of matrices</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_paste</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># paste into character vector</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_combine</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine vectors into one matrix</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.name_repair =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minimal"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to tibble</span></span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_to_names</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_number =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use first row as names</span></span>
<span id="cb24-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean the names</span></span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(                                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shorten some names</span></span>
<span id="cb24-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black_or_african_american"</span>,</span>
<span id="cb24-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hispanic"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hispanic_or_latino_a"</span>, </span>
<span id="cb24-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trans"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identifies_as_transgender"</span>,</span>
<span id="cb24-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not_trans"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"does_not_identify_as_transgender"</span></span>
<span id="cb24-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>response, \(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, x))})) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numeric data</span></span>
<span id="cb24-15"></span>
<span id="cb24-16">dat</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 15
  response                        topline black hispanic white female  male non_binary trans not_trans x18_24 x25_39 x40_54 x55_64   x65
  &lt;chr&gt;                             &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1 Yes, I have considered moving …      27    24       28    27     26    20         44    43        24     41     28     18     17    17
2 No, I have not considered movi…      61    57       59    64     60    75         37    40        65     43     60     74     80    70
3 I have already moved out of my…       5     6        4     3      3     3         13     8         4      8      4      2      1     9
4 Not sure                              7    14        8     6     11     3          6     8         7      9      8      7      2     4
5 Weighted N                         1036    93      217   632    426   368        135   166       870    249    425    186     93    83</code></pre>
</div>
</div>
<p>Et voilà!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Extracting Tables from Pdf Files with Tabulizer},
  date = {2023-06-16},
  url = {https://blog.djnavarro.net/posts/2023-06-16_tabulizer},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Extracting Tables from Pdf Files with
Tabulizer.”</span> June 16, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-16_tabulizer">https://blog.djnavarro.net/posts/2023-06-16_tabulizer</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Data Wrangling</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-16_tabulizer/</guid>
  <pubDate>Thu, 15 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-16_tabulizer/dimitra-peppa--abBaVOMsBk-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>On living in dark times</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-15_dark-times/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>As a rule, I don’t do politics on this blog. In fact, I have never previously discussed political or social issues on this blog. I’ve scrupulously avoided discussing anything that might carry the hint of politics, because I don’t wish to be drawn into the fray. I’m a data scientist, a statistician, and a generative artist. I do not have the temperament required to involve myself in matters political, and it is fundamentally not what I wish to be doing with this blog. However, sometimes exceptions need to be made, and this post is one such exception.</p>
<p>One of the feeds I follow fairly regularly is <a href="https://www.erininthemorning.com/">Erin in the Morning</a>, a substack written by <a href="https://en.wikipedia.org/wiki/Erin_Reed_(journalist)">Erin Reed</a>. Erin is an activist and independent journalist who writes about transgender issues, and one of the few people who diligently attempts to document the full scope of the anti-trans laws that are currently being passed across large swathes of the United States, and the consequences that those laws are having on transgender people who live there. It’s grim reading.</p>
<p>A couple of days ago she published a very depressing post entitled <a href="https://www.erininthemorning.com/p/us-internal-refugee-crisis-130-260k">US internal refugee crisis: 130-260k trans people have already fled</a>, documenting the scale of the crisis currently affecting trans people in the US, and presenting personalised accounts from people who have been forced to leave their lives behind and flee to safer territory. A staggeringly large number of trans people have been internally displaced. They are so frightened by what is happening right now that they have upended their lives and moved in the hope of finding safety.</p>
<p>If you haven’t read the article yet, read it first… I’ll wait.</p>
<p>Okay, you’ve read it now, right? Good.</p>
<p>At this point, if you’re a statistician (or any other data-focused person) you have one of two reactions. If you’re a decent human being, your reaction will be something like this:</p>
<blockquote class="blockquote">
<p>Fucking fuck fuck fuck this is horrible. What can I do to help?</p>
</blockquote>
<p>Unfortunately, many statisticians will have this reaction:</p>
<blockquote class="blockquote">
<p>That’s not how you should construct the estimate. Those numbers aren’t quite right, and probably an overestimate. So instead of being a decent human being I’m going to be a smug asshole, shove my head back in the sand, and ignore the very real crisis unfolding.</p>
</blockquote>
<p>Admittedly the second group would probably choose to phrase their reaction differently, because they don’t want to admit that statistical pedantry is not an appropriate response to a catastrophic situation. Nevertheless, I’ve met statisticians before. We all have. We know perfectly well that pedantry is precisely what many of them will resort to when presented with an article like this one.</p>
<p>And so, in order to cut that off at the pass and do my best to forestall anyone who might be tempted to dismiss the substance of Erin’s point by nitpicking the statistics I’m going to redo her calculations in a somewhat more statistically careful way, and you can decide for yourself whether you want to be an asshole about it.</p>
<section id="what-proportion-of-the-transgender-population-has-been-displaced" class="level2">
<h2 class="anchored" data-anchor-id="what-proportion-of-the-transgender-population-has-been-displaced">What proportion of the transgender population has been displaced?</h2>
<p>The data source is this <a href="https://www.dataforprogress.org/blog/2023/6/8/lgbtq-adults-do-not-feel-safe-and-do-not-think-the-democratic-party-is-doing-enough-to-protect-their-rights">article by Data For Progress</a>.</p>
<p>From the pdf report embedded at the bottom of the page, the point estimate suggests 8% of transgender adults (defined here as people aged 18+) in the United States have been forced to migrate interstate. However, the weighted N associated with that point estimate is only 166, because sampling transgender people is hard. We don’t have any more detailed breakdown to work with, but as a “back of the envelope” style calculation, I’ll treat this as if it were a simple random sample in which 13 of 166 transgender adults indicated that they have already been forced to move interstate because of the current crisis. To the extent that this is a reasonable first-pass approximation, a simple beta-binomial model will suffice to provide an uncertainty estimate:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Ctheta%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BBeta%7D(1,%201)%20%5C%5C%0An%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BBinomial%7D(%5Ctheta,%20N%20=%20166)%0A%5Cend%7Barray%7D%0A"></p>
<p>Given <img src="https://latex.codecogs.com/png.latex?n%20=%2013"> displaced people from a simple random sample of <img src="https://latex.codecogs.com/png.latex?N%20=%20166"> transgender people, the posterior proportion of displaced trans people is given by a Beta(14, 154) distribution.<sup>1</sup> As such our 95% equal-tail credible interval is straightforwardly calculated as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0465905 0.1294375</code></pre>
</div>
</div>
<p>In other words, the data from this survey suggest that somewhere between 5% and 13% of all transgender adults in the United States have been internally displaced as a consequence of the deluge of anti-trans legislation in the last few years.<sup>2</sup> How many people is that, really? To answer that question we need to know something about how many trans people there are in the United States.</p>
</section>
<section id="what-proportion-of-the-us-population-is-transgender" class="level2">
<h2 class="anchored" data-anchor-id="what-proportion-of-the-us-population-is-transgender">What proportion of the US population is transgender?</h2>
<p>For this we can use a relatively recent <a href="https://williamsinstitute.law.ucla.edu/publications/trans-adults-united-states">survey by the Williams Institute</a>. The webpage provides point estimates in a digestible form, but Tables 4 and A4 of the associated <a href="https://williamsinstitute.law.ucla.edu/wp-content/uploads/Trans-Pop-Update-Jun-2022.pdf">pdf report</a> includes a 95% credible interval that suggests the adult transgender population in the United States (where again age 18+ is used as the cutoff) is somewhere between 816,644 and 1,964,330 people. Or, to express it as a percentage, somewhere between 0.32% and 0.77% of the US adult population of 255,201,250 persons identifies as transgender (the point estimate is 0.52%).</p>
<p>In my ideal world I’d have access to the actual posterior distribution from the Williams Institute modelling, but alas I do not. However, since this is intended as a back-of-the-envelope style calculation, I’ll again try to make some sensible assumptions. In most situations I’d be willing to assume that the posterior is approximately normal, but that doesn’t work here because the percentages are too close to zero. Instead what I’ll do is use a beta distribution and choose parameters that ensure the relevant quantiles approximately mirror the numbers from the Williams Institute study:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.65</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3922.84</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.003230431 0.005153068 0.007716206</code></pre>
</div>
</div>
<div class="cell">
<details class="code-fold">
<summary>Parameter estimation code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the values I hand tuned originally</span></span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> \(par) {</span>
<span id="cb5-4">    prd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-5">    obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0032</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0052</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0077</span>)</span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>((obs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prd)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-7">  }</span>
<span id="cb5-8">)</span></code></pre></div>
</details>
</div>
<p>It’s awfully crude, but it works: the 95% equal-tail intervals that you’d get if this were the real posterior match the numbers reported by the Williams Institute, the distribution is bounded appropriately, and the point estimate (in this case the median) is pretty decent too. Good enough for the back of an envelope calculation I’d say.</p>
</section>
<section id="estimating-the-number-of-displaced-persons" class="level2">
<h2 class="anchored" data-anchor-id="estimating-the-number-of-displaced-persons">Estimating the number of displaced persons</h2>
<p>Okay, now I have some (slightly crude) posterior densities to express what we know about (a) the proportion of adults in the United States are transgender, and (b) the proportion of transgender adults in the United States that have been displaced courtesy of the anti-trans legislation sweeping the nation. Again using the numbers from the Williams Institute study as the basis for the calculation, I’ll assume that the adult population of the US is approximately 255,201,250 persons. Now, I personally don’t know how to convolve two beta distributions analytically, but it’s not even slightly hard to do numerically:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">sim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_adults =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255201250</span>,</span>
<span id="cb6-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_trans =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.65</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3922.84</span>),</span>
<span id="cb6-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_displaced =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>),</span>
<span id="cb6-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_displaced =</span> n_adults <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prop_trans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prop_displaced</span>
<span id="cb6-6">)</span></code></pre></div>
</div>
<p>Having done so, we can plot a distribution reflecting what we know about the number of transgender adults who have been displaced:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(sim, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_displaced)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_comma</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-15_dark-times/index_files/figure-html/displaced-trans-persons-histogram-1.png" class="img-fluid figure-img" alt="A histogram representing the uncertainty around the number of internally diplaced trans people within the United State. The plot shows a distribution with a peak at around 100000 people. The vast bulk of the distribution is between 50000 and 200000 people. There is a very slight positive skewness to the distribution." width="672"></p>
</figure>
</div>
</div>
</div>
<p>So… how many transgender people within the United States do we estimate have already been forced from their homes as a consequence of the dire political climate there? Here’s the headline number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_displaced)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 111379.2</code></pre>
</div>
</div>
<p>About 111000 people. That’s… a lot, and that number doesn’t even include the families of transgender adults, or transgender children, or the families of transgender children. I mean, there aren’t many of us. We are a small population, and this is a humanitarian disaster for transgender people in the United States. It’s something that has been building for several years now, and every trans person knows it.</p>
<p>The precise scale of the disaster isn’t entirely clear from the data. The point estimate of 111k people could be out by a factor of 2 in either direction, which you can see by calculating the 95% credible interval:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_displaced, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     2.5%     97.5% 
 51998.81 199427.60 </code></pre>
</div>
</div>
<p>Between 52000 and 199000 transgender adults have been displaced. No matter how you look at it, a <em>lot</em> of people have been forced to flee already.</p>
<p>At some point the rest of the American population will start to actually <em>do</em> something about this, right? I mean, something <strong>other</strong> than make it worse or waste your time and effort by <a href="https://statmodeling.stat.columbia.edu/2021/07/18/what-is-a-woman/">whining about the threat to society posed by trans women in sports and asking “what is a woman?”</a>.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Huge thank you to Martin Modrák for noticing the mistake in which I’d originally specified a Beta(14, 167) distribution here like an idiot.↩︎</p></li>
<li id="fn2"><p>You could do the same thing in a frequentist way, of course, but that would be no less crude than this Bayesian method, and anyway I already did that and found essentially the same answer. This isn’t a situation where Bayes-vs-orthodox matters very much. In the real world, the nuance is entirely around the SRS assumption and the accuracy of the responses. In that respect I’m of course oversimplifying, but let’s be honest… how much do you <em>really</em> think this would change things? Be honest.↩︎</p></li>
<li id="fn3"><p>The original version of this post used hand tuned parameter values because I had a brain fade and forgot that it’s absurdly easy to find least squares estimates with <code>optim()</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {On Living in Dark Times},
  date = {2023-06-15},
  url = {https://blog.djnavarro.net/posts/2023-06-15_dark-times},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“On Living in Dark Times.”</span> June
15, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-15_dark-times">https://blog.djnavarro.net/posts/2023-06-15_dark-times</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Statistics</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-15_dark-times/</guid>
  <pubDate>Wed, 14 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-15_dark-times/map.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
