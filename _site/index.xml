<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/index.html</link>
<atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://blog.djnavarro.net/profile_hex.jpg</url>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/index.html</link>
</image>
<generator>quarto-1.1.149</generator>
<lastBuildDate>Thu, 15 Sep 2022 14:00:00 GMT</lastBuildDate>
<item>
  <title>Data transfer between Python and R with rpy2 and Apache Arrow</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/index.html</link>
  <description><![CDATA[ 




<!-- 
cover img: https://unsplash.com/photos/C4sxVxcXEQg
artist: Reuben Juarez
licence: unsplash free-to-use 
-->
<!-- 
# bash commands to build this post
conda activate continuation
export LD_LIBRARY_PATH="$(python -m rpy2.situation LD_LIBRARY_PATH)":${LD_LIBRARY_PATH}
cd ~/GitHub/sites/quarto-blog/posts/2022-09-16_arrow-and-rpy2
quarto render index.qmd --execute-daemon-restart
-->
<p>In the <a href="../../posts/2022-09-09_reticulated-arrow/">last post on this blog</a> I showed how <a href="https://arrow.apache.org/">Apache Arrow</a> makes it possible to hand over data sets from R to Python (and vice versa) without making wasteful copies of the data.</p>
<p>The solution I outlined there was to use the <a href="https://rstudio.github.io/reticulate/">reticulate</a> package to conduct the handover, and rely on Arrow tools both sides to manage the data. In one sense it‚Äôs a perfectly good solution to the problem‚Ä¶ but it‚Äôs a solution tailor made for R users who need access to Python. When viewed from the perspective of a Python user who needs access to R, it‚Äôs a little awkward to have an R package (reticulate) governing the handover.<sup>1</sup> Perhaps we can find a more Pythonic way to approach this?</p>
<p>A solution to our problem is provided by the <a href="https://rpy2.github.io/">rpy2 library</a> that provides an interface to R from Python, and the <a href="https://rpy2.github.io/rpy2-arrow/version/main/html/index.html">rpy2-arrow extension</a> that allows it to support Arrow objects. Let‚Äôs take a look, shall we?</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/cover.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">This was the masthead image displayed atop the front page of <a href="https://en.wikipedia.org/wiki/The_Arrow_(newspaper)">The Arrow</a>, a newspaper published in Sydney between 1896 and 1936. It seems an appropriate way to start this post given that I‚Äôm talking about Apache Arrow, and I‚Äôm using a data set that lists works of fiction published in Australian newspapers in the 19th and early 20th centuries.<sup>2</sup></figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
<section id="setting-up-the-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-python-environment">Setting up the Python environment</h2>
<p>For the purposes of this post I‚Äôll create a fresh conda environment that I‚Äôll call ‚Äúcontinuation‚Äù, partly because this post is a continuation of the previous one and partly because the data set I‚Äôll use later is taken from a database of serialised fiction called <a href="https://cdhrdatasys.anu.edu.au/tobecontinued/">To Be Continued‚Ä¶</a>.</p>
<p>I was able install most packages I need through conda-forge, but for rpy2 and rpy2-arrow I was only able to do so from pypi so I had to use pip for that. So the code for setting up my Python environment, executed at the terminal, was as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">-n</span> continuation</span>
<span id="cb1-2"><span class="ex" style="color: null;">conda</span> install <span class="at" style="color: #657422;">-n</span> continuation pip pyarrow pandas jupyter</span>
<span id="cb1-3"><span class="ex" style="color: null;">conda</span> activate continuation</span>
<span id="cb1-4"><span class="ex" style="color: null;">pip</span> install rpy2 rpy2-arrow</span></code></pre></div>
<p>As long as I render this post with the ‚Äúcontinuation‚Äù environment active everything works smoothly.<sup>3</sup></p>
<p><br><br></p>
</section>
<section id="introducing-rpy2" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introducing-rpy2">Introducing rpy2</h2>
<p>The purpose of the rpy2 library is to allow users to call R from Python, typically with the goal of allowing access to statistical packages distributed through <a href="https://cran.r-project.org/">CRAN</a>. I‚Äôm currently using version 3.5.4, and while this blog post won‚Äôt even come close to documenting the full power of the library, the <a href="https://rpy2.github.io/doc/v3.5.x/html/index.html#">rpy2 documentation</a> is quite extensive. To give you a bit of a flavour of it, let‚Äôs import the library:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> rpy2</span>
<span id="cb2-2">rpy2.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'3.5.4'</code></pre>
</div>
</div>
<p>This does not in itself give us access to R. That doesn‚Äôt happen until we explicitly import either the <code>robjects</code> module (a high level interface to R) or import the <code>rinterface</code> model (a low level interface) and call <code>rinterface.initr()</code>. This post won‚Äôt cover <code>rinterface</code> at all; we can accomplish everything we need to using only the high level interface provided by <code>robjects</code>. So let‚Äôs import the module and, in doing so, start R running as a child process:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> rpy2.robjects <span class="im" style="color: #00769E;">as</span> robjects</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.2.1 (2022-06-23) üåà</code></pre>
</div>
</div>
<p>You‚Äôll notice that this prints a little startup message. If you‚Äôre following along at home you‚Äôll probably see something different on your own machine: most likely you‚Äôll see the standard R startup message here. It‚Äôs shorter in this output because I modified my <code>.Rprofile</code> to make R less chatty on start up.<sup>4</sup></p>
<p>Anyway, our next step is to load some packages. In native R code we‚Äôd use the <code>library()</code> function for this, but rpy2 provides a more Pythonic approach. Importing the packages submodule gives us access to <code>importr()</code>, which is allows us to load packages. The code below illustrates how you can expose the base R package and the utils R package (both of which come bundled with any minimal R installation) to Python:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> rpy2.robjects.packages <span class="im" style="color: #00769E;">as</span> pkgs</span>
<span id="cb7-2"></span>
<span id="cb7-3">base <span class="op" style="color: #5E5E5E;">=</span> pkgs.importr(<span class="st" style="color: #20794D;">"base"</span>)</span>
<span id="cb7-4">utils <span class="op" style="color: #5E5E5E;">=</span> pkgs.importr(<span class="st" style="color: #20794D;">"utils"</span>)</span></code></pre></div>
</div>
<p>Once we have access to utils we can call the R function <code>install.packages()</code> to install additional packages from CRAN. However, at this point we need to talk a little about how names are translated by rpy2. As every Python user would immediately notice, <code>install.packages()</code> is not a valid function name in Python: the dot is a special character and not permitted within the name of a function. In contrast, although not generally recommended in R except in special circumstances,<sup>5</sup> function names containing dots are syntactically valid in R and there are functions that use them. So how do we resolve this?</p>
<p>In most cases, the solution is straightforward: rpy2 will automatically convert dots in R to underscores in Python, and so in this instance the function name becomes <code>install_packages()</code>. For example, if I want to install the <a href="https://cran.r-project.org/package=fortunes">fortunes</a> package using rpy2, I would use the following command:<sup>6</sup></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">utils.install_packages(<span class="st" style="color: #20794D;">"fortunes"</span>)</span></code></pre></div>
<p>There are some subtleties around function name translation, however. I won‚Äôt talk about them in this post, other to mention that the documentation discusses this in the section on <a href="https://rpy2.github.io/doc/v2.9.x/html/robjects_functions.html">calling functions</a>.</p>
<p>In any case, now that I have successfully installed the fortunes package I can import it, allowing me to call the <code>fortune()</code> function:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">ftns <span class="op" style="color: #5E5E5E;">=</span> pkgs.importr(<span class="st" style="color: #20794D;">"fortunes"</span>)</span>
<span id="cb9-2">ftn7 <span class="op" style="color: #5E5E5E;">=</span> ftns.fortune(<span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb9-3"><span class="bu" style="color: null;">print</span>(ftn7)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
What we have is nice, but we need something very different.
   -- Robert Gentleman
      Statistical Computing 2003, Reisensburg (June 2003)

</code></pre>
</div>
</div>
<p>I‚Äôm rather fond of this quote, and it seems very appropriate to the spirit of what polyglot data science is all about. Whatever language or tools we‚Äôre working in, we‚Äôve usually chosen them for good reason. But there is no tool that works all the time, nor any language that is ideal for every situation. Sometimes we need something very different, and when we do it is very helpful if our tools able to talk fluently to each other.</p>
<p>We‚Äôre now at the point that we can tackle the problem of transferring data from Python to R, but in order to do that we‚Äôll need some data‚Ä¶</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/serpent.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">This was the header illustration to a story entitled ‚ÄúThe Trail of the Serpent‚Äù by M. E. Braddon. It was published in the <em>Molong Express and Western District Advertiser</em> on 4 August 1906. The moment I saw it I knew I had to include it here. I can hardly omit a serpent reference in a Python post, now can I? That would be grossly irresponsible of me as a tech blogger. <a href="https://trove.nla.gov.au/newspaper/article/139469044">Trove article 139469044</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
<section id="about-the-data" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="about-the-data">About the data</h2>
<p>I‚Äôve given you so many teasers about the data set for this post that it almost feels a shame to spoil it by revealing the data, but all good things must come to an end I suppose. The data I‚Äôm using are taken from the <a href="https://cdhrdatasys.anu.edu.au/tobecontinued/">To Be Continued‚Ä¶</a> database of fiction published in Australian newspapers during the 19th and early 20th century. Originally collected using the incredibly cool <a href="https://trove.nla.gov.au/">Trove</a> resource run by the National Library of Australia, the <em>To Be Continued‚Ä¶</em> data are released under a CC-BY-4.0 licence and maintained by Katherine Bode and Carol Hetherington. I‚Äôm not using the full data set here, only the metadata. In the complete database you can find full text of published pieces, and in the Trove links you can find the digitised resources from which they were sourced, but I don‚Äôt need that level of detail here. All I need is an interesting data table that I can pass around between languages. For that, the metadata alone will suffice!</p>
<p>To give you a sense of what the data set (that is, the restricted version I‚Äôm using here) looks like, let‚Äôs fire up <a href="https://pandas.pydata.org/">pandas</a> and take a peek at the structure of the table. It‚Äôs stored as a CSV file, so I‚Äôll call <code>read_csv()</code> to import the data:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">import</span> pandas</span>
<span id="cb11-2"></span>
<span id="cb11-3">fiction <span class="op" style="color: #5E5E5E;">=</span> pandas.read_csv(<span class="st" style="color: #20794D;">"fiction.csv"</span>, low_memory <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>)</span>
<span id="cb11-4">fiction.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Trove ID</th>
      <th>Common Title</th>
      <th>Publication Title</th>
      <th>Start Date</th>
      <th>End Date</th>
      <th>Additional Info</th>
      <th>Length</th>
      <th>Curated Dataset</th>
      <th>Identified Sources</th>
      <th>Publication Source</th>
      <th>...</th>
      <th>Other Names</th>
      <th>Publication Author</th>
      <th>Gender</th>
      <th>Nationality</th>
      <th>Nationality Details</th>
      <th>Author Details</th>
      <th>Inscribed Gender</th>
      <th>Inscribed Nationality</th>
      <th>Signature</th>
      <th>Name Category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>The Mystery of Edwin Drood</td>
      <td>The Mystery of Edwin Drood</td>
      <td>1871-03-04</td>
      <td>1871-06-03</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>Y</td>
      <td>LCVF</td>
      <td>NaN</td>
      <td>...</td>
      <td>NaN</td>
      <td>Dickens, Charles</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>LCVF</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>Attributed</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>The Mystery of Edwin Drood</td>
      <td>The Mystery of Edwin Drood</td>
      <td>1871-03-07</td>
      <td>1871-05-16</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>Y</td>
      <td>LCVF</td>
      <td>NaN</td>
      <td>...</td>
      <td>NaN</td>
      <td>Dickens, Charles</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>LCVF</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>Attributed</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Sporting Recollections in Various Countries</td>
      <td>Sporting Recollections in Various Countries</td>
      <td>1847-06-16</td>
      <td>1847-07-07</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>Y</td>
      <td>WPEDIA</td>
      <td>Sunday Times</td>
      <td>...</td>
      <td>NaN</td>
      <td>Viardot, M. Louis</td>
      <td>Male</td>
      <td>French</td>
      <td>NaN</td>
      <td>WPEDIA</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>Attributed</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Brownie's Triumph</td>
      <td>The Jewels</td>
      <td>1880-05-08</td>
      <td>1880-08-14</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>Y</td>
      <td>TJW</td>
      <td>NaN</td>
      <td>...</td>
      <td>Sarah Elizabeth Forbush Downs; Downs, Mrs Geor...</td>
      <td>Unattributed</td>
      <td>Female</td>
      <td>American</td>
      <td>NaN</td>
      <td>WPEDIA</td>
      <td>Uninscribed</td>
      <td>British</td>
      <td>NaN</td>
      <td>Unattributed</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>The Forsaken Bride</td>
      <td>Abandoned</td>
      <td>1880-08-21</td>
      <td>1880-12-18</td>
      <td>Fiction. From English, American and Other Peri...</td>
      <td>0.0</td>
      <td>Y</td>
      <td>TJW</td>
      <td>NaN</td>
      <td>...</td>
      <td>Sarah Elizabeth Forbush Downs; Downs, Mrs Geor...</td>
      <td>Unattributed</td>
      <td>Female</td>
      <td>American</td>
      <td>NaN</td>
      <td>WPEDIA</td>
      <td>Uninscribed</td>
      <td>British</td>
      <td>NaN</td>
      <td>Unattributed</td>
    </tr>
  </tbody>
</table>
<p>5 rows √ó 28 columns</p>
</div>
</div>
</div>
<p>Okay, that‚Äôs helpful. We can see what all the columns are and what kind of data they contain. I‚Äôm still pretty new to data science workflows in Python, but it‚Äôs not too difficult to do a little bit of data wrangling with Pandas. For instance, we can take a look at the distribution of nationalities among published authors. The table shown below counts the number of distinct publications (Trove IDs) and authors for each nationality represented in the data:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fiction[[<span class="st" style="color: #20794D;">"Nationality"</span>, <span class="st" style="color: #20794D;">"Trove ID"</span>, <span class="st" style="color: #20794D;">"Publication Author"</span>]]. <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb12-2">  groupby(<span class="st" style="color: #20794D;">"Nationality"</span>). <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb12-3">  nunique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Trove ID</th>
      <th>Publication Author</th>
    </tr>
    <tr>
      <th>Nationality</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>American</th>
      <td>3399</td>
      <td>618</td>
    </tr>
    <tr>
      <th>Australian</th>
      <td>4295</td>
      <td>757</td>
    </tr>
    <tr>
      <th>Australian/British</th>
      <td>95</td>
      <td>12</td>
    </tr>
    <tr>
      <th>Austrian</th>
      <td>3</td>
      <td>2</td>
    </tr>
    <tr>
      <th>British</th>
      <td>10182</td>
      <td>1351</td>
    </tr>
    <tr>
      <th>British/American</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>Canadian</th>
      <td>185</td>
      <td>29</td>
    </tr>
    <tr>
      <th>Dutch</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>English</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>French</th>
      <td>187</td>
      <td>64</td>
    </tr>
    <tr>
      <th>German</th>
      <td>39</td>
      <td>15</td>
    </tr>
    <tr>
      <th>Hungarian</th>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Irish</th>
      <td>63</td>
      <td>33</td>
    </tr>
    <tr>
      <th>Italian</th>
      <td>12</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Japanese</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Multiple</th>
      <td>3</td>
      <td>2</td>
    </tr>
    <tr>
      <th>New Zealand</th>
      <td>67</td>
      <td>23</td>
    </tr>
    <tr>
      <th>Polish</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Russian</th>
      <td>18</td>
      <td>13</td>
    </tr>
    <tr>
      <th>Scottish</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>South African</th>
      <td>14</td>
      <td>5</td>
    </tr>
    <tr>
      <th>Swedish</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Swiss</th>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>United States</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>Unknown</th>
      <td>13133</td>
      <td>2692</td>
    </tr>
    <tr>
      <th>Unknown, not Australian</th>
      <td>882</td>
      <td>88</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>It would not come as any surprise, at least not to anyone with a sense of Australian history, that there were far more British authors than Australian authors published in Australian newspapers during that period. I was mildly surprised to see so many American authors represented though, and I have nothing but love for the lone Italian who published 12 pieces.</p>
<p>Now that we have a sense of the data, let‚Äôs add Arrow to the mix!</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/darlington.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">An illustration from ‚ÄúThe Lass That Loved a Miner‚Äù by J. Monk Foster. Published in <em>Australian Town and Country Journal</em>, 14 April 1894. The story features such fabulous quotes as ‚ÄúPresently the two dark figures slid slowly, noiselessly, along the floor towards the scattered gold dust and he canisters filled with similar precious stuff. Inch by inch, foot by foot the two thieves crept like snakes nearer and nearer to the to the treasure they coveted‚Äù. Admit it, you‚Äôre hooked already, right? <a href="https://trove.nla.gov.au/newspaper/article/71212612">Trove article 71212612</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
<section id="pandas-to-arrow-tables" class="level2">
<h2 class="anchored" data-anchor-id="pandas-to-arrow-tables">Pandas to Arrow Tables</h2>
<p>To give ourselves access to Apache Arrow from Python we‚Äôll use the <a href="https://arrow.apache.org/docs/python/index.html">PyArrow</a> library. Our immediate goal is to convert the <code>fiction</code> data from a Pandas DataFrame to an Arrow Table. To that end, pyarrow supplies a <code>Table</code> object with a <code>from_pandas()</code> method that we can call:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">import</span> pyarrow</span>
<span id="cb13-2"></span>
<span id="cb13-3">fiction2 <span class="op" style="color: #5E5E5E;">=</span> pyarrow.Table.from_pandas(fiction)</span>
<span id="cb13-4">fiction2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>pyarrow.Table
Trove ID: int64
Common Title: string
Publication Title: string
Start Date: string
End Date: string
Additional Info: string
Length: double
Curated Dataset: string
Identified Sources: string
Publication Source: string
Newspaper ID: int64
Newspaper: string
Newspaper Common Title: string
Newspaper Location: string
Newspaper Type: string
Colony/State: string
Author ID: int64
Author: string
Other Names: string
Publication Author: string
Gender: string
Nationality: string
Nationality Details: string
Author Details: string
Inscribed Gender: string
Inscribed Nationality: string
Signature: string
Name Category : string
----
Trove ID: [[1,2,3,4,5,...,35491,35492,35493,35494,35495]]
Common Title: [["The Mystery of Edwin Drood","The Mystery of Edwin Drood","Sporting Recollections in Various Countries","Brownie's Triumph","The Forsaken Bride",...,"The Heart of Maureen","His Lawful Wife","Love's Reward","Only a Flirt","The Doctor's Protegee"]]
Publication Title: [["The Mystery of Edwin Drood","The Mystery of Edwin Drood","Sporting Recollections in Various Countries","The Jewels","Abandoned",...,"The Heart of Maureen","His Lawful Wife","Love's Reward","Only a Flirt","The Doctor's Protegee"]]
Start Date: [["1871-03-04","1871-03-07","1847-06-16","1880-05-08","1880-08-21",...,"1914-01-06","1912-10-26","1911-02-04","1916-05-06","1911-11-25"]]
End Date: [["1871-06-03","1871-05-16","1847-07-07","1880-08-14","1880-12-18",...,"1914-01-06","1912-10-26","1911-02-04","1916-05-06","1911-11-25"]]
Additional Info: [[null,null,null,null,"Fiction. From English, American and Other Periodicals",...,"Published by special arrangement. All rights reserved.","Published by special arrangement. All rights reserved.","Published by special arrangement. All rights reserved.","All  Rights Reserved","Published by special arrangement. All rights reserved."]]
Length: [[0,0,0,0,0,...,0,0,0,0,0]]
Curated Dataset: [["Y","Y","Y","Y","Y",...,"N","N","N","N","N"]]
Identified Sources: [["LCVF","LCVF","WPEDIA","TJW","TJW",...,null,null,null,null,null]]
Publication Source: [[null,null,"Sunday Times",null,null,...,null,null,null,null,null]]
...</code></pre>
</div>
</div>
<p><br></p>
<p>The <code>fiction2</code> object contains the same data as <code>fiction</code> but it is structured as an Arrow Table, and the data is stored in memory allocated by Arrow. Python itself only stores some metadata and the C++ pointer that refers to the Arrow Table. This isn‚Äôt exciting, but it will be important (and powerful!) later in a moment we transfer the data to R.</p>
<p>Speaking of which, we have arrived at the point where we get to do the fun part‚Ä¶ seamlessly handing the reins back and forth between Python and R without needing to copy the Arrow Table itself.</p>
<p><br><br></p>
</section>
<section id="passing-tables-from-python-to-r" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="passing-tables-from-python-to-r">Passing Tables from Python to R</h2>
<p>To pass Arrow objects between Python and R, rpy2 needs a little help because it doesn‚Äôt know how to handle Arrow data structures. That‚Äôs where the <a href="https://rpy2.github.io/rpy2-arrow/version/main/html/index.html">rpy2-arrow module</a> comes in. As the documentation states:</p>
<blockquote class="blockquote">
<p>The package allows the sharing of Apache Arrow data structures (Array, ChunkedArray, Field, RecordBatch, RecordBatchReader, Table, Schema) between Python and R within the same process. The underlying C/C++ pointer is shared, meaning potentially large gain in performance compared to regular arrays or data frames shared between Python and R through the conversion rules included in rpy2.</p>
</blockquote>
<p>I won‚Äôt attempt to give a full tutorial on rpy2-arrow in this post. Instead, I‚Äôll just show you how to use it to solve the problem at hand. Our first step is to import the conversion tools from rpy_arrow:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;">import</span> rpy2_arrow.pyarrow_rarrow <span class="im" style="color: #00769E;">as</span> pyra</span></code></pre></div>
</div>
<p>Having done that, the <code>pyarrow_table_to_r_table()</code> function allows us to pass an Arrow Table from Python to R:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">fiction3 <span class="op" style="color: #5E5E5E;">=</span> pyra.pyarrow_table_to_r_table(fiction2)</span>
<span id="cb16-2">fiction3</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>&lt;rpy2.rinterface_lib.sexp.SexpEnvironment object at 0x7fb5b5f5ff80&gt; [RTYPES.ENVSXP]</code></pre>
</div>
</div>
<p>The printed output isn‚Äôt the prettiest thing in the world, but nevertheless it does represent the object of interest. On the Python side we have <code>fiction2</code>, a data structure that points to an Arrow Table and enables various compute operations supplied through pyarrow. On the R side we have now created <code>fiction3</code>, a data structure that points to the <em>same</em> Arrow Table and enables compute operations supplied by the R arrow package. In the same way that <code>fiction2</code> only stores a small amount of metadata in Python, <code>fiction3</code> stores a small amount of metadata in R. Only this metadata has been copied from Python to R: the data itself remains untouched in Arrow.</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/flowers.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Header illustration to ‚ÄúWhere flowers are Rare‚Äù by Val Jameson. Published in <em>The Sydney Mail</em>, 8 December 1909. I honestly have no logical reason for including this one. But I was listening to Kylie Minogue at the time I was browsing the database and the title made me think of <a href="https://www.youtube.com/watch?v=lDpnjE1LUvE">Where the Wild Roses Grow</a>, and anyway both the song and the story have death in them. So then I simply had to include the image because‚Ä¶ it‚Äôs <em>Kylie</em>. Obviously. Sheesh. <a href="https://trove.nla.gov.au/newspaper/article/165736425">Trove article 165736425</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
<section id="accessing-the-table-from-the-r-side" class="level2">
<h2 class="anchored" data-anchor-id="accessing-the-table-from-the-r-side">Accessing the Table from the R side</h2>
<p>We‚Äôre almost done, but the tour isn‚Äôt really complete until we‚Äôve stepped out of Python entirely, manipulated the object on the R side, and then passed something back to Python. So let‚Äôs do that next.</p>
<p>In order to pull off that trick within this <a href="https://quarto.org/">quarto</a> document ‚Äì which is running <a href="https://jupyter.org/">jupyter</a> under the hood ‚Äì we‚Äôll need to employ a little notebook magic, again relying on rpy2 to supply all the sparkly bits. To help us out in this situation, the rpy2 library supplies an <a href="https://rpy2.github.io/doc/latest/html/interactive.html">interface for interactive work</a> that we can invoke in a notebook context like this:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">%</span>load_ext rpy2.ipython</span></code></pre></div>
</div>
<p>Now that we‚Äôve included this line, all I have to do is preface each cell with <code>%%R</code> and the subsequent ‚ÄúPython‚Äù code will be passed to R and interpreted there.<sup>7</sup> To start with I‚Äôll load the dplyr and arrow packages, using the <code>suppressMessages()</code> function to prevent them being chatty:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;">%%</span>R</span>
<span id="cb19-2"></span>
<span id="cb19-3">suppressMessages({</span>
<span id="cb19-4">  library(dplyr)</span>
<span id="cb19-5">  library(arrow)</span>
<span id="cb19-6">})</span></code></pre></div>
</div>
<p>Having loaded the relevant packages, I‚Äôll use the dplyr/arrow toolkit to do a little data wrangling on the <code>fiction3</code> Table. I‚Äôm not doing anything fancy, just a little cross-tabulation counting the joint distribution of genders and nationalities represented in the data using the <code>count()</code> function, and using <code>arrange()</code> to sort the results:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;">%%</span>R <span class="op" style="color: #5E5E5E;">-</span>i fiction3</span>
<span id="cb20-2"></span>
<span id="cb20-3">gender <span class="op" style="color: #5E5E5E;">&lt;-</span> fiction3 <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb20-4">  count(Gender, Nationality) <span class="op" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb20-5">  arrange(desc(n)) <span class="op" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb20-6">  compute()</span>
<span id="cb20-7">  </span>
<span id="cb20-8">gender</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>63 rows x 3 columns
$Gender &lt;string&gt;
$Nationality &lt;string&gt;
$n &lt;int64&gt;

See $metadata for additional Schema metadata</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
</div>
<p>The output isn‚Äôt very informative, but don‚Äôt worry, by the end of the post there will be a gender reveal I promise.<sup>8</sup> Besides, the actual values of <code>gender</code> aren‚Äôt important right now. In truth, the part that we‚Äôre most interested in here is the first line of code. By using <code>%%R -i fiction3</code> to specify the cell magic, we‚Äôre able to access the <code>fiction3</code> object from R within this cell and perform the required computations.</p>
<p>Oh, and also we now have a new <code>gender</code> object in our R session that we probably want to pull back into Python!</p>
<p><br><br></p>
</section>
<section id="the-journey-home-a-tale-of-four-genders" class="level2">
<h2 class="anchored" data-anchor-id="the-journey-home-a-tale-of-four-genders">The journey home: A tale of four genders</h2>
<p>Okay. So we now have an object in the embedded R session that we might wish to access from the Python session and convert to a Python object. First we‚Äôll pass the Arrow Table from R to Python and then convert to a Pandas DataFrame. Here‚Äôs how that process works. If you recall from earlier in the post, we imported <code>robjects</code> to start the embedded R session. When we did so, we also exposed <code>robjects.r</code>, which provides access to all objects within that R session. To create a Python object <code>gender2</code> that refers to the R data structure we created in the last section, here‚Äôs what we do:</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">gender2 <span class="op" style="color: #5E5E5E;">=</span> robjects.r(<span class="st" style="color: #20794D;">'gender'</span>)</span>
<span id="cb25-2">gender2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>&lt;rpy2.robjects.environments.Environment object at 0x7fb5b698bf00&gt; [RTYPES.ENVSXP]
R classes: ('Table', 'ArrowTabular', 'ArrowObject', 'R6')
n items: 36</code></pre>
</div>
</div>
<p>Importantly, notice that this is the same object. The <code>gender2</code> variable still refers to the Arrow Table in R: it‚Äôs <em>not</em> a pyarrow table. If we want to convert it to a data structure that pyarrow understands, we can again use the rpy-arrow conversion tools. In this case, we can use the <code>rarrow_to_py_table()</code> function:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">gender3 <span class="op" style="color: #5E5E5E;">=</span> pyra.rarrow_to_py_table(gender2)</span>
<span id="cb27-2">gender3</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>pyarrow.Table
Gender: string
Nationality: string
n: int64
----
Gender: [["Unknown","Male","Female","Male","Female",...,"Both","Female","Female","Female",null]]
Nationality: [["Unknown","British","British","Australian","Australian",...,"Australian/British","British/American","South African","Polish","Australian"]]
n: [[12832,6420,3346,2537,1687,...,1,1,1,1,1]]</code></pre>
</div>
</div>
<p>Just like that, we‚Äôve handed over the Arrow Table from R back to Python. Again, it helps to remember that <code>gender2</code> is an R object and <code>gender3</code> is a Python object, but both of them point to the same underlying Arrow Table.</p>
<p>In any case, now that we have <code>gender3</code> on the Python side, we can use the <code>to_pandas()</code> method from <code>pyarrow.Table</code> to convert it to a pandas data frame:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">gender4 <span class="op" style="color: #5E5E5E;">=</span> pyarrow.Table.to_pandas(gender3)</span>
<span id="cb29-2">gender4</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Gender</th>
      <th>Nationality</th>
      <th>n</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Unknown</td>
      <td>Unknown</td>
      <td>12832</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Male</td>
      <td>British</td>
      <td>6420</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Female</td>
      <td>British</td>
      <td>3346</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Male</td>
      <td>Australian</td>
      <td>2537</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Female</td>
      <td>Australian</td>
      <td>1687</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>58</th>
      <td>Both</td>
      <td>Australian/British</td>
      <td>1</td>
    </tr>
    <tr>
      <th>59</th>
      <td>Female</td>
      <td>British/American</td>
      <td>1</td>
    </tr>
    <tr>
      <th>60</th>
      <td>Female</td>
      <td>South African</td>
      <td>1</td>
    </tr>
    <tr>
      <th>61</th>
      <td>Female</td>
      <td>Polish</td>
      <td>1</td>
    </tr>
    <tr>
      <th>62</th>
      <td>None</td>
      <td>Australian</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>63 rows √ó 3 columns</p>
</div>
</div>
</div>
<p>And with that our transition home is complete!</p>
<p><br><br></p>
</section>
<section id="summary" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post has wandered over a few topics, which is perhaps to be expected given the nature of polyglot data science. To make it all work smoothly I needed to think a little about how my Python and R environments are set up: the little asides I buried in footnotes mention the frictions I encountered in getting rpy2 to work smoothly for me, for instance. As someone who primarily uses R it took me a little while to work out how to get quarto to switch cleanly from a knitr engine to a jupyter engine. The R and Python libraries implementing Apache Arrow make it look seamless when we handover data from one language to another ‚Äì and in some ways they actually do make it seamless in spite of the many little frictions that exist with Arrow, no less than any other powerful and rapidly-growing tool ‚Äì but a <em>lot</em> of work has gone into making that transition smooth. Whether you‚Äôre an R focused developer using reticulate or a Python focused developer who prefers rpy2, the toolkit is there. I‚Äôm obviously biased in this because so much of my work revolves around Arrow these days, but at some level I‚Äôm still actually shocked that it (and other polyglot tools) works as well as it does. Plus, I‚Äôm having a surprising amount of fun teaching myself ‚ÄúPythonic‚Äù ways of thinking and coding, so that‚Äôs kind of cool too.</p>
<p>Hopefully this post will help a few other folks get started in this area!</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/motorcar.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Header illustration to ‚ÄúThe Black Motor Car‚Äù by J. B. Harris Burland. Published in ‚Äì just to bring us full circle ‚Äì <em>The Arrow</em>, 25 November 1905. I cannot properly do justice to this work of art so I will merely quote: ‚ÄúAgain he took her in his arms, and this time she did not try to free herself from his embrace. But she looked up at him with pleading eyes. He bent down his face and kissed her tenderly on the forehead. His whole nature cried out for the touch of her lips, but he was man enough to subdue the passion that burnt within him.‚Äù <a href="https://trove.nla.gov.au/newspaper/article/103450814">Trove article 103450814</a></figcaption><p></p>
</figure>
</div>
</div>
</section>



<div id="quarto-appendix" class="default"><section id="acknowledgements" class="level2 appendix"><h2 class="quarto-appendix-heading">Acknowledgements</h2><div class="quarto-appendix-contents">

<p>In writing this post I am heavily indebted to Isabella Vel√°squez, whose fabulous post on <a href="https://rviews.rstudio.com/2022/05/25/calling-r-from-python-with-rpy2/">calling R from Python with rpy2</a> helped me immensely. The <a href="https://arrow.apache.org/docs/python/integration/python_r.html">documentation on integrating PyArrow with R</a> was extremely helpful too! Thank you to <a href="https://twitter.com/kae_suarez">Kae Suarez</a> for reviewing this post.</p>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Relatedly, if you‚Äôre a Python user blogging in quarto, you are very unlikely to be using the <a href="https://quarto.org/docs/reference/cells/cells-knitr.html">knitr engine</a> to execute code like I did in the last blog post. Instead you‚Äôre almost certainly using the <a href="https://quarto.org/docs/reference/cells/cells-jupyter.html">jupyter engine</a>. With that in mind, and with the goal of making this post a little more Pythonic, I‚Äôm using Jupyter this time.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>A note on image copyright. As far as I can tell all images in this post are public domain. They‚Äôre all sourced from Trove and are all over a century old, meaning that they are all covered by the ‚Äúplus 50 years‚Äù rule in Australian copyright law (the current ‚Äúplus 70‚Äù rule does not apply retroactively). The original illustrator is difficult to determine, and given the age of the images so too is any potential copyright holder, but it seems extremely unlikely that any are still covered by any copyright. As always, I will remove any image if I discover that I am incorrect in this.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>Ha ha. Just kidding. Aaaaaaaaactualllllllly, it will <em>probably</em> work smoothly for most people. But there are exceptions, and because I am a foolish tinkerer and have a nonstandard R configuration I am one of them. I have recently made the decision to use the <a href="https://github.com/r-lib/rig">rig manager</a> to configure multiple concurrent R installations on my laptop. This introduces a some complexity, because rig necessarily installs R to non standard locations. Now, rig does the right thing and correctly sets the PATH environment variable so that rpy2 (and bash) can find R, but it does lead to some peculiar behaviour where rpy2 doesn‚Äôt find some of the C libraries need. In the rpy2 readme there‚Äôs a discussion of this issue. In such cases you need to tweak the LD_LIBRARY_PATH environment variable before starting Python: <code>export LD_LIBRARY_PATH="$(python -m rpy2.situation LD_LIBRARY_PATH)":${LD_LIBRARY_PATH}</code>‚Ü©Ô∏é</p></li>
<li id="fn4"><p>As an aside, it‚Äôs worth noting that rpy2 has run R with my default configuration (notwithstanding the fact that my defaults are configured using rig). It hasn‚Äôt loaded any specific R environment. It did occur to me that a complete discussion of this topic would also describe how a Python user could use rpy2 to configure the R environment using the <a href="https://rstudio.github.io/renv/index.html">renv</a> package for instance, but to be honest that started to feel a little beyond the scope of the post. About the only thing I <em>will</em> mention here is that in this particular use case (namely, passing Arrow objects between R and Python) I would not recommend trying to configure the Python environment and the R environment within the same conda environment. Because that thought occurred to me too. I tried it and oh my‚Ä¶ the number of unsolvable conflicts was truly impressive.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>The dot is typically used to denote an <a href="https://adv-r.hadley.nz/s3.html">S3</a> method in R, but because R embraces chaos this is not universally adhered to and in any case S3 is‚Ä¶ look, I love S3 but as Hadley Wickham once observed it‚Äôs an object oriented programming system that absolutely allows you to shoot yourself in the foot if you want to. Anyway. This is not the post for ramblings about the chaotic splendour of R.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>Depending on how blank your R configuration is, you may need to specify which CRAN mirror you want to download the package from before attempting the installation. To do that, include a command like <code>utils.chooseCRANmirror(ind=1)</code> to select the first mirror on the list of known servers.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>Okay, that brings me to something I didn‚Äôt really cover in my last post. Some R users might be wondering about what was going on in the last post where I was flipping back and forth between R and Python without apparently doing anything like this. The answer is that when using <a href="https://yihui.org/knitr/">knitr</a> as the engine rather than jupyter, python code is automatically interpreted with the help of reticulate. However, that feature is exposed by default in the knitr engine so I didn‚Äôt need to invoke it explicitly the way I‚Äôm doing here in jupyter.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>I‚Äôm sorry. The joke was too obvious, yet too hard to resist.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Data Transfer Between {Python} and {R} with Rpy2 and {Apache}
    {Arrow}},
  date = {2022-09-16},
  url = {https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúData Transfer Between Python and R with
Rpy2 and Apache Arrow.‚Äù</span> September 16, 2022. <a href="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2">https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>R</category>
  <category>Python</category>
  <guid>https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/index.html</guid>
  <pubDate>Thu, 15 Sep 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sudo ask me a password</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass/index.html</link>
  <description><![CDATA[ 




<!--
cover image:
author: Ola Mishchenko
url: https://unsplash.com/photos/VRB1LJoTZ6w
licence: Free to use under the Unsplash License

-->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>One peculiar feature of earning one‚Äôs keep in society by writing a data science blog is that it provides the opportunity to be unabashedly weird. Personality is important. Other developers will read your strange content ‚Äì no matter how weird and unprofessional it is ‚Äì because professional corporate style is very nearly as dull as academic writing, and it is a relief to learn a new thing from an actual human being who write with a certain level of human character.</p>
<p>Even if she is an irredeemably catty bitch.</p>
<p>All of which is by way of preamble, and a way to acknowlege that when the topic is package dependencies in R, the queer double entendres kind of write themselves.<sup>1</sup> And so without further ado, today‚Äôs unhinged rambling‚Ä¶</p>
<section id="managing-package-dependencies-in-r" class="level2">
<h2 class="anchored" data-anchor-id="managing-package-dependencies-in-r">Managing package dependencies in R</h2>
<p>Okay so you‚Äôve done your due diligence. You‚Äôve read his pkgdown site, checked out his repo, and you still like him. You really, <em>really</em> want to install his package. You‚Äôve inspected the documentation and it is a very impressive package. I mean, I get it babe.</p>
<p>I. have. been. there.</p>
<p>There‚Äôs a thing with packages though. When you‚Äôre installing them into wherever you like to put packages (the precise location doesn‚Äôt matter for this post<sup>2</sup>), what you see isn‚Äôt necessarily all you get.</p>
<p>I‚Äôll give a concrete example. For reasons unknown even to me I woke up this morning and decided today was the day I‚Äôd explore the <a href="https://github.com/r-lib/rig">rig installation manager</a> for R that lets you manage multiple R installations on the one machine. It‚Äôs very nice, and possibly the topic for a future post. However, one side consequence to adopting rig is that I ended up with adorably fresh copies of R that had no installed packages and needed to be properly set up. In the process, I started thinking a little about the tools I use to install packages. When I first started using R my go to method was to use the <code>install.packages()</code> function supplied by the utils package: after all, it comes bundled with R, which makes it an easy place to start. As I matured as an R user I found myself switching to the <a href="https://remotes.r-lib.org/">remotes package</a> because it provides a coherent set of functions for installing packages from CRAN, Bioconductor, GitHub, and more. I‚Äôm a huge fan of remotes, but for reasons I‚Äôll explain in a moment I‚Äôm starting to prefer the <a href="https://pak.r-lib.org/">pak package</a> developed by G√°bor Cs√°rdi and Jim Hester. When using pak, the function you use to install packages is called <code>pkg_install()</code>. I‚Äôll walk you through it. Here‚Äôs what happens when I try to install the <a href="https://quarto-dev.github.io/quarto-r/">quarto R package</a> without properly configuring my setup. First I call the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">pak<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pkg_install</span>(<span class="st" style="color: #20794D;">"quarto"</span>)</span></code></pre></div>
</div>
<p>When I hit enter, pak starts doing its job, resolving the R dependencies and then asking if I want to continue:</p>
<pre><code>‚úì Loading metadata database ... done
                                                                            
‚Üí Will install 2 packages.
‚Üí Will update 1 package.
‚Üí Will download 3 packages with unknown size.
+ packrat         0.8.1  [bld][dl]
+ quarto    1.1 ‚Üí 1.2    [bld][dl]
+ rsconnect       0.8.27 [bld][dl]
? Do you want to continue (Y/n) </code></pre>
<p>I really like this approach. The interface is very clear about precisely what is happening, and pak doesn‚Äôt download any more packages than is absolutely necessary to give you what you asked for (unless you specify <code>upgrade = TRUE</code> in the install command).</p>
<p>I agree to continue, so off pak goes, fetching the appropriate R packages:</p>
<pre><code>‚Ñπ Getting 3 pkgs with unknown sizes
‚úì Got quarto 1.2 (source) (67.58 kB)                                             
‚úì Got rsconnect 0.8.27 (source) (685.57 kB)                                      
‚úì Got packrat 0.8.1 (source) (681.50 kB)                                         
‚úì Downloaded 3 packages (1.43 MB)in 6.7s</code></pre>
<p>So far, so good. The output is informative and succinct at the same time. It appeals to my aesthetic sensibilities. But then pak ‚Äì which is very diligent about managing all dependencies including system dependencies ‚Äì attempts to install the external libraries upon which quarto depends,<sup>3</sup> and this happens:</p>
<pre><code>‚Ñπ Installing system requirements
‚Ñπ Executing `sudo sh -c apt-get install -y make`
Error: System command 'sudo' failed, exit status: 1, stdout + stderr:
E&gt; sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper</code></pre>
<p>Ah.</p>
<p><br><br></p>
</section>
<section id="what-went-wrong-here" class="level2">
<h2 class="anchored" data-anchor-id="what-went-wrong-here">What went wrong here?</h2>
<p>An important thing to understand here is that neither pak nor <a href="https://www.sudo.ws/">sudo</a> are to blame for the installation failure.<sup>4</sup> On the pak side, it‚Äôs a <em>good</em> thing that it tries to uncover and install system dependencies: the package isn‚Äôt going to work if you don‚Äôt have those dependencies installed, and it can be a nightmare trying to track them all down when the package manager doesn‚Äôt help identify them for you.<sup>5</sup> On the sudo side, it is extremely reasonable to expect the user to authenticate <em>before</em> enabling superuser privileges. Speaking for myself, I have a very strong expectation that I will be explicitly asked for my consent before packages are installed on my system.<sup>6</sup></p>
<p>The breakdown happens because pak has invoked sudo outside of the terminal context. If you haven‚Äôt configured sudo to handle this situation, there‚Äôs no opportunity for the user to authenticate, and sudo throws an error.</p>
<p>How can we resolve this?</p>
<p><br><br></p>
</section>
<section id="configuring-sudo" class="level2">
<h2 class="anchored" data-anchor-id="configuring-sudo">Configuring sudo</h2>
<p>A little bit of digging revealed that sudo is a lot more configurable than I had preciously realised, and you can deal with this issue in a few different ways. One possibility would be to <a href="https://www.simplified.guide/linux/enable-passwordless-sudo">enable passwordless sudo</a>, in which case the system dependencies would be installed without requiring a password at all. That would certainly minimise the amount of hassle at my end, but it‚Äôs also a hell of a security risk. Even if I personally felt willing to take that risk with my own property, this is a work laptop and I think a little risk-aversion is a good idea in this case.<sup>7</sup></p>
<p>Fortunately, the error message itself contains some hints that there is an alternative fix that doesn‚Äôt require you to weaken your security settings (or not by very much, at any rate). Specifically, the error message refers to an ‚Äúaskpass helper‚Äù: a program, usually with a GUI, that sudo will invoke whenever it needs authentication from the user but is not running in a terminal. However, in order to get sudo to invoke one of these helpers, you have to explicitly configure it within the sudo configuration file, <code>sudo.conf</code>. This configuration file is located at <code>/etc/sudo.conf</code> is discussed pretty thoroughly in the sudo help documentation. Here‚Äôs the relevant part of the output when I type <code>man sudo.conf</code>:<sup>8</sup></p>
<div class="pre">
<pre><code> askpass   The fully qualified path to a helper program used to read the
           user's password when no terminal is available.  This may be
           the case when sudo is executed from a graphical (as opposed to
           text-based) application.  The program specified by askpass
           should display the argument passed to it as the prompt and
           write the user's password to the standard output.  The value
           of askpass may be overridden by the SUDO_ASKPASS environment
           variable.</code></pre>
</div>
<p>Okay, so I need to do two things. I need to edit <code>sudo.conf</code> to configure sudo to use the askpass helper, and I also need the askpass helper itself. So where do I find one of these askpass helper programs? The one I chose to go with is <a href="https://man.openbsd.org/ssh-askpass.1">ssh-askpass</a>, which I installed on my system using the following:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">sudo</span> apt-get install ssh-askpass ssh-askpass-gnome</span></code></pre></div>
<p>Notice that I installed both ssh-askpass and <a href="https://manpages.debian.org/testing/ssh-askpass-gnome/gnome-ssh-askpass.1.en.html">ssh-askpass-gnome</a>. The latter isn‚Äôt the askpass helper itself, and isn‚Äôt intended to be invoked separately from ssh-askpass. Rather it‚Äôs there because ssh-askpass on its own uses <a href="https://x.org/wiki/">X11</a> to do the graphical user interface part and it‚Äôs not very pretty on my Ubuntu installation. By installing ssh-askpass-gnome as well, the dialog box that comes up when ssh-askpass is invoked is much nicer.</p>
<p>At the terminal, I can invoke ssh-askpass manually if I want to. It doesn‚Äôt do much by itself: all it does is create the dialog box and return the text input by the user.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">ssh-askpass</span></span></code></pre></div>
<p>In practice you don‚Äôt actually call this directly. Instead, you configure sudo to that whenever it needs authentication but doesn‚Äôt have access to a terminal. In order to accomplish this, here‚Äôs the lines I added to my sudo.conf file:<sup>9</sup></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># specify ssh-askpass as my helper</span></span>
<span id="cb8-2"><span class="ex" style="color: null;">Path</span> askpass /usr/bin/ssh-askpass</span></code></pre></div>
<p>So I did this and then<sup>10</sup> tried to install quarto using <code>pkg_install()</code>. This time around sudo no longer errored when pak tried to install system dependencies. Instead it brought up the askpass dialog box:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass/img/askpass-screen.png" class="img-fluid"></p>
<p>When I typed in my password, pak and sudo were able to play nicely together and the installation worked just fine. Well, mostly..</p>
</section>
<section id="can-we-relax-just-a-little-sweetie" class="level2">
<h2 class="anchored" data-anchor-id="can-we-relax-just-a-little-sweetie">Can we relax just a little sweetie?</h2>
<p>The only problem is that quarto installation requires <em>five</em> system dependencies to be installed, and as the output below shows, pak starts a new shell process every single time‚Ä¶</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> make<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb9-2"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libcurl4-openssl-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb9-3"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libicu-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb9-4"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libssl-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb9-5"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> pandoc<span class="kw" style="color: #003B4F;">`</span></span></code></pre></div>
<p>‚Ä¶and as a consequence of this I had to enter my password five times.</p>
<p>That‚Äôs mildly irritating, and I was not expecting it. My original assumption would be that entering the password the first time would invoke the sudo password cache: that is, after entering my password once, the elevated permissions<sup>11</sup> would persist for about 15 minutes. That‚Äôs what happens by default at the terminal, and I had presumed the same would apply when the call to sudo occurs within an R session. However, that‚Äôs not <em>quite</em> accurate. This little gem in <code>man sudo</code> explains the relevant security policy issue:</p>
<pre><code>     Security policies may support credential caching to allow the
     user to run sudo again for a period of time without requiring
     authentication.  By default, the sudoers policy caches creden‚Äê
     tials on a per-terminal basis for 15 minutes.  See the
     timestamp_type and timestamp_timeout options in sudoers(5) for
     more information.  By running sudo with the -v option, a user
     can update the cached credentials without running a command.
</code></pre>
<p>The reason why the ‚Äú15 minutes‚Äù rule doesn‚Äôt apply here is that the credentials are cached on a ‚Äúper-terminal‚Äù basis. Each <code>sudo sh</code> command invoked by pak effectively runs a new instance of the shell and the password caching doesn‚Äôt transfer. Gr.</p>
</section>
<section id="editing-the-sudoers-file" class="level2">
<h2 class="anchored" data-anchor-id="editing-the-sudoers-file">Editing the sudoers file</h2>
<p>As a general rule I can understand why sudo is conservative and does not permit the credential cache to transfer across processes. Who knows what other processes are running and what they might be doing? But in this instance I‚Äôm willing to slightly relax the security policy to ensure that the pak/sudo combination doesn‚Äôt drive me crazy by relentlessly asking for permission on every little thing.</p>
<p>The security policies in sudo are managed by plugins<sup>12</sup> configured using the ‚Äúsudoers‚Äù file(s) located at <code>/etc/sudoers</code>. I‚Äôll talk about this file momentarily, but first here‚Äôs the relevant extract from <code>man sudoers</code> that tells us what setting we need to modify:</p>
<pre><code>     timestamp_type    sudoers uses per-user time stamp files for
                       credential caching.  The timestamp_type op‚Äê
                       tion can be used to specify the type of time
                       stamp record used.  It has the following
                       possible values:

                       global  A single time stamp record is used
                               for all of a user's login sessions,
                               regardless of the terminal or parent
                               process ID.  An additional record is
                               used to serialize password prompts
                               when sudo is used multiple times in
                               a pipeline, but this does not affect
                               authentication.

                       ppid    A single time stamp record is used
                               for all processes with the same par‚Äê
                               ent process ID (usually the shell).
                               Commands run from the same shell (or
                               other common parent process) will
                               not require a password for
                               timestamp_timeout minutes (15 by
                               default).  Commands run via sudo
                               with a different parent process ID,
                               for example from a shell script,
                               will be authenticated separately.

                       tty     One time stamp record is used for
                               each terminal, which means that a
                               user's login sessions are authenti‚Äê
                               cated separately.  If no terminal is
                               present, the behavior is the same as
                               ppid.  Commands run from the same
                               terminal will not require a password
                               for timestamp_timeout minutes (15 by
                               default).

                       kernel  The time stamp is stored in the ker‚Äê
                               nel as an attribute of the terminal
                               device.  If no terminal is present,
                               the behavior is the same as ppid.
                               Negative timestamp_timeout values
                               are not supported and positive val‚Äê
                               ues are limited to a maximum of 60
                               minutes.  This is currently only
                               supported on OpenBSD.

                       The default value is tty.

                       This setting is only supported by version
                       1.8.21 or higher.
</code></pre>
<p>This documentation makes clear where the problem lies. When pak invokes sudo, a new process is spawned and unless the value of <code>timestamp_type</code> is set to <code>global</code>, the sudo credential cache doesn‚Äôt get shared across processes.</p>
<p>It‚Äôs possible to modify this setting, and I‚Äôll show you how to do that below, but first I strongly recommend that you read this article on <a href="https://www.digitalocean.com/community/tutorials/how-to-edit-the-sudoers-file">how to edit the sudoers file</a> carefully. <em>For realsies, my dears, read it</em>. Editing policies for sudo needs to be done with a lot of care. You don‚Äôt want to mess it up and lose the ability to invoke sudo because it‚Äôs been incorrectly configured. So please, please read the linked page.</p>
<p>You read it, right?</p>
<p>Good.</p>
<p>After reading through the linked article, I made the decision that instead of editing the main sudoers file, I would instead add a small file to the <code>/etc/sudoers.d/</code> directory. By default, files in this folder are automatically included when the sudoers plugin is loaded, so it‚Äôs a convenient place to add your customisations rather than editing the main file. I created one that exists solely to manage the timestamp settings for my primary user:</p>
<pre><code>sudo visudo -f /etc/sudoers.d/timestamp_type</code></pre>
<p>Notice that I‚Äôve used <a href="https://www.sudo.ws/docs/man/1.8.13/visudo.man/">visudo</a>, and not some other editor. If you read the linked article you know why I did that, and why it is astonishingly important to do it this way in order to practice safe sudo<sup>13</sup> policy editing. If you didn‚Äôt read the linked article‚Ä¶ well, you would be <em>extremely</em> ill-advised to try the next step without actually reading it.</p>
<p>Okay, that feels like enough warning. Let‚Äôs look at what I included in my new <code>/etc/sudoers.d/timestamp_type</code> file:</p>
<pre><code># specify the timeout type (usual default=tty)
Defaults:danielle timestamp_type=global

# specify the timeout interval (usual default=15)
Defaults:danielle timestamp_timeout=2</code></pre>
<p>I‚Äôve done two things. First, in order to allow the sudo password cache to work everywhere regardless of which process invokes it, I set <code>timestamp_type=global</code>. Second, because this makes me a tiny bit nervous (it‚Äôs a very mild softening of security policies), I shortened the cache expiry time from 15 minutes to 2 minutes by setting <code>timestamp_timeout=2</code>. In practice, I very rarely do anything requiring superuser privileges that requires more than two minutes, and it seems best to let those privileges expire quickly.</p>
</section>
<section id="youre-a-star" class="level2">
<h2 class="anchored" data-anchor-id="youre-a-star">You‚Äôre a star</h2>
<p>At this point I have a set up that lets me use pak without needing to weaken my security policies (well, not by much) and won‚Äôt cause me to lose my mind by typing in my password over and over until I beg for the sweet release<sup>14</sup> of death. Was it all worth it?</p>
<p>Well, let me just say this: out of curiosity I decided to try installing the stars package, which necessarily entails installing a lot of geospatial dependencies. Back when I first tried installing these tools on linux a couple of years ago it was a nightmare. I had to track down the dependencies myself and manually install them, which was pretty daunting at the time because I was very new to the whole business.<sup>15</sup> Here‚Äôs what happened when I tried it with pak after configuring sudo to ask for my password only the once:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">pak<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pkg_install</span>(<span class="st" style="color: #20794D;">"stars"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;">‚Üí</span> Will install 1 package.</span>
<span id="cb15-2"><span class="ex" style="color: null;">‚Üí</span> Will download 1 package with unknown size.</span>
<span id="cb15-3"><span class="ex" style="color: null;">+</span> stars   0.5-6 [bld][dl]</span>
<span id="cb15-4"><span class="ex" style="color: null;">‚Ñπ</span> Getting 1 pkg with unknown size</span>
<span id="cb15-5"><span class="ex" style="color: null;">‚úì</span> Got stars 0.5-6 <span class="er" style="color: #AD0000;">(</span><span class="bu" style="color: null;">source</span><span class="kw" style="color: #003B4F;">)</span> <span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">3.42</span> MB<span class="kw" style="color: #003B4F;">)</span>                                  </span>
<span id="cb15-6"><span class="ex" style="color: null;">‚úì</span> Downloaded 1 package <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">3.42</span> MB<span class="kw" style="color: #003B4F;">)</span><span class="er" style="color: #AD0000;">in</span> <span class="ex" style="color: null;">4.2s</span>                               </span>
<span id="cb15-7"><span class="ex" style="color: null;">‚Ñπ</span> Installing system requirements</span>
<span id="cb15-8"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libgdal-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-9"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> gdal-bin<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-10"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libgeos-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-11"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libssl-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-12"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libproj-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-13"><span class="ex" style="color: null;">‚Ñπ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libudunits2-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-14"><span class="ex" style="color: null;">‚Ñπ</span> Building stars 0.5-6</span>
<span id="cb15-15"><span class="ex" style="color: null;">‚úì</span> Built stars 0.5-6 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">1.4s</span><span class="kw" style="color: #003B4F;">)</span>                                       </span>
<span id="cb15-16"><span class="ex" style="color: null;">‚úì</span> Installed stars 0.5-6  <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">98ms</span><span class="kw" style="color: #003B4F;">)</span>                                    </span>
<span id="cb15-17"><span class="ex" style="color: null;">‚úì</span> 1 pkg + 16 deps: kept 12, added 1, dld 1 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">3.42</span> MB<span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[20.7s]</span>    </span></code></pre></div>
<p>One line of code. One line of code, that worked the first time. One line of code that worked the first time and installed everything quickly. It‚Äôs a true Christmas miracle.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Like so many moments in life when I get this way, <a href="https://twitter.com/dan_p_simpson/status/1565948834542669826">Dan Simpson</a> is at least partially to blame.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Per <em>Lawrence v Texas</em>.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>It took all the self-restraint I possess not to refer to this as ‚Äúthe undisclosed viagra problem‚Äù in the title. Footnotes are the place for such things Danielle. Footnotes.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>These things happen to everyone sometimes honey, it‚Äôs no big deal, etc.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>Conveniently, pak also allows you to identify these dependencies separately from the R package installation. To do this, use the <code>pkg_system_requirements()</code> function.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>There‚Äôs an unpleasant name for people who break that convention, and I can‚Äôt think of a joke for this one because it‚Äôs astonishingly horrible. If you don‚Äôt know from personal experience what it feels like, well, consider yourself fortunate. Sigh.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>Okay sure, I haven‚Äôt <em>technically</em> asked DevOps for their opinion about the possibility of me dumping the authentication requirements on superuser privileges on a work machine. Nevertheless I do have a suspicion I know what their answer would be. So, in the interests of not causing unnecessary distress, perhaps a different approach is in order‚Ä¶‚Ü©Ô∏é</p></li>
<li id="fn8"><p>The <a href="https://www.sudo.ws/docs/man/1.9.9/sudo.conf.man/">manual page</a> is online at the linked URL.‚Ü©Ô∏é</p></li>
<li id="fn9"><p>In the interests of strict accuracy, I should add that had to create this file myself because it didn‚Äôt already exist on my system: prior to making this edit, sudo was using all the default settings. Relatedly, I had to use <code>whereis ssh-askpass</code> in order to find the path to ssh-askpass because the advice I‚Äôd seen online listed a different path and, shockingly, it doesn‚Äôt work if you don‚Äôt provide the correct path.‚Ü©Ô∏é</p></li>
<li id="fn10"><p>After restarting R, just in case.‚Ü©Ô∏é</p></li>
<li id="fn11"><p>Negotiations are vital and CNC isn‚Äôt for newbies.‚Ü©Ô∏é</p></li>
<li id="fn12"><p>With flared bases one hopes.‚Ü©Ô∏é</p></li>
<li id="fn13"><p>Surely you cannot have expected me to pass up the opportunity to make a safe sudo joke?‚Ü©Ô∏é</p></li>
<li id="fn14"><p>Nah, too obvious. Feel free to come up with your own joke here, you don‚Äôt need my help.‚Ü©Ô∏é</p></li>
<li id="fn15"><p>We all were at one time.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Sudo Ask Me a Password},
  date = {2022-09-04},
  url = {https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúSudo Ask Me a Password.‚Äù</span> September
4, 2022. <a href="https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass">https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>Credentials</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass/index.html</guid>
  <pubDate>Sat, 03 Sep 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to visualise a billion rows of data in R with Apache Arrow</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>It‚Äôs been a couple of months since I published anything on this blog. In my defence, I‚Äôve been busy: I spent the month of June developing a workshop and website on <a href="https://arrow-user2022.netlify.app/">larger than memory workflows in R with Apache Arrow</a> for the useR! conference, and I spent July doing the same thing for my <a href="https://art-from-code.netlify.app/">art from code</a> workshop at rstudio::conf. But I am back to blogging now and I‚Äôm going to ease myself into it with a post that mixes some ideas from both of those workshops: how to use Arrow to assist in visualising large data sets. Specifically, I‚Äôm going to construct a map showing the geographic distribution of pickup locations for a billion or so taxi rides in New York.<sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tictoc)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span></code></pre></div>
</div>
<section id="the-nyc-taxi-data" class="level2">
<h2 class="anchored" data-anchor-id="the-nyc-taxi-data">The NYC taxi data</h2>
<p>At this point in my life I have used the ‚ÄúNYC Taxi Data‚Äù for so many illustrative examples I feel like I don‚Äôt need to explain it: doesn‚Äôt ‚Äúeveryone‚Äù know about this data by now? Yeah, no dice sweetie. That‚Äôs a terrible intuition. Most people don‚Äôt know the data, and those that do can just skip to the next section! :-)</p>
<p>Here‚Äôs a quick summary of the data set. In its full form, the data set takes the form of one very large table with about 1.7 billion rows and 24 columns. Each row corresponds to a single taxi ride sometime between 2009 and 2022. There‚Äôs a complete <a href="https://arrow-user2022.netlify.app/packages-and-data.html#data">data dictionary for the NYC taxi data</a> on the useR workshop site, but the columns that will be relevant for us are as follows:</p>
<ul>
<li><code>pickup_longitude</code> (double): Longitude data for the pickup location</li>
<li><code>pickup_latitude</code> (double): Latitude data for the pickup location</li>
<li><code>dropoff_longitude</code> (double): Longitude data for the dropoff location</li>
<li><code>dropoff_latitude</code> (double): Latitude data for the dropoff location</li>
</ul>
<p>On my laptop I have a copy of both the full data set, located at <code>"~/Datasets/nyc-taxi"</code> on my machine, and a much smaller ‚Äútiny‚Äù data set that contains 1 out of every 1000 records from the original, located at <code>"~/Datasets/nyc-taxi-tiny/"</code>. This tiny version has a mere 1.7 million rows of data, and as such is small enough that it will fit in memory. <a href="https://arrow-user2022.netlify.app/packages-and-data.html#data">Instructions for downloading both data sets</a> are available at the same location as the data dictionary.</p>
</section>
<section id="loading-the-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-data">Loading the data</h2>
<p>Since I have local copies of the data, I‚Äôll use the <code>open_dataset()</code> function from the {arrow} package to connect to both versions of the NYC taxi data:<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">nyc_taxi <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_dataset</span>(<span class="st" style="color: #20794D;">"~/Datasets/nyc-taxi/"</span>)</span>
<span id="cb2-2">nyc_taxi_tiny <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_dataset</span>(<span class="st" style="color: #20794D;">"~/Datasets/nyc-taxi-tiny/"</span>)</span></code></pre></div>
</div>
<p>Starting with <a href="https://arrow.apache.org/docs/r/news/index.html#arrow-900">Arrow 9.0.0</a> it‚Äôs been possible to use the {dplyr} <code>glimpse()</code> function to take a look at the data sets, so let‚Äôs do that:</p>
<div class="cell" data-hash="index_cache/html/glimpse-data_9a1e42d8540622b23300148ccf5b5bca">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">glimpse</span>(nyc_taxi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FileSystemDataset with 158 Parquet files
1,672,590,319 rows x 24 columns
$ vendor_name             &lt;string&gt; "VTS", "VTS", "VTS", "DDS", "DDS", "DDS", "DD‚Ä¶
$ pickup_datetime  &lt;timestamp[ms]&gt; 2009-01-04 13:52:00, 2009-01-04 14:31:00, 200‚Ä¶
$ dropoff_datetime &lt;timestamp[ms]&gt; 2009-01-04 14:02:00, 2009-01-04 14:38:00, 200‚Ä¶
$ passenger_count          &lt;int64&gt; 1, 3, 5, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, ‚Ä¶
$ trip_distance           &lt;double&gt; 2.63, 4.55, 10.35, 5.00, 0.40, 1.20, 0.40, 1.‚Ä¶
$ pickup_longitude        &lt;double&gt; -73.99196, -73.98210, -74.00259, -73.97427, -‚Ä¶
$ pickup_latitude         &lt;double&gt; 40.72157, 40.73629, 40.73975, 40.79095, 40.71‚Ä¶
$ rate_code               &lt;string&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶
$ store_and_fwd           &lt;string&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶
$ dropoff_longitude       &lt;double&gt; -73.99380, -73.95585, -73.86998, -73.99656, -‚Ä¶
$ dropoff_latitude        &lt;double&gt; 40.69592, 40.76803, 40.77023, 40.73185, 40.72‚Ä¶
$ payment_type            &lt;string&gt; "Cash", "Credit card", "Credit card", "Credit‚Ä¶
$ fare_amount             &lt;double&gt; 8.9, 12.1, 23.7, 14.9, 3.7, 6.1, 5.7, 6.1, 8.‚Ä¶
$ extra                   &lt;double&gt; 0.5, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, ‚Ä¶
$ mta_tax                 &lt;double&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶
$ tip_amount              &lt;double&gt; 0.00, 2.00, 4.74, 3.05, 0.00, 0.00, 1.00, 0.0‚Ä¶
$ tolls_amount            &lt;double&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶
$ total_amount            &lt;double&gt; 9.40, 14.60, 28.44, 18.45, 3.70, 6.60, 6.70, ‚Ä¶
$ improvement_surcharge   &lt;double&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶
$ congestion_surcharge    &lt;double&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶
$ pickup_location_id       &lt;int64&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶
$ dropoff_location_id      &lt;int64&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶
$ year                     &lt;int32&gt; 2009, 2009, 2009, 2009, 2009, 2009, 2009, 200‚Ä¶
$ month                    &lt;int32&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶</code></pre>
</div>
</div>
<p>If you‚Äôve used <code>glimpse()</code> before this output will look very familiar. Each line in the output show the name of one column in the data, followed by the first few entries in that column.<sup>3</sup> However, when you look at the size of the data set, you might begin to suspect that some magic is going on. Behind the scenes there are 1.7 billion rows of data in one huge table, and this is just too big to load into memory. Fortunately, the {arrow} package allows us to work with it anyway!</p>
</section>
<section id="plotting-a-million-rows" class="level2">
<h2 class="anchored" data-anchor-id="plotting-a-million-rows">Plotting a million rows</h2>
<p>Okay, let‚Äôs start with a data visualisation problem that wouldn‚Äôt be too difficult to manage on a small data set. I want to draw an image that plots the pickup location for every taxi ride in the data set. Here‚Äôs how I might go about that. First, I‚Äôll do a minimal amount of data wrangling in {arrow}. Specifically, I‚Äôll use the {dplyr} <code>select()</code> and <code>filter()</code> functions to limit the amount of data I have to <code>collect()</code> into R:</p>
<div class="cell" data-hash="index_cache/html/filtering_105a395a3b69129b1deb402371e596aa">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb5-2">nyc_pickups <span class="ot" style="color: #003B4F;">&lt;-</span> nyc_taxi_tiny <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">select</span>(pickup_longitude, pickup_latitude) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">filter</span>(</span>
<span id="cb5-5">    <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(pickup_longitude),</span>
<span id="cb5-6">    <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(pickup_latitude)</span>
<span id="cb5-7">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">collect</span>()</span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.16 sec elapsed</code></pre>
</div>
</div>
<p>At this point I have a regular R data frame, <code>nyc_pickups</code>, that contains only the data I need: the pickup locations for all those taxi rides (in the <em>tiny</em> taxi data set) that actually contain longitude and latitude data. Let‚Äôs use <code>glimpse()</code> again:</p>
<div class="cell" data-hash="index_cache/html/glimpse-pickups_777a2e321317d21e8bd17c1d8b4b682e">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">glimpse</span>(nyc_pickups)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1,249,107
Columns: 2
$ pickup_longitude &lt;dbl&gt; -73.95557, -73.97467, -73.78190, -73.97872, -73.97400‚Ä¶
$ pickup_latitude  &lt;dbl&gt; 40.76416, 40.76222, 40.64478, 40.75371, 40.77901, 0.0‚Ä¶</code></pre>
</div>
</div>
<p>Compared to the full NYC taxi data, this is a relatively small data set. Drawing a scatter plot from 1.2 million observations isn‚Äôt a trivial task, to be sure, but it is achievable. In fact the {ggplot2} package handles this task surprisingly well:</p>
<div class="cell" data-hash="index_cache/html/ggplot2-image_72f14eb74a16f2be7164916ef14192b5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">x0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">74.05</span> <span class="co" style="color: #5E5E5E;"># minimum longitude to plot</span></span>
<span id="cb9-2">y0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">40.6</span>   <span class="co" style="color: #5E5E5E;"># minimum latitude to plot</span></span>
<span id="cb9-3">span <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.3</span>  <span class="co" style="color: #5E5E5E;"># size of the lat/long window to plot</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb9-6">pic <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(nyc_pickups) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;">aes</span>(pickup_longitude, pickup_latitude), </span>
<span id="cb9-9">    <span class="at" style="color: #657422;">size =</span> .<span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb9-10">    <span class="at" style="color: #657422;">stroke =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb9-11">    <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"#800020"</span></span>
<span id="cb9-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-14">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-16">  <span class="fu" style="color: #4758AB;">coord_equal</span>(</span>
<span id="cb9-17">    <span class="at" style="color: #657422;">xlim =</span> x0 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, span), </span>
<span id="cb9-18">    <span class="at" style="color: #657422;">ylim =</span> y0 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, span)</span>
<span id="cb9-19">  )</span>
<span id="cb9-20">pic</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/ggplot2-image-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3.365 sec elapsed</code></pre>
</div>
</div>
<p>It‚Äôs not lightning fast or anything, but it‚Äôs still pretty quick!</p>
<p>As neat as this visualisation is there are limitations.<sup>4</sup> In some parts of the plot ‚Äì notably midtown in Manhattan ‚Äì the data are so dense that you can‚Äôt make out any fine detail. In other parts ‚Äì Brooklyn and Queens, for instance ‚Äì there are so few data points that you can‚Äôt see much at all:</p>
<div class="cell" data-hash="index_cache/html/annotated-ggplot_75189ae42604d08a128a4c5c2067bf46">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/annotated-ggplot-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>How do we improve this image?</p>
</section>
<section id="scaling-to-a-billion-rows" class="level2">
<h2 class="anchored" data-anchor-id="scaling-to-a-billion-rows">Scaling to a billion rows</h2>
<p>To make a better version of this plot, we‚Äôre going to have to do two things at once:</p>
<ul>
<li>Use a lot more data. If we use the full NYC taxi data set, the visualisation will be a lot more detailed in areas where it is currently too sparse.</li>
<li>Show gradation at each location. In the dense areas there are too many points plotted atop one another. Instead of overplotting, we‚Äôll use shading to represent the number of pickups at each location.</li>
</ul>
<p>How do we do this? Let‚Äôs say I want to create a 4000 x 4000 pixel image, and I want the ‚Äúintensity‚Äù at each pixel to represent the number of pickups that fall in the geographic region spanned by that pixel. There are a total of 16 million pixels, so our task is to assign each of observation one of those those 16 million bins, and then count the number of observations in each bin. We‚Äôll have to rely on Arrow to do all the heavy lifting here. This binning cannot be done natively in R: the data set is just too big. Even after filtering out missing and out-of-bounds data points, there are still 1.2 billion rows, and R can‚Äôt do that without assistance.</p>
<p>Here‚Äôs what the solution looks like:</p>
<div class="cell" data-hash="index_cache/html/compute-pixels_47854146bcf35cbd0a57c1d3a15eb7da">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb12-2">pixels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">4000</span></span>
<span id="cb12-3">pickup <span class="ot" style="color: #003B4F;">&lt;-</span> nyc_taxi <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">filter</span>(</span>
<span id="cb12-5">    <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(pickup_longitude),</span>
<span id="cb12-6">    <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(pickup_latitude),</span>
<span id="cb12-7">    pickup_longitude <span class="sc" style="color: #5E5E5E;">&gt;</span> x0,</span>
<span id="cb12-8">    pickup_longitude <span class="sc" style="color: #5E5E5E;">&lt;</span> x0 <span class="sc" style="color: #5E5E5E;">+</span> span,</span>
<span id="cb12-9">    pickup_latitude <span class="sc" style="color: #5E5E5E;">&gt;</span> y0,</span>
<span id="cb12-10">    pickup_latitude <span class="sc" style="color: #5E5E5E;">&lt;</span> y0 <span class="sc" style="color: #5E5E5E;">+</span> span</span>
<span id="cb12-11">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb12-13">    <span class="at" style="color: #657422;">unit_scaled_x =</span> (pickup_longitude <span class="sc" style="color: #5E5E5E;">-</span> x0) <span class="sc" style="color: #5E5E5E;">/</span> span,</span>
<span id="cb12-14">    <span class="at" style="color: #657422;">unit_scaled_y =</span> (pickup_latitude <span class="sc" style="color: #5E5E5E;">-</span> y0) <span class="sc" style="color: #5E5E5E;">/</span> span,</span>
<span id="cb12-15">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">round</span>(pixels <span class="sc" style="color: #5E5E5E;">*</span> unit_scaled_x)), </span>
<span id="cb12-16">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">round</span>(pixels <span class="sc" style="color: #5E5E5E;">*</span> unit_scaled_y))</span>
<span id="cb12-17">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-18">  <span class="fu" style="color: #4758AB;">count</span>(x, y, <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"pickup"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-19">  <span class="fu" style="color: #4758AB;">collect</span>()</span>
<span id="cb12-20"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>31.101 sec elapsed</code></pre>
</div>
</div>
<p>My laptop solves this binning problem in about 30 seconds. As before, I‚Äôll use <code>glimpse()</code> to take a peek at the results:</p>
<div class="cell" data-hash="index_cache/html/glimpse-pickup_fae4536072ae01f505509c9d4d61bb91">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">glimpse</span>(pickup)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 4,677,864
Columns: 3
$ x      &lt;int&gt; 1058, 1024, 1162, 3525, 865, 794, 856, 705, 647, 762, 802, 1207‚Ä¶
$ y      &lt;int&gt; 2189, 2040, 2265, 552, 1983, 1646, 2018, 1590, 1723, 2010, 1645‚Ä¶
$ pickup &lt;int&gt; 6514, 5030, 3818, 67, 2408, 2415, 932, 3607, 2664, 1024, 2207, ‚Ä¶</code></pre>
</div>
</div>
<p>This is a data frame where <code>x</code> and <code>y</code> specify the pixel, and and a <code>pickup</code> counts the number of pickups associated with that pixel. Note that the pixels aren‚Äôt arranged in a meaningful order, and only those pixels with at least one pickup (a little under 30% of all pixels) are included in data.</p>
<p>We can visualise this in a number of ways. One possibility is to create a scatter plot, using the <code>pickup</code> value to specify the shading of each plot marker:</p>
<div class="cell" data-hash="index_cache/html/ggplot2-image-2_b70a8ab656a5717a6cb46fb50a9f0cb9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">ggplot</span>(pickup) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb16-4">    <span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">colour =</span> <span class="fu" style="color: #4758AB;">log10</span>(pickup)), </span>
<span id="cb16-5">    <span class="at" style="color: #657422;">size =</span> .<span class="dv" style="color: #AD0000;">01</span>, </span>
<span id="cb16-6">    <span class="at" style="color: #657422;">stroke =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb16-7">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb16-8">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-9">  <span class="fu" style="color: #4758AB;">scale_colour_gradient</span>(<span class="at" style="color: #657422;">low =</span> <span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">high =</span> <span class="st" style="color: #20794D;">"#800020"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-10">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/ggplot2-image-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>12.159 sec elapsed</code></pre>
</div>
</div>
<p>As you can see, {ggplot2} has no problems drawing a scatter plot from a few million observations, and it‚Äôs an improvement on our first attempt. However, we can do better. Instead of trying to draw a scatter plot of all the points listed in the <code>pickup</code> data frame, let‚Äôs use it to populate a bitmap. We‚Äôll create a 4000x4000 matrix, and fill in the cells with the pickup counts at the corresponding pixel.</p>
<p>The computation is a two part process. First, we use <code>expand_grid()</code> to initialise a ‚Äúgrid like‚Äù tibble containing all combination of <code>x</code> and <code>y</code> values, and use <code>left_join()</code> to populate a column containing the <code>pickup</code> counts:</p>
<div class="cell" data-hash="index_cache/html/expand-to-grid_c877d4bfda046b19d7ac429d8f1aef87">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb19-2">grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">expand_grid</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>pixels, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>pixels) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">left_join</span>(pickup, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">pickup =</span> <span class="fu" style="color: #4758AB;">replace_na</span>(pickup,  <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>8.228 sec elapsed</code></pre>
</div>
</div>
<p>Note that the elements of <code>grid</code> are complete (all 16 million pixels are there), and meaningfully ordered. We can check this by calling <code>glimpse()</code> again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">glimpse</span>(grid)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 16,000,000
Columns: 3
$ x      &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ‚Ä¶
$ y      &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ‚Ä¶
$ pickup &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶</code></pre>
</div>
</div>
<p>Because the elements of <code>grid$pickup</code> are arranged in this fashion, it is easy to construct the required 4000x4000 matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb23-2">pickup_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(</span>
<span id="cb23-3">  <span class="at" style="color: #657422;">data =</span> grid<span class="sc" style="color: #5E5E5E;">$</span>pickup,</span>
<span id="cb23-4">  <span class="at" style="color: #657422;">nrow =</span> pixels,</span>
<span id="cb23-5">  <span class="at" style="color: #657422;">ncol =</span> pixels</span>
<span id="cb23-6">)</span>
<span id="cb23-7"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.02 sec elapsed</code></pre>
</div>
</div>
<p>This is our bitmap. It‚Äôs a matrix whose values correspond to the pixel intensities to be plotted. Just so you can see what it looks like, here‚Äôs a tiny 10x10 pixel section from that matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">pickup_grid[<span class="dv" style="color: #AD0000;">2000</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2009</span>, <span class="dv" style="color: #AD0000;">2000</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2009</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]   11    2    2    4    6    3    7   15   54    96
 [2,]    5    3    3    1    5   27   47   55   74   100
 [3,]    5    6    7   38   39   48   60   99   95    75
 [4,]   16   37   51   45   35   61   64   67   51    18
 [5,]   67   50   97  141   55   24   26   26   40    29
 [6,]   65  133   56   18   11   10  659    6    4     9
 [7,]   35   78   13    3   82  105   68    2    2     4
 [8,]    7    7    4    3    7   25    4    2    2     3
 [9,]    8   10    3    3   17    5   98    2    4     3
[10,]    8    6    8    2   19    6    1    2    3    23</code></pre>
</div>
</div>
<p>Now that the data are in an image-like format, all we have to do is write the image file. We don‚Äôt even need {ggplot2}: we can use <code>image()</code> to draw the bitmap directly. Here‚Äôs a little helper function I wrote to do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">render_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(mat, <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"white"</span>, <span class="st" style="color: #20794D;">"#800020"</span>)) {</span>
<span id="cb27-2">  op <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mar =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb27-3">  shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">colorRampPalette</span>(cols)</span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;">image</span>(</span>
<span id="cb27-5">    <span class="at" style="color: #657422;">z =</span> <span class="fu" style="color: #4758AB;">log10</span>(<span class="fu" style="color: #4758AB;">t</span>(mat <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)),</span>
<span id="cb27-6">    <span class="at" style="color: #657422;">axes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb27-7">    <span class="at" style="color: #657422;">asp =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb27-8">    <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">shades</span>(<span class="dv" style="color: #AD0000;">256</span>),</span>
<span id="cb27-9">    <span class="at" style="color: #657422;">useRaster =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb27-10">  )</span>
<span id="cb27-11">  <span class="fu" style="color: #4758AB;">par</span>(op)</span>
<span id="cb27-12">}</span></code></pre></div>
</div>
<p>Here‚Äôs what happens when I call it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;">render_image</span>(pickup_grid)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/taxi-scatter-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.149 sec elapsed</code></pre>
</div>
</div>
<p>This method is slightly faster the previous version, but the real advantage isn‚Äôt speed ‚Äì it‚Äôs clarity. There‚Äôs less blurring in the denser parts of the plot (midtown Manhattan), and there‚Äôs also more clarity in the sparser areas (e.g., the Brooklyn streets are sharper).</p>
<p>We can push it slightly further by tweaking the colour palette. Plotting the logarithm of the number of pickups ensures that all the streets are visible (not just the extremely common ones), but it does have the downside that it‚Äôs hard to tell the difference between moderately popular pickup locations and extremely popular ones. A well-chosen diverging palette helps rectify this a little:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">render_image</span>(pickup_grid, <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#002222"</span>, <span class="st" style="color: #20794D;">"white"</span>, <span class="st" style="color: #20794D;">"#800020"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/taxi-scatter-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>At long last we have a visualisation that shows all the billion rows of data, crisply delineates all the streets on which taxi pickups are at least moderately frequent, <em>and</em> does a reasonable job of highlighting those locations where taxi pickups are extremely common. Yay! üéâ</p>
</section>
<section id="lessons-learned" class="level2">
<h2 class="anchored" data-anchor-id="lessons-learned">Lessons learned?</h2>
<p>To wrap this post up, I think it‚Äôs useful to reflect on the process I went through in constructing this image. In one sense, the process I‚Äôve gone through here isn‚Äôt actually much different to what we do when creating any other data visualisation in R. For example, if you‚Äôre working in {tidyverse}, a typical work flow is to use {dplyr} to wrangle the data into an appropriate format and then use {ggplot2} to plot the data. What I‚Äôve done here isn‚Äôt that different: okay yes, my {dplyr} code only works because it‚Äôs backed by the {arrow} engine, and in the end I decided to use base graphics rather than {ggplot2} to draw the final image, but I don‚Äôt think those differences constitute a major departure from my usual approach.</p>
<p>That being said, I think there are two key principles I‚Äôve taken away from this. When trying to visualise very large data sets in R, the things I‚Äôm going to try to keep in mind are:</p>
<ul>
<li><p>Push as much of the computational work onto {arrow} as possible. The {arrow} package is designed specifically to handle these kinds of data manipulation problems, and things go much more smoothly when I don‚Äôt make {ggplot2} do the computational heavy lifting.</p></li>
<li><p>Think carefully about the data representation. The reason why the final plot drawn with <code>image()</code> is nicer than the earlier ones drawn with {ggplot2} has nothing at all to do with the ‚Äúbase R vs tidyverse‚Äù issue. Instead, it‚Äôs because the data structure I created (i.e., <code>pickup_grid</code>) is the exact bitmap that needed to be rendered, and that‚Äôs exactly what <code>image()</code> is good for.</p></li>
</ul>
<p><br><br></p>
<!--------------- appendices go here ----------------->
</section>



<div id="quarto-appendix" class="default"><section id="acknowledgments" class="level2 appendix"><h2 class="quarto-appendix-heading">Acknowledgments</h2><div class="quarto-appendix-contents">

<p>Thank you to <a href="https://twitter.com/kae_suarez">Kae Suarez</a>, <a href="https://twitter.com/keithadambritt">Keith Britt</a>, and <a href="https://twitter.com/fmic_">Fran√ßois Michonneau</a> for reviewing this post.</p>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This post is adapted from the <a href="https://github.com/djnavarro/arrow-nyc-taxi-scatter">NYC taxi scatter GitHub repository</a> that I put together to chat about on <a href="https://www.youtube.com/c/TheDataThread/about">The Data Thread</a> live interviews series, <em>Pulling the Thread</em>‚Ü©Ô∏é</p></li>
<li id="fn2"><p>It‚Äôs worth noting that you can connect to remote data sets as well as local ones, but that‚Äôs a bit beyond the scope of this post.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>There are a few small hints that the underlying data structure is different though. For instance, the data types associated with each column refer to Arrow data types (e.g., timestamp, int32, int64, etc) rather than R data types. I‚Äôm not going to talk about those here, but if you‚Äôre looking for information about this topic, there‚Äôs a short <a href="https://arrow-user2022.netlify.app/advanced.html#how-are-scalar-types-mapped">summary of Arrow data types</a> on the workshop website, and a <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/">longer blog post on Arrow data types</a> on this blog.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>I‚Äôm not talking about the fact that there‚Äôs no legend or explanatory text: although those are real failures of data visualisation, they‚Äôre easily fixable. {ggplot2} has lots of tools for annotating plots appropriately.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {How to Visualise a Billion Rows of Data in {R} with {Apache}
    {Arrow}},
  date = {2022-08-23},
  url = {https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúHow to Visualise a Billion Rows of Data
in R with Apache Arrow.‚Äù</span> August 23, 2022. <a href="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows">https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>Data Visualisation</category>
  <guid>https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index.html</guid>
  <pubDate>Mon, 22 Aug 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Arrays and tables in Arrow</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>My catholic taste in the devil<br>
All gilded and golden, yes, I‚Äôm your girl<br>
Hell, if it glitters, I‚Äôm going<br>
&nbsp;&nbsp;‚Äì <em>Heaven is Here</em>, Florence + The Machine</p>
</blockquote>
<p>If you‚Äôve made the life choice to become a developer advocate with a focus on <a href="https://arrow.apache.org/">Apache Arrow</a>, you‚Äôre probably not unfamiliar with masochism.</p>
<p>Don‚Äôt believe me? Let‚Äôs consider my past choices:</p>
<ul>
<li>My first attempt to write about the topic didn‚Äôt even talk about Arrow: the post was a descent into the madness of <a href="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/">data serialisation in R</a> and the RDS format. I don‚Äôt think I need to explain the pain that one involved.</li>
<li>My second attempt went a little better, and I managed to write a few thousand words on <a href="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/">getting started with Apache Arrow</a> for the R user. Much of that post was spent on answering very technical questions like ‚Äúwhat is this?‚Äù and ‚Äúwhy do I care?‚Äù These are excellent questions to answer, but nevertheless it was a learning experience for me, shall we say? There were headaches.</li>
<li>My third attempt talked about how <a href="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/">the <strong>arrow</strong> package supplies <strong>dplyr</strong> bindings</a>, allowing R to perform data manipulation on Arrow data using familiar <strong>dplyr</strong> syntax. It wasn‚Äôt a bad post to be honest, but I did go down a very strange path with all the <em>Magicians</em> gifs and as anyone familiar with the series knows, the magic comes from pain.</li>
<li>As for my fourth attempt, the <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/">data types in Arrow and R</a> post‚Ä¶ look, if you‚Äôve ever had a secret desire to see what happens when I am reduced to tears and wailing at the horrors of the world and of IEEE 754, then oh my yes, this is the extremely long blog post for you.</li>
</ul>
<p>I don‚Äôt regret any of these choices, particularly the fact that they have helped keep me gainfully employed, but there‚Äôs no denying the fact that a lot of blood and tears have been spilled in the endeavour.</p>
<p>In any case, what I am trying to convey to you, dear reader, is that ‚Äì setting aside the superficial trappings of whips and chains and the various other devices that propelled E. L. James to great fortune ‚Äì I am intimately acquainted with pain. It is important to me that you understand this, and that when I mention the pain I encountered when trying to learn how the <strong>arrow</strong> R package works, I am not using the term lightly.</p>
<p>So let talk about my latest pain point, shall we?</p>
<p><br><br></p>
<section id="data-objects" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-objects">Data objects</h2>
<p>Here‚Äôs the thing that has been giving me grief. Suppose you are an R user who is new to this whole Apache Arrow business. You‚Äôve installed the <strong>arrow</strong> package, and you‚Äôre now reading the <a href="https://arrow.apache.org/docs/r/articles/arrow.html">Get Started</a> page in the hopes that you too will be able to, well, get started. When you visit this page, one of the very first things you encounter is a table listing a variety of data structures used by Arrow. Specifically, the table tells you that Arrow has classes for zero-dimensional data (scalars), one-dimensional data (arrays and other vector-like data), and two-dimensional data (tabular or data frame-like data). It shows you that‚Ä¶</p>
<p>‚Ä¶actually, you know what? Instead of describing it, let‚Äôs take a look at the actual table. Here‚Äôs what it tells you about the hierarchy of data structures in <strong>arrow</strong>:</p>
<p><br></p>
<table class="table">
<colgroup>
<col style="width: 1%">
<col style="width: 8%">
<col style="width: 25%">
<col style="width: 63%">
</colgroup>
<thead>
<tr class="header">
<th>Dim</th>
<th>Class</th>
<th>Description</th>
<th>How to create an instance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td><code>Scalar</code></td>
<td>single value and its <code>DataType</code></td>
<td><code>Scalar$create(value, type)</code></td>
</tr>
<tr class="even">
<td>1</td>
<td><code>Array</code></td>
<td>vector of values and its <code>DataType</code></td>
<td><code>Array$create(vector, type)</code></td>
</tr>
<tr class="odd">
<td>1</td>
<td><code>ChunkedArray</code></td>
<td>vectors of values and their <code>DataType</code></td>
<td><code>ChunkedArray$create(..., type)</code> or alias <code>chunked_array(..., type)</code></td>
</tr>
<tr class="even">
<td>2</td>
<td><code>RecordBatch</code></td>
<td>list of <code>Array</code>s with a <code>Schema</code></td>
<td><code>RecordBatch$create(...)</code> or alias <code>record_batch(...)</code></td>
</tr>
<tr class="odd">
<td>2</td>
<td><code>Table</code></td>
<td>list of <code>ChunkedArray</code> with a <code>Schema</code></td>
<td><code>Table$create(...)</code>, alias <code>arrow_table(...)</code>, or <code>arrow::read_*(file, as_data_frame = FALSE)</code></td>
</tr>
<tr class="even">
<td>2</td>
<td><code>Dataset</code></td>
<td>list of <code>Table</code>s with the same <code>Schema</code></td>
<td><code>Dataset$create(sources, schema)</code> or alias <code>open_dataset(sources, schema)</code></td>
</tr>
</tbody>
</table>
<p><br></p>
<p>Now, perhaps there are some devilishly clever R users who can look at this table and immediately decode all its mysteries. But I will be honest with you, and confess that I am not one of these people. When I first started learning Arrow, I had no idea what any of this meant. This whole table was completely intimidating. I looked at it and thoughts roughly along the following lines went through my head:</p>
<blockquote class="blockquote">
<p>Oh‚Ä¶ f**k me. I‚Äôm completely out of my depth, I am too stupid to understand any of this. I should quit now and find a new job before everyone realises I‚Äôm a total fraud. They made a terrible mistake hiring me and‚Ä¶ blah blah blah</p>
</blockquote>
<p>The self-pity went on for a while and the names I called myself became quite inappropriate for a family restaurant, but I‚Äôll be kind and spare you the tiresome details.</p>
<p>Eventually I remembered that this is my impostor syndrome talking and that I am in fact quite good at learning technical concepts. The problem I‚Äôm encountering here is that this table isn‚Äôt self-explanatory, and isn‚Äôt accompanied by the explanatory scaffolding that helps new users orient themselves. That‚Äôs a documentation issue, not a user problem. At a later point someone<sup>1</sup> might need to add a few explanatory paragraphs and probably a vignette to ensure that new Arrow users don‚Äôt get confused at this point, but for now let‚Äôs see if we can‚Äôt unpack it here?</p>
<p>Looking at this table, a new user might have some very reasonable questions. What exactly is a <code>ChunkedArray</code> and how is it different from an <code>Array</code>? Why are these necessary as distinct concepts? While we are at it, what is a <code>RecordBatch</code>, a <code>Table</code> and a <code>Dataset</code>, and what makes them different from one another? Unless someone takes the time to explain it all to you, it does look like Arrow is unnecessarily complicated, doesn‚Äôt it? These are core concepts in Arrow, but new users don‚Äôt know what they are yet!</p>
<p>In short, the time has come to tell the story behind this table. With that in mind, I‚Äôll go through this table row by row and talk about what each line actually means.<sup>2</sup></p>
<p>Adventure!</p>
<p>Romance!</p>
<p>Drama!</p>
<p>Joy!</p>
<p>I am absolutely not going to deliver any of those things, but hopefully this will be useful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(spotifyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">scipen =</span> <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
</div>
<div class="cell">

</div>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=Q4Ez9pitRJ0"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/heaven_is_here.png" class="img-fluid figure-img" width="1281"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="scalars" class="level2">
<h2 class="anchored" data-anchor-id="scalars">Scalars</h2>
<p>Let‚Äôs start with scalars. A scalar object is simply a single value, that can be of any type. It might be an integer, a string, a timestamp, or any of the different data types that Arrow supports. I won‚Äôt talk about the different types in this post because I already wrote <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/">an extremely long post on that topic</a>. For the current purposes, what matters is that a scalar is <em>one</em> value. It is ‚Äúzero dimensional‚Äù. All higher order data structures are built on top of scalars, so they are in some sense fundamental, but there is not much I need to say about them for this post. For the record though, you can create a scalar using <code>Scalar$create()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="st" style="color: #20794D;">"hi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
hi</code></pre>
</div>
</div>
<p>Oh the excitement. I can barely contain myself.</p>
<p><br><br></p>
</section>
<section id="arrays" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="arrays">Arrays</h2>
<blockquote class="blockquote">
<p>All the gods have been domesticated<br>
And heaven is now overrated<br>
&nbsp;&nbsp;‚Äì <em>Cassandra</em>, Florence + The Machine</p>
</blockquote>
<p>Okay, so scalars aren‚Äôt very interesting for the purposes of this post. Let‚Äôs turn our attention to arrays next. An array is roughly analogous to a vector in R, and the <strong>arrow</strong> package is written in a way that allows you to interact with Arrow arrays in ways that feel familiar to R users.</p>
<p>I can create an array using <code>Array$create()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">arr <span class="ot" style="color: #003B4F;">&lt;-</span> Array<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"hello"</span>, <span class="st" style="color: #20794D;">"cruel"</span>, <span class="st" style="color: #20794D;">"world"</span>))</span>
<span id="cb4-2">arr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "hello",
  "cruel",
  "world"
]</code></pre>
</div>
</div>
<p>I can create a subset of an array using square brackets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">arr[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "cruel",
  "world"
]</code></pre>
</div>
</div>
<p>Notice that I used <code>2:3</code> here to extract the 2nd and 3rd elements of the array. Unlike R, Arrow uses <a href="https://en.wikipedia.org/wiki/Zero-based_numbering">zero-based indexing</a>, so if I were writing this using ‚ÄúArrow native‚Äù code, the relevant subset would be <code>1:2</code>. However, as a general principle, <strong>arrow</strong> tries to make Arrow data structures behave like R native objects. The design principle here is that you should be able to use your usual R code to manipulate Arrow data objects, without needing to think too much about the Arrow implementation.</p>
<p>I‚Äôm stressing the principle now because later in this post I am going to violate it!</p>
<p>Because one of the other things <strong>arrow</strong> does is expose a low-level interface to Arrow. You don‚Äôt need to use this (and in general you don‚Äôt really need to), but it‚Äôs there if you want it, and because this post explores the R/Arrow interface I am going to use it sometimes. When that happens, you‚Äôll start to see zero-based indexing appear! I promise I will signpost this every time it happens so you aren‚Äôt caught unawares.</p>
<p><br></p>
<section id="structure-of-arrays" class="level3">
<h3 class="anchored" data-anchor-id="structure-of-arrays">Structure of arrays</h3>
<p>Anyway, as I was saying, an array in Arrow is analogous to a vector in R: it is a sequence of values with known length, all of which have the same type. When you‚Äôre using the <strong>arrow</strong> package on a day-to-day basis, you really don‚Äôt need to know much more than that. But if you want to understand data objects in Arrow properly, it helps to do a slightly deeper dive. All the low level details are described on the <a href="https://arrow.apache.org/docs/format/Columnar.html">Arrow specification</a> page, but the full specification is a little overwhelming when you‚Äôre first starting out. I‚Äôll start by introducing two key concepts:</p>
<ul>
<li>The data in an array are stored in one or more <strong>buffers</strong>. A buffer is a sequential virtual address space (i.e., block of memory) with a given length. As long as you have a pointer specifting the memory address for the buffer (i.e., where it starts), you can reach any byte in the buffer using an ‚Äúoffset‚Äù value that tells you the location of that byte relative to the start of the buffer.</li>
<li>The <strong>physical layout</strong> of an array is a term used to describe how data in an array is laid out in memory, without taking into account of how that information is interpreted. For example, a 32-bit signed integer and 32-bit floating point number have the same layout: they are both 32 bits, represented as 4 contiguous bytes in memory. The meaning is different, but the layout is the same. However, unlike simple scalars, an array can have a relatively complex layout, storing data and metadata in a structured arrangement.</li>
</ul>
<p><br></p>
<section id="layouts-and-buffers" class="level4">
<h4 class="anchored" data-anchor-id="layouts-and-buffers">Layouts and buffers</h4>
<p>Let‚Äôs unpack some of these ideas using a simple array of integer values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">arr <span class="ot" style="color: #003B4F;">&lt;-</span> Array<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="fu" style="color: #4758AB;">c</span>(1L, <span class="cn" style="color: #8f5902;">NA</span>, 2L, 4L, 8L))</span>
<span id="cb8-2">arr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;int32&gt;
[
  1,
  null,
  2,
  4,
  8
]</code></pre>
</div>
</div>
<p>What precisely is this thing? Well that‚Äôs a mess of different questions. In one sense, the answer is straightforward. It‚Äôs an Arrow array, and the values contained within the array are all stored as signed 32 bit integers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">arr<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Int32
int32</code></pre>
</div>
</div>
<p>But that‚Äôs not a very satisfying answer at some level. What does this thing look like in memory? How is the information structured? In other words, what is the <strong>physical layout</strong> of this object?</p>
<p>The Arrow documentation page helps us answer that. Our array contains two pieces of metadata, namely the length of the array (i.e.&nbsp;5) and a count of the number of null values (i.e., 1), both of which are stored as 64-bit integers. The <strong>arrow</strong> package makes it easy to extract these values, because the Array object has fields and methods that will return them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">arr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">length</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">arr<span class="sc" style="color: #5E5E5E;">$</span>null_count</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>Okay, that seems reasonable. What about the data itself? Where is that stored? In Arrow, these are stored within buffers, a contiguous block of memory assigned to the array. The number of buffers associated with an array depends on the exact type of data being stored. For an integer array such as <code>arr</code>, there are two buffers, a <strong>validity bitmap buffer</strong> and a <strong>data value buffer</strong>. So we have a data structure that could be depicted like this:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/array_layout.svg" class="img-fluid"></p>
</div>
</div>
<p>In this figure I‚Äôve shown the array as a grey rectangle subdivided into two parts, one for the metadata and the other for the buffers. Underneath I‚Äôve unpacked this it a little, showing the contents of the two buffers in the area enclosed in a dotted line. At the lowest level of the figure, you can see the contents of specific bytes. Notice that the numbering of the bytes starts at zero: I‚Äôm referring to Arrow data structures here, and Arrow is zero-indexed. Later in the post I‚Äôll talk about how you can access the raw content of these buffers, but for now let‚Äôs talk about what each of these buffers contains.</p>
<p><br></p>
</section>
<section id="the-validity-bitmap-buffer" class="level4">
<h4 class="anchored" data-anchor-id="the-validity-bitmap-buffer">The validity bitmap buffer</h4>
<p>The validity bitmap is binary-valued, and contains a 1 whenever the corresponding slot in the array contains a valid, non-null value. Setting aside some very tiresome technicalities we can imagine that the validity bitmap is a buffer that contains the following five bits:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="dv" style="color: #AD0000;">10111</span></span></code></pre></div>
<p>Except‚Ä¶ this isn‚Äôt really true, for three reasons. First, memory is allocated in byte-size units, so we have to pad it out to the full 8 bits. That gives us the bitmap <code>10111000</code>. Second, that‚Äôs still a little inaccurate because ‚Äì assuming you read left to right ‚Äì you‚Äôre looking it with the ‚Äúmost significant bit‚Äù first (i.e., <a href="https://en.wikipedia.org/wiki/Endianness">big endian format</a>), and the bits are actually organised with the least significant bit first (i.e., little endian format) so the bits in this byte should be shown in the reverse order, <code>00011101</code>. Third, this is still misleading because I‚Äôve not padded it enough. For reasons that make a lot of sense if you start diving into the Arrow specifications at a low level, you have to imagine another 503 trailing zeros.<sup>3</sup> So that the nice and neat <code>10111</code> I‚Äôve shown above actually looks like this in memory:</p>
<div class="grid">
<div class="g-col-6">
<table class="table">
<thead>
<tr class="header">
<th>Byte 0 (validity bitmap)</th>
<th>Bytes 1-63</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>00011101</code></td>
<td><code>0</code> (padding)</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>I probably wouldn‚Äôt have gone into quite this much detail, except for the fact that you can find this exact example when reading about <a href="https://arrow.apache.org/docs/format/Columnar.html#fixed-size-primitive-layout">physical layouts</a> in the Arrow documentation, and I think it‚Äôs helpful to have a clear point of contact between this post and the documentation.</p>
<p>Anyway, I realise I‚Äôm being boring. So let‚Äôs move on.</p>
<p><br></p>
</section>
<section id="the-data-value-buffer" class="level4">
<h4 class="anchored" data-anchor-id="the-data-value-buffer">The data value buffer</h4>
<p>Okay, now let‚Äôs have a look at the value buffer. It‚Äôs essentially the same logic. Again notice that its padded out to a length of 64 bytes to preserve natural alignment, but for our purposes those details don‚Äôt matter too much. Here‚Äôs the diagram showing the physical layout, again lifted straight from the Arrow specification page:</p>
<div class="grid">
<div class="g-col-12">
<table class="table">
<colgroup>
<col style="width: 14%">
<col style="width: 17%">
<col style="width: 16%">
<col style="width: 17%">
<col style="width: 17%">
<col style="width: 17%">
</colgroup>
<thead>
<tr class="header">
<th>Bytes 0-3</th>
<th>Bytes 4-7</th>
<th>Bytes 8-11</th>
<th>Bytes 12-15</th>
<th>Bytes 16-19</th>
<th>Bytes 20-63</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>1</code></td>
<td>unspecified</td>
<td><code>2</code></td>
<td><code>4</code></td>
<td><code>8</code></td>
<td>unspecified</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Each integer occupies 4 bytes, as required by the int32 data type. (If you want to know more about how Arrow represents integers, it‚Äôs discussed in the <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/#integer-types">data types</a> post).</p>

<!--
Just to give you a sense of what that looks like, I'll take a peek at the bits that make up the integer `8` (i.e., the contents of Bytes 16-19). I could do this using base R with a command like `intToBits(8L)` but the `bits()` function from the **pryr** package produces a more compact output so I'll do this:


::: {.cell}

```{.r .cell-code}
pryr::bits(8L)
```

::: {.cell-output .cell-output-stdout}
```
[1] "00000000 00000000 00000000 00001000"
```
:::
:::


Or, to condense it even further, we can express each byte as a hexadecimal value. That's what the `pryr::bytes()` function does, so this is an equivalent way of writing out the content of those four bytes:


::: {.cell}

```{.r .cell-code}
pryr::bytes(8L)
```

::: {.cell-output .cell-output-stdout}
```
[1] "00 00 00 08"
```
:::
:::


Putting all this together you can imagine -- roughly speaking -- what the contents of the data buffer should look like. Ignoring all the trailing bytes used for padding, and not worrying too much about what's going on with the command I've used to extract them, the 20 bytes worth of actual data in the data buffer look like this:


::: {.cell}

```{.r .cell-code}
arr$data()$buffers[[2]]$data()
```

::: {.cell-output .cell-output-stdout}
```
 [1] 01 00 00 00 00 00 00 80 02 00 00 00 04 00 00 00 08 00 00 00
```
:::
:::


Notice that the last four bytes shown are written `08 00 00 00` (little endian), whereas the bytes produced by `pryr::bytes()` are shown in the other direction. It's the same thing, just a different display convention! 

<br>

#### Um... summary please?

Okay, let's be honest. This section went down into the weeds a bit. I personally find it helpful to understand how all these concepts play out in terms of actual bits in memory, but it does get a bit much. So let's pull back and ask ourselves what matters here. For me, the big picture is this: an Arrow array is an immutable object with an "metadata + buffers" structure that is designed to be efficient, and each buffer is a contiguous bloc of memory on your machine. 

-->
<p><br></p>
</section>
</section>
<section id="peeking-inside-arrays" class="level3">
<h3 class="anchored" data-anchor-id="peeking-inside-arrays">Peeking inside arrays</h3>
<p>I mentioned earlier that <strong>arrow</strong> exposes some ‚Äúlow level‚Äù tools that allow you to interact with Arrow data objects in more of a bare bones fashion than a data analyst normally would. For example, you wouldn‚Äôt normally have a need to extract the raw bytes that comprise the buffers in an array. There‚Äôs no ‚Äúhigh level‚Äù interface that lets you do this. But if you really want to see what‚Äôs going on under the hood you absolutely can, and <strong>arrow</strong> lets you do this. To show you how it works, I‚Äôll uses a small data set containing the track listing for the new Florence + The Machine album, <a href="https://en.wikipedia.org/wiki/Dance_Fever_(album)">Dance Fever</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">dance_fever <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv_arrow</span>(<span class="st" style="color: #20794D;">"dance_fever_tracks.csv"</span>)</span>
<span id="cb17-2">dance_fever</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 14 √ó 3
   track_number title             duration
          &lt;int&gt; &lt;chr&gt;                &lt;int&gt;
 1            1 King                   280
 2            2 Free                   234
 3            3 Choreomania            213
 4            4 Back in Town           236
 5            5 Girls Against God      280
 6            6 Dream Girl Evil        227
 7            7 Prayer Factory          73
 8            8 Cassandra              258
 9            9 Heaven Is Here         111
10           10 Daffodil               214
11           11 My Love                231
12           12 Restraint               48
13           13 The Bomb               165
14           14 Morning Elvis          262</code></pre>
</div>
</div>
<p>I‚Äôll start by taking the <code>duration</code> variable and creating an Arrow array from it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">duration <span class="ot" style="color: #003B4F;">&lt;-</span> Array<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(dance_fever<span class="sc" style="color: #5E5E5E;">$</span>duration)</span>
<span id="cb19-2">duration</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;int32&gt;
[
  280,
  234,
  213,
  236,
  280,
  227,
  73,
  258,
  111,
  214,
  231,
  48,
  165,
  262
]</code></pre>
</div>
</div>
<p>As a reminder, here‚Äôs a crude schematic diagram showing how that object is laid out. It has some metadata that you‚Äôve already learned how to extract (e.g., using <code>duration$null_count</code>), and it has two data buffers that I talked about at tedious length but haven‚Äôt actually <em>shown</em> you yet:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/array_layout_with_nulls.svg" class="img-fluid"></p>
</div>
</div>
<p>To take a more detailed look at the data stored in the <code>duration</code> object, we can call its <code>data()</code> method to return an <code>ArrayData</code> object. Admittedly, the results are not immediately very exciting:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">duration<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ArrayData</code></pre>
</div>
</div>
<p>This output is a little underwhelming because at the moment the print method for an <code>ArrayData</code> object doesn‚Äôt do anything except print the class name. Boring! However, because an <code>ArrayData</code> object is stored as an R6 object, all the information is tucked away in an environment. We can find out the names of objects contained in that environment easily enough:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">names</span>(duration<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] ".__enclos_env__" "buffers"         "offset"          "null_count"     
 [5] "length"          "type"            ".:xp:."          "clone"          
 [9] "print"           "set_pointer"     "pointer"         "initialize"     </code></pre>
</div>
</div>
<p>Hm. There‚Äôs a <code>buffers</code> variable in there. I wonder what that is‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">duration<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>()<span class="sc" style="color: #5E5E5E;">$</span>buffers</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
NULL

[[2]]
Buffer</code></pre>
</div>
</div>
<p>Oh look, there are two buffers here! What‚Äôs the chance that the first one is the validity bitmap and the second one is the data buffer? (Answer: 100% chance). It turns out that this is another situation where a <code>Buffer</code> object belongs to an R6 class with a boring print method. I could bore you by going through the same process I did last time, but I‚Äôd rather not waste your time. It turns out that <code>Buffer</code> objects have a <code>data()</code> method of their own. When we call the <code>data()</code> method returns the bytes stored in the relevant buffer as a raw vector. At long last, we can pull out the raw bytes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">data_buffer <span class="ot" style="color: #003B4F;">&lt;-</span> duration<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>()<span class="sc" style="color: #5E5E5E;">$</span>buffers[[<span class="dv" style="color: #AD0000;">2</span>]]<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb27-2">data_buffer</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 18 01 00 00 ea 00 00 00 d5 00 00 00 ec 00 00 00 18 01 00 00 e3 00 00 00 49
[26] 00 00 00 02 01 00 00 6f 00 00 00 d6 00 00 00 e7 00 00 00 30 00 00 00 a5 00
[51] 00 00 06 01 00 00</code></pre>
</div>
</div>
<p>Shockingly, I personally cannot read binary, but as it turns out the <code>readBin()</code> function from base R is perfectly well equipped to do that. Let‚Äôs see what happens when we interpret these 56 bytes as a sequence of 14 integers:<sup>4</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">readBin</span>(data_buffer, <span class="at" style="color: #657422;">what =</span> <span class="st" style="color: #20794D;">"integer"</span>, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">14</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 280 234 213 236 280 227  73 258 111 214 231  48 165 262</code></pre>
</div>
</div>
<p>Those are the values stored in the <code>duration</code> array. Yay!</p>
<p><br></p>
</section>
<section id="prettier-arraydata" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="prettier-arraydata">Prettier ArrayData</h3>
<p>A little digression before we move on to talking about chunked arrays. Later in this post I‚Äôll occasionally want to show you the internal structure of an array, just so you can see that the buffers and metadata have the values you‚Äôd expect them to. The information I need for this is stored in the <code>ArrayData</code> object returned by a command like <code>duration$data()</code> but as we saw in the last section there‚Äôs no convenient way to display these objects. To make this a little simpler, I wrote my own <code>array_layout()</code> function that shows you the metadata and buffer contents associated with an Arrow array ‚Äì the source code is <a href="display_array_layout.R">here</a>) ‚Äî that doesn‚Äôt work for all array types, but can handle the ones I‚Äôm using in this post. When applied to the <code>duration</code> array it produces this output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">duration <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">array_layout</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
‚îÄ‚îÄ Metadata 
‚Ä¢ length : 14
‚Ä¢ null count : 0

‚îÄ‚îÄ Buffers 
‚Ä¢ validity : null
‚Ä¢ data : 280 234 213 236 280 227 73 258 111 214 231 48 165 262</code></pre>
</div>
</div>
<p>The output here is divided into two sections, structured to mirror how the Arrow columnar specification is described on the website (and also to mirrot the diagrams in the post). There is one section showing the metadata variables stored: array length, and a count of the number of null values. Underneath that we have a section listing all the buffers associated with an array. For an integer array like <code>duration</code> there are two buffers, the validity bitmap buffer and the data values buffer.</p>
<p>The <code>array_layout()</code> function also works for string arrays and produces similar output. However, character data in Arrow are stored using three buffers rather than two. As before the first buffer stores the validity bitmap. The second buffer is a vector of offsets specifying the locations for each of the substrings. The third buffer contains the character data itself. Here‚Äôs an example of that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">dance_fever<span class="sc" style="color: #5E5E5E;">$</span>title <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb33-2">  Array<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;">array_layout</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
‚îÄ‚îÄ Metadata 
‚Ä¢ length : 14
‚Ä¢ null count : 0

‚îÄ‚îÄ Buffers 
‚Ä¢ validity : null
‚Ä¢ offset : 0 4 8 19 31 48 63 77 86 100 108 115 124 132 145
‚Ä¢ data : KingFreeChoreomaniaBack in TownGirls Against GodDream Girl EvilPrayer
FactoryCassandraHeaven Is HereDaffodilMy LoveRestraintThe BombMorning Elvis</code></pre>
</div>
</div>
<p>If you want more information about how character data are stored in Arrow and how the offset buffer and data buffer are used to define the array as a whole, I wrote about it in tiresome detail in my <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/#character-types">data types post</a>. For the purposes of this post, it‚Äôs enough to understand that string arrays are organised using these three buffers.</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=5GHXEGz3PJg"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/hunger.png" class="img-fluid figure-img" width="945"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="chunked-arrays" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="chunked-arrays">Chunked arrays</h2>
<blockquote class="blockquote">
<p>I need my golden crown of sorrow, my bloody sword to swing<br>
I need my empty halls to echo with grand self-mythology<br>
‚ÄôCause I am no mother, I am no bride<br>
I am king<br>
&nbsp;&nbsp;‚Äì <em>King</em>, Florence + The Machine</p>
</blockquote>
<p>The next entry in the table of data objects refers to ‚Äúchunked arrays‚Äù. In most respects a chunked array behaves just like a regular array. It is a one-dimensional data structure. It requires every value stored to be of the same type: all integers, or all strings, or whatever. From the perspective of a <em>data scientist</em> who just wants to analyse the data, an array and a chunked array are essentially identical. Under the hood, however, they are quite different ‚Äì and the reason for this is fundamentally a <em>data engineering</em> issue. In this section I‚Äôll unpack this.</p>
<p>Recall at the beginning I emphasised that an array is an <a href="https://en.wikipedia.org/wiki/Immutable_object">immutable object</a>. Once an array has been created by Arrow, the values it stores cannot be altered. The decision to make arrays immutable reduces the need to create copies: many other objects can all safely refer to the array (via pointers) without making copies of the data, safe in the knowledge that it is impossible<sup>5</sup> for anyone else to change the data values. For large data sets that‚Äôs a huge advantage: you really don‚Äôt want to be making copies of data if you can avoid doing so. Immutable arrays are good.</p>
<p>Well, mostly good.</p>
<p>There are some limitations to immutable arrays, and one of the big ones is prompted by the very simple question: what happens when a new batch of data arrives? An array is immutable, so you can‚Äôt add the new information to an existing array. The only thing you can do if you don‚Äôt want to disturb or copy your existing array is create a new array that contains the new data. Doing that preserves the immutability of arrays and doesn‚Äôt lead to any unnecessary copying ‚Äì which keeps us happy(ish) from a data engineering perspective ‚Äì but now we have a new problem: the data are now split across two arrays. Each array contains only one ‚Äúchunk‚Äù of the data. We need some way of ‚Äúpretending‚Äù that these two arrays are in fact a single array-like object.</p>
<p>This is the problem that chunked arrays solve. A chunked array is a wrapper around a list of arrays, and allows you to index their contents ‚Äúas if‚Äù they were a single array. Physically, the data are still stored in separate places ‚Äì each array is one chunk, and these chunks don‚Äôt have to be adjacent to each other in memory ‚Äì but the chunked array provides us will a layer of abstraction that allows us to pretend that they are all one thing.</p>
<p><br></p>
<section id="list-like-aspects" class="level3">
<h3 class="anchored" data-anchor-id="list-like-aspects">List-like aspects</h3>
<p>Here‚Äôs an example. I‚Äôll take some lyrics to <em>King</em> by Florence + The Machine, and use the <code>chunked_array()</code> function from <strong>arrow</strong> to store them as a chunked array that is comprised of three smaller arrays:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">king <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(</span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"am"</span>, <span class="st" style="color: #20794D;">"no"</span>, <span class="st" style="color: #20794D;">"mother"</span>), <span class="co" style="color: #5E5E5E;"># chunk 0</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"am"</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"bride"</span>),    <span class="co" style="color: #5E5E5E;"># chunk 1</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"am"</span>, <span class="st" style="color: #20794D;">"king"</span>)          <span class="co" style="color: #5E5E5E;"># chunk 2</span></span>
<span id="cb35-5">)</span></code></pre></div>
</div>
<p>An alternative way to do the same thing would be to use the <code>create()</code> method of the <a href="https://r6.r-lib.org/">R6 object</a> <code>ChunkedArray</code>. In fact, the <code>chunked_array()</code> function is just a slightly nicer wrapper around the same functionality that <code>ChunkedArray$create()</code> provides. But that‚Äôs a bit of a digression. Let‚Äôs take a look at the object I just created:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">king</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "I",
    "am",
    "no",
    "mother"
  ],
  [
    "I",
    "am",
    null,
    "bride"
  ],
  [
    "I",
    "am",
    "king"
  ]
]</code></pre>
</div>
</div>
<p>The double bracketing in this output is intended to highlight the ‚Äúlist-like‚Äù nature of chunked arrays. There are three separate arrays that I have created here, wrapped in a handly little container object that is secretly a list of arrays, but allows that list to behave just like a regular one-dimensional data structure. Schematically, this is what I‚Äôve just created:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/chunked_array_layout.svg" class="img-fluid"></p>
</div>
</div>
<p>As this figure illustrates, there really are three arrays here. I can pull them out individually by referring to their position in the array list by using the <code>chunk()</code> method that all chunked array objects possess. This is another one of those situations where I‚Äôm using a low-level feature, and the zero-based indexing in Arrow reappears. To extract the second chunk, here‚Äôs what I do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">king<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">chunk</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "I",
  "am",
  null,
  "bride"
]</code></pre>
</div>
</div>
<p>Notice from the output that this chunk is a vanilla <code>Array</code> object, and I can take a peek at the underlying metadata and buffers associated with that object by using the <code>array_layout()</code> function I wrote earlier. Here‚Äôs what that chunk looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">king<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">chunk</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">array_layout</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
‚îÄ‚îÄ Metadata 
‚Ä¢ length : 4
‚Ä¢ null count : 1

‚îÄ‚îÄ Buffers 
‚Ä¢ validity : 1 1 0 1
‚Ä¢ offset : 0 1 3 3 8
‚Ä¢ data : Iambride</code></pre>
</div>
</div>
<p>Hopefully by now this all looks quite familiar to you! The <code>Array</code> object here has length 4, contains 1 missing value (referred to as null values in Arrow), and because it is a string array, it contains three buffers: a validity bitmap, an offset buffer, and a data buffer.</p>
<p><br></p>
</section>
<section id="vector-like-aspects" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="vector-like-aspects">Vector-like aspects</h3>
<p>In the previous section I highlighted the fact that internally a chunked array is ‚Äújust‚Äù a list of arrays and showed you how you can interact with a chunked array in a ‚Äúlist-like‚Äù way. Most of the time though, when you‚Äôre working with a chunked array as a data analyst you aren‚Äôt really interested in its list-like properties, what you actually care about is the abstraction layer that provides it with vector-like properties. Specifically, what you actually care about is the fact that a chunked array is a one-dimensional object with a single indexing scheme. Let‚Äôs go back to the <code>king</code> data to illustrate this. Suppose I want to extract a subset of the elements. Specifically I want to grab the 3rd through 6th elements. These slots actually belong to different arrays, and it would be a pain to extract the 3rd and 4th slots from the first array, and the 1st and 2nd slots from the second array. No data analyst wants that headache. Fortunately, I don‚Äôt have to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">king[<span class="dv" style="color: #AD0000;">3</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "no",
    "mother"
  ],
  [
    "I",
    "am"
  ]
]</code></pre>
</div>
</div>
<p>As an R user you are probably breathing a sigh of relief to see the return of one-based indexing! Again I should stress that this is the norm: as a general rule, the <strong>arrow</strong> package tries to mimic R conventions whenever you are ‚Äújust trying to do normal R things‚Äù. If you‚Äôre trying to manipulate and analyse data, the intention is that your regular <strong>dplyr</strong> functions should work the same way they always did, and the same goes for subsetting data. In R, the first element of a vector is element 1, not element 0, and that convention is preserved here. The only time you‚Äôre going to see <strong>arrow</strong> adopt zero-based indexing is when you are interacting with Arrow at a low level.</p>
<p>Another thing to highlight about chunked arrays is that the ‚Äúchunking‚Äù is not considered semantically meaningful. It is an internal implementation detail only: you should never treat the chunk as a meaningful unit! Writing the data to disk, for example, often results in the data being organised into different chunks. Two arrays that have the same values in different chunking arrangements are deemed equivalent. For example, here‚Äôs the same four values as <code>king[3:6]</code> all grouped into a single chunk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">no_mother <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"no"</span>, <span class="st" style="color: #20794D;">"mother"</span>, <span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"am"</span>))</span>
<span id="cb44-2">no_mother</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "no",
    "mother",
    "I",
    "am"
  ]
]</code></pre>
</div>
</div>
<p>When I test for equality using <code>==</code>, you can see that the results are shown element-wise. All four elements are the same, so the result is a (chunked) array of four <code>true</code> values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">no_mother <span class="sc" style="color: #5E5E5E;">==</span> king[<span class="dv" style="color: #AD0000;">3</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    true,
    true,
    true,
    true
  ]
]</code></pre>
</div>
</div>
<p>The intention, ultimately, is that users should be able to interact with chunked arrays as if they were ordinary one-dimensional data structures without ever having to think much about their list-like nature. Chunked arrays exist as an abstraction to help bridge the gap between the needs of the data engineer and the needs of the data scientist. So except in those special cases where you have to think carefully about the engineering aspect, a data analyst should be able to treat them just like regular vectors!</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=L62LtChAwww"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/king.png" class="img-fluid figure-img" width="1276"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="record-batches" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="record-batches">Record batches</h2>
<p>Now that we have a good understanding of zero dimensional data objects (scalars), and one dimensional data objects (arrays and chunked arrays), the time has come to make the jump into the second dimension and talk about tabular data structures in <strong>arrow</strong>. In the data objects table I presented at the start of the post there are three of these listed: record batches, tables, and datasets. Record batches are the simplest of the three so I‚Äôm going to start there, but in everyday data analysis you‚Äôre not likely to be using them very much: in practice tables and datasets are the things you‚Äôre likely to care about most. Even so, from a learning standpoint it really helps to have a good understanding of record batches because the other concepts are built on top of them.</p>
<p>A record batch is table-like data structure comprised of a sequence of arrays. The arrays can be of different types but they must all be the same length. Each array is referred to as one of the ‚Äúfields‚Äù or ‚Äúcolumns‚Äù of the record batch. This probably sounds terribly familiar to you as an R user, because ‚Äì apart from a few differences in terminology ‚Äì what I‚Äôve just described to you is essentially the same kind of thing as a data frame. The parallels between record batches and data frames run deeper too:</p>
<ul>
<li>In R, the columns in a data frame must be named.<sup>6</sup> Record batches have the same property: each field must have a (UTF8-encoded) name, and these names form part of the metadata for the record batch.</li>
<li>A data frame in R is secretly just a list of vectors, and like any other list it does not really ‚Äúcontain‚Äù those vectors: rather it consists of a set of pointers that link to those vector objects. There‚Äôs a good discussion of list references in <a href="https://adv-r.hadley.nz/names-values.html#list-references">chapter 2 of Advanced R</a>. Record batches in Arrow are much the same. When stored in memory, the record batch does not include physical storage for the values stored in each field, it simply contains pointers to the relevant array objects. It does, however, contain its own validity bitmap.</li>
</ul>
<p>To illustrate, let‚Äôs return to our <code>dance_fever</code> data set. Here it is as a data frame (well, tibble technically, but whatever):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">dance_fever</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 14 √ó 3
   track_number title             duration
          &lt;int&gt; &lt;chr&gt;                &lt;int&gt;
 1            1 King                   280
 2            2 Free                   234
 3            3 Choreomania            213
 4            4 Back in Town           236
 5            5 Girls Against God      280
 6            6 Dream Girl Evil        227
 7            7 Prayer Factory          73
 8            8 Cassandra              258
 9            9 Heaven Is Here         111
10           10 Daffodil               214
11           11 My Love                231
12           12 Restraint               48
13           13 The Bomb               165
14           14 Morning Elvis          262</code></pre>
</div>
</div>
<p>The <strong>arrow</strong> package provides two different ways to create a record batch. I can either use <code>RecordBatch$create()</code> or I can use the <code>record_batch()</code> function. The latter is simpler, so I‚Äôll do that. The <code>record_batch()</code> function is pretty flexible, and can accept inputs in several formats. I can pass it a data frame, one or more named vectors, an input stream, or even a raw vector containing appropriate binary data. But I don‚Äôt need all that fancy complexity here so I‚Äôll just give it a data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">record_batch</span>(dance_fever)</span>
<span id="cb50-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RecordBatch
14 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>The output is amusingly terse. It doesn‚Äôt give a preview of the data, but it kindly confirms that this is a record batch containing 14 rows and 3 columns. It also tells me the column names and the type of data stored in each column. The <strong>arrow</strong> package supplies a <code>$</code> method for record batch objects, and it behaves the same way you‚Äôd expect for a data frame. If I want to look at a particular column in my record batch, I can refer to it by name like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">df<span class="sc" style="color: #5E5E5E;">$</span>title</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "King",
  "Free",
  "Choreomania",
  "Back in Town",
  "Girls Against God",
  "Dream Girl Evil",
  "Prayer Factory",
  "Cassandra",
  "Heaven Is Here",
  "Daffodil",
  "My Love",
  "Restraint",
  "The Bomb",
  "Morning Elvis"
]</code></pre>
</div>
</div>
<p>At an abstract level the <code>df</code> object behaves like a two dimensional structure with rows and columns, but in terms of how it is represented in memory it is fundamentally a list of arrays, and so schematically I‚Äôve drawn it like this:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/record_batch_layout.svg" class="img-fluid"></p>
</div>
</div>
<p>In some respects it‚Äôs structurally similar to a chunked array, insofar record batches and chunked arrays are both lists of arrays, but in other ways they are quite different. The arrays indexed in a record batch can be different types, but they must be the same length: this is required to ensure that at a high level we can treat a record batch like a two dimensional table. In contrast, the arrays indexed by a chunked array can be different lengths, but must all be the same type: this is required to ensure that at a high level we can treat a chunked array like a one dimensional vector.</p>
<p>Returning to the practical details, it‚Äôs worth noting that in addition to the <code>$</code> operator that refers to columns by name, you can use double brackets <code>[[</code> to refer to columns by position. Just like we saw with chunked array, these positions follow the R convention of using 1 to refer to the first element. The <code>df$title</code> array is the 2nd column in our record batch so I can extract it with this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">df[[<span class="dv" style="color: #AD0000;">2</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "King",
  "Free",
  "Choreomania",
  "Back in Town",
  "Girls Against God",
  "Dream Girl Evil",
  "Prayer Factory",
  "Cassandra",
  "Heaven Is Here",
  "Daffodil",
  "My Love",
  "Restraint",
  "The Bomb",
  "Morning Elvis"
]</code></pre>
</div>
</div>
<p>Finally there is a <code>[</code> method that allows you to extract subsets of a record batch in the same way you would for a data frame. The command <code>df[1:10, 1:2]</code> extracts the first 10 rows and the first 2 columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">df[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RecordBatch
10 rows x 2 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;</code></pre>
</div>
</div>
<p>If you are wondering what <code>df[1:2]</code> returns, try it out for yourself. Hopefully you will not be surprised!</p>
<p><br></p>
<section id="serialisation" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="serialisation">Serialisation</h3>
<p>Before I move on to talk about Arrow tables, I want to make a small digression. At the beginning of this post I mentioned that my very first attempt to write about Arrow ended up becoming a post about <a href="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/">data serialisation in R</a> that had nothing to do with Arrow. That didn‚Äôt happen entirely by accident, and I‚Äôll try to explain some of that now.</p>
<p>When we talk about data serialisation, what we‚Äôre talking about is taking a data structure stored in memory and organising it into a format that is suitable for writing to disk (serialising to file format) or transmitting over some other communication channel (serialising to a stream). From the beginning, data structures in Arrow were designed <em>together</em> with file formats and streaming formats, with the intention that ‚Äì to the extent that it is practical and doesn‚Äôt mess with other important design considerations ‚Äì the thing you send across the communication channel (or write to disk) has the same structure as the thing you need to store in memory. That way, when the data arrive at the other end, you don‚Äôt have to do a lot of work reorganising the data.</p>
<p>That‚Ä¶ makes sense, right?</p>
<p>If I want to tell you to meet me under the bridge, the message I should send you should be ‚Äúmeet me under the bridge‚Äù. It makes no sense whatsoever for me to say ‚Äúmeet me [the title of that really annoying Red Hot Chilli Peppers song]‚Äù and expect you to decode it. There is no point in me expending effort deliberately obscuring what I‚Äôm trying to say, and then forcing you to expend effort trying to interpret my message.</p>
<p>Yet, surprisingly, that‚Äôs what happens a lot of the time when we send data across communication channels. For example, suppose you and I are both R users. We both work with data frames. Because a data frame is fundamentally a list of variables (each of which is a vector), we use data that are organised <em>column-wise</em>: the first thing in a data frame is column 1, then column 2, then column 3, and so on. Okay, cool. So now let‚Äôs say you want to send me a data set, and what you do is send me a CSV file. A CSV file is written row by row: the first thing in a CSV file is row 1, then row 2, then row 3. It is a <em>row-wise</em> data structure. In order for you to send data to me, what has to happen is you take your column-wise data frame, invert it so that it is now a row-wise structure, write that to a CSV and then send it to me. At the other end, I have to invert the whole process, transforming the row-wise structure into a column-wise organisation that I can now load into memory as a data frame.<sup>7</sup></p>
<p>Um‚Ä¶ that <em>doesn‚Äôt</em> make sense.</p>
<p>This particular problem arises quite a lot, largely because serialisation formats and in-memory data structures aren‚Äôt always designed in tandem. To get around this, Arrow specifies the <a href="https://arrow.apache.org/docs/format/Columnar.html#serialization-and-interprocess-communication-ipc">Interprocess Communication</a> (IPC) serialisation format that is designed specifically to ensure that Arrow data objects can be transmitted (and saved) efficiently. Because data sets are typically organised into tabular structures, the primitive unit for communication is the record batch. I‚Äôm not going to dive into the very low level details of how IPC messages are structured, but the key thing for our purposes is that IPC is designed to ensure that the structure of the serialised record batch is essentially identical to the physical layout of an in-memory record batch.</p>
<p>I‚Äôll give a very simple example. Let‚Äôs take the first few rows of the <code>dance_fever</code> data set and convert them into a small record batch:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">df_batch_0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">record_batch</span>(dance_fever[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>,])</span>
<span id="cb58-2">df_batch_0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RecordBatch
4 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>Suppose I want to share this. Currently this is an object in memory that consists of three arrays (which are contiguous in memory) but as we‚Äôve seen earlier, these arrays are themselves comprised of multiple buffers. What the IPC format does is collect the relevant metadata into a ‚Äúdata header‚Äù,<sup>8</sup> and then lay out the buffers one after the other. Glossing a few minor details<sup>9</sup>, this is essentially what the IPC message would look like for this record batch:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/record_batch_serialised.svg" class="img-fluid"></p>
</div>
</div>
<p>At this point you‚Äôre probably thinking okay that‚Äôs nice Danielle, but how do I do this? There are three functions you can use:</p>
<ul>
<li>To send the data directly to an output stream use <code>write_ipc_stream()</code>.</li>
<li>To write data in IPC format to a static file on disk it is referred to as a ‚Äúfeather‚Äù formatted file,<sup>10</sup> and you use <code>write_feather()</code>.</li>
<li>To construct the same sequence of bytes but return them in R as raw vectors, you can use <code>write_to_raw()</code>.</li>
</ul>
<p>In order to show you what the byte stream actually looks like, I‚Äôll use the <code>write_to_raw()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">df_ipc_0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">write_to_raw</span>(df_batch_0)</span>
<span id="cb60-2">df_ipc_0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] ff ff ff ff f0 00 00 00 10 00 00 00 00 00 0a 00 0c 00 06 00 05 00 08 00 0a
 [26] 00 00 00 00 01 04 00 0c 00 00 00 08 00 08 00 00 00 04 00 08 00 00 00 04 00
 [51] 00 00 03 00 00 00 7c 00 00 00 3c 00 00 00 04 00 00 00 a0 ff ff ff 00 00 01
 [76] 02 10 00 00 00 1c 00 00 00 04 00 00 00 00 00 00 00 08 00 00 00 64 75 72 61
[101] 74 69 6f 6e 00 00 00 00 8c ff ff ff 00 00 00 01 20 00 00 00 d4 ff ff ff 00
[126] 00 01 05 10 00 00 00 1c 00 00 00 04 00 00 00 00 00 00 00 05 00 00 00 74 69
[151] 74 6c 65 00 00 00 04 00 04 00 04 00 00 00 10 00 14 00 08 00 06 00 07 00 0c
[176] 00 00 00 10 00 10 00 00 00 00 00 01 02 10 00 00 00 28 00 00 00 04 00 00 00
[201] 00 00 00 00 0c 00 00 00 74 72 61 63 6b 5f 6e 75 6d 62 65 72 00 00 00 00 08
[226] 00 0c 00 08 00 07 00 08 00 00 00 00 00 00 01 20 00 00 00 00 00 00 00 ff ff
[251] ff ff f8 00 00 00 14 00 00 00 00 00 00 00 0c 00 16 00 06 00 05 00 08 00 0c
[276] 00 0c 00 00 00 00 03 04 00 18 00 00 00 58 00 00 00 00 00 00 00 00 00 0a 00
[301] 18 00 0c 00 04 00 08 00 0a 00 00 00 8c 00 00 00 10 00 00 00 04 00 00 00 00
[326] 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[351] 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00
[376] 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00
[401] 28 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 48 00 00 00 00 00 00 00 00
[426] 00 00 00 00 00 00 00 48 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00
[451] 00 00 03 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00
[476] 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00
[501] 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 00 00 00 00 04
[526] 00 00 00 08 00 00 00 13 00 00 00 1f 00 00 00 00 00 00 00 4b 69 6e 67 46 72
[551] 65 65 43 68 6f 72 65 6f 6d 61 6e 69 61 42 61 63 6b 20 69 6e 20 54 6f 77 6e
[576] 00 18 01 00 00 ea 00 00 00 d5 00 00 00 ec 00 00 00 ff ff ff ff 00 00 00 00</code></pre>
</div>
</div>
<p>To reassure you that this byte stream does indeed contain the relevant information, I‚Äôll use the <code>read_ipc_stream()</code> function to decode it. By default this function returns data to R natively as a tibble, which is fine for my purposes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;">read_ipc_stream</span>(df_ipc_0)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 √ó 3
  track_number title        duration
         &lt;int&gt; &lt;chr&gt;           &lt;int&gt;
1            1 King              280
2            2 Free              234
3            3 Choreomania       213
4            4 Back in Town      236</code></pre>
</div>
</div>
<p>We can use the same logic to write data to disk. As mentioned above, when writing data in IPC format to file, the result is called a ‚Äúfeather‚Äù file. So okay, let‚Äôs take the rest of the <code>dance_fever</code> data, and write it to a feather file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">dance_fever[<span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">14</span>,] <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb64-2">  <span class="fu" style="color: #4758AB;">record_batch</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb64-3">  <span class="fu" style="color: #4758AB;">write_feather</span>(<span class="st" style="color: #20794D;">"df_ipc_1.feather"</span>)</span></code></pre></div>
</div>
<p>Now we can read this feather file from disk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fu" style="color: #4758AB;">read_feather</span>(<span class="st" style="color: #20794D;">"df_ipc_1.feather"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 √ó 3
   track_number title             duration
          &lt;int&gt; &lt;chr&gt;                &lt;int&gt;
 1            5 Girls Against God      280
 2            6 Dream Girl Evil        227
 3            7 Prayer Factory          73
 4            8 Cassandra              258
 5            9 Heaven Is Here         111
 6           10 Daffodil               214
 7           11 My Love                231
 8           12 Restraint               48
 9           13 The Bomb               165
10           14 Morning Elvis          262</code></pre>
</div>
</div>
<p>Yay! It‚Äôs always nice when things do what you expect them to do.</p>
<p>Before moving on, there‚Äôs one last thing I should mention. The feather file format is a handy thing to know about, and can be very convenient in some instances, but it‚Äôs not really optimised to be the best ‚Äúbig data file format‚Äù. It‚Äôs intended to be the file format analog of IPC messages, and those in turn are designed for optimal streaming of Arrow data. Because of this, in practice you will probably not find yourself using the feather format all that much. Instead, you‚Äôre more likely to use something like <a href="https://parquet.apache.org/">Apache Parquet</a>, which is explicitly designed for this purpose. Arrow and parquet play nicely with one another, and <strong>arrow</strong> supports reading and parquet files using the <code>read_parquet()</code> and <code>write_parquet()</code> functions. However, parquet is a topic for a future post, so that‚Äôs all I‚Äôll say about this today!</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=zZr5Tid3Qw4"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/delilah.png" class="img-fluid figure-img" width="1274"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="tables" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="tables">Tables</h2>
<blockquote class="blockquote">
<p>Tell me where to put my love<br>
Do I wait for time to do what it does?<br>
I don‚Äôt know where to put my love<br>
&nbsp;&nbsp;‚Äì <em>My Love</em>, Florence + The Machine</p>
</blockquote>
<p>Earlier when I introduced the concept of chunked arrays, I explained that Arrow needs these structures because arrays are immutable objects, and Arrow is designed to avoid copying data whenever possible: when a new block of data arrive, it is stored as its own array without disturbing the existing ones, and we use the chunked array as a wrapper that lets us pretend that all these chunks are laid out end to end in a single vector. The previous section shows you exactly how that can happen. If I have a data set that arrives sequentially as a sequence of record batches, I have this problem for every column in the data set! Quite by accident<sup>11</sup> that‚Äôs what happened in the last section ‚Äì the <code>dance_fever</code> data set has been serialised in two parts. In that example it happened because I wanted to show you what an IPC stream looked like (creating one record batch for that) as well as what a feather file looks like (creating another record batch), but in real life it‚Äôs more likely to happen every time you receive an update on an ongoing data collection process (e.g., today‚Äôs data arrive).</p>
<p>To deal with this situation, we need a tabular data structure that is similar to a record batch with one exception: instead of storing each column as an array, we now want to store it as a chunked array. This is what the <code>Table</code> class in <strong>arrow</strong> does. Schematically, here‚Äôs what the data structure for a table looks like:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/table_layout.svg" class="img-fluid"></p>
</div>
</div>
<p>Tables have a huge advantage over record batches: they can be concatenated. You can‚Äôt append one record batch to another because arrays are immutable: you can‚Äôt append one array to the end of another array. You would have to create a new array with all new data ‚Äì and do this for <em>every</em> column in the data ‚Äì which is a thing we really don‚Äôt want to do. But because tables are built from chunked arrays, concatenation is easy: all you have to do is update the chunked arrays so that they include pointers to the newly-arrived arrays as well as the previously-existing arrays.</p>
<p>Because tables are so much more flexible than record batches, functions in <strong>arrow</strong> tend to return tables rather than record batches. Unless you do what I did in the previous section and deliberately call <code>record_batch()</code> you‚Äôre not likely to encounter them as the output of normal data analysis code.<sup>12</sup> For instance, in the previous section I serialised two record batches, one to a file and one to a raw vector. Let‚Äôs look at what happens when I try to deserialise (a.k.a. ‚Äúread‚Äù) them. First the IPC stream:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">df_table_0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_ipc_stream</span>(</span>
<span id="cb67-2">  <span class="at" style="color: #657422;">file =</span> df_ipc_0, </span>
<span id="cb67-3">  <span class="at" style="color: #657422;">as_data_frame =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb67-4">)</span>
<span id="cb67-5">df_table_0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
4 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>That‚Äôs the same data as before, but it‚Äôs a table not a record batch. Each column is a chunked array, not an array. The same happens when I read from the feather file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">df_table_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_feather</span>(</span>
<span id="cb69-2">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"df_ipc_1.feather"</span>, </span>
<span id="cb69-3">  <span class="at" style="color: #657422;">as_data_frame =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb69-4">)</span>
<span id="cb69-5">df_table_1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
10 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>Again, this is a table. In general, you won‚Äôt get a record batch in <strong>arrow</strong> unless you explicitly ask for one. Tables are the default tabular data structure, which is usually what you want anyway.</p>
<p>Okay, so now I have the two fragments of my data set represented as tables. The difference between the table version and the record batch version is that the columns are all represented as chunked arrays. Each array from the original record batch is now one chunk in the corresponding chunked array in the table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">df_batch_0<span class="sc" style="color: #5E5E5E;">$</span>title</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "King",
  "Free",
  "Choreomania",
  "Back in Town"
]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">df_table_0<span class="sc" style="color: #5E5E5E;">$</span>title</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "King",
    "Free",
    "Choreomania",
    "Back in Town"
  ]
]</code></pre>
</div>
</div>
<p>It‚Äôs the same underlying data (and indeed the same immutable array is referenced by both), just enclosed by a new, flexible chunked array wrapper. However, it is this wrapper that allows us to concatenate tables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">concat_tables</span>(</span>
<span id="cb75-2">  df_table_0,</span>
<span id="cb75-3">  df_table_1</span>
<span id="cb75-4">)</span>
<span id="cb75-5">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
14 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>This is successful (yay!) and the result will behave exactly like a two dimensional object with <code>$</code>, <code>[[</code>, and <code>[</code> operators that behave as you expect them to<sup>13</sup> (yay!), but if you look closely you can still see the ‚Äúseams‚Äù showing where the tables were appended:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">df<span class="sc" style="color: #5E5E5E;">$</span>title</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "King",
    "Free",
    "Choreomania",
    "Back in Town"
  ],
  [
    "Girls Against God",
    "Dream Girl Evil",
    "Prayer Factory",
    "Cassandra",
    "Heaven Is Here",
    "Daffodil",
    "My Love",
    "Restraint",
    "The Bomb",
    "Morning Elvis"
  ]
]</code></pre>
</div>
</div>
<p>When tables are concatenated the chunking is preserved. That‚Äôs because those are the original arrays, still located at the same spot in memory. That‚Äôs efficient from a memory use perspective, but again, don‚Äôt forget that the chunking is not semantically meaningful, and there is no guaranteed that a write-to-file operation (e.g., to parquet format) will preserve those chunks.</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=h9CNGPy11Jc"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/my_love.png" class="img-fluid figure-img" width="1277"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="datasets" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="datasets">Datasets</h2>
<blockquote class="blockquote">
<p>What kind of man loves like this?<br>
To let me dangle at a cruel angle<br>
Oh, my feet don‚Äôt touch the floor<br>
Sometimes you‚Äôre half in and then you‚Äôre half out<br>
Buy you never close the door<br>
&nbsp;&nbsp;‚Äì <em>What Kind Of Man</em>, Florence + The Machine</p>
</blockquote>
<p>So what about datasets? They‚Äôre the last item on that table, and you might be wondering where they fall in all this. I‚Äôm not going to dive into the details on datasets in this post, because they‚Äôre a whole separate topic and they deserve their own blog post. However, it‚Äôs a little unsatisfying to write all this and not say anything about them, so I‚Äôll give a very quick overview here.</p>
<p>Up to this point I‚Äôve talked about tabular data sets that are contained entirely in memory. When such data are written to disk, they are typically written to a single file. For larger-than-memory data sets, a different strategy is needed. Only a subset of the data can be stored in memory at any point in time, and as a consequence it becomes convenient to write the data to disk by partitioning it into many smaller files. This functionality is supported in Arrow via Datasets.</p>
<p>I‚Äôll give a simple example here, using a small data set. Let‚Äôs suppose I‚Äôve downloaded the entire Florence + The Machine discography using the <strong>spotifyr</strong> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">florence <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_discography</span>(<span class="st" style="color: #20794D;">"florence + the machine"</span>)</span>
<span id="cb79-2">florence</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 414 √ó 41
# Groups:   album_name [18]
   artist_name   artis‚Ä¶¬π album‚Ä¶¬≤ album‚Ä¶¬≥ album‚Ä¶‚Å¥ album‚Ä¶‚Åµ album‚Ä¶‚Å∂ album‚Ä¶‚Å∑ dance‚Ä¶‚Å∏
   &lt;chr&gt;         &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;list&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;
 1 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.73 
 2 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.467
 3 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.635
 4 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.346
 5 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.599
 6 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.565
 7 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.472
 8 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.571
 9 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.542
10 Florence + T‚Ä¶ 1moxjb‚Ä¶ 0uGwPm‚Ä¶ album   &lt;df&gt;    2022-0‚Ä¶    2022 day       0.643
# ‚Ä¶ with 404 more rows, 32 more variables: energy &lt;dbl&gt;, key &lt;int&gt;,
#   loudness &lt;dbl&gt;, mode &lt;int&gt;, speechiness &lt;dbl&gt;, acousticness &lt;dbl&gt;,
#   instrumentalness &lt;dbl&gt;, liveness &lt;dbl&gt;, valence &lt;dbl&gt;, tempo &lt;dbl&gt;,
#   track_id &lt;chr&gt;, analysis_url &lt;chr&gt;, time_signature &lt;int&gt;, artists &lt;list&gt;,
#   available_markets &lt;list&gt;, disc_number &lt;int&gt;, duration_ms &lt;int&gt;,
#   explicit &lt;lgl&gt;, track_href &lt;chr&gt;, is_local &lt;lgl&gt;, track_name &lt;chr&gt;,
#   track_preview_url &lt;lgl&gt;, track_number &lt;int&gt;, type &lt;chr&gt;, track_uri &lt;chr&gt;, ‚Ä¶</code></pre>
</div>
</div>
<p>The <code>florence</code> data frame is of course quite small, and I have no real need to use Arrow Datasets: it‚Äôs small enough that I can store it natively in R as a tibble! But it will suffice to illustrate concepts that come in handy when working with large datasets.</p>
<p>Let‚Äôs suppose I want to partition this in into many data files, using the album release year as the basis for the partitioning. To do this I‚Äôll use the <code>write_dataset()</code> function, specifying <code>partitioning = "album_release_year"</code> to ensure that files are created after splitting the data set by release year. By default, the <code>write_dataset()</code> function writes individual data files in the parquet format, which is in general a very good default choice for large tabular data sets. However, because I have not talked about <a href="https://parquet.apache.org/">Apache Parquet</a> in this post, I‚Äôll make a different choice and write the data files in the feather format that we‚Äôve seen earlier in this post. I can do that by setting <code>format = "feather"</code>. Finally, I‚Äôll set <code>path = "spotify_florence"</code> to ensure that all the files are stored in a folder by that name. That gives this command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1">florence <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb81-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">where</span>(<span class="sc" style="color: #5E5E5E;">~!</span><span class="fu" style="color: #4758AB;">is.list</span>(.))) <span class="sc" style="color: #5E5E5E;">|&gt;</span>  <span class="co" style="color: #5E5E5E;"># drop list columns</span></span>
<span id="cb81-3">  <span class="fu" style="color: #4758AB;">as_arrow_table</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span>             <span class="co" style="color: #5E5E5E;"># convert to an arrow table</span></span>
<span id="cb81-4">  <span class="fu" style="color: #4758AB;">write_dataset</span>(                  <span class="co" style="color: #5E5E5E;"># write to multi-file storage</span></span>
<span id="cb81-5">    <span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"spotify_florence"</span>,</span>
<span id="cb81-6">    <span class="at" style="color: #657422;">format =</span> <span class="st" style="color: #20794D;">"feather"</span>,</span>
<span id="cb81-7">    <span class="at" style="color: #657422;">partitioning =</span> <span class="st" style="color: #20794D;">"album_release_year"</span></span>
<span id="cb81-8">  )</span></code></pre></div>
</div>
<p>The result is that the following files are written to disk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="st" style="color: #20794D;">"spotify_florence"</span>, <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "album_release_year=2009/part-0.feather"
[2] "album_release_year=2010/part-0.feather"
[3] "album_release_year=2011/part-0.feather"
[4] "album_release_year=2012/part-0.feather"
[5] "album_release_year=2015/part-0.feather"
[6] "album_release_year=2018/part-0.feather"
[7] "album_release_year=2022/part-0.feather"</code></pre>
</div>
</div>
<p>These file names are written in ‚ÄúHive partitioning‚Äù format. It looks a little weird the first time you encounter it, because <code>=</code> is a character most coders instinctively avoid including in file names because it has such a strong meaning in programming contexts. However, when files are named in Hive partitioning format, the intended interpretation is exactly the one you implicitly expect as a coder: it‚Äôs a <code>field_name=value</code> statement, so you will often encounter files with names like</p>
<pre><code>/year=2019/month=2/data.parquet</code></pre>
<p>For more information see the help documentation for the <code>hive_partitioning()</code> function in the <strong>arrow</strong> package.</p>
<p>In any case, the key thing is that I‚Äôve now written the data to disk in a fashion that splits it across multiple files. For the Florence + The Machine discography data this is is really not needed because the entire <code>spotify_florence</code> folder occupies a mere 320kB on my hard drive. However, elsewhere on my laptop I have a copy of the infamous New York City Taxi data set, and that one occupies a rather more awkward 69GB of storage. For that one, it really does matter that I have it written to disk in a sensible format!</p>
<p>Having a data set stored in a distributed multi-file format is nice, but it‚Äôs only useful if I can open it and work with it as if it were the same as a regular tabular data set. The <code>open_dataset()</code> function allows me to do exactly this. Here‚Äôs what happens when I open the file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">florence_dataset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_dataset</span>(<span class="st" style="color: #20794D;">"spotify_florence"</span>, <span class="at" style="color: #657422;">format =</span> <span class="st" style="color: #20794D;">"feather"</span>)</span>
<span id="cb85-2">florence_dataset</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FileSystemDataset with 7 Feather files
artist_name: string
artist_id: string
album_id: string
album_type: string
album_release_date: string
album_release_date_precision: string
danceability: double
energy: double
key: int32
loudness: double
mode: int32
speechiness: double
acousticness: double
instrumentalness: double
liveness: double
valence: double
tempo: double
track_id: string
analysis_url: string
time_signature: int32
disc_number: int32
duration_ms: int32
explicit: bool
track_href: string
is_local: bool
track_name: string
track_preview_url: bool
track_number: int32
type: string
track_uri: string
external_urls.spotify: string
album_name: string
key_name: string
mode_name: string
key_mode: string
track_n: double
album_release_year: int32

See $metadata for additional Schema metadata</code></pre>
</div>
</div>
<p>Okay yes, the output makes clear that I have loaded <em>something</em> and it has registered the existence of the 7 constituent files that comprise the dataset as a whole. But can I work with it? One of the big selling points to the <strong>arrow</strong> package is that it supplies a <strong>dplyr</strong> backend that lets me work with <code>Tables</code> as if they were R data frames, using familiar syntax. Can I do the same thing with <code>Datasets</code>?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">danceability <span class="ot" style="color: #003B4F;">&lt;-</span> florence_dataset <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb87-2">  <span class="fu" style="color: #4758AB;">select</span>(album_name, track_name, danceability) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb87-3">  <span class="fu" style="color: #4758AB;">distinct</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb87-4">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(danceability)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb87-5">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb87-6">  <span class="fu" style="color: #4758AB;">compute</span>()</span>
<span id="cb87-7"></span>
<span id="cb87-8">danceability</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
10 rows x 3 columns
$album_name &lt;string&gt;
$track_name &lt;string&gt;
$danceability &lt;double&gt;

See $metadata for additional Schema metadata</code></pre>
</div>
</div>
<p>Yes. Yes I can. Because I called <code>compute()</code> at the end of this pipeline rather than <code>collect()</code>, the results have been returned to me as a <code>Table</code> rather than a data frame. I did that so that I can show that the <code>danceability</code> output is no different to the <code>Table</code> objects we‚Äôve seen earlier, constructed from <code>ChunkedArray</code> objects:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1">danceability<span class="sc" style="color: #5E5E5E;">$</span>track_name</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "Heaven Is Here",
    "King",
    "King",
    "Hunger",
    "My Love - Acoustic",
    "Ghosts - Demo",
    "What The Water Gave Me - Demo",
    "What The Water Gave Me - Demo",
    "South London Forever",
    "What The Water Gave Me - Demo"
  ]
]</code></pre>
</div>
</div>
<p>If I want to I can convert this to a tibble, and discover that ‚ÄúDance Fever‚Äù does indeed contain the most danceable Florence + The Machine tracks, at least according to Spotify:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="fu" style="color: #4758AB;">as.data.frame</span>(danceability)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 √ó 3
   album_name                            track_name                    danceab‚Ä¶¬π
   &lt;chr&gt;                                 &lt;chr&gt;                             &lt;dbl&gt;
 1 Dance Fever                           Heaven Is Here                    0.852
 2 Dance Fever                           King                              0.731
 3 Dance Fever (Deluxe)                  King                              0.73 
 4 High As Hope                          Hunger                            0.729
 5 Dance Fever (Deluxe)                  My Love - Acoustic                0.719
 6 Lungs (Deluxe Version)                Ghosts - Demo                     0.681
 7 Ceremonials                           What The Water Gave Me - Demo     0.68 
 8 Ceremonials (Deluxe Edition)          What The Water Gave Me - Demo     0.68 
 9 High As Hope                          South London Forever              0.679
10 Ceremonials (Original Deluxe Version) What The Water Gave Me - Demo     0.678
# ‚Ä¶ with abbreviated variable name ¬π‚Äãdanceability</code></pre>
</div>
</div>
<p><br></p>
<p>I am certain you are as reassured by this as I am.</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=_kIrRooQwuk"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/big_god.png" class="img-fluid figure-img" width="1192"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Me.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>In the near future, I hope that the documentation itself is going to tell this story but sometimes it‚Äôs easier to do the same job in an informal blog post where I have the luxury of going overboard with ‚Äúauthorial voice‚Äù and ‚Äúnarrative‚Äù, and all those other fancy things that writers love.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>Quick explanation: As a general rule, if you want things to be efficient you want the beginnings and endings of your data structures to be <a href="https://en.wikipedia.org/wiki/Data_structure_alignment">naturally aligned</a>, in the sense that the memory address is a multiple of the data block sizes. So on a 64-bit machine, you want the memory address for every data structure to start on a multiple of 64 bits. Apparently that makes lookup easier or something. Unfortunately, I‚Äôve only specified 8 bits (i.e.&nbsp;1 byte) so if I wanted to ensure that the validity bitmap is naturally aligned I‚Äôm going to need to add another 7 bytes worth of padding in order to make it to the full 64 bits. This method of aligning data structures in memory is referred to as ‚Äú8 byte alignment‚Äù. However, what Arrow does in this situation is <em>64 byte alignment</em>, so each data structure has to be 64 bytes long at a minimum. This design feature exists to allow efficient use of modern hardware, and if you want to know more, it‚Äôs discussed in the <a href="https://arrow.apache.org/docs/format/Columnar.html#buffer-alignment-and-padding">Arrow documentation</a>.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>More precisely, signed 32 bit integers.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>I know, I know. Nothing is impossible. But you know what I mean.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>If you don‚Äôt specify names when creating a data frame, R will create them for you. For example, when you create an ostensibly unnamed data frame with a command like <code>x &lt;- data.frame(1:2, 3:4)</code>, you‚Äôll find that <code>x</code> still has a <code>names</code> attribute, and <code>names(x)</code> returns X1.2, X3.4‚Ü©Ô∏é</p></li>
<li id="fn7"><p>On the off chance that you‚Äôre one of those extremely sensible people who chose not to read my data serialisation post, I‚Äôll mention that the native RDS format that R uses avoids this trap. Much like Arrow serialisation formats, RDS preserves the column wise organisation to data frames.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>The data header for contains the length and null count for each flattened field. It also contains the memory offset (i.e., the start point) and length of every buffer that is stored in the message body.‚Ü©Ô∏é</p></li>
<li id="fn9"><p>For instance, there are padding requirements involved that I am ignoring here.‚Ü©Ô∏é</p></li>
<li id="fn10"><p>Full disclosure: there are a few minor differences between the IPC streaming format and the feather file format. I‚Äôve glossed over those in this post but you can find the details on the <a href="https://arrow.apache.org/docs/format/Columnar.html#ipc-file-format">Arrow specification page</a>.‚Ü©Ô∏é</p></li>
<li id="fn11"><p>Okay fine, I‚Äôm lying. I did it on purpose.‚Ü©Ô∏é</p></li>
<li id="fn12"><p>If you ever do need to convert a record batch to a table you can use <code>as_arrow_table()</code>.‚Ü©Ô∏é</p></li>
<li id="fn13"><p>Because tables are built from chunked arrays, and chunked arrays are an abstraction layer designed to ensure that the distinct arrays can be treated as if they were one contiguous vector, Arrow tables inherit all those features. You can subset tables with <code>$</code>, <code>[[</code>, and <code>[</code> the same way you can for record batches.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Arrays and Tables in {Arrow}},
  date = {2022-05-25},
  url = {https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúArrays and Tables in Arrow.‚Äù</span> May
25, 2022. <a href="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow">https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <guid>https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/index.html</guid>
  <pubDate>Tue, 24 May 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Porting a distill blog to quarto</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/index.html</link>
  <description><![CDATA[ 




<!-- cover image: Anete L≈´si≈Üa -->
<!-- https://unsplash.com/photos/zwsHjakE_iI -->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A little over a year ago I decided to <a href="../../welcome">start blogging again</a>, and set up this site. At the time I made the deliberate choice to use <a href="https://rstudio.github.io/distill/">distill</a> as my blogging platform rather than something that would require a static site generator like <a href="https://gohugo.io/">hugo</a> or <a href="https://jekyllrb.com/">jeykll</a>, and I don‚Äôt regret that choice. However, along the way I‚Äôve found a few things that have bothered me about using distill. It‚Äôs never been worth considering changing to something new though, because distill has so many things that I do like. Until now.</p>
<p>Enter, stage left, <a href="https://quarto.org/">quarto</a>.</p>
<p>Now out of stealth mode and attracting no end of attention, quarto offers the promise of being a cross-platform, cross-format, open source publishing tool based on pandoc. Intrigued, I decided to play around with it for a while, and ended up making the decision to port this blog from distill to quarto. This post outlines my process.</p>
<p>(I am a little nervous: porting a blog often involves recomputing things. Will it work? Will everything turn out to be reproducible? I hope so‚Ä¶)</p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>The very first thing I do is go read Alison Hill‚Äôs wonderful <a href="https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/">We don‚Äôt talk about quarto</a> blog post. If you‚Äôre an R markdown user considering making the jump to quarto and haven‚Äôt already read her summary of where things are at, you won‚Äôt regret it. It‚Äôs a nice high level overview. I‚Äôd also suggest <a href="https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/">Nick Tierney‚Äôs notes</a> on making the switch, which is very helpful also.</p>
<p>After doing my background reading, I go to the <a href="https://quarto.org/docs/get-started/">get started page</a> on the quarto website to download the installer file. I‚Äôm on Ubuntu, so for me that‚Äôs a <code>.deb</code> file. I install it in the usual way from the command line:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">sudo</span> dpkg <span class="at" style="color: #657422;">-i</span> quarto-0.9.282-linux-amd64.deb</span></code></pre></div>
<p>Now that I have quarto installed, I‚Äôm able to use it to create a blog. My old distill blog exists in a project folder that I‚Äôd imaginatively named <code>distill-blog</code>, so I decide to keep to tradition and create the quarto version in an equally boring project folder called <code>quarto-blog</code>.</p>
<p>There is a page on the quarto website that walks you through the process for <a href="https://quarto.org/docs/websites/website-blog.html">creating a blog</a>, which I dutifully follow. From the terminal, I use the <code>quarto create-project</code> command, and a variety of files are created:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">quarto</span> create-project quarto-blog <span class="at" style="color: #657422;">--type</span> website:blog</span></code></pre></div>
<pre><code>Creating project at /home/danielle/GitHub/sites/quarto-blog:
  - Created _quarto.yml
  - Created index.qmd
  - Created posts/welcome/index.qmd
  - Created posts/post-with-code/index.qmd
  - Created about.qmd
  - Created styles.css
  - Created posts/_metadata.yml</code></pre>
<p>Coming from an R markdown background, this is very familiar:</p>
<ul>
<li>The files with a <code>.qmd</code> extension are the quarto markdown documents. These contain source code for the blog posts (the two files in the <code>posts</code> folder), the home page (the <code>index.qmd</code> file in the project root folder) and a standalone ‚Äúabout me‚Äù page for the blog (the <code>about.qmd</code> file).</li>
<li>The files with a <code>.yml</code> extension are the YAML files used to configure the blog. I don‚Äôt notice this at first, but the fact that there are two of them is important. The <code>_quarto.yml</code> file is used for settings that will apply across the entire site, but you will often want to configure settings that only apply to your blog posts. Those can be set by editing the <code>posts/_metadata.yml</code> file.</li>
<li>The <code>styles.css</code> file can be used to specify custom CSS rules that will apply to the whole site. I‚Äôll talk more about styles later.</li>
</ul>
</section>
<section id="rendering-posts" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="rendering-posts">Rendering posts</h2>
<p>There are several different ways to interact with quarto. For example, later in the post I‚Äôll talk about the quarto command line interface which allows you to work with quarto without going through R or RStudio. However, when getting started I try to keep things simple, and go with the option that was most familiar to me: I use RStudio.</p>
<p>To do this, it‚Äôs convenient to have an RStudio project for my blog. Using the RStudio file menu, I create a new project from an existing directory (i.e., my <code>quarto-blog</code> folder), which supplies the <code>quarto-blog.Rproj</code> file and other infrastructure needed to work with my new quarto blog as an RStudio project. Once that‚Äôs done, I am able to open up a quarto file in the RStudio editor and see a familiar looking interface:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/img/welcome_post.png" class="img-fluid figure-img" width="805"></p>
<p></p><figcaption class="figure-caption margin-caption">A blog post written in quarto markdown open in the RStudio editor. Notice that in the place where one would normally expect to see the ‚ÄòKnit‚Äô button for an R markdown document, there is a ‚ÄòRender‚Äô button. It serves the same function and is mapped to the same hot keys as the ‚ÄòKnit‚Äô button</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>From here I can click on the ‚ÄúRender‚Äù button to render a single page, or alternatively I can go to the RStudio build pane and select the ‚ÄúRender Project‚Äù option to build the entire site. By default, the blog builds into the <code>_site</code> folder.</p>
</section>
<section id="playing-around" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="playing-around">Playing around</h2>
<p>Progress! I am making progress. However, before trying to do any other practical things, I have some very important business to attend to: playing around. Aimlessly exploring the functionality of a new tool is always fun, and I find it‚Äôs a good way to familiarise myself with something. I‚Äôm pretty familiar with R markdown already, and I imagine most readers of this post will be too, so for the most part there are no surprises. Still it is worth asking myself the usual questions:</p>
<ul>
<li>Can I add footnotes?<sup>1</sup></li>
<li>Can they be nested?<sup>2</sup></li>
<li>Can I add comments in the margin?</li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<p>A comment in the margin</p>
</div></div><p>Looking at the <a href="https://quarto.org/docs/authoring/article-layout.html">quarto article layout documentation</a>, I discover some nice features. You can use the <code>:::{.class}</code> notation to apply a CSS class to a section of output, like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">:::{.column-margin}</span>
<span id="cb4-2">A comment in the margin</span>
<span id="cb4-3">:::</span></code></pre></div>
<p>The <code>.column-margin</code> class is handy for margin asides, but there are several other useful classes that come in handy when adding images to blog posts:</p>
<ul>
<li><code>.column-body</code> spans the usual body width of the post</li>
<li><code>.column-body-outset</code> extends slightly outside the usual width</li>
<li><code>.column-page</code> spans the whole page (including both margins)</li>
<li><code>.column-screen</code> class spans the full width of the screen</li>
<li><code>.column-screen-inset</code> class stops just short of the full screen width</li>
</ul>
<p>You can set these inside a chunk option. For example, setting <code>column: margin</code> as a chunk option will assign the output a <code>.column-margin</code> class, and any resulting figure will appear in the margin rather than below the code. Similarly, setting <code>column: screen</code> as the chunk option will assign the output a <code>.column-screen</code> class, and the output will span the full width. Here‚Äôs a simple example based pretty closely on the one used in the quarto documentation:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(leaflet)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">leaflet</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">addTiles</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">addMarkers</span>(</span>
<span id="cb5-5">    <span class="at" style="color: #657422;">lng=</span><span class="fl" style="color: #AD0000;">151.22251</span>, </span>
<span id="cb5-6">    <span class="at" style="color: #657422;">lat=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">33.85943</span>, </span>
<span id="cb5-7">    <span class="at" style="color: #657422;">label=</span><span class="st" style="color: #20794D;">"Mrs Macquarie's Chair"</span></span>
<span id="cb5-8">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;">addProviderTiles</span>(providers<span class="sc" style="color: #5E5E5E;">$</span>CartoDB.Positron)</span></code></pre></div>
<div class="cell-output-display column-screen">
<div id="htmlwidget-640c330a3ece748e2b9d" style="width:100%;height:464px;" class="leaflet html-widget"></div>
<script type="application/json" data-for="htmlwidget-640c330a3ece748e2b9d">{"x":{"options":{"crs":{"crsClass":"L.CRS.EPSG3857","code":null,"proj4def":null,"projectedBounds":null,"options":{}}},"calls":[{"method":"addTiles","args":["https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",null,null,{"minZoom":0,"maxZoom":18,"tileSize":256,"subdomains":"abc","errorTileUrl":"","tms":false,"noWrap":false,"zoomOffset":0,"zoomReverse":false,"opacity":1,"zIndex":1,"detectRetina":false,"attribution":"&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap<\/a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA<\/a>"}]},{"method":"addMarkers","args":[-33.85943,151.22251,null,null,null,{"interactive":true,"draggable":false,"keyboard":true,"title":"","alt":"","zIndexOffset":0,"opacity":1,"riseOnHover":false,"riseOffset":250},null,null,null,null,"Mrs Macquarie's Chair",{"interactive":false,"permanent":false,"direction":"auto","opacity":1,"offset":[0,0],"textsize":"10px","textOnly":false,"className":"","sticky":true},null]},{"method":"addProviderTiles","args":["CartoDB.Positron",null,null,{"errorTileUrl":"","noWrap":false,"detectRetina":false}]}],"limits":{"lat":[-33.85943,-33.85943],"lng":[151.22251,151.22251]}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p><br></p>
<p>I confess. I‚Äôm a little bit in love already.</p>
</section>
<section id="notes-on-yaml-headers" class="level2">
<h2 class="anchored" data-anchor-id="notes-on-yaml-headers">Notes on YAML headers</h2>
<p>The YAML headers used for blog posts are a little different in quarto than their equivalents in distill were, and it takes me a moment to work out how to adapt the YAML headers from my old R markdown posts for the new quarto blog. Here‚Äôs a quick overview. First, some fields require almost no changes:</p>
<ul>
<li>The <code>title</code> field is unchanged. That was an easy one!</li>
<li>The <code>date</code> field is essentially unchanged, except for the fact there seems to be a tiny bug in date parsing for blogs that I‚Äôm sure will vanish soon. If you‚Äôre using ISO-8601 date formats like <code>date: "2022-04-20"</code> it will be fine.<sup>3</sup></li>
<li>The <code>categories</code> field takes a list of values, which (I think?) is no different to what it looked like before. To be honest I don‚Äôt remember because my old blog didn‚Äôt use them. I‚Äôve started now.</li>
</ul>
<p>Other changes are superficial:</p>
<ul>
<li>The <code>description</code> field that I used on my old blog still does what it used to: it provides preview text on the listing page, and a summary at the top of the file. However, there is also a <code>subtitle</code> field that you can use for this purpose, and the output has the same look and field as my old descriptions, so I decide to switch all my old description fields to <code>subtitle</code> entries.</li>
<li>To specify a preview image associated with a blog post, use the <code>image</code> field (e.g., something like <code>image: thumbnail.jpg</code>) instead of the <code>preview</code> field from distill.</li>
<li>There is a new <code>license</code> field that replaces the <code>creative_commons</code> field from distill. At the bottom of this post you‚Äôll see a ‚ÄúReuse‚Äù appendix that links to a license file. To generate this, I‚Äôve included a <code>license: "CC BY"</code> line in the YAML.</li>
</ul>
<p>Other changes are a little deeper:</p>
<ul>
<li>In distill it is possible to specify the <code>author</code> field in a lot of detail, mirroring the academic convention of listing an authors affiliation alongside their employer, orcid record, and contact details. Quarto supports this also, though the tags have changed slightly: <code>orcid_id</code> is now <code>orcid</code>, for example. There‚Äôs an example of this shown a little later in the post.</li>
<li>Specifying the table of contents is slightly different. Just like in distill, you can turn on the table of contents by including <code>toc: true</code> as a line in the YAML header, and set the <code>toc-depth</code> field to determine how detailed the table of contents should be. But there are new options. You can customise the text that appears above the table of contents, and the location in which it appears. I decide to be boring and go with some standard options: <code>toc-title: Table of contents</code> and <code>toc-location: left</code>.</li>
<li>One feature in distill that I like is that it generates a citation for each post. You can do that in quarto too, and you‚Äôll see at the bottom of this post that I‚Äôve used that feature here. However, quarto manages this in a different way to distill, and uses a YAML version of <a href="https://citationstyles.org/">citation style language</a> (CSL) formatting to define the citation. To see how it works, you can read through the <a href="https://quarto.org/docs/reference/metadata/citation.html">quarto pages on citations</a> and <a href="https://quarto.org/docs/authoring/create-citeable-articles.html">creating citeable articles</a>. It‚Äôs a little more elaborate than the distill version, but much more flexible. For this blog it‚Äôs as simple as including <code>citation: true</code> in the YAML, but it can be more elaborate and accommodate any pattern of academic citation you like.</li>
</ul>
</section>
<section id="creating-a-new-post" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-new-post">Creating a new post</h2>
<p>Okay. Time to get to work at transforming the starter blog into a quarto version of my distill blog. My first step is to delete the two posts that came with the starter blog, and then create this one.</p>
<p>A folder with an <code>index.qmd</code> file is the bare minimum I need to get started with a new post. I suppose there are other ways do to this but what I actually do is create the the folder and an empty file from the terminal (for reasons known but to god):</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">mkdir</span> posts/2022-04-20_porting-to-quarto</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">touch</span> posts/2022-04-20_porting-to-quarto/index.qmd</span></code></pre></div>
<p>To be honest, using the terminal was overkill. What I could have done instead, had I been looking at RStudio rather than the terminal, is use the ‚ÄúNew File‚Äù option in the file menu and then select the ‚ÄúQuarto Doc‚Äù option. That creates a new untitled quarto document that you can save to the appropriate location.</p>
</section>
<section id="inheriting-yaml-settings" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="inheriting-yaml-settings">Inheriting YAML settings</h2>
<p>A handy feature in quarto websites is that YAML fields are inherited. For example, this post has its own YAML header that contains the following ‚Äì and only the following ‚Äì fields:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Porting a distill blog to quarto"</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">subtitle</span><span class="kw" style="color: #003B4F;">: </span><span class="ch" style="color: #20794D;">|</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb7-3">  I have moved this blog from distill over to quarto, and </span>
<span id="cb7-4">  taken notes. A year after starting the blog, this promises </span>
<span id="cb7-5">  to be an interesting reproducibility test</span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;">date</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"2022-04-20"</span></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">Quarto</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> Blogging</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> Reproducibility</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"img/preview.jpg"</span></span></code></pre></div>
<p>That‚Äôs a little peculiar, because a lot of the metadata needed to specify this post is missing. The reason it is missing is that I‚Äôve placed some fields in the <code>posts/_metadata.yml</code> file. Those fields are inherited by every blog post. This is the entire contents of my post metadata file:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Freeze computed outputs</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">freeze</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Enable banner style title blocks</span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;">title-block-banner</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Enable CC licence appendix</span></span>
<span id="cb8-8"><span class="fu" style="color: #4758AB;">license</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"CC BY"</span></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;"># Default for table of contents</span></span>
<span id="cb8-11"><span class="fu" style="color: #4758AB;">toc</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;">toc-title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Table of contents</span></span>
<span id="cb8-13"><span class="fu" style="color: #4758AB;">toc-location</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> left</span></span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;"># Default knitr options</span></span>
<span id="cb8-16"><span class="fu" style="color: #4758AB;">execute</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb8-17"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">echo</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">message</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">warning</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="co" style="color: #5E5E5E;"># Default author</span></span>
<span id="cb8-22"><span class="fu" style="color: #4758AB;">author</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Danielle Navarro</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">url</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://djnavarro.net</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">affiliation</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Voltron Data</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">affiliation-url</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://voltrondata.com</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">orcid</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 0000-0001-7648-6578</span></span>
<span id="cb8-28"></span>
<span id="cb8-29"><span class="co" style="color: #5E5E5E;"># Default fields for citation</span></span>
<span id="cb8-30"><span class="fu" style="color: #4758AB;">citation</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>The <a href="https://quarto.org/docs/projects/code-execution.html">freeze option</a> is extremely useful in the blogging context. I‚Äôd advise reading the linked documentation page!</p>
</div></div><p>That explains a lot, but if you‚Äôre looking closely you‚Äôll realise that there‚Äôs nothing in these fields specifying the output format! In R markdown I‚Äôd have included an <code>output</code> field for this, but in quarto the relevant field is called <code>format</code>. Because the output applies to the entire site, that part of the YAML header is in the <code>_quarto.yml</code> file. The relevant lines of that file are:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">theme</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ember.scss</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">css</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> styles.css</span></span></code></pre></div>
<p>I‚Äôll come back to this later. For now it‚Äôs enough to recognise that this indicates that all pages on this site should be rendered to HTML documents, and using the <code>ember.scss</code> and <code>styles.css</code> files specify the blog style.</p>
</section>
<section id="converting-my-old-posts" class="level2">
<h2 class="anchored" data-anchor-id="converting-my-old-posts">Converting my old posts</h2>
<p>The time has come for a little manual labour. Although quarto is compatible with most existing R markdown and I can probably get away with leaving them untouched, in the longer term I‚Äôm expecting that I‚Äôll be moving across languages so it appeals to me to take this opportunity to port everything over to quarto now. Renaming all the <code>index.Rmd</code> files to <code>index.qmd</code> files is easy enough, and can be done programmatically, but most of my edits require a small amount of manual tinkering with each post. Not a lot, because it is mostly a matter of renaming a few YAML fields. Given that there are only 20 or so posts that need to be ported, I decide it is easier to do it manually than to try to write a script to automate the task. I get through it in an afternoon.</p>
</section>
<section id="styling-the-new-blog" class="level2">
<h2 class="anchored" data-anchor-id="styling-the-new-blog">Styling the new blog</h2>
<p>Up to this point, the adoption of quarto has felt very ‚Äúdistill-like‚Äù. The structure of the blog feels familiar from distill, the YAML headers are similar in spirit (if different in the particulars), and so on. When it comes to customising the appearance of the blog, it‚Äôs not very similar to distill at all, and feels more similar to simple R markdown sites. Quarto websites are bootstrap based, and as discussed on the <a href="https://quarto.org/docs/output-formats/html-themes.html">quarto theming page</a>, they come with the same bootswatch themes that you might be familiar with from R markdown. For example, if you decide like I did that you would like a very plain white theme, you could choose the ‚Äúlitera‚Äù theme. To apply this to your blog, all you‚Äôd have to do is make sure your <code>_quarto.yml</code> file contains the following lines:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb10-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb10-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">theme</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> litera</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">css</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> styles.css</span></span></code></pre></div>
<p>What this does is assert that output will be rendered as HTML objects using the litera bootswatch theme, and applying any custom CSS rules that you add in the <code>styles.css</code> file.</p>
<p>One very nice feature of quarto, if you‚Äôre comfortable using SASS to define styles and know something about how the bootstrap SASS files are organised,<sup>4</sup> is that it allows you to write your own <code>.scss</code> file to define your blog theme more precisely, giving you access to bootstrap parameters and so on. I would strongly recommend reading about the <a href="https://quarto.org/docs/output-formats/html-themes-more.html">quarto theming system</a> before tinkering with this aspect yourself, but if you are more knowledgeable (or more foolish) than I, here‚Äôs how I set my blog up. First, instead of referring to the litera theme, the YAML in my <code>_quarto.yml</code> file points at my own custom <code>.scss</code> file:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">theme</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ember.scss</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">css</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> styles.css</span></span></code></pre></div>
<p>The contents of the <code>ember.scss</code> file are as follows:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode scss code-with-copy"><code class="sourceCode scss"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">/*-- scss:defaults --*/</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">// use litera as the base</span></span>
<span id="cb12-4"><span class="va" style="color: #111111;">$theme</span>: <span class="st" style="color: #20794D;">"litera"</span> <span class="at" style="color: #657422;">!default</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;">// import google fonts</span></span>
<span id="cb12-7"><span class="im" style="color: #00769E;">@import</span> <span class="st" style="color: #20794D;">'https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&amp;display=swap'</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-8"><span class="im" style="color: #00769E;">@import</span> <span class="st" style="color: #20794D;">'https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500;600;700&amp;display=swap'</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;">// use Atkinson Hyperlegible font if available</span></span>
<span id="cb12-11"><span class="va" style="color: #111111;">$font-family-sans-serif</span>:  <span class="st" style="color: #20794D;">"Atkinson Hyperlegible"</span><span class="op" style="color: #5E5E5E;">,</span> -apple-system<span class="op" style="color: #5E5E5E;">,</span> BlinkMacSystemFont<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Segoe UI"</span><span class="op" style="color: #5E5E5E;">,</span> Roboto<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Helvetica Neue"</span><span class="op" style="color: #5E5E5E;">,</span> Arial<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Noto Sans"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">sans-serif</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Apple Color Emoji"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Segoe UI Emoji"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Segoe UI Symbol"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Noto Color Emoji"</span> <span class="at" style="color: #657422;">!default</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;">/*-- scss:rules --*/</span></span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;">// litera is serif by default: revert to san-serif</span></span>
<span id="cb12-16">p {</span>
<span id="cb12-17">  <span class="kw" style="color: #003B4F;">font-family</span>: <span class="va" style="color: #111111;">$font-family-sans-serif</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-18">}</span></code></pre></div>
<p>As you can see, right now my customisation really doesn‚Äôt do much other than make some very minor tweaks on the litera theme, but the potential is there to do so much more than I have in setting up this blog. I plan to tinker with this more later on!</p>
</section>
<section id="adding-an-rss-feed" class="level2">
<h2 class="anchored" data-anchor-id="adding-an-rss-feed">Adding an RSS feed</h2>
<p>My old distill blog had an RSS feed, and while I acknowledge that it‚Äôs increasingly an esoteric feature that most folks don‚Äôt use, I have a fondness for RSS. Quarto supports this, but it‚Äôs not enabled by default. What I need to do is edit the YAML in the <code>index.qmd</code> file that corresponds to your homepage, because that‚Äôs where I have my primary listing of posts. In it, I see a <code>listing</code> field. All I need to do is add <code>feed: true</code> underneath and there is now an RSS feed for the site:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb13-1"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Notes from a data witch"</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">subtitle</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> A data science blog by Danielle Navarro</span></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">listing</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb13-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">feed</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb13-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> posts</span></span></code></pre></div>
<p>The <a href="https://quarto.org/docs/websites/website-listings.html#feeds">quarto section on feeds</a> has more information on this.</p>
</section>
<section id="deploying-the-site" class="level2">
<h2 class="anchored" data-anchor-id="deploying-the-site">Deploying the site</h2>
<p>Preparing the site to be deployed is relatively painless. I found it useful to read the <a href="https://quarto.org/docs/reference/projects/websites.html">quarto website options page</a> before doing this, because it mentions a lot of settings to tinker with, mostly in the <code>_quarto.yml</code> file. For example, I choose to customise the navigation bar, the social media preview images, and so on. Eventually, I reach the point where I am happy and move on to deployment.</p>
<p>Happily, as to the deployment process itself, there‚Äôs not a lot to say. The <a href="https://quarto.org/docs/websites/publishing-websites.html">quarto deployment page</a> discusses several options for how you can do this. Most of my websites are deployed either through GitHub Pages or through Netlify. This one is a Netlify site, so I follow the instructions there and everything goes smoothly. However, this does bring me to another topic‚Ä¶</p>
</section>
<section id="netlify-redirects" class="level2">
<h2 class="anchored" data-anchor-id="netlify-redirects">Netlify redirects</h2>
<p>I‚Äôve structured my blog in a particular way. Like the default quarto blog, all the posts live in the <code>posts</code> folder, and they‚Äôre named in a systematic way: they have an ISO-8601 formatted date first, and then a semantic slug. So the full URL for this blog post is:</p>
<p><a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/">blog.djnavarro.net/posts/2022-04-20_porting-to-quarto</a></p>
<p>That‚Äôs convenient for archiving purposes and for keeping everything nicely organised in my project folder, but it‚Äôs also a little clunky for sharing links. In practice, the ‚Äúposts‚Äù part is a bit redundant, and I‚Äôm never going to use the same slug twice, so it‚Äôs handy to set it up so that there‚Äôs also a shorter URL for the post,</p>
<p><a href="https://blog.djnavarro.net/porting-to-quarto/">blog.djnavarro.net/porting-to-quarto</a></p>
<p>and that this shorter URL automatically redirects to the longer one.</p>
<p>Since I‚Äôm intending to deploy this blog to Netlify, what I need to do is ensure that whenever the site builds, a <code>_redirects</code> file is created within the <code>_site</code> folder. This file needs to have one line per redirect, listing the ‚Äúredirect from‚Äù path first, followed by the ‚Äúredirect to‚Äù path. Here‚Äôs what that line looks like for this post:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">/porting-to-quarto /posts/2022-04-20_porting-to-quarto</span></code></pre></div>
<p>I have no intention of adding these lines manually, so what I do instead is add an R chunk to the <code>index.qmd</code> file corresponding to the blog home page, with the following code:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># list names of post folders</span></span>
<span id="cb15-2">posts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.dirs</span>(</span>
<span id="cb15-3">  <span class="at" style="color: #657422;">path =</span> here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"posts"</span>),</span>
<span id="cb15-4">  <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb15-5">  <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb15-6">)</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># extract the slugs</span></span>
<span id="cb15-9">slugs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"^.*_"</span>, <span class="st" style="color: #20794D;">""</span>, posts)</span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;"># lines to insert to a netlify _redirect file</span></span>
<span id="cb15-12">redirects <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"/"</span>, slugs, <span class="st" style="color: #20794D;">" "</span>, <span class="st" style="color: #20794D;">"/posts/"</span>, posts)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;"># write the _redirect file</span></span>
<span id="cb15-15"><span class="fu" style="color: #4758AB;">writeLines</span>(redirects, here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"_site"</span>, <span class="st" style="color: #20794D;">"_redirects"</span>))</span></code></pre></div>
<p>Every time this site gets rebuilt ‚Äì which usually involves rebuilding the home page since that‚Äôs the one that contains the post listing ‚Äì the <code>_redirects</code> file gets refreshed. There might be a cleaner way, but this works.</p>
</section>
<section id="quarto-cli" class="level2">
<h2 class="anchored" data-anchor-id="quarto-cli">The quarto CLI</h2>
<p>Something I forgot to mention earlier. About half way through the process of tinkering with my old posts to be suitable for the quarto blog, I decided to stop using RStudio for the rendering, and spent a little time familiarising myself with the quarto command line interface. I haven‚Äôt made any particular decisions about what my long term workflow with quarto is going to look like, but I did find it helpful to get a feel for the concept of quarto as a standalone install. I‚Äôm not going to go into detail here, but just briefly: at the terminal I can see that I have some help options,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;">quarto</span> help</span></code></pre></div>
</div>
<pre><code>  Usage:   quarto 
  Version: 0.9.282
                  

  Description:

    Quarto CLI

  Options:

    -h, --help     - Show this help.                            
    -V, --version  - Show the version number for this program.  

  Commands:

    render          [input] [args...]  - Render input file(s) to various document types.                                                
    serve           [input]            - Serve an interactive document.                                                                 
    create-project  [dir]              - Create a project for rendering multiple documents                                              
    preview         [file] [args...]   - Render and preview a Quarto document or website project. Automatically reloads the browser when
    convert         [input]            - Convert documents to alternate representations.                                                
    capabilities                       - Query for current capabilities (output formats, engines, kernels etc.)                         
    check           [target]           - Check and verify correct functioning of Quarto installation and computation engines.           
    inspect         [path]             - Inspect a Quarto project or input path. Inspecting a project returns its config and engines.   
    tools           [command] [tool]   - Manage the installation, update, and uninstallation of useful tools.                           
    help            [command]          - Show this help or the help of a sub-command.
    </code></pre>
<p>From there I can check the help documentation for the <code>quarto render</code> command by typing the following,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;">quarto</span> render help</span></code></pre></div>
</div>
<p>and so on. Browsing this documentation in addition to all the excellent content on the quarto website is a useful way of finding additional options. If I wanted to render the current post, and my terminal was currently at the project root folder (i.e., my <code>quarto-blog</code> folder), I can render it as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;">quarto</span> render posts/2022-04-20_porting-to-quarto/index.qmd</span></code></pre></div>
</div>
<p>The ability to do this cleanly from the terminal seems like a handy feature of quarto, though I‚Äôll admit I am not yet sure how I‚Äôll use it.</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>When I started this process I wasn‚Äôt quite sure if I was going to follow through on it and actually switch the blog over to quarto. The distill blog has served me well for the last year, and I don‚Äôt like fixing things if they aren‚Äôt broken. However, the longer I played with quarto the more I liked it, and the process was far less painful than I feared it would be. I feel like it‚Äôs retained the things I like about distill, but integrated those cleanly with other features (e.g., the bootstrap grid!) that I really missed having access to from distill. Every now and then I‚Äôve come across little quirks where some of the rough edges to quarto are still showing ‚Äì it is a new tool still ‚Äì but I‚Äôm enjoying it a lot.</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>




<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2022-08-23 13:02:10 AEST</p>
</div></section><section id="details" class="level2 appendix"><h2 class="quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/djnavarro/quarto-blog/tree/main/posts/2022-04-20_porting-to-quarto/index.qmd">source code</a>, <a href="https://github.com/djnavarro/quarto-blog/tree/main/posts/2022-04-20_porting-to-quarto/renv.lock">R environment</a></p>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yes‚Ü©Ô∏é</p></li>
<li id="fn2"><p>No, but they can be recursive<sup>2</sup>‚Ü©Ô∏é</p></li>
<li id="fn3"><p>In case you‚Äôre interested: the ‚ÄúWelcome to My Blog‚Äù post in the starter blog lists the date as <code>date: "20/04/2022"</code>, which gets parsed as a string literal when the post gets built (i.e., the post date shows up as ‚Äú20/04/2022‚Äù), sensibly enough. However, when you build the entire site it renders as ‚ÄúMay 4, 2023‚Äù.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>Which, frankly I do not, but I am also foolish and will try things anyway‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Porting a Distill Blog to Quarto},
  date = {2022-04-20},
  url = {https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúPorting a Distill Blog to Quarto.‚Äù</span>
April 20, 2022. <a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto">https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto</a>.
</div></div></section></div> ]]></description>
  <category>Quarto</category>
  <category>Blogging</category>
  <category>Reproducibility</category>
  <guid>https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/index.html</guid>
  <pubDate>Tue, 19 Apr 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/img/preview.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Transitioning from academia to industry</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>Leaving academia is rarely a simple or unemotional decision, no matter what career stage you are at, no matter where you‚Äôre headed to next, or whether you‚Äôre leaving by choice. In ways that are both good and bad, the academic life is quite different to working in industry, so you are necessarily taking a jump into the unknown. I don‚Äôt believe anyone can make those kinds of changes without experiencing fear, and I think anyone who attempts a transition of this kind deserves support in their choice.</p>
<p>I made the jump this year, in 2022, effectively ending an academic career that began when I started my PhD in 1999. I‚Äôve been in my new role for almost three months now, long enough to have a few thoughts about my new world. It‚Äôs also been long enough that friends and twitter followers have been asking if I could share my experiences. I‚Äôve spoken to a few people privately, but sometimes it helps to put thoughts into writing.</p>
<p>With that in mind, this post is my attempt to provide a little love, support, and maybe even help to others who are in a similar situation to the one I was in. It‚Äôs intended as both a personal and practical comment: I‚Äôll mix some practical suggestions with thoughts on the emotional and psychological aspects to the transition.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/annie-spratt-vF2AC6pjIBY-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Annie Spratt. Available by CC0 licence on <a href="https://unsplash.com/photos/vF2AC6pjIBY">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<section id="do-the-reading-but-like-just-one-book" class="level2">
<h2 class="anchored" data-anchor-id="do-the-reading-but-like-just-one-book">Do the reading, but like‚Ä¶ just one book?</h2>
<p>I‚Äôll start with some practical advice, which is that it helps to do some background reading about the kind of career you‚Äôre looking at (I know, shocking, right?) If you‚Äôre reading my blog post specifically, there‚Äôs a pretty good chance that you‚Äôre thinking about a career in the tech sector, and probably in data science specifically. This makes a lot of sense for you. You already have most of the core skills required to be a data scientist. You can code, you can analyse data, you can communicate well. You can manage projects, you can work in teams and individually, you‚Äôve probably had experience managing and supervising junior scientists and analysts.</p>
<p>What you <em>don‚Äôt</em> have is industry experience. You aren‚Äôt quite sure what that world is going to be like and exactly how to recast the skills you have in language that folks over in industry land will understand. What you need is a book that helps you understand the lay of the land, and I am <em>absolutely not going to write that book</em>. What I am going to do instead, is mention that <a href="https://twitter.com/robinson_es">Emily Robinson</a> and <a href="https://twitter.com/skyetetra">Jacqueline Nolis</a> already did. Their book is called <a href="https://www.manning.com/books/build-a-career-in-data-science"><em>Build a Career in Data Science</em></a> and it‚Äôs very good. It‚Äôs the book I used to help me out, and instead of repeating their advice I will simply recommend it to you.</p>
<p>If you really want to I guess you could read more, but the whole concept of ‚Äúdoing <em>all</em> the reading‚Äù is one of those things you can let go of. Even if you find a different book, just read one book okay? You‚Äôre even allowed to skim. Be honest: that‚Äôs what you were doing already, just like everyone else in academia.</p>
<p>The only note of caution I would add, if you‚Äôre an established academic looking to make the jump, is that academic folks like us aren‚Äôt the primary audience for the book. It‚Äôs a more general book and doesn‚Äôt talk much (or at all) about the peculiarities associated with the academia-to-industry transition. You‚Äôll need to do a little bit of translation to make it applicable to you. That‚Äôs okay though, because you‚Äôre very good at this kind of mental athletics: academia has trained you for it! Still, when chatting with Emily and Jacqueline in order to say thanks for their book, I did mention that I wished someone had written a translated version of the book for academics looking to get out.</p>
<p>No, I‚Äôm not going to write <em>that</em> book either. As a consolation prize you get this blog post.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/siora-photography-hgFY1mZY-Y0-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Siora Photography. Available by CC0 licence on <a href="https://unsplash.com/photos/hgFY1mZY-Y0">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="abandon-prestige-ye-that-enter-here" class="level2">
<h2 class="anchored" data-anchor-id="abandon-prestige-ye-that-enter-here">Abandon ‚Äúprestige‚Äù, ye that enter here</h2>
<p>Pivoting now from the practical to the psychological, there‚Äôs an elephant in the room we have to talk about up front.</p>
<p>If you have been in academia long enough you will have an internalised a core concept that you need to abandon: <em>prestige</em>. Academia runs on prestige, and everyone on the inside understands in our bones how important this particular currency is. Where you publish, where you study, who you work with, what ‚Äútier‚Äù your institution belongs to‚Ä¶ these are all prestige factors. They are of course utterly irrelevant to your value as a human being or your skills as an employee, and yet in many ways they are more important to your career success than oh, say‚Ä¶ the actual work you do. Not for nothing do we joke that the fundamental dogma of academia is ‚ÄúNothing in academia makes sense except in light of prestige‚Äù. Prestige is the reason I published a disproportionate number of my papers in <em>Psychological Review</em>. It‚Äôs the reason I would accidentally-on-purpose let ‚Äúslip‚Äù that I was on the editorial board at <em>Science</em> when I needed to impress someone quickly. Prestige. It matters.</p>
<p>Except, no-one outside the academy cares. Not even a little bit. The peculiar currency of academia has no meaning in the outside world. That‚Äôs sad, but I have good news:</p>
<p>In industry they use <em>money</em> as currency instead.</p>
<p>It‚Äôs a frighteningly novel concept for an institutionalised academic, but one you might come to love, so I‚Äôll unpack it a bit further. Because it <em>doesn‚Äôt</em> mean you‚Äôll necessarily be paid more (though you might). Rather, what it means is that it is you are performing a service in exchange for money. The company buys your time and your work; it doesn‚Äôt buy your soul. Not only that, a <em>good</em> company understands this, and would never dream of trying to take it away from you. You don‚Äôt have to personalise the work any more. You don‚Äôt have to hold it dear to your heart as if your employment contract were proof of your value as a person. That concept of ‚Äúprestige‚Äù you‚Äôre secretly holding onto? That‚Äôs one of those mechanisms by which academia ties your sense of self-worth to little ‚Äúbadges‚Äù of achievement and doesn‚Äôt even pay you for the extra work you put in to earn them. How much work have you given away for free, to third parties who make a profit of your work? For no reason other than ‚Äúprestige‚Äù?</p>
<p>You can let that all go now. It will hurt to let it go, because ‚Äì so much more than your junior colleagues who got out when they were young ‚Äì you have become invested in it and the hooks are laid much deeper in your psyche. But you can, and it‚Äôs surprisingly liberating when it happens.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/sigmund-Y41w7pyxE18-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Sigmund. Available by CC0 licence on <a href="https://unsplash.com/photos/Y41w7pyxE18">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="your-r√©sum√©-is-an-advertisement-for-you" class="level2">
<h2 class="anchored" data-anchor-id="your-r√©sum√©-is-an-advertisement-for-you">Your r√©sum√© is an advertisement for you</h2>
<p>Let‚Äôs return to practicalities. From the moment we enter the system, there is a piece of advice we‚Äôre given in academia: keep track of everything. Every talk, every paper, every book, every prize, every award, every compliment from student. All these things must be stored, collated, reused, organised, and <em>used</em>. They are the evidence we use for our promotion applications, our grant applications, our various pleas and supplications to the dark gods of the ivory tower. And so it is that every academic CV becomes a monstrosity, a log file listing every activity from which value can be extracted. It is time to let that all go. Breathe, darling.</p>
<p>The vast, vast majority of your CV is not necessary any longer, because the fundamental purpose of the r√©sum√© has changed. It is not a testament to your worth. It is not a log of your achievements. It is not in any meaningful sense <em>documentation</em>, and it is certainly not a store of value. It is an advertisement that you place with a company, to catch their attention: <strong>your r√©sum√© is a flyer, not a monograph</strong>.</p>
<p>If you are at all like me this is a very hard concept to get used to. Frantic, I would ask myself how I could possibly reduce all my self-worth and my value to the company to a mere page? It simply cannot be done! ‚Ä¶ and of course it can‚Äôt. That‚Äôs <em>not</em> the task at hand. Your CV bears no relationship to your value as a person, and its <em>only</em> function is to convince the right company to give you an interview. Here‚Äôs how I did that.</p>
<section id="step-1-reduce-the-size" class="level3">
<h3 class="anchored" data-anchor-id="step-1-reduce-the-size">Step 1: Reduce the size</h3>
<p>In an act of personal catharsis I destroyed most of the evidence that I was ever a fully institutionalised academic, so I no longer own any of my old ‚Äúproper‚Äù academic CVs, but you don‚Äôt have to look too hard to discover evidence that I used to have one: Behold the <a href="https://djnavarro.net/papers">list of my publications and despair</a>, tremble before <a href="https://scholar.google.com.au/citations?user=QPH_lRIAAAAJ&amp;hl=en">my h-index</a><sup>1</sup>, and embrace the visual horror of my <a href="https://orcid.org/0000-0001-7648-6578">ORCID profile</a>! As you can probably guess, once upon a time I had a document that included all these things, tracked all the journal impact factors associated with every publication, listed every grant, every research contract, every‚Ä¶ oh, you know. You have one of these too. It‚Äôs probably 50 pages long or something.</p>
<p>Your first task is to strip that back to <strong>two pages</strong>. You don‚Äôt have to reformat it at all. It‚Äôs still an academic CV. What I‚Äôm asking you to do in this first step is to find a way of condensing the things you actually care about in academia into a manageable format. You don‚Äôt have to think like an industry person at all yet. Just imagine a crazy world in which academics didn‚Äôt have to write monographs just to get permission to use the bloody bathroom, and choose two pages worth of content that you love. To make it a little easier, this is how I butchered my career and turned it into a <a href="_resume/danielle-navarro-academic-resume.pdf">scandalously brief two page r√©sum√©</a>.<sup>2</sup></p>
<p>The point of this initial exercise is prioritisation: you have things you are proud of, things you <em>know</em> are major accomplishments, and things that you feel obligated to list because you ‚Äúhave to‚Äù. This is your chance to let go, and keep only those things that you believe are genuinely good. Plus, you can keep this version as a nice summary of your academic accomplishments <em>that someone will actually read</em>. Because no-one is going to read that 50-page horror babe. They won‚Äôt.<sup>3</sup></p>
<p>Okay, done? Awesome. You‚Äôre doing amazing.</p>
</section>
<section id="step-2-write-a-sales-pitch" class="level3">
<h3 class="anchored" data-anchor-id="step-2-write-a-sales-pitch">Step 2: Write a sales pitch</h3>
<p>A little controversially, I‚Äôm gonna suggest that step 2 should be to <strong>write some prose</strong>. An industry r√©sum√© absolutely does <em>not</em> contain prose, but the purpose of this step is to try to help you cope with the shift that will have to happen in step 3. What we‚Äôre going to do in step 2 is pick and choose some content from the ‚Äústep 1 r√©sum√©‚Äù and rewrite it as a verbal argument for why you personally deserve to have an industry job (if it helps, try to find a specific job on linkedin or whatever that you actually want, and write for that job). Again, this is a terrible way to write industry CV, but‚Ä¶ you‚Äôve written grant applications before right? Lots of grant applications. You‚Äôre depressingly good at writing those. We‚Äôre going to repurpose that skill set, and write a <a href="_resume/danielle-navarro-verbose-resume.pdf">verbose r√©sum√©</a> that looks like a mini grant application advertising you.<sup>4</sup></p>
<p>Now, anyone who has a good grasp of how industry works knows perfectly well this is no good. An industry r√©sum√© should be extremely light on text, it should focus on skills, and it should be structured in a way that makes machine parsing easy. When I wrote this I was still thinking like an academic. It isn‚Äôt a good r√©sum√© at all. So why am I mentioning it at all?</p>
<p>The reason is that most academics I know really struggle to make sales pitches, except in the specific contexts where we are ‚Äúexpected‚Äù to do so, and one of those contexts is writing grant applications. Writing my r√©sum√© in a way that felt familiar from the grant writing context helped me shed a lot of my anguish about the r√©sum√©, because ‚Äúit‚Äôs like writing a grant, and everyone knows that grant-writing is mostly an exercise in sales‚Ä¶‚Äù</p>
</section>
<section id="step-3-now-you-can-write-a-r√©sum√©" class="level3">
<h3 class="anchored" data-anchor-id="step-3-now-you-can-write-a-r√©sum√©">Step 3: Now you can write a r√©sum√©!</h3>
<p>Once I‚Äôd finally gotten to that point, and was comfortable viewing the whole job search process this way, it became a lot easier for me to accept that a r√©sum√© is not in any way a meaningful representation of my skills, my history, or my ability. It is simply an <strong>advertisement that follows a predictable format</strong>. So for step 3, I discarded all my pretty words and wrote an <a href="_resume/danielle-navarro-industry-resume.pdf">industry-style r√©sum√©</a>.<sup>5</sup> As you can see, this is a quite different style of document. It‚Äôs written almost entirely as dot point lists, it focuses as much on skills as on accomplishments, and there is a lot of white space. Generally, that‚Äôs what you want.</p>
<p>When you get to this point, one thing I‚Äôd strongly recommend ‚Äì not that I am ever to be relied upon for good advice ‚Äì is that you think not just about the jobs you can get but the kind of work you want to be doing and the person you want to be. I‚Äôve forgotten where I heard this (it‚Äôs definitely not an original thought of mine) but because the r√©sum√© is the first point of contact with the company in many cases, it‚Äôs also an exercise in expectation management. You are implicitly telling a story in this r√©sum√© about a particular type of person, and if you get an interview then people will expect that person in the interview. If you get the job from that interview, then they‚Äôll expect the person from the interview to show up on the job.</p>
<p>So, who do you want to be in your new job? Maybe you don‚Äôt want to be the same person you‚Äôve been all your academic life. Maybe you want to be someone new. If so, it‚Äôs totally fine to emphasise skills and accomplishments that relate to <em>that person</em>. You‚Äôre allowed to reinvent yourself a little bit in your r√©sum√©. It‚Äôs part of the healing process!</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/cristian-escobar-abkEAOjnY0s-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Cristian Escobar. Available by CC0 licence on <a href="https://unsplash.com/photos/abkEAOjnY0s">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="the-tech-sector-job-market-less-like-bridgerton-more-like-grindr" class="level2">
<h2 class="anchored" data-anchor-id="the-tech-sector-job-market-less-like-bridgerton-more-like-grindr">The tech sector job market: less like Bridgerton, more like Grindr</h2>
<p>Going on the job market was incredibly stressful, unfamiliar, and took longer for me to be successful than you‚Äôd think if all you‚Äôve seen of my process is what was visible on public twitter (by the time I was openly on the job market I‚Äôd already had a number of unsuccessful attempts), so I‚Äôll talk a bit about that too.</p>
<p>Applying to industry jobs is a little different to applying to academic jobs. For junior academics, applying for positions is often a numbers game: finding that first academic appointment involves a lot of applications, a lot of rejections, and a lot of anxiety. For senior academics, however, the process is different. There‚Äôs not really a ‚Äújob market‚Äù in the traditional sense, just a loose network of relationships that you can use to ‚Äúput out feelers‚Äù and surreptitiously negotiate a move if a mutually agreeable arrangement is possible. In many ways it is a courtship, involving many trips, back and forths, and evolves over a long time frame, and eventually culminates in a proposal of marriage (or tenured professorship).</p>
<p>Applying for jobs at tech companies wasn‚Äôt like that at all for me. I‚Äôd search for positions advertised on linkedin, or through twitter, and asked friends if they knew who was hiring. In my case it helped a lot that (a) I have a large twitter following and that (b) by late 2021 I <em>knew</em> I was not prepared to stay in academia for another year, which is what allowed me to publicly announce that I was on the job market. That strategy worked really well for me and generated a lot of leads.</p>
<p>Often people would offer to list me as an ‚Äúinternal recommendation‚Äù for a position, which is something I didn‚Äôt know anything about, but is quite similar to what you‚Äôd expect from academia except slightly more formalised: if someone inside the organisation recommends you for a role it makes you a more visible and more valuable candidate, and helps set you apart from the large number of other candidates. It‚Äôs useful, but not required in order to get a position (e.g., I wasn‚Äôt an internal recommendation at one of the two companies that were on my final short list).</p>
<p>The process at most companies went like this: I submitted my r√©sum√© and I never heard back from them. The end. That seems to be how it goes and it doesn‚Äôt mean anything. The best analogy for the whole process I came up with was thinking of it like dating apps. Submitting a r√©sum√© isn‚Äôt any more meaningful than ‚Äúswiping right‚Äù on the company. They might swipe back, in which case you could end up in a chat with a recruiter. But they probably won‚Äôt, and that says absolutely <em>nothing</em> about you. It‚Äôs just a really big marketplace filled with incredibly noisy signals.</p>
<p>I have no idea how many jobs I applied for any more than I know how many men I‚Äôve liked on a dating app. Companies, like men, are everywhere, and there is little to be gained by trying to keep track of all of them.</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/lynn-vdbr-xeWTU66tJIo-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Lynn Vdbr. Available by CC0 licence on <a href="https://unsplash.com/photos/xeWTU66tJIo">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>What I do know is that I started the ‚Äúinitial conversation‚Äù with 11 different companies during my job search. The initial conversation is itself an informal interview (usually with a recruiter) and it goes both ways ‚Äì you‚Äôre screening the company just as much as they‚Äôre screening you. You may or may not go to the ‚Äúreal‚Äù interview stage after that: for me, I reached the interview stage with 5 of the 11 companies I‚Äôd started conversations with. The interview process was different at every company, but most of them weren‚Äôt a single interview but rather a series of interviews with different people. Sometimes there were ‚Äúskills tests‚Äù to take (seriously, this is a thing), other times there were not. It was quite different to what I expected from academia, and it took a few failed attempts before I worked out the basics of how to interview.</p>
<p>Eventually I ended up with offers from two different companies, I negotiated briefly,<sup>6</sup> and then chose to accept an offer.</p>
</section>
<section id="learning-to-love-job-mobility" class="level2">
<h2 class="anchored" data-anchor-id="learning-to-love-job-mobility">Learning to love job mobility</h2>
<p>Folks inside academia have asked me about what life is like on the other side, and it‚Äôs hard to know how to answer. I know what <em>my</em> position is like, but that doesn‚Äôt say a lot about what life is like for anyone else in industry. It‚Äôs a big world out there and there‚Äôs a lot more variability in industry jobs than there are in academic jobs. Some are wonderful and others are terrible. Luckily for me I landed well and I genuinely love my current job, but not everyone does. In that respect, academia and industry are similar.</p>
<p>However, one thing that everyone who has made the jump notices immediately is that mobility is so much higher in industry. This makes a huge difference to your quality of life. In academia, if you find yourself hired into a bad department you are in a lot of trouble: it‚Äôs so hard to move between academic jobs that one toxic department can ruin an entire career. Industry is different: if you have a bad job you can make a plan to leave, and be happily working somewhere new within six months.</p>
<p>Once you‚Äôve been in the sector for a while and are no longer carrying the albatross of ‚ÄúI‚Äôm just an academic and falsely believe I have no skills‚Äù around your neck, you discover that moving jobs is a thing people do all the time. Sometimes they do it for more money, sometimes they do it to get away from a bad situation (it happens everywhere), but often they move jobs just because they want to do something different. And that‚Äôs okay.</p>
</section>
<section id="welcome-we-have-tiny-cakes" class="level2">
<h2 class="anchored" data-anchor-id="welcome-we-have-tiny-cakes">Welcome! We have tiny cakes!</h2>
<p>Yes yes, Danielle, that‚Äôs nice and I take your point about variability and job mobility but what‚Äôs your job actually like? Are you happy? What do you do all day in industry? Do you have a boss who runs around telling you what to do all the time? Is it like <em>Office Space</em>? You look so much like Jennifer Aniston, do you have to wear 37 pieces of flair?</p>
<p>Like a lot of people with professional roles, my actual job is pretty varied on a day to day basis and I have quite a lot of autonomy in this role. Some days I write code contributing to Apache Arrow. Other days I write blog posts. Sometimes I spend time on twitter talking with R developers, because actually that‚Äôs part of what I do these days! Now that I‚Äôm wrapping my head around how Arrow works I‚Äôm at the point that I can start giving talks and workshops. I sometimes create resources that make it easier for folks inside and outside the company to use Arrow. I contribute where I can, I work with lovely people who help me learn the parts of the job that are foreign to me, and I even get to make use of my visual design skills from time to time. The company pays me fairly for my time, doesn‚Äôt subject me to the humiliating rituals of the academy, and I don‚Äôt have to deal with academic transphobia anymore. It‚Äôs lovely.</p>
<p>So yes, I‚Äôm happy here.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/bryam-blanco-nXKWLn8y9qE-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Bryam Blanco. Available by CC0 licence on <a href="https://unsplash.com/photos/nXKWLn8y9qE">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yeah, I‚Äôm currently dating an obnoxiously competent computational biologist, and her citation count <em>for last year</em> is perilously close to doubling my citation count for my entire career. I‚Äôve given up on any illusion that my citations are even slightly impressive. I am very much the <a href="https://en.wikipedia.org/wiki/Kardashian_Index">Kardashian</a> of this relationship. But that is <em>so</em> not the point!‚Ü©Ô∏é</p></li>
<li id="fn2"><p>To make it easier still, this is the <a href="_resume/danielle-navarro-academic-resume.Rmd">R markdown file it‚Äôs based on</a>, and this is the <a href="_resume/svm-latex-cv.tex">.tex file that you‚Äôll need</a> if you want to use the same template. And yes, there is a delightful appropriateness to the fact that, yes, the academic template is still using LaTeX directly rather than letting pandoc do the work and hiding the horrors from you‚Ü©Ô∏é</p></li>
<li id="fn3"><p>You didn‚Äôt even read it yourself, did you? Yeah, didn‚Äôt think so.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>Again, to make it a little easier if you want to adopt my approach, this is the <a href="_resume/danielle-navarro-verbose-resume.Rmd">R markdown file it‚Äôs based on</a>‚Ü©Ô∏é</p></li>
<li id="fn5"><p>An industry r√©sum√© is really only supposed to be one page long, and you can see that I‚Äôm <em>still</em> clinging a little to my academic past by making mine two pages, but at least this verion really is an industry style format. This r√©sum√© is made using the pagedown package, and it strongly assumes you‚Äôre only doing a one-page format. If you want to see how badly I had to hack into it in order to force a two-page output, you can look at my <a href="_resume/danielle-navarro-industry-resume.Rmd">R markdown source</a> if you like. Be warned, it is grim!‚Ü©Ô∏é</p></li>
<li id="fn6"><p>Any decent guide to a job search will talk to you about how to negotiate and what ought to be negotiated in your kind of job search. But I am an indecent woman, this is not a reliable guide, and I am not the person you should rely upon for advice on this topic.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Transitioning from Academia to Industry},
  date = {2022-04-01},
  url = {https://blog.djnavarro.net/academia-to-industry-transition},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúTransitioning from Academia to
Industry.‚Äù</span> April 1, 2022. <a href="https://blog.djnavarro.net/academia-to-industry-transition">https://blog.djnavarro.net/academia-to-industry-transition</a>.
</div></div></section></div> ]]></description>
  <category>Career</category>
  <guid>https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/index.html</guid>
  <pubDate>Thu, 31 Mar 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/annie-spratt-vF2AC6pjIBY-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using Amazon S3 with R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>I have a shameful confession to make, one that may shock and surprise you. Although I am an R user, data scientist, and developer of many years experience, I‚Äôve never used Amazon Web Services.</p>
<p>It‚Äôs hard to believe, I know, but I‚Äôve never spun up a virtual machine on ‚ÄúAmazon EC2‚Äù (‚Ä¶whatever <em>that</em> is), I don‚Äôt know what ‚ÄúAWS Lambda‚Äù is, and the only thing I know about ‚ÄúAmazon S3‚Äù is that fancy data science people use it to store data. Or something along those lines. Honestly, I really haven‚Äôt been paying attention. Every time people start talking about it my eyes glaze over and my impostor syndrome arrives to berate me. A <em>true</em> data scientist is born knowing how to spin up EC2 instances, and if baby doesn‚Äôt post her drawings on S3 then she‚Äôs already falling behind, etc etc. It‚Äôs terribly stressful.</p>
<p>My dark and terrible personal tragedy notwithstanding,<sup>1</sup> I suspect my situation is not entirely uncommon. Back in my academic days, I knew very few people who used Amazon Web Services (a.k.a. AWS) for much of anything. It wasn‚Äôt needed, so it wasn‚Äôt knowledge that people acquired. Now that I‚Äôm working in an industry setting I‚Äôm finding that it‚Äôs <em>so</em> widely used that it‚Äôs almost assumed knowledge. <em>Everyone</em> knows this stuff, so there‚Äôs not a lot said about why you might care, or how to get started using these tools if you decide that you do care.</p>
<p>Today I decided to do something about this, starting by teaching myself how to use Amazon‚Äôs Simple Storage Service (a.k.a S3). With the help of the <a href="https://github.com/cloudyr/aws.s3"><strong>aws.s3</strong></a> package authored by Thomas Leeper and currently maintained by Simon Urbanek, it‚Äôs surprisingly easy to do.</p>
<p>In this post I‚Äôll walk you through the process.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(stringr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(magick)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(aws.s3)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW687458.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
<section id="what-is-s3-and-why-do-i-care" class="level2">
<h2 class="anchored" data-anchor-id="what-is-s3-and-why-do-i-care">What is S3 and why do I care?</h2>
<p>Let‚Äôs get started. As with everything else in life, the place to start is asking yourself if you even care. I mean, if we don‚Äôt care what S3 is or what it does, why even bother? Just let your eyes glaze over as the nerd keeps talking and wonder if there‚Äôs anything good on TV‚Ä¶</p>
<p>Still here? Cool.</p>
<p>From the user perspective, Amazon‚Äôs ‚ÄúSimple Storage Service‚Äù isn‚Äôt particularly complicated. It‚Äôs just a remote storage system that you can dump files into, kind of like a programmable Dropbox. Each file (and its accompanying metadata) is stored as an <em>object</em>, and collections of objects are grouped together into a <em>bucket</em>. If you want to store files on S3, all you need to do is open an account, create a new bucket, and upload your files. It‚Äôs exactly that boring, and the only reason anyone cares (as far as I know) is that Amazon designed this to work at scale and it‚Äôs fairly easy to write scripts that allow you to control the whole thing programmatically. Which is actually a pretty handy service, now that I think about it!</p>
<p><br></p>
</section>
<section id="downloading-public-data-from-s3" class="level2">
<h2 class="anchored" data-anchor-id="downloading-public-data-from-s3">Downloading public data from S3</h2>
<p>The first thing to understand about S3 is that there‚Äôs many different ways of using it. Very often, you‚Äôre not interested in storing your own data on S3. You might just want to download data that someone else has stored, and if that data has been made publicly accessible, then you don‚Äôt even need an Amazon Web Services (AWS) account at all. You can download to your hearts content. For a data scientist it‚Äôs a fun way to start, because you get to dive straight into playing with data insted of fiddling about with accounts and credentials and all those dull things.</p>
<p>So let‚Äôs find a public data set to play with. While browsing through the registry of open data sets listed on the S3 website I came across the <a href="https://registry.opendata.aws/nsw-herbarium/">National Herbarium of NSW data set</a>. As described on the website:</p>
<blockquote class="blockquote">
<p>The National Herbarium of New South Wales is one of the most significant scientific, cultural and historical botanical resources in the Southern hemisphere. The 1.43 million preserved plant specimens have been captured as high-resolution images and the biodiversity metadata associated with each of the images captured in digital form. Botanical specimens date from year 1770 to today, and form voucher collections that document the distribution and diversity of the world‚Äôs flora through time, particularly that of NSW, Austalia and the Pacific. The data is used in biodiversity assessment, systematic botanical research, ecosystem conservation and policy development. The data is used by scientists, students and the public.</p>
</blockquote>
<p>As an example, here‚Äôs one of the images stored in the data set, of a plant specimen collected quite close to where I currently live, albeit quite a long time ago:</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW29246.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
<p>So yeah, I love this data set already and I want to play with it. But how do I do that? I‚Äôve never done anything with S3 before and it‚Äôs all a bit new to me. Well, on the right hand side of the listing page for the National Herbarium data, there‚Äôs a section that contains the following metadata:</p>
<pre><code>Description
Herbarium Collection Image files

Resource type
S3 Bucket

Amazon Resource Name (ARN)
arn:aws:s3:::herbariumnsw-pds

AWS Region
ap-southeast-2</code></pre>
<p>Using this information, I can get started. I know <em>what</em> the data is (an S3 bucket), I know <em>where</em> the data is (in the <code>"ap-southeast-2"</code> region), and on top of that I know the <em>name</em> of the data (<code>"herbariumnsw-pds"</code>). This should be enough for me to find what I‚Äôm looking for!</p>
<section id="finding-the-bucket" class="level3">
<h3 class="anchored" data-anchor-id="finding-the-bucket">Finding the bucket</h3>
<p>Okay, so let‚Äôs see if we can find this bucket using R code. The <strong>aws.s3</strong> package contains a handy function called <code>bucket_exists()</code>, which returns <code>TRUE</code> when it finds an S3 bucket at the specified location (and using whatever credentials you currently have available), and <code>FALSE</code> when it does not. That seems relatively easy. We know the name of our bucket, specified more precisely as <code>"s3://herbariumnsw-pds/"</code>, and we can verify that it exists. And of course when we do this it turns out that there‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">bucket_exists</span>(<span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>)</span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_e3a69ca1254b73a8dd7425663cec9545">
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>‚Ä¶isn‚Äôt? Wait, what????</p>
<p>I‚Äôve made a very common mistake here, and forgotten to specify the region. S3 is very picky about regions and you need to tell it explicitly which one to use. The National Herbarium is an Australian institution and the data are stored in Amazon‚Äôs Sydney data center. In Amazon parlance, that‚Äôs the <code>"ap-southeast-2"</code> region, but unless you‚Äôve done something to set a different default (more on that later), everything you do will probably default to the <code>"us-east-1"</code> region. To override this default, we can explicitly specify the <code>region</code> that <code>bucket_exists()</code> should look in. So now let‚Äôs try that again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">bucket_exists</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb5-3">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span></span>
<span id="cb5-4">)</span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-7_1a73c4405d3c9ae480adf7547d5a3572">
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Much better!</p>
</section>
<section id="okay-okay-i-lied" class="level3">
<h3 class="anchored" data-anchor-id="okay-okay-i-lied">Okay, okay, I lied‚Ä¶</h3>
<p>One more thing. If you‚Äôve been following along at home and trying out these commands, you‚Äôve probably noticed that the output you‚Äôre getting is a little more verbose than simply returning <code>TRUE</code> or <code>FALSE</code>. The actual output comes with a lot of additional metadata, stored as attributes. I didn‚Äôt really want to clutter the output by showing all that stuff, so the examples above secretly removed the attributes before printing the results. What you‚Äôll <em>actually</em> see is something like this:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-8_c8eaf366e80a13f6dff792ad65ab801d">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">bucket_exists</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb7-3">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span></span>
<span id="cb7-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
attr(,"x-amz-id-2")
[1] "cr7uaPSaKx4B5BJNRCDIU+Cpns0menZBjxjT5OltIViGFUlStJxSqI5rT1lZfN3ASVz+p4XMalE="
attr(,"x-amz-request-id")
[1] "AE47G6MWJA7NRMYJ"
attr(,"date")
[1] "Fri, 22 Apr 2022 09:04:11 GMT"
attr(,"x-amz-bucket-region")
[1] "ap-southeast-2"
attr(,"x-amz-access-point-alias")
[1] "false"
attr(,"content-type")
[1] "application/xml"
attr(,"server")
[1] "AmazonS3"</code></pre>
</div>
</div>
<p>If you stare at this long enough this metadata all starts to make sense, especially after you‚Äôve been playing around with S3 for a while. There‚Äôs a timestamp, there‚Äôs some information about which region the data came from, and so on. Nothing particularly special or interesting here, so let‚Äôs move on to something more fun.</p>
</section>
<section id="listing-bucket-contents" class="level3">
<h3 class="anchored" data-anchor-id="listing-bucket-contents">Listing bucket contents</h3>
<p>At this point in the journey we‚Äôve located the bucket, but we have no idea what it contains. To get a list of the bucket contents, the <code>get_bucket_df()</code> function from <strong>aws.s3</strong> is our friend. The National Herbarium data set contains a lot of objects, so I‚Äôll be ‚Äúfrugal‚Äù and restrict myself to merely downloading <code>max = 20000</code> records:</p>
<div class="cell" data-hash="index_cache/html/get-bucket_29edbad137ee1cabf7490a6fdc5a38a5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">herbarium_files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_bucket_df</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb9-3">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>, </span>
<span id="cb9-4">  <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">20000</span></span>
<span id="cb9-5">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">as_tibble</span>()</span></code></pre></div>
</div>
<p>Now that we‚Äôve downloaded a list of the bucket contents, let‚Äôs have a look and see what we‚Äôve got:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">herbarium_files</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20,000 √ó 8
   Key                        LastM‚Ä¶¬π ETag  Size  Owner‚Ä¶¬≤ Owner‚Ä¶¬≥ Stora‚Ä¶‚Å¥ Bucket
   &lt;chr&gt;                      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; 
 1 ReadMe.txt                 2020-0‚Ä¶ "\"5‚Ä¶ 2729  97c09b‚Ä¶ herbar‚Ä¶ STANDA‚Ä¶ herba‚Ä¶
 2 dwca-nsw_avh-v1.0.zip      2019-1‚Ä¶ "\"2‚Ä¶ 8231‚Ä¶ 97c09b‚Ä¶ herbar‚Ä¶ STANDA‚Ä¶ herba‚Ä¶
 3 herbariumnsw-pds/PublicDa‚Ä¶ 2021-0‚Ä¶ "\"3‚Ä¶ 33    &lt;NA&gt;    &lt;NA&gt;    STANDA‚Ä¶ herba‚Ä¶
 4 herbariumnsw-pds/PublicDa‚Ä¶ 2021-0‚Ä¶ "\"5‚Ä¶ 433   &lt;NA&gt;    &lt;NA&gt;    STANDA‚Ä¶ herba‚Ä¶
 5 herbariumnsw-pds/PublicDa‚Ä¶ 2021-0‚Ä¶ "\"5‚Ä¶ 33    &lt;NA&gt;    &lt;NA&gt;    STANDA‚Ä¶ herba‚Ä¶
 6 herbariumnsw-pds/PublicDa‚Ä¶ 2021-0‚Ä¶ "\"f‚Ä¶ 433   &lt;NA&gt;    &lt;NA&gt;    STANDA‚Ä¶ herba‚Ä¶
 7 herbariumnsw-pds/PublicDa‚Ä¶ 2021-0‚Ä¶ "\"b‚Ä¶ 33    &lt;NA&gt;    &lt;NA&gt;    STANDA‚Ä¶ herba‚Ä¶
 8 herbariumnsw-pds/PublicDa‚Ä¶ 2021-0‚Ä¶ "\"4‚Ä¶ 433   &lt;NA&gt;    &lt;NA&gt;    STANDA‚Ä¶ herba‚Ä¶
 9 herbariumnsw-pds/PublicDa‚Ä¶ 2021-0‚Ä¶ "\"f‚Ä¶ 33    &lt;NA&gt;    &lt;NA&gt;    STANDA‚Ä¶ herba‚Ä¶
10 herbariumnsw-pds/PublicDa‚Ä¶ 2021-0‚Ä¶ "\"6‚Ä¶ 433   &lt;NA&gt;    &lt;NA&gt;    STANDA‚Ä¶ herba‚Ä¶
# ‚Ä¶ with 19,990 more rows, and abbreviated variable names ¬π‚ÄãLastModified,
#   ¬≤‚ÄãOwner_ID, ¬≥‚ÄãOwner_DisplayName, ‚Å¥‚ÄãStorageClass</code></pre>
</div>
</div>
<p>Wonderful! The very first object in the bucket happens to be a file called <code>ReadMe.txt</code>. Perhaps I should download this marvelous object and perhaps even read it?</p>
</section>
<section id="downloading-files" class="level3">
<h3 class="anchored" data-anchor-id="downloading-files">Downloading files</h3>
<p>Okay then. We are now at the step where we want to download a specific object from the bucket, and save it locally as a file. To do this we use the <code>save_object()</code> function. As before, we specify the <code>bucket</code> and the <code>region</code>, but we‚Äôll also need to specify which <code>object</code> should be downloaded, and the <code>file</code> path to which it should be saved. Here‚Äôs how that works for the Read Me file:</p>
<div class="cell" data-hash="index_cache/html/download-readme_81ce5c37bac9d7bb5f34e5324a1e7d65">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">save_object</span>(</span>
<span id="cb12-2">  <span class="at" style="color: #657422;">object =</span> <span class="st" style="color: #20794D;">"ReadMe.txt"</span>,</span>
<span id="cb12-3">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb12-4">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>,</span>
<span id="cb12-5">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"herbarium/ReadMe.txt"</span></span>
<span id="cb12-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "herbarium/ReadMe.txt"</code></pre>
</div>
</div>
<p>Once again this works and so off I go, reading the Read Me in search of further clues.</p>
<p>As you might hope, the Read Me file does in fact tell us something about how the National Herbarium dataset is organised. In particular, one line in the Read Me informs me that there‚Äôs a file storing all the metadata, encoded as a zipped csv file:</p>
<blockquote class="blockquote">
<p>A zipped csv containing the biocollections metadata for the images is available as a DarwinCore Archive at: https://herbariumnsw-pds.s3-ap-southeast-2.amazonaws.com/dwca-nsw_avh-v1.0.zip</p>
</blockquote>
<p>This sounds like a good place to start, doesn‚Äôt it? Once again, I‚Äôll use <code>save_object()</code> and try to download the metadata file <code>dwca-nsw_avh-v1.0.zip</code>:</p>
<div class="cell" data-hash="index_cache/html/download-metadata_4619822fca60c9a956d63567a42bf781">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">save_object</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;">object =</span> <span class="st" style="color: #20794D;">"dwca-nsw_avh-v1.0.zip"</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb14-4">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"herbarium/dwca-nsw_avh-v1.0.zip"</span></span>
<span id="cb14-6">) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "herbarium/dwca-nsw_avh-v1.0.zip"</code></pre>
</div>
</div>
<p>Success!</p>
<p>I now have a copy of the 79MB zip file on my laptop, and after decompressing the file it turns out I have a 402MB file called <code>occurrence.txt</code> that contains the metadata. As it turns out, the metadata aren‚Äôt stored in comma-separated value format, they‚Äôre stored in tab-separated value format. Still, that‚Äôs fine: the <code>read_tsv()</code> function from the <strong>readr</strong> package can handle it:</p>
<div class="cell" data-hash="index_cache/html/read-data_1e0738550c63a961802caf74734b1c07">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">herbarium <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_tsv</span>(<span class="st" style="color: #20794D;">"herbarium/dwca-nsw_avh-v1.0/occurrence.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: One or more parsing issues, see `problems()` for details</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 725507 Columns: 74
‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Delimiter: "\t"
chr  (38): id, type, institutionCode, collectionCode, basisOfRecord, occurre...
dbl   (7): minimumElevationInMeters, maximumElevationInMeters, minimumDepthI...
lgl  (28): lifeStage, associatedSequences, associatedTaxa, previousIdentific...
dttm  (1): modified

‚Ñπ Use `spec()` to retrieve the full column specification for this data.
‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">herbarium</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 725,507 √ó 74
   id     type  modified            institutionCode collectionCode basisOfRecord
   &lt;chr&gt;  &lt;chr&gt; &lt;dttm&gt;              &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;        
 1 NSW:N‚Ä¶ Phys‚Ä¶ 2013-11-28 11:56:00 NSW             NSW            PreservedSpe‚Ä¶
 2 NSW:N‚Ä¶ Phys‚Ä¶ 2012-08-09 15:47:00 NSW             NSW            PreservedSpe‚Ä¶
 3 NSW:N‚Ä¶ Phys‚Ä¶ 2015-03-13 15:51:00 NSW             NSW            PreservedSpe‚Ä¶
 4 NSW:N‚Ä¶ Phys‚Ä¶ 2018-07-24 10:06:00 NSW             NSW            PreservedSpe‚Ä¶
 5 NSW:N‚Ä¶ Phys‚Ä¶ 2015-03-13 15:51:00 NSW             NSW            PreservedSpe‚Ä¶
 6 NSW:N‚Ä¶ Phys‚Ä¶ 2013-07-24 15:16:00 NSW             NSW            PreservedSpe‚Ä¶
 7 NSW:N‚Ä¶ Phys‚Ä¶ 2015-03-13 15:51:00 NSW             NSW            PreservedSpe‚Ä¶
 8 NSW:N‚Ä¶ Phys‚Ä¶ 2010-12-01 14:25:00 NSW             NSW            PreservedSpe‚Ä¶
 9 NSW:N‚Ä¶ Phys‚Ä¶ 2018-01-24 16:49:00 NSW             NSW            PreservedSpe‚Ä¶
10 NSW:N‚Ä¶ Phys‚Ä¶ 2018-07-24 10:05:00 NSW             NSW            PreservedSpe‚Ä¶
# ‚Ä¶ with 725,497 more rows, and 68 more variables: occurrenceID &lt;chr&gt;,
#   catalogNumber &lt;chr&gt;, occurrenceRemarks &lt;chr&gt;, recordNumber &lt;chr&gt;,
#   recordedBy &lt;chr&gt;, lifeStage &lt;lgl&gt;, reproductiveCondition &lt;chr&gt;,
#   establishmentMeans &lt;chr&gt;, occurrenceStatus &lt;chr&gt;, preparations &lt;chr&gt;,
#   associatedSequences &lt;lgl&gt;, associatedTaxa &lt;lgl&gt;,
#   previousIdentifications &lt;lgl&gt;, eventDate &lt;chr&gt;, verbatimEventDate &lt;chr&gt;,
#   habitat &lt;chr&gt;, eventRemarks &lt;lgl&gt;, continent &lt;lgl&gt;, waterBody &lt;lgl&gt;, ‚Ä¶</code></pre>
</div>
</div>
<p>There‚Äôs quite a lot of interesting information stored in the 74 columns of the <code>herbarium</code> data, but I won‚Äôt dive very deep into it in this post. I will mention, however, that if you find yourself following along at home you‚Äôll likely discover that there is a small proportion of the 725507 rows that cause problems for <code>read_tsv()</code>, likely because they contain additional tab characters that mess up the parsing slightly. In real life I‚Äôd want to look into this, but this is a blog post. Nothing here is real and nobody is watching, right?</p>
</section>
<section id="wrangling-the-data" class="level3">
<h3 class="anchored" data-anchor-id="wrangling-the-data">Wrangling the data</h3>
<p>Now that I have some data, I can do a little poking around to see what‚Äôs in it. Exploring a new data set is always fun, but this isn‚Äôt really a post about data wrangling, so I‚Äôll keep this brief. A quick look suggests that (unsurprisingly) there are a lot of records corresponding to samples collected in Australia, and a disproportionate number of those come from New South Wales:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">herbarium <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">filter</span>(country <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Australia"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">count</span>(stateProvince)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 √ó 2
   stateProvince                     n
   &lt;chr&gt;                         &lt;int&gt;
 1 Australian Capital Territory     52
 2 External Territories           1549
 3 New South Wales              394439
 4 Northern Territory            28922
 5 Queensland                    89016
 6 South Australia               20206
 7 Tasmania                      23994
 8 Victoria                      40984
 9 Western Australia             80447
10 &lt;NA&gt;                           4287</code></pre>
</div>
</div>
<p>That‚Äôs nice, but doesn‚Äôt immediately suggest a fun example for me to continue this post. On a whim, I decide to name search my neighbourhood. I live in Newtown (in Sydney), so I‚Äôm going to find the subset of images in the National Herbarium data whose locality matches the string <code>"Newtown"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">newtowners <span class="ot" style="color: #003B4F;">&lt;-</span> herbarium <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">filter</span>(</span>
<span id="cb23-3">    country <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Australia"</span>, </span>
<span id="cb23-4">    locality <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_detect</span>(<span class="st" style="color: #20794D;">"Newtown"</span>)</span>
<span id="cb23-5">  )</span></code></pre></div>
</div>
<p>Yeah, no. This is misleading.</p>
<p>From a data science point of view I‚Äôm being extremely sloppy here. If my intention had been to find only plants from my neighbourhood, I would also be wise to filter by recorded longitude and latitude where available, and I would certainly want to exclude cases listed as coming from another Australian state. ‚ÄúNewtown‚Äù is not an uncommon name, and ‚Äì to the surprise of nobody ‚Äì it turns out that there are several different locations called ‚ÄúNewtown‚Äù in different parts of Australia. Fortunately for me, I really don‚Äôt care! All I wanted was a query that would return around 20-30 results, so this is fine for my purposes.</p>
<p>Now that we‚Äôve got a subset of records, let‚Äôs pull out the catalog numbers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">newtowners <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;">pull</span>(catalogNumber)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "NSW 395530"  "NSW 461895"  "NSW 650052"  "NSW 1055313" "NSW 1056305"
 [6] "NSW 29246"   "NSW 36860"   "NSW 39618"   "NSW 687458"  "NSW 121207" 
[11] "NSW 214616"  "NSW 306564"  "NSW 307215"  "NSW 389387"  "NSW 395529" 
[16] "NSW 402973"  "NSW 403188"  "NSW 404127"  "NSW 421494"  "NSW 446243" 
[21] "NSW 570557"  "NSW 702035"  "NSW 676197"  "NSW 776212"  "NSW 777249" 
[26] "NSW 739455"  "NSW 751830" </code></pre>
</div>
</div>
<p>The Read Me file had something useful to say about these numbers. Specifically, the catalog numbers are used as the basis of the file naming convention for images stored in the bucket:</p>
<blockquote class="blockquote">
<p>Image data are organized by NSW specimen barcode number. For example, the file for Dodonaea lobulata recorded on 1968-09-07 = NSW 041500 can be accessed via the URI https://herbariumnsw-pds.s3-ap-southeast-2.amazonaws.com/images/NSW041500.jp2</p>
</blockquote>
<p>Hm. I wonder if I can write code to extract these images?</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW307215.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
</section>
<section id="scripting-the-download" class="level3">
<h3 class="anchored" data-anchor-id="scripting-the-download">Scripting the download</h3>
<p>Okay, now I want to pull the images for these records. First, I‚Äôm going to construct the paths. I am <em>not</em> going to download the jp2 files because they‚Äôre about 100MB each. Multiplying that number by the number of records gives‚Ä¶ well, it gives a big enough number that I think I‚Äôve worked out why the National Herbarium dataset is on S3 and not on a laptop in a damp basement somewhere!</p>
<p>In any case, for a lot of the records there‚Äôs a jpg file that is considerably smaller in size, so I‚Äôm going to try to download those. Based on the barcodes I‚Äôve got, these are the files I‚Äôm expecting to find:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">objects <span class="ot" style="color: #003B4F;">&lt;-</span> newtowners <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">pull</span>(catalogNumber) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">" "</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;">str_c</span>(<span class="st" style="color: #20794D;">"images/"</span>, ., <span class="st" style="color: #20794D;">".jpg"</span>)</span>
<span id="cb26-5"></span>
<span id="cb26-6">objects</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "images/NSW395530.jpg"  "images/NSW461895.jpg"  "images/NSW650052.jpg" 
 [4] "images/NSW1055313.jpg" "images/NSW1056305.jpg" "images/NSW29246.jpg"  
 [7] "images/NSW36860.jpg"   "images/NSW39618.jpg"   "images/NSW687458.jpg" 
[10] "images/NSW121207.jpg"  "images/NSW214616.jpg"  "images/NSW306564.jpg" 
[13] "images/NSW307215.jpg"  "images/NSW389387.jpg"  "images/NSW395529.jpg" 
[16] "images/NSW402973.jpg"  "images/NSW403188.jpg"  "images/NSW404127.jpg" 
[19] "images/NSW421494.jpg"  "images/NSW446243.jpg"  "images/NSW570557.jpg" 
[22] "images/NSW702035.jpg"  "images/NSW676197.jpg"  "images/NSW776212.jpg" 
[25] "images/NSW777249.jpg"  "images/NSW739455.jpg"  "images/NSW751830.jpg" </code></pre>
</div>
</div>
<p>This all seems pretty reasonable, but there‚Äôs a nuance here that is worth pointing out. When you look at the output above, it‚Äôs tempting to think that <code>"images"</code> must be a subfolder within the S3 bucket. That intuition isn‚Äôt correct: each S3 bucket is a flat datastore. It doesn‚Äôt contain any subfolders: the <code>"/"</code> is treated as part of the object name, nothing more. It can be convenient to name objects this way, though, because it makes it a little easier to organise them into subfolders later on if you want to move them onto a more traditional hierarchical file system.</p>
<p>Anyway‚Ä¶</p>
<p>Since I‚Äôm going to try downloading objects that may or may not actually exist (i.e., I‚Äôm not certain if all these records actually have jpg files), I‚Äôm going to start out by writing a helper function <code>save_herbarium_image()</code> that does three things:</p>
<ul>
<li>First, it uses the <code>object_exists()</code> function to check if an object with that name exists in this bucket. The <code>object_exists()</code> function works similarly to the <code>bucket_exists()</code> function I used earlier: the only difference is that I also specify the object name.</li>
<li>Second, if the object exists, it downloads the file and stores it locally, in the <code>"herbarium"</code> subfolder in the folder that contains this blog post.</li>
<li>Third, it returns information to the user. If the object exists and was successfully downloaded, it returns a character string specifying the location of the saved file. If the object doesn‚Äôt exist, it returns <code>NA</code>.</li>
</ul>
<p>Here‚Äôs the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">save_herbarium_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb28-2">  </span>
<span id="cb28-3">  <span class="co" style="color: #5E5E5E;"># if object doesn't exist in bucket, return NA</span></span>
<span id="cb28-4">  ok <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">object_exists</span>(</span>
<span id="cb28-5">    <span class="at" style="color: #657422;">object =</span> file,</span>
<span id="cb28-6">    <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb28-7">    <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span></span>
<span id="cb28-8">  )</span>
<span id="cb28-9">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span>ok) <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NA_character_</span>)</span>
<span id="cb28-10">  </span>
<span id="cb28-11">  <span class="co" style="color: #5E5E5E;"># if object exists, save it and return file path</span></span>
<span id="cb28-12">  <span class="fu" style="color: #4758AB;">save_object</span>(</span>
<span id="cb28-13">      <span class="at" style="color: #657422;">object =</span> file,</span>
<span id="cb28-14">      <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb28-15">      <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>,</span>
<span id="cb28-16">      <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"herbarium/"</span>, file)</span>
<span id="cb28-17">  )</span>
<span id="cb28-18">}</span></code></pre></div>
</div>
<p>And here it is applied to the first file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">objects[<span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">save_herbarium_image</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "herbarium/images/NSW395530.jpg"</code></pre>
</div>
</div>
<p>That seemed to work well when applied to a single file, so I‚Äôll use the functional programming tools from <strong>purrr</strong> to vectorise the operation. More precisely, I‚Äôll use <code>map_chr()</code> to iterate over all of the <code>objects</code>, applying the <code>save_herbarium_image()</code> function to each one, and collecting the return values from all these function calls into a character vector:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-15_3834f1bc9f251eaafda5d7a5284b7f7e">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">objects <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">map_chr</span>(save_herbarium_image)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Client error: (404) Not Found
Client error: (404) Not Found
Client error: (404) Not Found
Client error: (404) Not Found</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "herbarium/images/NSW395530.jpg"  "herbarium/images/NSW461895.jpg" 
 [3] "herbarium/images/NSW650052.jpg"  "herbarium/images/NSW1055313.jpg"
 [5] NA                                "herbarium/images/NSW29246.jpg"  
 [7] "herbarium/images/NSW36860.jpg"   "herbarium/images/NSW39618.jpg"  
 [9] "herbarium/images/NSW687458.jpg"  "herbarium/images/NSW121207.jpg" 
[11] "herbarium/images/NSW214616.jpg"  "herbarium/images/NSW306564.jpg" 
[13] "herbarium/images/NSW307215.jpg"  "herbarium/images/NSW389387.jpg" 
[15] NA                                "herbarium/images/NSW402973.jpg" 
[17] "herbarium/images/NSW403188.jpg"  "herbarium/images/NSW404127.jpg" 
[19] NA                                "herbarium/images/NSW446243.jpg" 
[21] "herbarium/images/NSW570557.jpg"  "herbarium/images/NSW702035.jpg" 
[23] "herbarium/images/NSW676197.jpg"  "herbarium/images/NSW776212.jpg" 
[25] "herbarium/images/NSW777249.jpg"  "herbarium/images/NSW739455.jpg" 
[27] NA                               </code></pre>
</div>
</div>
<p>Did it work? Well, kind of. Notice there are some missing values in the output. In those cases the object doesn‚Äôt exist in this bucket, and when that happens the <code>save_herbarium_image()</code> function bails and doesn‚Äôt try to download anything. But in most cases images it worked.</p>
</section>
<section id="a-minor-irritant-appears" class="level3">
<h3 class="anchored" data-anchor-id="a-minor-irritant-appears">A minor irritant appears!</h3>
<p>At this point, I‚Äôd like to start displaying the images. It‚Äôs nice to have pretty pictures in a blog post, don‚Äôt you think? Like, maybe what I could do is include some of those images in this post. One problem though is that the files stored in the National Herbarium dataset are high resolution images and as consequence even the jpg files are usually about 7MB each. That‚Äôs a bit excessive, so I think what I‚Äôll do is write a little helper function that reads in each image, resizes it to something smaller, and then saves that smaller file.</p>
<p>If I want to do this within R, the <strong>magick</strong> package is my friend. It‚Äôs extremely well suited to this kind of image manipulation task. This post isn‚Äôt about the <strong>magick</strong> package, so I‚Äôm not going to explain this part of the code,<sup>2</sup> but suffice it to say that this helper function solves the problem:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">shrink_herbarium_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">on.exit</span>(<span class="fu" style="color: #4758AB;">gc</span>())</span>
<span id="cb34-3">  img_from <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="st" style="color: #20794D;">"herbarium"</span>, <span class="st" style="color: #20794D;">"images"</span>, file)</span>
<span id="cb34-4">  img_to <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="st" style="color: #20794D;">"herbarium"</span>, <span class="st" style="color: #20794D;">"tiny_images"</span>, file)</span>
<span id="cb34-5">  <span class="fu" style="color: #4758AB;">image_read</span>(img_from) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-6">    <span class="fu" style="color: #4758AB;">image_resize</span>(<span class="fu" style="color: #4758AB;">geometry_size_pixels</span>(<span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">1000</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-7">    <span class="fu" style="color: #4758AB;">image_write</span>(img_to)</span>
<span id="cb34-8">}</span></code></pre></div>
</div>
<p>Now that I have this function, I can iterate over every image stored in my local <code>images</code> folder, shrink it, and save the small version to the <code>tiny_images</code> folder:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-17_8ed24bec88d65d45ecb0f8d2bc6bb9b3">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="st" style="color: #20794D;">"herbarium/images"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;">map_chr</span>(shrink_herbarium_image)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "herbarium/tiny_images/NSW1055313.jpg"
 [2] "herbarium/tiny_images/NSW121207.jpg" 
 [3] "herbarium/tiny_images/NSW214616.jpg" 
 [4] "herbarium/tiny_images/NSW29246.jpg"  
 [5] "herbarium/tiny_images/NSW306564.jpg" 
 [6] "herbarium/tiny_images/NSW307215.jpg" 
 [7] "herbarium/tiny_images/NSW36860.jpg"  
 [8] "herbarium/tiny_images/NSW389387.jpg" 
 [9] "herbarium/tiny_images/NSW395530.jpg" 
[10] "herbarium/tiny_images/NSW39618.jpg"  
[11] "herbarium/tiny_images/NSW402973.jpg" 
[12] "herbarium/tiny_images/NSW403188.jpg" 
[13] "herbarium/tiny_images/NSW404127.jpg" 
[14] "herbarium/tiny_images/NSW446243.jpg" 
[15] "herbarium/tiny_images/NSW461895.jpg" 
[16] "herbarium/tiny_images/NSW570557.jpg" 
[17] "herbarium/tiny_images/NSW650052.jpg" 
[18] "herbarium/tiny_images/NSW676197.jpg" 
[19] "herbarium/tiny_images/NSW687458.jpg" 
[20] "herbarium/tiny_images/NSW702035.jpg" 
[21] "herbarium/tiny_images/NSW739455.jpg" 
[22] "herbarium/tiny_images/NSW776212.jpg" 
[23] "herbarium/tiny_images/NSW777249.jpg" </code></pre>
</div>
</div>
<p>The output here is a character vector containing names for the created files. That‚Äôs nice as a way of checking that everything worked, but I want pretty pictures! So here‚Äôs the contents of the <code>tiny_images</code> folder, but shown as the actual images rather than file names:<sup>3</sup></p>
<p><br></p>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>using 'image-only' layout</code></pre>
</div>
<div class="cell-output-display">
<div>
<div class="row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4" style="margin-left: -.2rem; margin-right: -.2rem; margin-top: 1rem; margin-bottom: 1rem; ">
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW1055313.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW1055313.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW121207.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW121207.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW214616.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW214616.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW29246.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW29246.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW306564.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW306564.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW307215.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW307215.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW36860.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW36860.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW389387.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW389387.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW395530.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW395530.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW39618.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW39618.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW402973.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW402973.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW403188.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW403188.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW404127.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW404127.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW446243.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW446243.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW461895.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW461895.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW570557.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW570557.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW650052.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW650052.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW676197.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW676197.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW687458.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW687458.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW702035.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW702035.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW739455.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW739455.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW776212.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW776212.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW777249.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW777249.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
<p>Progress!</p>
<p><br></p>
</section>
</section>
<section id="accounts-and-credentials" class="level2">
<h2 class="anchored" data-anchor-id="accounts-and-credentials">Accounts and credentials</h2>
<p>At this point it is starting to dawn on me that it would be kind of neat to create my own S3 bucket and store the tiny images there. I could make the tiny images public and then display them in this post. The National Herbarium data is released under a Creative Commons By-Attribution licence, so I‚Äôm allowed to use the images that way as long as I properly acknowledge the source‚Ä¶ which I think is fairly well covered in this post already!</p>
<p>The task I‚Äôm going to set for myself later in this post is to do exactly that, and use tools from the <strong>aws.s3</strong> package to do everything in R. However, I can‚Äôt do any of that unless I have an AWS account of my very own. The time has come for me to do that.</p>
<section id="creating-the-account" class="level3">
<h3 class="anchored" data-anchor-id="creating-the-account">Creating the account</h3>
<p>Signing up for the account turns out to be pretty easy. All I had to do was visit https://aws.amazon.com/s3/ and click on the ‚ÄúCreate an AWS Account‚Äù button shown in the image below:</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/aws_s3_signup.png" class="img-fluid" width="1221"></p>
</div>
</div>
<p><br></p>
<p>This then led me through a pretty standard sign up process. I had to provide an email address for the ‚Äúroot user‚Äù (i.e., me!), specify a password, and so on. I didn‚Äôt sign up for anything that cost money. The free tier allows you 5GB of storage for 12 months, which is fairly convenient for ‚Äúplaying around‚Äù purposes, and that‚Äôs all I‚Äôm intending to do here.</p>
</section>
<section id="creating-credentials" class="level3">
<h3 class="anchored" data-anchor-id="creating-credentials">Creating credentials</h3>
<p>The next step is to create an access key, so that R can interact with S3 using my credentials. At this point a little care is needed. It is possible to create access credentials for the root user, but that‚Äôs not a good idea. The root user has access to every AWS service, not just S3, and it‚Äôs a bad idea to give R access to any credentials that have those permissions. What I‚Äôll do here is create an an ‚ÄúIAM user‚Äù ‚Äì where ‚ÄúIAM‚Äù stands for ‚ÄúIdentity and Access Management‚Äù ‚Äì that <em>only</em> has access to my S3 storage, and the credentials I supply to R will be associated with that user. Here‚Äôs how I did that. First, I went over to the IAM console here:</p>
<p>https://us-east-1.console.aws.amazon.com/iamv2/home#/users</p>
<p>On this screen there‚Äôs an ‚Äúadd users‚Äù button that I dutifully click‚Ä¶</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_1.png" class="img-fluid" width="1451"></p>
</div>
</div>
<p><br></p>
<p>From here it‚Äôs mostly a matter of following prompts. The screenshot below shows me part way through the creation process. The IAM user has its own username, and it will be allowed programmatic access using an access key:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_2.png" class="img-fluid" width="1115"></p>
</div>
</div>
<p><br></p>
<p>When I get to the next screen it asks me to set the permissions associated with this user. I click on ‚Äúattach existing policies directly‚Äù, and then type ‚ÄúS3‚Äù into the search box. It comes up with a list of permission policies associated with S3 and I select the one I want:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_3.png" class="img-fluid" width="1055"></p>
</div>
</div>
<p><br></p>
<p>The third screen is boring. It asks for tags. I don‚Äôt give it any. I move onto the fourth screen, which turns out to be a review screen:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_4.png" class="img-fluid" width="1087"></p>
</div>
</div>
<p><br></p>
<p>Having decided I am happy with these settings, I click on the ‚Äúnext‚Äù button that isn‚Äôt actually shown in these screenshots (it‚Äôs at the bottom of the page) and it takes me to a final screen that gives me the access key ID and the secret access key:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_5.png" class="img-fluid" width="1054"></p>
</div>
</div>
<p>These are the two pieces of information I need to let R access to my S3 storage.</p>
</section>
<section id="storing-your-aws-credentials-in-r" class="level3">
<h3 class="anchored" data-anchor-id="storing-your-aws-credentials-in-r">Storing your AWS credentials in R</h3>
<p>There are several ways of storing these credentials in R. The easiest is to add the credentials to your <code>.Renviron</code> file, which you can conveniently open with the <code>edit_r_environ()</code> function from the <strong>usethis</strong> package. To get access to the account, the following lines need to be added to your <code>.Renviron</code> file:</p>
<pre><code>AWS_ACCESS_KEY_ID=&lt;your access key id&gt;
AWS_SECRET_ACCESS_KEY=&lt;your secret key&gt;</code></pre>
<p>However, if you‚Äôre going to be using the same AWS region all the time (e.g., you‚Äôre in Sydney so you tend to use <code>"ap-southeast-2"</code> rather than <code>"us-east-1"</code>), you might as well add a third line that sets your default region. That way, you won‚Äôt need to bother manually specifying the <code>region</code> argument every time you want to interact with S3: the <strong>aws.s3</strong> package will use your default. So for me, the relevant lines ended up looking like this:</p>
<pre><code>AWS_ACCESS_KEY_ID=&lt;my access key id&gt;
AWS_SECRET_ACCESS_KEY=&lt;my secret key&gt;
AWS_DEFAULT_REGION=ap-southeast-2</code></pre>
<p>After restarting R, these new settings will apply.</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW650052.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="manipulating-your-s3-storage-from-r" class="level2">
<h2 class="anchored" data-anchor-id="manipulating-your-s3-storage-from-r">Manipulating your S3 storage from R</h2>
<p>Now that I have an AWS account and credentials, I can start using the <strong>aws.s3</strong> package for more than just downloading files. I can create my own buckets, put objects into those buckets, control the access settings for those objects, and a good deal more besides. So let‚Äôs give that a go, shall we?</p>
<section id="creating-a-new-bucket" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-new-bucket">Creating a new bucket</h3>
<p>The function to create a new bucket is called <code>put_bucket()</code> and now that my credentials are set up it‚Äôs almost comically easy to use. If I want to create a bucket called <code>"tiny-herbs"</code>, this is what I do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;">put_bucket</span>(<span class="st" style="color: #20794D;">"tiny-herbs"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>That seems too easy? I am skeptical. I‚Äôm convinced that something must have gone wrong, so my first impulse is to use <code>bucket_exists()</code> to verify that it worked. Okay, so‚Ä¶ does this new bucket exist?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;">bucket_exists</span>(<span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
attr(,"x-amz-id-2")
[1] "4B8L2PauxADAbOSyFra5ra/OHwObxniV89yWTPe44PJ0TRjIOdsNQdHl1El1t0/39aSQOyJS1FE="
attr(,"x-amz-request-id")
[1] "GH35D6V4G9W945BY"
attr(,"date")
[1] "Tue, 23 Aug 2022 03:05:15 GMT"
attr(,"x-amz-bucket-region")
[1] "ap-southeast-2"
attr(,"x-amz-access-point-alias")
[1] "false"
attr(,"content-type")
[1] "application/xml"
attr(,"server")
[1] "AmazonS3"</code></pre>
</div>
</div>
<p>It does, and notice that both <code>put_bucket()</code> and <code>bucket_exists()</code> have respected my default region setting. When I called <code>put_bucket()</code>, the <strong>aws.s3</strong> package supplied the region from my default and so the bucket was created in Sydney (i.e., ‚Äúap-southeast-2‚Äù), and it did the same again when I used <code>bucket_exists()</code> to look for the buckets.</p>
<p>So what‚Äôs in the bucket? Just like I did with the National Herbarium bucket, I can use the <code>get_bucket_df()</code> function to inspect the contents of my bucket:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;">get_bucket_df</span>(<span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;">as_tibble</span>()</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 0 √ó 8
# ‚Ä¶ with 8 variables: Key &lt;chr&gt;, LastModified &lt;chr&gt;, ETag &lt;chr&gt;, Size &lt;chr&gt;,
#   Owner_ID &lt;chr&gt;, Owner_DisplayName &lt;chr&gt;, StorageClass &lt;chr&gt;, Bucket &lt;chr&gt;</code></pre>
</div>
</div>
<p>Hm. Well, yes. Of course it‚Äôs empty: I haven‚Äôt put any objects in it yet. Maybe I should do that? It does seem like a good idea!</p>
<p>But first‚Ä¶</p>
</section>
<section id="managing-access-control" class="level3">
<h3 class="anchored" data-anchor-id="managing-access-control">Managing access control</h3>
<p>One thing though‚Ä¶ is this private or public? This is governed by the Access Control List (ACL) settings. By default, S3 buckets are set to private. You can read and write to them, but no-one else has any access at all. Let‚Äôs soften that slightly, and allow anyone to read from the ‚Äútiny-herbs‚Äù bucket. I could have done that from the beginning by setting <code>acl = "public-read"</code> when I called <code>put_bucket()</code>. However, because I ‚Äúforgot‚Äù to do that earlier, I‚Äôll change it now using <code>put_acl()</code></p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-29_1fd59396c2d351c8fdf4633241ef6b52">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;">put_acl</span>(</span>
<span id="cb46-2">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>,</span>
<span id="cb46-3">  <span class="at" style="color: #657422;">acl =</span> <span class="st" style="color: #20794D;">"public-read"</span></span>
<span id="cb46-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Now everyone has read access to the bucket.<sup>4</sup></p>
</section>
<section id="adding-objects-to-your-bucket" class="level3">
<h3 class="anchored" data-anchor-id="adding-objects-to-your-bucket">Adding objects to your bucket</h3>
<p>To put an object inside my new bucket, the function I need is <code>put_object()</code>. When calling it, I need to specify the local path to the <code>file</code> that I want to upload, the name that the <code>object</code> will be assigned when it is added to the bucket, and of course the <code>bucket</code> itself. This time around, I‚Äôll also explicitly set <code>acl = "public-read"</code> to ensure that ‚Äì while only I have write access ‚Äì everyone has read access and can download the object if they want to. Because I‚Äôm going to call this repeatedly, I‚Äôll wrap all this in a helper function called <code>put_tiny_image()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">put_tiny_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">put_object</span>(</span>
<span id="cb48-3">    <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="st" style="color: #20794D;">"herbarium"</span>, <span class="st" style="color: #20794D;">"tiny_images"</span>, file),</span>
<span id="cb48-4">    <span class="at" style="color: #657422;">object =</span> file, </span>
<span id="cb48-5">    <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>,</span>
<span id="cb48-6">    <span class="at" style="color: #657422;">acl =</span> <span class="st" style="color: #20794D;">"public-read"</span></span>
<span id="cb48-7">  )</span>
<span id="cb48-8">}</span></code></pre></div>
</div>
<p>To see this in action, let‚Äôs create a vector that lists the names of all the tiny images, and then apply the <code>put_tiny_image()</code> function to the first one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">tiny_images <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="st" style="color: #20794D;">"herbarium/tiny_images"</span>)</span>
<span id="cb49-2">tiny_images[<span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;">put_tiny_image</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Okay that seems to work, so once again I‚Äôll use <strong>purrr</strong> to iterate over all the <code>tiny_images</code>, uploading them one by one into my newly-created bucket:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-32_091b93ac8aa084d7681aa0638904c615">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">tiny_images <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;">map_lgl</span>(put_tiny_image)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE</code></pre>
</div>
</div>
<p>That looks pretty good! I‚Äôm seeing nothing but <code>TRUE</code> values in the output so it looks like I‚Äôve successfully uploaded all the tiny images. Now that I‚Äôve done this, I can try calling <code>get_bucket_df()</code> again to inspect the current contents of the bucket:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;">get_bucket_df</span>(<span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;">as_tibble</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 23 √ó 8
   Key            LastModified        ETag  Size  Owner‚Ä¶¬π Owner‚Ä¶¬≤ Stora‚Ä¶¬≥ Bucket
   &lt;chr&gt;          &lt;chr&gt;               &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; 
 1 NSW1055313.jpg 2022-08-23T03:05:1‚Ä¶ "\"c‚Ä¶ 1494‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
 2 NSW121207.jpg  2022-04-22T09:08:0‚Ä¶ "\"6‚Ä¶ 1562‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
 3 NSW214616.jpg  2022-04-22T09:08:0‚Ä¶ "\"f‚Ä¶ 2041‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
 4 NSW29246.jpg   2022-04-22T09:08:0‚Ä¶ "\"e‚Ä¶ 1043‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
 5 NSW306564.jpg  2022-04-22T09:08:0‚Ä¶ "\"d‚Ä¶ 1819‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
 6 NSW307215.jpg  2022-04-22T09:08:0‚Ä¶ "\"e‚Ä¶ 1684‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
 7 NSW36860.jpg   2022-04-22T09:08:1‚Ä¶ "\"f‚Ä¶ 1962‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
 8 NSW389387.jpg  2022-04-22T09:08:1‚Ä¶ "\"d‚Ä¶ 1240‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
 9 NSW395530.jpg  2022-04-22T09:08:1‚Ä¶ "\"3‚Ä¶ 1435‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
10 NSW39618.jpg   2022-04-22T09:08:1‚Ä¶ "\"a‚Ä¶ 1028‚Ä¶ b8b231‚Ä¶ djnava‚Ä¶ STANDA‚Ä¶ tiny-‚Ä¶
# ‚Ä¶ with 13 more rows, and abbreviated variable names ¬π‚ÄãOwner_ID,
#   ¬≤‚ÄãOwner_DisplayName, ¬≥‚ÄãStorageClass</code></pre>
</div>
</div>
<p>Yay! It‚Äôs done!</p>
</section>
<section id="urls-for-objects-in-public-buckets" class="level3">
<h3 class="anchored" data-anchor-id="urls-for-objects-in-public-buckets">URLs for objects in public buckets</h3>
<p>One last thing. Because the <code>"tiny-herbs"</code> bucket is public, the objects it contains each have their own URL. To make my life a little easier, I wrote a helper function that constructs these URL:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">tiny_herb_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(object, </span>
<span id="cb55-2">                          <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"tiny-herbs"</span>,</span>
<span id="cb55-3">                          <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>) {</span>
<span id="cb55-4">  <span class="fu" style="color: #4758AB;">paste0</span>(</span>
<span id="cb55-5">    <span class="st" style="color: #20794D;">"https://"</span>, bucket, <span class="st" style="color: #20794D;">"."</span>, <span class="st" style="color: #20794D;">"s3-"</span>, </span>
<span id="cb55-6">    region, <span class="st" style="color: #20794D;">".amazonaws.com"</span>, <span class="st" style="color: #20794D;">"/"</span>, object</span>
<span id="cb55-7">  )</span>
<span id="cb55-8">}</span></code></pre></div>
</div>
<p>For example, here‚Äôs one of the URLs associated with the <code>"tiny-herbs"</code> bucket:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;">tiny_herb_url</span>(<span class="st" style="color: #20794D;">"NSW121207.jpg"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW121207.jpg"</code></pre>
</div>
</div>
<p>The images I‚Äôve been showing throughout this post aren‚Äôt the original ones from the National Herbarium data set. Rather, they‚Äôre the smaller files I stored in the <code>"tiny-herbs"</code> bucket, and the code I‚Äôve been using to display the images throughout the post looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;">tiny_herb_url</span>(<span class="st" style="color: #20794D;">"NSW121207.jpg"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-2">  knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">include_graphics</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW121207.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>At the end of all this you might have all kinds of questions. Questions like, ‚ÄúDanielle, what‚Äôs wrong with you?‚Äù and ‚ÄúDanielle, is this even your job? Aren‚Äôt you supposed to be working on Apache Arrow?‚Äù While I could write an entire novel trying to answer the first one, I think I‚Äôll skip over it and move straight onto the second on, because that‚Äôs more interesting and doesn‚Äôt require anyone to get a therapist.</p>
<p>Although this isn‚Äôt a post about Apache Arrow ‚Äì and so is not directly related to the work I do every day ‚Äì of the reasons I found myself looking into S3 in the first place is that Arrow is a tool designed to let data scientists work with very large data sets, and S3 is a tool designed to make it easy to store very large data sets. These two things go well together, so much so that the <strong>arrow</strong> R package has its own support for S3 data storage, and many of the data sets that new <strong>arrow</strong> users encounter are stored on S3. From an educational perspective (sorry ‚Äì I used to be an academic and I can‚Äôt help myself) it‚Äôs really difficult for people when they need to learn lots of things at the same time. Trying to learn how Arrow works is really hard when you‚Äôre still confused about S3. When I started learning Arrow I didn‚Äôt know anything about S3, and it was extremely frustrating to have to learn Arrow concepts with all this confusing S3 stuff floating around.</p>
<p>Hence‚Ä¶ this post. My main goal here was to talk about S3 as a topic in its own right, and how tools like <strong>aws.s3</strong> allow R users to write code that interacts with S3 data storage. But it‚Äôs very handy background knowledge to have if you‚Äôre planning to use <strong>arrow</strong> later on.</p>
<p>On top of all that, the <strong>aws.s3</strong> package has a lot more functionality that I haven‚Äôt talked about here. You can use it to copy objects from one bucket to another, and delete objects and buckets that you control. You can use it to add tagging metadata, you can use it to configure your S3 bucket as a website (yes, even with all that painful cross-origin resource sharing configuration stuff), and a good deal more besides. It‚Äôs a really nice package and I‚Äôm glad I took the time to learn it!</p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It‚Äôs deeply important to me that you read this knowing that I was singing <a href="https://www.youtube.com/watch?v=OiwDHHcHPh0"><em>Tragedy</em></a> by Steps at the time I wrote this, complete with dramatic hand gestures‚Ü©Ô∏é</p></li>
<li id="fn2"><p>I will, yet again, sigh in frustration that I have to include the <code>on.exit(gc())</code> line. My limited understanding is as follows. The <strong>magick</strong> package provides wrappers to the C++ ImageMagick library, and none of the image manipulation is actually done in R. The objects that get ‚Äúloaded‚Äù are just pointers, and exiting the <code>shrink_herbarium_image()</code> function doesn‚Äôt necessarily cause R to release memory. So whenever I‚Äôm iterating over many images, R doesn‚Äôt release old images from the magick resource cache unless I trigger the garbage collection with <code>gc()</code>. This feels inelegant but I haven‚Äôt had time to find a better solution.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>I‚Äôm using the <strong>bs4cards</strong> package to display the images in this layout. Oh, and if you click on any image you‚Äôll see a higher resolution version of that image.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>You can specify different ACL settings for each object, if you want to. The <code>put_acl()</code> function also has an <code>object</code> argument that allows you to control the setting for a single object in a bucket.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Using {Amazon} {S3} with {R}},
  date = {2022-03-17},
  url = {https://blog.djnavarro.net/using-aws-s3-in-r},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúUsing Amazon S3 with R.‚Äù</span> March 17,
2022. <a href="https://blog.djnavarro.net/using-aws-s3-in-r">https://blog.djnavarro.net/using-aws-s3-in-r</a>.
</div></div></section></div> ]]></description>
  <category>Amazon S3</category>
  <guid>https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/index.html</guid>
  <pubDate>Wed, 16 Mar 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/preview-image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data types in Arrow and R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<blockquote class="blockquote">
<p>Manuals for translating one language into another can be set up in divergent ways, all compatible with the totality of speech dispositions, yet incompatible with one another <br> &nbsp; &nbsp; ‚Äì William Van Orman Quine, 1960, <a href="https://en.wikipedia.org/wiki/Word_and_Object">Word and Object</a></p>
</blockquote>
<p><br></p>
<p>At the 2018 useR! conference in Brisbane, Roger Peng gave a fabulous keynote talk on <a href="https://www.youtube.com/watch?v=5033jBHFiHE">teaching R to new users</a> in which he provided an overview of the history of the language and how it is used in the broader community. One thing that stood out to me in his talk ‚Äì and I‚Äôve seen reflected in other data ‚Äì is that R is unusual as a language because it‚Äôs not designed primarily for programmers. Software engineering practices have now become widespread in the R community, and that‚Äôs a good thing. Nevertheless, a very large proportion of the R community don‚Äôt have a traditional computer science background ‚Äì and that‚Äôs okay! In fact, given the goals of the language that‚Äôs a good thing too.</p>
<p>R is a language designed with a practical goal in mind: it is a tool for statistical programming and data analysis. Because of this design focus, R users tend to care most deeply about <em>the tasks that make up their day to day jobs</em>. Few of us care about the <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754</a> standard for encoding floating point numbers. R users are not typically interested in the <a href="https://en.wikipedia.org/wiki/Endianness">big-endian/little-endian</a> distinction. The purpose of R as a high level statistical programming environment is to abstract away from these things, and to allow users to focus on data cleaning, wrangling, and visualisation. R tries to help you get to your data as easily as possible, build models for your data, report those models reliably, and so on. Because that‚Äôs the job.</p>
<p>But.</p>
<p>There‚Äôs always a ‚Äúbut‚Äù, isn‚Äôt there?</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_46_4699.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<aside>
<br>All images in this post are my own, including the artwork, and though I haven‚Äôt formally released the art as part of series (and hence not specified a licence for the series as a whole), these specific pieces are covered by the same CC-BY licence that applies to the rest of the post
</aside>
<p><br><br></p>
<p>One of the huge changes in the data science ecosystem in recent years is the change in scale of our data sets. Data sets can now easily encompass billions of rows, and surpass the ability of your machine (and R) to hold in memory. Another huge change in the ecosystem is the proliferation of tools. Data sets have to be passed from one system to another, and when those data sets are large, problems follow. <a href="https://arrow.apache.org/">Apache Arrow</a> solves these problems by providing a multi-language toolbox for data exchange and data analysis. It‚Äôs a toolbox designed for a big data environment, and a many-language environment. From the perspective of an R user, it supplies the <strong>arrow</strong> package that provides an interface to Apache Arrow, and through that package allows you to have access to all the other magic that Arrow exposes. It‚Äôs an extremely powerful toolbox‚Ä¶ but to use it effectively you do need to learn more of those low-level concepts that we as R users like to skim over.</p>
<aside>
In this post I use boldfaced text to denote the names of R packages such as <strong>arrow</strong> and <strong>dplyr</strong>, as well as C++ library such as <strong>libarrow</strong>
</aside>
<p>This post is an attempt to fill that gap for you! It‚Äôs a long form post, closer to a full length article than a typical blog. My goals in this post are to:</p>
<ul>
<li>Walk you through (some of!) the low level implementation details for basic data types: how R represents an integer or a numeric, or a date/time object, etc</li>
<li>Discuss how and why Arrow and R sometimes make different choices in these details</li>
<li>Show you how the <strong>arrow</strong> package translates between R and Arrow</li>
<li>Include lots of pretty art, because lets face it, this isn‚Äôt an exciting topic!</li>
</ul>
<p>This post isn‚Äôt intended to be read in isolation. It‚Äôs the third part of a series I have been writing on Apache Arrow and R, and it probably works best if you‚Äôve read the previous two. I‚Äôve made every effort to make this post self-contained and self-explanatory, but it does assume you‚Äôre comfortable in R and have a little bit of knowledge about what the <strong>arrow</strong> package does. If you‚Äôre not at all familiar with <strong>arrow</strong>, you may find it valuable to read the first post in the series, which is a <a href="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/">getting started post</a>, and possibly the second one that talks about the <a href="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/">arrow dplyr backend</a>.</p>
<p>Still keen to read? I haven‚Äôt scared you off?</p>
<p>No?</p>
<p>Fabulous! Then read on, my loves!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'arrow'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:utils':

    timestamp</code></pre>
</div>
</div>
<div class="cell">

</div>
<p><br></p>
<section id="regarding-magic" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="regarding-magic">Regarding magic</h2>
<p>Consider this piece of magic. I have a csv file storing a data set. I import the data set into R using whatever my favourite csv reader function happens to be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">magicians <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv_arrow</span>(<span class="st" style="color: #20794D;">"magicians.csv"</span>)</span>
<span id="cb8-2">magicians</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 6
   season episode title                                air_date   rating viewers
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt;
 1      1       1 Unauthorized Magic                   2015-12-16    0.2    0.92
 2      1       2 The Source of Magic                  2016-01-25    0.4    1.11
 3      1       3 Consequences of Advanced Spellcasti‚Ä¶ 2016-02-01    0.4    0.9 
 4      1       4 The World in the Walls               2016-02-08    0.3    0.75
 5      1       5 Mendings, Major and Minor            2016-02-15    0.3    0.75
 6      1       6 Impractical Applications             2016-02-22    0.3    0.65
 7      1       7 The Mayakovsky Circumstance          2016-02-29    0.3    0.7 
 8      1       8 The Strangled Heart                  2016-03-07    0.3    0.67
 9      1       9 The Writing Room                     2016-03-14    0.3    0.71
10      1      10 Homecoming                           2016-03-21    0.3    0.78
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>
<p>Then I decide to ‚Äúcopy the data into Arrow‚Äù.<sup>1</sup> I do that in a very predictable way using the <code>arrow_table()</code> function supplied by the <strong>arrow</strong> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">arrowmagicks <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(magicians)</span>
<span id="cb10-2">arrowmagicks</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
65 rows x 6 columns
$season &lt;int32&gt;
$episode &lt;int32&gt;
$title &lt;string&gt;
$air_date &lt;date32[day]&gt;
$rating &lt;double&gt;
$viewers &lt;double&gt;</code></pre>
</div>
</div>
<p>This is exactly the output I should expect, but the longer I think about it the more it seems to me that something quite remarkable is going on. Some magic is in play here, and I want to know how it works.</p>
<p>To understand why I‚Äôm so curious, consider the two objects I now have. The <code>magicians</code> data set is a <em>data frame</em> (a <em>tibble</em>, technically) stored in R. The <code>arrowmagicks</code> data set, however, is a pointer to a data structure stored in Arrow. That data structure is a <em>Table</em> object. <em>Table</em> objects in Arrow are roughly analogous to <em>data frames</em> ‚Äì both represent tabular data with columns that may be of different types ‚Äì but they are not the same. The columns of a <em>Table</em> are built from objects called <em>ChunkedArrays</em> that are in turn constructed from <em>Arrays</em>, and those <em>Arrays</em> can contain <em>Scalar</em> objects. In other words, to move data from one language to another an act of translation is required, illustrated below:</p>
<aside>
It‚Äôs not standard, but since this is a post about data types, I‚Äôll italicise the names of data types in both R and Arrow (e.g., <i>data.frame</i>, <i>Table</i>). It gets a bit tiresome, but I think it‚Äôs helpful
</aside>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/data-types-overview.png" class="img-fluid figure-img" width="2135"></p>
<p></p><figcaption class="figure-caption">A miniature translation guide. On the left a data frame in R is shown: it is comprised of three columns. Each columns is an R vector. We use the term ‚Äòelement‚Äô to refer to any length-1 constituent of a vector, even though it isn‚Äôt really a distinct object in its own right. On the right is a Table in Arrow: it too is comprised of three columns, encoded as ChunkedArrays. Each ChunkedArray is comprised of one or more Arrays, and each Array contains one or more Scalars, which (unlike elements of R vectors) are distinct objects. The data structure that translates one into the other is called a Schema.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>In this post I‚Äôm not going to talk much about the difference between <em>Arrays</em> and <em>ChunkedArrays</em>, or why Arrow organises <em>Tables</em> this way (that will be the topic of a later post). For now it‚Äôs enough to recognise that Arrow does have this additional structure: the <em>Table</em> data type in Arrow is not equivalent to the <em>data frame</em> class in R, so a little work is required to map one to the other.</p>
<p>A similar story applies when we look at the contents of the data set. The translation process doesn‚Äôt just apply to the ‚Äúcontainer‚Äù object (i.e., the <em>data frame</em> in R and the <em>Table</em> in Arrow), it also applies to the values that the object contains. If we look at the how the columns of <code>magicians</code> and <code>arrowmagicks</code> are labelled, we see evidence of this translation. The <em>integer</em> columns in R have been mapped to <em>int32</em> columns in Arrow, <em>Date</em> columns in R become <em>date32</em> columns in Arrow, and so on.</p>
<aside>
Variable names like <code>arrowmagicks</code> and function calls like <code>arrow_table()</code> are shown in monospace typewriter font
</aside>
<p>There‚Äôs quite a lot of complexity to the translation process, yet it all seems to work seamlessly, and it works both ways. I can pull the <code>arrowmagicks</code> data back into R and recover the original data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">collect</span>(arrowmagicks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 6
   season episode title                                air_date   rating viewers
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt;
 1      1       1 Unauthorized Magic                   2015-12-16    0.2    0.92
 2      1       2 The Source of Magic                  2016-01-25    0.4    1.11
 3      1       3 Consequences of Advanced Spellcasti‚Ä¶ 2016-02-01    0.4    0.9 
 4      1       4 The World in the Walls               2016-02-08    0.3    0.75
 5      1       5 Mendings, Major and Minor            2016-02-15    0.3    0.75
 6      1       6 Impractical Applications             2016-02-22    0.3    0.65
 7      1       7 The Mayakovsky Circumstance          2016-02-29    0.3    0.7 
 8      1       8 The Strangled Heart                  2016-03-07    0.3    0.67
 9      1       9 The Writing Room                     2016-03-14    0.3    0.71
10      1      10 Homecoming                           2016-03-21    0.3    0.78
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>
<p>In this example the translation back and forth ‚Äújust works‚Äù. You really don‚Äôt have to think too much about the subtle differences in how Arrow and R ‚Äúthink about the world‚Äù and how their data structures are organised. And in general that‚Äôs what we want in a multi-language toolbox: we want the data analyst to be thinking about the data, not the cross-linguistic subtleties of the data structures!</p>
<p>That being said, it‚Äôs also valuable to give the data analyst flexibility. And that means we‚Äôre going to need to talk about <em>Schemas</em>. As shown in the ‚Äútranslation diagram‚Äù above, <em>Schemas</em> are the data structure <strong>arrow</strong> uses to govern the translation between R and Arrow, and since I‚Äôm going to be talking about data ‚Äúon the R side‚Äù and data ‚Äúon the Arrow side‚Äù a lot, it will be helpful to have some visual conventions to make it a little clearer. Throughout the post you‚Äôll see diagrams showing the default mappings that the <strong>arrow</strong> package uses when converting data columns from R to Arrow and vice versa. In each case I‚Äôll show R data types on the left hand side (against a blue background) and Arrow data types on the right hand side (against an orange background), like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/visual-convention.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Illustration of the graphical convention used in the later diagrams, showing R on the left side (against a blue background) and Arrow on the right side (against an orange background).</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="defining-schemas" class="level2">
<h2 class="anchored" data-anchor-id="defining-schemas">Defining Schemas</h2>
<p>The <strong>arrow</strong> package makes very sensible default choices about how to translate an R data structure into an Arrow data structure, but those choices can never be more than defaults because of the fundamental fact that the languages are inherently different. The quote about the <a href="https://en.wikipedia.org/wiki/Indeterminacy_of_translation">indeterminacy of translation</a> at the top of this post was originally written about natural languages, but I think it applies in programming too. There‚Äôs no single rulebook that tells you how to translate between R and Arrow: there can‚Äôt be.<sup>2</sup></p>
<p>Suppose that I knew that there would in fact be a ‚ÄúSeason 5.1648‚Äù coming, consisting of a single episode that would air not only on a specific date, but at a specific time that would ‚Äì for some bizarre reason<sup>3</sup> ‚Äì be important to encode in the data. Knowing that this new data point is coming, I‚Äôd perhaps want my Arrow data to encode <code>season</code> as a numeric variable, and I‚Äôd need to encode the <code>air_date</code> field using a date type that implicitly encodes time of day. I can do this with the <code>schema()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">translation <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">schema</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;">season =</span> <span class="fu" style="color: #4758AB;">float64</span>(), <span class="co" style="color: #5E5E5E;"># not the default</span></span>
<span id="cb14-3">  <span class="at" style="color: #657422;">episode =</span> <span class="fu" style="color: #4758AB;">int32</span>(),</span>
<span id="cb14-4">  <span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">utf8</span>(), </span>
<span id="cb14-5">  <span class="at" style="color: #657422;">air_date =</span> <span class="fu" style="color: #4758AB;">date64</span>(), <span class="co" style="color: #5E5E5E;"># not the default</span></span>
<span id="cb14-6">  <span class="at" style="color: #657422;">rating =</span> <span class="fu" style="color: #4758AB;">float64</span>(),</span>
<span id="cb14-7">  <span class="at" style="color: #657422;">viewers =</span> <span class="fu" style="color: #4758AB;">float64</span>()</span>
<span id="cb14-8">)</span></code></pre></div>
</div>
<p>Now I can use my schema to govern the translation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">arrowmagicks2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(magicians, <span class="at" style="color: #657422;">schema =</span> translation)</span>
<span id="cb15-2">arrowmagicks2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
65 rows x 6 columns
$season &lt;double&gt;
$episode &lt;int32&gt;
$title &lt;string&gt;
$air_date &lt;date64[ms]&gt;
$rating &lt;double&gt;
$viewers &lt;double&gt;</code></pre>
</div>
</div>
<p>The output may not make complete sense at this point, but hopefully the gist of what I‚Äôve done should be clear. The <code>season</code> is no longer stored as an integer (it‚Äôs now a numeric type), and the <code>air_date</code> no longer uses ‚Äúday‚Äù as the unit of encoding, it uses ‚Äúms‚Äù (i.e., millisecond). I‚Äôve accomplished my goals. Yay!</p>
<p>This is of course a toy example, as are all the other examples you‚Äôll encounter in this post. But the underlying issues are important ones!</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_49_4937.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="why-mapping-languages-is-hard" class="level2">
<h2 class="anchored" data-anchor-id="why-mapping-languages-is-hard">Why mapping languages is hard</h2>
<!--

> BEASTS, may be distinguished by their several shapes, properties, uses, food, their tameness or wildness, etc. into such as are either
> 
> - VIVIPAROUS; producing living young.
> 
>     - WHOLE FOOTED, the *soles* of whose *feet* is are undivided, being used chiefly for *Carriage*. I.
>     - CLOVEN FOOTED. II. <br>
>       *Clawed*, or *multifidous*; the end of whose *feet* is branched out into *toes*; whether
>       
>         - NOT RAPACIOUS. III.
>         - RAPACIOUS; living upon the prey of other *Animals*; having generally *six short pointed* incisors, or *cutting teeth*, and *two long fangs* to hold their prey; whether the
>         
>             - CAT-KIND; having a *roundish head*. IV.
>             - DOG-KIND; whose *heads* are *more oblong*. V.
>             
> - OVIPAROUS; breeding *Eggs*. VI.
>
> -- John Wilkins, 1668, [An Essay Towards a Real Character, and a Philosophical Language](https://www.google.com.au/books/edition/_/BCCtZjBtiEYC?hl=en&gbpv=1)

-->
<p>Organising the world into concepts (or data structures) is hard.<sup>4</sup> We define <a href="https://en.wikipedia.org/wiki/Ontology_(information_science)">ontologies</a> that impose order on a chaotic world, but those structures are rarely adequate to describe the world as it is. While doing background research for this post I spent a little time reading various sections from <a href="https://www.google.com.au/books/edition/_/BCCtZjBtiEYC?hl=en&amp;gbpv=1">An Essay Towards a Real Character, and a Philosophical Language</a>, a monograph written by John Wilkins in 1668 that makes a valiant (but doomed‚Ä¶ oh so doomed) attempt to organise all the categories of things and propose a mechanism by which we could describe them within a single universal language. The classification systems he came up with were‚Ä¶ not great. For example, he divided BEASTS into two categories: VIVIPAROUS beasts are those that bear live young, whereas OVIPAROUS beasts are those that lay eggs. The viviparous ones could be subdivided into WHOLE-FOOTED ones and CLOVEN-FOOTED ones. The cloven-footed beasts could be subdivided into those that were RAPACIOUS and those that were not. RAPACIOUS types could be of the CAT-KIND or the DOG-KIND.</p>
<p>Suffice it to say the poor man had never encountered a kangaroo.</p>
<p>The problem with trying to construct universal ontologies is that these things are made by humans, and humans have a perspective that is tied to their own experience and history. As a 17th century English gentleman, Wilkins saw the world in a particular way, and the structure of the language he tried to construct reflected that fact.</p>
<p>I am of course hardly the first person to notice this. In 1952 the Argentinian author Jorge Luis Borges published a wonderful essay called <a href="https://ccrma.stanford.edu/courses/155/assignment/ex1/Borges.pdf">The Analytical Language of John Wilkins</a> that both praises Wilkins‚Äô ambition and then carefully illustrates why it is necessarily doomed to fail. Borges‚Äô essay describes a classification system from an fictitious ‚ÄúCelestial Emporium of Benevolent Knowledge‚Äù which carves up the beasts as follows:</p>
<blockquote class="blockquote">
<p>In its remote pages it is written that the animals are divided into: (a) belonging to the emperor, (b) embalmed, (c) tame, (d) sucking pigs, (e) sirens, (f) fabulous, (g) stray dogs, (h) included in the present classification, (i) frenzied, (j) innumerable, (k) drawn with a very fine camelhair brush, (l) et cetera, (m) having just broken the water pitcher, (n) that from a long way off look like flies</p>
</blockquote>
<p>Now, it‚Äôs pretty unlikely that any human language would produce a classification system quite as chaotic as Borges‚Äô fictional example, but the point is well made. Actual classification systems used in different languages and cultures are very different to one another and often feel very alien when translated. It‚Äôs a pretty fundamental point, and I think it applies to programming languages too.<sup>5</sup> Every language carries with it a set of assumptions and structures that it considers ‚Äúnatural‚Äù, and translation across the boundaries between languages is necessarily a tricky business.<sup>6</sup></p>
<p><br></p>
</section>
<section id="a-little-bit-of-big-picture" class="level2">
<h2 class="anchored" data-anchor-id="a-little-bit-of-big-picture">A little bit of big picture</h2>
<p>Before we get to ‚Äúmoving data around‚Äù part it‚Äôs helpful to step back a little and recognise that R and Arrow are designed quite differently. For starters, the <strong>libarrow</strong> library to which the <strong>arrow</strong> package provides bindings is written in C++, and C++ is itself a different kind of language than R. And in a sense, that‚Äôs actually the natural place to start because it influences a lot of things in the design of <strong>arrow</strong>.</p>
<p><br></p>
<section id="object-oriented-programming-in-arrow" class="level3">
<h3 class="anchored" data-anchor-id="object-oriented-programming-in-arrow">Object oriented programming in <strong>arrow</strong></h3>
<p>One of ways in which C++ and R differ is in how each language approaches object oriented programming (OOP). The approach taken in C++ is an <a href="https://adv-r.hadley.nz/oo.html">encapsulated OOP</a> model that is common to many programming languages: methods belong to objects. Anyone coming from outside R is probably most familiar with this style of OOP.</p>
<p>The approach taken in R is‚Ä¶ chaotic. R has several different OOP systems that have different philosophies, and each system has its own strengths and weaknesses.<sup>7</sup> The most commonly used system is S3, which is a <a href="https://adv-r.hadley.nz/oo.html">functional OOP</a> model: methods belong to generic functions like <code>print()</code>. Most R users will be comfortable with S3 because it‚Äôs what we see most often. That being said, there are several other systems out there, some of which adopt the more conventional encapsulated OOP paradigm. One of the most popular ones is <a href="https://r6.r-lib.org/">R6</a>, and it works more like the OOP systems seen in other languages.</p>
<p>The <strong>arrow</strong> package uses both S3 and R6, but it uses them for quite different things. Whenever <strong>arrow</strong> does something in an ‚ÄúR-native‚Äù way, S3 methods get used a lot. For example, in my earlier post on <a href="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/">dplyr bindings for Arrow</a> I talked about how <strong>arrow</strong> supplies a <strong>dplyr</strong> engine: this works in part by supplying S3 methods for various <strong>dplyr</strong> functions that are called whenever a suitable Arrow object gets passed to <strong>dplyr</strong>. The interface between <strong>arrow</strong> and <strong>dplyr</strong> uses S3 because this context is ‚ÄúR like‚Äù. However, this isn‚Äôt a post about that aspect of <strong>arrow</strong>, so we won‚Äôt need to talk about S3 again in this post.</p>
<p>However, <strong>arrow</strong> has a second task, which is to interact with <strong>libarrow</strong>, the Arrow C++ library. Because the data structures there all use encapsulated OOP as is conventional in C++, it is convenient to adhere to those conventions within the <strong>arrow</strong> package. Whenever <strong>arrow</strong> has to interact with <strong>libarrow</strong>, it‚Äôs useful to be as ‚ÄúC++ like‚Äù as possible, and this in turn means that the interface between <strong>arrow</strong> and <strong>libarrow</strong> is accomplished using R6. So we will be seeing <em>R6</em> objects appear quite often in this post.<sup>8</sup></p>
<p><br></p>
</section>
<section id="table-chunkedarray-and-scalar" class="level3">
<h3 class="anchored" data-anchor-id="table-chunkedarray-and-scalar">Table, ChunkedArray, and Scalar</h3>
<p>You may be wondering what I mean when I say that <em>R6</em> objects are used to supply the interface between R and Arrow. I‚Äôll try to give some concrete examples. Let‚Äôs think about the <code>arrow_table()</code> function. At the start of the post I used this function to translate an R data frame into an Arrow <em>Table</em>, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">arrow_table</span>(magicians)</span></code></pre></div>
</div>
<p>This is a natural way of thinking about things in R, but the <code>arrow_table()</code> function doesn‚Äôt actually do the work. It‚Äôs actually just a wrapper function. Within the <strong>arrow</strong> package is an R6 class generator object called <code>Table</code>,<sup>9</sup> and its job is to create tables, modify tables, and so on. You can create a table by using the <code>create()</code> method for <code>Table</code>. In other words, instead of calling <code>arrow_table()</code> I could have done this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">Table<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(magicians)</span></code></pre></div>
</div>
<p>and I would have ended up with the same result.</p>
<p>The same pattern appears throughout the <strong>arrow</strong> package. When I used the <code>schema()</code> function earlier, the same pattern was in play. There is an R6 class generator called <code>Schema</code>, and it too has a <code>create()</code> method. I could have accomplished the same thing by calling <code>Schema$create()</code>.</p>
<p>I could go on like this for some time. Though I won‚Äôt talk about all of them in this post, there are R6 objects for <code>Dataset</code>, <code>RecordBatch</code>, <code>Array</code>, <code>ChunkedArray</code>, <code>Scalar</code>, and more. Each of these provides an interface to a data structure in Arrow, and while you can often solve all your problems without ever interacting with these objects, it‚Äôs very handy to know about them and feel comfortable using them. As the post goes on, you‚Äôll see me doing that from time to time.</p>
<p>But enough of that! It‚Äôs time to start moving data around‚Ä¶</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4893.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="logical-types" class="level2">
<h2 class="anchored" data-anchor-id="logical-types">Logical types</h2>
<p>At long last we arrive at the point where I‚Äôm talking about the data values themselves, and the simplest kind of data to talk about are those used to represent truth values. In R, these are called <em>logical</em> data and can take on three possible values: <code>TRUE</code> and <code>FALSE</code> are the two truth values, and <code>NA</code> is used to denote missing data.<sup>10</sup> In a moment I‚Äôll show you how to directly pass individual values from R to Arrow, but for the moment let‚Äôs stick to what we know and pass the data across as part of a tabular data structure. Here‚Äôs a tiny <em>tibble</em>, with one column of <em>logical</em> values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb19-2">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 1
  values
  &lt;lgl&gt; 
1 TRUE  
2 FALSE 
3 NA    </code></pre>
</div>
</div>
<p>We‚Äôre going to pass this across to Arrow using <code>arrow_table()</code> but before we do let‚Äôs talk about what we expect to happen when the data arrive at the other side.</p>
<p>In this case, it‚Äôs quite straightforward. Arrow has a <em>boolean</em> type that has truth values <code>true</code> and <code>false</code> that behave the same way as their cousins in R. Just like R, Arrow allows missing values, though they‚Äôre called <code>null</code> values in Arrow. Unlike basically every other example we‚Äôre going to see in this post, this one is straightforward because the mapping is perfect. Unless you do something to override it, the <strong>arrow</strong> package will map an R <em>logical</em> to an Arrow <em>boolean</em> and vice versa. Here‚Äôs the diagram I use to describe it:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/logical-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for logical types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Seems to make sense, right? So let‚Äôs stop talking about it and create the corresponding <em>Table</em> in Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(dat)</span>
<span id="cb21-2">tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
3 rows x 1 columns
$values &lt;bool&gt;</code></pre>
</div>
</div>
<p>Hm. Okay that‚Äôs a little underwhelming as output goes? I‚Äôd like to see the actual values please. Happily the <strong>arrow</strong> package supplies a <code>$</code> operator for <em>Table</em> objects so we can extract an individual column from <code>tbl</code> the same way we can from the original R object <code>dat</code>. Let‚Äôs try that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">tbl<span class="sc" style="color: #5E5E5E;">$</span>values</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    true,
    false,
    null
  ]
]</code></pre>
</div>
</div>
<p>The output looks a little different to what we‚Äôd get when printing out a single column of a <em>tibble</em> (or <em>data frame</em>), but it‚Äôs pretty clear that we‚Äôve extracted the right thing. A single column inside an Arrow <em>Table</em> is stored as a <em>ChunkedArray</em>, so this looks right.</p>
<p>Yay us!</p>
<p>At this point, it‚Äôs handy to remember that the <code>arrow_table()</code> function that I used to move the data into Arrow is really just a wrapper that allows you to access some of the <code>Table</code> functionality without having to think about R6 too much. I also mentioned there‚Äôs a class generator called <code>ChunkedArray</code> object and a <code>chunked_array()</code> wrapper function. In hindsight, I probably didn‚Äôt need to bother creating the <em>tibble</em> and porting that over as a <em>Table</em>. I could have created a <em>logical vector</em> in R and port that over as a <em>ChunkedArray</em> directly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">values <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;">chunked_array</span>(values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    true,
    false,
    null
  ]
]</code></pre>
</div>
</div>
<p>That‚Äôs a cleaner way of doing things. If you want a <em>Table</em>, use <code>Table</code> and its wrappers. If you want a <em>ChunkedArray</em>, use <code>ChunkedArray</code> and its wrappers. There‚Äôs no need to over-complicate things.</p>
<p>Speaking of which‚Ä¶ later in the post, I‚Äôll often want to send single values to Arrow. In those cases I don‚Äôt want to create a <em>ChunkedArray</em>, or even the simpler unchunked <em>Array</em> type. What I want to pass is a <em>Scalar</em>.</p>
<p>It‚Äôs worth unpacking this a little. Unlike some languages, R doesn‚Äôt really make a strong distinction between ‚Äúvectors‚Äù and ‚Äúscalars‚Äù: an R ‚Äúscalar‚Äù is just a vector of length one. Arrow is stricter, however. A <em>ChunkedArray</em> is a container object with one or more <em>Arrays</em>, and an <em>Array</em> is also a container object with one or more <em>Scalars</em>. If it helps, you can think of it a little bit like working with <em>lists</em> in R: if I have a list <code>lst</code>, then <code>lst[1]</code> is still a list. It doesn‚Äôt return the contents of the list. If I want to extract the contents I have to use <code>lst[[1]]</code> to pull them out. Arrow <em>Arrays</em> contain <em>Scalars</em> in a fashion that we would call ‚Äúlist-like‚Äù in R.</p>
<p>In any case, the important thing to recognise is that <strong>arrow</strong> contains a class generator object called <code>Scalar</code>, and it works the same way as the other ones. The one difference is that there aren‚Äôt any wrapper functions for <code>Scalar</code>, so I‚Äôll have to use <code>Scalar$create()</code> directly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">boolean</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
true</code></pre>
</div>
</div>
<p>In this example I didn‚Äôt really need to explicitly specify that I wanted to import the data as <code>type = boolean()</code>. The value <code>TRUE</code> is an R <em>logical</em>, and the <strong>arrow</strong> default is to map <em>logicals</em> onto <em>booleans</em>. I only included it here because I wanted to call attention to the <code>type</code> argument. Any time that you want to import data as a non-default type, you need to specify the <code>type</code> argument. If you look at the list of <a href="https://arrow.apache.org/docs/dev/r/reference/data-type.html">Apache Arrow data types</a> on the <strong>arrow</strong> documentation page, you‚Äôll see quite a lot of options. For now, the key thing to note is that the <code>type</code> argument expects you to call one of these functions.</p>
<p>Anyway, that‚Äôs everything I had to say about <em>logicals</em>. Before moving on though, I‚Äôm going to write my own wrapper function, and define <code>scalar()</code> as an alias for <code>Scalar$create()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">scalar <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, <span class="at" style="color: #657422;">type =</span> <span class="cn" style="color: #8f5902;">NULL</span>) {</span>
<span id="cb29-2">  Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(x, type)</span>
<span id="cb29-3">}</span></code></pre></div>
</div>
<p>The main reason I‚Äôm doing that is for convenience, because in this post I‚Äôm actually going to need this wrapper function a lot. So I should probably check‚Ä¶ does it work?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">scalar</span>(<span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
true</code></pre>
</div>
</div>
<p>Awesome!</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4897.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="integer-types" class="level2">
<h2 class="anchored" data-anchor-id="integer-types">Integer types</h2>
<p>When translating R logicals to Arrow booleans, there aren‚Äôt a lot of conceptual difficulties. R has one data structure and Arrow has one data structure, and they‚Äôre basically identical. This is easy. Integers, however, are a little trickier because there‚Äôs no longer an exact mapping between the two languages. Base R provides one <em>integer</em> type, but Arrow provides eight distinct integer types that it inherits from C++. As a consequence it will no longer be possible to provide one-to-one mappings between R and Arrow, and some choices have to be made. As we‚Äôll see in this section, the <strong>arrow</strong> package tries very hard to set sensible default choices, and in most cases these will work seamlessly. It‚Äôs not something you actually have to think about much. But, as my dear friend Dan Simpson<sup>11</sup> reminds me over and over with all things technical, <a href="https://statmodeling.stat.columbia.edu/2022/03/02/god-is-present-in-the-sweeping-gestures-but-the-devil-is-in-the-details/">‚ÄúGod is present in the sweeping gestures but the Devil is in the details‚Äù</a>.</p>
<p>It is wise to look carefully at the details, so let‚Äôs do that.</p>
<p><br></p>
<section id="arrow-eight-types-of-integer" class="level3">
<h3 class="anchored" data-anchor-id="arrow-eight-types-of-integer">[Arrow] Eight types of integer</h3>
<p>To make sense of the different types, it helps to take a moment to think about how integers are represented in a binary format. Let‚Äôs suppose we allocate 8 bits to specify an integer. If we do that, then there are <img src="https://latex.codecogs.com/png.latex?2%5E8%20=%20256"> unique binary patterns we can create with these bits. Because of this, there is a fundamental constraint: no matter how we choose to set it up, 8-bit integers can only represent 256 distinct numbers. Technically, we could choose any 256 numbers we like, but in practice there are only two schemes used for 8-bit integers: ‚Äúunsigned‚Äù 8-bit integers (<em>uint8</em>) use those bits to represent integers from 0 to 255, whereas ‚Äúsigned‚Äù 8-bit integers (<em>int8</em>) can represent integers from -128 to 127.</p>
<p>More generally, an unsigned n-bit integer can represent integers from 0 to <img src="https://latex.codecogs.com/png.latex?2%5En%20-%201">, whereas a signed n-bit integer can represent integers from <img src="https://latex.codecogs.com/png.latex?-2%5E%7Bn-1%7D"> to <img src="https://latex.codecogs.com/png.latex?2%5E%7Bn-1%7D%20-%201">. Here‚Äôs what that looks like for all the integer types supported by Arrow:</p>
<table class="table">
<colgroup>
<col style="width: 23%">
<col style="width: 12%">
<col style="width: 31%">
<col style="width: 31%">
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: right;">Name</th>
<th style="text-align: right;">Smallest Value</th>
<th style="text-align: right;">Largest Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>8 bit unsigned</td>
<td style="text-align: right;"><em>uint8</em></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">255</td>
</tr>
<tr class="even">
<td>16 bit unsigned</td>
<td style="text-align: right;"><em>uint16</em></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">65535</td>
</tr>
<tr class="odd">
<td>32 bit unsigned</td>
<td style="text-align: right;"><em>uint32</em></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4294967295</td>
</tr>
<tr class="even">
<td>64 bit unsigned</td>
<td style="text-align: right;"><em>uint64</em></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">18446744073709551615</td>
</tr>
<tr class="odd">
<td>8 bit signed</td>
<td style="text-align: right;"><em>int8</em></td>
<td style="text-align: right;">-128</td>
<td style="text-align: right;">127</td>
</tr>
<tr class="even">
<td>16 bit signed</td>
<td style="text-align: right;"><em>int16</em></td>
<td style="text-align: right;">-32768</td>
<td style="text-align: right;">32767</td>
</tr>
<tr class="odd">
<td>32 bit signed</td>
<td style="text-align: right;"><em>int32</em></td>
<td style="text-align: right;">-2147483648</td>
<td style="text-align: right;">2147483647</td>
</tr>
<tr class="even">
<td>64 bit signed</td>
<td style="text-align: right;"><em>int64</em></td>
<td style="text-align: right;">-9223372036854775808</td>
<td style="text-align: right;">9223372036854775807</td>
</tr>
</tbody>
</table>
<p><br></p>
</section>
<section id="r-one-integer-class" class="level3">
<h3 class="anchored" data-anchor-id="r-one-integer-class">[R] One integer class</h3>
<p>On the R side, the <em>integer</em> type supplied by base R is a 32 bit signed integer, and has a natural one-to-one mapping to the Arrow <em>int32</em> type. Because of this, the <strong>arrow</strong> default is to convert an R <em>integer</em> to an Arrow <em>int32</em> and vice versa. Here‚Äôs an example. I‚Äôve been watching <a href="https://en.wikipedia.org/wiki/Snowpiercer_(TV_series)"><em>Snowpiercer</em></a> lately, and the train is currently 1029 cars long so let‚Äôs pass the integer <code>1029L</code> from R over to Arrow</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">snowpiercer <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(1029L)</span>
<span id="cb32-2">snowpiercer</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
1029</code></pre>
</div>
</div>
<p>Let‚Äôs inspect the <code>type</code> field of the <code>snowpiercer</code> object in order to determine what type of object has arrived in Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">snowpiercer<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Int32
int32</code></pre>
</div>
</div>
<p>We can apply the S3 generic function <code>as.vector()</code> to <code>snowpiercer</code> to pull the data back into R,<sup>12</sup> and hopefully it comes as no surprise to see that we get the same number back:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">as.vector</span>(snowpiercer)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1029</code></pre>
</div>
</div>
<p>We can take this one step further to check that the returned object is actually an R <em>integer</em> by checking its <code>class()</code>, and again there are no surprises:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">snowpiercer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;">as.vector</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;">class</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "integer"</code></pre>
</div>
</div>
<p>As you can see, the default behaviour in <strong>arrow</strong> is to translate an R <em>integer</em> into an Arrow <em>int32</em>, and vice versa. That part, at least, is not too complicated.</p>
<p>That being said, it‚Äôs worth unpacking some of the mechanics of what I‚Äôm doing with the code here. Everything I‚Äôve shown above is R code, so it‚Äôs important to keep it firmly in mind that when I create the <code>snowpiercer</code> object there are two different things happening: a data object is created inside Arrow, and a pointer to that object is created inside R. The <code>snowpiercer</code> object is that pointer (it‚Äôs actually an <em>R6</em> object). When I called <code>snowpiercer$type</code> in R, the output is telling me that the data object in Arrow has type <em>int32</em>. There‚Äôs a division of responsibility between R and Arrow that always needs to be kept in mind.</p>
<p>Now, in this particular example there‚Äôs an element of silliness because my data object is so tiny. There was never a good reason to put the data in Arrow, and the only reason I‚Äôm doing it here is for explanatory purposes. But in real life (like in the TV shoe), <code>snowpiercer</code> might in fact be a gargantuan monstrosity over which you have perilously little control due to it‚Äôs staggering size. In that case it makes a big difference where the data object is stored. Placing the data object in Arrow is a little bit like powering your 1029-car long train using the fictitious perpetual motion engine from the show: it is a really, really good idea when you have gargantuan data.<sup>13</sup></p>
<p><br></p>
</section>
<section id="when-integer-translation-is-easy" class="level3">
<h3 class="anchored" data-anchor-id="when-integer-translation-is-easy">When integer translation is easy</h3>
<p>What about the other seven C++ integer types? This is where it gets a little trickier. The table above illustrates that some integer types are fully contained within others: unsurprisingly, every number representable by <em>int16</em> can also be represented by <em>int32</em>, so we can say that the <em>int16</em> numbers are fully ‚Äúcontained‚Äù by (i.e.&nbsp;are a proper subset of) the <em>int32</em> numbers. Similarly, <em>uint16</em> is contained by <em>uint32</em>. There are many cases where an unsigned type is contained by a signed type: for instance, <em>int32</em> contains all the <em>uint16</em> numbers. However, because the unsigned integers cannot represent negative numbers, the reverse is never true. So we can map out the relationships between the different types like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/integer-types-03.png" class="img-fluid figure-img" width="274"></p>
<p></p><figcaption class="figure-caption">Containment relationships between the integer types.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Whenever type A contains type B, it‚Äôs possible to transform an object of type B into an object of type A without losing information or requiring any special handling. R <em>integers</em> are 32 bit signed integers, which means it‚Äôs possible to convert Arrow data of types <em>int32</em>, <em>int16</em>, <em>int8</em>, <em>uint16</em>, and <em>uint8</em> to R <em>integers</em> completely painlessly. So for these data types the <strong>arrow</strong> defaults give us this relationship:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/integer-types-01.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for some integer types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>These are the cases where it is easy.</p>
<p><br></p>
</section>
<section id="when-integer-translation-is-hard" class="level3">
<h3 class="anchored" data-anchor-id="when-integer-translation-is-hard">When integer translation is hard</h3>
<p>Other integer types are messier. To keep things nice and simple, what we‚Äôd like to do is to map the Arrow <em>uint32</em>, <em>uint64</em>, and <em>int64</em> types onto the R <em>integer</em> type. Sometimes that‚Äôs possible: if all the stored values fall within the range of values representable by R <em>integers</em> (i.e., are between -2147483648 and 2147483647) then we can do this, and that‚Äôs what <strong>arrow</strong> does by default. However, if there are values that ‚Äúoverflow‚Äù this range, then <strong>arrow</strong> will import the data as a different type. That leads to a rather messy diagram, I‚Äôm afraid:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/integer-types-02.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for other integer types. The asterisk notation here is intended to indicate that the path <strong>arrow</strong> follows can depend on the data values and other settings.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Translations become messy when the boxes in one language don‚Äôt quite match up to the content expressed in another. Sometimes it‚Äôs just easier to see the system in action, so let‚Äôs write a little helper function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">translate_integer <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(value, type) {</span>
<span id="cb40-2">  fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(value, type) {</span>
<span id="cb40-3">    <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb40-4">      <span class="at" style="color: #657422;">value =</span> value,</span>
<span id="cb40-5">      <span class="at" style="color: #657422;">arrow_type =</span> <span class="fu" style="color: #4758AB;">scalar</span>(value, type)<span class="sc" style="color: #5E5E5E;">$</span>type<span class="sc" style="color: #5E5E5E;">$</span>name,</span>
<span id="cb40-6">      <span class="at" style="color: #657422;">r_class =</span> <span class="fu" style="color: #4758AB;">scalar</span>(value, type) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.vector</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">class</span>()</span>
<span id="cb40-7">    )</span>
<span id="cb40-8">  }</span>
<span id="cb40-9">  purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map2_dfr</span>(value, type, fn)</span>
<span id="cb40-10">}</span></code></pre></div>
</div>
<p>The <code>translate_integer()</code> function takes a <code>value</code> vector and a <code>type</code> list as input, and it returns a tibble that tells you what Arrow type was created from each input, and what R class gets returned when we import that Arrow object back into R. I‚Äôll pass the inputs in as <em>doubles</em> originally, but as you‚Äôll see they always get imported to Arrow as integer types because that‚Äôs what I‚Äôm telling <strong>arrow</strong> to do. So let‚Äôs start with an easy case. The number 10 is unproblematic because it‚Äôs very small, and <strong>arrow</strong> never encounters any problem trying to pull it back as an R <em>integer</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;">translate_integer</span>(</span>
<span id="cb41-2">  <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>), </span>
<span id="cb41-3">  <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">uint8</span>(), <span class="fu" style="color: #4758AB;">uint32</span>(), <span class="fu" style="color: #4758AB;">uint64</span>(), <span class="fu" style="color: #4758AB;">int64</span>())</span>
<span id="cb41-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 √ó 3
  value arrow_type r_class
  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;  
1    10 uint8      integer
2    10 uint32     integer
3    10 uint64     integer
4    10 int64      integer</code></pre>
</div>
</div>
<p>Okay, that makes sense. If the numbers <em>can</em> be represented using the R <em>integer</em> class then that‚Äôs what <strong>arrow</strong> will do. Why make life unnecessarily difficult for the user?</p>
<p>Now let‚Äôs increase the number to a value that is too big to store as a signed 32-bit integer. This is a value that R cannot represent as an <em>integer</em>, but Arrow can store as a <em>uint32</em>, <em>uint64</em> or <em>int64</em>. What happens when we try to pull that object back into R?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;">translate_integer</span>(</span>
<span id="cb43-2">  <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3000000000</span>, <span class="dv" style="color: #AD0000;">3000000000</span>, <span class="dv" style="color: #AD0000;">3000000000</span>), </span>
<span id="cb43-3">  <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">uint32</span>(), <span class="fu" style="color: #4758AB;">uint64</span>(), <span class="fu" style="color: #4758AB;">int64</span>())</span>
<span id="cb43-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 3
       value arrow_type r_class  
       &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    
1 3000000000 uint32     numeric  
2 3000000000 uint64     numeric  
3 3000000000 int64      integer64</code></pre>
</div>
</div>
<p>The first two rows seem intuitive. In base R, whenever an <em>integer</em> overflows and becomes too large to store, R will coerce it to a <em>double</em>. This is exactly the same behaviour we‚Äôd observe if the data had never left R at all. The third row, however, might come as a bit of a surprise. It certainly surprised me the first time I encountered it. Until very recently I did not know that R even <em>had</em> an <em>integer64</em> class. This class is supplied by the <strong>bit64</strong> package, and although I‚Äôm not going to talk about it in any detail here, it provides a mechanism to represent signed 64-bit integers in R. However, the one thing I will mention is the fact that the existence of the <em>integer64</em> class opens up the possibility of forcing <strong>arrow</strong> to always map the <em>integer64</em> class to the <em>int64</em> type and vice versa. If you set</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">arrow.int64_downcast =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p>it will change the <strong>arrow</strong> default so that <em>int64</em> types are always returned as <em>integer64</em> classes, even when the values are small enough that the data could have been mapped to a regular R <em>integer</em>. This can be helpful in situations where you need to guarantee type stability when working with <em>int64</em> data. Now that I‚Äôve altered the global options, I can repeat my earlier command with the number 10.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;">translate_integer</span>(</span>
<span id="cb46-2">  <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>), </span>
<span id="cb46-3">  <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">uint8</span>(), <span class="fu" style="color: #4758AB;">uint32</span>(), <span class="fu" style="color: #4758AB;">uint64</span>(), <span class="fu" style="color: #4758AB;">int64</span>())</span>
<span id="cb46-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 √ó 3
  value arrow_type r_class  
  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    
1    10 uint8      integer  
2    10 uint32     integer  
3    10 uint64     integer  
4    10 int64      integer64</code></pre>
</div>
</div>
<p>Notice that the results change for the <em>int64</em> type only. The ‚Äúint64_downcast‚Äù option pertains only to the <em>int64</em> type, and does not affect the other integer types.</p>
<p>And that‚Äôs it for integers. Next up we‚Äôll talk about numeric types, but first I‚Äôll be a good girl and restore my options to their previous state:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">arrow.int64_downcast =</span> <span class="cn" style="color: #8f5902;">NULL</span>)</span></code></pre></div>
</div>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_46_4628.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="numeric-types" class="level2">
<h2 class="anchored" data-anchor-id="numeric-types">Numeric types</h2>
<p>In the last section I talked about the rather extensive range of data types that Arrow has to represent integers. Sure, there‚Äôs a practical benefit to having all these different data types, but at the same time its wild that we even need so many different data structures to represent something so simple. Integers aren‚Äôt complicated things. We learn them as kids even before we go to school, and we get taught the arithmetic rules to operate on them very early in childhood.</p>
<p>The problem, though, is that there are A LOT of integers. It‚Äôs a tad inconvenient sometimes, but the set of integers is infinite in size,<sup>14</sup> so it doesn‚Äôt matter how many bits you allocate to your ‚Äúint‚Äù type, there will always be integers that your machine cannot represent. But this is obvious, so why am I saying it? Mostly to foreshadow that things get worse when we encounter‚Ä¶</p>
<p><br></p>
<section id="floating-point-numbers-and-the-desert-of-the-reals" class="level3">
<h3 class="anchored" data-anchor-id="floating-point-numbers-and-the-desert-of-the-reals">Floating point numbers and the desert of the reals</h3>
<blockquote class="blockquote">
<p>To dissimulate is to pretend not to have what one has. To simulate is to feign to have what one doesn‚Äôt have. One implies a presence, the other an absence. But it is more complicated than that because simulating is not pretending: ‚ÄúWhoever fakes an illness can simply stay in bed and make everyone believe he is ill.&nbsp;Whoever simulates an illness produces in himself some of the symptoms‚Äù (Littr√©). Therefore, pretending, or dissimulating, leaves the principle of reality intact: the difference is always clear, it is simply masked, whereas simulation threatens the difference between the ‚Äútrue‚Äù and the ‚Äúfalse,‚Äù the ‚Äúreal‚Äù and the ‚Äúimaginary.‚Äù <br> &nbsp; &nbsp; ‚Äì Jean Baudrillard, 1981, <a href="https://en.wikipedia.org/wiki/Simulacra_and_Simulation">Simulacra and Simulation</a><sup>15</sup></p>
</blockquote>
<p>The real numbers correspond to our intuitive concept of the continuous number line. Just like the integers, the real line extends infinitely far in both directions, but unlike the integers the reals are continuous: for any two real numbers ‚Äì no matter how close they are to each other ‚Äì there is always another real number in between. This, quite frankly, sucks. Because the moment you accept that this is true, something ugly happens. If I accept that there must exist a number between 1.01 and 1.02, which I‚Äôll call 1.015, then I have to accept that there is a number between 1.01 and 1.015, which I‚Äôll call 1.0075, and then I have to accept that‚Ä¶ oh shit this is going to go on forever. In other words, the reals have the obnoxious property that there between any two real numbers there are an infinity of other real numbers.<sup>16</sup></p>
<p>Try shoving all that into your finite-precision machine.</p>
<p>Stepping away from the mathematics for a moment, most of us already know how programming languages attempt to solve the problem. They use <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic">floating point numbers</a> as a crude tool to approximate the real numbers using a finite-precision machine, and it‚Ä¶ sort of works, as long as you never forget that floating point numbers don‚Äôt always obey the normal rules of arithmetic. I imagine most people reading this post already know this but for those that don‚Äôt, I‚Äôll show you the most famous example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>This is not a bug in R. It happens because <code>0.1</code>, <code>0.2</code>, and <code>0.3</code> are not real numbers in the mathematical sense. Rather, they are encoded in R as objects of type <em>double</em>, and a <em>double</em> is a 64-bit floating point number that adheres to the <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754</a> standard. It‚Äôs a bit beyond the scope of this post to dig all the way into the IEEE standard, but it does help a lot to have a general sense of how a floating point number (approximately) encodes a real number, so in the next section I‚Äôm going to take a look under the hood of R <em>doubles</em>. I‚Äôll show you how they‚Äôre represented as binary objects, and why they misbehave sometimes. I‚Äôm doing this for two reasons: firstly it‚Äôs just a handy thing to know, but secondly, understanding the misbehaviour of the ‚Äústandard‚Äù binary floating point number representation used in R helps motivate why Arrow and some other platforms expose other options to the user.</p>
<p><br></p>
</section>
<section id="r-the-numeric-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-numeric-class">[R] The numeric class</h3>
<p>To give you a better feel for what a <em>double</em> looks like when represented as a set of bits, I‚Äôve written a little extractor function called <code>unpack_double()</code> that decomposes the object into its constituent bits and prints it out in a visually helpful way (<a href="https://github.com/djnavarro/distill-blog/blob/master/_posts/2022-03-04_data-types-in-arrow-and-r/unpack_double.R">source code here</a>). In truth, it‚Äôs just a wrapper around the <code>numTobits()</code> function provided by base R, but one that gives slightly prettier output. Armed with this, let‚Äôs take a look at the format. To start out, I‚Äôll do the most boring thing possible and show you the binary representation of <code>0</code> as a floating point number. You will, I imagine, be entirely unshocked to discover that it is in fact a sequence of 64 zeros:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;">unpack_double</span>(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 00000000000 0000000000000000000000000000000000000000000000000000 </code></pre>
</div>
</div>
<p>Truly amazing.</p>
<p>Really, the only thing that matters here is to notice the spacing. The sequence of 64 bits are divided into three meaningful chunks. The ‚Äúfirst‚Äù bit<sup>17</sup> represents the ‚Äúsign‚Äù: is this a positive number (first bit equals 0) or a negative number (first bit equals 1), where zero is treated as if it were a positive number. The next 11 bits are used to specify an ‚Äúexponent‚Äù: you can think of these bits as if they describe a signed ‚Äúint11‚Äù type, and can be used to store any number between -1022 and 1023.<sup>18</sup> The remaining 53 bits are used to represent the ‚Äúmantissa‚Äù.<sup>19</sup></p>
<p>These three components carve up a real number by using this this decomposition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(%5Cmbox%7Breal%20number%7D)%20=%20(%5Cmbox%7Bsign%7D)%20%5Ctimes%20(%5Cmbox%7Bmantissa%7D)%20%5Ctimes%202%20%5E%20%7B%5Cmbox%7B(exponent)%7D%7D%0A"></p>
<p>Any real number can be decomposed in this way, so long as you have enough digits to express your mantissa and your exponent. Of course, on a finite precision machine we won‚Äôt always have enough digits, and this representation doesn‚Äôt allow us to fit ‚Äúmore‚Äù numbers into the machine: there‚Äôs a fundamental limit on what you can accomplish with 64 bits. What it can do for you, however, is let you use your limited resources wisely. The neat thing about adopting the decomposed format that floating-point relies on is that we can describe very large magnitudes and very small magnitudes with a fixed-length mantissa.</p>
<p>To give a concrete example of how floating point works, let‚Äôs take a look at the internal representation of <code>-9.832</code>, which I am told is the approximate rate of acceleration experienced by a falling object in the Earth‚Äôs polar regions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">polar_g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unpack_double</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">9.832</span>)</span>
<span id="cb53-2">polar_g</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 10000000010 0011101010011111101111100111011011001000101101000100 </code></pre>
</div>
</div>
<p>I wrote some extractor functions that convert those binary components to the sign, exponent, and mantissa values that they represent, so let‚Äôs take a look at those:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;">extract_sign</span>(polar_g)</span>
<span id="cb55-2"><span class="fu" style="color: #4758AB;">extract_exponent</span>(polar_g)</span>
<span id="cb55-3"><span class="fu" style="color: #4758AB;">extract_mantissa</span>(polar_g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1
[1] 3
[1] 1.229</code></pre>
</div>
</div>
<p>Notice that the sign is always represented exactly: it can only be -1 or 1. The exponent is also represented exactly, as long as it‚Äôs not too large or too small: the number is always an integer value between -1022 and 1023. The mantissa, however, is a fractional value. When you encounter floating point errors it‚Äôs generally going to be because the stored mantissa doesn‚Äôt represent the true mantissa with sufficient precision.<sup>20</sup> In any case, let‚Äôs check that the formula works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">sign <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract_sign</span>(polar_g)</span>
<span id="cb57-2">exponent <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract_exponent</span>(polar_g)</span>
<span id="cb57-3">mantissa <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract_mantissa</span>(polar_g)</span>
<span id="cb57-4"></span>
<span id="cb57-5">sign <span class="sc" style="color: #5E5E5E;">*</span> mantissa <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">^</span> exponent</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -9.832</code></pre>
</div>
</div>
<p>Yay!</p>
<p>Just to prove to you that this isn‚Äôt a fluke, I also included a <code>repack_double()</code> function that automates this calculation. It takes the deconstructed representation of an R <em>double</em> and packs it up again, so <code>repack_double(unpack_double(x))</code> should return <code>x</code>. Here are a few examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">sanity_check <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb59-2">  x <span class="sc" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;">repack_double</span>(<span class="fu" style="color: #4758AB;">unpack_double</span>(x))</span>
<span id="cb59-3">}</span>
<span id="cb59-4"><span class="fu" style="color: #4758AB;">sanity_check</span>(<span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb59-5"><span class="fu" style="color: #4758AB;">sanity_check</span>(<span class="dv" style="color: #AD0000;">1345234623462342</span>)</span>
<span id="cb59-6"><span class="fu" style="color: #4758AB;">sanity_check</span>(<span class="fl" style="color: #AD0000;">0.000000002345345234523</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
[1] TRUE
[1] TRUE</code></pre>
</div>
</div>
<p>Now that we have some deeper knowledge of how R <em>doubles</em> are represented internally, let‚Äôs return to the numbers in the famous example of floating point numbers misbehaving:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb61-2"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb61-3"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 01111111011 1001100110011001100110011001100110011001100110011010 
0 01111111100 1001100110011001100110011001100110011001100110011010 
0 01111111101 0011001100110011001100110011001100110011001100110011 </code></pre>
</div>
</div>
<p>Although these are clean numbers with a very simple decimal expansion, they are not at all simple when written in a binary floating point representation. In particular, notice that <code>0.1</code> and <code>0.2</code> share the same mantissa but <code>0.3</code> has a different mantissa, and that‚Äôs where the truncation errors occur. Let‚Äôs take a peek at <code>0.6</code> and <code>0.9</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb63-2"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb63-3"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 01111111110 0011001100110011001100110011001100110011001100110011 
0 01111111110 1001100110011001100110011001100110011001100110011010 
0 01111111110 1100110011001100110011001100110011001100110011001101 </code></pre>
</div>
</div>
<p>So it turns out that <code>0.6</code> has the same mantissa as <code>0.3</code>, and <code>0.8</code> has the same mantissa as <code>0.1</code> and <code>0.2</code>, but <code>0.9</code> has a different mantissa from all of them. So what we might expect is that floating point errors can happen for these cases:<sup>21</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.3</span></span>
<span id="cb65-2"><span class="fl" style="color: #AD0000;">0.3</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.6</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.9</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE
[1] FALSE</code></pre>
</div>
</div>
<p>but not these ones:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.2</span></span>
<span id="cb67-2"><span class="fl" style="color: #AD0000;">0.3</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.3</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.6</span></span>
<span id="cb67-3"><span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.6</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.8</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
[1] TRUE
[1] TRUE</code></pre>
</div>
</div>
<p>Okay that checks out! Now, it‚Äôs important to recognise that these errors are very small. So when I say that floating point arithmetic doesn‚Äôt actually ‚Äúwork‚Äù, a little care is needed. It does am impressively good job of approximating something very complicated using a quite limited tool:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5.551115e-17</code></pre>
</div>
</div>
<p>Ultimately, floating point numbers are a simulation in the sense described by Baudrillard at the start of this section. They are a pretense, an attempt to act as if we can encode a thing (the reals) that we cannot encode. Floating point numbers are a fiction, but they are an extraordinarily useful one because they allow us to ‚Äúcover‚Äù a very wide span of numbers across the real line, at a pretty high level of precision, without using too much memory.</p>
<p>We pretend that machines can do arithmetic on the reals. They can‚Äôt, but it‚Äôs a very powerful lie.</p>
<p><br></p>
</section>
<section id="arrow-the-float64-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-float64-type">[Arrow] The float64 type</h3>
<p>Okay. That was terribly long-winded, and I do apologise. Nevertheless, I promise there is a point to this story and it‚Äôs time we switched back over to the Arrow side of things to think about what happens there.</p>
<p>By now you‚Äôre probably getting used to the fact that Arrow tends to have more primitive types than R in most situations. Floating point numbers are no exception. R has only a single class, usually referred to as <em>numeric</em> but sometimes called <em>double</em>. In contrast, Arrow has three: <em>float64</em>, <em>float32</em> and <em>float16</em>.<sup>22</sup> It also has another numeric type called <em>decimal</em> that I‚Äôll discuss later.</p>
<p>The easiest of these to discuss is <em>float64</em>, because it adopts the same conventions as the R <em>double</em> class. Just like R, it uses 64 bits to represent a floating point number.<sup>23</sup> Because the data structures are so similar, the default behaviour in <strong>arrow</strong> is to translate an R <em>double</em> into an Arrow <em>float64</em> and vice versa.</p>
<p>As always, I‚Äôve got a little diagram summarising all the default mappings:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/numeric-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for numeric types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Let‚Äôs have a look at the Arrow <em>float64</em> type. It‚Äôs a little anticlimactic in a sense, because it‚Äôs the same data structure as the R <em>double</em> type, so all we‚Äôre going to ‚Äúlearn‚Äù is that it behaves the same way! First, let‚Äôs create one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">float_01 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(<span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb71-2">float_01</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0.1</code></pre>
</div>
</div>
<p>As always, we‚Äôll verify that the created object has the type we‚Äôre expecting‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">float_01<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Float64
double</code></pre>
</div>
</div>
<p>‚Ä¶ and it does, but you might be slightly puzzled by the output this time. What‚Äôs going on with the top line and the bottom line? Why does one say ‚ÄúFloat64‚Äù and the other say ‚Äúdouble‚Äù?</p>
<p>We‚Äôve seen the ‚Äútwo lines of output‚Äù pattern earlier in the post when printing out an <em>int32</em>, but last time the two lines both said the same thing so I didn‚Äôt bother to comment on it. This time, however, there‚Äôs something to unpack. The distinction here refers to the name of the object type at the R level and and the C++ level. The first line of the output reads ‚ÄúFloat64‚Äù because that‚Äôs what this data structure is called at the R level (i.e., according to <strong>arrow</strong>). The second line reads ‚Äúdouble‚Äù because that‚Äôs what this data structure is called at the C++ level (i.e., in <strong>libarrow</strong>). There are a few cases where the <strong>arrow</strong> package adopts a slightly different naming scheme to <strong>libarrow</strong>, and so you‚Äôll see this happen from time to time later in the post. There are some good reasons for this difference in nomenclature, and it‚Äôs nothing to be concerned about!</p>
<p>Anyway, getting back to the main thread‚Ä¶ since we‚Äôve created the value <code>0.1</code> as a <em>float64</em> in Arrow, let‚Äôs go through the same exercise we did in R and show that Arrow floats produce the same floating point errors. We‚Äôll create new variables for <code>0.2</code> and <code>0.3</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">float_02 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(<span class="fl" style="color: #AD0000;">0.2</span>)</span>
<span id="cb75-2">float_03 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(<span class="fl" style="color: #AD0000;">0.3</span>)</span></code></pre></div>
</div>
<p>Just like we saw in R, the logical test of equality gives a counterintuitive answer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">float_01 <span class="sc" style="color: #5E5E5E;">+</span> float_02 <span class="sc" style="color: #5E5E5E;">==</span> float_03</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
false</code></pre>
</div>
</div>
<p>‚Ä¶ and just like we saw in R, the reason for it is that there‚Äôs a very small rounding error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">float_01 <span class="sc" style="color: #5E5E5E;">+</span> float_02 <span class="sc" style="color: #5E5E5E;">-</span> float_03</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
5.551115123125783e-17</code></pre>
</div>
</div>
<p>Just so you don‚Äôt have to scroll up to check, yes, the rounding error is the same as the one that R produces:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5.551115e-17</code></pre>
</div>
</div>
<p>R and Arrow implement the same standard for floating point arithmetic, and so they ‚Äúfail‚Äù in the same way because the failure occurs at the level of the standard. But we don‚Äôt blame IEEE 754 for that, because it‚Äôs literally impossible to define any standard that will encode the real numbers in an error-free way on a finite-precision machine.</p>
<p><br></p>
</section>
<section id="arrow-the-float32-and-float16-types" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-float32-and-float16-types">[Arrow] The float32 and float16 types</h3>
<p>The <em>float64</em> type provides an excellent, high precision floating point representation of numeric data. As data types go it is a good type. However, it is a 64-bit type, and sometimes you don‚Äôt need to store your data at a high degree of precision. With that in mind, because Arrow places a strong emphasis on both scalability and efficiency, it also provides the <em>float32</em> type and the <em>float16</em> type (though <em>float16</em> hasn‚Äôt really been implemented yet, as far as I know). Encoding numeric data in these formats will save space, but will come at a cost of precision. As always, the decision of what encoding works best for your application will depend on what your needs are.</p>
<p>As far as the <strong>arrow</strong> package is concerned, there are no difficulties in passing data back and forth between R <em>doubles</em> and Arrow <em>float32</em> types, but at present it‚Äôs not really possible to do this with <em>float16</em> because this isn‚Äôt implemented. Still, we can briefly take a look at how it works for <em>float32</em>. Here‚Äôs an example of me passing an R <em>double</em> to Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">float32_01 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(.<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">float32</span>())</span>
<span id="cb82-2">float32_01</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0.1</code></pre>
</div>
</div>
<p>Let‚Äôs quickly verify that it is in fact a 32-bit float:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">float32_01<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Float32
float</code></pre>
</div>
</div>
<p>And now let‚Äôs pull it back into R where it will be, once again, encoded as a <em>double</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;">as.vector</span>(float32_01)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.1</code></pre>
</div>
</div>
<p>Yay! It works!</p>
<p><br></p>
</section>
<section id="decimal-floating-point-numbers" class="level3">
<h3 class="anchored" data-anchor-id="decimal-floating-point-numbers">Decimal floating point numbers?</h3>
<p>It‚Äôs time to talk about decimals. This is a fun topic, but I need to start with a warning: I mentioned that Arrow has a <em>decimal</em> type, and your first instinct as an R programmer might be to assume that this is another variation of floating point numbers. Fight this instinct: it‚Äôs not quite right.</p>
<p>Okay, ready?</p>
<p>Earlier in this section I promised that the Baudrillard quote from <em>Simulacra and Simulation</em> was going to be relevant? Well, that time has arrived. It‚Äôs also the moment at which the quote from <em>Word and Object</em> by Quine that opened this blog post becomes painfully relevant. Stripped of their fancy language, here‚Äôs what the two authors are telling us in these passages:</p>
<ul>
<li>The Baudrillard quote emphasises that floating point numbers are a simulation. They are the mechanism by which we pretend to encode real numbers on computers. It‚Äôs a lie, but it‚Äôs a powerful lie that almost works.</li>
<li>The Quine quote emphasises that translation (and, I would argue, simulation also) is underdetermined. For any complicated thing there are many ways to simulate, or translate, or approximate it. These approximations can be extremely accurate and still be inconsistent with each other.</li>
</ul>
<p>Quine‚Äôs truism applies to floating point numbers, and it is the reason why ‚Äúdecimal floating point‚Äù numbers exist in addition ‚Äúbinary floating point‚Äù numbers. All floating point systems are simulations in the Baudrillard sense of the term: lies, strictly speaking, but close enough to true that the distinction between lies and truth gets a little blurry.</p>
<p>Let‚Äôs see how that plays out with floating point numbers. When discussing doubles in R, I mentioned that they represent the real numbers using a decomposition that looks like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(%5Cmbox%7Breal%20number%7D)%20=%20(%5Cmbox%7Bsign%7D)%20%5Ctimes%20(%5Cmbox%7Bmantissa%7D)%20%5Ctimes%202%20%5E%20%7B%5Cmbox%7B(exponent)%7D%7D%0A"></p>
<p>The number ‚Äú2‚Äù pops out here, doesn‚Äôt it? Is there any reason to think that ‚Äú2‚Äù is a pre-ordained necessity when approximating the real numbers on a finite-precision machine? Programmers have a tendency to like using ‚Äú2‚Äù as the base unit for everything because it lines up nicely with binary representations, and that‚Äôs often a good instinct when dealing with machines.</p>
<p>Unfortunately, life consists of more than machines.</p>
<p>In particular, binary representations create problems for floating point arithmetic because the world contains entities known as ‚Äúhumans‚Äù, who have a habit of writing numbers in decimal notation<sup>24</sup>. Numbers that look simple in decimal notation often look complicated in binary notation and vice versa. As we saw earlier, a ‚Äúsimple‚Äù decimal number like 0.1 doesn‚Äôt have a short binary expansion and so cannot be represented cleanly in a finite-precision binary floating point number system. Rounding errors are introduced every time a machine uses (base 2) floating point to encode data that were originally stored as a (base 10) number in human text.</p>
<p>A natural solution to this is to design floating point data types that use other bases. It is entirely possible to adopt <a href="https://en.wikipedia.org/wiki/Decimal_floating_point">decimal floating point</a> types that are essentially equivalent to the more familiar binary floating point numbers, but they rely on a base 10 decomposition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(%5Cmbox%7Breal%20number%7D)%20=%20(%5Cmbox%7Bsign%7D)%20%5Ctimes%20(%5Cmbox%7Bmantissa%7D)%20%5Ctimes%2010%20%5E%20%7B%5Cmbox%7B(exponent)%7D%7D%0A"></p>
<p>The virtues of decimal floating point seem enticing, and it‚Äôs tempting to think that this must be what Arrow implements. However, as we‚Äôll see in the next section, that‚Äôs not true.</p>
<p>Instead of using floating-point decimals, it supplies ‚Äúfixed-point‚Äù decimal types. In a floating-point representation, the exponent is chosen automatically, and it is a property of the value itself. The number <code>-9.832</code> will always have an exponent of 3 when encoded as a binary floating-point number (as we saw in the <code>polar_g</code> example earlier), and that exponent will never be influenced by the values of other numbers stored in the same data set.</p>
<p>A fixed-point representation is different. The exponent ‚Äì and in a decimal representation, remember that the exponent is just ‚Äúthe location of the decimal point‚Äù ‚Äì is chosen by the user. You have to specify where the decimal point is located manually, and this location will be applied to each value stored in the object. In other words, the exponent ‚Äì which is now called the ‚Äúscale‚Äù, and is parameterised slightly differently ‚Äì becomes a property of the type, not the value.</p>
<p>Sigh. Nothing in life is simple, is it? It‚Äôll become a little clearer in the next section, I promise!</p>
<p><br></p>
</section>
<section id="arrow-the-decimal-fixed-point-types" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-decimal-fixed-point-types">[Arrow] The decimal fixed-point types</h3>
<p>Arrow has two decimal types, a <em>decimal128</em> type that (shockingly) uses 128 bits to store a floating point decimal number, and a <em>decimal256</em> type that uses 256 bits. As usual <strong>arrow</strong> package supplies type functions <code>decimal128()</code> and <code>decimal256()</code> that allow you to specify decimal types. Both functions have two arguments that you must supply:</p>
<ul>
<li><p><code>precision</code> specifies the number of significant digits to store, similar to setting the length of the mantissa in a floating-point representation.</p></li>
<li><p><code>scale</code> specifies the number of digits that should be stored after the decimal point. If you set <code>scale = 2</code>, exactly two digits will be stored after the decimal point. If you set <code>scale = 0</code>, values will be rounded to the nearest whole number. Negative scales are also permitted (handy when dealing with extremely large numbers), so <code>scale = -2</code> stores the value to the nearest 100.</p></li>
</ul>
<p>One convenience that exists both in the <strong>arrow</strong> R package and within <strong>libarrow</strong> itself is that it can automatically decide whether you need a <em>decimal128</em> or a <em>decimal256</em> simply by looking at the value of the <code>precision</code> argument. If the <code>precision</code> is 38 or less, you can encode the data with a <em>decimal128</em> type. Larger values require a <em>decimal256</em>. If you would like to take advantage of this ‚Äì as I will do in this post ‚Äì you can use the <code>decimal()</code> type function which will automatically create the appropriate type based on the specified precision.</p>
<p>One inconvenience that I have in this post, however, is that R doesn‚Äôt have any analog of a fixed-point <em>decimal</em>, and consequently I don‚Äôt have any way to create an ‚ÄúR decimal‚Äù that I can then import into Arrow. What I‚Äôll do instead is create a floating point array in Arrow, and then explicitly cast it to a <em>decimal</em> type. Step one, create the floating point numbers in Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">floats <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(<span class="fu" style="color: #4758AB;">c</span>(.<span class="dv" style="color: #AD0000;">01</span>, .<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">100</span>), <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">float32</span>())</span>
<span id="cb88-2">floats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    0.01,
    0.1,
    1,
    10,
    100
  ]
]</code></pre>
</div>
</div>
<p>Step two, cast the <em>float32</em> numbers to <em>decimals</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1">decimals <span class="ot" style="color: #003B4F;">&lt;-</span> floats<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">decimal</span>(<span class="at" style="color: #657422;">precision =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">scale =</span> <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb90-2">decimals</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    0.01,
    0.10,
    1.00,
    10.00,
    100.00
  ]
]</code></pre>
</div>
</div>
<p>These two arrays look almost the same (especially because I chose the <code>scale</code> judiciously!), but the underlying encoding is different. The original <code>floats</code> array is a familiar <em>float32</em> type, but if we have a look at the <code>decimals</code> object we see that it adopts a quite different encoding:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1">decimals<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Decimal128Type
decimal128(5, 2)</code></pre>
</div>
</div>
<p>To illustrate that these do behave differently, let‚Äôs have fun making floating point numbers misbehave again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1">sad_floats <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(<span class="fu" style="color: #4758AB;">c</span>(.<span class="dv" style="color: #AD0000;">1</span>, .<span class="dv" style="color: #AD0000;">2</span>, .<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb94-2"><span class="fu" style="color: #4758AB;">sum</span>(sad_floats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0.6000000000000001</code></pre>
</div>
</div>
<p>Oh noes. Okay, let‚Äôs take a sad <em>float32</em> and turn it into a happy <em>decimal</em>. I‚Äôll store it as a high precision decimal to make it a little easier to compare the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1">happy_decimals <span class="ot" style="color: #003B4F;">&lt;-</span> sad_floats<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">decimal</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">16</span>))</span></code></pre></div>
</div>
<p>Now let‚Äôs look at the two sums side by side:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="fu" style="color: #4758AB;">sum</span>(sad_floats)</span>
<span id="cb97-2"><span class="fu" style="color: #4758AB;">sum</span>(happy_decimals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0.6000000000000001
Scalar
0.6000000000000000</code></pre>
</div>
</div>
<p>Yay!</p>
<p>As a final note before moving on, it is (of course!!!) the case that fixed-point decimals aren‚Äôt a universal solution to the problems of binary floating-point numbers. They have limitations of their own and there are good reasons why floats remain the default numeric type in most languages. But they have their uses: binary and decimal systems provide different ways to simulate the reals, as do fixed and floating point systems. Each such system is a lie, of course: the reals are too big to be captured in any finite system we create. They are, however, useful.</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4857.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="character-types" class="level2">
<h2 class="anchored" data-anchor-id="character-types">Character types</h2>
<p>Our journey continues. We now leave behind the world of number and enter the domain of text. Such times we shall have! What sights we shall see! (And what terrors lie within?)</p>
<p>Strings are an interesting case. R uses a single data type to represent strings (<em>character</em> vectors) but Arrow has two types, known as <em>strings</em> and <em>large_strings</em>. When using the <strong>arrow</strong> package, Arrow strings are specified using the <code>utf8()</code> function, and large strings correspond to the <code>large_utf8()</code> type. The default mapping is to assume that an R character vector maps onto the Arrow <code>utf8()</code> type, as shown below:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/character-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for character types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>There‚Äôs a little more than meets the eye here though, and you might be wondering about the difference between <em>strings</em> and <em>large_strings</em> in Arrow, and when you might prefer one to the other. As you might expect, the large string type is suitable when you‚Äôre storing large amounts of text, but to understand it properly I need to talk in more depth about how R and Arrow store strings, and I‚Äôll use this partial list of people that ‚Äì according to the lyrics of <a href="https://genius.com/Tism-jung-talent-time-lyrics">Jung Talent Time</a> by TISM ‚Äì were perhaps granted slightly more fame than they had earned on merit:</p>
<pre><code>Bert Newton
Billy Ray Cyrus
Warwick Capper
Uri Geller
Samantha Fox</code></pre>
<p><br></p>
<section id="r-the-character-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-character-class">[R] The character class</h3>
<p>Suppose I want to store this as a <em>character</em> vector in R, storing only the family names for the sake of brevity and visual clarity.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1">jung_talent <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Newton"</span>, <span class="st" style="color: #20794D;">"Cyrus"</span>, <span class="st" style="color: #20794D;">"Capper"</span>, <span class="st" style="color: #20794D;">"Geller"</span>, <span class="st" style="color: #20794D;">"Fox"</span>)</span></code></pre></div>
</div>
<p>Each element of the <code>jung_talent</code> vector is a variable-length string, and is stored internally by R as an array of individual characters<sup>25</sup> So, to a first approximation, your mental model of how R stores the <code>jung_talent</code> variable might look something like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/character-types-02.png" class="img-fluid figure-img" width="2400"></p>
<p></p><figcaption class="figure-caption">Simplified representation of how character vectors are represented in R</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Here, the <code>jung_talent</code> variable is an object<sup>26</sup> that contains five elements shown as the orange boxes. Internally, each of those orange boxes is itself an array of individual characters shown as the purple boxes. As a description of what R actually does this is a bit of an oversimplification because it ignores the <a href="https://adv-r.hadley.nz/names-values.html#character-vectors">global string pool</a>, but it will be sufficient for the current purposes.</p>
<p>The key thing to understand conceptually is that R treats the elements of a <em>character</em> vector as the fundamental unit. The <code>jung_talent</code> vector is constructed from five distinct strings, <code>"Newton"</code>, <code>"Cyrus"</code>, etc. The <code>"Newton"</code> string is assigned to position 1, the <code>"Cyrus"</code> string is assigned to position 2, and so on.</p>
<p><br></p>
</section>
<section id="arrow-the-utf8-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-utf8-type">[Arrow] The utf8 type</h3>
<p>The approach taken in Arrow is rather different. Instead of carving up the character vector into strings (and internally treating the strings as character arrays), it concatenates everything into one long buffer. The text itself is dumped into one long string, like this:</p>
<pre><code>NewtonCyrusCapperGellerFox</code></pre>
<p>The first element of this buffer ‚Äì the letter <code>"N"</code> ‚Äì is stored at ‚Äúoffset 0‚Äù (indexing in Arrow starts at 0), the second element is stored at offset 1, and so on. This long array of text is referred to as the ‚Äúdata buffer‚Äù, and it does not specify where the boundaries between array elements are. Those are stored separately. If I were to create an Arrow string array called <code>jung_talent_arrow</code>, it would be comprised of a data buffer, and an ‚Äúoffset buffer‚Äù that specifies the positions at which each element of the string array begins. In other words, we‚Äôd have a mental model that looks a bit like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/character-types-03.png" class="img-fluid figure-img" width="1331"></p>
<p></p><figcaption class="figure-caption">Simplified representation of how character vectors are represented in Arrow</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>How are each of these buffers encoded?</p>
<ul>
<li><p>The contents of the data buffer are stored as UTF-8 text, which is itself a variable length encoding: some characters are encoded using only 8 bits while others require 32 bits. This <a href="https://deliciousbrains.com/how-unicode-works/">blog post on unicode</a> is a nice explainer.</p></li>
<li><p>The contents of the offset buffer are stored as unsigned integers, either 32 bit or 64 bit, depending on which of the two Arrow string array types you‚Äôre using. I‚Äôll unpack this in the next section.</p></li>
</ul>
<p>Sheesh. That was long. Let‚Äôs give ourselves a small round of applause for surviving, and now actually DO something. We‚Äôll port the <code>jung_talent</code> vector over to Arrow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1">jung_talent_arrow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(jung_talent)</span>
<span id="cb102-2">jung_talent_arrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "Newton",
    "Cyrus",
    "Capper",
    "Geller",
    "Fox"
  ]
]</code></pre>
</div>
</div>
<p>That certainly looks like text to me! Let‚Äôs take a look at the data type:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb104-1">jung_talent_arrow<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Utf8
string</code></pre>
</div>
</div>
<p>Yep. Definitely text!</p>
<p><br></p>
</section>
<section id="arrow-the-large_utf8-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-large_utf8-type">[Arrow] The large_utf8 type</h3>
<p>Okay, so as I mentioned, Arrow has two different string types: it has <em>strings</em> (also called <em>utf8</em>) and <em>large_strings</em> (also called <em>large_utf8</em>).<sup>27</sup> The default in <strong>arrow</strong> is to translate <em>character</em> data in R to the <em>utf8</em> data type in Arrow, but we can override this if we want to. In order to help you make an informed choice, I‚Äôll dig a little deeper into the difference between the two types.</p>
<p>The first thing to recognise is that the nature of the data buffer is the same for <em>utf8</em> and <em>large_utf8</em>: the difference between the two lies in how the offset buffers are encoded. When character data are encoded as <em>utf8</em> type, every offset value is stored as an unsigned 32-bit integer. That means that ‚Äì as shown in the table of integer types earlier in the post ‚Äì you cannot store an offset value larger than 4294967295. This constrain places a practical cap on the total length of the data buffer: if total amount of text stored in the data buffer is greater than about 2GiB, the offset buffer can‚Äôt encode the locations within it! Switching to <em>large_utf8</em> means that the offset buffer will store every offset value as an unsigned 64-bit integer. This means that the offset buffer now takes up twice as much space, but it allows you to encode offset values up to‚Ä¶ um‚Ä¶ 18446744073709551615. And if you‚Äôve got so much text that your data buffer is going to exceed that limit, well, frankly you have bigger problems.</p>
<p>In short, if you‚Äôre not going to exceed 2GiB of text in your array, you don‚Äôt need <em>large_utf8</em>. Once you start getting near that limit, you might want to think about switching:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb106-1">jung_talent_arrow_big <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(jung_talent, <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">large_utf8</span>())</span>
<span id="cb106-2">jung_talent_arrow_big<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>LargeUtf8
large_string</code></pre>
</div>
</div>
<p>Before moving on, I‚Äôll mention one additional complexity. This is a situation where the distinction between <em>Arrays</em> and <em>ChunkedArrays</em> begins to matter. Strictly speaking, I lied earlier when I said there‚Äôs only one data buffer. A more precise statement would be to say that there is one data buffer per chunk (where each chunk in a <em>ChunkedArray</em> is an <em>Array</em>). <em>ChunkedArrays</em> are designed to allow a block (or ‚Äúchunk‚Äù) of contiguous rows in a table to be stored together in a single location (or file). There are good reasons for doing that<sup>28</sup>, but they aren‚Äôt immediately relevant. What matters is to recognise that in a <em>ChunkedArray</em>, the 2GiB limit on <em>utf8</em> type data applies on a per-chunk basis. The net result of this is that you probably don‚Äôt need <em>large_utf8</em> except in very specific cases.</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4828.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="datetime-types" class="level2">
<h2 class="anchored" data-anchor-id="datetime-types">Date/time types</h2>
<p>Next up on our tour of data types are dates and times. Internally, R and Arrow both adopt the convention of measuring time in terms of the time elapsed since a specific moment in time known as the <a href="https://en.wikipedia.org/wiki/Unix_time">unix epoch</a>. The unix epoch is the time 00:00:00 UTC on 1 January 1970. It was a Thursday.</p>
<p>Despite agreeing on fundamentals, there are some oddities in the particulars. Base R has three date/time classes (<em>Date</em>, <em>POSIXct</em>, and <em>POSIXlt</em>), and while Arrow also has three date/time classes (<em>date32</em>, <em>date64</em>, and <em>timestamp</em>), the default mappings between them are a little puzzling unless you are deeply familiar with what all these data types are and what they represent. I‚Äôll do the deep dive in a moment, but to give you the big picture here‚Äôs how the mapping works:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/date-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for date/time types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<section id="r-the-date-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-date-class">[R] The Date class</h3>
<p>On the R side of things, a <em>Date</em> object is represented internally as a numeric value, counting the number of days since the unix epoch. Here is today as a <em>Date</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb108-1">today <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.Date</span>()</span>
<span id="cb108-2">today</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23"</code></pre>
</div>
</div>
<p>If I use <code>unclass()</code> to see what it looks like under the hood:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb110-1"><span class="fu" style="color: #4758AB;">unclass</span>(today)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 19227</code></pre>
</div>
</div>
<p>Fundamentally, a <em>Date</em> object is a number:<sup>29</sup> it counts the number of days that have elapsed since a fixed date. It does not care what the year is, what the month is, or what day of the month it is. It does not care how the date is displayed to the user. All those things are supplied by the <code>print()</code> method, and are not part of the <em>Date</em> itself.</p>
<p><br></p>
</section>
<section id="r-the-posixct-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-posixct-class">[R] The POSIXct class</h3>
<p>A date is a comparatively simple thing. When we want to represent dates and time together, we need to know the time of day, and we might need to store information about the timezone as well (more on that later). Base R has two different classes for representing this, <em>POSIXct</em> and <em>POSIXlt</em>. These names used to confuse me a lot. <a href="https://en.wikipedia.org/wiki/POSIX">POSIX</a> stands for ‚Äúportable operating system interface‚Äù, and it‚Äôs a set of standards used to help operating systems remain compatible with each other. In this context though, it‚Äôs not very meaningful: all it says ‚Äúyup we use unix time.‚Äù</p>
<p>The more important part of the name is actually the <a href="https://stackoverflow.com/questions/44778721/what-do-ct-and-lt-in-posixct-and-posixlt-mean">‚Äúct‚Äù versus ‚Äúlt‚Äù</a> part. Let‚Äôs start with <em>POSIXct</em>. The ‚Äúct‚Äù in <em>POSIXct</em> stands for ‚Äúcalendar time‚Äù: internally, R stores the number of seconds<sup>30</sup> that have elapsed since 1970-01-01 00:00 UTC.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb112-1">now <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb112-2">now</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 13:05:52 AEST"</code></pre>
</div>
</div>
<p>If I peek under the hood using <code>unclass()</code> here‚Äôs what I see:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb114-1"><span class="fu" style="color: #4758AB;">unclass</span>(now)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1661223953</code></pre>
</div>
</div>
<p>There are no attributes attached to this object, it is simply a count of the number of seconds since that particular moment in time. However, it doesn‚Äôt necessarily have to be this way: a <em>POSIXct</em> object is permitted to have a ‚Äútzone‚Äù attribute, a <em>character</em> string that specifies the timezone that is used when printing the object will be preserved when it is converted to a <em>POSIXlt</em>.</p>
<p>Nevertheless, when I created the <code>now</code> object by calling <code>Sys.time()</code>, no timezone information was stored in the object. The fact that it appears when I print out <code>now</code> occurs because the <code>print()</code> method for <em>POSIXct</em> objects prints the time with respect to a particular timezone. The default is to use the system timezone, which you can check by calling <code>Sys.timezone()</code>, but you can override this behaviour by specifying the timezone explicitly (for a list of timezone names, see <code>OlsonNames()</code>). So if I wanted to print the time in Berlin, I could do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb116-1"><span class="fu" style="color: #4758AB;">print</span>(now, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"Europe/Berlin"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 05:05:52 CEST"</code></pre>
</div>
</div>
<p>If you want to record the timezone as part of your <em>POSIXct</em> object rather than relying on the print method to do the work, you can do so by setting the <code>tzone</code> attribute. To illustrate this, let‚Äôs pretend I‚Äôm in Tokyo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb118-1"><span class="fu" style="color: #4758AB;">attr</span>(now, <span class="st" style="color: #20794D;">"tzone"</span>) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Asia/Tokyo"</span></span>
<span id="cb118-2">now</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 12:05:52 JST"</code></pre>
</div>
</div>
<p>The important thing here is that the timezone is metadata used to change the how the time is displayed. Changing the timezone does not alter the number of seconds stored in the <code>now</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb120-1"><span class="fu" style="color: #4758AB;">unclass</span>(now)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1661223953
attr(,"tzone")
[1] "Asia/Tokyo"</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="r-the-posixlt-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-posixlt-class">[R] The POSIXlt class</h3>
<p>What about <em>POSIXlt</em>? It turns out that this is a quite different kind of data structure, and it ‚Äúthinks‚Äù about time in a very different way. The ‚Äúlt‚Äù in <em>POSIXlt</em> stands for ‚Äúlocal time‚Äù, and internally a <em>POSIXlt</em> object is a list that stores information about the time in a way that more closely mirrors how humans think about it. Here‚Äôs what <code>now</code> looks like when I coerce it to a <em>POSIXlt</em> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb122-1">now_lt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXlt</span>(now)</span>
<span id="cb122-2">now_lt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 12:05:52 JST"</code></pre>
</div>
</div>
<p>It looks exactly the same, but this is an illusion produced by the <code>print()</code> method. Internally, the <code>now_lt</code> object is a very different kind of thing. To see this, let‚Äôs see what happens if we print it as if it were a regular <em>list</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb124-1"><span class="fu" style="color: #4758AB;">unclass</span>(now_lt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$sec
[1] 52.72954

$min
[1] 5

$hour
[1] 12

$mday
[1] 23

$mon
[1] 7

$year
[1] 122

$wday
[1] 2

$yday
[1] 234

$isdst
[1] 0

$zone
[1] "JST"

$gmtoff
[1] 32400

attr(,"tzone")
[1] "Asia/Tokyo" "JST"        "JDT"       </code></pre>
</div>
</div>
<p>As you can see, this object separately stores the year (counted from 1900), the month (where January is month 0 and December is month 11), the day of the month (starting at day 1), etc.<sup>31</sup> The timezone is stored, as is the day of the week (Sunday is day 0), it specifies whether daylight savings time is in effect, and so on. Time, as represented in the <em>POSIXlt</em> class, uses a collection of categories that are approximately the same as those that humans use when we talk about time.</p>
<p>It is not a compact representation, and it‚Äôs useful for quite different things than <em>POSIXct</em>. What matters for the current purposes is that <em>POSIXlt</em> is, fundamentally, a <em>list</em> structure, and is not in any sense a ‚Äútimestamp‚Äù.</p>
<p><br></p>
</section>
<section id="arrow-the-date32-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-date32-type">[Arrow] The date32 type</h3>
<p>Okay, now let‚Äôs pivot over to the Arrow side and see what we have to work with. The <em>date32</em> type is similar ‚Äì but not identical ‚Äì to the R <em>Date</em> class. Just like the R <em>Date</em> class, it counts the number of days since 1970-01-01. To see this, let‚Äôs create an analog of the <code>today</code> <em>Date</em> object inside Arrow, and represent it as a <em>date32</em> type:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb126-1">today_date32 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(today, <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">date32</span>())</span>
<span id="cb126-2">today_date32</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23</code></pre>
</div>
</div>
<p>We can expose the internal structure of this object by casting it to an <em>int32</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb128-1">today_date32<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">int32</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
19227</code></pre>
</div>
</div>
<p>This is the same answer we got earlier when I used <code>unclass()</code> to take a peek at the internals of the <code>today</code> object. That being said, there is a subtle difference: in Arrow, the <em>date32</em> type is explicitly a 32-bit integer. If you read through the help documentation for date/time classes in R you‚Äôll see that R has something a little more complicated going on. The details don‚Äôt matter for this post, but you should be aware that <em>Dates</em> (and <em>POSIXct</em> objects) are stored as <em>doubles</em>. They aren‚Äôt stored as integers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb130-1"><span class="fu" style="color: #4758AB;">typeof</span>(today)</span>
<span id="cb130-2"><span class="fu" style="color: #4758AB;">typeof</span>(now)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "double"
[1] "double"</code></pre>
</div>
</div>
<p>In any case, given that the Arrow <em>date32</em> type and the R <em>Date</em> class are so similar to each other in structure and intended usage, it is natural to map R <em>Dates</em> to Arrow <em>date32</em> types and vice versa, and that‚Äôs what the <strong>arrow</strong> package does by default.</p>
<p><br></p>
</section>
<section id="arrow-the-date64-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-date64-type">[Arrow] The date64 type</h3>
<p>The <em>date64</em> type is similar to the <em>date32</em> type, but instead of storing the number of days since 1970-01-01 as a 32-bit integer, it stores the number of milliseconds since 1970-01-01 00:00:00 UTC as a 64-bit integer. It‚Äôs similar to the <em>POSIXct</em> class in R, except that (1) it uses milliseconds instead of seconds; (2) the internal storage is an <em>int64</em>, not a <em>double</em>; and (3) it does not have metadata and cannot represent timezones.</p>
<p>As you might have guessed, the <em>date64</em> type in Arrow isn‚Äôt very similar to the <em>Date</em> class in R. Because it represents time at the millisecond level, the intended use of the <em>date64</em> class is in situations where you want to keep track of units of time smaller than one day. Sure, I CAN create <em>date64</em> objects from R <em>Date</em> objects if I want to‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb132-1"><span class="fu" style="color: #4758AB;">scalar</span>(today, <span class="fu" style="color: #4758AB;">date64</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23</code></pre>
</div>
</div>
<p>‚Ä¶but this is quite wasteful. Why use a 64-bit representation that tracks time at the millisecond level when all I‚Äôm doing is storing the date? Although <em>POSIXct</em> and <em>date64</em> aren‚Äôt exact matches, they‚Äôre more closely related to each other than <em>Date</em> and <em>date64</em>. So let‚Äôs create an Arrow analog of <code>now</code> as a <em>date64</em> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb134-1">now_date64 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">date64</span>())</span>
<span id="cb134-2">now_date64</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23</code></pre>
</div>
</div>
<p>The output is printed as a date, but this is a little bit misleading because it doesn‚Äôt give you a good sense of the level of precision in the data. Again we can peek under the hood by explicitly casting this to a 64-bit integer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb136-1">now_date64<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">int64</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
1661223952729</code></pre>
</div>
</div>
<p>This isn‚Äôt a count of the number of days since the unix epoch, it‚Äôs a count of the number of milliseconds. It is essentially the same number, divided by 1000, as the one we obtained when I typed <code>unclass(now)</code>.</p>
<p>However, there‚Äôs a puzzle here that we need to solve. Let‚Äôs take another look at <code>unclass(now)</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb138-1"><span class="fu" style="color: #4758AB;">unclass</span>(now)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1661223953
attr(,"tzone")
[1] "Asia/Tokyo"</code></pre>
</div>
</div>
<p>This might strike you as very weird. On the face of it, what has happened is that I have taken <code>now</code> (which ostensibly represents time at ‚Äúsecond-level‚Äù precision), ported it over to Arrow, and created an object <code>now_date64</code> that apparently knows what millisecond it is???? How is that possible? Does Arrow have magic powers?</p>
<p>Not really. R is playing tricks here. Remember how I said that <em>POSIXct</em> objects are secretly <em>doubles</em> and not <em>integers</em>? Well, this is where that becomes relevant. It‚Äôs quite hard to get R to confess that a <em>POSIXct</em> object actually knows the time at a more precise level than ‚Äúto the nearest second‚Äù but you can get it do to so by coercing it to a <em>POSIXlt</em> object and then taking a peek at the <code>sec</code> variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb140-1"><span class="fu" style="color: #4758AB;">as.POSIXlt</span>(now)<span class="sc" style="color: #5E5E5E;">$</span>sec</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 52.72954</code></pre>
</div>
</div>
<p>Aha! The first few digits of the decimal expansion are the same ones stored as the least significant digits in <code>now_date64</code>. The data was there all along. Even though <code>unclass(now)</code> produces an output that has been rounded to the nearest second, the original <code>now</code> variable is indeed a <em>double</em>, and it does store the time a higher precision! Ultimately, the accuracy of the time depends on the system clock itself, but the key thing to know here is that even though <em>POSIXct</em> times are almost always displayed to the nearest second, they do have the ability to represent more precise times.</p>
<p>Because of this, the default behaviour in <strong>arrow</strong> is to convert <em>date64</em> types (64-bit integers interpreted as counts of milliseconds) to <em>POSIXct</em> classes (which are secretly 64-bit <em>doubles</em> interpreted as counts of seconds).</p>
<p>Right. Moving on.</p>
<p><br></p>
</section>
<section id="arrow-the-timestamp-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-timestamp-type">[Arrow] The timestamp type</h3>
<p>The last of the Arrow date/time types is the <em>timestamp</em>. The core data structure is a 64-bit integer used to count the number of time units that have passed since the unix epoch, and this is associated with two additional pieces of metadata: the time unit used (e.g., ‚Äúseconds‚Äù, ‚Äúmilliseconds,‚Äùmicroseconds‚Äù, ‚Äúnanoseconds‚Äù), and the timezone. As with the <em>POSIXct</em> class in R, the timezone metadata is optional, but the time unit is necessary. The default is to use microseconds (i.e., <code>unit = "us"</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb142-1"><span class="fu" style="color: #4758AB;">scalar</span>(now)</span>
<span id="cb142-2"><span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">timestamp</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"us"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23 03:05:52.729535
Scalar
2022-08-23 03:05:52.729535</code></pre>
</div>
</div>
<p>Alternatively, we could use seconds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb144-1"><span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">timestamp</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"s"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23 03:05:52</code></pre>
</div>
</div>
<p>It‚Äôs important to recognise that changing the unit does more than change the precision at which the <em>timestamp</em> is printed. It changes ‚Äúthe thing that is counted‚Äù, so the numbers that get stored in the <em>timestamp</em> are quite different depending on the unit. Compare the numbers that are stored when the units are seconds versus when the units are nanoseconds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb146-1"><span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">timestamp</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"s"</span>))<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">int64</span>())</span>
<span id="cb146-2"><span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">timestamp</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"ns"</span>))<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">int64</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
1661223952
Scalar
1661223952729535744</code></pre>
</div>
</div>
<p>Okay, what about timezone?</p>
<p>Recall that <code>now</code> has a timezone attached to it, because I explicitly recorded the <code>tzone</code> attribute earlier. Admittedly I lied and I said I was in Tokyo and not in Sydney, but still, that information is in the <code>now</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb148-1">now</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 12:05:52 JST"</code></pre>
</div>
</div>
<p>When I print the R object it displays the time in the relevant time zone. The output for the Arrow object doesn‚Äôt do that: the time as displayed is shown in UTC. However, that doesn‚Äôt mean that the metadata isn‚Äôt there:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb150-1">now_timestamp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(now)</span>
<span id="cb150-2">now_timestamp<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Timestamp
timestamp[us, tz=Asia/Tokyo]</code></pre>
</div>
</div>
<p>I mention this because this caused me a considerable amount of panic at one point when I thought my timezone information had been lost when importing data from <em>POSIXct</em> into Arrow. Nothing was lost, it is simply that the <strong>arrow</strong> R package prints all timestamps in the corresponding UTC time regardless of what timezone is specified in the metadata.</p>
<p>There is, however, a catch. This worked last time because I was diligent and ensured that my <code>now</code> variable encoded the timezone. By default, a <em>POSIXct</em> object created by <code>Sys.time()</code> will not include the timezone. It‚Äôs easy to forget this because the <code>print()</code> method for <em>POSIXct</em> objects will inspect the system timezone if the <em>POSIXct</em> object doesn‚Äôt contain any timezone information, so it can often look like you have a timezone stored in your <em>POSIXct</em> object when actually you don‚Äôt. When that happens, Arrow can‚Äôt help you. Because the <em>POSIXct</em> object does not have a timezone (all appearances to the contrary), the object that arrives in Arrow won‚Äôt have a timezone either. Here‚Äôs what I mean:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb152-1"><span class="co" style="color: #5E5E5E;"># a POSIXct object with no timezone</span></span>
<span id="cb152-2">new_now <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>() <span class="co" style="color: #5E5E5E;"># has no time zone...</span></span>
<span id="cb152-3">new_now               <span class="co" style="color: #5E5E5E;"># ... but appears to!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 13:05:52 AEST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb154-1"><span class="co" style="color: #5E5E5E;"># an Arrow timestamp with no timezone</span></span>
<span id="cb154-2">new_now_timestamp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(new_now)</span>
<span id="cb154-3">new_now_timestamp<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Timestamp
timestamp[us, tz=Australia/Sydney]</code></pre>
</div>
</div>
<p>The take-home message in all this is that if you‚Äôre going to be working in both Arrow and R, and using the <strong>arrow</strong> package for data interchange, you‚Äôd be well advised to be careful with your <em>POSIXct</em> objects and timezones. They are trickier than they look, and can lead to subtle translation errors if you are not careful!</p>
<p><br></p>
</section>
<section id="um-but-what-about-posixlt" class="level3">
<h3 class="anchored" data-anchor-id="um-but-what-about-posixlt">Um, but what about POSIXlt?</h3>
<p>At long last we come to <em>POSIXlt</em>, which has no clear analog in Arrow. The key idea behind <em>POSIXlt</em> is to represent temporal information in terms of multiple different units: days, weeks, years, seconds, timezones, and so on. It‚Äôs a very different kind of thing to a <em>POSIXct</em> object in R or a <em>timestamp</em> in Arrow. In R terms, it‚Äôs essentially a <em>list</em>, and as a consequence the default behaviour in <strong>arrow</strong> is to import it as a <em>struct</em> (which serves essentially the same purpose). Here‚Äôs how that looks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb156-1"><span class="fu" style="color: #4758AB;">scalar</span>(now_lt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
...</code></pre>
</div>
</div>
<p>The <em>struct</em> object contains named fields that are identical to their <em>POSIXlt</em> equivalents, and whose types have been translated according to the default mappings: <code>sec</code> is a <em>double</em>, <code>min</code> is an <em>int32</em>, <code>hour</code> is an <em>int32</em>, <code>zone</code> is a <em>string</em>, and so on.</p>
<p>This arrangement, where <em>POSIXct</em> maps to <em>timestamp</em> and <em>POSIXlt</em> maps to <em>struct</em>, makes perfect sense when you think about the underlying data structures that <em>POSIXct</em> and <em>POSIXlt</em> encode. Where things can be tricky for the R user is in the ‚Äúmental account keeping‚Äù. In order to be helpful, R displays <em>POSIXct</em> and <em>POSIXlt</em> objects in exactly the same way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb158-1">now</span>
<span id="cb158-2">now_lt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 12:05:52 JST"
[1] "2022-08-23 12:05:52 JST"</code></pre>
</div>
</div>
<p>Not only that, because <em>POSIXct</em> and <em>POSIXlt</em> are both subclasses of the <em>POSIXt</em> class, R allows you to perform temporal arithmetic on objects of different types:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb160-1">now <span class="sc" style="color: #5E5E5E;">-</span> now_lt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 0 secs</code></pre>
</div>
</div>
<p>This is very convenient from a data analysis perspective, since calculations performed with date/time classes ‚Äújust work‚Äù even though <em>POSIXct</em> objects are secretly <em>doubles</em> and <em>POSIXlt</em> objects are secretly <em>lists</em>. However, all this happens invisibly. In much the same way that it‚Äôs easy to forget that <em>POSIXct</em> objects may not encode a timezone even though they look like they do, it can be easy to forget that <em>POSIXct</em> and <em>POSIXlt</em> are fundamentally different objects, and they map onto quite different data structures in Arrow.</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4836.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="duration-types" class="level2">
<h2 class="anchored" data-anchor-id="duration-types">Duration types</h2>
<p>Any discussion of temporal data is incomplete without a discussion of duration types, which are used to describe a length of time without reference to any fixed origin. The figure below shows the default mappings used by <strong>arrow</strong>:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/duration-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for duration types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<section id="r-the-difftime-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-difftime-class">[R] The difftime class</h3>
<p>In base R, the difference between two date/time objects is stored as a <em>difftime</em> object. To give a better illustration of a <em>difftime</em> object, let‚Äôs create <code>diff</code>, a variable that stores the amount of time elapsed between executing the R markdown chunk that first computed the <code>now</code> variable, and executing the R markdown chunk below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb162-1">new_now <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb162-2">rmd_time <span class="ot" style="color: #003B4F;">&lt;-</span> new_now <span class="sc" style="color: #5E5E5E;">-</span> now</span>
<span id="cb162-3">rmd_time</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 0.5508101 secs</code></pre>
</div>
</div>
<p>Now let‚Äôs take a look at how it‚Äôs actually stored:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb164-1"><span class="fu" style="color: #4758AB;">unclass</span>(rmd_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.5508101
attr(,"units")
[1] "secs"</code></pre>
</div>
</div>
<p>The duration is represented as a <em>double</em> variable, and the <code>"units"</code> attribute is used to specify the time unit that it represents: ‚Äúsecs‚Äù, ‚Äúmins‚Äù, ‚Äúhours‚Äù, ‚Äúdays‚Äù or ‚Äúweeks‚Äù. Unless the user specifies exactly which unit is to be used, R will attempt to make a sensible choice. For instance, if I were to do this,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb166-1">hedy_lamarr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXct</span>(<span class="st" style="color: #20794D;">"1914-11-09 19:30:00"</span>, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"Europe/Vienna"</span>)</span>
<span id="cb166-2">hedy_age <span class="ot" style="color: #003B4F;">&lt;-</span> now <span class="sc" style="color: #5E5E5E;">-</span> hedy_lamarr</span>
<span id="cb166-3">hedy_age</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 39368.36 days</code></pre>
</div>
</div>
<p>I would learn that it has been 39368 days since <a href="https://en.wikipedia.org/wiki/Hedy_Lamarr">Hedy Lamarr</a> was born.<sup>32</sup> More to the point, R has guessed that the length of time is sufficiently long that ‚Äúseconds‚Äù aren‚Äôt the appropriate encoding unit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb168-1"><span class="fu" style="color: #4758AB;">unclass</span>(hedy_age)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 39368.36
attr(,"units")
[1] "days"</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="arrow-the-duration-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-duration-type">[Arrow] The duration type</h3>
<p>The <em>difftime</em> class in R has a natural analog in Arrow, the <em>duration</em> type. As usual though, they are not exactly equivalent to one another. An R <em>difftime</em> object stores the value as a <em>double</em>, so it has no problems storing 0.55 as the value and setting the units to be seconds. This doesn‚Äôt work very well in Arrow because the value is stored as a signed 64 bit integer (<em>int64</em>), and a value of 0.55 seconds will simply round down to a duration of zero seconds. When importing my duration data into Arrow, then, I should be careful to ensure I choose a higher precision unit. If I don‚Äôt, things can go a little awry:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb170-1">rmd_time_arrow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(rmd_time)</span>
<span id="cb170-2">rmd_time_arrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0</code></pre>
</div>
</div>
<p>Hm. Zero seconds was not exactly the answer I was looking for. It helps a little to take a peek at the data type and see what precisely it is that I have just created:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb172-1">rmd_time_arrow<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DurationType
duration[s]</code></pre>
</div>
</div>
<p>This reveals my mistake. I‚Äôve encoded the time rounded to the nearest second, which is not very useful in this instance. What I really should have done is specify a higher level of precision. To import a <em>duration</em> into Arrow rounded to the nearest microsecond, I can do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb174-1">rmd_time_arrow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(rmd_time, <span class="fu" style="color: #4758AB;">duration</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"us"</span>))</span>
<span id="cb174-2">rmd_time_arrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
550810</code></pre>
</div>
</div>
<p>That‚Äôs a little better! Again, I can inspect the data type and see that the unit of encoding is now set to microseconds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb176" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb176-1">rmd_time_arrow<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DurationType
duration[us]</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="r-the-hmshms-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-hmshms-class">[R] The hms::hms class</h3>
<p>So where are we up to in our voyage through the world of dates, times, and durations in the R world? We‚Äôve talked about situations where you can specify a fixed date (with the <em>Date</em> class) and situations where you can specify a fixed moment in time (with <em>POSIXct</em> and <em>POSIXlt</em> classes). We‚Äôve also talked about situations where you can specify an amount of time without fixing it to a specific date or time (with the <em>difftime</em> class). What we haven‚Äôt talked about is how to store the time of day. In base R you can talk about a date without needing to specify a time, or you can talk about times and dates together, but what you can‚Äôt do is specify a time on its own without a date.</p>
<p>The <strong>hms</strong> package fixes this by supplying the <em>hms</em> class. Internally, it‚Äôs just a <em>difftime</em> object that counts the number of seconds elapsed since midnight. As I type these words the current time is 14:05:25, and I could create an <em>hms</em> object representing this like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb178" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb178-1">hms_time <span class="ot" style="color: #003B4F;">&lt;-</span> hms<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hms</span>(<span class="at" style="color: #657422;">seconds =</span> <span class="dv" style="color: #AD0000;">25</span>, <span class="at" style="color: #657422;">minutes =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">hours =</span> <span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb178-2">hms_time</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>14:05:25</code></pre>
</div>
</div>
<p>The nice thing about <em>hms</em> times is that they inherit from <em>difftime</em>, which we can see by checking the class vector for our <code>hms_time</code> object</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb180" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb180-1"><span class="fu" style="color: #4758AB;">class</span>(hms_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "hms"      "difftime"</code></pre>
</div>
</div>
<p>Just to show that there really isn‚Äôt anything fancy going on, let‚Äôs strip the class attribute away and let R print out the raw object. As the output here shows, an <em>hms</em> object has the same underlying structure as a regular <em>difftime</em> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb182" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb182-1"><span class="fu" style="color: #4758AB;">unclass</span>(hms_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 50725
attr(,"units")
[1] "secs"</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="arrow-the-time32-and-time64-types" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-time32-and-time64-types">[Arrow] The time32 and time64 types</h3>
<p>What about Arrow?</p>
<p>At a technical level, it would be perfectly possible to translate an <em>hms</em> object in R into an Arrow <em>duration</em> object, but that feels slightly unnatural. The entire reason why the <em>hms</em> class exists in R is that we ‚Äì the human users ‚Äì attach special meaning to the ‚Äúduration of time that has elapsed since midnight on an arbitrary day‚Äù. We call it the time of day, and while technically it is possible to represent the time of day as a duration (or an <em>hms</em> as a <em>difftime</em>), human beings like to treat special things as special for a reason.</p>
<p>Because of this, Arrow supplies two data types that are roughly analogous to the <em>hms</em> class in R, called <em>time32</em> and <em>time64</em>. The <em>time32</em> type stores the time of day as a signed 32-bit integer, which represents the number of seconds (or alternatively, milliseconds) since midnight. By default, the <strong>arrow</strong> package will translate an <em>hms</em> object to a <em>time32</em> type, using seconds as the unit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb184-1">hms_time32_s <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(hms_time)</span>
<span id="cb184-2">hms_time32_s</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
14:05:25</code></pre>
</div>
</div>
<p>As usual, let‚Äôs just verify that the encoding unit is as expected:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb186-1">hms_time32_s<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time32
time32[s]</code></pre>
</div>
</div>
<p>Yep, we‚Äôre all good! To switch to milliseconds, I would use a command like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb188-1">hms_time32_ms <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(hms_time, <span class="fu" style="color: #4758AB;">time32</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"ms"</span>))</span>
<span id="cb188-2">hms_time32_ms</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
14:05:25.000</code></pre>
</div>
</div>
<p>Notice that the output shows the time in a little more resolution. I find this a helpful touch, since it provides a visual cue letting me know what the unit is. But just to confirm, let‚Äôs inspect the type explicitly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb190-1">hms_time32_ms<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time32
time32[ms]</code></pre>
</div>
</div>
<p>If you need to represent the time of day at a higher degree of precision, you‚Äôll want to use the <em>time64</em> type, which (shockingly!) represents the time of day as a signed 64-bit integer. When using the <em>time64</em> class you can choose microseconds (<code>unit = "us"</code>) or nanoseconds (the default, <code>unit = "ns"</code>) as the unit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb192" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb192-1">hms_time64_us <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(hms_time, <span class="fu" style="color: #4758AB;">time64</span>())</span>
<span id="cb192-2">hms_time64_us</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
14:05:25.000000000</code></pre>
</div>
</div>
<p>The display is showing more trailing zeros, so you can already be sure that the encoding unit has changed. So the only real question you might have pertains to the author. Will she be tediously predictable and check the data type yet again to verify that the encoding unit is nanoseconds, just like she has done every time before? Yes. Yes she will:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb194" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb194-1">hms_time64_us<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time64
time64[ns]</code></pre>
</div>
</div>
<p>She is quite tiresome at times.</p>
<p>In essence, the <strong>arrow</strong> defaults are set up such that if you choose <code>time32()</code> when going from R to Arrow without specifying a unit, you will end up with the lowest precision representation of time (rounded to the nearest second), whereas if you do the same with <code>time64()</code> you end up with the highest precision (nanosecond level) representation. When going the other way, <strong>arrow</strong> will map <em>time32</em> types and <em>time64</em> types to hms objects, and the end result is that the time of day will be stored as a <em>double</em>.</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4783.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="other-types" class="level2">
<h2 class="anchored" data-anchor-id="other-types">Other types</h2>
<p>As with any story told by humans, this one is incomplete. When I started writing this post I had the ambition to cover every single line in the <a href="https://arrow.apache.org/docs/r/articles/arrow.html#mapping-of-r-arrow-types">Table of R/Arrow mappings</a> shown in the <strong>arrow</strong> documentation. I didn‚Äôt quite get there in the end, and there are a few missing cases. I‚Äôll briefly mention them here:</p>
<ul>
<li><p>Arrow possesses a ‚Äúnull‚Äù value used to represent missing data, and behaves similarly to <code>NA</code> in R. In base R there are several different <code>NA</code> values, corresponding to the different atomic types: <code>NA_logical</code>, <code>NA_character</code>. The way this is handled in <strong>arrow</strong> is to rely on the <strong>vctrs</strong> package. Specifically, in <strong>vctrs</strong> there is a <em>vctrs_unspecified</em> class that works very well here, so Arrow <em>nulls</em> map to <em>vctrs_unspecified</em> and vice versa. In practice, this is where <code>NA</code> values enter into the picture.</p></li>
<li><p>In R there is the concept of the <em>raw</em> type used to represent bytes. Arrow doesn‚Äôt have a natural equivalent of this, but the closest is an unsigned 8-bit integer, so the default is to map <em>raw</em> to <em>uint8</em>.</p></li>
<li><p>I haven‚Äôt talked about <em>factors</em> at all, and frankly I probably should have. My only excuse is exhaustion. The post was getting very long and I ran out of energy. The analog of <em>factors</em> in Arrow is the <em>dictionary</em> type. They‚Äôre not exact mirrors of each other so it‚Äôs worth reading the documentation, but it‚Äôs close enough that <em>factors</em> are mapped to <em>dictionaries</em> and vice versa.</p></li>
<li><p>R and Arrow both allow more complicated data structures to be included as columns within a <em>data frame</em> (or <em>Table</em>). For example, in R each element of a column can itself be a <em>data frame</em>. In such cases, the default in <strong>arrow</strong> is to map each R <em>data frame</em> onto an Arrow <em>struct</em>. Again, this is one where it‚Äôs worth reading the documentation, because there are some subtleties with how things like <em>list</em> columns are handled.</p></li>
</ul>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4784.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="the-magic-goes-away" class="level2">
<h2 class="anchored" data-anchor-id="the-magic-goes-away">The magic goes away</h2>
<blockquote class="blockquote">
<p>‚ÄúBeing in love ruins my judgement. It takes my mind off what I‚Äôm doing, and I ruin spells‚Äù <br> &nbsp;&nbsp; ‚Äì Mirandee, from <a href="https://en.wikipedia.org/wiki/The_Magic_Goes_Away">The Magic Goes Away</a> by Larry Niven</p>
</blockquote>
<p>When I first started using <strong>arrow</strong>, it was the magic I loved most. Everything just worked. I could move data between R and Arrow without having to think, I could manipulate enormous data sets using <strong>dplyr</strong> syntax that I‚Äôd never even be able to load into R, and I never had to look under the hood. Magic is always compelling. It is delightful. It makes the user feel joy, and it‚Äôs the experience the developer wants to provide.</p>
<p>But as any teacher will tell you, the magic always goes away. There comes a time when you have to sit down and read the manuals. You have to understand how the magic works, and when you do understand you realise there is no magic. At best, there is design. A system can work using all the default settings because it has been thoughtfully designed, but you will eventually encounter situations when the defaults don‚Äôt apply to you. It‚Äôs taken me some time to piece all this together, and at the end of the process I feel a lot more confident in my judgment. Having a deeper understanding of data types in Arrow and R is useful to me, even if I‚Äôm only using the default schemas.</p>
<p>I hope the post is helpful for anyone else following a similar path.<sup>33</sup> <!--
- https://arrow.apache.org/docs/r/articles/arrow.html
- https://arrow.apache.org/docs/cpp/api/datatype.html
--></p>
<div class="cell">

</div>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>To be honest, if my goal had been to read the data into Arrow, there was never a need to read it into R in the first place. The code <code>read_csv_arrow("magicians.csv", as_data_frame = FALSE)</code> would create the <em>Table</em> object directly with no need for an intermediary in R. However, for the purposes of this post I‚Äôm pretending that I have data in R that I want to transfer to Arrow in order to talk about the translation process, so I‚Äôm doing things in a rather inefficient way. On top of that, there‚Äôs a whole extra layer of complexity I‚Äôm hiding here that relates to ALTREP vectors backed by Arrow. However, that‚Äôs a topic for a future post. We can only unravel the magical cloak one thread at a time!‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Early in the writing process for this post I talked to the very lovely Jon Keane about this, and they pointed out that there‚Äôs a big difference in the ‚Äúread‚Äù functions in <strong>arrow</strong> and the ‚Äútranslate‚Äù functions. The code in the <code>read_*()</code> functions is complicated: it handles everything for you because ‚Äúreading the data‚Äù is a constrained task and the developers can optimise almost everything for you, including the strange edge cases. Translation is harder, and there‚Äôs less the developers can do to support it. As a consequence, the code underpinning <code>schema()</code> is much simpler. It takes care of choices for you when those choices are ‚Äúobvious‚Äù, but it leaves all the edge cases for you to deal with. There are a lot of weird edge cases because ‚Äútranslating between languages‚Äù is under-determined. Edge cases are left to the user because only the user knows the context.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>If you have never watched <em>The Magicians</em> I really need to emphasise that it was a really, really weird show and this is nowhere near as implausible as it might sound. I have literally scared off men who had previously been quite keen on me by making them watch this show. Not kidding.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>Back my former life as an mathematical psychologist I studied this stuff for a living, and wrote an <a href="https://djnavarro.net/papers/">absurd number of academic papers</a> on how people learn and represent categories. What I <em>wanted</em> to understand was the relationship between human and machine learning, between natural and artificial intelligence, and so on. What I <em>actually</em> learned is that humans and machines are both super weird.‚Ü©Ô∏é</p></li>
<li id="fn5"><p>At this point I feel compelled to point out that while I may <em>appear</em> to be a bright young thing with little experience of the world, I am in fact a 44 year old woman and former academic who has read quite a few papers on algorithmic information theory and related fields. So, if you happen to be thinking thoughts along the lines of ‚Äúaha, she doesn‚Äôt know about Turing equivalence!‚Äù and are considering explaining it to me‚Ä¶ please don‚Äôt. This is one of those situations where that pesky little ‚Äúfinite length‚Äù prefix code required to allow machine P to simulate machine Q actually matters, and sometimes ‚Äúfinite‚Äù includes values like ‚Äústaggeringly, painfully large‚Äù. As I used to wearily tell my students, in real life you can‚Äôt ignore the <img src="https://latex.codecogs.com/png.latex?O(1)"> terms.‚Ü©Ô∏é</p></li>
<li id="fn6"><p>As an aside, Michel Foucault actually refers to this Borges passage in the preface to his famous work <a href="https://en.wikipedia.org/wiki/The_Order_of_Things"><em>The Order of Things: An Archaeology of the Human Sciences</em></a> on how different cultures and historical periods viewed the world from fundamentally different perspectives. According to Foucault, Borges essay ‚Äúshattered ‚Ä¶ all the familiar landmarks of thought ‚Äî our thought, the thought that bears the stamp of our age and our geography ‚Äî breaking up all the ordered surfaces and all the planes with which we are accustomed to tame the wild profusion of existing things‚Äù. Seems fair to say that Borges‚Äô essay was not without its admirers.‚Ü©Ô∏é</p></li>
<li id="fn7"><p>Much like the Honourable Member for Kennedy, this <a href="https://www.youtube.com/watch?v=1i739SyCu9I">‚Äúlet a thousand OOP systems bloom‚Äù</a> philosophy has made me cry many times: sometimes from joy, often from frustration.‚Ü©Ô∏é</p></li>
<li id="fn8"><p>The typographical notation for R6 varies because the term can be used to refer to the OOP system itself (which I denote as R6), but could also refer to the <strong>R6</strong> package or the <em>R6</em> object type.‚Ü©Ô∏é</p></li>
<li id="fn9"><p>Note that the <code>Table</code> object is not a <em>Table</em>: it is the class prototype for <em>Table</em> objects, and is therefore classed <em>R6ClassGenerator</em>. The same is true for <code>Scalar</code>, <code>Schema</code>, <code>ChunkedArray</code>, etc.‚Ü©Ô∏é</p></li>
<li id="fn10"><p>Should I take this opportunity to discuss the fact that this means that what R actually implements is a <a href="https://en.wikipedia.org/wiki/Three-valued_logic">three valued logic</a>? No.&nbsp;No I should not. I am going to think it very loudly though.‚Ü©Ô∏é</p></li>
<li id="fn11"><p>Lest anyone think I am too wanton in my use of footnotes in tech blogging, I will simply mention that Dan has a 77-footnote <a href="https://dansblog.netlify.app/posts/2021-11-24-getting-into-the-subspace/">blog post on Gaussian Processes</a>. I am the <em>nice</em> queer in the room.‚Ü©Ô∏é</p></li>
<li id="fn12"><p>There is also an R6 method you could use here. <code>snowpiercer$as_vector()</code> would produce exactly the same answer.‚Ü©Ô∏é</p></li>
<li id="fn13"><p>Okay that was a tortured metaphor and one that I probably don‚Äôt want to push too far given that <em>Snowpiercer</em> is a terrifyingly dark show filled with horrible, horrible people. But I‚Äôm nice though. Honest! Would I lie to you?‚Ü©Ô∏é</p></li>
<li id="fn14"><p>Rest assured, dear reader, while I am entirely aware of the distinction between countably and uncountably infinite sets, and have been forced to learn more about the cardinality of transfinite numbers than any human deserves to endure, I will not be discussing any of that in this post. The word ‚Äúinfinite‚Äù is perfectly serviceable for our purposes, and if anyone even TRIES to discuss this with me further on twitter I will be forced to engage the services of a very unpleasant lawyer‚Ä¶‚Ü©Ô∏é</p></li>
<li id="fn15"><p>The ‚Äúdesert of the real‚Äù phrase in the title of the section refers to the real numbers, but it‚Äôs also a quote from <em>Simulacra and Simulation</em> and <a href="https://en.wikipedia.org/wiki/The_Matrix"><em>The Matrix</em></a>. Obviously I encountered it in <em>The Matrix</em> first because, all appearances to the contrary, I am uncultured swine.‚Ü©Ô∏é</p></li>
<li id="fn16"><p>At this point it is traditional to make a joke about Zeno‚Äôs paradox of <a href="https://en.wikipedia.org/wiki/Zeno%27s_paradoxes#Achilles_and_the_tortoise">Achilles and the Tortoise</a> and honestly I did try, but to come up with a good joke I first had to get half an idea, and then I had to refine it half way to being a better idea, and then I had to refine that half way and‚Ä¶ I guess I never quite got there in the end. Sorry.‚Ü©Ô∏é</p></li>
<li id="fn17"><p>Sigh. Technically, this is the last bit. R uses a <a href="https://en.wikipedia.org/wiki/Endianness">little-endian</a> representation here which I have flipped to a big-endian format so that it can be read from left to right, but for the love of all that is good and precious in this world please let me simplify a few things okay?‚Ü©Ô∏é</p></li>
<li id="fn18"><p>Okay, if you were reading closely earlier you might be thinking this is wrong and the range should be -1023 to 1024. The reason it‚Äôs not is that those to values are reserved for ‚Äúspecial‚Äù numbers.‚Ü©Ô∏é</p></li>
<li id="fn19"><p>I still think ‚ÄúMan Tissa‚Äù would make a good drag king name, though I‚Äôve been unreliably informed that it may sound odd to Norwegians.‚Ü©Ô∏é</p></li>
<li id="fn20"><p>In fact, one of the obnoxious things about the reals (which are uncountably infinite) is that almost all reals have infinitely long mantissas. Even if you had a infinite number of digits to work with (a countably infinite set) you‚Äôre still in trouble. Everything sucks, real numbers are almost surely uncomputable (yes that‚Äôs an actual result), and I don‚Äôt want to think about it any more and I need a lie down.‚Ü©Ô∏é</p></li>
<li id="fn21"><p>Okay, so contrary to my stated intentions we‚Äôve actually ended up quite a long way down into the IEEE 754 standard, so I might as well make an extra observation while we‚Äôre down here. Tests of floating point equality aren‚Äôt tests of mathematical equality. They‚Äôre really just checks that the absolute difference between two numbers is smaller than the <a href="https://en.wikipedia.org/wiki/Machine_epsilon">machine precision</a>. The value of the machine precision is stored in R as <code>.Machine$double.eps</code>.‚Ü©Ô∏é</p></li>
<li id="fn22"><p>Some precision is needed here: in this post I am using the names that appear in the <a href="https://arrow.apache.org/docs/r/reference/data-type.html">documentation to the <strong>arrow</strong> R package</a>. I‚Äôm doing this because the intended audience is an R user who wants to use the <strong>arrow</strong> package to interact with Arrow. However, you should be aware that these types are given slightly different names in the C++ <a href="https://arrow.apache.org/docs/cpp/api/datatype.html">documentation to <strong>libarrow</strong></a> to which <strong>arrow</strong> provides bindings. In that documentation the terminology is as follows: <em>float64</em> is called <em>double</em>, <em>float32</em> is called <em>float</em>, and <em>float16</em> is called <em>half-float</em>.‚Ü©Ô∏é</p></li>
<li id="fn23"><p>They are both little-endian too.‚Ü©Ô∏é</p></li>
<li id="fn24"><p>That‚Äôs assuming we‚Äôre writing numbers in Arabic number system. I suppose it would be different if our orthographic representations adopted the <a href="http://www.mathematicsmagazine.com/Articles/TheSumerianMathematicalSystem.php">Sumerian sexagesimal notation</a>. Admittedly, neither R nor Arrow existed at the time, so it‚Äôs a moot point. All I‚Äôm really saying is that decimal systems are no less arbitrary than binary ones. The problem arises because of the mismatch, not because one encoding is inherently better than the other.‚Ü©Ô∏é</p></li>
<li id="fn25"><p>As noted in the R internals manual, the specific data structure is referred to as a <a href="https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Encodings-for-CHARSXPs">CHARSXP</a>. For the purposes of the current post I‚Äôm pretending that character strings are always encoded as UTF-8 because there‚Äôs no need to complicate matters by talking about things like Latin-1, but be aware that R does support those things. If you‚Äôre looking for a good overview of what UTF-8 encoding is all about, this blog post on <a href="https://deliciousbrains.com/how-unicode-works/">how unicode works</a> is helpful.‚Ü©Ô∏é</p></li>
<li id="fn26"><p>More strictly, it is a symbol that points to an object. R makes a distinction between the symbol and the object to which it links, and allows multiple labels to point at the same object. There‚Äôs an excellent discussion of this in <a href="https://adv-r.hadley.nz/names-values.html">Chapter 3 of <em>Advanced R</em></a>‚Ü©Ô∏é</p></li>
<li id="fn27"><p>Once again, there‚Äôs a little terminology to explain because there‚Äôs some inconsistency in how the types are referred to in the Arrow C++ documentation and the <strong>arrow</strong> R package documentation. In the <a href="https://arrow.apache.org/docs/cpp/api/datatype.html">list of data types</a> for <strong>libarrow</strong> you‚Äôll find references to <em>string</em> types and <em>large_string</em> types. However, in <a href="https://arrow.apache.org/docs/r/reference/data-type.html">list of data types</a> documentation for the <strong>arrow</strong> R package you‚Äôll see the same data types referred to as <em>utf8</em> and <em>large_utf8</em>.‚Ü©Ô∏é</p></li>
<li id="fn28"><p>No I am not going to talk about them in this post. Masochist though I may be, nobody loves that much pain. If you are curious you will simply have to wait for a later post!‚Ü©Ô∏é</p></li>
<li id="fn29"><p>Perhaps surprisingly, this number is encoded as a <em>double</em> and not an <em>integer</em>.‚Ü©Ô∏é</p></li>
<li id="fn30"><p>Again, this is stored as a <em>double</em> and not an integer. You can verify this with the command <code>typeof(Sys.time())</code>‚Ü©Ô∏é</p></li>
<li id="fn31"><p>A little counterintuitively, the value of <code>sec</code> ranges from 0 to 61, presumably because <a href="https://en.wikipedia.org/wiki/Leap_second">leap seconds</a> are a thing. I am NOT going to torture myself with that one today. My life has quite enough torture in it already.‚Ü©Ô∏é</p></li>
<li id="fn32"><p>Yes, I looked up her <a href="https://www.astro.com/astro-databank/Lamarr,_Hedy">time and location of birth</a> on an astrology website. I am, after all, a queer. I feel that I have been quite clear on this, and being weird about astrology it is one of the fine traditions of our people.‚Ü©Ô∏é</p></li>
<li id="fn33"><p>A thank you to Jon Keane, Steph Hazlitt, and Neal Richardson for helpful conversations, encouragement, and feedback that have greatly improved the post.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Data Types in {Arrow} and {R}},
  date = {2022-03-04},
  url = {https://blog.djnavarro.net/data-types-in-arrow-and-r},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúData Types in Arrow and R.‚Äù</span> March
4, 2022. <a href="https://blog.djnavarro.net/data-types-in-arrow-and-r">https://blog.djnavarro.net/data-types-in-arrow-and-r</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <guid>https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/index.html</guid>
  <pubDate>Thu, 03 Mar 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>R scripts for twitter mutes and blocks</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-02-11_r-scripts-for-twitter-blocks/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>Twitter is a complicated place. I‚Äôve met some of my closest friends through twitter, it‚Äôs the place where I keep in touch with my professional community, and it‚Äôs an important part of my work as a developer advocate at Voltron Data. But it‚Äôs also a general purpose social media site, and there is a lot of content out there I prefer not to see. In particular, because I‚Äôm transgender and have absolutely no desire to participate in or even view the public debate that surrounds trans lives, I want to keep that kind of content off my twitter feed. This is particularly salient to me today as a member of the Australian LGBT community. Most people who follow me on twitter probably wouldn‚Äôt be aware of it, but it‚Äôs been a rough week for LGBT folks in Australia courtesy of a rather intense political fight over LGBT rights and the ostensible (and in my personal opinion, largely fictitious) conflict with religious freedom. The details of Australian politics don‚Äôt matter for this post, however. What matters is that these kinds of political disputes necessarily spill over into my twitter feed, and it is often distressing. Events like this one are quite commonplace in my online life, and as a consequence I‚Äôve found it helpful to partially automate my use of twitter safety features such as muting and blocking. Because my experience is not unique, I thought it might be useful to write a short post talking about the the scripts I use to manage twitter safety features from R using the <a href="https://docs.ropensci.org/rtweet/">rtweet</a> package.</p>
<section id="warning-off-label-usage" class="level2">
<h2 class="anchored" data-anchor-id="warning-off-label-usage">Warning: off-label usage</h2>
<p>Let‚Äôs make one thing very clear at the outset. A lot of what I‚Äôm going to be doing in this blog post is ‚Äúoff label‚Äù use of the <strong>rtweet</strong> package. You‚Äôll see me use it in ways that the writers of the package didn‚Äôt really intend it to be used (I think), and you‚Äôll see me dig into the internals of the package and rely on unexported functions.</p>
<p>This is almost always a bad idea.</p>
<p>If you haven‚Äôt seen it, Hadley Wickham gave a very good talk about <a href="https://www.rstudio.com/resources/rstudioglobal-2021/maintaining-the-house-the-tidyverse-built/">maintaining R packages</a> as part the rstudio::global 2021 conference. At about the 19 minute mark he talks about the ‚Äúoff label‚Äù metaphor. In the context of medication, ‚Äúoff label‚Äù refers to any use of a medication that it‚Äôs not officially approved for. It might work, but there could be unknown consequences because maybe it hasn‚Äôt been fully explored in this context. When applied to software, ‚Äúoff label‚Äù use means you‚Äôre doing something with a function or package that the designer doesn‚Äôt really intend. Your code might work now, but if you‚Äôre relying on ‚Äúincidental‚Äù properties of the function to achieve your desired ends, you‚Äôre taking a risk. Package maintainers will usually go to considerable lengths to make sure that updates to their packages don‚Äôt break your code when you‚Äôre using it for its intended purpose‚Ä¶ but if you‚Äôre doing something ‚Äúoff label‚Äù there‚Äôs a good chance that the maintainers won‚Äôt have thought about your particular use case and they might unintentionally break your code.</p>
<p>In short: you go off-label at your own risk. In this particular instance it is a risk I‚Äôve chosen to take and I‚Äôm perfectly happy to fix my scripts if (or, let‚Äôs be realistic, <em>when</em>) future updates to <strong>rtweet</strong> cause them to break. Or possibly abandon my scripts. I knew the risks when I went off-label.</p>
<p>But if you follow me along this path you need to be aware of the risk too‚Ä¶ don‚Äôt go off-label lightly! In my case I didn‚Äôt do this on a whim: I chose this path about a year ago out of personal desperation, and I‚Äôve had to rewrite the scripts a lot in that time. So, please be careful.</p>
</section>
<section id="setting-up" class="level2">
<h2 class="anchored" data-anchor-id="setting-up">Setting up</h2>
<p>The first step is to make sure you have the <a href="https://github.com/ropensci/rtweet">developer version of rtweet</a>: the scripts I‚Äôve been using rely on the dev version of the package and won‚Äôt work with the current CRAN version. To be precise, I‚Äôm currently using rtweet version 0.7.0.9011. If you don‚Äôt have it, this is the command to install:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">remotes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"ropensci/rtweet"</span>)</span></code></pre></div>
</div>
<p>The second step is to authenticate so that <strong>rtweet</strong> can access private information about your twitter account. The good news here is that the authentication mechanism in the dev version of <strong>rtweet</strong> is a little more streamlined than it used to be. You only need to authenticate once on your machine, and the command is as simple as this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">auth_setup_default</span>()</span></code></pre></div>
</div>
<p>With that, you should be ready to start!</p>
</section>
<section id="write-a-blockmute-function" class="level2">
<h2 class="anchored" data-anchor-id="write-a-blockmute-function">Write a block/mute function</h2>
<p>Our first task will be to write a function that can be used either to block or to mute a twitter account. A little whimsically I decided to call it <code>cancel_user()</code>. Quite obviously the name is a personal joke, since it does not ‚Äúcancel‚Äù anyone: the only thing blocking or muting accomplishes is to give you a little distance from the account you‚Äôre muting or blocking.</p>
<p>The reason for wanting one function that can switch between muting and blocking is that I typically run every process twice, once on my primary account (where, with one exception, I don‚Äôt block anyone but mute extensively) and once on my private account (where I block quite aggressively). I‚Äôd like to be able to reuse my code in both contexts, so I‚Äôll design the core function to handle both blocks and mutes. Here‚Äôs the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">cancel_user <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(user, type) {</span>
<span id="cb3-2">  api <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;">"block"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"/1.1/blocks/create"</span>,</span>
<span id="cb3-4">    <span class="st" style="color: #20794D;">"mute"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"/1.1/mutes/users/create"</span></span>
<span id="cb3-5">  )</span>
<span id="cb3-6">  rtweet<span class="sc" style="color: #5E5E5E;">:::</span><span class="fu" style="color: #4758AB;">TWIT_post</span>(</span>
<span id="cb3-7">    <span class="at" style="color: #657422;">token =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb3-8">    <span class="at" style="color: #657422;">api =</span> api[type],</span>
<span id="cb3-9">    <span class="at" style="color: #657422;">params =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">user_id =</span> user)</span>
<span id="cb3-10">  )</span>
<span id="cb3-11">}</span></code></pre></div>
</div>
<p>There‚Äôs quite a bit to unpack here.</p>
<p>First notice that I have called the internal function <code>rtweet:::TWIT_post()</code>. This is the clearest indication that I‚Äôm working off-label. If I were interested only in muting users and never blocking, I‚Äôd be able to do this without going off-label because <strong>rtweet</strong> has an exported function called <code>post_mute()</code> that you can use to mute an account. However, there is no corresponding <code>post_block()</code> function (possibly for good reasons) so I‚Äôve written <code>cancel_user()</code> as my personal workaround.</p>
<p>Second, let‚Äôs look at the interface to the function. Unlike the more sophisticated functions provided by <strong>rtweet</strong> this is a bare-bones interface. The <code>user</code> argument must be the numerical identifier corresponding to the account you want to block/mute, and <code>type</code> should be either be <code>"mute"</code> or <code>"block"</code> depending on which action you wish to take.</p>
<p>Finding the numeric user id code for any given user is straightforward with <strong>rtweet</strong>. It provides a handy <code>lookup_users()</code> function that you can employ for this. The actual output of the function is a data frame containing a lot of public information about the user, but the relevant information is the <code>user_id</code> variable. So, if you hate me enough to want to mute or block me on twitter, I‚Äôll make it easy on you. Here‚Äôs my numeric user id:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">lookup_users</span>(<span class="st" style="color: #20794D;">"djnavarro"</span>)<span class="sc" style="color: #5E5E5E;">$</span>user_id</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[1] "108899342"</code></pre>
</div>
</div>
<p>As it turns out, for the particular scripts I use, I rarely need to rely on <code>lookup_users()</code> but it is a very handy thing to know about.</p>
</section>
<section id="preparing-to-scale" class="level2">
<h2 class="anchored" data-anchor-id="preparing-to-scale">Preparing to scale</h2>
<p>As written there‚Äôs nothing particularly wrong with the <code>cancel_user()</code> function, but it‚Äôs also not very useful. I can use it to block or mute an individual account, sure, but if that were the problem I wanted to solve it would be a lot easier to do that using the block/mute buttons on twitter. I don‚Äôt need to write an R function to do that.</p>
<p>The only real reason to implement this as an R function is if you intend to automate it in some fashion and repeat the operation on a scale that would be impossible to do manually. To give a sense of the scale at which I‚Äôve had to implement this I currently have about 220000 accounts blocked from my private account, and a similar number muted from my main account. There‚Äôs no way I could possibly do that manually, so I‚Äôm going to need to be a little more thoughtful about my <code>cancel_user()</code> function.</p>
<section id="practice-safe-cancellation" class="level3">
<h3 class="anchored" data-anchor-id="practice-safe-cancellation">Practice safe cancellation</h3>
<p>The first step in making sure the function works well ‚Äúat scale‚Äù<sup>1</sup> is error handling. If I have a list of 50000 account I want to block but for one reason or another <code>cancel_user()</code> throws an error on the 5th account, I don‚Äôt want to prevent R from attempting to block the remaining 49995 accounts. Better to catch the error and move on. My preferred way to do this is to use <code>purrr::safely()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">cancel_safely <span class="ot" style="color: #003B4F;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">safely</span>(cancel_user)</span></code></pre></div>
</div>
<p>The <code>cancel_safely()</code> function operates the same way as <code>cancel_user()</code> with one exception. It never throws an error: it always returns a list with two elements, <code>result</code> and <code>error</code>. One of these is always <code>NULL</code>. If <code>cancel_user()</code> throws an error then <code>result</code> is <code>NULL</code> and <code>error</code> contains the error object; if it doesn‚Äôt then <code>error</code> is null and <code>result</code> contains the output from <code>cancel_user()</code>.</p>
<p>Not surprisingly, the <code>cancel_safely()</code> function is much more useful when we‚Äôre trying to block or mute large numbers of accounts on twitter.</p>
</section>
<section id="check-your-quotas-my-loves" class="level3">
<h3 class="anchored" data-anchor-id="check-your-quotas-my-loves">Check your quotas my loves</h3>
<p>One thing that has always puzzled me about the twitter API is that it places rate limits on how many mutes you can post in any 15 minute period, but doesn‚Äôt seem to impose any limits on the number of blocks you can post. I‚Äôm sure they have their reasons for doing it, but it‚Äôs inconvenient. One consequence of this is that there are lots of tools that exist already for blocking large numbers of accounts. You don‚Äôt actually need to write a custom R script for that! But if you want to mute large numbers of accounts, it‚Äôs a lot harder: you have to write a script that keeps posting mutes until the rate limits are exceeded, then pauses until they reset, and then starts posting mutes again. Speaking from experience, this takes a <em>very</em> long time. As a purely practical matter, you don‚Äôt want to be in the business of muting large numbers of accounts unless you are patient and have a very good reason. In my case, I did.</p>
<p>In any case, one thing we‚Äôll need to write a <code>rate_exceeded()</code> function that returns <code>TRUE</code> if we‚Äôve hit the rate limit and <code>FALSE</code> if we haven‚Äôt. That‚Äôs actually pretty easy to do, as it turns out, because any time our attempt to mute (or block) fails, the <code>cancel_safely()</code> function will catch the error and capture the error message. So all we have to do to write a <code>rate_exceeded()</code> function is to check to see if there‚Äôs an error message, and if there is a message, see if that message informs us that the rate limite has been exceeded. This function accomplishes that goal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">rate_exceeded <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(out) {</span>
<span id="cb7-2">  <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">is.null</span>(out<span class="sc" style="color: #5E5E5E;">$</span>error)) <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb7-3">  <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">grepl</span>(<span class="st" style="color: #20794D;">"limit exceeded"</span>, out<span class="sc" style="color: #5E5E5E;">$</span>error<span class="sc" style="color: #5E5E5E;">$</span>message)) <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb7-5">}</span></code></pre></div>
</div>
<p>Because blocks are not rate limited, in practice this function only applies when you‚Äôre trying to mute accounts.</p>
</section>
<section id="be-chatty-babes" class="level3">
<h3 class="anchored" data-anchor-id="be-chatty-babes">Be chatty babes</h3>
<p>The last step in preparing the cancellation function to work well at scale is to make it chatty. In practice, a mass block/mute operation is something you leave running in its own R session, so you want it to leave behind an audit trail that describes its actions. A moderately verbose function is good here. You could make this as sophisticated as you like, but I find this works nicely for me:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">cancel_verbosely <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(user, type) {</span>
<span id="cb8-2"></span>
<span id="cb8-3">  <span class="co" style="color: #5E5E5E;"># notify user attempt has started</span></span>
<span id="cb8-4">  msg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb8-5">    <span class="st" style="color: #20794D;">"block"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"blocking user id"</span>,</span>
<span id="cb8-6">    <span class="st" style="color: #20794D;">"mute"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"muting user id"</span></span>
<span id="cb8-7">  )</span>
<span id="cb8-8">  withr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">local_options</span>(<span class="at" style="color: #657422;">scipen =</span> <span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb8-9">  cli<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">cli_process_start</span>(<span class="fu" style="color: #4758AB;">paste</span>(msg[type], user))</span>
<span id="cb8-10"></span>
<span id="cb8-11">  <span class="co" style="color: #5E5E5E;"># make the attempt; wait 5 mins if rate limits </span></span>
<span id="cb8-12">  <span class="co" style="color: #5E5E5E;"># exceeded and try again</span></span>
<span id="cb8-13">  <span class="cf" style="color: #003B4F;">repeat</span> {</span>
<span id="cb8-14">    out <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cancel_safely</span>(user, type)</span>
<span id="cb8-15">    <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">rate_exceeded</span>(out)) {</span>
<span id="cb8-16">      <span class="fu" style="color: #4758AB;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;">300</span>)</span>
<span id="cb8-17">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-18">      <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb8-19">    }</span>
<span id="cb8-20">  }</span>
<span id="cb8-21"></span>
<span id="cb8-22">  <span class="co" style="color: #5E5E5E;"># notify user of the outcome</span></span>
<span id="cb8-23">  <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">is.null</span>(out<span class="sc" style="color: #5E5E5E;">$</span>result)) {</span>
<span id="cb8-24">    cli<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">cli_process_failed</span>()</span>
<span id="cb8-25">  } <span class="cf" style="color: #003B4F;">else</span>{</span>
<span id="cb8-26">    cli<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">cli_process_done</span>()</span>
<span id="cb8-27">  }</span>
<span id="cb8-28">}</span></code></pre></div>
</div>
<p>Here‚Äôs what the output looks like when it successfully blocks a user. Not fancy, but it shows one line per account, specifies whether the action was a block or a mute, and makes clear whether the attempt succeeded or failed:</p>
<pre><code>‚úì blocking user id 15xxxx66 ... done</code></pre>
<p>(where, in the real output the user id for the blocked account is of course not censored). In this function I‚Äôve used the lovely <a href="https://blog.djnavarro.net/pretty-little-clis">cli package</a> to create pretty messages at the R command line, but there‚Äôs nothing stopping you from using simpler tools if you‚Äôd prefer.</p>
</section>
</section>
<section id="scaling-up" class="level2">
<h2 class="anchored" data-anchor-id="scaling-up">Scaling up</h2>
<p>Now that we have a version of our block/mute function that is suitable for use on a larger scale, it‚Äôs time to put it into practice. Let‚Äôs say I have a list of 50000 <code>users</code> represented as numeric ids and I want to block (or mute) all these accounts. To do this, I‚Äôll need a vectorised version of cancellation function. Thanks to the functional programming tools in the <strong>purrr</strong> package, this is not too difficult. Here‚Äôs the <code>cancel_users()</code> function that I use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cancel_users <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(users, type) {</span>
<span id="cb10-2">  msg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"block"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"blocking "</span>, <span class="st" style="color: #20794D;">"mute"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"muting "</span>)</span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">cat</span>(msg[type], <span class="fu" style="color: #4758AB;">length</span>(users), <span class="st" style="color: #20794D;">" users</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">..."</span>)</span>
<span id="cb10-4">  purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">walk</span>(users, cancel_verbosely, <span class="at" style="color: #657422;">type =</span> type)</span>
<span id="cb10-5">}</span></code></pre></div>
</div>
<p>When given a vector of user ids, the <code>cancel_users()</code> function will attempt to block/mute them all one at a time. When rate limits are exceeded it will pause and wait for them to reset, and then continue with the process. For mass muting in particular it can take a long time, so it‚Äôs the kind of thing you run in its own session while you go do something else with your life. If you want to be clever about it you can make it a background job and sink the output to a log file but honestly I‚Äôm usually too lazy to bother with that: all I‚Äôm trying to do is sanitise my twitter experience, I‚Äôm not deploying production code here.</p>
<p>The trickier question is ‚Äúwhere do I get this block list from?‚Äù</p>
<p>Here, I‚Äôm not going to be too specific, for a couple of reasons. Firstly, I don‚Äôt want to be in the business of teaching people how to track down hidden networks of users embedded in social media. That‚Äôs not something I‚Äôm comfortable doing. Secondly, if you‚Äôre doing this defensively (i.e., you‚Äôre protecting yourself from attack) then you probably already know something about where the attacks are coming from. You already have your own list of key names, because they‚Äôre the people who keep harassing you. Really, your only goal is to block them and their followers, because the thing that‚Äôs happening is they‚Äôre targeting you and they‚Äôre using their follower base as a weapon. Right? I mean if that‚Äôs <em>not</em> the situation you‚Äôre in, and what you‚Äôre actually trying to do is seek out a hidden population to potentially target them‚Ä¶ yeah I‚Äôm not sure I want to be telling you the other tricks I know. So let‚Äôs keep it very simple.</p>
<p>The easiest trick in the book (and, honestly, one of the most powerful when you‚Äôre trying to block out harassment from a centralised ‚Äúhub-and-spokes‚Äù network), is simply to find every account that follows more than <img src="https://latex.codecogs.com/png.latex?k"> of the <img src="https://latex.codecogs.com/png.latex?n"> of the key actors, and block/mute them. Actually, in the case of ‚Äúastroturf‚Äù organisations that don‚Äôt have real grassroots support, you can probably just pick a few of the big names and block (or mute) all their followers. That will eliminate the vast majority of the horrible traffic that you‚Äôre trying to avoid. (Yes, I am speaking from experience here!)</p>
<p>The <strong>rtweet</strong> package makes this fairly painless courtesy of the <code>get_followers()</code> function. Twitter makes follower lists public whenever the account itself is public, so you can use <code>get_followers()</code> to return a tibble that contains the user ids for all followers of a particular account.<sup>2</sup> Here‚Äôs an example showing how you an write a wrapper around <code>get_followers()</code> and use it to block/mute everyone who follows a particular account:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cancel_followers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(user, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"block"</span>, <span class="at" style="color: #657422;">n_max =</span> <span class="dv" style="color: #AD0000;">50000</span>, <span class="at" style="color: #657422;">precancelled =</span> <span class="fu" style="color: #4758AB;">numeric</span>(<span class="dv" style="color: #AD0000;">0</span>)) {</span>
<span id="cb11-2"></span>
<span id="cb11-3">  followers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_followers</span>(user, <span class="at" style="color: #657422;">n =</span> n_max, <span class="at" style="color: #657422;">retryonratelimit =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb11-4">  followers <span class="ot" style="color: #003B4F;">&lt;-</span> followers<span class="sc" style="color: #5E5E5E;">$</span>from_id</span>
<span id="cb11-5"></span>
<span id="cb11-6">  uncancelled <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setdiff</span>(followers, precancelled)</span>
<span id="cb11-7">  uncancelled <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">as.numeric</span>(uncancelled))</span>
<span id="cb11-8"></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">cancel_users</span>(uncancelled, <span class="at" style="color: #657422;">type =</span> type)</span>
<span id="cb11-10">}</span></code></pre></div>
</div>
<p>Note the <code>precancelled</code> argument to this function. If you have a vector of numeric ids containing users that you‚Äôve already blocked/muted, there‚Äôs no point wasting time and bandwidth trying to block them again, so the function will ignore anything on that list. You could use the same idea to build a whitelist of accounts that would never get blocked or muted regardless of who they follow.</p>
<p>We‚Äôre almost at the end of the post. There‚Äôs only one other thing I want to show here, and that‚Äôs how to extract a list of all the accounts you currently have muted or blocked. Again this particular bit of functionality isn‚Äôt exposed by <strong>rtweet</strong> directly, so you‚Äôll notice that I‚Äôve had to go off-label again and call an unexported function!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">list_cancelled <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(type, n_max, ...) {</span>
<span id="cb12-2">  api <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb12-3">    <span class="st" style="color: #20794D;">"block"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"/1.1/blocks/ids"</span>,</span>
<span id="cb12-4">    <span class="st" style="color: #20794D;">"mute"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"/1.1/mutes/users/ids"</span></span>
<span id="cb12-5">  )</span>
<span id="cb12-6">  params <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb12-7">    <span class="at" style="color: #657422;">include_entities =</span> <span class="st" style="color: #20794D;">"false"</span>,</span>
<span id="cb12-8">    <span class="at" style="color: #657422;">skip_status =</span> <span class="st" style="color: #20794D;">"true"</span></span>
<span id="cb12-9">  )</span>
<span id="cb12-10">  resp <span class="ot" style="color: #003B4F;">&lt;-</span> rtweet<span class="sc" style="color: #5E5E5E;">:::</span><span class="fu" style="color: #4758AB;">TWIT_paginate_cursor</span>(<span class="cn" style="color: #8f5902;">NULL</span>, api[type], params, <span class="at" style="color: #657422;">n =</span> n_max, ...)</span>
<span id="cb12-11">  users <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">lapply</span>(resp, <span class="cf" style="color: #003B4F;">function</span>(x) x<span class="sc" style="color: #5E5E5E;">$</span>ids))</span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;">return</span>(users)</span>
<span id="cb12-13">}</span></code></pre></div>
</div>
<p>I‚Äôm not going to expand on this one, other than to mention that when you get to the point where you have hundreds of thousands of blocked or muted accounts, it‚Äôs handy to use a function like this from time to time, and to save the results locally so that you can be a little more efficient whenever you next need to refresh your block/mute lists.</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>I wrote this post in two minds. On the one hand, the rtweet developers made a decision not to support blocklists for a reason, and presumably the twitter developers have some reason for making it difficult to mute large numbers of accounts. It‚Äôs very rarely a good idea to write code that works against the clear intent of the tools you‚Äôre relying on. It is almost certain to break later on.</p>
<p>On the other hand, this is functionality that I personally need. On my primary account I‚Äôve made the deliberate decision not to block anyone<sup>3</sup> but to keep my twitter feed free of a particular type of content I have had to mute an extremely large number of accounts. Twitter makes that difficult to do, but with the help of these scripts I managed to automate the process. After a month or two, with a little manual intervention, the problematic content was gone from my feed, and I was able to get back to doing my job. So, if anyone else finds themselves in a similar situation, hopefully this blog post will help.</p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I mean, what exactly do we mean by ‚Äúat scale‚Äù here? In the context of data wrangling, a hundred thousand anything is rarely considered ‚Äúat scale‚Äù. But mute/blocks on twitter are usually measured in the tens or hundreds at most. Doing things at the hundreds of thousands scale is a big step up from the typical use case, and as noted later, because of how the twitter API handles mutes it‚Äôs something that can take months to complete.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>This is not unrelated to the reason why I keep my follows hidden behind private lists. In public it looks like I don‚Äôt follow anyone but using private lists I actually follow several hundred people! Some time ago I had some unpleasant experiences with people using that information to target me, so now I use private lists exclusively. Being a trans woman on the internet is <em>fuuuuuuuun</em>.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>There is one exception to this rule, but that‚Äôs a personal matter.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {R Scripts for Twitter Mutes and Blocks},
  date = {2022-02-11},
  url = {https://blog.djnavarro.net/r-scripts-for-twitter-blocks},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúR Scripts for Twitter Mutes and
Blocks.‚Äù</span> February 11, 2022. <a href="https://blog.djnavarro.net/r-scripts-for-twitter-blocks">https://blog.djnavarro.net/r-scripts-for-twitter-blocks</a>.
</div></div></section></div> ]]></description>
  <category>Twitter</category>
  <guid>https://blog.djnavarro.net/posts/2022-02-11_r-scripts-for-twitter-blocks/index.html</guid>
  <pubDate>Thu, 10 Feb 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-02-11_r-scripts-for-twitter-blocks/img/jeremy-bezanger-Nh1tBGgEcG4-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Binding Apache Arrow to R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>So I have a new job.</p>
<p>In my previous job as an academic, a large part of my work ‚Äì my favourite part, if I‚Äôm honest ‚Äì involved creating open access resources to help people use modern open source tools for data analysis. In my totally different role in developer relations at Voltron Data, a large part of my work involves, um ‚Ä¶ <em>[checks job description]</em> ‚Ä¶ creating open access resources to help people use modern open source tools for data analysis. Well okay then!</p>
<p>I‚Äôd better get on that, I suppose?</p>
<p><br></p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/3o7ZePnuDJ1EiNsK3u/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">Yes I have been binge watching <a href="https://en.wikipedia.org/wiki/The_Magicians_(American_TV_series)"><em>The Magicians</em></a> lately. My preemptive apologies to everyone for the gif spam. This is Eliot Waugh. All I can say at this point is that thanks to his magnificent performance I have developed a terribly awkward crush on Hale Appleman. Image via <a href="https://giphy.com/gifs/syfy-the-magicians-3o7ZePnuDJ1EiNsK3u">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>I‚Äôve been in my current role for a little over a week (or had been when I started writing this post!), and today my <a href="https://github.com/apache/arrow/pull/12173/">first contribution</a> to Apache Arrow was merged. It was very modest contribution: I wrote some code that determines whether any given year is a leap year. It precisely mirrors the behaviour of the <code>leap_year()</code> function in the <strong>lubridate</strong> package, except that it can be applied to Arrow data and it will behave itself when used in the context of a <strong>dplyr</strong> pipeline (more on that later). The code itself is not complicated, but it relies on a little magic and a deeper understanding of Arrow than I possessed two weeks ago.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Throughout this post I‚Äôll use boldface to refer to specific R packages like <strong>dplyr</strong> or C++ libraries like <strong>libarrow</strong></p>
</div></div><p>This post is the story of how I learned Arrow magic. ‚ú® üèπ ‚ú®</p>
<!----------------------------------------------------------------------------->
<section id="why-am-i-writing-this" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="why-am-i-writing-this">Why am I writing this?</h2>
<!----------------------------------------------------------------------------->
<blockquote class="blockquote">
<p>The danger of sublimated trauma is a major theme in our story <br> &nbsp; &nbsp; ‚Äì The Great God Ember (The Magicians: Season 2, Episode 3)</p>
</blockquote>
<p>It might seem peculiar that I‚Äôm writing such a long post about such a tiny contribution to an open source project. After all, it doesn‚Äôt actually take a lot of work to figure out how to detect leap years. You can do it in one line of R code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">(year <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">4</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> ((year <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">|</span> (year <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">400</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
</div>
<p>This is a logical expression corresponding to the following rules. If the <code>year</code> is divisible by 4 then it is a leap year (e.g., 1996 was a leap year). But there‚Äôs an exception: if <code>year</code> is divisible by 100 then it isn‚Äôt a leap year (e.g., 1900 wasn‚Äôt a leap year). But there‚Äôs also an exception to the exception: if <code>year</code> is divisible by 400 then it is a leap year (e.g., 2000 was a leap year). Yes, the process of mapping the verbally stated rules onto a logical expression is kind of annoying, but it‚Äôs not conceptually difficult or unusual. There is no magic in leap year calculation, no mystery that needs unpacking and explaining.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>All this assumes years are counted using the <a href="https://en.wikipedia.org/wiki/Gregorian_calendar">Gregorian calendar</a>. There are, of course, <a href="https://en.wikipedia.org/wiki/List_of_calendars">other calendars</a></p>
</div></div><p>The magic comes in when you start thinking about what the <strong>arrow</strong> package actually does. It lets you write perfectly ordinary R code for data manipulation that returns perfectly ordinary R data structures, even though the data have never been loaded into R and all the computation is performed externally using Apache Arrow. The code you write with <strong>arrow</strong> looks and feels like regular R code, but almost none of the work is being done by R. This <em>is</em> deep magic, and it is this magic that needs to be demystified.</p>
<p><br></p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/xUA7b94cNgJ4qoi532/giphy-downsized-large.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">Two key moments in ‚ÄúThe Magicians‚Äù when Julia Wicker discovers she can do magic, defying the expectations of others. One moment occurs at the start of Season 1 as a novice, after she had been told she failed the magic exams at Brakebills University; another moment occurs at the end of Season 2 after all magic has supposedly been turned off by the Old Gods or something. The parallel between the two moments is striking. Oh and Quentin Coldwater is in both scenes too I guess. Whatevs. Image via <a href="https://giphy.com/gifs/syfy-magic-julia-xUA7b94cNgJ4qoi532">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>I have three reasons for wanting to unpack and explain this magic.</p>
<ul>
<li>The first reason is personal: I‚Äôve been a professional educator for over 15 years and it has become habit. The moment I learn a new thing my first impulse is to work out how to explain it to someone else.</li>
<li>The second reasons is professional: I work for Voltron Data now, and part of my job is to make an educational contribution to the open source Apache Arrow project. Arrow is a pretty cool project, but there‚Äôs very little value in magnificent software if you don‚Äôt help people learn how to take advantage of it!</li>
<li>The third reason is ethical: a readable tutorial/explanation lowers barriers to entry. I mean, let‚Äôs be honest: the only reason I was able to work up the courage to contribute to Apache Arrow is that I work for a company that is deeply invested in open source software and in the Arrow project specifically. I had colleagues and friends I could ask for advice. If I failed I knew they would be there to help me. I had a safety net.</li>
</ul>
<p>The last of these is huuuuuuugely important from a community point of view. Not everyone has the safety net that I have, and it makes a big difference. In a former life I‚Äôve been on the other side of this divide: I‚Äôve been the person with no support, nobody to ask for help, and I‚Äôve run afoul of capricious gatekeeping in the open source world. It is a deeply unpleasant experience, and one I would not wish upon anyone else. We lose good people when this happens, and I really don‚Äôt want that!</p>
<p>The quote from the beginning of this section, the one about the danger of sublimated trauma, is relevant here: if we want healthy user communities it is our <em>obligation</em> on the inside to provide safe environments and delightful experiences. Our job is to find and remove barriers to entry. We want to provide that ‚Äúsafety net‚Äù that ensures that even if you fall (because we all fall sometimes), you don‚Äôt get hurt. Failing safely at something can be a learning experience; suffering trauma, however, is almost never healthy. So yeah, this matters to me. I want to take what I‚Äôve learned now that I‚Äôm on the inside and make that knowledge more widely accessible.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Everyone deserves a <a href="https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/rstats-artwork/code_hero_rstats.png">safety net</a> when first learning to walk the tightropes. It‚Äôs not a luxury, it‚Äôs a necessity</p>
</div></div><p>Before diving in, I should say something about the ‚Äúassumed knowledge‚Äù for this post.</p>
<ul>
<li>I‚Äôll do my best to explain R concepts as I go, but the post does assume that the reader is comfortable in R and knows how to use <strong>dplyr</strong> for data manipulation. If you need a refresher on these topics, I cannot recommend <a href="https://r4ds.had.co.nz/">‚ÄúR for data science‚Äù</a> highly enough. It‚Äôs a fabulous resource!</li>
<li>On the Arrow side it would help a little if you have some vague idea of what Arrow is about. I will of course explain as I go, but if you‚Äôre looking for a post that starts at the very beginning, I wrote a post on <a href="https://blog.djnavarro.net/starting-apache-arrow-in-r">‚ÄúGetting started with Apache Arrow‚Äù</a> that does exactly this and discusses a lot of the basics.</li>
<li>Finally, a tiny R warning: later in the post I will do a little excursion into object oriented programming and metaprogramming in R, which will be familiar to some but not all readers. If you‚Äôre not comfortable with these topics, you should still be okay to skim those sections and still get the important parts of this post. It‚Äôs not essential to understand the main ideas.</li>
</ul>
<p><br></p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/26gswa3eMvprpfjSE/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">The Great God Ember. Capricious, chaotic, and utterly unreliable unless what you‚Äôre looking for is a whimsical death. Pretty much the opposite of what we‚Äôd hope for in a healthy open source community really! He is, however, a very entertaining character. Image via <a href="https://giphy.com/gifs/syfy-the-magicians-fillory-26gswa3eMvprpfjSE">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<!----------------------------------------------------------------------------->
</section>
<section id="what-is-arrow" class="level2">
<h2 class="anchored" data-anchor-id="what-is-arrow">What is Arrow?</h2>
<!----------------------------------------------------------------------------->
<p>In case you decided not to read the introductory <a href="https://blog.djnavarro.net/starting-apache-arrow-in-r">‚ÄúGetting started with Apache Arrow‚Äù</a> post, here‚Äôs an extremely condensed version. Apache Arrow is a standard and open source library that represents tabular data efficiently in memory. More generally it refers to a collection of tools used to work with Arrow data. There are libraries supporting Arrow in many different programming languages, including C, C++, C#, Go, Java, JavaScript, Julia, MATLAB, Python, R, Ruby, and Rust. It‚Äôs pretty cool.</p>
<!----------------------------------------------------------------------------->
</section>
<section id="using-arrow-in-r" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="using-arrow-in-r">Using Arrow in R</h2>
<!----------------------------------------------------------------------------->
<p>A fundamental thing to understand about the <strong>arrow</strong> package in R is that it doesn‚Äôt implement the Apache Arrow standard directly. In fact, it tries very hard not to do any of the heavy lifting itself. There‚Äôs a C++ library that does that in a super efficient way, and the job of the R package is to supply bindings that allow the R user to interact with that library using a familiar interface. The C++ library is called <strong>libarrow</strong>. Although the long term goal is to make the integration so seamless that you can use the <strong>arrow</strong> R package without ever <em>needing</em> to understand the C++ library, my experience has been that most people <em>want</em> to know something about what‚Äôs happening under the hood. It can be unsettling to find yourself programming with tools you don‚Äôt quite understand, so I‚Äôll dig a little deeper in this post.</p>
<p>Let‚Äôs start with the C++ library. The role of <strong>libarrow</strong> is to do all the heavy computational work. It implements all the Arrow standards for representing tabular data in memory, provides support for the Apache ‚ÄúInter-Process Communication‚Äù (IPC) protocol that lets you efficiently transfer data from one application to another, and supplies various <em>compute kernels</em> that allow you to do some data wrangling when your data are represented as an Arrow table.<sup>1</sup> It is, fundamentally, the engine that makes everything work.</p>
<p>What about the R package? The role of <strong>arrow</strong> is to expose the functionality of <strong>libarrow</strong> to the R user, to make that functionality feel ‚Äúnatural‚Äù in R, and to make it easier for R users to write Arrow code that is smoothly interoperable with Arrow code written in other languages (e.g., Python). In order to give you the flexibility you need, the <strong>arrow</strong> package allows you to interact with <strong>libarrow</strong> at three different levels of abstraction:</p>
<ul>
<li>There‚Äôs a heavily abstracted interface that uses the dplyr bindings supplied by arrow. This version strives to make <strong>libarrow</strong> almost completely invisible, hidden behind an interface that uses familiar R function names.</li>
<li>There‚Äôs a lightly abstracted interface you can access using the <code>arrow_*()</code> functions. This version exposes the <strong>libarrow</strong> functions without attempting to exactly mirror any particular R functions, and provides a little <a href="https://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a> to make your life easier.</li>
<li>Finally, there‚Äôs a minimally abstracted interface using <code>call_function()</code>. This version provides a bare bones interface, without any of the syntactic sugar.</li>
</ul>
<p>Over the next few sections section I‚Äôll talk about these three levels of abstraction. So let‚Äôs load the packages we‚Äôre going to need for this post and dive right in!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span></code></pre></div>
</div>
<p><br></p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/26gscWcSEXuJH91tK/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">Penny Adiyodi in the Neitherlands, diving head first into a fountain that transports him to a new and magical world. I cannot stress enough that Penny does not, by and large, make good choices. Impulse control is a virtue, but not one that he possesses in abundance. Image via <a href="https://giphy.com/gifs/syfy-penny-alice-26gscWcSEXuJH91tK">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<!----------------------------------------------------------------------------->
</section>
<section id="using-dplyr-bindings" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="using-dplyr-bindings">Using ‚Äúarrowplyr‚Äù bindings</h2>
<!----------------------------------------------------------------------------->
<blockquote class="blockquote">
<p>I think I have some special fish magicks.<br> &nbsp; &nbsp; ‚Äì Josh Hoberman (The Magicians: Season 4, Episode 13)</p>
</blockquote>
<p>When I wrote my <a href="https://blog.djnavarro.net/starting-apache-arrow-in-r">Getting started with Apache Arrow</a> post, I concluded with an illustration of how you can write <strong>dplyr</strong> code that will work smoothly in R even when the data themselves are stored in Arrow. Here‚Äôs a little recap of how that works, using a tiny data set I pulled from <a href="https://en.wikipedia.org/wiki/List_of_The_Magicians_(American_TV_series)_episodes#Season_1_(2015%E2%80%9316)">The Magicians Wikipedia page</a>. Here‚Äôs what that data set looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">magicians <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv_arrow</span>(<span class="st" style="color: #20794D;">"magicians.csv"</span>, <span class="at" style="color: #657422;">as_data_frame =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-2">magicians</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 6
   season episode title                                air_date   rating viewers
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt;
 1      1       1 Unauthorized Magic                   2015-12-16    0.2    0.92
 2      1       2 The Source of Magic                  2016-01-25    0.4    1.11
 3      1       3 Consequences of Advanced Spellcasti‚Ä¶ 2016-02-01    0.4    0.9 
 4      1       4 The World in the Walls               2016-02-08    0.3    0.75
 5      1       5 Mendings, Major and Minor            2016-02-15    0.3    0.75
 6      1       6 Impractical Applications             2016-02-22    0.3    0.65
 7      1       7 The Mayakovsky Circumstance          2016-02-29    0.3    0.7 
 8      1       8 The Strangled Heart                  2016-03-07    0.3    0.67
 9      1       9 The Writing Room                     2016-03-14    0.3    0.71
10      1      10 Homecoming                           2016-03-21    0.3    0.78
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>
<p>In the code above I used the <code>read_csv_arrow()</code> function from the <strong>arrow</strong> package. If you‚Äôve used the <code>read_csv()</code> function from <strong>readr</strong> this will seem very familiar: although Arrow C++ code is doing a lot of the work under the hood, the Arrow options have been chosen to mirror the familiar <strong>readr</strong> interface. The <code>as_data_frame</code> argument is specific to <strong>arrow</strong> though: when it is <code>TRUE</code> the data are imported into R as a data frame or tibble, and when it is <code>FALSE</code> the data are imported into Arrow. Strictly speaking I didn‚Äôt need to specify it in this example because <code>TRUE</code> is the default value. I ony included here so that I could draw attention to it.</p>
<p>Okay, now that we have the data let‚Äôs start with a fairly typical data analysis process: computing summary variables. Perhaps I want to know the average popularity and ratings for each season of <em>The Magicians</em>, and extract the year in which the season aired. The <strong>dplyr</strong> package provides me with the tools I need to do this, using functions like <code>mutate()</code> to create new variables, <code>group_by()</code> to specify grouping variables, and <code>summarise()</code> to aggregate data within group:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">magicians <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">year</span>(air_date)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">group_by</span>(season) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb5-5">    <span class="at" style="color: #657422;">viewers =</span> <span class="fu" style="color: #4758AB;">mean</span>(viewers),</span>
<span id="cb5-6">    <span class="at" style="color: #657422;">rating =</span> <span class="fu" style="color: #4758AB;">mean</span>(rating), </span>
<span id="cb5-7">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">max</span>(year)</span>
<span id="cb5-8">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 √ó 4
  season viewers rating  year
   &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1      1   0.776  0.308  2016
2      2   0.788  0.323  2017
3      3   0.696  0.269  2018
4      4   0.541  0.2    2019
5      5   0.353  0.111  2020</code></pre>
</div>
</div>
<p>All of these computations take place within R. The <code>magicians</code> data set is stored in R, and all the calculations are done using this data structure.</p>
<p>What can we do when the data are stored in Arrow? It turns out the code is almost identical, but the first thing I‚Äôll need to do is load the data into Arrow. The simplest way to do this is to set <code>as_data_frame = FALSE</code> when calling <code>arrow_read_csv()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">arrowmagicks <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv_arrow</span>(<span class="st" style="color: #20794D;">"magicians.csv"</span>, <span class="at" style="color: #657422;">as_data_frame =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb7-2">arrowmagicks</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
65 rows x 6 columns
$season &lt;int64&gt;
$episode &lt;int64&gt;
$title &lt;string&gt;
$air_date &lt;date32[day]&gt;
$rating &lt;double&gt;
$viewers &lt;double&gt;</code></pre>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>The ‚Äúarrowmagicks‚Äù variable name is a reference to the quote at the start of the section. For a while Josh was convinced he had been gifted with special magic because he had been a fish. It made sense at the time, I guess? It‚Äôs a weird show</p>
</div></div><p>When I do this, two things happen. First, a data set is created outside of R in memory allocated to Arrow: all of the computations will be done on that data set. Second, the <code>arrowmagicks</code> variable is created inside R, which consists of a pointer to the actual data along with some handy metadata.</p>
<p>The most natural way to work with this data in R is to make sure that both the <strong>arrow</strong> and <strong>dplyr</strong> packages are loaded, and then write regular <strong>dplyr</strong> code. You can do this because the <strong>arrow</strong> package supplies methods for <strong>dplyr</strong> functions, and these methods will be called whenever the input data is an Arrow Table. I‚Äôll refer to this data analyses that use this workflow as ‚Äúarrowplyr pipelines‚Äù. Here‚Äôs an example of an arrowplyr pipeline:</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>I‚Äôve chosen not to boldface the ‚Äúarrowplyr‚Äù terminology. <strong>arrow</strong> is a package and <strong>dplyr</strong> is a package, but arrowplyr isn‚Äôt. It‚Äôs simply a convenient fiction</p>
</div></div><div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">arrowmagicks <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">year</span>(air_date)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">group_by</span>(season) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb9-5">    <span class="at" style="color: #657422;">viewers =</span> <span class="fu" style="color: #4758AB;">mean</span>(viewers),</span>
<span id="cb9-6">    <span class="at" style="color: #657422;">rating =</span> <span class="fu" style="color: #4758AB;">mean</span>(rating), </span>
<span id="cb9-7">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">max</span>(year)</span>
<span id="cb9-8">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table (query)
season: int64
viewers: double
rating: double
year: int64

See $.data for the source Arrow object</code></pre>
</div>
</div>
<p>It looks like a regular <strong>dplyr</strong> pipeline, but because the input is <code>arrowmagicks</code> (an Arrow Table object), the effect of this is construct a query that can be passed to <strong>libarrow</strong> to be evaluated.</p>
<p>It‚Äôs important to realise that at this point, all we have done is define a query: no computations have been performed on the Arrow data. This is a deliberate choice for efficiency purposes: on the C++ side there are a lot of performance optimisations that are only possible because <strong>libarrow</strong> has access to the entire query before any computations are performed. As a consequence of this, you need to explicitly tell Arrow when you want to pull the trigger and execute the query.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Later in the post I‚Äôll talk about Arrow Expressions, the tool that powers this trickery</p>
</div></div><p>There are two ways to trigger query execution, one using the <code>compute()</code> function and the other using <code>collect()</code>. These two functions behave slightly differently and are useful for different purposes. The <code>compute()</code> function runs the query, but leaves the resulting data inside Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">arrowmagicks <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">year</span>(air_date)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">group_by</span>(season) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb11-5">    <span class="at" style="color: #657422;">viewers =</span> <span class="fu" style="color: #4758AB;">mean</span>(viewers),</span>
<span id="cb11-6">    <span class="at" style="color: #657422;">rating =</span> <span class="fu" style="color: #4758AB;">mean</span>(rating), </span>
<span id="cb11-7">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">max</span>(year)</span>
<span id="cb11-8">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">compute</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
5 rows x 4 columns
$season &lt;int64&gt;
$viewers &lt;double&gt;
$rating &lt;double&gt;
$year &lt;int64&gt;</code></pre>
</div>
</div>
<p>This is useful whenever you‚Äôre creating an intermediate data set that you want to reuse in Arrow later, but don‚Äôt need to use this intermediate data structure inside R. If, however, you want the output to be pulled into R so that you can do R computation with it, use the <code>collect()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">arrowmagicks <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">year</span>(air_date)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">group_by</span>(season) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">summarise</span>(</span>
<span id="cb13-5">    <span class="at" style="color: #657422;">viewers =</span> <span class="fu" style="color: #4758AB;">mean</span>(viewers),</span>
<span id="cb13-6">    <span class="at" style="color: #657422;">rating =</span> <span class="fu" style="color: #4758AB;">mean</span>(rating), </span>
<span id="cb13-7">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">max</span>(year)</span>
<span id="cb13-8">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">collect</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 √ó 4
  season viewers rating  year
   &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;
1      1   0.776  0.308  2016
2      2   0.788  0.323  2017
3      3   0.696  0.269  2018
4      4   0.541  0.2    2019
5      5   0.353  0.111  2020</code></pre>
</div>
</div>
<p>The nice thing for R users is that all of this feels like regular R code. Under the hood <strong>libarrow</strong> is doing all the serious computation, but at the R level the user really doesn‚Äôt need to worry too much about that. The arrowplyr toolkit works seamlessly and invisibly.</p>
<p>In our ideal world, the arrowplyr interface is all you would ever need to use. Internally, the <strong>arrow</strong> package would intercept all the R function calls you make, and replace them with an equivalent function that performs exactly the same computation using <strong>libarrow</strong>. You the user would never need to think about what‚Äôs happening under the hood.</p>
<p>Real life, however, is filled with <a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/">leaky abstractions</a>, and arrowplyr is no exception. Because it‚Äôs a huge project that is under active development, there‚Äôs a lot of functionality being introduced. As an example, the current version of the package (v6.0.1) has limited support for tidyverse packages like <strong>lubridate</strong> and <strong>stringr</strong>. It‚Äôs awesome that this functionality is coming online, but because it‚Äôs happening so quickly there are gaps. The small contribution that I made today was to fill one of those gaps: currently, you can‚Äôt refer to the <code>leap_year()</code> function from <strong>lubridate</strong> in an arrowplyr pipeline. Well, technically you can, but whenever <strong>arrow</strong> encounters a function it doesn‚Äôt know how to execute in Arrow it throws a warning, pulls the data into R, and completes the query using native R code. Here‚Äôs what that looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">arrowmagicks <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb15-3">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">year</span>(air_date), </span>
<span id="cb15-4">    <span class="at" style="color: #657422;">leap =</span> <span class="fu" style="color: #4758AB;">leap_year</span>(air_date)</span>
<span id="cb15-5">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;">collect</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 8
   season episode title                    air_date   rating viewers  year leap 
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                    &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;lgl&gt;
 1      1       1 Unauthorized Magic       2015-12-16    0.2    0.92  2015 FALSE
 2      1       2 The Source of Magic      2016-01-25    0.4    1.11  2016 TRUE 
 3      1       3 Consequences of Advance‚Ä¶ 2016-02-01    0.4    0.9   2016 TRUE 
 4      1       4 The World in the Walls   2016-02-08    0.3    0.75  2016 TRUE 
 5      1       5 Mendings, Major and Min‚Ä¶ 2016-02-15    0.3    0.75  2016 TRUE 
 6      1       6 Impractical Applications 2016-02-22    0.3    0.65  2016 TRUE 
 7      1       7 The Mayakovsky Circumst‚Ä¶ 2016-02-29    0.3    0.7   2016 TRUE 
 8      1       8 The Strangled Heart      2016-03-07    0.3    0.67  2016 TRUE 
 9      1       9 The Writing Room         2016-03-14    0.3    0.71  2016 TRUE 
10      1      10 Homecoming               2016-03-21    0.3    0.78  2016 TRUE 
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>This is a bit of an oversimplification. The ‚Äúwarn and pull into R‚Äù behaviour shown here is what happens when the data is a Table object. If it is a Dataset object, <strong>arrow</strong> throws an error</p>
</div></div><p>An answer has been calculated, but the warning is there to tell you that the computations weren‚Äôt performed in Arrow. Realising that it doesn‚Äôt know how to interpret <code>leap_year()</code>, the <strong>arrow</strong> package has tried to ‚Äúfail gracefully‚Äù and pulled everything back into R. The end result of all this is that the code executes as a regular <strong>dplyr</strong> pipeline and not as an arrowplyr one. It‚Äôs not the worst possible outcome, but it still makes me sad. üò≠</p>
<p><br></p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/xUPGcJ8PkgoCQFMjHW/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">Quentin from timeline 40 talking to Alice from timeline 23. Communication across incommensurate universes is difficult. In the show it requires a Tesla Flexion. In Arrow, we use dplyr bindings. Image via <a href="https://giphy.com/gifs/syfy-alice-love-you-xUPGcJ8PkgoCQFMjHW">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a>‚Äù</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<!----------------------------------------------------------------------------->
</section>
<section id="using-arrow-functions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="using-arrow-functions">Calling ‚Äúarrow-prefix‚Äù functions</h2>
<!----------------------------------------------------------------------------->
<p>Okay, let‚Äôs dig a little deeper.</p>
<p>In the last section I talked about arrowplyr, a collection of <strong>dplyr</strong> bindings provided by the <strong>arrow</strong> package. These are designed to mimic their native R equivalents as seamlessly as possible to enable you to write familiar code. Internally, there‚Äôs quite a lot going on to make this magic work. In most cases, the <strong>arrow</strong> developers ‚Äì which I guess includes me now! üéâ ‚Äì have rewritten the R functions that they mimic. We‚Äôve done this in a way that the computations rely only the C++ compute functions provided by <strong>libarrow</strong>, thereby ensuring that the data never have to enter R. The arrowplyr interface is the way you‚Äôd usually interact with Arrow in R, but there are ways in which you can access the C++ compute functions a little more more directly. There are two different ways you can call these compute functions yourself. If you‚Äôre working within an arrowplyr pipeline it is (relatively!) straightforward, and that‚Äôs what I‚Äôll talk about in this section. However, there is also a more direct method which I‚Äôll discuss later in the post.</p>
<p>To see what compute functions are exposed by the C++ <strong>libarrow</strong> library, you can call <code>list_compute_functions()</code> from R:</p>
<div class="cell" data-out.lines="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">list_compute_functions</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "abs"                             "abs_checked"                    
  [3] "acos"                            "acos_checked"                   
  [5] "add"                             "add_checked"                    
  [7] "all"                             "and"                            
  [9] "and_kleene"                      "and_not"                        
 [11] "and_not_kleene"                  "any"                            
 [13] "approximate_median"              "array_filter"                   
 [15] "array_sort_indices"              "array_take"                     
 [17] "ascii_capitalize"                "ascii_center"                   
 [19] "ascii_is_alnum"                  "ascii_is_alpha"                 
....</code></pre>
</div>
</div>
<p>The actual output continues for quite a while: there are currently 240 compute functions, most of which are low level functions needed to perform basic computational operations.</p>
<p>Let‚Äôs imagine you‚Äôre writing <strong>dplyr</strong> code to work with datetime data in a Table object like <code>arrowmagicks</code>. If you were working with native R data like <code>magicians</code>, you can do something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">start_date <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"2015-12-16"</span>)</span>
<span id="cb19-2"></span>
<span id="cb19-3">magicians <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">days =</span> air_date <span class="sc" style="color: #5E5E5E;">-</span> start_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 7
   season episode title                          air_date   rating viewers days 
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                          &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;drt&gt;
 1      1       1 Unauthorized Magic             2015-12-16    0.2    0.92  0 d‚Ä¶
 2      1       2 The Source of Magic            2016-01-25    0.4    1.11 40 d‚Ä¶
 3      1       3 Consequences of Advanced Spel‚Ä¶ 2016-02-01    0.4    0.9  47 d‚Ä¶
 4      1       4 The World in the Walls         2016-02-08    0.3    0.75 54 d‚Ä¶
 5      1       5 Mendings, Major and Minor      2016-02-15    0.3    0.75 61 d‚Ä¶
 6      1       6 Impractical Applications       2016-02-22    0.3    0.65 68 d‚Ä¶
 7      1       7 The Mayakovsky Circumstance    2016-02-29    0.3    0.7  75 d‚Ä¶
 8      1       8 The Strangled Heart            2016-03-07    0.3    0.67 82 d‚Ä¶
 9      1       9 The Writing Room               2016-03-14    0.3    0.71 89 d‚Ä¶
10      1      10 Homecoming                     2016-03-21    0.3    0.78 96 d‚Ä¶
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>
<p>Here I‚Äôve created a new <code>days</code> column that counts the number of days that have elapsed between the <code>air_date</code> for an episode and the <code>start_date</code> (December 16th, 2015) when the first episode of Season 1 aired. There are a lot of data analysis situations in which you might want to do something like this, but right now you can‚Äôt actually do this using the <strong>arrow</strong> dplyr bindings because temporal arithmetic is a work in progress. In the not-too-distant future users should be able to expect code like this to work seamlessly, but right now it doesn‚Äôt. If you try it right now, you get this error:</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Improving support for date/time calculations is one of the things I‚Äôm working on</p>
</div></div><div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">arrowmagicks <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">days =</span> air_date <span class="sc" style="color: #5E5E5E;">-</span> start_date) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">collect</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 7
   season episode title                          air_date   rating viewers days 
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                          &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;drt&gt;
 1      1       1 Unauthorized Magic             2015-12-16    0.2    0.92     ‚Ä¶
 2      1       2 The Source of Magic            2016-01-25    0.4    1.11 3456‚Ä¶
 3      1       3 Consequences of Advanced Spel‚Ä¶ 2016-02-01    0.4    0.9  4060‚Ä¶
 4      1       4 The World in the Walls         2016-02-08    0.3    0.75 4665‚Ä¶
 5      1       5 Mendings, Major and Minor      2016-02-15    0.3    0.75 5270‚Ä¶
 6      1       6 Impractical Applications       2016-02-22    0.3    0.65 5875‚Ä¶
 7      1       7 The Mayakovsky Circumstance    2016-02-29    0.3    0.7  6480‚Ä¶
 8      1       8 The Strangled Heart            2016-03-07    0.3    0.67 7084‚Ä¶
 9      1       9 The Writing Room               2016-03-14    0.3    0.71 7689‚Ä¶
10      1      10 Homecoming                     2016-03-21    0.3    0.78 8294‚Ä¶
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>
<p>Right now, there are no general purpose arithmetic operations in <strong>arrow</strong> that allow you to subtract one date from another. However, because I chose this example rather carefully to find an edge case where the R package is missing some <strong>libarrow</strong> functionality, it turns out there is actually a <code>days_between()</code> function in <strong>libarrow</strong> that we could use to solve this problem, and it‚Äôs not too hard to use it. If you want to call one of the <strong>libarrow</strong> functions inside your <strong>dplyr</strong> pipeline, all you have to do is add an <code>arrow_</code> prefix to the function name. For example, the C++ <code>days_between()</code> function becomes <code>arrow_days_between()</code> when called within the <strong>arrow</strong> <strong>dplyr</strong> pipeline:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">arrowmagicks <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">days =</span> <span class="fu" style="color: #4758AB;">arrow_days_between</span>(start_date, air_date)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;">collect</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 7
   season episode title                          air_date   rating viewers  days
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                          &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;
 1      1       1 Unauthorized Magic             2015-12-16    0.2    0.92     0
 2      1       2 The Source of Magic            2016-01-25    0.4    1.11    40
 3      1       3 Consequences of Advanced Spel‚Ä¶ 2016-02-01    0.4    0.9     47
 4      1       4 The World in the Walls         2016-02-08    0.3    0.75    54
 5      1       5 Mendings, Major and Minor      2016-02-15    0.3    0.75    61
 6      1       6 Impractical Applications       2016-02-22    0.3    0.65    68
 7      1       7 The Mayakovsky Circumstance    2016-02-29    0.3    0.7     75
 8      1       8 The Strangled Heart            2016-03-07    0.3    0.67    82
 9      1       9 The Writing Room               2016-03-14    0.3    0.71    89
10      1      10 Homecoming                     2016-03-21    0.3    0.78    96
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>
<p>Notice there‚Äôs no warning message here? That‚Äôs because the computations were done in Arrow and the data have not been pulled into R.</p>
<!----------------------------------------------------------------------------->
</section>
<section id="a-slightly-evil-digression" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="a-slightly-evil-digression">A slightly-evil digression</h2>
<!----------------------------------------------------------------------------->
<blockquote class="blockquote">
<p>Marina, blatantly lying: <br>&nbsp;&nbsp;&nbsp; ‚ÄúHi. I‚Äôm Marina. I‚Äôm here to help.‚Äù <br> Josh, missing important memories: <br>&nbsp;&nbsp;&nbsp; ‚ÄúSo you‚Äôre like some powerful, benevolent White Witch?‚Äù <br> Marina, comically sincere: <br>&nbsp;&nbsp;&nbsp; ‚ÄúUh-huh.‚Äù <br><br> &nbsp; &nbsp; ‚Äì The Magicians: Season 4, Episode 2</p>
</blockquote>

<div class="no-row-height column-margin column-container"><div class="">
<p>At this point in the show <em>everybody</em> except the currently-amnesic main characters knows that Marina has no interest in helping anyone except Marina. I love Marina so much</p>
</div></div><p>Okay, here‚Äôs a puzzle. In the previous section I used the <code>arrow_days_between()</code> function in the middle of a <strong>dplyr</strong> pipe to work around a current limitation in <strong>arrow</strong>. What happens if I try to call this function in another context?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">today <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"2022-01-18"</span>)</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="fu" style="color: #4758AB;">arrow_days_between</span>(start_date, today)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in arrow_days_between(start_date, today): could not find function "arrow_days_between"</code></pre>
</div>
</div>
<p>It turns out there is no R function called <code>arrow_days_between()</code>. This is ‚Ä¶ surprising, to say the least. I mean, it really does look like I used this function in the last section, doesn‚Äôt it? How does this work? The answer to this requires a slightly deeper understanding of what the <strong>dplyr</strong> bindings in <strong>arrow</strong> do, and it‚Äôs kind of a two-part answer.</p>
<section id="part-one-object-oriented-programming" class="level3">
<h3 class="anchored" data-anchor-id="part-one-object-oriented-programming">Part one: Object oriented programming</h3>
<p>Let‚Äôs consider the <code>mutate()</code> function. <strong>dplyr</strong> defines <code>mutate()</code> as an <a href="https://adv-r.hadley.nz/s3.html">S3 generic function</a>, which allows it to display ‚Äúpolymorphism‚Äù: it behaves differently depending on what kind of object is passed to to the generic. When you pass a data frame to <code>mutate()</code>, the call is ‚Äúdispatched‚Äù to the <code>mutate.arrow_dplyr_query()</code> methods supplied by (but not exported by) <strong>dplyr</strong>. The <strong>arrow</strong> package builds on this by supplying methods that apply for Arrow objects. Specifically, there are internal functions <code>mutate.ArrowTabular()</code>, <code>mutate.Dataset()</code>, and <code>mutate.arrow_dplyr_query()</code> that are used to provide <code>mutate()</code> functionality for Arrow data sets. In other words, the ‚Äútop level‚Äù <strong>dplyr</strong> functions in <strong>arrow</strong> are S3 methods, and method dispatch is the mechanism that does the work.</p>
</section>
<section id="part-two-metaprogramming" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="part-two-metaprogramming">Part two: Metaprogramming</h3>
<p>Now let‚Äôs consider the <code>leap_year()</code> function that my contribution focused on. Not only is this not a generic function, it‚Äôs not even a <strong>dplyr</strong> function. It‚Äôs a regular function in the <strong>lubridate</strong> package. So how is it possible for <strong>arrow</strong> to mimic the behaviour of <code>lubridate::leap_year()</code> without messing up <strong>lubridate</strong>? This is where the <em>dplyr</em> binding part comes in. Let‚Äôs imagine that I‚Äôd written an actual function called <code>arrowish_leap_year()</code> that performs leap year calculations for Arrow data. If I‚Äôd done this inside the <strong>arrow</strong> package<sup>2</sup> then I‚Äôd include a line like this to register a binding:</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>I‚Äôll show you how to write your own ‚Äúarrowish‚Äù functions later in the post</p>
</div></div><div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">register_binding</span>(<span class="st" style="color: #20794D;">"leap_year"</span>, arrowish_leap_year)</span></code></pre></div>
</div>
<p>Once the binding has been registered, whenever <code>leap_year()</code> is encountered within one of the <strong>arrow</strong>-supplied <strong>dplyr</strong> functions, R will substitute my <code>arrowish_leap_year()</code> function in place of the <code>lubridate::leap_year()</code> function that would normally be called. This is only possible because R has extremely sophisticated <a href="https://adv-r.hadley.nz/metaprogramming.html">metaprogramming</a> tools: you (the developer) can write functions that ‚Äúcapture‚Äù the code that the user input, and if necessary modify that code before R evaluates it. This is a very powerful tool for constructing domain-specific languages within R. The tidyverse uses it extensively, and the <strong>arrow</strong> package does too. The <strong>dplyr</strong> bindings inside <strong>arrow</strong> use metaprogramming tricks to modify the user input in such a way that ‚Äì in this example ‚Äì the user input is interpreted as if the user had called <code>arrowish_leap_year()</code> rather than <code>leap_year()</code>.</p>
</section>
<section id="cooperative-magic" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="cooperative-magic">Cooperative magic</h3>
<p>Taken together, these two pieces give us the answer to our puzzle. The call to <code>arrow_days_between()</code> works in my original example because that call was constructed within the context of an <strong>arrow</strong>-supplied <code>mutate()</code> function. The interpretation of this code isn‚Äôt performed by <strong>dplyr</strong> it is handled by <strong>arrow</strong>. Internally, <strong>arrow</strong> uses metaprogramming magic to ensure that <code>arrow_days_between()</code> is reinterpreted as a call to the <strong>libarrow</strong> <code>days_between()</code> function. But that metaprogramming magic doesn‚Äôt apply anywhere except the arrowplyr context. If you try to call <code>arrow_days_between()</code> from the R console or even in a regular <strong>dplyr</strong> pipeline, you get an error because technically speaking this function doesn‚Äôt exist.</p>
<p><br></p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/l0IydgNESZjrALWqA/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">I guess there‚Äôs a connection between slightly-evil-Julia burning down the talking trees and my slightly-evil digression? Sort of. I mean the truth is just that I just love this scene and secretly wish I was her. Of all the characters Julia has the most personally transformative arc (in my opinion), in both good ways and bad. There‚Äôs a lot going on with her life, her person, and her body. I relate to that. Image via <a href="https://giphy.com/gifs/syfy-l0IydgNESZjrALWqA">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<!----------------------------------------------------------------------------->
</section>
</section>
<section id="using-call-function" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="using-call-function">Calling libarrow directly</h2>
<!----------------------------------------------------------------------------->
<p>The weirdness of that digression leads naturally to a practical question. Given that the ‚Äúarrow-prefix‚Äù function don‚Äôt actually exist in the usual sense of the term, and the corresponding bindings can only be called in an arrowplyr context, how the heck does an R developer call the <strong>libarrow</strong> functions directly? In everyday data analysis you wouldn‚Äôt want to do this very often, but from a programming perspective it matters: if you want to write your own functions that play nicely with arrowplyr pipelines, it‚Äôs very handy to know how to call <strong>libarrow</strong> directly.</p>
<p>So let‚Äôs strip back another level of abstraction!</p>
<p>Should you ever find yourself wanting to call <strong>libarrow</strong> compute functions directly from R, <code>call_function()</code> will become your new best friend. It provides a very minimal interface that exposes the <strong>libarrow</strong> functions to R. The ‚Äúbare bones‚Äù nature of this interface has advantages and disadvantages. The advantage is simplicity: your code doesn‚Äôt depend on any of the fancy bells and whistles. Those are fabulous from the user perspective, but from a developer point of view you usually want to keep it simple. The price you pay for this is that you must pass appropriate Arrow objects. You can‚Äôt pass a regular R object to a <strong>libarrow</strong> function and expect it to work. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">call_function</span>(<span class="st" style="color: #20794D;">"days_between"</span>, start_date, today)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: Argument 1 is of class Date but it must be one of "Array", "ChunkedArray", "RecordBatch", "Table", or "Scalar"</code></pre>
</div>
</div>
<p>This doesn‚Äôt work because <code>start_date</code> and <code>today</code> are R-native Date objects and do not refer to any data structures in Arrow. The <strong>libarrow</strong> functions expect to receive pointers to Arrow objects. To fix the previous example, all we need to do is create Arrow Scalars for each date. Here‚Äôs how we do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">arrow_start_date <span class="ot" style="color: #003B4F;">&lt;-</span> Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(start_date)</span>
<span id="cb30-2">arrow_today <span class="ot" style="color: #003B4F;">&lt;-</span> Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(today)</span>
<span id="cb30-3"></span>
<span id="cb30-4">arrow_start_date</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2015-12-16</code></pre>
</div>
</div>
<p>The <code>arrow_start_date</code> and <code>arrow_today</code> variables are R data structures, but they‚Äôre only thin wrappers. The actual data are stored in Arrow, and the R objects are really just pointers to the Arrow data. These objects are suitable for passing to the <strong>libarrow</strong> <code>days_between()</code> function, and this works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">call_function</span>(<span class="st" style="color: #20794D;">"days_between"</span>, arrow_start_date, arrow_today)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2225</code></pre>
</div>
</div>
<p>Huh. Apparently it took me over 2000 days to write a proper fangirl post about <em>The Magicians</em>. I‚Äôm really late to the pop culture party, aren‚Äôt I? Oh dear. I‚Äôm getting old.</p>
<p><br></p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/26AHOmyGvNBim4GHK/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">I‚Äôm getting lazier with these connections. Using a Library gif because I‚Äôm talking about the C++ library? I mean really, you‚Äôd think I‚Äôd be better than that wouldn‚Äôt you? But no. I am not. Image via <a href="https://giphy.com/gifs/syfy-the-magicians-26AHOmyGvNBim4GHK">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<!----------------------------------------------------------------------------->
</section>
<section id="arrow-expressions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="arrow-expressions">Arrow expressions</h2>
<!----------------------------------------------------------------------------->
<p>There‚Äôs one more foundational topic I should discuss before I can show you how to write arrowplyr-friendly functions, and that‚Äôs Arrow Expressions. When I introduced arrowplyr early in the post I noted that most of your code is used to specify a query, and that query doesn‚Äôt get evaluated until <code>compute()</code> or <code>collect()</code> is called. If you want to write code that plays nicely with this workflow, you need to ensure that your custom functions return an Arrow Expression.</p>
<p>The basic idea behind expressions is probably familiar to R users, since they are what powers the metaprogramming capabilities of the language and are used extensively throughout tidyverse as well as base R. In base R, the <code>quote()</code> function is used to capture a user expression and <code>eval()</code> is used to force it to evaluate. Here‚Äôs a simple example where I use <code>quote()</code> to ‚Äúcapture‚Äù some R code and prevent it from evaluating:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">head_expr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">quote</span>(<span class="fu" style="color: #4758AB;">head</span>(magicians, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb34-2">head_expr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>head(magicians, n = 3)</code></pre>
</div>
</div>
<p>If I wanted to be clever I could modify the code in <code>head_expr</code> before allowing R to pull the trigger on evaluating it. I could combine a lot of expressions together, change parts of the code as needed, and evaluate them wherever I wanted. As you might imagine, this is super useful for creating domain specific languages within R. But this isn‚Äôt a post about metaprogramming so let‚Äôs evaluate it now:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">eval</span>(head_expr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 6
  season episode title                                 air_date   rating viewers
   &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                 &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt;
1      1       1 Unauthorized Magic                    2015-12-16    0.2    0.92
2      1       2 The Source of Magic                   2016-01-25    0.4    1.11
3      1       3 Consequences of Advanced Spellcasting 2016-02-01    0.4    0.9 </code></pre>
</div>
</div>
<p>The example above uses native R code. It‚Äôs not tied to Arrow in any sense. However, the <strong>arrow</strong> package provides a mechanism for doing something similar in an Arrow context. For example, here‚Äôs me creating a character string as an Arrow Scalar:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">fillory <span class="ot" style="color: #003B4F;">&lt;-</span> Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="st" style="color: #20794D;">"A world as intricate as filigree"</span>)</span>
<span id="cb38-2">fillory</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
A world as intricate as filigree</code></pre>
</div>
</div>
<p>Here‚Äôs me creating the corresponding object within an Arrow Expression:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">fillory <span class="ot" style="color: #003B4F;">&lt;-</span> Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">scalar</span>(</span>
<span id="cb40-2">  Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="st" style="color: #20794D;">"A world as intricate as filigree"</span>)</span>
<span id="cb40-3">)</span>
<span id="cb40-4">fillory</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Expression
"A world as intricate as filigree"</code></pre>
</div>
</div>
<p>I suspect this would not seem particularly impressive on its own, but you can use the same idea to create function calls that can be evaluated later within the Arrow context:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">ember <span class="ot" style="color: #003B4F;">&lt;-</span> Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="st" style="color: #20794D;">"utf8_capitalize"</span>, fillory)</span>
<span id="cb42-2">ember</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Expression
utf8_capitalize("A world as intricate as filigree")</code></pre>
</div>
</div>
<p>So close. We are so very close to the end now.</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/xUA7aOXC4Lrm8p2Ofm/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">Okay look, I‚Äôll level with you. At this point there is absolutely no connection between the gifs and the content. This post is getting very long and my brain is fried. I need a short break to appreciate the beautiful people, and Kings Idri and Eliot are both very beautiful people. Image via <a href="https://media.giphy.com/media/xUA7aOXC4Lrm8p2Ofm/giphy.gif">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="arrowish-functions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="arrowish-functions">Writing arrowplyr functions</h2>
<p>At long last we have all the ingredients needed to write a function that can be used in an arrowplyr pipeline. Here‚Äôs a simple implementation of the base R <code>toupper()</code> function</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">arrowish_toupper <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb44-2">  Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="st" style="color: #20794D;">"utf8_upper"</span>, x)</span>
<span id="cb44-3">}</span></code></pre></div>
</div>
<p>As it happens arrowplyr pipelines already support the <code>toupper()</code> function, so there really wasn‚Äôt a need for me to write this. However, at present they don‚Äôt support the <strong>lubridate</strong> <code>leap_year()</code> function, which was the purpose of my very small contribution today. An Arrow friendly version of <code>leap_year()</code> looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">arrowish_leap_year <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(date) {</span>
<span id="cb45-2">   year <span class="ot" style="color: #003B4F;">&lt;-</span> Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="st" style="color: #20794D;">"year"</span>, date)</span>
<span id="cb45-3">  (year <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">4</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> ((year <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">|</span> (year <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">400</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb45-4">}</span></code></pre></div>
</div>
<p>Before putting our functions into action, let‚Äôs see what happens when we try to write a simple data analysis pipeline without them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">arrowmagicks <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb46-3">    <span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">toupper</span>(title),</span>
<span id="cb46-4">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">year</span>(air_date), </span>
<span id="cb46-5">    <span class="at" style="color: #657422;">leap =</span> <span class="fu" style="color: #4758AB;">leap_year</span>(air_date)</span>
<span id="cb46-6">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb46-7">  <span class="fu" style="color: #4758AB;">collect</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 8
   season episode title                    air_date   rating viewers  year leap 
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                    &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;lgl&gt;
 1      1       1 UNAUTHORIZED MAGIC       2015-12-16    0.2    0.92  2015 FALSE
 2      1       2 THE SOURCE OF MAGIC      2016-01-25    0.4    1.11  2016 TRUE 
 3      1       3 CONSEQUENCES OF ADVANCE‚Ä¶ 2016-02-01    0.4    0.9   2016 TRUE 
 4      1       4 THE WORLD IN THE WALLS   2016-02-08    0.3    0.75  2016 TRUE 
 5      1       5 MENDINGS, MAJOR AND MIN‚Ä¶ 2016-02-15    0.3    0.75  2016 TRUE 
 6      1       6 IMPRACTICAL APPLICATIONS 2016-02-22    0.3    0.65  2016 TRUE 
 7      1       7 THE MAYAKOVSKY CIRCUMST‚Ä¶ 2016-02-29    0.3    0.7   2016 TRUE 
 8      1       8 THE STRANGLED HEART      2016-03-07    0.3    0.67  2016 TRUE 
 9      1       9 THE WRITING ROOM         2016-03-14    0.3    0.71  2016 TRUE 
10      1      10 HOMECOMING               2016-03-21    0.3    0.78  2016 TRUE 
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>The internal <strong>arrow</strong> function that handles this is called ‚Äúabandon_ship‚Äù. No, I don‚Äôt know why I felt the need to mention this`</p>
</div></div><p>Yes, it returns the correct answer, but only because <strong>arrow</strong> detected a function it doesn‚Äôt understand and has ‚Äúabandoned ship‚Äù. It pulled the data into R and let <strong>dplyr</strong> do all the work. Now let‚Äôs see what happens when we use our functions instead:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">arrowmagicks <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb48-3">    <span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">arrowish_toupper</span>(title),</span>
<span id="cb48-4">    <span class="at" style="color: #657422;">year =</span> <span class="fu" style="color: #4758AB;">year</span>(air_date),</span>
<span id="cb48-5">    <span class="at" style="color: #657422;">leap =</span> <span class="fu" style="color: #4758AB;">arrowish_leap_year</span>(air_date)</span>
<span id="cb48-6">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb48-7">  <span class="fu" style="color: #4758AB;">collect</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 √ó 8
   season episode title                    air_date   rating viewers  year leap 
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                    &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;lgl&gt;
 1      1       1 UNAUTHORIZED MAGIC       2015-12-16    0.2    0.92  2015 FALSE
 2      1       2 THE SOURCE OF MAGIC      2016-01-25    0.4    1.11  2016 TRUE 
 3      1       3 CONSEQUENCES OF ADVANCE‚Ä¶ 2016-02-01    0.4    0.9   2016 TRUE 
 4      1       4 THE WORLD IN THE WALLS   2016-02-08    0.3    0.75  2016 TRUE 
 5      1       5 MENDINGS, MAJOR AND MIN‚Ä¶ 2016-02-15    0.3    0.75  2016 TRUE 
 6      1       6 IMPRACTICAL APPLICATIONS 2016-02-22    0.3    0.65  2016 TRUE 
 7      1       7 THE MAYAKOVSKY CIRCUMST‚Ä¶ 2016-02-29    0.3    0.7   2016 TRUE 
 8      1       8 THE STRANGLED HEART      2016-03-07    0.3    0.67  2016 TRUE 
 9      1       9 THE WRITING ROOM         2016-03-14    0.3    0.71  2016 TRUE 
10      1      10 HOMECOMING               2016-03-21    0.3    0.78  2016 TRUE 
# ‚Ä¶ with 55 more rows</code></pre>
</div>
</div>
<p>Everything works perfectly within Arrow. No ships are abandoned, the arrowplyr pipeline springs no leaks, and we all live happily ever after.</p>
<p>Sort of.</p>
<p>I mean, we‚Äôre all still alive.</p>
<p>That has to count as a win, right? üéâ</p>
<p><br></p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/https:/media.giphy.com/media/l2Sq18e02qsxjKfBK/giphy.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption margin-caption">Eliot and Margo applaud your success. They are the best characters, and you are also the best because you have made it to the end of a long and strange blog post. Image via <a href="https://giphy.com/gifs/syfy-bravo-the-magicians-l2Sq18e02qsxjKfBK">giphy</a>, copyright <a href="https://www.syfy.com">syfy</a></figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<!----------------------------------------------------------------------------->
</section>
<section id="epilogue-wheres-the-rest-of-the-owl" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="epilogue-wheres-the-rest-of-the-owl">Epilogue: Where‚Äôs the rest of the owl?</h2>
<!----------------------------------------------------------------------------->

<div class="no-row-height column-margin column-container"><div class="">
<p>In case you don‚Äôt know the reference: <a href="https://knowyourmeme.com/memes/how-to-draw-an-owl">how to draw an owl</a></p>
</div></div><p>The story I‚Äôve told in this post is a little incomplete. I‚Äôve shown you how to write a function like <code>arrowish_leap_year()</code> that can slot into a <strong>dplyr</strong> pipeline and operate on an Arrow data structure. But I haven‚Äôt said anything about the precise workings of how <code>register_binding()</code> works, in part because the details of the metaprogramming magic is one of the mysteries I‚Äôm currently unpacking while I dig into the code base.</p>
<p>But that‚Äôs not the only thing I‚Äôve left unsaid. I haven‚Äôt talked about unit tests, for example. I haven‚Äôt talked about the social/technical process of getting code merged into the Arrow repository. If you‚Äôve made it to the end of this post and are curious about joining the Arrow developer community, these are things you need to know about. I‚Äôll probably write something about those topics later on, but in the meantime here are some fabulous resources that might be handy:</p>
<ul>
<li><a href="https://arrow.apache.org/docs/dev/developers/guide/index.html">Apache Arrow New Contributors Guide</a> (thank you to Alenka Frim!)</li>
<li><a href="https://arrow.apache.org/docs/dev/r/articles/developers/bindings.html">Developers Guide to Writing Bindings</a> (thank you to Nic Crane!)</li>
<li><a href="https://arrow.apache.org/cookbook/r/">Apache Arrow R Cookbook</a> (thank you to Nic Crane again)</li>
</ul>
<p>Enjoy! üç∞</p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I didn‚Äôt quite understand what ‚Äúkernels‚Äù meant in this context until Nic Crane kindly explained it to me. The compute API contains a number of functions which are divided up into ‚Äúkernels‚Äù, specialised functions designed to work on a specific data type. The <a href="https://arrow.apache.org/docs/cpp/compute.html">C++ Arrow compute documentation</a> explains this better.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>My actual code didn‚Äôt bother to name my function. It‚Äôs just an anonymous function passed to <code>register_binding()</code>.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Binding {Apache} {Arrow} to {R}},
  date = {2022-01-18},
  url = {https://blog.djnavarro.net/binding-arrow-to-r},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúBinding Apache Arrow to R.‚Äù</span>
January 18, 2022. <a href="https://blog.djnavarro.net/binding-arrow-to-r">https://blog.djnavarro.net/binding-arrow-to-r</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <guid>https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/index.html</guid>
  <pubDate>Mon, 17 Jan 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/img/magicians_hard_glossy_armour.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Setting CRAN repository options</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-01-10_setting-cran-repositories/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>The shiny new work laptop arrives. Pristine and beautiful in its factory-fresh state. I am in love.</p>
<p>I remain in love right up the moment I remember that with new work laptop comes the peculiar torture of setting up the machine. My gorgeous little Dell XPS 13 shipped with Windows 11, and while I do quite like Windows these days, I‚Äôve become very accustomed to working in linux, so my first task was to install Ubuntu 20.04. These days that‚Äôs a pretty easy task, and the Ubuntu installer was even thoughtful enough to give me an option to enable full disk encryption. It all went smoothly. Yay me!</p>
<p>Equipped with my fabulous new operating system, my next steps were to <a href="https://cran.r-project.org/bin/linux/ubuntu/">install R</a> and <a href="https://www.rstudio.com/products/rstudio/download/">RStudio</a>, and for the first time in my life I was smart enough to remember to install the <a href="https://itsfoss.com/install-git-ubuntu/">latest version of git</a> along with the <a href="https://itsfoss.com/build-essential-ubuntu/">build-essential packages</a> that I‚Äôm pretty much guaranteed to need the moment I need to build anything from source. Yay me again!</p>
<p>Then comes the horror. Installing R packages. On linux. A small part of me dies.</p>
<p>I‚Äôm sure every linux-based R user shares my pain and needs no explanation, but some of the gentler souls who use Windows or Mac OS may not be aware of how tiresome package installation is on linux. The problem that linux users face is that CRAN does not maintain binaries for linux, so every time a linux user wants to install a package, it has to be built locally from the source code. This is both time consuming and frustrating, and very often you have to go hunting around to discover what other system dependencies need to be installed. So many tears have been shed over this.</p>
<p>So.</p>
<p>Many.</p>
<p>Tears.</p>
<section id="rstudio-package-manager" class="level2">
<h2 class="anchored" data-anchor-id="rstudio-package-manager">RStudio package manager</h2>
<p>Recently, however, I have become aware that a better world is possible thanks to the magic of <a href="https://packagemanager.rstudio.com">RStudio package manager</a>. I‚Äôd sort of known that this existed as an option, but it wasn‚Äôt until today that I realised that ‚Äî in addition to the fancy commercial options ‚Äî RStudio maintains a <em>public</em> package manager as a free service: the <a href="https://support.rstudio.com/hc/en-us/articles/360046703913-FAQ-for-RStudio-Public-Package-Manager">FAQ page is here</a>. Anyone can configure R to install packages from the RStudio public package manager, if they want to.</p>
<div class="cell">

</div>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-01-10_setting-cran-repositories/img/rasa-kasparaviciene-0TFxOkhFt14-unsplash.jpg" class="img-fluid" width="960"></p>
</div>
</div>
<p>But first a tiny bit of context‚Ä¶ back in the distant part there was this strange, nightmarish time where I was teaching students R, but RStudio was not yet a <em>thing</em>. Many of the little niceties that RStudio users now take for granted didn‚Äôt yet exist. In those dark years I had to spend a lot of time explaining to students that CRAN ‚Äî the <a href="https://cran.r-project.org/">comprehensive R archive network</a> ‚Äî isn‚Äôt actually a single website that contains lots of R packages. It‚Äôs more like a whole network of <a href="https://cran.r-project.org/mirrors.html">mirrors</a> distributed all over the world, and you‚Äôd have to manually choose which one you wanted to install packages from. It was mildly annoying. It‚Äôs considerably simpler now, because you can use the <a href="https://cloud.r-project.org/">cloud.r-project.org</a> service that automatically directs you to an appropriate server. In fact, if you‚Äôre using RStudio you‚Äôve probably been using this service all along.</p>
<p>RStudio package manager provides a modern alternative: it works like a CRAN mirror, but it has a lot of additional functionality. It has broader coverage, for instance: it includes R packages on Bioconductor as well as packages on CRAN. For my purposes, however, the attractive property is that it hosts binaries suitable for Ubuntu and other flavours of linux.</p>
<p>‚ÄúBut how do I try it out, Danielle?‚Äù I hear you ask.</p>
<p>I‚Äôm so glad you asked, dear reader, because it‚Äôs so much easier than it sounds.</p>
</section>
<section id="method-1-rstudio-settings" class="level2">
<h2 class="anchored" data-anchor-id="method-1-rstudio-settings">Method 1: RStudio settings</h2>
<p>If you‚Äôre using RStudio, the easiest way to switch to RStudio PPM is to change your settings inside RStudio. Go to the RStudio <strong>Tools</strong> menu and select <strong>Global Options</strong>. When the popup window appears, click on <strong>Packages</strong>. You‚Äôll see a screen that looks like this:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-01-10_setting-cran-repositories/img/options.png" class="img-fluid" width="882"></p>
</div>
</div>
<p><br></p>
<p>If it says ‚ÄúRStudio Global CDN‚Äù next to ‚ÄúPrimary CRAN repo‚Äù, then you‚Äôre using <code>cloud.r-project.org</code> as your CRAN repository. To switch to RStudio PPM, click on the ‚Äúchange‚Äù button. It will bring up a list of CRAN mirrors, and if you want you can choose one of those. However the RStudio PPM isn‚Äôt technically a CRAN mirror, so it‚Äôs not listed there. If you want to switch to using the RStudio PPM, you have to enter the URL manually.</p>
<p>So what URL do you want? Well, it depends on whether you want to install packages from binaries or from source, and on what operating system you‚Äôre using. I‚Äôm on Ubuntu 20.04, ‚ÄúFocal Fossa‚Äù, and the URL that serves binaries for my operating system is:</p>
<pre><code>https://packagemanager.rstudio.com/all/__linux__/focal/latest</code></pre>
<p>Here‚Äôs me in the process of entering the URL:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-01-10_setting-cran-repositories/img/options2.png" class="img-fluid" width="880"></p>
</div>
</div>
<p><br></p>
<p>Okay, but what if you‚Äôre not on Ubuntu 20.04? If you‚Äôre on a different version of Ubuntu or some other operating system, you can find the link you need from the <a href="https://packagemanager.rstudio.com/client/#/repos/1/overview">package manager setup page</a>. The relevant part of the page should look something like this:</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-01-10_setting-cran-repositories/img/setup.png" class="img-fluid" width="843"></p>
</div>
</div>
<p><br></p>
<p>To get the URL you‚Äôre looking for, click on the ‚Äúchange‚Äù link to choose your operating system, or toggle between the binary and source options.</p>
</section>
<section id="method-2-edit-your-r-profile" class="level2">
<h2 class="anchored" data-anchor-id="method-2-edit-your-r-profile">Method 2: Edit your R profile</h2>
<p>There are a couple of limitations to this method. The most obvious one is that it‚Äôs no help if you don‚Äôt use RStudio, and even for RStudio users it can be awkward if you don‚Äôt always use RStudio. If that‚Äôs your situation, you may want to manage your CRAN repository links by editing your R profile. To do this, open the .Rprofile file ‚Äî using <code>usethis::edit_r_profile()</code>, for example ‚Äî and add the following line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">repos =</span> <span class="st" style="color: #20794D;">"https://packagemanager.rstudio.com/all/__linux__/focal/latest"</span>)</span></code></pre></div>
</div>
<p>You‚Äôll need to restart your R session for this change to take effect.</p>
<p>If you want to be fancy, you can list multiple URLs. If the package you want to install is not found at the first link, R will try the second link, and so on. That can be useful. For instance, this is what I use in my R profile:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">repos =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;">binary =</span> <span class="st" style="color: #20794D;">"https://packagemanager.rstudio.com/all/__linux__/focal/latest"</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;">source =</span> <span class="st" style="color: #20794D;">"https://packagemanager.rstudio.com/all/latest"</span>,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;">CRAN =</span> <span class="st" style="color: #20794D;">"https://cloud.r-project.org"</span>,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;">djnavarro =</span> <span class="st" style="color: #20794D;">"https://djnavarro.r-universe.dev"</span></span>
<span id="cb3-6">))</span></code></pre></div>
</div>
<p>Using this configuration, R will look for a suitable binary version of the package on RStudio PPM. If that fails it will try to install from RStudio PPM by building the package from the source code. If that fails, it checks CRAN in the usual way. Finally, if that fails, it looks to see if the package I‚Äôm requesting is one of the packages I listed at <a href="https://djnavarro.r-universe.dev">djnavarro.r-universe.dev</a>, my very own tiny corner of the <a href="https://ropensci.org/r-universe/">R-universe</a>. Obviously, you‚Äôre very unlikely to want to use my R-universe repository since it only consists of a handful of my own packages: but it‚Äôs quite handy for me since they aren‚Äôt all on CRAN!</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>If you‚Äôre a Windows or Mac user, you might not be aware of how much of a game changer this is for linux users. For example, in my <a href="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/">previous blog post</a> I wrote about my experiences getting started using Apache Arrow. I‚Äôm a big fan of Arrow ‚Äî which should come as no surprise as I‚Äôve recently started work at <a href="https://voltrondata.com/">Voltron Data</a> ‚Äî but if you‚Äôre installing the arrow R package on linux, it‚Äôs extremely time consuming to build all the C++ libraries from source. It was a little cumbersome, but after switching to RStudio PPM, I can install arrow on my Ubuntu machine using the exact same command I‚Äôd use on Windows‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"arrow"</span>)</span></code></pre></div>
</div>
<p>‚Ä¶and everything works. As easy on linux as it is on other operating systems! Yay! üéâ</p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  editor = {},
  title = {Setting {CRAN} Repository Options},
  date = {2022-01-10},
  url = {https://blog.djnavarro.net/setting-cran-repositories},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>‚ÄúSetting CRAN Repository Options.‚Äù</span>
January 10, 2022. <a href="https://blog.djnavarro.net/setting-cran-repositories">https://blog.djnavarro.net/setting-cran-repositories</a>.
</div></div></section></div> ]]></description>
  <guid>https://blog.djnavarro.net/posts/2022-01-10_setting-cran-repositories/index.html</guid>
  <pubDate>Sun, 09 Jan 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-01-10_setting-cran-repositories/img/rasa-kasparaviciene-0TFxOkhFt14-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Getting started with Apache Arrow</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>If you‚Äôre like me and spend far too much time talking about R on Twitter you may have come across people talking about how to work with large data sets in R. Perhaps you hear people talking about <a href="https://parquet.apache.org">Parquet files</a>, <a href="https://arrow.apache.org">Apache Arrow</a>, and the <a href="https://arrow.apache.org/docs/r/">arrow package for R</a>, but you‚Äôre not really sure what they‚Äôre about and are curious? If that‚Äôs you, then‚Äì</p>
<p><em>So we‚Äôre just writing obvious ‚ÄúI want a job in tech, please hire me!‚Äù blog posts pitched at potential employers now?</em></p>
<p>Oh shush. It‚Äôs fun and useful too, you know.</p>
<p><em>Okay fine, but could you at least be transparent about what you‚Äôre doing? Because it‚Äôs sort of obnoxious otherwise</em></p>
<p>Sheesh, what do you think this fake dialogue is for if not making the subtext blatant? Now could you please stop interrupting me and let me talk about Apache Arrow? It is in fact a more interesting subject than our pending unemployment.</p>
<p><em>Yeah, see how you feel about that in December babe‚Ä¶</em></p>
<p>Sigh.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/img/tim-mossholder-ClIqpOqxZlc-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Arrow image by Tim Mossholder. It has nothing whatsoever to do with the Apache Software Foundation. Available by CC0 licence on <a href="https://unsplash.com/photos/ClIqpOqxZlc">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Okay, where was I? Ah yes‚Ä¶</p>
<p>If you‚Äôre like me and spend far too much time talking about R on Twitter you may have come across people talking about how to work with large data sets in R. Perhaps you hear people talking about <a href="https://parquet.apache.org">Parquet files</a>, <a href="https://arrow.apache.org">Apache Arrow</a>, and the <a href="https://arrow.apache.org/docs/r/">arrow package for R</a>, but you‚Äôre not really sure what they‚Äôre about and are curious? If that‚Äôs you, then then this blog post is designed to help you get started.</p>
<section id="wait-do-i-actually-care" class="level3">
<h3 class="anchored" data-anchor-id="wait-do-i-actually-care">Wait‚Ä¶ do I actually care?</h3>
<p>Let‚Äôs start at the beginning, with the most important question of all: do you actually need to care about this? This might be a long post (or possibly the first post in a long series), so let‚Äôs make sure you‚Äôre reading for the right reasons!</p>
<p>For a lot of people, the answer to the ‚Äúdo I care?‚Äù question is going to be ‚Äúprobably not ‚Äì or at least not right now‚Äù. For example, if all your data sets are small and rectangular, then you‚Äôre probably working with CSV files and not encountering a lot of problems. Your current workflow uses <code>read.csv()</code> or <code>readr::read_csv()</code> to import data, and everything is fine. Sure, the CSV format has some problems, but it‚Äôs simple and it works. If that is you, then right now you don‚Äôt need to worry about this.</p>
<p>But perhaps that‚Äôs not you, or maybe that won‚Äôt be you forever. You might be working with larger data sets, either now or in the future, and when that happens you might need to care.</p>
</section>
<section id="okay-so-whats-the-problem" class="level3">
<h3 class="anchored" data-anchor-id="okay-so-whats-the-problem">Okay‚Ä¶ so what‚Äôs the problem?</h3>
<p>Thanks for a great question! Here are a few scenarios to think about.</p>
<ul>
<li><p><strong>Scenario 1:</strong> Let‚Äôs suppose you have a big rectangular data set. An enormous table, basically, and currently it‚Äôs stored as a file on your disk. The format of that file could be a plain CSV, a compressed CSV, or it could be something fancier like a Parquet file (I‚Äôll come back to those in a later post, I suspect). It might be a couple of billion rows or so, the kind of thing that you can store on disk but is too big to fit into memory, so it‚Äôs not going to be very easy to read this thing into R as a data frame! But your boss wants you to analyse it in R anyway. That‚Äôs awkward. R likes to store things in memory. Eek.</p></li>
<li><p><strong>Scenario 2:</strong> Okay, maybe your data isn‚Äôt that big and it fits in memory, but it‚Äôs still pretty big, and you need to do something complicated with it. Maybe your analysis needs to start in R but then continue in Python. Or something like that. In your head, you‚Äôre thinking okay first I have to read the whole dataset into memory in R, and then it has to be transferred to Python which will have to read its own copy, and‚Ä¶ gosh that sounds slow and inefficient. Ugh.</p></li>
<li><p><strong>Scenario 3:</strong> Honestly, you‚Äôre just tired of having to deal with the fact that every language has its own idiosyncratic way of storing data sets in memory and it‚Äôs exhausting to have to keep learning new things and you really wish there were some standardised way that programming languages represent data in memory and you‚Äôd like a single toolkit that you can use regardless of what language you‚Äôre in. Sigh‚Ä¶</p></li>
</ul>
<p>In any of these scenarios, Arrow might be useful to you.</p>
</section>
<section id="fiiiiiine-ill-keep-reading-tell-me-what-arrow-is" class="level3">
<h3 class="anchored" data-anchor-id="fiiiiiine-ill-keep-reading-tell-me-what-arrow-is">Fiiiiiine, I‚Äôll keep reading‚Ä¶ tell me what Arrow is</h3>
<p>Yaaaaay! <a href="https://en.wikipedia.org/wiki/Green_Arrow">Green Arrow</a> is a superhero in the DC Comics universe, whose real name is Oliver Queen. He was the subject of an unintentionally hilarious TV show, and‚Äì</p>
</section>
<section id="sigh.-apache-arrow-please" class="level3">
<h3 class="anchored" data-anchor-id="sigh.-apache-arrow-please">Sigh. <em>Apache</em> Arrow please?</h3>
<p>Oh right. Apache Arrow is a standardised, language-independent format for storing table-like data in-memory, using a columnar format and supporting zero-copy reads without serialisation overhead.</p>
</section>
<section id="i-hate-you" class="level3">
<h3 class="anchored" data-anchor-id="i-hate-you">I hate you</h3>
<p>Sorry. Let‚Äôs unpack each of those terms:</p>
<ul>
<li>Arrow is a <strong>standardised and language-independent format</strong>. It‚Äôs the same thing regardless of what programming language you‚Äôre using: a data set accessed from R with Arrow has the same format as the a data set accessed in Python.</li>
<li>Arrow is used to store <strong>table-like data</strong>, very similar to a data frame or tibble.</li>
<li>Arrow refers to the <strong>in-memory</strong> format: it‚Äôs not talking about how the data are stored on disk, and it‚Äôs not talking about file formats. It‚Äôs all about how a loaded data set is represented in memory.<sup>1</sup></li>
<li>Arrow uses <strong>columnar format</strong>. Unlike a CSV file, which stores the data row-wise, it represents the data column-wise: this turns out to be a much more efficient way to represent data when you need to subset the data (e.g., by using <code>dplyr::filter()</code> in R or the <code>WHERE</code> clause in SQL).</li>
<li>Arrow supports <strong>zero-copy reads without serialisation overhead</strong>, which‚Ä¶ um‚Ä¶ yeah, what the heck does that mean?</li>
</ul>
<p>So yeah. <a href="https://en.wikipedia.org/wiki/Serialization">Serialisation</a> is one of those terms that those fancy data people know all about, but a regular R user might not be <em>quite</em> as familiar with. It‚Äôs worth unpacking this a bit because it‚Äôs helpful for understanding the problem that Arrow solves‚Ä¶</p>
<p>‚Ä¶Hey!</p>
<p>Wait a second, I already wrote a <a href="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/">blog post about serialisation</a>! I don‚Äôt need to write another one.<sup>2</sup> The TL;DR, for folks who quite reasonably don‚Äôt want to do a deep dive into how R objects are written to RDS files, is that serialisation is the process of taking an in-memory data structure (like a data frame), and converting it into a sequence of bytes. Those bytes can either be written to disk (when you‚Äôre saving a file) or they can be transmitted over some other channel. Regardless of what you want to <em>do</em> with the serialised data, this conversion takes time and resources, and at some point the data will need to be unserialised later. The resources expended in doing so are referred to as the ‚Äúserialisation overhead‚Äù.</p>
<p>For small data sets, it doesn‚Äôt take R very long to serialise or unserialise. The ‚Äúserialisation overhead‚Äù isn‚Äôt a big deal. But when the data set is very large, this is not a trivial operation and you don‚Äôt want to do this very often. That‚Äôs a problem when a large data set needs to be passed around between multiple platforms. Loading the a CSV into R incurs a serialisation cost; transferring a copy of the data from R to Python incurs a serialisation cost. This happens because R and Python have different structured representations: a data frame in R is a different kind of thing to a panda in Python, so the data has to be serialised, transferred, and then unserialised at the other end in order to pass the data from one to another.</p>
<p>Wouldn‚Äôt it be nice if we could avoid that? What if there was just <em>one</em> data structure representing the table in-memory, and R and Python could both agree to use it? That would remove the need to copy and transfer the data, right? And in doing so, it would eliminate those pesky serialisation costs incurred every time. It would be a ‚Äúzero-copy‚Äù mechanism.</p>
<p>If <em>only</em> there were a standardised, language-independent format for storing table-like data in-memory, using a columnar format and supporting zero-copy reads without serialisation overhead‚Ä¶</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/img/possessed-photography-_E1PQXKUkMw-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Arrow image by Possessed Photography. It also has nothing whatsoever to do with the Apache Software Foundation. Available by CC0 licence on <a href="https://unsplash.com/photos/_E1PQXKUkMw">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="overview-of-arrow" class="level2">
<h2 class="anchored" data-anchor-id="overview-of-arrow">Overview of Arrow</h2>
<p>Here‚Äôs one of the two big ideas: <strong>standardisation prevents wasteful copying</strong>. The current situation that most of us are working in looks something like this. Every application and programming language defines its own format for storing data in memory (and often on disk too), and so any time multiple applications require access to the same data, there‚Äôs a serialisation cost. The bigger the data, the higher that cost will be. The more applications you connect to the same data, the more times you incur the cost:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/img/without_arrow.jpg" class="img-fluid" width="2016"></p>
</div>
</div>
<p>Arrow solves this problem by allocating its own memory to store the data, and providing tools that allow you to access this from any language you like. The goal is to make those tools feel ‚Äúnatural‚Äù in whatever language you‚Äôre using. For example, if you‚Äôre an R user, you may already be familiar with the <a href="https://dplyr.tidyverse.org/">dplyr</a> grammar for data manipulation and you‚Äôd like to be able to manipulate an Arrow Table using dplyr, in exactly the same way you would manipulate a data frame. The <a href="https://arrow.apache.org/docs/r/">arrow R package</a> allows you to do precisely this, and there‚Äôs a similar story that applies on the <a href="https://arrow.apache.org/docs/python/">Python side</a>. This allows you to write code that feels natural for the language you‚Äôre working in.</p>
<p>In this approach, <strong>R and Python both have a toolkit that plays nicely with Arrow and feels native to that language</strong>. Applications written in R and applications written in Python can both work with the same underlying data (because it‚Äôs in Arrow), so you don‚Äôt have to serialise the data in order for them to talk to each other:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/img/with_arrow.jpg" class="img-fluid" width="2016"></p>
</div>
</div>
<p>So that‚Äôs the first big idea.</p>
<p>The second big idea is that Arrow organises data column-wise in memory and as consequence it can support cool <a href="https://en.wikipedia.org/wiki/SIMD">single instruction multiple data</a> (or SIMD) operations that you can do with modern CPUs, which I totally understand 100% and am not just paraphrasing Wikipedia. Anyway, it doesn‚Äôt really matter at the user level. All we care about there is that manipulating data with Arrow can be very fast. There‚Äôs a very brief discussion of this on the <a href="https://arrow.apache.org/overview/">Arrow overview page</a>. (It also has prettier versions of my crappy handwritten diagrams)</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/img/denise-johnson-siRbJlln-xA-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Arrow image by Denise Johnson. Yet again, it has nothing whatsoever to do with the Apache Software Foundation but it is very pretty. Available by CC0 licence on <a href="https://unsplash.com/photos/siRbJlln-xA">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="installing-arrow" class="level2">
<h2 class="anchored" data-anchor-id="installing-arrow">Installing Arrow</h2>
<p>Installing Apache Arrow on your local machine as an R user is either extremely easy or mildly tiresome, depending almost entirely on whether you‚Äôre on Linux. If you‚Äôre using Windows or Mac OS, you shouldn‚Äôt need to do anything except install the arrow package in the usual way. It just works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"arrow"</span>)</span></code></pre></div>
</div>
<p>If you‚Äôre on Linux, there may not be any precompiled C++ binaries for your system, so you‚Äôll have to do it yourself. On my system this was quite time consuming, and the first couple of times I tried it I was convinced that nothing was actually happening because I wasn‚Äôt seeing a progress bar or anything, and being impatient I killed the install process before it was finished. If you‚Äôre like me and need visual confirmation that something is happening, there‚Äôs an <code>ARROW_R_DEV</code> environment variable you can set that will make the process more verbose:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">Sys.setenv</span>(<span class="at" style="color: #657422;">ARROW_R_DEV =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"arrow"</span>)</span></code></pre></div>
</div>
<p>This way you get to see all the C++ build information scrolling by on the screen during the installation process. It doesn‚Äôt make for very exciting viewing, but at least you have visual confirmation that everything is working!</p>
<p>There are quite a few ways you can customise the installation process, and they‚Äôre all documented on the <a href="https://arrow.apache.org/docs/r/articles/install.html">installation page</a>. One particularly useful thing to do is to set <code>LIBARROW_MINIMAL</code> to false, which ensures that arrow will install a bunch of optional features like compression libraries and AWS S3 support. It takes longer but you get more stuff! So the actual installation code I used was this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">Sys.setenv</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;">ARROW_R_DEV =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;">LIBARROW_MINIMAL =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb3-4">)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"arrow"</span>)</span></code></pre></div>
</div>
<p>This may take quite a long time if you‚Äôre compiling from source so you may want to go make a cup of tea or something while it installs. At the end, hopefully, you‚Äôll have a working version of the package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span></code></pre></div>
</div>
<p>You can use the <code>arrow_info()</code> function to obtain information about your installation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">arrow_info</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Arrow package version: 8.0.0

Capabilities:
               
dataset    TRUE
substrait FALSE
parquet    TRUE
json       TRUE
s3         TRUE
utf8proc   TRUE
re2        TRUE
snappy     TRUE
gzip       TRUE
brotli     TRUE
zstd       TRUE
lz4        TRUE
lz4_frame  TRUE
lzo       FALSE
bz2        TRUE
jemalloc   TRUE
mimalloc   TRUE

Memory:
                  
Allocator jemalloc
Current    0 bytes
Max        0 bytes

Runtime:
                          
SIMD Level          avx512
Detected SIMD Level avx512

Build:
                          
C++ Library Version  8.0.0
C++ Compiler           GNU
C++ Compiler Version 9.4.0</code></pre>
</div>
</div>
<p>Yaaas queen! We are ready to go.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/img/frank-busch-LpYcecGTifI-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Arrow image by Frank Busch. Now there are two! There are two arrows. Available by CC0 licence on <a href="https://unsplash.com/photos/LpYcecGTifI">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="does-it-work" class="level2">
<h2 class="anchored" data-anchor-id="does-it-work">Does it work?</h2>
<p>My goal in this post is fairly modest. I wanted to understand why everyone I talk to seems so excited about Arrow, and try to get it configured to work on my machine. Assuming I can be bothered continuing this series, the next step would be to start playing with Arrow and do a proper exploration. For now though, I‚Äôll try something simple, using the <code>diamonds</code> data from the ggplot2 package</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb7-4">diamonds</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 √ó 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47
 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53
 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49
10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39
# ‚Ä¶ with 53,930 more rows</code></pre>
</div>
</div>
<section id="example-1-arrow-data-sets-arent-stored-in-r-memory" class="level3">
<h3 class="anchored" data-anchor-id="example-1-arrow-data-sets-arent-stored-in-r-memory">Example 1: Arrow data sets aren‚Äôt stored in R memory</h3>
<p>Okay, so the first thing I want to investigate is this idea that Arrow holds the data in its own memory, not in the memory allocated to R. As things currently stand the <code>diamonds</code> tibble has 53940 rows stored in R memory, and that occupies about 3.3MB of memory:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">lobstr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">obj_size</span>(diamonds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3,456,344 B</code></pre>
</div>
</div>
<p>What happens when we move the data into Arrow? To do this we would construct a ‚ÄúTable‚Äù object using the <code>arrow_table()</code> function, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">diamonds2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(diamonds)</span>
<span id="cb11-2">diamonds2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
53940 rows x 10 columns
$carat &lt;double&gt;
$cut &lt;dictionary&lt;values=string, indices=int8, ordered&gt;&gt;
$color &lt;dictionary&lt;values=string, indices=int8, ordered&gt;&gt;
$clarity &lt;dictionary&lt;values=string, indices=int8, ordered&gt;&gt;
$depth &lt;double&gt;
$table &lt;double&gt;
$price &lt;int32&gt;
$x &lt;double&gt;
$y &lt;double&gt;
$z &lt;double&gt;</code></pre>
</div>
</div>
<p>It‚Äôs printed a little differently, but it‚Äôs the same tabular data structure consisting of 53940 rows and 10 columns. So how much R memory does <code>diamonds2</code> occupy?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">lobstr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">obj_size</span>(diamonds2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>284,632 B</code></pre>
</div>
</div>
<p>Only 279KB. The reason why it occupies so little memory is that <code>diamonds2</code> doesn‚Äôt contain all the data. The data are stored elsewhere, using memory allocated to Arrow. If a Python program wanted to access the <code>diamonds2</code> data, it could do so without having to serialise the data again. It can link to the same data structure in Arrow memory that I just created. Neat!</p>
</section>
<section id="example-2-arrow-plays-nicely-with-dplyr" class="level3">
<h3 class="anchored" data-anchor-id="example-2-arrow-plays-nicely-with-dplyr">Example 2: Arrow plays nicely with dplyr</h3>
<p>One neat thing about dplyr is that it cleanly separates the API from the backend. So you can use the <a href="https://dbplyr.tidyverse.org/">dbplyr</a> package to work with databases using dplyr code, or the <a href="https://dtplyr.tidyverse.org/">dtplyr</a> package to use a data.table backend, and so on. The arrow package does the same thing for Apache Arrow.</p>
<p>Here‚Äôs an example. If I were working with the original <code>diamonds</code> tibble, I might write a simple dplyr pipe to tabulate the clarity of premium-cut diamonds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">diamonds <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;">filter</span>(cut <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Premium"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;">count</span>(clarity)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8 √ó 2
  clarity     n
  &lt;ord&gt;   &lt;int&gt;
1 I1        205
2 SI2      2949
3 SI1      3575
4 VS2      3357
5 VS1      1989
6 VVS2      870
7 VVS1      616
8 IF        230</code></pre>
</div>
</div>
<p>Can I do the same thing using the <code>diamonds2</code> Table? Let‚Äôs try:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">diamonds2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">filter</span>(cut <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Premium"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">count</span>(clarity)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table (query)
clarity: dictionary&lt;values=string, indices=int8, ordered&gt;
n: int32

See $.data for the source Arrow object</code></pre>
</div>
</div>
<p>Okay, perhaps not what we were expecting. In order to optimise performance, the query doesn‚Äôt get evaluated immediately (more on this in a later post perhaps) You have to tell it either to <code>compute()</code> the result, which will return another Table, or to <code>collect()</code> the result into a data frame</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">diamonds2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">filter</span>(cut <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Premium"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">count</span>(clarity) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">collect</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8 √ó 2
  clarity     n
  &lt;ord&gt;   &lt;int&gt;
1 SI1      3575
2 VS2      3357
3 SI2      2949
4 I1        205
5 VS1      1989
6 VVS1      616
7 VVS2      870
8 IF        230</code></pre>
</div>
</div>
<p>At no point has the full data set been loaded into R memory. The <code>diamonds2</code> object doesn‚Äôt contain any new information. It‚Äôs still the same size:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">lobstr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">obj_size</span>(diamonds2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>284,632 B</code></pre>
</div>
</div>
<p>My example is trivial, of course, because the diamonds data set isn‚Äôt very big. But if you start reading the Arrow documentation, they give an <a href="https://arrow.apache.org/docs/r/articles/dataset.html">example using the NYC taxi data</a> which is about 37GB in size. That‚Äôs‚Ä¶ a teeensy bit bigger than I‚Äôd want to try loading into memory on my laptop, so I wouldn‚Äôt be able to load it into R at all much less use dplyr. However, because Arrow supplies a dplyr back end, it is possible to write dplyr code for the NYC taxi data.</p>
<p>Old and jaded though I may be, I have to admit that‚Äôs pretty cool.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/img/apache_arrow.png" class="img-fluid figure-img" width="753"></p>
<p></p><figcaption class="figure-caption">Okay yeah, this one actually does have something to do with the Apache Software Foundation. It‚Äôs, like, a registered trademark or something. I‚Äôm guessing this counts as fair use though.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Technically speaking, there‚Äôs a little ambiguity here. Usually when we‚Äôre talking about Arrow we‚Äôre talking about the in memory specification, but the term is also used to refer to the software implementing it, which includes a lot of compute functionality that goes beyond what the specification states. Similarly, the Arrow in-memory format doesn‚Äôt <em>have</em> to imply any particular serialisation format, but in practice it‚Äôs tightly connected to the IPC (‚Äúinterprocess communication‚Äù) streaming and file format, and to the parquet file format. As a consequence, the term ‚ÄúArrow‚Äù is sometimes used to refer to that broader suite of tools.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Okay, I‚Äôll be honest, the RDS serialisation post came about because I was thinking about Arrow and serialisation costs, and got slightly distracted!‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {Getting Started with {Apache} {Arrow}},
  date = {2021-11-19},
  url = {https://blog.djnavarro.net/starting-apache-arrow-in-r},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúGetting Started with Apache
Arrow.‚Äù</span> November 19, 2021. <a href="https://blog.djnavarro.net/starting-apache-arrow-in-r">https://blog.djnavarro.net/starting-apache-arrow-in-r</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <guid>https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/index.html</guid>
  <pubDate>Thu, 18 Nov 2021 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/img/frank-busch-LpYcecGTifI-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data serialisation in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p align="right">
<em>I still alive, and that‚Äôs what matters. The traumatic experience of the last week is fading, leaving a pale residue of fear and the few scraps of writing that are the sole surviving documentation of these days. It is a tale of fright, a desperate agony, and like any good tragedy it starts with the hope and naive optimism of youth‚Ä¶</em>
</p>
<p><br></p>
<p>I‚Äôve decided the time has come for me to do a deep dive into <a href="https://en.wikipedia.org/wiki/Serialization">data serialisation</a> in R. Serialisation is one of those terms that comes up from time to time in data science, and it‚Äôs popped up so many times on my twitter feed that I feel like I need a better grasp of how serialisation works in R. It‚Äôs a topic that folks who work with big data or have a computer science background likely understand quite well, but a lot of people who use R come from other backgrounds. If you‚Äôre a social scientist who mostly works with small CSV files, for example, there‚Äôs no particular reason why you‚Äôd have encountered this. In my case, I‚Äôve worked as a mathematical psychologist and computational modeller for about 20 years, and until very recently I‚Äôve never had never had to think about it in any detail. The issue only came up for me when I started reading about <a href="https://arrow.apache.org">Apache Arrow</a> (a topic for another post, perhaps) and realised that I needed to have a better understanding of what all this data serialisation business is about, and how R handles it.</p>
<p>This post is aimed at anyone who is in a similar situation to me!</p>
<p align="right">
<br><em>Oh you sweet summer child. You really think you are prepared for the dark? That‚Äôs adorable.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/andrey-zvyagintsev-G5nl9_YEXuc-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Andrey Zvyagintsev. Available by CC0 licence on <a href="https://unsplash.com/photos/G5nl9_YEXuc">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<section id="what-is-serialisation" class="level2">
<h2 class="anchored" data-anchor-id="what-is-serialisation">What is serialisation?</h2>
<p>In general serialisation refers to any process that takes an object stored in memory and converts into a stream of bytes that can be written to a file or transmitted elsewhere. Any time we write data to a file, we are ‚Äúserialising‚Äù it according to some encoding scheme. Suppose, for instance, I have a data frame called <code>art</code>:</p>
<div class="cell">

</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">art</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   resolution      series sys_id img_id   short_name format
1        1000 watercolour  sys02  img34 teacup-ocean    jpg
2        1000 watercolour  sys02  img34 teacup-ocean    png
3        2000 watercolour  sys02  img34 teacup-ocean    jpg
4        2000 watercolour  sys02  img34 teacup-ocean    png
5        4000 watercolour  sys02  img34 teacup-ocean    jpg
6        4000 watercolour  sys02  img34 teacup-ocean    png
7         500 watercolour  sys02  img34 teacup-ocean    jpg
8         500 watercolour  sys02  img34 teacup-ocean    png
9        8000 watercolour  sys02  img34 teacup-ocean    jpg
10       8000 watercolour  sys02  img34 teacup-ocean    png</code></pre>
</div>
</div>
<p>This data frame is currently stored in memory on my machine, and it has structure. R represents this data frame as a list of length 6. Each element of this list is a pointer to another data structure, namely an atomic vector (e.g., numeric vector). The list is accompanied by additional metadata that tells R that this particular list is a data frame. The details of how this is accomplished don‚Äôt matter for this post. All that matters for now is that the in-memory representation of <code>art</code> is a structured object. It‚Äôs little more complicated than a stream of data, but if I want to save this data to a file it needs to be converted into one. The process of taking an in-memory structure and converting it to a sequence of bytes is called <strong>serialisation</strong>.</p>
<p>Serialisation doesn‚Äôt have to be fancy. The humble CSV file can be viewed as a form of serialisation for a data frame, albeit one that does not store all the metadata associated with the data frame. Viewed this way, <code>write.csv()</code> can be viewed as a serialisation function for tabular data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">write.csv</span>(art, <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"art.csv"</span>, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p>When I call this function R uses the <code>art</code> object to write text onto the disk, saved as the file ‚Äúart.csv‚Äù. If I were to open this file in a text editor, I‚Äôd see this:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>"resolution","series","sys_id","img_id","short_name","format"
1000,"watercolour","sys02","img34","teacup-ocean","jpg"
1000,"watercolour","sys02","img34","teacup-ocean","png"
2000,"watercolour","sys02","img34","teacup-ocean","jpg"
2000,"watercolour","sys02","img34","teacup-ocean","png"
4000,"watercolour","sys02","img34","teacup-ocean","jpg"
4000,"watercolour","sys02","img34","teacup-ocean","png"
500,"watercolour","sys02","img34","teacup-ocean","jpg"
500,"watercolour","sys02","img34","teacup-ocean","png"
8000,"watercolour","sys02","img34","teacup-ocean","jpg"
8000,"watercolour","sys02","img34","teacup-ocean","png"</code></pre>
</div>
</div>
<p>Although this view is human-readable, it is slightly misleading. The text in shown above isn‚Äôt the literal sequence of bytes. It‚Äôs how those bytes are displayed when the have been <strong>unserialised</strong> and displayed on screen as UTF-8 plain text. To get a sense of what serialised text actually looks like we can use the <code>charToRaw()</code> function. The first few characters of the text file are <code>"resolu"</code> which looks like this when series of bytes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">charToRaw</span>(<span class="st" style="color: #20794D;">'"resolu'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 22 72 65 73 6f 6c 75</code></pre>
</div>
</div>
<p>The raw vector shown in the output above uses one byte to represent each character. For instance, the character <code>"l"</code> is represented with the byte <code>6c</code> in the usual hexadecimal representation. We can unpack that byte into its consituent 8-bit representation using <code>rawToBits()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="st" style="color: #20794D;">"u"</span> <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">charToRaw</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">rawToBits</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 01 00 01 00 01 01 01 00</code></pre>
</div>
</div>
<p>(Note that the base pipe <code>|&gt;</code> is rendered as a triangle-shaped ligature in <a href="https://github.com/tonsky/FiraCode">Fira Code</a>)</p>
<p>Returning to the ‚Äúart.csv‚Äù data file, I can use <code>file()</code> and <code>readBin()</code> to define a simple helper function that opens a binary connection to the file, reads in the first 100 bytes (or whatever), closes the file, and then returns those bytes as a raw vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">read_bytes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(path, <span class="at" style="color: #657422;">max_bytes =</span> <span class="dv" style="color: #AD0000;">100</span>) {</span>
<span id="cb9-2">  con <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file</span>(path, <span class="at" style="color: #657422;">open =</span> <span class="st" style="color: #20794D;">"rb"</span>)</span>
<span id="cb9-3">  bytes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readBin</span>(con, <span class="at" style="color: #657422;">what =</span> <span class="fu" style="color: #4758AB;">raw</span>(), <span class="at" style="color: #657422;">n =</span> max_bytes)</span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;">close</span>(con)</span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;">return</span>(bytes)</span>
<span id="cb9-6">}</span></code></pre></div>
</div>
<p>Here are the first 100 bytes of the ‚Äúart.csv‚Äù file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">read_bytes</span>(<span class="st" style="color: #20794D;">"art.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 22 72 65 73 6f 6c 75 74 69 6f 6e 22 2c 22 73 65 72 69 65 73 22 2c 22 73 79
 [26] 73 5f 69 64 22 2c 22 69 6d 67 5f 69 64 22 2c 22 73 68 6f 72 74 5f 6e 61 6d
 [51] 65 22 2c 22 66 6f 72 6d 61 74 22 0a 31 30 30 30 2c 22 77 61 74 65 72 63 6f
 [76] 6c 6f 75 72 22 2c 22 73 79 73 30 32 22 2c 22 69 6d 67 33 34 22 2c 22 74 65</code></pre>
</div>
</div>
<p>The <code>read.csv()</code> function is similar to <code>read_bytes()</code> in spirit: when I call <code>read.csv("art.csv")</code>, R opens a connection to the ‚Äúart.csv‚Äù file. It then reads that sequence of bytes into memory, and then closes the file. However, unlike my simple <code>read_bytes()</code> function, it does something useful with that information. The sequence of bytes gets decoded (unserialised), and the result is that R reconstructs the original <code>art</code> data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">art <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"art.csv"</span>)</span>
<span id="cb12-2">art</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   resolution      series sys_id img_id   short_name format
1        1000 watercolour  sys02  img34 teacup-ocean    jpg
2        1000 watercolour  sys02  img34 teacup-ocean    png
3        2000 watercolour  sys02  img34 teacup-ocean    jpg
4        2000 watercolour  sys02  img34 teacup-ocean    png
5        4000 watercolour  sys02  img34 teacup-ocean    jpg
6        4000 watercolour  sys02  img34 teacup-ocean    png
7         500 watercolour  sys02  img34 teacup-ocean    jpg
8         500 watercolour  sys02  img34 teacup-ocean    png
9        8000 watercolour  sys02  img34 teacup-ocean    jpg
10       8000 watercolour  sys02  img34 teacup-ocean    png</code></pre>
</div>
</div>
<p>Thrilling stuff.</p>
<p align="right">
<br><em>Do you feel that slow dread yet, my dear? Do you feel yourself slipping? You are on the edge of the cliff. You can still climb back to safety if you want. You don‚Äôt have to fall. The choice is still yours.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/daniel-jensen-NMk1Vggt2hg-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Daniel Jensen. Available by CC0 licence on <a href="https://unsplash.com/photos/NMk1Vggt2hg">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="how-does-rds-serialisation-work" class="level2">
<h2 class="anchored" data-anchor-id="how-does-rds-serialisation-work">How does RDS serialisation work?</h2>
<p>Data can be serialised in different ways. The CSV format works reasonably well for rectangular data structures like data frames, but doesn‚Äôt work well if you need to serialise something complicated like a nested list. The <a href="https://www.json.org/json-en.html">JSON format</a> is a better choice for those cases, but it too has some limitations when it comes to storing R objects. To serialise an R object we need to store the metadata (classes, names, and other attributes) associated with the object, and if the object is a function there is a lot of other information relevant to its execution besides the source code (e.g., enclosing environment). Because R needs this information, it relies on the native RDS format to do the work. As it happens I have an ‚Äúart.rds‚Äù file on disk that stores the same data frame in the RDS format. When I use <code>readRDS()</code> to unserialise the file, it recreates the same data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">readRDS</span>(<span class="st" style="color: #20794D;">"art.rds"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   resolution      series sys_id img_id   short_name format
1        1000 watercolour  sys02  img34 teacup-ocean    jpg
2        1000 watercolour  sys02  img34 teacup-ocean    png
3        2000 watercolour  sys02  img34 teacup-ocean    jpg
4        2000 watercolour  sys02  img34 teacup-ocean    png
5        4000 watercolour  sys02  img34 teacup-ocean    jpg
6        4000 watercolour  sys02  img34 teacup-ocean    png
7         500 watercolour  sys02  img34 teacup-ocean    jpg
8         500 watercolour  sys02  img34 teacup-ocean    png
9        8000 watercolour  sys02  img34 teacup-ocean    jpg
10       8000 watercolour  sys02  img34 teacup-ocean    png</code></pre>
</div>
</div>
<p>However, when I read this file using <code>read_bytes()</code> it‚Äôs also clear that ‚Äúart.rds‚Äù contains a very different sequence of bytes to ‚Äúart.csv‚Äù:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">read_bytes</span>(<span class="st" style="color: #20794D;">"art.rds"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 1f 8b 08 00 00 00 00 00 00 03 8b e0 62 60 60 60 66 60 61 64 62 60 66 05 32
 [26] 19 58 43 43 dc 74 2d 80 62 c2 40 0e 1b 10 f3 02 31 50 11 f3 0b 08 66 bf 00
 [51] c1 fc 0b 20 98 f1 0b 04 cb 3b 40 30 83 00 58 3d 0b 03 27 90 e6 2e 4f 2c 49
 [76] 2d 4a ce cf c9 2f 2d 1a 4a 42 a8 be 60 2d ae 2c 36 30 1a 18 0e 9a 4b 32 73</code></pre>
</div>
</div>
<p>This is hardly surprising since RDS and CSV are different file formats. But while I have a pretty good mental model of what the contents of a CSV file look like, I don‚Äôt have a very solid grasp of what the format of an RDS file is. I‚Äôm curious.</p>
<p align="right">
<em>Oh sweetie, I tried to warn you‚Ä¶</em>
</p>
<section id="the-serialize-function" class="level3">
<h3 class="anchored" data-anchor-id="the-serialize-function">The <code>serialize()</code> function</h3>
<p>To get a sense of how the RDS format works, it‚Äôs helpful to note that R has a <code>serialize()</code> function and an <code>unserialize()</code> function that provide low-level access to the same mechanisms that underpin <code>saveRDS()</code> and <code>readRDS()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">bytes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">serialize</span>(art, <span class="at" style="color: #657422;">connection =</span> <span class="cn" style="color: #8f5902;">NULL</span>)</span></code></pre></div>
</div>
<p>As you can see, this is the same sequence of bytes returned by <code>read_bytes()</code>‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">bytes[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">100</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 58 0a 00 00 00 03 00 04 02 01 00 03 05 00 00 00 00 05 55 54 46 2d 38 00 00
 [26] 03 13 00 00 00 06 00 00 00 0d 00 00 00 0a 00 00 03 e8 00 00 03 e8 00 00 07
 [51] d0 00 00 07 d0 00 00 0f a0 00 00 0f a0 00 00 01 f4 00 00 01 f4 00 00 1f 40
 [76] 00 00 1f 40 00 00 00 10 00 00 00 0a 00 04 00 09 00 00 00 0b 77 61 74 65 72</code></pre>
</div>
</div>
<p>‚Ä¶oh wait, no it‚Äôs not. What gives???? The ‚Äúart.rds‚Äù file begins with <code>1f 8b 08 00</code>, whereas <code>serialize()</code> returns a sequence of bytes that begins with <code>58 0a 00 00</code>. These are not the same at all! Why is this happening???</p>
</section>
<section id="rds-uses-gzip-compression" class="level3">
<h3 class="anchored" data-anchor-id="rds-uses-gzip-compression">RDS uses gzip compression</h3>
<p>After digging a little into the help documentation, I realised that this happens because the default behaviour of <code>saveRDS()</code> is to write a compressed RDS file using gzip compression. In contrast, <code>serialize()</code> does not employ any form of compression. The <code>art.rds</code> file that I have stored on disk is that gzipped version, but it‚Äôs easy enough to save an uncompressed RDS file, simply by setting <code>compress = FALSE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">saveRDS</span>(art, <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"art_nozip.rds"</span>, <span class="at" style="color: #657422;">compress =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p>So now when I inspect the uncompressed file using <code>read_bytes()</code>, the output is the same one I obtained when I called <code>serialize(art)</code> earlier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">read_bytes</span>(<span class="st" style="color: #20794D;">"art_nozip.rds"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 58 0a 00 00 00 03 00 04 02 01 00 03 05 00 00 00 00 05 55 54 46 2d 38 00 00
 [26] 03 13 00 00 00 06 00 00 00 0d 00 00 00 0a 00 00 03 e8 00 00 03 e8 00 00 07
 [51] d0 00 00 07 d0 00 00 0f a0 00 00 0f a0 00 00 01 f4 00 00 01 f4 00 00 1f 40
 [76] 00 00 1f 40 00 00 00 10 00 00 00 0a 00 04 00 09 00 00 00 0b 77 61 74 65 72</code></pre>
</div>
</div>
<p>That‚Äôs a relief. I was getting very anxious there, but I feel a little better now. My sanity is restored.</p>
<p align="right">
<em>‚Ä¶for now.</em>
</p>
</section>
<section id="the-unserialize-function" class="level3">
<h3 class="anchored" data-anchor-id="the-unserialize-function">The <code>unserialize()</code> function</h3>
<p>That was frustrating. Anyway getting back to the main thread, the inverse of the <code>serialize()</code> function is <code>unserialize()</code>. It‚Äôs very similar to the <code>readRDS()</code> function that you‚Äôd normally use to read an RDS file, but you can apply it to a raw vector like <code>bytes</code>. Once again we reconstruct the original data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">unserialize</span>(bytes)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   resolution      series sys_id img_id   short_name format
1        1000 watercolour  sys02  img34 teacup-ocean    jpg
2        1000 watercolour  sys02  img34 teacup-ocean    png
3        2000 watercolour  sys02  img34 teacup-ocean    jpg
4        2000 watercolour  sys02  img34 teacup-ocean    png
5        4000 watercolour  sys02  img34 teacup-ocean    jpg
6        4000 watercolour  sys02  img34 teacup-ocean    png
7         500 watercolour  sys02  img34 teacup-ocean    jpg
8         500 watercolour  sys02  img34 teacup-ocean    png
9        8000 watercolour  sys02  img34 teacup-ocean    jpg
10       8000 watercolour  sys02  img34 teacup-ocean    png</code></pre>
</div>
</div>
<p>Yay.</p>
<p align="right">
<br><em>You can sense it can‚Äôt you? It will only get worse for you, my sweet. Look upon the grim visage of those that have passed this way before. Their lifeless bones are a warning.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/chelms-varthoumlien-j-zQJk6aaaA-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Chelms Varthoumlien. Available by CC0 licence on <a href="https://unsplash.com/photos/j-zQJk6aaaA">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="serialising-to-plain-text-rds" class="level2">
<h2 class="anchored" data-anchor-id="serialising-to-plain-text-rds">Serialising to plain text RDS</h2>
<p>Okay, so what I‚Äôve learned so far is that in most cases, an RDS file is just a gzipped version of ‚Ä¶ something. It‚Äôs the gzipped version of whatever the hell it is that <code>serialize()</code> creates. What I don‚Äôt yet know is how the <code>serialize()</code> function operates. What secret magic does it use? How does it construct this sequence of bytes? What do the contents of this file actually include?</p>
<p>I‚Äôll start simple. Trying to understand how a complicated object is serialised might be painful, so I‚Äôll set the <code>art</code> data frame to one side. Instead, I‚Äôll serialise a numeric vector containing three elements, and ‚Ä¶ I guess I‚Äôll set <code>ascii = TRUE</code> so that R uses UTF-8 to serialise the object to plain text format rather than ‚Ä¶ writing a binary file?</p>
<p align="right">
<br><em>Clever girl. Yes, the default behaviour is binary serialization. Unless otherwise specified using the <code>xdr</code> argument, <code>serialize()</code> enforces a big-endian representation on the binary encoding. But you didn‚Äôt want to go there did you? It frightened you, didn‚Äôt it? The abyss stares back at you, sweetness, and you are beginning to attract its attention</em>
</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">bytes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">serialize</span>(</span>
<span id="cb26-2">  <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">10.1</span>, <span class="fl" style="color: #AD0000;">2.2</span>, <span class="fl" style="color: #AD0000;">94.3</span>), </span>
<span id="cb26-3">  <span class="at" style="color: #657422;">connection =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb26-4">  <span class="at" style="color: #657422;">ascii =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb26-5">)</span></code></pre></div>
</div>
<p>When I print out the <code>bytes</code> vector I still don‚Äôt get text though?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">bytes</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 41 0a 33 0a 32 36 32 36 35 37 0a 31 39 37 38 38 38 0a 35 0a 55 54 46 2d 38
[26] 0a 31 34 0a 33 0a 31 30 2e 31 0a 32 2e 32 0a 39 34 2e 33 0a</code></pre>
</div>
</div>
<p>I was expecting text. Where is my text??? I dig a little deeper and realise my mistake. What I‚Äôm looking at here is the sequence of bytes that correspond to the UTF-8 encoded text. If I want to see that text using actual letters, I need to use <code>rawToChar()</code>. When I do that I see something that looks vaguely like data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">rawToChar</span>(bytes)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "A\n3\n262657\n197888\n5\nUTF-8\n14\n3\n10.1\n2.2\n94.3\n"</code></pre>
</div>
</div>
<p>It is a little easier to read if I use <code>cat()</code> to print the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">bytes <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">rawToChar</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;">cat</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A
3
262657
197888
5
UTF-8
14
3
10.1
2.2
94.3</code></pre>
</div>
</div>
<p>It‚Äôs‚Ä¶ not immediately obvious how this output should be interpreted? I don‚Äôt know what all these lines mean, but I recognise the last three lines: those are the three values stored in the vector I serialised. Now I just need to work out what the rest of it is all about.</p>
<p>But before I do, I‚Äôll check that this is exactly the same text that I see if I create an RDS file using the following command and then open that file in a text editor:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;">saveRDS</span>(</span>
<span id="cb33-2">  <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">10.1</span>, <span class="fl" style="color: #AD0000;">2.2</span>, <span class="fl" style="color: #AD0000;">94.3</span>), </span>
<span id="cb33-3">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"numbers.rds"</span>, </span>
<span id="cb33-4">  <span class="at" style="color: #657422;">ascii =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb33-5">  <span class="at" style="color: #657422;">compress =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb33-6">)</span></code></pre></div>
</div>
<p>Okay, it <a href="numbers.rds">checks out</a>. My excitement can barely be contained.</p>
<p align="right">
<br><em>Wilting already, aren‚Äôt you? Poor little flower, you‚Äôve been cut from the stem. You‚Äôre dead already but you don‚Äôt even know it. All that is left is to wither away under the blistering glare of knowledge.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/daria-shevtsova-7mbvu0biZgg-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Daria Shevtsova. Available by CC0 licence on <a href="https://unsplash.com/photos/7mbvu0biZgg">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="interpreting-the-rds-format" class="level2">
<h2 class="anchored" data-anchor-id="interpreting-the-rds-format">Interpreting the RDS format</h2>
<p>All right, lets see if I can interpret the contents of an RDS file. Rather than tediously writing the file to disk using <code>saveRDS()</code> and then loading it again, I‚Äôll cheat slightly and write a <code>show_rds()</code> function that serialises an object and prints the results directly to the R console:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">show_rds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(object, <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) {</span>
<span id="cb34-2">  rds <span class="ot" style="color: #003B4F;">&lt;-</span> object <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb34-3">    <span class="fu" style="color: #4758AB;">serialize</span>(<span class="at" style="color: #657422;">connection =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">ascii =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb34-4">    <span class="fu" style="color: #4758AB;">rawToChar</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb34-5">    <span class="fu" style="color: #4758AB;">strsplit</span>(<span class="at" style="color: #657422;">split =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb34-6">    <span class="fu" style="color: #4758AB;">unlist</span>()</span>
<span id="cb34-7">  <span class="cf" style="color: #003B4F;">if</span>(header <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">FALSE</span>) rds <span class="ot" style="color: #003B4F;">&lt;-</span> rds[<span class="sc" style="color: #5E5E5E;">-</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>)]</span>
<span id="cb34-8">  <span class="fu" style="color: #4758AB;">cat</span>(rds, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb34-9">}</span></code></pre></div>
</div>
<p>Just to make sure it‚Äôs doing what it‚Äôs supposed to I‚Äôll make sure it gives the output I‚Äôm expecting. Probably a good idea given how many times I‚Äôve been surprised so far‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;">show_rds</span>(<span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">10.1</span>, <span class="fl" style="color: #AD0000;">2.2</span>, <span class="fl" style="color: #AD0000;">94.3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A
3
262657
197888
5
UTF-8
14
3
10.1
2.2
94.3</code></pre>
</div>
</div>
<p>Okay, phew. That looks good.</p>
<p>I guess my next task is to work out what all this output means. The last three lines are obvious: that‚Äôs the data! What about the line above the data? That line reads <code>3</code> and is followed by three data values. I wonder if that‚Äôs a coincidence? I‚Äôll see what happens if I try to serialise just 2 numbers. Does that line change to <code>2</code>?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;">show_rds</span>(<span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">10.1</span>, <span class="fl" style="color: #AD0000;">2.2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A
3
262657
197888
5
UTF-8
14
2
10.1
2.2</code></pre>
</div>
</div>
<p>Yes. Yes it does. I am learning things.</p>
<p>Here‚Äôs what I know so far:</p>
<pre><code>A
3
262402
197888
5
UTF-8
14
3      # the object has length 3
10.1   # first value is 10.1
2.2    # second value is 2.2
94.3   # third value is 94.3</code></pre>
<p>Okay, so what‚Äôs next? The <code>14</code> in the preceding line. What does that mean?</p>
<p>I puzzled over this for a while, and ended up needing to consult an occult tome of dangerous lore ‚Äì the <a href="https://cran.r-project.org/doc/manuals/r-release/R-ints.pdf">R Internals Manual</a> ‚Äì to find a partial answer. On the very first page of the Infernals Manual there is a table listing the SEXPTYPE codes that R uses internally to specify what kind of entity is encoded by an R object. Here are a few of these SEXPTYPE codes:</p>
<table class="table">
<thead>
<tr class="header">
<th>Value</th>
<th>SEXPTYPE</th>
<th>Variable type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>10</td>
<td>LGLSXP</td>
<td>logical</td>
</tr>
<tr class="even">
<td>13</td>
<td>INTSXP</td>
<td>integer</td>
</tr>
<tr class="odd">
<td>14</td>
<td>REALSXP</td>
<td>numeric</td>
</tr>
<tr class="even">
<td>16</td>
<td>STRSXP</td>
<td>character</td>
</tr>
<tr class="odd">
<td>19</td>
<td>VECSXP</td>
<td>list</td>
</tr>
</tbody>
</table>
<p>So‚Ä¶ when I serialise a plain numeric vector, the RDS file writes the number 14 to the file. In that case I will tentatively update my beliefs about the RDS file</p>
<pre><code>A
3
262402
197888
5
UTF-8
14     # the object is numeric
3      # the object has length 3
10.1   # first value is 10.1
2.2    # second value is 2.2
94.3   # third value is 94.3</code></pre>
<p align="right">
<br><em>Oh no dear. You have strayed so far from the light already. That <code>14</code> carries much more meaning than your fragile mind is prepared to handle. Soon you will know better. Soon you will unravel entirely. You can feel it coming, can‚Äôt you?</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/roxy-aln--d3_Ez5pKss-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Roxy Aln Available by CC0 licence on <a href="https://unsplash.com/photos/-d3_Ez5pKss">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<section id="the-rds-header" class="level3">
<h3 class="anchored" data-anchor-id="the-rds-header">The RDS header</h3>
<p>At this point, I have annotated every part of the RDS file that corresponds to the actual object. Consulting the section of the Infernal Manual devoted to serialisation, I learn that the six lines at the beginning of the file are known as the RDS header. Reading further I learn that the first line specifies the encoding scheme (<code>A</code> for ASCII, <code>X</code> for binary big-endian). The second line specifies which version of the RDS file format is used. The third line indicates the version of R that wrote the file. Finally, the fourth line is the minimum version of R required to read the file.</p>
<p>If I annotate my RDS header to reflect this knowledge, I get this:</p>
<pre><code>A       # use ASCII encoding
3       # use version 3 of the RDS format
262402  # written with R version 4.1.2
197888  # minimum R version that can read it is 3.5
5
UTF-8 </code></pre>
<p>I am confused. Where did those numbers come from? Why does version 4.1.2 correspond to the number <code>262402</code>, and why does 3.5 get encoded as <code>197888</code>? The Manual is silent, and my thoughts become bleak. Am I losing my mind? Is the answer obvious??? What mess have I gotten myself into?</p>
<p>In desperation, I look at the <a href="https://github.com/wch/r-source/blob/79298c499218846d14500255efd622b5021c10ec/tools/GETVERSION#L11">R source code</a> which reveals unto me the magic formula:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">encode_r_version <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(major, minor, patch) {</span>
<span id="cb42-2">  (major <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">65536</span>) <span class="sc" style="color: #5E5E5E;">+</span> (minor <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">256</span>) <span class="sc" style="color: #5E5E5E;">+</span> patch</span>
<span id="cb42-3">}</span></code></pre></div>
</div>
<p>Yessss. This all makes sense now‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;">encode_r_version</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;">encode_r_version</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 262402
[1] 197888</code></pre>
</div>
</div>
<p>‚Ä¶so much sense.</p>
<p>What about the other two lines in the header? Prior to RDS version 3 ‚Äì which was released in R version 3.5 ‚Äì those two lines didn‚Äôt exist in the header. Those are now used to specify the ‚Äúnative encoding‚Äù of the file, according to the Manual.</p>
<p>‚ÄúBut isn‚Äôt that ASCII????‚Äù, whispers a voice in my head. ‚ÄúIs that not what the <code>A</code> is for?‚Äù</p>
<p>Not quite. The RDS file format isn‚Äôt restricted to ASCII characters. In the usual case, the RDS file can encode any <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8 character</a> and the native encoding line reads <code>UTF-8</code>. There is another possibility though: the file may use the <a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1">Latin-1 alphabet</a>. Because of this, there is some ambiguity that needs to be resolved. The RDS file needs to indicate which character set is used for the encoding.</p>
<p>My annotated header now looks like this:</p>
<pre><code>A      # the file uses ASCII encoding
3      # the file uses version 3 of the RDS format
262402 # the file was written in R version 4.1.2
197888 # the minimum R version that can read it is 3.5
5
UTF-8  # the file encodes UTF-8 characters not Latin-1</code></pre>
<p>Okay, that makes a certain kind of sense, but what‚Äôs the story behind that <code>5</code>? What does that mean? What dark secret does it hide?</p>
<p>It took me so very long to figure this one out. As far as I can tell this line isn‚Äôt discussed in the R Internals Manual, but I worked it out by looking at the <a href="https://github.com/wch/r-source/blob/79298c499218846d14500255efd622b5021c10ec/src/main/serialize.c#L1405-L1408">source code for serialize</a>. That line reads <code>5</code> because it‚Äôs telling the parser that the string that follows on the next line (i.e., <code>UTF-8</code>) contains five characters. Presumably if I‚Äôd used Latin-1 encoding, the corresponding line would have been <code>7</code>.</p>
<p>This is doing my head in, but I think I‚Äôm okay?</p>
<p align="right">
<em>Are you sure? Really? You don‚Äôt sound too certain</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/liza-polyanskaya-PrXN8-YG5WI-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Liza Polyanskaya. Available by CC0 licence on <a href="https://unsplash.com/photos/PrXN8-YG5WI">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="logical-integer-and-numeric-vectors" class="level3">
<h3 class="anchored" data-anchor-id="logical-integer-and-numeric-vectors">Logical, integer, and numeric vectors</h3>
<p>Now that I have a sense of how the RDS header works, I‚Äôll set <code>header = FALSE</code> whenever I call <code>show_rds()</code> from now on. That way I won‚Äôt have to look at that same six lines of output over and over and they will no longer haunt my dreams.</p>
<p align="right">
<em>Oh no my dear. Hiding won‚Äôt save you.</em>
</p>
<p>I think the time has come to look at how RDS encodes other kinds of data. For three of the four commonly used atomic vector types (logical, integer, and numeric), the RDS format looks exactly as I expected given what I learned earlier. As shown in the table above, the SEXPTYPE code for a logical vector is 10, so a logical vector with four elements looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;">show_rds</span>(</span>
<span id="cb46-2">  <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="cn" style="color: #8f5902;">NA</span>), </span>
<span id="cb46-3">  <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb46-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>10
4
1
1
0
NA</code></pre>
</div>
</div>
<p><code>TRUE</code> values are represented by <code>1</code> in the RDS file, and <code>FALSE</code> values are represented by <code>0</code>. Missing values are represented as <code>NA</code>.</p>
<p>For an integer vector, the output is again familiar. The SEXPTYPE here is 13, so a vector of four integer looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;">show_rds</span>(</span>
<span id="cb48-2">  <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span>10L, 20L, 30L, <span class="cn" style="color: #8f5902;">NA</span>),</span>
<span id="cb48-3">  <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb48-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>13
4
-10
20
30
NA</code></pre>
</div>
</div>
<p>Numeric vectors I‚Äôve already seen. They have SEXPTYPE of 14, so a numeric vector of length 3 starts with <code>14</code> on the first line, <code>3</code> on the second line, and then the numbers themselves appear over the remaining three lines. However, there is a catch. There always is when dealing with real numbers. Numeric values are subject to the vagaries of <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic">floating point arithmetic</a> when represented in memory, and the encoding is not exact. As a consequence, it is entirely possible that something like this happens:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;">show_rds</span>(</span>
<span id="cb50-2">  <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">10.3</span>, <span class="fl" style="color: #AD0000;">99.9</span>, <span class="dv" style="color: #AD0000;">100</span>),</span>
<span id="cb50-3">  <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb50-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>14
3
10.3
99.90000000000001
100</code></pre>
</div>
</div>
<p>Floating point numbers always make my head hurt. It is best not to dwell too long upon them lest my grip on sanity loosen.</p>
<p align="right">
<em>Too late. Far, far too late.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/hoshino-ai-sybO0dQ8hTw-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Hoshino Ai. Available by CC0 licence on <a href="https://unsplash.com/photos/sybO0dQ8hTw">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="character-vectors" class="level3">
<h3 class="anchored" data-anchor-id="character-vectors">Character vectors</h3>
<p>What about character vectors?</p>
<p align="right">
<br><em>Adorable that you think these will be safer waters in which to swim my dear. A wiser woman would turn back now and return to the shallows. Yet there you go, drifting out to sea. Fool.</em>
</p>
<p><br></p>
<p>Let‚Äôs create a simple character vector. According to the table above, character vectors have SEXPTYPE 16, so I‚Äôd expect that a character vector with three elements would start with <code>16</code> on the first line and <code>3</code> on the second line, which would then be followed by the contents of each cell.</p>
<p>And that‚Äôs‚Ä¶ sort of true?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;">show_rds</span>(</span>
<span id="cb52-2">  <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"text"</span>, <span class="st" style="color: #20794D;">"is"</span>, <span class="st" style="color: #20794D;">"strange"</span>),</span>
<span id="cb52-3">  <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb52-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>16
3
262153
4
text
262153
2
is
262153
7
strange</code></pre>
</div>
</div>
<p>The format of this output <em>is</em> roughly what I was expecting, except for the fact that each string occupies three lines. For instance, these three lines correspond to the word <code>"strange"</code>:</p>
<pre><code>262153
7
strange</code></pre>
<p>This puzzled me at first. Eventually, I remembered that the source code for R is written in C, and C represents strings as an array. So where R treats the word <code>"strange"</code> a <em>single</em> object with length 1, C treats it as a string array containing 7 characters. In the R source code, the object encoding a string is called a CHARSXP. So lines two and three begin to make sense:</p>
<pre><code>262153
7        # the string has "length" 7
strange  # the 7 characters in the string</code></pre>
<p>What about the first line? Given everything I‚Äôve seen previously it‚Äôs pretty tempting to guess that it means something similar to the SEXPTYPE codes that we‚Äôve seen earlier. Perhaps in the same way that numeric is SEXPTYPE 14 and logical is SEXPTYPE 10, maybe there‚Äôs some sense in which a single string has a ‚ÄúSEXPTYPE‚Äù of 262153? That can‚Äôt be right though. According to the R Internals Manual, a CHARSXP object has a SEXPTYPE code of 9, not 262153. I must be misunderstanding something? Why is it 262153?</p>
<p align="right">
<br><em>Frightened by the first wave, are you? All in good time my love. The secrets of 262153 will reveal themselves soon.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/tim-marshall-qKlD2QlK-CY-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Tim Marshall Available by CC0 licence on <a href="https://unsplash.com/photos/qKlD2QlK-CY">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="lists" class="level3">
<h3 class="anchored" data-anchor-id="lists">Lists</h3>
<p>What about lists? Lists are more complicated than atomic vectors, because they‚Äôre just containers for other data structures that can have different lengths and types. As mentioned earlier, they have SEXPTYPE 19, so a list with three elements will of course start with <code>19</code> on the first line and <code>3</code> on the second line. Here‚Äôs an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;">show_rds</span>(</span>
<span id="cb56-2">  <span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb56-3">    <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>), </span>
<span id="cb56-4">    <span class="fl" style="color: #AD0000;">10.2</span>, </span>
<span id="cb56-5">    <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"strange"</span>, <span class="st" style="color: #20794D;">"thing"</span>)</span>
<span id="cb56-6">  ),</span>
<span id="cb56-7">  <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb56-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>19
3
10
2
1
0
14
1
10.2
16
2
262153
7
strange
262153
5
thing</code></pre>
</div>
</div>
<p>This output makes my brain hurt, but it does make sense if I stare at it long enough. It begins with the two lines specifying that it‚Äôs a list of length three. This is then followed by the RDS representation for the logical vector <code>c(TRUE, FALSE)</code>, the RDS representation for the numeric vector <code>10.2</code>, and finally the RDS representation for the character vector <code>c("strange", "thing")</code>.</p>
<p>I have started using annotations and whitespace to make it clearer:</p>
<pre><code>19 # it's a list
3  # of length 3

  10  # list entry 1 is logical
   2  # of length 2
   
    1       # value is TRUE
    0       # value is FALSE
      
  14  # list entry 2 is numeric 
   1  # of length 1
   
    10.2    # value is 10.2
    
  16  # list entry 3 is character
   2  # of length 2
   
    262153  # every string starts with this
         7  # this string has 7 characters
   strange  # values are: s, t, r, a, n, g, e
   
    262153  # every string starts with this
         5  # this string has 5 characters
     thing  # values are: t, h, i, n, g</code></pre>
<p>I feel so powerful! My mind is now afire with knowledge! All the secrets of RDS will be mine‚Ä¶</p>
<p align="right">
<em>‚Ä¶and the madness strikes at last. Pride comes before the fall, always.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/moreno-matkovic-BlbBO2L3pK4-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Moreno Matkoviƒá. Available by CC0 licence on <a href="https://unsplash.com/photos/BlbBO2L3pK4">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="object-attributes" class="level3">
<h3 class="anchored" data-anchor-id="object-attributes">Object attributes</h3>
<p>One of the key features of R is that vectors are permitted to have arbitrary metadata: names, classes, attributes. If an R object contains metadata, that metadata must be serialised too. That has some slightly surprising effects. Let‚Äôs start with this very simple numeric object with two elements:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;">show_rds</span>(<span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">200</span>), <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>14
2
100
200</code></pre>
</div>
</div>
<p>As expected it has SEXPTYPE 14 (numeric), length 2, and the values it stores are 100 and 200. Nothing out of the ordinary here. But when I add a name to the object, the output is ‚Ä¶ complicated.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;">show_rds</span>(<span class="at" style="color: #657422;">object =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">200</span>), <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>526
2
100
200
1026
1
262153
5
names
16
2
262153
1
a
262153
1
b
254</code></pre>
</div>
</div>
<p>I ‚Ä¶ don‚Äôt know what I am looking at here. First off, I seem to be having the same problem I had with character strings. If I take the first line of this output at face value I would think that a named numeric vector has SEXPTYPE 526. That can‚Äôt be right, can it?</p>
<p align="right">
<br><em>It isn‚Äôt. In the same way that strings don‚Äôt have a SEXPTYPE of 262153 (the actual number is 9), the 526 here is a little misleading. This is a numeric vector and like all numeric vectors it is SEXPTYPE 14. You will learn the error of your ways very soon.</em>
</p>
<p><br></p>
<p>Setting that mystery aside, I notice that the RDS output is similar to the output we saw when converting a list to RDS. The output contains the numeric vector first (the data), which is then followed by a list that specifies the attributes linked to that object?</p>
<p align="right">
<br> <em>Not quite. You‚Äôre so close, but it‚Äôs a pairlist, not a list. The underlying data structure is different. Don‚Äôt let it worry your mind, sweet thing. Preserve your mind for the trials still to come.</em>
</p>
<p><br></p>
<p>For this object, there‚Äôs only one attribute that needs to be stored, corresponding to the names associated with each element of the vector. If I annotate the output again, I get this:</p>
<pre><code>526     # Numeric vector 
2       # with two values

   100     # value 1 
   200     # value 2
   
1026    # Pairlist for attributes
1       # with one pair of entries

   262153  # The attribute is called "names"
   5       # 
   names   # 
   
   16      # The attribute has two values
   2       # 
   
      262153   # First value is "a"
           1   #
           a   # 

      262153   # Second value is "b"
           1   #
           b   #

254   # end of pairlist</code></pre>
<p>The <code>254</code> marking the end of the pairlist confused me for a little while, but it isn‚Äôt arbitrary. It represents a <code>NULL</code> value in the RDS format:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;">show_rds</span>(<span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">header=</span><span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>254</code></pre>
</div>
</div>
<p align="right">
<em>Yes, my dear. If you look at the relevant part of the R source code, you see that there are a collection of <a href="https://github.com/wch/r-source/blob/79298c499218846d14500255efd622b5021c10ec/src/main/serialize.c#L680-L720">‚Äúadministrative codes‚Äù</a> that are used to denote special values in a SEXPTYPE-like fashion. <code>NULL</code> is the one you‚Äôd be most likely to encounter though. Perhaps best not to travel down that road tonight though? Wait until day. You‚Äôre getting tired.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/kelly-sikkema-D_5iQVxKkPY-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Kelly Sikkema. Available by CC0 licence on <a href="https://unsplash.com/photos/D_5iQVxKkPY">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="typeflag-packing" class="level2">
<h2 class="anchored" data-anchor-id="typeflag-packing">Type/flag packing</h2>
<p>Throughout this post, I‚Äôve given the impression that when R serialises an object to RDS format, the first thing it writes is the SEXPTYPE of that object. Technically I wasn‚Äôt <em>lying</em>, but this is an oversimplificiation that hides something important. It‚Äôs time to unpack this, and to do that I‚Äôll have to dive into the R source code‚Ä¶</p>
<section id="decoding-the-sexptype" class="level3">
<h3 class="anchored" data-anchor-id="decoding-the-sexptype">Decoding the SEXPTYPE</h3>
<p>After digging around in the source code I found the answer. What R actually does in that first entry is write a single integer, and <a href="https://github.com/wch/r-source/blob/79298c499218846d14500255efd622b5021c10ec/src/main/serialize.c#L722-L738">packs multiple pieces of information</a> into the bits that comprise that integer. Only the first eight bits are used to define the SEXPTYPE. Other bits are used as flags indicating other things. Earlier on, I said that a value of 526 actually corresponds to a SEXPTYPE of 14. That becomes clearer when we take a look at the binary representation of 14 and 526. The first eight bits are identical:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;">intToBits</span>(<span class="dv" style="color: #AD0000;">14</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[26] 00 00 00 00 00 00 00</code></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;">intToBits</span>(<span class="dv" style="color: #AD0000;">526</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 00 01 01 01 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[26] 00 00 00 00 00 00 00</code></pre>
</div>
</div>
<p>To extract the SEXPTYPE, what we want to do is ignore all the later bits. I could write a function that uses <code>intToBits()</code> to unpack an integer into its binary representation, then sets all the bits except the first eight to 0, and then converts back to an integer ‚Ä¶but there‚Äôs no need. The thing I just described is a ‚Äúbitwise AND‚Äù operation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">decode_sexptype <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">bitwAnd</span>(x, <span class="dv" style="color: #AD0000;">255</span>)</span>
<span id="cb70-2"></span>
<span id="cb70-3"><span class="fu" style="color: #4758AB;">decode_sexptype</span>(<span class="dv" style="color: #AD0000;">14</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 14</code></pre>
</div>
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1"><span class="fu" style="color: #4758AB;">decode_sexptype</span>(<span class="dv" style="color: #AD0000;">526</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 14</code></pre>
</div>
</div>
<p>When I said that those 262153 values we encounter every time a string is serialised actually correspond to a SEXPTYPE of 9, this is exactly what I was talking about:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1"><span class="fu" style="color: #4758AB;">decode_sexptype</span>(<span class="dv" style="color: #AD0000;">262153</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9</code></pre>
</div>
</div>
<p>The attributes pairlist, which gave us a value of 1026 when the RDS is printed out as text?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="fu" style="color: #4758AB;">decode_sexptype</span>(<span class="dv" style="color: #AD0000;">1026</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p>Those are SEXPTYPE 2, and if we check the <a href="https://cran.r-project.org/doc/manuals/r-release/R-ints.pdf">R internals manual</a> again, we see that this is indeed the code for a pairlist.</p>
<p>I feel triumphant, but broken.</p>
<p align="right">
<em>Girl, same.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/aimee-vogelsang-DbJR10fEteE-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Aimee Vogelsang. Available by CC0 licence on <a href="https://unsplash.com/photos/DbJR10fEteE">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="whats-in-the-other-bits" class="level3">
<h3 class="anchored" data-anchor-id="whats-in-the-other-bits">What‚Äôs in the other bits?</h3>
<p>I fear that my mind is lost, but in case anyone uncover these notes and read this far, I should document what I have learned about the contents of the other bits. There are a few different things in there. The two you‚Äôd most likely encounter are the object flag (bit 9) and the attributes flag (bit 10). For example, consider the data frame below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb78-2">  <span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb78-3">  <span class="at" style="color: #657422;">b =</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb78-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  a b
1 1 2</code></pre>
</div>
</div>
<p>has an integer code of 787. Data frames are just lists with additional metadata, so it‚Äôs not surprising that when we extract the SEXPTYPE we get a value of 19:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="fu" style="color: #4758AB;">decode_sexptype</span>(<span class="dv" style="color: #AD0000;">787</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 19</code></pre>
</div>
</div>
<p>But data frames are also more than lists. They have an explicit S3 class (<code>"data.frame"</code>) and they have other attributes too: <code>"names"</code> and <code>"row.names"</code>. If we unpack the integer code 787 into its constituent bits we see that bit 9 and bit 10 are both set to 1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="fu" style="color: #4758AB;">intToBits</span>(<span class="dv" style="color: #AD0000;">787</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 01 01 00 00 01 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[26] 00 00 00 00 00 00 00</code></pre>
</div>
</div>
<p>Bit 9 is the ‚Äúobject flag‚Äù: it specifies whether or not the R data structure has a class attribute. Bit 10 is the more general one, and is called the ‚Äúattribute flag‚Äù: it specifies whether or not the object has any attributes.</p>
</section>
<section id="okay-but-whats-up-with-262153" class="level3">
<h3 class="anchored" data-anchor-id="okay-but-whats-up-with-262153">Okay but what‚Äôs up with 262153?</h3>
<p>Who is asking me all these questions anyway?</p>
<p>It worries me that I‚Äôm now listening to the voices in my head, but okay fine. If we unpack the integer code 262153, we see that there‚Äôs something encoded in bit 19:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1"><span class="fu" style="color: #4758AB;">intToBits</span>(<span class="dv" style="color: #AD0000;">262153</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
[26] 00 00 00 00 00 00 00</code></pre>
</div>
</div>
<p>I haven‚Äôt found the part of the source code that sets this bit yet, but I‚Äôm pretty sure that the role of this bit is to flag whether or not the string should be added to the global string pool. In recent versions of R that‚Äôs true for all strings, so in practice every string has an integer code of 262153 rather than 9.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/pelly-benassi-Hz1WQbHcXag-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Pelly Benassi. Available by CC0 licence on <a href="https://unsplash.com/photos/Hz1WQbHcXag">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="are-we-done-yet" class="level2">
<h2 class="anchored" data-anchor-id="are-we-done-yet">Are we done yet?</h2>
<p>Well that depends on what you mean by asking the question. If you mean ‚Äúhave we described everything there is to know about the RDS format and how data serialisation works in base R?‚Äù then no, we‚Äôre absolutely not done. I haven‚Äôt said anything about how R serialises functions or expressions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">expr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">quote</span>(<span class="fu" style="color: #4758AB;">sum</span>(a, b, c))</span>
<span id="cb86-2">fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> </span></code></pre></div>
</div>
<p>These are both R objects and you can save them to RDS files. So of course there‚Äôs a serialisation format for those but it‚Äôs not a lot of fun. I mean, if you squint at it you can kiiiiiinnnnda see what‚Äôs going on with the expression‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1"><span class="fu" style="color: #4758AB;">show_rds</span>(expr, <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6
1
262153
3
sum
2
1
262153
1
a
2
1
262153
1
b
2
1
262153
1
c
254</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>‚Ä¶but if I do the same thing to <a href="fn.rds">serialise the function</a> it gets unpleasant. This has been quite an ordeal just getting this far, and I see no need to write about the serialisation of closures. Let someone else suffer through that, because my brain is a wreck.</p>
<p>So no, we are not ‚Äúdone‚Äù. The RDS format keeps some secrets still.</p>
<p>But if you mean ‚Äúhave we reached the point where the author is losing her mind and needs to rest?‚Äù then‚Ä¶ oh my god yes I am utterly and completely <em>done</em> with this subject, and wish to spend the rest of my night sobbing quietly in darkness.</p>
<p align="right">
<br><em>Let us never speak of this again.</em>
</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/img/andrey-zvyagintsev-kpjCk9ImBPA-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Andrey Zvyagintsev. Available by CC0 licence on <a href="https://unsplash.com/photos/kpjCk9ImBPA">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {Data Serialisation in {R}},
  date = {2021-11-15},
  url = {https://blog.djnavarro.net/serialisation-with-rds},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúData Serialisation in R.‚Äù</span> November
15, 2021. <a href="https://blog.djnavarro.net/serialisation-with-rds">https://blog.djnavarro.net/serialisation-with-rds</a>.
</div></div></section></div> ]]></description>
  <category>Serialisation</category>
  <guid>https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/index.html</guid>
  <pubDate>Sun, 14 Nov 2021 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/preview-image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Unpredictable paintings</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>Almost two years (2020-01-15) ago I wrote this blog post as an introduction to generative art in R. The idea behind the post was to start making a new generative art system from scratch, and write the blog post at the same time. By doing it that way the reader can see how the process unfolds and how many false starts and discarded ideas a generative artist tends to go through, even for a simple system like this one. The post disappeared when I moved my blog to its own subdomain and its own repository, but I‚Äôve now managed to rescue it! Hope it‚Äôs helpful‚Ä¶</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Over the last year or so I‚Äôve taken up generative artwork as a hobby, and I am occasionally asked to write an introduction to the subject‚Ä¶ how does one get started in generative art? When I started posting the code for my generative art to my <a href="https://github.com/djnavarro/rosemary">‚Äúrosemary‚Äù</a> repository I has this to say about my subjective experience when making artwork,</p>
<blockquote class="blockquote">
<p>Making generative artwork reminds me a lot of gardening. Both are aesthetic exercise, creating a pleasant and relaxing evironment that the artist/gardener can enjoy no less than anyone visiting the space. Both are hard work, too. Learning how to prune, learning which plants will thrive in the land that you have, knowing what nutrients differnt plants need, taking care of the garden in hard times, et cetera, none of these are easy. At the end you might have a sustainable native garden that blends in seamlessly with the environment and brings you joy, but growing the garden is itself a technical and sometimes physically demanding exercise. The analogy between gardening and generative artwork feels solid to me, but it‚Äôs not amazingly helpful if you want to start making this kind of art. If you want to start gardening, you probably don‚Äôt really want a fancy gardener to talk about their overall philosophy of gardens, you‚Äôd like a few tips on what to plant, how often to water and so on. This post is an attempt to do that, and like so many things in life, it is entirely <a href="https://twitter.com/lingtax/status/1217311050166460416">Mathew Ling‚Äôs fault</a>.</p>
</blockquote>
<p>The first thing to say about generative artwork is that it‚Äôs really up to you how you go about it. I do most of my programming using R, so that‚Äôs the language I use for my artwork. Most of the artwork I‚Äôve been making lately has relied on the <a href="https://github.com/thomasp85/ambient">ambient</a> package for the ‚Äúgenerative‚Äù component, but to be honest you don‚Äôt have to rely on fancy multidimensional noise generators or anything like that. You can use the standard pseudorandom number generators built into R to do the work. Since the point of this post is to talk about ‚Äúhow to get started‚Äù, this is exactly what I‚Äôll do!</p>
<p>In fact, what I‚Äôm going to do in this post is build a new system for generative art‚Ä¶ I‚Äôm not sure what I‚Äôm going to end up with or if it will be any good, but let‚Äôs see where it goes! For the purposes of this post I‚Äôm assuming that you‚Äôre somewhat familiar with the tidyverse generally and ggplot2 specifically, and are comfortable writing functions in R. There‚Äôs a couple of spots where I do something slightly more complex, but I‚Äôll explain those when they pop up. So, here goes‚Ä¶</p>
</section>
<section id="do-something-anything" class="level2">
<h2 class="anchored" data-anchor-id="do-something-anything">Do something, anything</h2>
<p>Truth be told, I almost never have a plan when I start building a new system. What I do is start playing with pictures that visualise random data in some fashion, and see where that takes me. So, okay‚Ä¶ I‚Äôll start out creating a data frame that contains random numbers: each row in the data frame is a single ‚Äúpoint‚Äù, and each column specifies an attribute: an <code>x</code> variable specifying a horizontal co-ordinate, a <code>y</code> variable specifying the vertical location, and a <code>g</code> variable that randomly assigns each of point to a ‚Äúgroup‚Äù of some kind. At this point in time I have no idea how I‚Äôm going to use this information:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-3">obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">100</span>), </span>
<span id="cb1-5">  <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">100</span>), </span>
<span id="cb1-6">  <span class="at" style="color: #657422;">g =</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-7">)</span>
<span id="cb1-8">obj</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 100 √ó 3
        x       y     g
    &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;
 1 -0.626 -0.620      1
 2  0.184  0.0421     3
 3 -0.836 -0.911     10
 4  1.60   0.158      7
 5  0.330 -0.655      4
 6 -0.820  1.77       1
 7  0.487  0.717      9
 8  0.738  0.910      7
 9  0.576  0.384      6
10 -0.305  1.68       4
# ‚Ä¶ with 90 more rows</code></pre>
</div>
</div>
<p>Something to note about this code is that I used <code>set.seed(1)</code> to set the state of the random number generator in R. This will ensure that every time I call the same ‚Äúrandom‚Äù code I will always get the same output. To get a different output, I change the seed to something different.</p>
<p>So I guess the first thing I‚Äôll do is try a scatterplot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">ggplot</span>(obj, <span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">colour =</span> g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Okay, yeah that‚Äôs scatterplot. I‚Äôm not feeling inspired here, but it does occur to me that I‚Äôve seen some very pretty hexbin plots in the past and maybe there‚Äôs some fun I could have playing with those?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">ggplot</span>(obj, <span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">geom_hex</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Computation failed in `stat_binhex()`:</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Hm. Interesting? Maybe I could split this by group and try overlaying different hexagonal shapes? That sometimes makes for a neat three-dimensional feel when two hexagonal grids are offset from one another‚Ä¶ okay let‚Äôs pursue that for a bit‚Ä¶</p>
<p><em>[an hour passes in which I draw many boring plots]</em></p>
<p>‚Ä¶yeah, okay I‚Äôve got nothing. It seemed like a good idea but I couldn‚Äôt make anything I really liked. This is, in my experience, really common. I go down quite a few blind alleys when making a generative system, discard a lot of things that don‚Äôt seem to do what I want. It‚Äôs an exploration process and sometimes when you explore you get lost. Oh well, let‚Äôs try something else. Instead of drawing a scatterplot, let‚Äôs connect the dots and draw some lines:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">ggplot</span>(obj, <span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">colour =</span> g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">geom_path</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Hm. A bit scribbly, but there‚Äôs something aesthetically pleasing there. Okay, what if I decided to turn the paths into polygons?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">ggplot</span>(obj, <span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">fill =</span> g, <span class="at" style="color: #657422;">group =</span> g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">geom_polygon</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Okay, this feels promising. It reminds me a bit of the time I accidentally drew some really pretty pictures by setting axis limits inappropriately when drawing kernel density estimates with ggplot2, and ended up using it as a way to explore the scico package. Let‚Äôs run with this‚Ä¶</p>
</section>
<section id="mix-it-up-a-bit" class="level2">
<h2 class="anchored" data-anchor-id="mix-it-up-a-bit">Mix it up a bit</h2>
<p>To try to get a sense of what you can do with a particular approach, it‚Äôs usually helpful to try out some variations. For example, the previous plot uses the ggplot2 default palette, which isn‚Äôt the most appealing colour scheme. So let‚Äôs modify the code to use palettes from the scico package. One of my favourites is the lajolla palette:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(scico)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">ggplot</span>(obj, <span class="fu" style="color: #4758AB;">aes</span>(x,y, <span class="at" style="color: #657422;">fill =</span> g, <span class="at" style="color: #657422;">group =</span> g)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">geom_polygon</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">scale_fill_scico</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"lajolla"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is definitely neat. I do like the ‚Äújagged little polygons‚Äù feel to this, but to be honest I‚Äôm getting a bit bored. I‚Äôve done a few different art pieces that exploit this effect before, and this isn‚Äôt the most exciting thing for me, so I want to push things in a different direction. Speaking of which, I‚Äôm not sure I want all the polygons to lie on top of each other so much, so what I‚Äôll do is create a small tibble called <code>grp</code> that specifies a random ‚Äúoffset‚Äù or ‚Äúshift‚Äù for each group, and then using <code>full_join()</code> from dplyr to merge it into the data object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">grp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;">g =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb9-3">  <span class="at" style="color: #657422;">x_shift =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>),</span>
<span id="cb9-4">  <span class="at" style="color: #657422;">y_shift =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb9-5">)</span>
<span id="cb9-6">obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">full_join</span>(obj, grp)</span>
<span id="cb9-7">obj</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 100 √ó 5
        x       y     g x_shift y_shift
    &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1 -0.626 -0.620      1   1.13   -1.00 
 2  0.184  0.0421     3   0.741   0.945
 3 -0.836 -0.911     10  -0.581   1.78 
 4  1.60   0.158      7  -0.408   0.376
 5  0.330 -0.655      4  -1.32    0.434
 6 -0.820  1.77       1   1.13   -1.00 
 7  0.487  0.717      9  -0.701  -1.43 
 8  0.738  0.910      7  -0.408   0.376
 9  0.576  0.384      6   0.398  -0.390
10 -0.305  1.68       4  -1.32    0.434
# ‚Ä¶ with 90 more rows</code></pre>
</div>
</div>
<p>So now I can adjust my ggplot2 code like this. Instead of defining each polygon in terms of the <code>x</code> and <code>y</code> columns, I‚Äôll add the <code>x_shift</code> and <code>y_shift</code> values so that each polygon gets moved some distance away from the origin. This is kind of helpful, because now I can see more clearly what my objects actually look like!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">ggplot</span>(</span>
<span id="cb11-2">  <span class="at" style="color: #657422;">data =</span> obj, </span>
<span id="cb11-3">  <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb11-4">    <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">+</span> x_shift, </span>
<span id="cb11-5">    <span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">+</span> y_shift, </span>
<span id="cb11-6">    <span class="at" style="color: #657422;">fill =</span> g, </span>
<span id="cb11-7">    <span class="at" style="color: #657422;">group =</span> g</span>
<span id="cb11-8">  )</span>
<span id="cb11-9">) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;">geom_polygon</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb11-11">  <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb11-13">  <span class="fu" style="color: #4758AB;">scale_fill_scico</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"lajolla"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Very pretty! But as I said, I‚Äôm bored with the ‚Äújagged little polygon‚Äù look, so what I want to do is find some way of changing the appearance of the shapes.</p>
</section>
<section id="cran-is-a-girls-best-friend" class="level2">
<h2 class="anchored" data-anchor-id="cran-is-a-girls-best-friend">CRAN is a girl‚Äôs best friend</h2>
<p>At this point in my process I was a bit lost for ideas. I want to do something different, and I <em>think</em> what I want to do is turn each point set into more of a regular shape, something without holes in it. It then occurred to me that way back in 1998 I did my honours thesis on combinatorial optimisation problems in neuropsychological testing and had played around with things like the <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">Travelling Salesperson Problem</a> (TSP) and remembered that the solutions to two-dimensional planar TSPs can sometimes be quite pretty. A few minutes on google uncovers the <a href="https://cran.r-project.org/web/packages/TSP/index.html">TSP package</a>, and a few more minutes playing around with the API gives me a sense of what I need to do in order to work out what order to connect the points in order to generate a TSP solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">library</span>(TSP)</span>
<span id="cb12-2">tour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(obj) {</span>
<span id="cb12-3">  obj<span class="sc" style="color: #5E5E5E;">$</span>tour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unname</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">solve_TSP</span>(<span class="fu" style="color: #4758AB;">ETSP</span>(obj[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>)]))))</span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">arrange</span>(obj, <span class="fu" style="color: #4758AB;">order</span>(tour))</span>
<span id="cb12-5">}</span></code></pre></div>
</div>
<p>The code here is very ugly because I wrote it in a rush. The gist of it is that what you want to do normally is feed a data frame to the <code>ETSP()</code> function, which creates the data structure needed to solve the corresponding optimisation problem. The output is then passed to <code>solve_TSP()</code> which can produce an approximate solution via one of many different algorithms, and that then returns a data structure (as an S3 object) that specifies the order in which the points need to be connected, along with some handy metadata (e.g., the length of the tour). But I don‚Äôt want any of that information, so I use <code>c()</code> and <code>unname()</code> to strip all that information out, append the resulting information to the data object, and then use the <code>arrange()</code> function from the dplyr package to order the data in the desired fashion.</p>
<p>Next, because I want to apply the <code>tour()</code> function separately to each group rather than to compute a TSP solution for the overall data structure, I use <code>group_split()</code> to split the data set into a list of data frames, one for each group, and then <code>map_dfr()</code> to apply the <code>tour()</code> function to each element of that list and bind the results together into a data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">obj <span class="ot" style="color: #003B4F;">&lt;-</span> obj <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">group_split</span>(g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">map_dfr</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">tour</span>(.x))</span>
<span id="cb13-4">obj</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 100 √ó 6
         x      y     g x_shift y_shift  tour
     &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;
 1 -0.626  -0.620     1    1.13   -1.00     1
 2 -0.165  -1.91      1    1.13   -1.00     9
 3  0.267  -0.926     1    1.13   -1.00     3
 4 -0.103  -0.589     1    1.13   -1.00     8
 5  0.370  -0.430     1    1.13   -1.00     4
 6  0.557  -0.464     1    1.13   -1.00     5
 7  2.17    0.208     1    1.13   -1.00     2
 8  0.821   0.494     1    1.13   -1.00    10
 9 -0.820   1.77      1    1.13   -1.00     7
10 -0.0162 -0.320     1    1.13   -1.00     6
# ‚Ä¶ with 90 more rows</code></pre>
</div>
</div>
<p>Now when I apply the same plotting code to the new data object, here‚Äôs what I get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">ggplot</span>(</span>
<span id="cb15-2">  <span class="at" style="color: #657422;">data =</span> obj, </span>
<span id="cb15-3">  <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb15-4">    <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">+</span> x_shift, </span>
<span id="cb15-5">    <span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">+</span> y_shift, </span>
<span id="cb15-6">    <span class="at" style="color: #657422;">fill =</span> g, </span>
<span id="cb15-7">    <span class="at" style="color: #657422;">group =</span> g</span>
<span id="cb15-8">  )</span>
<span id="cb15-9">) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">geom_polygon</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb15-11">  <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb15-12">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;">scale_fill_scico</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"lajolla"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Ooh, I like this.</p>
</section>
<section id="formalise-a-system" class="level2">
<h2 class="anchored" data-anchor-id="formalise-a-system">Formalise a system‚Ä¶</h2>
<p>The next step in the process is to take all the moving parts and write a system. The exact details of what consitutes a generative art system is a little vague, but I usually think of it as a collection of functions that capture the essence of the process. If I‚Äôm being fancy I‚Äôll convert this set of functions to a full-fledged R package, but let‚Äôs not bother with that for this simple system. So what do we need? First, I‚Äôll state the dependencies:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">library</span>(scico)</span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;">library</span>(TSP)</span></code></pre></div>
</div>
<p>Next, let‚Äôs keep the <code>tour()</code> function as a separate thing. It‚Äôs one way of organising the points that belong to the same group, but there might be others:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">tour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(obj) {</span>
<span id="cb17-2">  tsp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ETSP</span>(obj[,<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>,<span class="st" style="color: #20794D;">"y"</span>)])</span>
<span id="cb17-3">  obj<span class="sc" style="color: #5E5E5E;">$</span>tour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unname</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">solve_TSP</span>(tsp)))</span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;">arrange</span>(obj, <span class="fu" style="color: #4758AB;">order</span>(tour))</span>
<span id="cb17-5">}</span></code></pre></div>
</div>
<p>My personal style is to separate the ‚Äúbuilder‚Äù functions that generate the underlying data structure from the ‚Äústyling‚Äù functions that render that data structure as an image. For the current project, our builder function is <code>build_art()</code> and defined as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">build_art <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;">points =</span> <span class="dv" style="color: #AD0000;">100</span>,   <span class="co" style="color: #5E5E5E;"># total number of points</span></span>
<span id="cb18-3">  <span class="at" style="color: #657422;">groups =</span> <span class="dv" style="color: #AD0000;">10</span>,    <span class="co" style="color: #5E5E5E;"># number of groups</span></span>
<span id="cb18-4">  <span class="at" style="color: #657422;">polygon =</span> tour, <span class="co" style="color: #5E5E5E;"># function used to organise points</span></span>
<span id="cb18-5">  <span class="at" style="color: #657422;">gap =</span> <span class="dv" style="color: #AD0000;">1</span>,        <span class="co" style="color: #5E5E5E;"># standard deviation of the "shift" separating groups</span></span>
<span id="cb18-6">  <span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">1</span>        <span class="co" style="color: #5E5E5E;"># numeric seed to use</span></span>
<span id="cb18-7">) {</span>
<span id="cb18-8">  </span>
<span id="cb18-9">  <span class="co" style="color: #5E5E5E;"># set the seed</span></span>
<span id="cb18-10">  <span class="fu" style="color: #4758AB;">set.seed</span>(seed)</span>
<span id="cb18-11">  </span>
<span id="cb18-12">  <span class="co" style="color: #5E5E5E;"># create the initial data frame</span></span>
<span id="cb18-13">  obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb18-14">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(points), </span>
<span id="cb18-15">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(points), </span>
<span id="cb18-16">    <span class="at" style="color: #657422;">g =</span> <span class="fu" style="color: #4758AB;">sample</span>(groups, points, <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb18-17">  )</span>
<span id="cb18-18">  </span>
<span id="cb18-19">  <span class="co" style="color: #5E5E5E;"># create the offset for each group</span></span>
<span id="cb18-20">  grp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb18-21">    <span class="at" style="color: #657422;">g =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>groups,</span>
<span id="cb18-22">    <span class="at" style="color: #657422;">x_shift =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(groups) <span class="sc" style="color: #5E5E5E;">*</span> gap,</span>
<span id="cb18-23">    <span class="at" style="color: #657422;">y_shift =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(groups) <span class="sc" style="color: #5E5E5E;">*</span> gap</span>
<span id="cb18-24">  )</span>
<span id="cb18-25">  </span>
<span id="cb18-26">  <span class="co" style="color: #5E5E5E;"># merge obj with grp</span></span>
<span id="cb18-27">  obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">full_join</span>(obj, grp, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"g"</span>) </span>
<span id="cb18-28">  </span>
<span id="cb18-29">  <span class="co" style="color: #5E5E5E;"># split obj by group and apply the "polygon" mapping</span></span>
<span id="cb18-30">  <span class="co" style="color: #5E5E5E;"># function separately to each group</span></span>
<span id="cb18-31">  obj <span class="ot" style="color: #003B4F;">&lt;-</span> obj <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-32">    <span class="fu" style="color: #4758AB;">group_split</span>(g) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb18-33">    <span class="fu" style="color: #4758AB;">map_dfr</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">polygon</span>(.x))</span>
<span id="cb18-34">  </span>
<span id="cb18-35">  <span class="fu" style="color: #4758AB;">return</span>(obj) <span class="co" style="color: #5E5E5E;"># output</span></span>
<span id="cb18-36">}</span></code></pre></div>
</div>
<p>As you can see, it‚Äôs more or less the same as the code I developed for my original example, just written with a little more abstraction so that I can feed in different parameter values later. The <code>draw_art()</code> function takes this object as input, and creates a plot using the same ggplot2 code. The only free ‚Äúparameter‚Äù here is the <code>...</code> that I can use to pass arguments to the palette function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">draw_art <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(obj, ...) {</span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(</span>
<span id="cb19-3">    <span class="at" style="color: #657422;">data =</span> obj, </span>
<span id="cb19-4">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb19-5">      <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">+</span> x_shift, </span>
<span id="cb19-6">      <span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">+</span> y_shift, </span>
<span id="cb19-7">      <span class="at" style="color: #657422;">fill =</span> g, </span>
<span id="cb19-8">      <span class="at" style="color: #657422;">group =</span> g</span>
<span id="cb19-9">    )</span>
<span id="cb19-10">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb19-11">    <span class="fu" style="color: #4758AB;">geom_polygon</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb19-12">    <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb19-13">    <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb19-14">    <span class="fu" style="color: #4758AB;">scale_fill_scico</span>(...)</span>
<span id="cb19-15">}</span></code></pre></div>
</div>
<p>Now we‚Äôre ready to go! Because I set it up so that every parameter has a default value that corresponds to the same parameters I used to draw the original picture, this code reproduces the original image:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">build_art</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">draw_art</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>‚Ä¶ well, almost!</p>
</section>
<section id="vary-parameters" class="level2">
<h2 class="anchored" data-anchor-id="vary-parameters">Vary parameters‚Ä¶</h2>
<p>Okay, the one thing that I didn‚Äôt do is specify the default palette. In the scico package the default palette is ‚Äúbilbao‚Äù, and the original artwork I produced used the ‚Äúlajolla‚Äù palette. So the default output of the system is identical to this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">build_art</span>(<span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">draw_art</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"bilbao"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If I‚Äôd set <code>palette = "lajolla"</code> I‚Äôd have obtained exactly the same result as before. But let‚Äôs play around a little bit. If I switch to the ‚Äúvik‚Äù palette I get output with the same shapes, just with a different colours scheme:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">build_art</span>(<span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">draw_art</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"vik"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>However, if I modify the <code>seed</code> argument as well I get different random points, and so the resulting shapes are different.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">build_art</span>(<span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">draw_art</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"vik"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>More generally, I can play around with my new system and find out what it is capable of. Here‚Äôs a version with 1000 points divided into 5 groups with a fairly modest offset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">build_art</span>(</span>
<span id="cb24-2">  <span class="at" style="color: #657422;">points =</span> <span class="dv" style="color: #AD0000;">1000</span>, </span>
<span id="cb24-3">  <span class="at" style="color: #657422;">groups =</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb24-4">  <span class="at" style="color: #657422;">gap =</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb24-5">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;">draw_art</span>(</span>
<span id="cb24-7">    <span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"vik"</span>, </span>
<span id="cb24-8">    <span class="at" style="color: #657422;">alpha =</span> .<span class="dv" style="color: #AD0000;">8</span></span>
<span id="cb24-9">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The shapes aren‚Äôt <em>quite</em> what I was expecting: I‚Äôm not used to seeing TSP solutions rendered as polygons, because they‚Äôre usually drawn as paths, and they make me think of crazy shuriken or maybe really screwed up snowflakes. Not as organic as I thought it might look, but still neat. Notice that I‚Äôve also made the shapes slightly transparent by setting the <code>alpha</code> argument that gets passed to <code>scale_fill_scico()</code>. Okay, let‚Äôs play around a bit more:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">build_art</span>(</span>
<span id="cb25-2">  <span class="at" style="color: #657422;">points =</span> <span class="dv" style="color: #AD0000;">5000</span>, </span>
<span id="cb25-3">  <span class="at" style="color: #657422;">groups =</span> <span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb25-4">  <span class="at" style="color: #657422;">gap =</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb25-5">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;">draw_art</span>(</span>
<span id="cb25-7">    <span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"bamako"</span>, </span>
<span id="cb25-8">    <span class="at" style="color: #657422;">alpha =</span> .<span class="dv" style="color: #AD0000;">8</span></span>
<span id="cb25-9">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is kind of neat too, but I want to try something different. The general pattern for a TSP solution is that they take on this snowflake/shuriken look when there are many points, but not when there are fewer data points. So this time I‚Äôll have 10000 points in total, but divide them among 1000 groups so that on average each polygon is defined by 10 vertices. I‚Äôll space them out a little bit more too, and‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">build_art</span>(</span>
<span id="cb26-2">  <span class="at" style="color: #657422;">points =</span> <span class="dv" style="color: #AD0000;">10000</span>, </span>
<span id="cb26-3">  <span class="at" style="color: #657422;">groups =</span> <span class="dv" style="color: #AD0000;">1000</span>,</span>
<span id="cb26-4">  <span class="at" style="color: #657422;">gap =</span> <span class="dv" style="color: #AD0000;">15</span>, </span>
<span id="cb26-5">  <span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb26-6">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-7">  <span class="fu" style="color: #4758AB;">draw_art</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"tokyo"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>I kind of love it!</p>
</section>
<section id="have-fun-exploiting-loopholes" class="level2">
<h2 class="anchored" data-anchor-id="have-fun-exploiting-loopholes">Have fun exploiting loopholes</h2>
<p>At the beginning, when I created the system, I set <code>tour()</code> to be the default <code>polygon</code> function used to modify each polygon. My <em>original</em> plan was that this function was really just supposed to be used to order the points, but there‚Äôs actually nothing in the system that prevents me from doing something fancier. For example, here‚Äôs a sneaky trick where the function calls <code>dplyr::mutate()</code> <em>before</em> passing the data for that group to the <code>tour()</code> function. In this case, what I‚Äôve done is a dilation transformation: the overall size of each group is multiplied by the group number <code>g</code>, so now the shapes will lie on top of each other with different scales. It also, in another slightly sneaky trick, flips the sign of the group number which will ensure that when the data gets passed to <code>draw_art()</code> the order of the colours will be reversed. The result‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">shift_tour <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(obj) {</span>
<span id="cb27-2">  obj <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-3">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb27-4">      <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">*</span> g, </span>
<span id="cb27-5">      <span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">*</span> g, </span>
<span id="cb27-6">      <span class="at" style="color: #657422;">g =</span> <span class="sc" style="color: #5E5E5E;">-</span>g</span>
<span id="cb27-7">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb27-8">    <span class="fu" style="color: #4758AB;">tour</span>()</span>
<span id="cb27-9">}</span>
<span id="cb27-10"></span>
<span id="cb27-11"><span class="fu" style="color: #4758AB;">build_art</span>(</span>
<span id="cb27-12">  <span class="at" style="color: #657422;">points =</span> <span class="dv" style="color: #AD0000;">5000</span>,</span>
<span id="cb27-13">  <span class="at" style="color: #657422;">groups =</span> <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb27-14">  <span class="at" style="color: #657422;">gap =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb27-15">  <span class="at" style="color: #657422;">polygon =</span> shift_tour</span>
<span id="cb27-16">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">draw_art</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"oslo"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>‚Ä¶ is really quite lovely. Later on, I might decide that this little trick is worth bundling into another function, the system gains new flexibility, and the range of things you can do by playing around with it expands. But I think this is quite enough for now, so it‚Äôs time to move on to the most important step of all ‚Ä¶</p>
</section>
<section id="tweet-it" class="level2">
<h2 class="anchored" data-anchor-id="tweet-it">Tweet it!</h2>
<p>Because what‚Äôs the point of making art if you can‚Äôt share it with people?</p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {Unpredictable Paintings},
  date = {2021-11-01},
  url = {https://blog.djnavarro.net/unpredictable-paintings},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúUnpredictable Paintings.‚Äù</span> November
1, 2021. <a href="https://blog.djnavarro.net/unpredictable-paintings">https://blog.djnavarro.net/unpredictable-paintings</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/index.html</guid>
  <pubDate>Sun, 31 Oct 2021 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-11-01_unpredictable-paintings/featured.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Generative art resources in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-10-19_rtistry-posts/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>People often ask me if I have any words of advice for young people. No wait, that‚Äôs not right. Nobody wants to hear my words of advice for young people, largely because I have none. What they often <em>do</em> ask me is if I have any words of advice for aspiring generative artists who want to use R to make pretty pictures. To be honest, I don‚Äôt have a lot of advice there either, but I‚Äôll try my best.</p>
<p>Let‚Äôs start with the big picture: there are no books or general purpose introductions out there. There are no books, no CRAN task views, no courses you can take. In fact, until quite recently generative art in R was an extremely niche topic. To my knowledge, the <a href="https://twitter.com/hashtag/rtistry">#rtistry hashtag on twitter</a> is where you‚Äôll find the most art and the most posts about the topic, but that hashtag is pretty new.<sup>1</sup> There were resources that existed prior to that, of course: how could there not be? After all, Thomas Lin Pedersen has been building a toolkit for generative art in R for quite some time now. In his <a href="https://www.data-imaginist.com/slides/celebRation2020">keynote talk at celebRation2020</a>, he refers to an ‚Äúart driven development‚Äù process that has led him to create several packages that are valuable to the would-be generative artist. For example:</p>
<ul>
<li><a href="https://ambient.data-imaginist.com/">ambient</a> is amazingly useful when you want to play around with flow fields or generate interesting multidimensional noise patterns</li>
<li><a href="https://github.com/thomasp85/particles">particles</a> provides a toolkit for particle simulation in R: it‚Äôs inspired by the d3-force javascript module, and is useful when you want to simulate forces acting on particles</li>
<li><a href="https://ggforce.data-imaginist.com/">ggforce</a> provides a collection of tools that add some missing functionality to ggplot2, much of which is very handy when making art</li>
</ul>
<p>These tools are great, but if you‚Äôre just getting started it can be helpful to play around in a more constrained environment. If you want something extremely simple, you could play around with the <a href="https://flametree.djnavarro.net/">flametree</a> package I wrote. It‚Äôs not very flexible (it just draws branching things!) but it does have the advantage that you can get started with something as simple as this:</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/flametree_5becbb587dfbbe1a7c4322544fb5db18">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(flametree)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># pick some colours</span></span>
<span id="cb1-4">shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#1b2e3c"</span>, <span class="st" style="color: #20794D;">"#0c0c1e"</span>, <span class="st" style="color: #20794D;">"#74112f"</span>, <span class="st" style="color: #20794D;">"#f3e3e2"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># data structure defining the trees</span></span>
<span id="cb1-7">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">flametree_grow</span>(<span class="at" style="color: #657422;">time =</span> <span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">trees =</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># draw the plot</span></span>
<span id="cb1-10">dat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">flametree_plot</span>(</span>
<span id="cb1-12">    <span class="at" style="color: #657422;">background =</span> <span class="st" style="color: #20794D;">"antiquewhite"</span>,</span>
<span id="cb1-13">    <span class="at" style="color: #657422;">palette =</span> shades, </span>
<span id="cb1-14">    <span class="at" style="color: #657422;">style =</span> <span class="st" style="color: #20794D;">"nativeflora"</span></span>
<span id="cb1-15">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-10-19_rtistry-posts/index_files/figure-html/flametree-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Playing around with a package like flametree ‚Äì or <a href="https://jasmines.djnavarro.net/">jasmines</a> if you want something a little more flexible ‚Äì is a nice way to start drawing things, but at some point you might want to understand the process involved in creating a system like this. I‚Äôve occasionally used art as a way to help teach people how to program in R, so you might find these <a href="https://slides.djnavarro.net/starting-programming/">programming of aRt</a> slides helpful, and the precursor to flametree is discussed in my slides on <a href="https://slides.djnavarro.net/starting-functions/">functional programming</a>.</p>
<p>Resources like mine can help get you started, but there are many other great artists out there who often post tutorials and walkthroughs. For instance, Antonio S√°nchez Chinch√≥n has a <em>lot</em> of really useful tutorials on his blog <a href="https://fronkonstin.com/">fronkonstin.com</a>. Ijeamaka Anyene has written a lovely and gentle introduction to her system for <a href="https://ijeamaka-anyene.netlify.app/posts/2021-09-07-so-you-want-to-subdivide-a-rectangle/">rectangle subdivision</a>. Will Chase writes about his process on his blog sometimes: here‚Äôs <a href="https://www.williamrchase.com/post/grid-12-months-of-art-december/">an example on a grid system</a>. Jiwan Heo has a wonderful post on how to <a href="https://jiwanheo.rbind.io/post/2021-09-17-how-to-work-with-flow-fields-in-r/">get started with flow fields in R</a> among many other lovely posts! You can look outside of the R community too: Tyler Hobbs writes a lot of essays about generative art that describe algorithms in fairly general terms. For instance, one of my systems is built from his essay on <a href="https://tylerxhobbs.com/essays/2017/a-generative-approach-to-simulating-watercolor-paints">simulating watercolour paints</a>. And of course there‚Äôs also the walkthrough I wrote for one of my systems <a href="https://blog.djnavarro.net/water-colours">here</a> and the piece I wrote that talks a little bit about the <a href="https://blog.djnavarro.net/generative-art-in-r/">psychological process</a> of making art in R.</p>
<p>My hope is that these resources will point you in the right direction to get started, but more than anything else I would emphasise that it takes time and effort. Art is a skill like any other. I‚Äôve been practicing for about three years now, and while I am happy with the pieces I make, I still have a lot to learn. And that‚Äôs okay ‚Äì one of the big things I always want to stress is that <em>play</em> is a huge part of the process. Making polished systems comes later!</p>
<p>In any case, I‚Äôll leave this post as it is for now but if folks would like to suggest additional resources, I can always update it if need be!</p>
<section id="postscript" class="level2">
<h2 class="anchored" data-anchor-id="postscript">Postscript</h2>
<p>Okay, I‚Äôm going to start adding things. This is just a completely unstructured list for now, but I know how my brain works: if I don‚Äôt bookmark the cool posts and resources I see pop up on my timeline I‚Äôll never find them again‚Ä¶</p>
<section id="r-specific" class="level3">
<h3 class="anchored" data-anchor-id="r-specific">R specific</h3>
<ul>
<li><p><a href="https://www.thetidytrekker.com/post/thinking-outside-the-grid">Thinking outside the grid</a> by <a href="https://twitter.com/meghansharris">Meghan Harris</a></p></li>
<li><p><a href="https://github.com/sharlagelfand/gradients">Gradients</a> repository by <a href="https://twitter.com/sharlagelfand">Sharla Gelfand</a></p></li>
<li><p>Generative art <a href="https://github.com/nrennie/aRt">package</a> by <a href="https://twitter.com/nrennie35">Nicola Rennie</a></p></li>
<li><p>Various <a href="https://clauswilke.com/art/post/">art posts</a> by <a href="https://twitter.com/ClausWilke">Claus Wilke</a></p></li>
<li><p><a href="https://urswilke.github.io/ggbenjamini/">ggbenjamini package</a> by <a href="https://twitter.com/UrsWilke">Urs Wilke</a></p></li>
<li><p><a href="https://github.com/picasa/generative_examples">Generative art examples</a> by <a href="https://twitter.com/pircasa">Pierre Casadebaig</a></p></li>
<li><p><a href="https://medium.com/@dorit.geifman_38625/the-art-in-randomness-f236a3663cb">The art in randomness</a> by <a href="https://twitter.com/GenerativeaRt4">Dorit Geifman</a></p></li>
<li><p><a href="https://art.jacquietran.com/">Generative art galleries</a> by <a href="https://twitter.com/jacquietran">Jacquie Tran</a></p></li>
<li><p><a href="https://ijeamaka.art/portfolio/">Art portfolio site</a> by <a href="https://twitter.com/ijeamaka_a">Ijeamaka Anyene</a></p></li>
<li><p><a href="https://georgemsavva.github.io/creativecoding/posts/mystery/">Mystery curves</a> by <a href="https://twitter.com/georgemsavva">George Savva</a></p></li>
</ul>
</section>
<section id="more-general" class="level3">
<h3 class="anchored" data-anchor-id="more-general">More general</h3>
<ul>
<li><p><a href="https://thatcreativecode.page/">thatcreativecode.page</a> is a great general resource</p></li>
<li><p>the description of <a href="https://asemi.ca">asemi.ca</a> shows a design process in detail</p></li>
<li><p>Tyler Hobbs <a href="https://tylerxhobbs.com/essays">generative art essays</a></p></li>
</ul>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A little bit of searching on twitter suggests that I proposed the hashtag on January 20th 2021 in a now-deleted tweet.‚Ü©Ô∏é</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {Generative Art Resources in {R}},
  date = {2021-10-19},
  url = {https://blog.djnavarro.net/rtistry-posts},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúGenerative Art Resources in R.‚Äù</span>
October 19, 2021. <a href="https://blog.djnavarro.net/rtistry-posts">https://blog.djnavarro.net/rtistry-posts</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2021-10-19_rtistry-posts/index.html</guid>
  <pubDate>Mon, 18 Oct 2021 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-10-19_rtistry-posts/preview-image.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>How to mint digital art on HEN</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>Cryptoart can be a touchy subject for generative artists, and it‚Äôs something a lot of us have messy feelings about. In my case it is no secret that I feel conflicted, and I completely understand why a lot of us are uncomfortable with it. I genuinely believe there are many perfectly good reasons why a generative artist would choose not to participate. On the other hand, I also recognise that there are some very sensible reasons why a generative artist <em>would</em> want (or need) to sell NFTs: artists have to pay rent, for example. So this post isn‚Äôt about passing judgment one way or the other. It‚Äôs intended to be a guide to help other artists get started in this area, particularly artists in the R community, if they should decide to try it out. That‚Äôs all.</p>
<p>This post is also not supposed to be an introduction to blockchains or cryptocurrencies. It doesn‚Äôt dive into the details on what these things are or even what an NFT is. I make art: I don‚Äôt care about any of these subjects. What I‚Äôm assuming is that you‚Äôre coming to this world from a similar position to me: you have a vague understanding of what blockchain is, what cryptocurrencies are about, and have a similarly vague notion that an NFT is kind of like a ‚Äúdigitally signed copy‚Äù of your art that you can sell to other people. That‚Äôs all you need.</p>
<section id="prologue-barriers-to-entry" class="level2">
<h2 class="anchored" data-anchor-id="prologue-barriers-to-entry">Prologue: Barriers to entry</h2>
<p>One thing I have noticed about the world of cryptoart is that there are <em>many</em> barriers to entry. Some barriers are obvious: if you want to sell art on <a href="https://foundation.app/about">Foundation</a>, for example, you need to be invited. To be invited, you need to know someone who can and will invite you. As anyone who has ever been excluded from a fancy venue by virtue of their race, gender, sexual orientation, transgender status etc can attest, an invitation requirement is a non-trivial and frequently discriminatory barrier. ‚ÄúBy invitation‚Äù systems create entry barriers by design: for good or ill, they are inherently exclusionary. But there are other ways in which cryptoart creates barriers to entry.</p>
<section id="environmental-costs-matter" class="level3">
<h3 class="anchored" data-anchor-id="environmental-costs-matter">Environmental costs matter</h3>
<p>Another kind of barrier comes from the nature of cryptoart. Blockchains were not designed to be energy efficient, and they can be extraordinarily wasteful (much more than you‚Äôd think). Environmental considerations also create barriers to entry, albeit indirect barriers. For example, the biggest cryptocurrencies like Bitcoin and Ethereum operate on a ‚Äúproof of work‚Äù principle (often abbreviated to ‚ÄúPoW‚Äù) and as the name suggests, operations on those chains require a lot of computational work. A lot. They are <a href="https://brightly.eco/environmental-impact-nfts/">staggeringly wasteful</a>, and as a consequence the total energy consumption of these chains is so high that an NFT minted on one of these chains has a very high carbon footprint. Proof of work chains are an environmental disaster, and so (in my mind) they are socially irresponsible. Don‚Äôt use them if you can avoid it.</p>
<p>This poses a problem for artists, unfortunately. The biggest cryptoart markets are based on the Ethereum chain, and Ethereum is a proof of work chain. True, there are plans to change this and make Ethereum more ethical, but it hasn‚Äôt happened yet and I personally am unwilling to participate until that switch actually occurs. This is deeply unfortunate from artistic point of view, because it rules out <a href="https://opensea.io/">OpenSea</a>. It sucks because OpenSea is the largest marketplace and it‚Äôs very easy to get started there. For instance, I have an <a href="https://opensea.io/djnavarro">unused account</a> that I set up in a few minutes before I realised the problem. But for me the end-user convenience wasn‚Äôt worth the environmental costs, so I abandoned this idea at the outset. On the plus side, OpenSea have <a href="https://blog.opensea.io/announcements/tezos-nfts-are-coming-to-opensea/">announced</a> that they are planning to support the Tezos blockchain (see below), and when that day comes I will probably make use of my OpenSea account: the thing I take moral issue with is not OpenSea, it is with Ethereum (or more precisely, with proof-of-work chains). Personally, I don‚Äôt want to touch the stuff.</p>
<p>So what are the alternatives?</p>
</section>
<section id="there-are-alternatives" class="level3">
<h3 class="anchored" data-anchor-id="there-are-alternatives">There are alternatives</h3>
<p>The main alternative to the ‚Äúproof of work‚Äù blockchains are the ‚Äúproof of stake‚Äù (PoS) blockchains. These don‚Äôt require anywhere near as much computation, and as a consequence are much more energy efficient. For that reason, NFTs on those chains are often called ‚Äúclean NFTs‚Äù. There are a multiple proof of stake chains (Tezos, Solana, etc), but the one I‚Äôm most familiar with is <a href="https://tezos.com/">Tezos</a>. To give you a sense of just how extreme the difference is, this is a screenshot that popped up on one of the sites while I was doing my initial exploration:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/efficiency.png" class="img-fluid figure-img" width="478"></p>
</figure>
</div>
</div>
</div>
<p>Even if this claim is somewhat exaggerated for marketing purposes, the sheer scale of it is remarkable. A multiplicative factor of 1.5 million is‚Ä¶ enormous. I could literally mint NFTs on Tezos for every single image that I have ever created for the rest of my life, and it would still be several orders of magnitude more energy efficient than minting <em>one</em> piece on Ethereum. To my way of thinking, that makes a massive difference to the moral calculus associated with minting NFTs. In fact, the difference between Tezos and Ethereum is so extreme that there is actually one art marketplace there ‚Äì <a href="https://bazaarnft.xyz/">Bazaar</a> ‚Äì that is not just carbon neutral but is actually <em>carbon negative</em>. That‚Äôs only possible because Tezos is so much more efficient than Ethereum, and it becomes practical for the developers to impose a carbon tax on minting: the transaction costs are used to purchase sufficient carbon offsets to ensure the system as a whole remains carbon negative. Right now I wouldn‚Äôt recommend setting up on Bazaar because it‚Äôs so early in development that it‚Äôs hard to use, but I‚Äôm absolutely keeping an eye on it for the future!</p>
<p>Setting up on the Tezos blockchain is particularly appealing because it has an established digital art marketplace called ‚Äú<a href="https://www.hicetnunc.xyz/">hic et nunc</a>‚Äù. The name is Latin in origin and translates to ‚Äúhere and now‚Äù. You‚Äôll usually see it abbreviated to ‚ÄúHEN‚Äù, which is what I‚Äôll call it in this post, but some people use ‚ÄúH=N‚Äù, I guess because it looks visually similar to the HEN logo. The HEN marketplace is completely open: you don‚Äôt need an invitation. There‚Äôs no super-secret club to be invited into (as far as I know!), and to my mind that‚Äôs a huge positive. Better yet, a few folks from the R art community are already there. I‚Äôm entirely certain that there are others I don‚Äôt know about yet, but so far on HEN I‚Äôve already found <a href="https://www.hicetnunc.xyz/tz/tz2Pkj2xWJovKKCsABjnr3NbyMVJTMBkpTvb/">Thomas Lin Pedersen</a>, <a href="https://www.hicetnunc.xyz/tz/tz1UTa3LDHvb1xvfcaH5evmsVMWNXQRxrYb2">Will Chase</a>, <a href="https://www.hicetnunc.xyz/tz/tz1LLd8FJJtcTfFLiJeX6UL2oYQeLLAzUH7K">Antonio S. Chinch√≥n</a>, and <a href="https://www.hicetnunc.xyz/tz/tz1X5wRkNVQG7QfUg4kSpaQbBWPzCv6wf6mV">George Savva</a>. As of a few days ago, <a href="https://www.hicetnunc.xyz/tz/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7">I‚Äôm there too</a>.</p>
<p>Openness! Community! Yay!</p>
<p>If there‚Äôs one thing I have learned from the lovely R folks on twitter, everything is better when you are part of a supportive team of people who actually care about each other and work to build each other up. From my perspective, this makes HEN a very attractive option.</p>
<p>There is, unfortunately, a catch. There is always a catch.</p>
</section>
<section id="it-can-be-confusing" class="level3">
<h3 class="anchored" data-anchor-id="it-can-be-confusing">It can be confusing</h3>
<p>One big limitation to HEN is that it isn‚Äôt easy to get started there unless you are already somewhat enmeshed in the crypto world generally, or the cryptoart scene specifically. The ecosystem is distributed over several sites that have weird names without enough vowels, the user interfaces on the sites tend to be unconventional (often pointlessly so in my opinion), and the ‚Äúhow to‚Äù guides aren‚Äôt very easy to read. The overall aesthetic and typology screams out <strong>WE ARE THE COOL KIDS</strong> in capital letters. It doesn‚Äôt even have the good grace to be subtle about it. Taken together, all these little things add up, and it annoys me. I have been a professional educator for 15 years now, and I can absolutely guarantee that the overall effect of this is to create a de facto entry barrier. All these things act as signals to exclude people who aren‚Äôt already part of the clique. It feels disproportionately uncomfortable if you‚Äôre an outsider. It tells you that you‚Äôre not welcome if you‚Äôre not one of the cool kids. Are you one of the cool kids? No? Then sorry. No HEN for you babe.</p>
<p>Well, <strong>fuck</strong>.</p>
<p>Yet again, there are barriers to entry to HEN, and that makes me uncomfortable. However, unlike the other cryptoart options I looked at, there‚Äôs something I can do to improve the situation: I can write a blog post explaining the process. This blog post.</p>
</section>
<section id="lets-demystify-it" class="level3">
<h3 class="anchored" data-anchor-id="lets-demystify-it">Let‚Äôs demystify it</h3>
<p>Let‚Äôs assume you‚Äôre not one of the cool kids. Let‚Äôs assume you‚Äôre just a regular human being who likes to make generative art in R, and are a little curious. You have a vague idea of what cryptocurrencies are (yeah, yeah, digital currency blah blah blah). You have a vague idea of what an NFT is (digitally signed copy of the art, whatever dude). Maaaaaybe you‚Äôve sort of heard of HEN ‚Ä¶ but that‚Äôs only because you‚Äôve seen some R people posting about it on twitter. And that‚Äôs it. That‚Äôs all you know. But maybe you want to try it out, just to see if it‚Äôs for you? Just to try. But you really, really, reaaaaaalllllllly don‚Äôt want to wade into all the details and you‚Äôre secretly worried that it‚Äôs all too complicated and you won‚Äôt be able to do it. Your impostor sydrome is going <em>wild</em>. Is that you? Do you feel the same way I felt?</p>
<p>If so, this post is written for you.</p>
</section>
</section>
<section id="get-an-overview" class="level2">
<h2 class="anchored" data-anchor-id="get-an-overview">1: Get an overview</h2>
<p>When I started setting up on, I wandered around the Tezos cryptoart landscape in confusion, wandering aimlessly over the terrain. It was all <em>deeply</em> unsettling. Eventually I pieced together some overall view of things, but I wouldn‚Äôt recommend doing things the same way I did. I think the best thing to do first is to ‚Äúzoom out‚Äù and look at the landscape as a whole. The best site I‚Äôve found for doing that is <a href="https://tezos.art/">tezos.art</a>. If you click on the link it will take you to a page with the following three sections:</p>
<ul>
<li><strong>Marketplaces</strong>: Sites where you can mint, buy, and sell art</li>
<li><strong>Wallets</strong>: Tools that handle your identity and store your funds</li>
<li><strong>Community</strong>: Places where you can go for help</li>
</ul>
<p>It‚Äôs worth taking a quick look at this page because it gives you a feel for what all the moving parts are, but doesn‚Äôt dive into details. You‚Äôve taken a quick peek, yes? Cool. Let‚Äôs get started‚Ä¶</p>
</section>
<section id="create-a-wallet" class="level2">
<h2 class="anchored" data-anchor-id="create-a-wallet">2: Create a wallet</h2>
<p>It‚Äôs a little counterintuitive, but the natural place to start is <em>not</em> the art marketplaces: the first thing you need is a wallet. The reason for this is that your wallet serves two distinct purposes. As the name suggests, the wallet provides a method for storing funds: the currency itself is referred to as ‚Äútezos‚Äù, which you‚Äôll see abbreviated to ‚Äútez‚Äù or denoted ‚ÄúÍú©‚Äù. However, it also serves as your unique identifier on the Tezos blockchain. On blockchains as in life it is rather hard to do anything interesting without a public identity, so you need to create one first.</p>
<p>Okaaaay‚Ä¶ at this point you‚Äôd probably be wondering ‚Äúwhere do I sign up for one of these wallets?‚Äù Excellent question. As you will have noticed by peeking at the <a href="https://tezos.art">tezos.art</a> website, you have a few different options. Being offered choices is nice, of course, but it can also be anxiety-provoking when you don‚Äôt even know what the differences between the options are. So, for whatever it‚Äôs worth, I‚Äôll mention that I chose <a href="https://templewallet.com/">Temple Wallet</a>. I made that choice for two reasons and only two reasons. First, it was one of the options listed on the <a href="https://github.com/hicetnunc2000/hicetnunc/wiki/Getting-Started-with-Tezos">HEN wiki</a>. Second, I was complaining privately to Will Chase about how confused I was and he told me uses Temple and I copied what he did. That being said, I suspect the choice is arbitrary.</p>
<p>For the sake of argument, I‚Äôll assume you decided to use Temple too. So now you‚Äôre clicking through the link above in order to open an account with Temple Wallet and‚Ä¶ wait, it‚Äôs just a <em>browser extension</em>? Yup. This seems to be very common in blockchain land, and initially it struck me as bizarre. The longer I hang around there, however, the more I realise it does make a kind of sense. Once you start <em>doing</em> things on Tezos, you‚Äôll find that you have to validate everything you do. Any time you ask a website to undertake some action on your behalf, the first thing that will happen is that you‚Äôll be asked to authorise the action using your public identity. What that means is that you have to use your wallet all the time, even for things that don‚Äôt cost money. A browser extension makes this a little easier. When the website asks you to authenticate, the wallet browser extension will create a little popup window that asks you to confirm the transaction. There‚Äôs a bit of friction to the process sometimes, and it feels a little alien, but it does start to feel normal after a while.</p>
<p>Moving on‚Ä¶ the next little strangeness is that when you set up the wallet you don‚Äôt create a username, only the password, and you‚Äôll be given a ‚Äúrecovery phrase‚Äù, which is a sequence of 12 random words. Don‚Äôt lose either of these things. Here, as always, I strongly recommend that you <strong>use a password manager to store your password</strong>, because there aren‚Äôt that many options for recovery if you start losing passwords. Personally, I‚Äôve been using <a href="https://1password.com/">1password</a> for a few years and I really like it. So yes. Use a password manager, store your wallet password there and store your recovery phrase there too.</p>
<p>At the end of this process you are assigned a public identity, which is a long string of complete gibberish. For example, this is me:</p>
<pre><code>tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7</code></pre>
<p>Naturally, the first thing I did when seeing this is groan. The second thing I did is notice the <code>Srmojf</code> substring and it made me think of <a href="https://en.wikipedia.org/wiki/The_Smurfs">Smurfs</a>. So I secretly think of this gibberish identifier as the <code>Smurf</code>, and that‚Äôs how I‚Äôll refer to it for the rest of this post. Of course, in the long run you probably don‚Äôt want to be a random string of digits, you want to have a name! This is possible to do, and I‚Äôll walk you through that later. But right now that‚Äôs not a complication you need to care about.</p>
<p>We‚Äôll get to that a little bit later but the key thing for now is that your equivalent of the <code>Smurf</code> is both a public identifier and a bank account number. If someone wants to send you some tez, all they need to know is that string.</p>
</section>
<section id="tell-hen-who-you-are" class="level2">
<h2 class="anchored" data-anchor-id="tell-hen-who-you-are">3: Tell HEN who you are</h2>
<section id="synchronise-with-your-wallet" class="level3">
<h3 class="anchored" data-anchor-id="synchronise-with-your-wallet">Synchronise with your wallet</h3>
<p>When you go to the HEN website you‚Äôll see a little bit of text on the top right hand side that has a link that says ‚Äúsync‚Äù. Click on that:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_sync.png" class="img-fluid figure-img" width="510"></p>
</figure>
</div>
</div>
</div>
<p>This will bring up an overlay that looks like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_wallet.png" class="img-fluid figure-img" width="1111"></p>
</figure>
</div>
</div>
</div>
<p>If you chose a Temple wallet choose the ‚ÄúTemple - Tezos Wallet (ex. Thanos)‚Äù option. It might ask for your password at this point but it probably won‚Äôt if you‚Äôre already logged in. What you‚Äôre more likely to see is a screen like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/connect.png" class="img-fluid figure-img" width="410"></p>
</figure>
</div>
</div>
</div>
<p>This is a message from your wallet asking you to confirm that yes, you do want to synchronise with HEN (it also shows you that I currently have a balance of 11 tez, which I guess is something like US$60). Click on connect, and HEN will now be synchronised with your identity. You can see that because the menu at the top now looks something like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_synced.png" class="img-fluid figure-img" width="688"></p>
</figure>
</div>
</div>
</div>
<p>You‚Äôre now synced: in effect, you are now logged in to HEN. You still don‚Äôt have a username, but you <em>have</em> authenticated yourself and you can now change some settings.</p>
</section>
<section id="the-hen-menu-is-weird" class="level3">
<h3 class="anchored" data-anchor-id="the-hen-menu-is-weird">The HEN menu is weird</h3>
<p>Okay, let‚Äôs move to the next step. To the right of your <code>Smurf</code>, you‚Äôll see the ‚Äúhamburger‚Äù menu. It behaves pretty much the same as any menu you‚Äôd encounter on the internet, but some of the options have very non-intuitive names. Here‚Äôs what the menu looks like, with my annotations added:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_menu_annotated.png" class="img-fluid figure-img" width="490"></p>
</figure>
</div>
</div>
</div>
<p>As with everything about HEN, it‚Äôs very minimalist. Some of the options are easy to understand, but others are not. The options I‚Äôve been using most are these:</p>
<ul>
<li><strong>search</strong> takes you to the <a href="https://www.hicetnunc.xyz/search">HEN search page</a></li>
<li><strong>edit profile</strong> allows you add some information about yourself (see next section)</li>
<li><strong>manage assets</strong> will take you to your profile page (it took me a long time to realise this)</li>
<li><strong>OBJKT (mint)</strong> is the option you select when you want to create art. I‚Äôll talk bout that later</li>
</ul>
</section>
<section id="name-avatar-and-bio" class="level3">
<h3 class="anchored" data-anchor-id="name-avatar-and-bio">Name, avatar and bio</h3>
<p>The time has come to give yourself a name. If you do things in the right order and with the right mental model of what‚Äôs going on, this is pretty easy to do, but it‚Äôs easy to get a little confused because there are actually multiple things going on here, and you always have to keep in mind that your equivalent of my <code>Smurf</code> string is your actual identity.</p>
<p>So‚Ä¶ your first step is to tell HEN to link your <code>Smurf</code> string to a name, bio and avatar. Click on ‚Äúedit profile‚Äù. This brings up another slightly unconventional looking screen that has several options you can set. Here‚Äôs what mine currently looks like:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_profile.png" class="img-fluid figure-img" width="765"></p>
</figure>
</div>
</div>
</div>
<p>There are three things you can do immediately without any major hassle:</p>
<ul>
<li><p>First, if you click on ‚Äúchoose file‚Äù you can upload an image to give yourself a profile image.</p></li>
<li><p>Second, you can give yourself a username. The advice I read on the relevant <a href="https://github.com/hicetnunc2000/hicetnunc/wiki/Edit-your-profile">HEN wiki page</a> suggested that you should avoid spaces and special characters, and should stick to lower case letters because usernames are case sensitive.</p></li>
<li><p>Third, you can write a brief description of yourself. It doesn‚Äôt have to be very thorough. Most people say something about who they are and what they do, but you don‚Äôt have to. For example, I‚Äôve had a habit of identifying myself as ‚Äúan object of type closure‚Äù on all my social media websites. It‚Äôs intended as a silly reference to the classic R error message:</p>
<p>::: {.cell}</p>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">identity[]</span></code></pre></div>
<p>::: {.cell-output .cell-output-error} <code>Error in identity[]: object of type 'closure' is not subsettable</code> ::: :::</p>
<p>As it happens, this allowed me to make an even sillier double-layered joke in my HEN bio. When you create art on HEN the tokens that you generate are referred to as OBJKTs, so now I refer to myself as ‚Äúan OBJKT of type closure‚Äù. I‚Äôm so <em>funny</em>.</p></li>
</ul>
<p>Aaaaanyway‚Ä¶ once you‚Äôve done those three things, click on ‚Äúsave profile‚Äù, and you‚Äôre done for now. Ignore everything below the ‚Äúsave profile‚Äù button. All that stuff is useful, and it will let you do things like link to your twitter profile and your github profile, but it‚Äôs surprisingly finicky to set up and it costs money, so we‚Äôll leave that until later.</p>
</section>
<section id="check-out-your-profile" class="level3">
<h3 class="anchored" data-anchor-id="check-out-your-profile">Check out your profile</h3>
<p>Before moving on, take a quick look at your profile. As I mentioned earlier, you can do this through the menu system, by selecting the ‚Äúmanage assets‚Äù option. Personally I wish they‚Äôd chosen a better name: I‚Äôm not an investor and I don‚Äôt think of my art as ‚Äúassets‚Äù. The page that displays my art is my homepage on HEN, and it bothers me a little that the site frames it in such mercenary terms. It‚Äôs irritating. But whatever, it‚Äôs not a dealbreaker.</p>
<p>It‚Äôs worth quickly commenting on the URL for your profile. When you click on the ‚Äúmanage assets‚Äù link, it will take you to a URL that identifies you using the <code>Smurf</code>. For me, that URL is:</p>
<p>https://www.hicetnunc.xyz/tz/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7/</p>
<p>As long as you have your very own <code>Smurf</code> in your wallet, you‚Äôll have this URL. However, if you followed the instructions in the last section, HEN is kind enough to arrange it so that the ugly <code>Smurf</code> based URL will automatically redirect to one based on your username. For me, that URL is:</p>
<p>https://www.hicetnunc.xyz/djnavarro/</p>
<p>At this point, you exist on HEN! Yaaaay!</p>
</section>
</section>
<section id="intermission-follow-people" class="level2">
<h2 class="anchored" data-anchor-id="intermission-follow-people">Intermission: Follow people</h2>
<p>There‚Äôs more stuff you can do to get your account set up, but you might want to take a little breather and look for some art. Maybe you want to search for someone you know in the R community who might be on HEN, and you‚Äôd like to find them. As I mentioned earlier, the HEN site does have a <a href="https://www.hicetnunc.xyz/search">search page</a>, but there are some limitations. It‚Äôs okay if you want to search by keywords to <em>find</em> art or artists, but what it won‚Äôt let you do is <em>follow</em> them. Personally, I quite like being able to follow artists whose work I love, and it would be pretty cool to have a feed where I can see what they‚Äôve posted, arranged in chronological order. That‚Äôs where the the ‚ÄúHEN explorer‚Äù website is handy:</p>
<p>https://www.henext.xyz/</p>
<p>Like HEN itself, the HEN explorer site has browsing and search capability. It‚Äôs a little clunky in places (on my browser, there seems to be a bug where the search box only works when you‚Äôre on the home page), but it does the job.</p>
<p>To use HEN explorer, you‚Äôll need to synchronise with your wallet (i.e., log in). To do that you can click on the ‚Äúprofile‚Äù icon in the nav bar (the one that looks like a little person), or just visit</p>
<p>https://henext.xyz/profile</p>
<p>That will bring up a screen that looks like this</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/henext_connect.png" class="img-fluid figure-img" width="692"></p>
</figure>
</div>
</div>
</div>
<p>Click on the ‚Äúconnect wallet‚Äù button, and it will take you through the same steps that were involved when you connected your wallet to the HEN site.</p>
<p>Once you‚Äôve done that, you‚Äôre logged in to HEN explorer, and you‚Äôre able to find artists you like and follow them! If you would like to follow me, you can search for ‚Äúdjnavarro‚Äù on the HEN explorer search box, or you can visit my HEN explorer profile page directly:</p>
<p>https://www.henext.xyz/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7</p>
<p>Add a few artists you like, and you‚Äôll get a sense of what the feed looks like. The location of the feed is</p>
<p>https://www.henext.xyz/following</p>
<p>Happy browsing!</p>
</section>
<section id="get-a-little-money" class="level2">
<h2 class="anchored" data-anchor-id="get-a-little-money">4: Get a little money</h2>
<p>One slightly frustrating thing about this process is that it‚Äôs hard accomplish very much in this arena without spending money, and we‚Äôre rapidly reaching the point where you‚Äôll need a little bit. Thankfully, if you‚Äôre an artist wanting to create your own art, and aren‚Äôt looking to collect anyone else‚Äôs, you don‚Äôt need very much to get started. If you‚Äôre in the R community there‚Äôs a good chance you can ask one of the other R folks on HEN to help out. That‚Äôs what I did, and I‚Äôm grateful to the people who sent me a few tez, and the others who spontaneously offered. R people are lovely.</p>
<p>If the ‚Äúask a friend‚Äù approach is an option for you, I‚Äôd recommend it for artists. The reason I say this is that you have a bigger set up cost (in terms of your time and effort) than someone who is joining in order to purchase art, so from the perspective of the artist all you need ‚Äì right now ‚Äì is a little start up fund. To use myself as the example, I made a lot of weird mistakes setting up and wasted quite a lot of transactions, but even with all that I think I only spent about 1 tez in total (at the exchange rate at the time that was about US$5).</p>
<p>Assuming that you can solve the problem that way, you can take care of the other financials later (and there‚Äôs a guide on how to do that coming later in the post). There‚Äôs a part of me that hopes that if the R art community does end up with a larger presence on HEN, we‚Äôll look after our own. We‚Äôre R folks, and we pay it forward because we care for each other.</p>
<p>That being said, I‚Äôm also not naive, and I know perfectly well that it doesn‚Äôt always work that way, so I‚Äôll briefly mention other options. For example, the HEN website has some suggestions for <a href="https://github.com/hicetnunc2000/hicetnunc/wiki/Getting-Started-with-Tezos">other places</a> you can ask for help. Alternatively if you have a Visa card, one possibility is to buy through https://tzkt.io/buy-tezos (the tzkt.io site will come up later in the post!), though you‚Äôll need identification documents for this (or any other option) because it‚Äôs a financial institution. Finally, you can sign up at a currency exchange, which you‚Äôll probably want to do later anyway because that‚Äôs going to be how you convert the funds from your HEN sales to regular currency. I‚Äôll talk about that later on.</p>
<p>Regardless of how you solve this part of the problem, I‚Äôm hoping that at this point you have a few tez to start out!</p>
</section>
<section id="release-your-art" class="level2">
<h2 class="anchored" data-anchor-id="release-your-art">5: Release your art!</h2>
<section id="minting-the-art" class="level3">
<h3 class="anchored" data-anchor-id="minting-the-art">Minting the art</h3>
<p>Surprisingly, the process of releasing your art on HEN is quite easy, at least when compared to how complicated everything else is. If you open the menu and click on the ‚ÄúOBJKT (mint)‚Äù option, it will take you to the <a href="https://www.hicetnunc.xyz/mint">minting page</a>, which looks like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_mint.png" class="img-fluid figure-img" width="833"></p>
</figure>
</div>
</div>
</div>
<p>At this stage in the process you upload the file, give it a name and a description, and make some decisions about (a) how many tokens you want to create, and (b) your royalties, the percentage of future sales that are returned to you. Here‚Äôs me filling one out:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_mint_step1.png" class="img-fluid figure-img" width="823"></p>
</figure>
</div>
</div>
</div>
<p>Click on the preview button, and it will show you a preview of what the page will look like when it goes live. If you‚Äôre happy with it you can proceed and click the ‚Äúmint OBJKT‚Äù button. You‚Äôll be asked by your wallet to confirm the minting operation (this costs a small amount of tez), and then after a short time the OBJKT (i.e., the token) exists. In this case, here‚Äôs the page displaying the OBJKT that I‚Äôve just created:</p>
<p>https://www.hicetnunc.xyz/objkt/359761</p>
</section>
<section id="putting-objkts-up-for-sale" class="level3">
<h3 class="anchored" data-anchor-id="putting-objkts-up-for-sale">Putting OBJKTs up for sale</h3>
<p>The tokens now exist, but as yet they have not been placed on the market. People can‚Äôt buy them from you. To place the token for sale, go to the page showing the token (i.e., the link above). It will look something like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_mint_step2_annotated.png" class="img-fluid figure-img" width="799"></p>
</figure>
</div>
</div>
</div>
<p>If you want to put the art on sale, click on the ‚Äúswap‚Äù link that I‚Äôve highlighted here (and if you change your mind and want to destroy it, click on the ‚Äúburn‚Äù link next to it). The interface will look like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_mint_step3.png" class="img-fluid figure-img" width="856"></p>
</figure>
</div>
</div>
</div>
<p>It will then let you decide you many of your tokens you want to put up for sale, and set the price for each one. For this particular piece I‚Äôd decided to create a lot of tokens (there are 50 of them), and I‚Äôm going to put them all on sale at the very low price of 2 tez. I honestly know nothing about pricing, but I‚Äôm playing around with it at the moment: some pieces I mint only a single token and set the price high, others I mint a large number of tokens and set the price low. In any case, when you‚Äôre happy press the ‚Äúswap‚Äù button, confirm with your wallet, and the pieces will now be on sale!</p>
</section>
<section id="creating-auctions" class="level3">
<h3 class="anchored" data-anchor-id="creating-auctions">Creating auctions</h3>
<p>The mechanism I‚Äôve shown above is the simplest way to put art on sale: you list a price and wait for someone to purchase it. However, if you want to try more exotic options like auctions, you can check out <a href="https://objkt.com">objkt.com</a>.</p>
</section>
<section id="some-art" class="level3">
<h3 class="anchored" data-anchor-id="some-art">Some art‚Ä¶</h3>
<p>Here are the Native Flora pieces I posted while writing this post. They‚Äôre all available for purchase!</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div class="row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4" style="margin-left: -.2rem; margin-right: -.2rem; margin-top: 1rem; margin-bottom: 1rem; ">
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/359814" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/native-flora_110.png" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/359814">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">OBJKT 359814</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/359795" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/native-flora_184.png" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/359795">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">OBJKT 359795</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/359761" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/native-flora_196.png" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/359761">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">OBJKT 359761</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/359745" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/native-flora_199.png" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/359745">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">OBJKT 359745</h5>
</a>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="share-on-social-media" class="level2">
<h2 class="anchored" data-anchor-id="share-on-social-media">6: Share on social media</h2>
<p>At some point you‚Äôll probably want to advertise the fact that the artwork is available for purchase. You don‚Äôt have to, of course, and I‚Äôm honestly not sure how much of my online life I want to spend advertising art for sale, but it‚Äôs handy to have the option, and that probably means sharing on social media.</p>
<p>Most of us in the R community who make art are primarily sharing on twitter. Yes, I have seen some people post on reddit, others on instagram, and no doubt many other places besides, but my social media world is dominated by twitter, and I‚Äôd like to be able to post to twitter. To my mild irritation, the HEN website doesn‚Äôt seem to do twitter cards properly, so if you share the link on its own, people won‚Äôt see a nice preview image.</p>
<p>There are a couple of ways to get around this. The first is to post the link on twitter and attach your art as an image: that way folks on twitter will get the link and and the image. But they won‚Äôt get an actual twitter card displaying the title of the piece.</p>
<p>The second solution is to use the <a href="https://hic.art">hic.art</a> website. At the moment, if you visit the website it will tell you that signups are closed, but that actually doesn‚Äôt matter. You don‚Äôt need to sign up to use the service. All you have to do is provide the OBJKT identifier. For instance, here‚Äôs one of my pieces on HEN:</p>
<p>https://www.hicetnunc.xyz/objkt/354474</p>
<p>The identifier here is 354474. If I share the link above on twitter, it won‚Äôt display a very nice twitter preview. However, if I tweet this link</p>
<p>https://hic.art/354474</p>
<p>It will display a very lovely looking twitter preview, and when the user clicks on the link or the preview it will automatically redirect to the official HEN page. It‚Äôs a nice service!</p>
<p>Here‚Äôs an example from Antonio S√°nchez Chinch√≥n:</p>
<blockquote class="twitter-tweet blockquote" data-partner="tweetdeck">
<p lang="en" dir="ltr">
Mondrianomie 28<br>Basic cellular multiorganism grown according to neoplasticism assumptions (2033 x 2400 PNG)<br><br>3 ed - 28 tez at <a href="https://twitter.com/hicetnunc2000?ref_src=twsrc%5Etfw"><span class="citation" data-cites="hicetnunc2000">@hicetnunc2000</span></a><a href="https://t.co/TyNvt1zMBu">https://t.co/TyNvt1zMBu</a><a href="https://twitter.com/hashtag/HEN?src=hash&amp;ref_src=twsrc%5Etfw">#HEN</a> <a href="https://twitter.com/hashtag/hicetnunc?src=hash&amp;ref_src=twsrc%5Etfw">#hicetnunc</a> <a href="https://twitter.com/hashtag/hicetnunc2000?src=hash&amp;ref_src=twsrc%5Etfw">#hicetnunc2000</a> <a href="https://twitter.com/hashtag/nft?src=hash&amp;ref_src=twsrc%5Etfw">#nft</a> <a href="https://twitter.com/hashtag/NFTs?src=hash&amp;ref_src=twsrc%5Etfw">#NFTs</a> <a href="https://twitter.com/hashtag/nftcommunity?src=hash&amp;ref_src=twsrc%5Etfw">#nftcommunity</a> <a href="https://twitter.com/hashtag/nftcollectors?src=hash&amp;ref_src=twsrc%5Etfw">#nftcollectors</a> <a href="https://twitter.com/hashtag/cleannft?src=hash&amp;ref_src=twsrc%5Etfw">#cleannft</a> <a href="https://twitter.com/hashtag/nftart?src=hash&amp;ref_src=twsrc%5Etfw">#nftart</a> <a href="https://twitter.com/hashtag/tezos?src=hash&amp;ref_src=twsrc%5Etfw">#tezos</a> <a href="https://twitter.com/hashtag/tezosart?src=hash&amp;ref_src=twsrc%5Etfw">#tezosart</a>
</p>
‚Äî Antonio S√°nchez Chinch√≥n (<span class="citation" data-cites="aschinchon">@aschinchon</span>) <a href="https://twitter.com/aschinchon/status/1441675525651640320?ref_src=twsrc%5Etfw">September 25, 2021</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</section>
<section id="manage-your-identity" class="level2">
<h2 class="anchored" data-anchor-id="manage-your-identity">7: Manage your identity</h2>
<p>There are at least three additional tools that may be useful to you in managing your identity in the peculiar world of cryptoart on the Tezos blockchain: (1) you can set up a <a href="https://tzprofiles.com/">Tezos Profile</a>, (2) you can establish an alias on the <a href="https://tzkt.io/">Tezos Blockchain Explorer</a>, and/or (3) you can purchase a <a href="https://tezos.domains/">Tezos Domain</a>. None of these are strictly necessary, but all of them offer some value to you as an artist on HEN so I‚Äôll discuss each one.</p>
<section id="establishing-a-tezos-profile" class="level3">
<h3 class="anchored" data-anchor-id="establishing-a-tezos-profile">Establishing a Tezos Profile</h3>
<p>Earlier in this post I mentioned that it‚Äôs possible to connect your twitter profile, github account, website, etc with your HEN profile? You can do this with the assistance of Tezos Profiles. So lets go back HEN, open the menu, click on the option that says ‚Äúedit profile‚Äù and then take a closer look at the window that pops up. It‚Äôs almost impossible to notice, but the text that reads ‚ÄúTezos Profiles‚Äù is in fact a link:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_profile_annotated.png" class="img-fluid figure-img" width="765"></p>
</figure>
</div>
</div>
</div>
<p>Clicking on that link will take you to https://tzprofiles.com/, where you will see a very prominent ‚Äúconnect wallet‚Äù button. Click on that button, confirm with your wallet that you want to allow tzprofiles to connect (the little popup window will appear, like it always does), and then you‚Äôll see a screen that looks like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/tzprofiles.png" class="img-fluid figure-img" width="923"></p>
</figure>
</div>
</div>
</div>
<p>There are several different things you can do here, and any of them that you verify on tzprofiles will eventually end up on HEN. For example, if you want to verify your twitter account, you‚Äôll go through a series of elaborate steps (which, yes, will have to be confirmed with your wallet) and in the end you‚Äôll be forced to send a tweet like this one:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="et" dir="ltr">
I am attesting that this twitter handle <a href="https://twitter.com/djnavarro?ref_src=twsrc%5Etfw"><span class="citation" data-cites="djnavarro">@djnavarro</span></a> is linked to the Tezos account tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7 for <a href="https://twitter.com/tzProfiles?ref_src=twsrc%5Etfw"><span class="citation" data-cites="tzprofiles">@tzprofiles</span></a><br><br>sig:edsigtaH3nvbQjpiAfMCnT4zcQESZefXoVLPf2NEYaZeUfhwHjzRYp4oeBiiyDFLdrUAUvjBhvepyDFoxuyE2ynVYxd7TvV9fj6
</p>
‚Äî Danielle Navarro (<span class="citation" data-cites="djnavarro">@djnavarro</span>) <a href="https://twitter.com/djnavarro/status/1440133754333237248?ref_src=twsrc%5Etfw">September 21, 2021</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>To verify your GitHub account it‚Äôs pretty similar, except that it forces you to create a gist, using your GitHub account, that includes a signature block similar to the one in the tweet. For a website, it‚Äôs the same idea except you have to insert it as a DNS record (which I found <em>extremely</em> irritating to do). You can verify as many or as few of these as you like, but there is some value to doing them. Because Tezos Profiles forces you to go through the clunky verification process, other people can check your HEN profile and verify for themselves that it really is <em>you</em> posting your artwork onto the site, and not someone else who has stolen your piece (apparently, that happens way too often)</p>
<p>Once you‚Äôre done verifying your accounts, you may need to use your wallet to confirm again so that the updated Tezos Profile information can be accessed by the HEN website. After that‚Äôs been done, you‚Äôll see icons appear on your HEN page, linking to your twitter account, github account, etc:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/hen_profilecomplete.png" class="img-fluid figure-img" width="755"></p>
</figure>
</div>
</div>
</div>
<p>At this point your HEN profile is meaningfully linked to your other public identities, and any artwork you mint on HEN can be traced back to you, the original artist.</p>
</section>
<section id="creating-an-alias-on-tezos-blockchain-explorer" class="level3">
<h3 class="anchored" data-anchor-id="creating-an-alias-on-tezos-blockchain-explorer">Creating an alias on Tezos Blockchain Explorer</h3>
<p>All right. If you‚Äôre like me you‚Äôve probably been exploring as you go and you‚Äôve been encountering other sites that seem connected to this ecosystem. In particular, you may have clicked on links associated with transactions and it has taken you to the <a href="https://tzkt.io">Tezos Blockchain Explorer</a> website. As the name suggests, the role of this website is to publicly display transactions that take place on the Tezos blockchain. For example, here‚Äôs the page showing all the transactions that have involved me in some fashion:</p>
<p>https://tzkt.io/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7/operations/</p>
<p>When I first started (oh so many days ago‚Ä¶) it looked something like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/tzkt_screen.png" class="img-fluid figure-img" width="1016"></p>
</figure>
</div>
</div>
</div>
<p>A lot of it is gibberish, but you can kind of see what‚Äôs going on here. Yet again you can see my <code>Smurf</code>, there‚Äôs a bunch of transactions that show me minting NFTs, etc. It makes a kind of sense.</p>
<p>What might be surprising, particularly if you‚Äôve just gone to the effort of setting up a Tezos Profile, is that the account information doesn‚Äôt show my avatar. It doesn‚Äôt include my name, or a bio, and it doesn‚Äôt include my social media links. Instead, all I have is a cartoon image of a very suspicious looking cartoon cat. Unlike HEN, the <a href="https://tzkt.io">tzkt.io</a> site doesn‚Äôt pull information from your Tezos Profile.</p>
<p>The mystery deepens a little when you start noticing that the exact same cartoon cat appears on various other sites. For example, this was how my profile looked on <a href="https://objkt.com/">objkt.com</a> at the time:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/objkt.png" class="img-fluid figure-img" width="1241"></p>
</figure>
</div>
</div>
</div>
<p>The weird cryptocat was following me around across all these websites. Hm. The suspicious kitty is cute and everything, but honestly I‚Äôd prefer my usual name and profile image to follow me around instead.</p>
<p>As it turns out, the source for all these skeptical cats is the blockchain explorer site, <a href="https://tzkt.io">tzkt.io</a>, and you can submit an application to the people who run that site to create an alias for you. The process is described in <a href="https://baking-bad.org/blog/2021/09/19/tzkt-alias-verification-f-a-q/">this post</a> on the ‚ÄúBaking Bad‚Äù blog (don‚Äôt let the name and silly images fool you, the blog is associated with the people who run the site). The post will take you to a Google Form that you can fill out, in order to have your alias created. When you do this, it won‚Äôt update immediately: there is a manual verification process that takes about three days, so you‚Äôll need to be patient.</p>
<p>Once that happens you‚Äôll discover that your links have appeared on your tzkt.io page, and more importantly perhaps, you have an avatar and description on other sites that make use of this alias. This is what my <a href="https://objkt.com/profile/tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7/creations">profile page</a> on objkt.com looks like now:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/objkt_updated.png" class="img-fluid figure-img" width="1230"></p>
</figure>
</div>
</div>
</div>
<p>Mine is a deliberately vague because I‚Äôm a peculiar person, but you can see a slightly more informative version if you look at <a href="https://objkt.com/profile/tz2Pkj2xWJovKKCsABjnr3NbyMVJTMBkpTvb/creations">Thomas Lin Pedersen‚Äôs profile</a>:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/objkt_thomas.png" class="img-fluid figure-img" width="1277"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="purchasing-a-tezos-domain" class="level3">
<h3 class="anchored" data-anchor-id="purchasing-a-tezos-domain">Purchasing a Tezos Domain</h3>
<p>When you look at the two profiles above, there‚Äôs something slightly peculiar. Notice how Thomas‚Äô profile now links to <code>thomasp85.tez</code> and mine links to <code>djnavarro.tez</code>? That‚Äôs something slightly different again. Those addresses aren‚Äôt created by the Tezos Profile, nor are they created when you set your alias on the Tezos Blockchain Explorer. Those are <a href="https://tezos.domains/">Tezos Domains</a>. The idea is very sensible: human beings don‚Äôt really enjoy memorising long strings of random digits. It would be much more convenient if I could message someone and say ‚Äúhey send tez to me at <code>djnavarro.tez</code>, because that‚Äôs me!‚Äù. It‚Äôs certainly nicer than trying to say ‚Äúsend tez to me at <code>tz1hXKn2BcU64HxSrmojfuf7cDoweJ9xwxZ7</code>, because that‚Äôs me!‚Äù</p>
<p>If you‚Äôd like to do this, visit <a href="https://tezos.domains/">tezos.domains</a> and follow the instructions there: it costs 1 tez per year to set one up.</p>
</section>
</section>
<section id="convert-tez-to-dollars" class="level2">
<h2 class="anchored" data-anchor-id="convert-tez-to-dollars">8: Convert tez to dollars</h2>
<p>At some point, hopefully very soon, you‚Äôll sell some artwork and you‚Äôll want to get paid. To do that, you‚Äôll probably need to sign up with one of the currency exchanges. Although you likely have no desire to be a currency trader, it‚Äôs a necessity if you want to get paid in real money. Yes, cryptocurrencies sound cool, but coolness does not pay the rent. My landlord expects to be paid in Australian dollars, and ‚Äì by extension ‚Äì so do I. That means exchanging your tez for regular money. The HEN wiki lists a couple of options along with the standard warning that you should definitely do your own research, because this is a thing that will depend a bit on where you live. I looked into one of their suggested options (<a href="https://www.kraken.com">Kraken</a>) and it seemed fairly standard, but in the end used an Australian provider, <a href="https://www.coinspot.com.au/">CoinSpot</a>. The sign up process was fairly standard, requiring identification documents for verification. Once that was completed, I was able to send money to my bank account. It ended up being a three-step process:</p>
<ul>
<li>Send tezos from the Temple wallet associated with my public identity (i.e., the one I‚Äôve been using on HEN etc), to a tezos wallet that is provided for me through my CoinSpot account</li>
<li>On CoinSpot, sell the tezos in exchange for Australian dollars</li>
<li>Withdraw money from my CoinSpot account and deposit it in my Australian bank account</li>
</ul>
<p>Once I figured it all out it was surprisingly smooth. I imagine the process varies a lot from country to country and from exchange to exchange, but hopefully the description of my process is at least somewhat helpful.</p>
</section>
<section id="epilogue-is-all-it-worth-it" class="level2">
<h2 class="anchored" data-anchor-id="epilogue-is-all-it-worth-it">Epilogue: Is all it worth it?</h2>
<p>I haven‚Äôt been doing this for very long, but I‚Äôm a little surprised to find that I‚Äôm enjoying the process of minting art on HEN. I‚Äôve sold three pieces to people who know me, and it is a nice feeling. I‚Äôm not making mountains of money, and I don‚Äôt expect that I will any time soon, but it is still quite satisfying. The fact that I‚Äôm doing it on HEN makes a big difference to how I feel about it too: the environmental costs worry me a lot and don‚Äôt think I could make myself use a site that relied on Ethereum. And to be honest, it really is nice to get <em>paid</em> for my art. Praise is nice, sure, but you can‚Äôt live off that.</p>
<p>I suppose the other thing I‚Äôm noticing already is that I feel a little less constrained on HEN. When I post art to twitter or instagram, it‚Äôs always with the knowledge that the big social media websites are <em>also</em> places where my professional networks exist, and I‚Äôm obliged to behave, to be nice, to be the ‚Äúgood girl‚Äù. I might swear and be grumpy on twitter sometimes, but for the most part I try not to let other parts of my personality and my life show on those sites. That‚Äôs okay, and it‚Äôs probably how it should be. Twitter is a place where it‚Äôs okay to mix some parts of your personal life with some parts of your work life, but there‚Äôs a tacit understanding that you probably ought to keep some things carefully sequestered from the bird site. There are a lot of things about a person‚Äôs life that their employer and professional colleagues may not want to know.</p>
<p>Where that runs into some difficulty, for me at least, is that a lot of my generative art is deeply entwined with my personal life, with my moods, and my experiences. When done well, <a href="https://essays.djnavarro.net/post/intimacy-and-art/">art is always intimate</a>, and the intimacy of creating and sharing the art often entails personal disclosures that might not be welcome on twitter. Consider these pieces, for example:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div class="row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4" style="margin-left: -.2rem; margin-right: -.2rem; margin-top: 1rem; margin-bottom: 1rem; ">
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/341833" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/thorns_05_1014.png" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/341833">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">OBJKT 341833</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/341852" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/thorns_05_1047.png" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/341852">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">OBJKT 341852</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/341868" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/thorns_05_1053.png" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/341868">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">OBJKT 341868</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/341880" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/img/thorns_05_1079.png" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://www.hicetnunc.xyz/objkt/341880">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">OBJKT 341880</h5>
</a>
</div>
</div>
</div>
</div>
</div>
</div>
<p>I am very fond of these pieces, but they aren‚Äôt the easiest ones to share on twitter. The title of the series is <em>Bruises are how sadists kiss</em>, and the pieces are tagged with ‚Äúsadomasochism‚Äù on my HEN profile. The title isn‚Äôt deliberately intended to be provocative or anything of the sort. That‚Äôs not really my preferred style. It‚Äôs much more prosaic: those things are part of my world and part of my life, and sometimes they show up in my art. The emotional experience expressed through the art (via the code) was one in which a very polite sadist had turned up in my life after a long absence. I was reminiscing, trying to work out what he meant to me, and I wrote the code while I was thinking about it. This was the system that emerged.</p>
<p>On twitter I would not dream of referring to those parts of my world so overtly (nor would I typically do so on this blog, focused as it is on technical topics). On HEN though, it feels a little more natural: art is often raw, it is often personal, and those subjects do come up if you spend a little time exploring the cryptoart space. It feels like a place where that version of me is permitted to have an online existence. As it turns out, that‚Äôs a thing that has some value to me.</p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {How to Mint Digital Art on {HEN}},
  date = {2021-09-26},
  url = {https://blog.djnavarro.net/setting-up-on-hic-et-nunc},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúHow to Mint Digital Art on HEN.‚Äù</span>
September 26, 2021. <a href="https://blog.djnavarro.net/setting-up-on-hic-et-nunc">https://blog.djnavarro.net/setting-up-on-hic-et-nunc</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/index.html</guid>
  <pubDate>Sat, 25 Sep 2021 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-09-26_setting-up-on-hic-et-nunc/preview-image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Visualising the hits of Queen Britney</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>I‚Äôve never participated in <a href="https://github.com/rfordatascience/tidytuesday">Tidy Tuesday</a> before, but because I‚Äôve now joined a slack that does, it is high time I did something about that poor track record. I wasn‚Äôt sure what I wanted to do with this week‚Äôs ‚ÄúBillboard‚Äù data, other than I wanted it to have something to do with Britney Spears (because she‚Äôs awesome). After going back and forward for a while, I decided what I‚Äôd do is put together a couple of plots showing the chart performance of all her songs and ‚Äì more importantly ‚Äì write it up as a blog post in which I try to ‚Äúover-explain‚Äù all my choices. There are a lot of people in our slack who haven‚Äôt used R very much, and I want to ‚Äúunpack‚Äù some of the bits and pieces that are involved. This post is pitched at beginners who are hoping for a little bit of extra scaffolding to explain some of the processes‚Ä¶</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>There‚Äôs an R script containing the source code for this analysis <a href="https://github.com/djnavarro/quarto-blog/blob/master/posts/2021-09-14_tidy-tuesday-billboard/britney.R">here</a></p>
</div></div><section id="finding-the-data-on-github" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="finding-the-data-on-github">Finding the data on GitHub</h2>
<p>Every week the Tidy Tuesday data are posted online, and the first step in participating is generally to import the data. After a little bit of hunting online, you might discover that the link to the billboard data looks like this:</p>
<p>https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv</p>
<p>Let‚Äôs start by unpacking this link. There is a lot of assumed knowledge buried here, and while it is entirely possible for you to get started without understanding it all, for most of us in the slack group the goal is to learn new data science skills. At some point you are probably going to want to learn the ‚Äúversion control‚Äù magic. This post is not the place to learn this sorcery, but I am going to start foreshadowing some important concepts because they will be useful later.</p>
<section id="github-repositories" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="github-repositories">GitHub repositories</h3>
<p>The place to start in understanding this link is the peculiar bit at the beginning: what is this ‚Äúgithub‚Äù nonsense? The long answer is very long, but the short answer is that https://github.com is a website that programmers use to store their code. GitHub is one of several sites (e.g., https://gitlab.org, https://bitbucket.com) that are all built on top of a version control system called ‚Äúgit‚Äù. <a href="https://git-scm.com/">Git</a> is a powerful tool that lets you collaborate with other people when writing code, allows you to keep track of the history of your code, and to backup your code online in case your laptop mysteriously catches on fire.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>In the R community, ‚Äúlaptop fires‚Äù are universally understood to be a reference to what happens to you when you foolishly ignore the wise advice of Jenny Bryan</p>
</div></div><p>Git is a complicated tool and it takes quite some time to get the hang of (I‚Äôm still learning, quite frankly), but it is worth your effort. When you have time, I recommend starting a free GitHub account. You can sign up using an email address, and if you have a university email address you get the educational discount (basically you get the ‚Äúpro‚Äù version for free). My username on GitHub is djnavarro, and you can find my profile page here:</p>
<p>https://github.com/djnavarro</p>
<p>The Tidy Tuesday project originated in the ‚ÄúR for data science‚Äù learning community, and there is a profile page for that community too:</p>
<p>https://github.com/rfordatascience</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><a href="https://r4ds.had.co.nz/">R for data science</a> is a wonderful book by Hadley Wickham and Garrett Grolemund</p>
</div></div><p>Okay, so that‚Äôs <em>part</em> of the link explained. The next thing to understand is that when you create projects using git and post them to GitHub, they are organised in a ‚Äúrepository‚Äù (‚Äúrepo‚Äù for short). Each repo has its own page. The Tidy Tuesday repo is here:</p>
<p>https://github.com/rfordatascience/tidytuesday</p>
<p>If you click on this link, you‚Äôll find that there‚Äôs a nice description of the whole project, links to data sets, and a whole lot of other things besides.</p>
<p>Most of the work organising this is done by Thomas Mock, and it‚Äôs very very cool.</p>
</section>
<section id="repositories-have-branches" class="level3">
<h3 class="anchored" data-anchor-id="repositories-have-branches">Repositories have branches</h3>
<p>Whenever someone creates a git repository, it will automatically have at least one ‚Äúbranch‚Äù (usually called ‚Äúmaster‚Äù or ‚Äúmain‚Äù). The idea behind it is really sensible: suppose you‚Äôre working on a project and you think ‚Äúooooh, I have a cool idea I want to try but maybe it won‚Äôt work‚Äù. What you can do is create a new ‚Äúbranch‚Äù and try out all your new ideas in the new branch all without ever affecting the master branch. It‚Äôs a safe way to explore: if your new idea works you can ‚Äúmerge‚Äù the changes into the master branch, but if it fails you can switch back to the master branch and pick up where you left off. No harm done. If you have lots of branches, you effectively have a ‚Äútree‚Äù, and it‚Äôs a suuuuuuper handy feature. Later on as you develop your data science skills you‚Äôll learn how to do this yourself, but for now this is enough information. The key thing is that what you‚Äôre looking at when you visit the Tidy Tuesday page on GitHub is actually the master branch on the tree:</p>
<p>https://github.com/rfordatascience/tidytuesday/tree/master</p>
</section>
<section id="repositories-are-usually-organised" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="repositories-are-usually-organised">Repositories are usually organised</h3>
<p>The Tidy Tuesday repository has a lot of different content, and it‚Äôs all nicely organised into folders (no different to the folders you‚Äôd have on your own computer). One of the folders is called ‚Äúdata‚Äù, and inside the ‚Äúdata‚Äù folder there is a ‚Äú2021‚Äù folder:</p>
<p>https://github.com/rfordatascience/tidytuesday/tree/master/data/2021</p>
<p>Inside that folder you find lots more folders, one for every week this year. If you scroll down to the current week and click on the link, it will take you here:</p>
<p>https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-09-14</p>
<p>Being the kind soul that he is, Thomas has included a ‚Äúreadme‚Äù file in this folder: it‚Äôs a <a href="https://www.markdownguide.org/">plain markdown file</a> that gets displayed in a nice human readable format on the github page. Whenever you‚Äôre doing a Tidy Tuesday analysis, it‚Äôs super helpful to look at the readme file, because it will provide you a lot of the context you need to understand the data. Whenever doing your own projects, I‚Äôd strongly recommend creating readme files yourself: they‚Äôre reeeeaaaaaally helpful to anyone using your work, even if that‚Äôs just you several months later after you‚Äôve forgotten what you were doing. Over and over again when I pick up an old project I curse the me-from-six-months ago when she was lazy and didn‚Äôt write one, or feel deeply grateful to her for taking the time to write one.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Readme files are your best friend. Seriously</p>
</div></div><p>In any case, one of the things you‚Äôll see on that page is a link to the ‚Äúbillboard.csv‚Äù data. If you click on that link it will take you here:</p>
<p>https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-09-14/billboard.csv</p>
<p>Notice that this <em>doesn‚Äôt</em> take you to the data file itself: it goes to a webpage! Specifically, it takes you to the ‚Äúblob‚Äù link that displays some information about the file (notice the ‚Äúblob‚Äù that has sneakily inserted itself into the link above?). In this case, the page won‚Äôt show you very much information at all because the csv file is 43.7MB in size and GitHub doesn‚Äôt try to display files that big! However, what it <em>does</em> give you is a link that tells you where they‚Äôve hidden the raw file! If you click on it (which I don‚Äôt recommend), it will take you to the ‚Äúraw‚Äù file located at‚Ä¶</p>
<p>https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv</p>
<p>This is the link that you might have discovered if you‚Äôd been googling to find the Billboard data. It‚Äôs a GitHub link, but GitHub uses the ‚Äúraw.githubusercontent.com‚Äù site as the mechanism for making raw files accessible, which is why that part of the link has changed.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>I didn‚Äôt intend for this section to be this long, honest</p>
</div></div></section>
<section id="the-anatomy-of-the-data-link" class="level3">
<h3 class="anchored" data-anchor-id="the-anatomy-of-the-data-link">The anatomy of the data link</h3>
<p>All of this tedious exposition should (I hope) help you make sense of what you‚Äôre actually looking at when you see this link. In real life I would never bother to do this, but if you wanted to you could decompose the link into its parts. In the snippet below I‚Äôll create separate variables in R, one for each component of the link:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">site <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://raw.githubusercontent.com"</span></span>
<span id="cb1-2">user <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"rfordatascience"</span></span>
<span id="cb1-3">repo <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"tidytuesday"</span></span>
<span id="cb1-4">branch <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"master"</span></span>
<span id="cb1-5">folder1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"data"</span></span>
<span id="cb1-6">folder2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"2021"</span> </span>
<span id="cb1-7">folder3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"2021-09-14"</span></span>
<span id="cb1-8">file <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"billboard.csv"</span></span></code></pre></div>
</div>
<p>Argh. Wait. There‚Äôs something slightly off-topic that I should point out‚Ä¶ one thing you might be wondering when you look at this snippet, is where that pretty ‚Äúarrow‚Äù character comes from. Don‚Äôt be fooled. It‚Äôs not a special arrow character, it‚Äôs two ordinary characters. What I‚Äôve actually <em>typed</em> is <code>&lt;-</code>, but this blog uses a fancypants font that contains a special <a href="https://en.wikipedia.org/wiki/Ligature_(writing)">ligature</a> that makes <code>&lt;-</code> appear to be a single smooth arrow. The font is called <a href="https://fonts.google.com/specimen/Fira+Code#about">‚ÄúFira Code‚Äù</a>, and a lot of programmers use it on their blogs. Once you know the trick, it‚Äôs really nice because it does make the code a little easier to read, but it can be confusing if you‚Äôre completely new to programming! It‚Äôs one of those little things that people forget to tell you about :-)</p>
<p>Anyway, getting back on topic. The URL (a.k.a. ‚Äúlink‚Äù) for the Billboard data is what you get when you <code>paste()</code> all these components together, separated by the ‚Äú/‚Äù character:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">data_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(</span>
<span id="cb2-2">  site, </span>
<span id="cb2-3">  user, </span>
<span id="cb2-4">  repo, </span>
<span id="cb2-5">  branch,</span>
<span id="cb2-6">  folder1, </span>
<span id="cb2-7">  folder2, </span>
<span id="cb2-8">  folder3, </span>
<span id="cb2-9">  file, </span>
<span id="cb2-10">  <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"/"</span></span>
<span id="cb2-11">)</span>
<span id="cb2-12"></span>
<span id="cb2-13">data_url</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv"</code></pre>
</div>
</div>
<p>Exciting stuff.</p>
</section>
</section>
<section id="attaching-packages" class="level2">
<h2 class="anchored" data-anchor-id="attaching-packages">Attaching packages</h2>
<p>I‚Äôm relatively certain that everyone in the slack has been exposed to the idea of an ‚ÄúR package‚Äù. A package is a collection of R functions and data sets that don‚Äôt automatically come bundled with R, but are freely available online. The <a href="https://www.tidyverse.org/">tidyverse</a>, for example, is a collection of R packages that a lot people find helpful for data analysis, and you can install all of them onto your machine (or your <a href="https://rstudio.cloud/">RStudio Cloud</a> project) by using this command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"tidyverse"</span>)</span></code></pre></div>
</div>
<p>This can take quite a while to complete because there are a lot of packages that make up the tidyverse! Once the process is completed, you will now be able to use the tidyverse tools. However, it‚Äôs important to recognise that just because you‚Äôve ‚Äúinstalled‚Äù the packages, it doesn‚Äôt mean R will automatically use them. You have to be explicit. There are three tidyverse packages that I‚Äôm going to use a lot in this post (<a href="https://dplyr.tidyverse.org/">dplyr</a>, <a href="https://stringr.tidyverse.org/">stringr</a>, and <a href="https://ggplot2.tidyverse.org/">ggplot2</a>), so I‚Äôll use the <code>library()</code> function to ‚Äúattach‚Äù the packages (i.e.&nbsp;tell R to make them available):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">library</span>(stringr)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span></code></pre></div>
</div>
</section>
<section id="importing-the-data" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="importing-the-data">Importing the data</h2>
<p>At this point we know where the data set is located, and we have some R tools that we can use to play around with it. The next step is reading the data into R. The <a href="https://readr.tidyverse.org/">readr</a> package is part of the tidyverse, and it contains a useful function called <code>read_csv()</code> that can go online for you, retrive the billboard data, and load it into R. That‚Äôs cool and all but if you look at the <code>library()</code> commands above, I didn‚Äôt actually attach them. I didn‚Äôt want to do this because honestly I‚Äôm only going to use the readr package once, and it feels a bit silly to attach the whole package. Instead, what I‚Äôll do is use the ‚Äúdouble colon‚Äù notation <code>::</code> to refer to the function more directly. When I write <code>readr::read_csv()</code> in R, what I‚Äôm doing is telling R to use the <code>read_csv()</code> function inside the <code>readr</code> package. As long as I have readr on my computer, this will work even if I haven‚Äôt attached it using <code>library()</code>. The technical name for this is ‚Äúnamespacing‚Äù, and if you hang around enough R programmers long enough that‚Äôs a word that will pop up from time to time. The way to think about it is that every package (e.g., readr) contains a collection of things, each of which has a name (e.g., ‚Äúread_csv‚Äù is the name of the <code>read_csv()</code> function). So you can think of a ‚Äúspace‚Äù of these names‚Ä¶ and hence the boring term ‚Äúnamespace‚Äù.</p>
<p>Okay, let‚Äôs use a ‚Äúnamespaced‚Äù command to import the data, and assign it to a variable (i.e., give the data a name). I‚Äôll call the data <code>billboard</code>:</p>
<div class="cell" data-hash="index_cache/html/import-billboard-data_d0b29a15f03063c5e36156247b9299ef">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">billboard <span class="ot" style="color: #003B4F;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_csv</span>(data_url)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 327895 Columns: 10
‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Delimiter: ","
chr (5): url, week_id, song, performer, song_id
dbl (5): week_position, instance, previous_week_position, peak_position, wee...

‚Ñπ Use `spec()` to retrieve the full column specification for this data.
‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
</div>
<p>The <code>billboard</code> data is a nice, rectangular data set. Every row refers to a specific song on a specific date, and tells you its position in the charts on that date. We can type <code>print(billboard)</code> to take a look at the first few rows and columns. In most situations (not all), you can print something out just by typing its name:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">billboard</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 327,895 √ó 10
   url     week_id week_‚Ä¶¬π song  perfo‚Ä¶¬≤ song_id insta‚Ä¶¬≥ previ‚Ä¶‚Å¥ peak_‚Ä¶‚Åµ weeks‚Ä¶‚Å∂
   &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1 http:/‚Ä¶ 7/17/1‚Ä¶      34 Don'‚Ä¶ Patty ‚Ä¶ Don't ‚Ä¶       1      45      34       4
 2 http:/‚Ä¶ 7/24/1‚Ä¶      22 Don'‚Ä¶ Patty ‚Ä¶ Don't ‚Ä¶       1      34      22       5
 3 http:/‚Ä¶ 7/31/1‚Ä¶      14 Don'‚Ä¶ Patty ‚Ä¶ Don't ‚Ä¶       1      22      14       6
 4 http:/‚Ä¶ 8/7/19‚Ä¶      10 Don'‚Ä¶ Patty ‚Ä¶ Don't ‚Ä¶       1      14      10       7
 5 http:/‚Ä¶ 8/14/1‚Ä¶       8 Don'‚Ä¶ Patty ‚Ä¶ Don't ‚Ä¶       1      10       8       8
 6 http:/‚Ä¶ 8/21/1‚Ä¶       8 Don'‚Ä¶ Patty ‚Ä¶ Don't ‚Ä¶       1       8       8       9
 7 http:/‚Ä¶ 8/28/1‚Ä¶      14 Don'‚Ä¶ Patty ‚Ä¶ Don't ‚Ä¶       1       8       8      10
 8 http:/‚Ä¶ 9/4/19‚Ä¶      36 Don'‚Ä¶ Patty ‚Ä¶ Don't ‚Ä¶       1      14       8      11
 9 http:/‚Ä¶ 4/19/1‚Ä¶      97 Don'‚Ä¶ Teddy ‚Ä¶ Don't ‚Ä¶       1      NA      97       1
10 http:/‚Ä¶ 4/26/1‚Ä¶      90 Don'‚Ä¶ Teddy ‚Ä¶ Don't ‚Ä¶       1      97      90       2
# ‚Ä¶ with 327,885 more rows, and abbreviated variable names ¬π‚Äãweek_position,
#   ¬≤‚Äãperformer, ¬≥‚Äãinstance, ‚Å¥‚Äãprevious_week_position, ‚Åµ‚Äãpeak_position,
#   ‚Å∂‚Äãweeks_on_chart</code></pre>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Finally, some data!</p>
</div></div><p>This view helps you see the data in its ‚Äúnative‚Äù orientation: each column is a variable, each row is an observation. It‚Äôs a bit frustrating though because a lot of the columns get chopped off in the printout. It‚Äôs often more useful to use <code>dplyr::glimpse()</code> to take a peek. When ‚Äúglimpsing‚Äù the data, R rotates the data on its side and shows you a list of all the variables, along with the first few entries for that variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">glimpse</span>(billboard)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 327,895
Columns: 10
$ url                    &lt;chr&gt; "http://www.billboard.com/charts/hot-100/1965-0‚Ä¶
$ week_id                &lt;chr&gt; "7/17/1965", "7/24/1965", "7/31/1965", "8/7/196‚Ä¶
$ week_position          &lt;dbl&gt; 34, 22, 14, 10, 8, 8, 14, 36, 97, 90, 97, 97, 9‚Ä¶
$ song                   &lt;chr&gt; "Don't Just Stand There", "Don't Just Stand The‚Ä¶
$ performer              &lt;chr&gt; "Patty Duke", "Patty Duke", "Patty Duke", "Patt‚Ä¶
$ song_id                &lt;chr&gt; "Don't Just Stand TherePatty Duke", "Don't Just‚Ä¶
$ instance               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,‚Ä¶
$ previous_week_position &lt;dbl&gt; 45, 34, 22, 14, 10, 8, 8, 14, NA, 97, 90, 97, 9‚Ä¶
$ peak_position          &lt;dbl&gt; 34, 22, 14, 10, 8, 8, 8, 8, 97, 90, 90, 90, 90,‚Ä¶
$ weeks_on_chart         &lt;dbl&gt; 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 1, ‚Ä¶</code></pre>
</div>
</div>
<p>Notice that this time I just typed <code>glimpse</code> rather than <code>dplyr::glimpse</code>. I didn‚Äôt need to tell R to look in the dplyr namespace because I‚Äôd already attached it when I typed <code>library(dplyr)</code> earlier.</p>
</section>
<section id="finding-britney" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="finding-britney">Finding Britney</h2>
<p>Time to start analysing the data. I have made a decision that today I have love in my heart only for Britney. So what I want to do is find the rows in <code>billboard</code> that correspond to Britney Spears songs. The natural way to do this would be to pull out the ‚Äúperformer‚Äù column and then try to find entries that refer to Britney. The slightly tricky aspect to this is that Britney doesn‚Äôt appear solely as ‚ÄúBritney Spears‚Äù. For example, ‚ÄúMe Against The Music‚Äù features Madonna, and the entry in the <code>performer</code> column is ‚ÄúBritney Spears Featuring Madonna‚Äù. So we‚Äôre going to have to search in a slightly smarter way. Before turning this into R code, I can sketch out my plan like this:</p>
<pre><code>get the billboard data, THEN
  pull out the performer column, THEN
  search for britney, THEN
  tidy up a bit</code></pre>
<p>This kind of workflow is naturally suited to the ‚Äúpipe‚Äù, which is written <code>%&gt;%</code>. You‚Äôll see referred to either as the ‚Äúmagrittr pipe‚Äù (referring to the <a href="https://magrittr.tidyverse.org/">magrittr</a> package where it originally came from) or the ‚Äúdplyr pipe‚Äù (because dplyr made it famous!). I‚Äôm sure you‚Äôve seen it before, but since one goal of this post is to be a refresher, I‚Äôll explain it again. The pipe does the same job as the word ‚ÄúTHEN‚Äù in the pseudo-code I wrote above. Its job is to take the output of one function (whatever is on the left) and then pass it on as the input to the next one (on the right). So here‚Äôs that plan re-written in an ‚ÄúR-like‚Äù format:</p>
<pre><code>the_billboard_data %&gt;% 
  pull_out_the_performer_column() %&gt;% 
  search_for_britney() %&gt;% 
  tidy_it_up()</code></pre>
<p>In fact that‚Äôs pretty close to what the actual R code is going to look like! The dplyr package has a function <code>dplyr::pull()</code> that will extract a column from the data set (e.g., all 327,895 listings in the <code>performer</code> column), and base R has a function called <code>unique()</code> that will ignore repeat entries, showing you only the unique elements of a column. So our code is going to look almost exactly like this</p>
<pre><code>billboard %&gt;% 
  pull(performer) %&gt;% 
  search_for_britney() %&gt;% 
  unique()</code></pre>
<section id="pattern-matching-for-text-data" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="pattern-matching-for-text-data">Pattern matching for text data</h3>
<p>Inexcusably, however, R does not come with a <code>search_for_britney()</code> function, so we‚Äôre going to have to do it manually. This is where the <a href="https://stringr.tidyverse.org/">stringr</a> package is very helpful. It contains a lot of functions that are very helpful in searching for text and manipulating text. The actual function I‚Äôm going to use here is <code>stringr::str_subset()</code> which will return the subset of values that ‚Äúmatch‚Äù a particular pattern. Here‚Äôs a very simple example, where the ‚Äúpattern‚Äù is just the letter ‚Äúa‚Äù. I‚Äôll quickly define a variable <code>animals</code> containing the names of a few different animals:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">animals <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"cat"</span>, <span class="st" style="color: #20794D;">"dog"</span>, <span class="st" style="color: #20794D;">"rat"</span>, <span class="st" style="color: #20794D;">"ant"</span>, <span class="st" style="color: #20794D;">"bug"</span>)</span></code></pre></div>
</div>
<p>To retain only those strings that contain the letter <code>"a"</code> we do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">str_subset</span>(<span class="at" style="color: #657422;">string =</span> animals, <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "cat" "rat" "ant"</code></pre>
</div>
</div>
<p>Alternatively we could write this using the pipe:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">animals <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">str_subset</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "cat" "rat" "ant"</code></pre>
</div>
</div>
<p>I‚Äôm not sure this second version is any nicer than the first version, but it can be helpful to see the two versions side by side in order to remind yourself of what the pipe actually does!</p>
<p>We can use the same tool to find all the Britney songs. In real life, whenever you‚Äôre working with text data you need to be wary of the possibility of mispellings and other errors in the raw data. Wild caught data are often very messy, but thankfully for us the Tidy Tuesday data sets tend to be a little kinder. With that in mind can safely assume that any song by Britney Spears will include the pattern ‚ÄúBritney‚Äù in it <em>somewhere</em>.</p>
<p>So let‚Äôs do just try this and see what we get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">billboard <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">pull</span>(performer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">str_subset</span>(<span class="st" style="color: #20794D;">"Britney"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;">unique</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Britney Spears"                              
[2] "Rihanna Featuring Britney Spears"            
[3] "will.i.am &amp; Britney Spears"                  
[4] "Britney Spears &amp; Iggy Azalea"                
[5] "Britney Spears Featuring G-Eazy"             
[6] "Britney Spears Featuring Madonna"            
[7] "Britney Spears Featuring Tinashe"            
[8] "Britney Spears Featuring Nicki Minaj &amp; Ke$ha"</code></pre>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>At this point I was sorely tempted to get distracted by Ke$ha and Rihanna, but somehow managed to stay on topic. Somehow</p>
</div></div><p>Okay, so it turns out that Britney is listed in eight different ways. For the sake of this post, I‚Äôm happy to include cases where another artist features on a Britney track, but I don‚Äôt want to include the two cases where Britney is the featuring artist. Looking at the output above, it seems like I can find those cases by keeping only those rows that <em>start with</em> the word ‚ÄúBritney‚Äù.</p>
<p>Now our question becomes ‚Äúhow do we write down a pattern like that?‚Äù and the answer usually involves crying for a bit because the solution is to use a <em>regular expression</em>, or ‚Äúregex‚Äù.</p>
<p><a href="https://towardsdatascience.com/a-gentle-introduction-to-regular-expressions-with-r-df5e897ca432">Regular expressions</a> are a tool used a lot in programming: they provide a compact way to represent patterns in text. They‚Äôre very flexible, but can often be quite hard to wrap your head around because there are a lot of special characters that have particular meanings. Thankfully, for our purposes today we only need to know one of them: the <code>^</code> character is used to mean ‚Äúthe start of the string‚Äù. So when interpreted as a regular expression, <code>"^Britney"</code> translates to ‚Äúany string that begins with ‚ÄòBritney‚Äô‚Äù. Now that we have our regular expression, this works nicely:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">billboard <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;">pull</span>(performer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;">str_subset</span>(<span class="st" style="color: #20794D;">"^Britney"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;">unique</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Britney Spears"                              
[2] "Britney Spears &amp; Iggy Azalea"                
[3] "Britney Spears Featuring G-Eazy"             
[4] "Britney Spears Featuring Madonna"            
[5] "Britney Spears Featuring Tinashe"            
[6] "Britney Spears Featuring Nicki Minaj &amp; Ke$ha"</code></pre>
</div>
</div>
<p>Regular expressions are one of those things you‚Äôll slowly pick up as you go along, and although they can be a huuuuuuge headache to learn, the reward is worth the effort.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>In my mental list of ‚Äústuff I hatelove in data science‚Äù, git and regexes are tied for first place</p>
</div></div></section>
<section id="creating-the-britney-data" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="creating-the-britney-data">Creating the Britney data</h3>
<p>Okay so now we‚Äôre in a position to filter the <code>billboard</code> data, keeping only the rows that correspond to Britney songs. Most people in our slack group have taken an introductory class before, so you‚Äôll be expecting that <code>dplyr::filter()</code> is the tool we need. The kind of filtering you‚Äôve seen before looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">britney <span class="ot" style="color: #003B4F;">&lt;-</span> billboard <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;">filter</span>(performer <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Britney Spears"</span>)</span></code></pre></div>
</div>
<p>However, this doesn‚Äôt work the way we want. The bit of code that reads <code>performer == "Britney Spears"</code> is a logical expression (i.e., a code snippet that only returns <code>TRUE</code> and <code>FALSE</code> values) that will only detect <em>exact</em> matches. It‚Äôs too literal for our purposes. We can‚Äôt use the <code>==</code> operator to detect our regular expression either: that will only detect cases where the performer is literally listed as ‚Äú^Britney‚Äù. What we actually want is something that works <em>like</em> the <code>==</code> test, but uses a regular expression to determine if it‚Äôs a match or not.</p>
<p>That‚Äôs where the <code>str_detect()</code> function from the stringr package is really handy. Instead of using <code>performer == "Britney Spears"</code> to detect exact matches, we‚Äôll use <code>str_detect(performer, "^Britney")</code> to match using the regular expression:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">britney <span class="ot" style="color: #003B4F;">&lt;-</span> billboard <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">str_detect</span>(performer, <span class="st" style="color: #20794D;">"^Britney"</span>))</span></code></pre></div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>A confession. I didn‚Äôt technically need to use a regex here, because stringr has a handy <code>str_starts()</code> function. But half the point of our slack group is to accidentally-on-purpose reveal new tools and also I forgot that <code>str_starts()</code> exists so‚Ä¶ regex it is</p>
</div></div><p>This version works the way we want it to, but it‚Äôs usually a good idea in practice to check that we haven‚Äôt made any mistakes. Perhaps I have forgotten what <code>str_detect()</code> actually does or I‚Äôve made an error in my use of <code>filter()</code>, for example. So let‚Äôs take a look at the <code>performer</code> column in the <code>britney</code> data and check that it contains the same six unique strings:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">britney <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">pull</span>(performer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">unique</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Britney Spears"                              
[2] "Britney Spears &amp; Iggy Azalea"                
[3] "Britney Spears Featuring G-Eazy"             
[4] "Britney Spears Featuring Madonna"            
[5] "Britney Spears Featuring Tinashe"            
[6] "Britney Spears Featuring Nicki Minaj &amp; Ke$ha"</code></pre>
</div>
</div>
<p>That‚Äôs reassuring. So let‚Äôs take a quick peek at the results of our data wrangling:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">glimpse</span>(britney)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 468
Columns: 10
$ url                    &lt;chr&gt; "http://www.billboard.com/charts/hot-100/2000-0‚Ä¶
$ week_id                &lt;chr&gt; "4/22/2000", "10/24/2009", "12/20/2008", "12/2/‚Ä¶
$ week_position          &lt;dbl&gt; 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, 26, 62, 65‚Ä¶
$ song                   &lt;chr&gt; "Oops!...I Did It Again", "3", "Circus", "Stron‚Ä¶
$ performer              &lt;chr&gt; "Britney Spears", "Britney Spears", "Britney Sp‚Ä¶
$ song_id                &lt;chr&gt; "Oops!...I Did It AgainBritney Spears", "3Britn‚Ä¶
$ instance               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,‚Ä¶
$ previous_week_position &lt;dbl&gt; NA, NA, NA, NA, NA, 45, NA, NA, NA, NA, 27, NA,‚Ä¶
$ peak_position          &lt;dbl&gt; 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, 26, 62, 65‚Ä¶
$ weeks_on_chart         &lt;dbl&gt; 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1,‚Ä¶</code></pre>
</div>
</div>
<p>That looks good to me‚Ä¶</p>
</section>
<section id="fixing-the-dates" class="level3">
<h3 class="anchored" data-anchor-id="fixing-the-dates">Fixing the dates</h3>
<p>‚Ä¶or does it? Looking at the <code>week_id</code> column is enough to make any data analyst sigh in mild irritation. This column encodes the date, but the first two entries are <code>"4/22/2000"</code> and <code>"10/24/2009"</code>. They are encoded in a ‚Äúmonth/day/year‚Äù format. Nobody on this planet except Americans writes dates this way. Most countries use ‚Äúday/month/year‚Äù as their standard way of writing dates, and most programming style guides strongly recommend ‚Äúyear/month/day‚Äù (there are good reasons for this, mostly to do with sorting chronologically). Worse yet, it‚Äôs just a character string. R doesn‚Äôt know that this column corresponds to a date, and unlike Excel it is smart enough not to try. Trying to guess what is and is not a date is notoriously difficult, so R makes that <em>your</em> job as the data analyst. Thankfully, the <a href="https://lubridate.tidyverse.org/">lubridate</a> package exists to make it a little bit easier. In this case, where we have data in month/day/year format, the <code>lubridate::mdy()</code> function will do the conversion for us. You‚Äôll be completely unsurprised to learn that there are <code>lubridate::dmy()</code> and <code>lubridate::ymd()</code> functions that handle other kinds of date formats.</p>
<p>So let‚Äôs do this. I‚Äôll use the <code>dplyr::mutate()</code> function to modify the <code>britney</code> data, like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">britney <span class="ot" style="color: #003B4F;">&lt;-</span> britney <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">week_id =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mdy</span>(week_id))</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;">glimpse</span>(britney)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 468
Columns: 10
$ url                    &lt;chr&gt; "http://www.billboard.com/charts/hot-100/2000-0‚Ä¶
$ week_id                &lt;date&gt; 2000-04-22, 2009-10-24, 2008-12-20, 2000-12-02‚Ä¶
$ week_position          &lt;dbl&gt; 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, 26, 62, 65‚Ä¶
$ song                   &lt;chr&gt; "Oops!...I Did It Again", "3", "Circus", "Stron‚Ä¶
$ performer              &lt;chr&gt; "Britney Spears", "Britney Spears", "Britney Sp‚Ä¶
$ song_id                &lt;chr&gt; "Oops!...I Did It AgainBritney Spears", "3Britn‚Ä¶
$ instance               &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,‚Ä¶
$ previous_week_position &lt;dbl&gt; NA, NA, NA, NA, NA, 45, NA, NA, NA, NA, 27, NA,‚Ä¶
$ peak_position          &lt;dbl&gt; 67, 1, 3, 70, 70, 21, 17, 29, 76, 1, 26, 62, 65‚Ä¶
$ weeks_on_chart         &lt;dbl&gt; 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1,‚Ä¶</code></pre>
</div>
</div>
<p>Much better!</p>
</section>
</section>
<section id="visualising-a-queen" class="level2">
<h2 class="anchored" data-anchor-id="visualising-a-queen">Visualising a queen</h2>
<p>I‚Äôm now at the point that I have a <code>britney</code> data set I can visualise. However, being the queen she is, Britney has quite a few songs that appear in the Billboard Top 100, so the first thing I‚Äôll do is specify a few favourites that we‚Äôll highlight in the plots:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">highlights <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Work B**ch!"</span>, <span class="st" style="color: #20794D;">"...Baby One More Time"</span>, <span class="st" style="color: #20794D;">"Toxic"</span>)</span></code></pre></div>
</div>
<p>Most people in our slack will probably have encountered the ggplot2 package before, and at least have some experience in creating data visualisations using it. So we might write some code like this, which draws a plot showing the date on the horizontal axis (the mapping <code>x = week_id</code>) and the position of the song on the vertical axis (represented by the mapping <code>y = week_position</code>). We‚Äôll also map the colour to the song by setting <code>colour = song</code>. Then we‚Äôll add some points and lines:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;">ggplot</span>(</span>
<span id="cb33-2">  <span class="at" style="color: #657422;">data =</span> britney,</span>
<span id="cb33-3">  <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb33-4">    <span class="at" style="color: #657422;">x =</span> week_id,</span>
<span id="cb33-5">    <span class="at" style="color: #657422;">y =</span> week_position,</span>
<span id="cb33-6">    <span class="at" style="color: #657422;">colour =</span> song</span>
<span id="cb33-7">  )</span>
<span id="cb33-8">) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb33-9">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb33-10">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/index_files/figure-html/britney-chart-positions-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The reason I‚Äôve included <code>show.legend = FALSE</code> here is that there are quite a few different songs in the data, and if they were all added to a legend it wouldn‚Äôt leave any room for the data!</p>
<p>We can improve on this in a couple of ways. First up, let‚Äôs use <code>scale_y_reverse()</code> to flip the y-axis. That way, a top ranked song appears at the top, and a 100th ranked song appears at the bottom:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">britney <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb34-3">    <span class="at" style="color: #657422;">x =</span> week_id, </span>
<span id="cb34-4">    <span class="at" style="color: #657422;">y =</span> week_position, </span>
<span id="cb34-5">    <span class="at" style="color: #657422;">colour =</span> song</span>
<span id="cb34-6">  )) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb34-7">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb34-8">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb34-9">  <span class="fu" style="color: #4758AB;">scale_y_reverse</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/index_files/figure-html/britney-chart-positions-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Notice that I‚Äôve switched to using the pipe here. I take the <code>britney</code> data, pipe it with <code>%&gt;%</code> to the <code>ggplot()</code> function where I set up the mapping, and then add things to the plot with <code>+</code>. It‚Äôs a matter of personal style though. Other people write their code differently!</p>
<p>Okay, it‚Äôs time to do something about the lack of labels. My real interest here is in the three songs I listed in the <code>highlights</code> so I‚Äôm going to use the <a href="https://yutannihilation.github.io/gghighlight/">gghighlight</a> package, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">britney <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb35-3">    <span class="at" style="color: #657422;">x =</span> week_id, </span>
<span id="cb35-4">    <span class="at" style="color: #657422;">y =</span> week_position, </span>
<span id="cb35-5">    <span class="at" style="color: #657422;">colour =</span> song</span>
<span id="cb35-6">  )) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb35-7">  <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb35-8">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb35-9">  <span class="fu" style="color: #4758AB;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb35-10">  gghighlight<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gghighlight</span>(song <span class="sc" style="color: #5E5E5E;">%in%</span> highlights)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Tried to calculate with group_by(), but the calculation failed.
Falling back to ungrouped filter operation...
Tried to calculate with group_by(), but the calculation failed.
Falling back to ungrouped filter operation...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>label_key: song</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/index_files/figure-html/britney-chart-positions-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>When the data are plotted like this, you get a strong sense of the chronology of Britney‚Äôs career, but the downside is that you can‚Äôt easily see how the chart performance of ‚Äú‚Ä¶Baby One More Time‚Äù compares to the performance of ‚ÄúToxic‚Äù and ‚ÄúWork B**ch!‚Äú. To give a better sense of that, it‚Äôs better to plot <code>weeks_on_chart</code> on the horizontal axis:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">britney <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb38-3">    <span class="at" style="color: #657422;">x =</span> weeks_on_chart, </span>
<span id="cb38-4">    <span class="at" style="color: #657422;">y =</span> week_position, </span>
<span id="cb38-5">    <span class="at" style="color: #657422;">group =</span> song,</span>
<span id="cb38-6">    <span class="at" style="color: #657422;">colour =</span> song</span>
<span id="cb38-7">  )) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb38-8">  <span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb38-9">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb38-10">  <span class="fu" style="color: #4758AB;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb38-11">  gghighlight<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gghighlight</span>(song <span class="sc" style="color: #5E5E5E;">%in%</span> highlights)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Tried to calculate with group_by(), but the calculation failed.
Falling back to ungrouped filter operation...
Tried to calculate with group_by(), but the calculation failed.
Falling back to ungrouped filter operation...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>label_key: song</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/index_files/figure-html/britney-chart-positions-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Shown this way, you get a really strong sense of just how much of an impact ‚Äú‚Ä¶Baby One More Time‚Äù had. It wasn‚Äôt just Britney‚Äôs first hit, it was also her biggest. It‚Äôs quite an outlier on the chart!</p>
<p>If we‚Äôre doing exploratory data analysis, and the only goal is to have a picture to show a colleague, that‚Äôs good enough. However, if we wanted to share it more widely, you‚Äôd probably want to spend a little more time fiddling with the details, adding text, colour and other things that actually matter a lot in real life!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">britney <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb41-3">    <span class="at" style="color: #657422;">x =</span> weeks_on_chart, </span>
<span id="cb41-4">    <span class="at" style="color: #657422;">y =</span> week_position, </span>
<span id="cb41-5">    <span class="at" style="color: #657422;">group =</span> song,</span>
<span id="cb41-6">    <span class="at" style="color: #657422;">colour =</span> song</span>
<span id="cb41-7">  )) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb41-8">  <span class="fu" style="color: #4758AB;">geom_line</span>(<span class="at" style="color: #657422;">size =</span> <span class="fl" style="color: #AD0000;">1.5</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb41-9">  <span class="fu" style="color: #4758AB;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb41-10">  <span class="fu" style="color: #4758AB;">scale_color_brewer</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"Dark2"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb41-11">  gghighlight<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gghighlight</span>(song <span class="sc" style="color: #5E5E5E;">%in%</span> highlights, </span>
<span id="cb41-12">    <span class="at" style="color: #657422;">unhighlighted_params =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">size =</span> .<span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb41-13">  <span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb41-14">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb41-15">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Britney Spears' first hit was also her biggest"</span>,</span>
<span id="cb41-16">    <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Chart performance of Britney Spears' songs"</span>,</span>
<span id="cb41-17">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Weeks in Billboard Top 100"</span>,</span>
<span id="cb41-18">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Chart Position"</span></span>
<span id="cb41-19">  )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Tried to calculate with group_by(), but the calculation failed.
Falling back to ungrouped filter operation...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>label_key: song</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/index_files/figure-html/britney-chart-positions-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>If I were less lazy I would also make sure that the chart includes a reference to the original data source, and something that credits myself as the creator of the plot. That‚Äôs generally good etiquette if you‚Äôre planning on sharing the image on the interwebs. There‚Äôs quite a lot you could do to tinker with the plot to get it to publication quality, but this is good enough for my goals today!</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/britney.jpg" class="img-fluid figure-img" width="512"></p>
<p></p><figcaption class="figure-caption">Her Royal Highness Britney Spears, performing in Las Vegas, January 2014. Figure from <a href="https://commons.wikimedia.org/wiki/File:Britney_Spears_performing,_Las_Vegas,_January_29,_2014.jpg">wikimedia commons</a>, released under a CC-BY-2.0 licence by Rhys Adams</figcaption><p></p>
</figure>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {Visualising the Hits of {Queen} {Britney}},
  date = {2021-09-14},
  url = {https://blog.djnavarro.net/tidy-tuesday-billboard},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúVisualising the Hits of Queen
Britney.‚Äù</span> September 14, 2021. <a href="https://blog.djnavarro.net/tidy-tuesday-billboard">https://blog.djnavarro.net/tidy-tuesday-billboard</a>.
</div></div></section></div> ]]></description>
  <category>Tidy Tuesday</category>
  <guid>https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/index.html</guid>
  <pubDate>Mon, 13 Sep 2021 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-09-14_tidy-tuesday-billboard/britney.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Art, jasmines, and the water colours</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-09-07_water-colours/index.html</link>
  <description><![CDATA[ 




<!--------------- setup ----------------->
<!--------------- post ----------------->
<section id="prelude" class="level2">
<h2 class="anchored" data-anchor-id="prelude">Prelude</h2>
<p>In recent weeks I‚Äôve been posting generative art from the <a href="https://art.djnavarro.net/gallery/water-colours/">Water Colours</a> series on twitter. The series has been popular, prompting requests that I sell prints, mint NFTs, or write a tutorial showing how they are made. For personal reasons I didn‚Äôt want to commercialise this series. Instead, I chose to make the pieces freely available under a CC0 public domain licence and asked people to donate to a <a href="https://au.gofundme.com/f/data-science-art-to-support-a-womens-refuge">gofundme</a> I set up for a charitable organisation I care about (the <a href="https://www.lousplace.com.au/">Lou‚Äôs Place</a> women‚Äôs refuge here in Sydney). I‚Äôm not going to discuss the personal story behind this series, but it does matter. As I‚Äôve mentioned <a href="../../posts/2021-07-08_generative-art-in-r/">previously</a>, the art I make is inherently tied to moods. It is emotional in nature. In hindsight it is easy enough to describe how the system is implemented but this perspective is misleading. Although a clean and unemotional description of the code is useful for explanatory purposes, the actual <em>process</em> of creating the system is deeply tied to my life, my history, and my subjective experience. Those details are inextricably bound to the system. A friend described it better than I ever could:</p>
<blockquote class="blockquote">
<p>The computer doesn‚Äôt make this art any more than a camera makes a photograph; art is always intimate (<a href="https://twitter.com/justanotheramy/status/1432916731794579460">Amy Patterson</a>)</p>
</blockquote>
<p>In this post I‚Äôll describe the mechanistic processes involved in creating these pieces, but this is woefully inadequate as a description of the artistic process as a whole. The optical mechanics of a camera do not circumscribe the work of a skilled photographer. So it goes with generative art. The code describes the mechanics; it does not describe the art. There is a deeply personal story underneath these pieces (one that I won‚Äôt tell here), and I would no more mint an NFT from that story than I would sell a piece of my soul to a collector.</p>
</section>
<section id="the-water-colours-repository" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-water-colours-repository">The water colours repository</h2>
<section id="why-use-version-control-here" class="level3">
<h3 class="anchored" data-anchor-id="why-use-version-control-here">Why use version control here?</h3>
<p>When I started making generative art I didn‚Äôt think much about archiving my art or keeping it organised. I liked making pretty things, and that was as far as my thought process went. I didn‚Äôt place the code under version control, and I stored everything in my Dropbox folder. There‚Äôs nothing wrong with that: some things don‚Äôt belong on GitHub. During the development phase of any art project that‚Äôs still what I do, and I‚Äôm perfectly happy with it.</p>
<p>Things become a little trickier when you want to share the art. My <a href="https://art.djnavarro.net">art website</a> is hosted on GitHub pages, and so my initial approach was to keep the art in the website repository. <em>Huuuuge mistake.</em> Sometimes the image files can be quite large and sometimes a series contains a large number of images. By the time I‚Äôd reached 40+ series, Hugo took a very long time to build the site (several minutes), and GitHub took even longer to deploy it (over half an hour).</p>
<p>Eventually I decided it made more sense to have one repository per series. Each one uses the ‚Äúseries-‚Äù prefix to remind me it‚Äôs an art repo. I don‚Äôt use these repositories during development: they exist solely to snapshot the release. For example, the <a href="https://github.com/djnavarro/series-water-colours">series-water-colours</a> repository isn‚Äôt going to be updated regularly, it‚Äôs really just an archive combined with a ‚Äúdocs‚Äù folder that is used to host a minimal GitHub Pages site that makes the images public. It‚Äôs convenient for my purposes because my art website doesn‚Äôt have to host any of the images: all it does is hotlink to the images that are exposed via the series repo.</p>
<p>It may seem surprising that I‚Äôve used GitHub for this. Image files aren‚Äôt exactly well suited to version control, but it‚Äôs not like they‚Äôre going to be updated. Plus, there are a lot of advantages. I can explicitly include licencing information in the repository, I can release source code (when I want to), and I can include a readme file for anyone who wants to use it.</p>
</section>
<section id="the-manifest-file" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-manifest-file">The manifest file</h3>
<p>One nice feature of doing things this way is that it has encouraged me to include a <a href="%22https://djnavarro.net/series-water-colours/manifest.csv%22">manifest file</a>. Because the image files belong to a completely different repository to the website, I need a way to automatically inspect the image repository and construct the links I need (because I‚Äôm waaaaaay too lazy to add the links by hand). That‚Äôs the primary function of the manifest. The manifest.csv file is a plain csv file with one row per image, and one column for each piece of metadata I want to retain about the images. It might seem like organisational overkill to be this precise about the art, but I‚Äôm starting to realise that if I don‚Äôt have a proper system in place I‚Äôll forget minor details like <em>‚Äúwhat the piece is called‚Äù</em> or <em>‚Äúwhen I made it‚Äù</em>. That seems bad :-)</p>
<div class="cell" data-hash="index_cache/html/water-colour-manifest_12dd8f4f937e4ccdb55017b95da48001">

</div>
<p>I can use <code>readr::read_csv()</code> to download the manifest and do a little data wrangling to organise it into a format that is handy to me right now:</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>The data wrangling code is <a href="https://github.com/djnavarro/quarto-blog/blob/master/posts/2021-09-07_water-colours/index.qmd#L71-L85">here</a></p>
</div></div><div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">manifest</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 √ó 9
   series      sys_id img_id short_n‚Ä¶¬π format long_‚Ä¶¬≤ date       path_‚Ä¶¬≥ path_‚Ä¶‚Å¥
   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;   &lt;date&gt;     &lt;chr&gt;   &lt;chr&gt;  
 1 watercolour sys02  img34  teacup-o‚Ä¶ jpg    Ocean ‚Ä¶ 2021-07-31 https:‚Ä¶ https:‚Ä¶
 2 watercolour sys02  img31  incursio‚Ä¶ jpg    Incurs‚Ä¶ 2021-08-14 https:‚Ä¶ https:‚Ä¶
 3 watercolour sys02  img32  percolate jpg    Percol‚Ä¶ 2021-08-21 https:‚Ä¶ https:‚Ä¶
 4 watercolour sys02  img37  gentle-d‚Ä¶ jpg    Gentle‚Ä¶ 2021-08-21 https:‚Ä¶ https:‚Ä¶
 5 watercolour sys02  img41  stormy-s‚Ä¶ jpg    Stormy‚Ä¶ 2021-08-22 https:‚Ä¶ https:‚Ä¶
 6 watercolour sys02  img42  turmeric  jpg    Turmer‚Ä¶ 2021-08-24 https:‚Ä¶ https:‚Ä¶
 7 watercolour sys02  img43  torn-and‚Ä¶ jpg    Torn a‚Ä¶ 2021-08-24 https:‚Ä¶ https:‚Ä¶
 8 watercolour sys02  img47  inferno   jpg    Sevent‚Ä¶ 2021-08-27 https:‚Ä¶ https:‚Ä¶
 9 watercolour sys02  img48  storm-ce‚Ä¶ jpg    Storm ‚Ä¶ 2021-08-27 https:‚Ä¶ https:‚Ä¶
10 watercolour sys02  img49  tonal-ea‚Ä¶ jpg    Tonal ‚Ä¶ 2021-08-29 https:‚Ä¶ https:‚Ä¶
11 watercolour sys02  img50  cold-fro‚Ä¶ jpg    Cold F‚Ä¶ 2021-08-29 https:‚Ä¶ https:‚Ä¶
12 watercolour sys02  img51  kintsugi‚Ä¶ jpg    Kintsu‚Ä¶ 2021-08-29 https:‚Ä¶ https:‚Ä¶
13 watercolour sys02  img53  departure jpg    Depart‚Ä¶ 2021-08-29 https:‚Ä¶ https:‚Ä¶
14 watercolour sys02  img54  echo      jpg    Echo    2021-08-30 https:‚Ä¶ https:‚Ä¶
15 watercolour sys02  img57  portal    jpg    Portal  2021-08-31 https:‚Ä¶ https:‚Ä¶
16 watercolour sys02  img60  salt-sto‚Ä¶ jpg    Gods o‚Ä¶ 2021-08-31 https:‚Ä¶ https:‚Ä¶
17 watercolour sys02  img61  amanecer‚Ä¶ jpg    El √ölt‚Ä¶ 2021-09-01 https:‚Ä¶ https:‚Ä¶
18 watercolour sys02  img65  plume     jpg    Plume   2021-09-02 https:‚Ä¶ https:‚Ä¶
19 watercolour sys02  img67  woodland‚Ä¶ jpg    Woodla‚Ä¶ 2021-09-02 https:‚Ä¶ https:‚Ä¶
20 watercolour sys02  img68  below-th‚Ä¶ jpg    Below ‚Ä¶ 2021-09-03 https:‚Ä¶ https:‚Ä¶
# ‚Ä¶ with abbreviated variable names ¬π‚Äãshort_name, ¬≤‚Äãlong_name, ¬≥‚Äãpath_2000,
#   ‚Å¥‚Äãpath_500</code></pre>
</div>
</div>
</section>
<section id="previewing-the-artwork" class="level3">
<h3 class="anchored" data-anchor-id="previewing-the-artwork">Previewing the artwork</h3>
<p>More to the point, the <code>manifest</code> data frame is nicely suited for use with the <a href="https://bs4cards.djnavarro.net/">bs4cards</a> package, so I can display some of the pieces in a neat and tidy thumbnail grid. Here are the first eight pieces from the series, arranged by date of creation:</p>
<div class="cell" data-hash="index_cache/html/water-colour-cards_f92e1b6fa1710ddd3daea13365b68307">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">manifest[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">8</span>, ] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">  bs4cards<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">cards</span>(</span>
<span id="cb3-3">    <span class="at" style="color: #657422;">image =</span> path_500,</span>
<span id="cb3-4">    <span class="at" style="color: #657422;">link =</span> path_2000,</span>
<span id="cb3-5">    <span class="at" style="color: #657422;">title =</span> long_name,</span>
<span id="cb3-6">    <span class="at" style="color: #657422;">spacing =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb3-7">    <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb3-8">  )  </span></code></pre></div>
<div class="cell-output-display">
<div>
<div class="row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4" style="margin-left: -.4rem; margin-right: -.4rem; margin-top: 1rem; margin-bottom: 1rem; ">
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img34_teacup-ocean.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img34_teacup-ocean.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img34_teacup-ocean.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Ocean in a Teacup</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img31_incursions.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img31_incursions.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img31_incursions.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Incursions</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img32_percolate.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img32_percolate.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img32_percolate.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Percolate</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img37_gentle-descent.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img37_gentle-descent.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img37_gentle-descent.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Gentle Descent</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img41_stormy-seas.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img41_stormy-seas.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img41_stormy-seas.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Stormy Seas</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img42_turmeric.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img42_turmeric.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img42_turmeric.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Turmeric Against Grey Tuesday</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img43_torn-and-frayed.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img43_torn-and-frayed.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img43_torn-and-frayed.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Torn and Frayed</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img47_inferno.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img47_inferno.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img47_inferno.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Seventh Circle</h5>
</a>
</div>
</div>
</div>
</div>
</div>
</div>
<p>Each thumbnail image links to a medium resolution (2000 x 2000 pixels) jpg version of the corresponding piece, if you‚Äôd like to see the images in a little more detail.</p>
</section>
</section>
<section id="dependencies" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="dependencies">Dependencies</h2>
<p>In the remainder of this post I‚Äôll walk you through the process of creating pieces ‚Äúin the style of‚Äù the water colours series. If you really want to, you can take a look at the <a href="https://github.com/djnavarro/series-water-colours/blob/master/source/watercolours_02.R">actual source</a>, but it may not be very helpful: the code is little opaque, poorly structured, and delegates a lot of the work to the <a href="https://github.com/cmarcum/halftoner">halftoner</a> and <a href="https://jasmines.djnavarro.net/">jasmines</a> packages, neither of which is on CRAN. To make it a little easier on you, I‚Äôll build a new system in this post that adopts the same core ideas.</p>
<p>In this post I‚Äôll assume you‚Äôre already familiar with data wrangling and visualisation with tidyverse tools. This is the subset of <a href="https://www.tidyverse.org/">tidyverse</a> packages that I have attached, and the code that follows relies on all these in some fashion:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(magrittr)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(stringr)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>The R environment is specified formally in the <a href="https://github.com/djnavarro/quarto-blog/tree/master/posts/2021-09-07_water-colours/renv.lock">lockfile</a>. It‚Äôs a story for another day, but for reproducibility purposes I have a separate <a href="https://rstudio.github.io/renv/">renv configuration</a> for every post</p>
</div></div><p>In addition to tidyverse and base R functions, I‚Äôll use a few other packages as well. The <a href="https://docs.ropensci.org/magick/">magick</a>, <a href="https://github.com/rspatial/raster/">raster</a>, <a href="https://rprojroot.r-lib.org/">rprojroot</a>, <a href="https://fs.r-lib.org/">fs</a>, and <a href="https://ambient.data-imaginist.com/">ambient</a> packages are all used in making the art. Because functions from those packages may not be as familiar to everyone, I‚Äôll namespace the calls to them in the same way I did with <code>bs4cards::cards()</code> previously. Hopefully that will make it easier to see which functions belong to one of those packages.</p>
</section>
<section id="art-from-image-processing" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="art-from-image-processing">Art from image processing</h2>
<section id="finding-the-image-file" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="finding-the-image-file">Finding the image file</h3>
<p>As in life, the place to start is knowing where you are.</p>
<p>This post is part of my blog, and I‚Äôll need to make use of an image file called <code>"jasmine.jpg"</code> stored alongside my R markdown. First, I can use <a href="https://rprojroot.r-lib.org/">rprojroot</a> to find out where my blog is stored. I‚Äôll do that by searching for a <code>"_quarto.yml"</code> file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">blog <span class="ot" style="color: #003B4F;">&lt;-</span> rprojroot<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">find_root</span>(<span class="st" style="color: #20794D;">"_quarto.yml"</span>)</span>
<span id="cb5-2">blog</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/danielle/GitHub/sites/quarto-blog"</code></pre>
</div>
</div>
<p>I suspect that most people reading this would be more familiar with the <a href="https://here.r-lib.org/">here</a> package that provides a simplified interface to rprojroot and will automatically detect the .Rproj or .here file associated with your project. In fact, because the <code>here::here()</code> function is so convenient, it‚Äôs usually my preferred method for solving this problem. Sometimes, however, the additional flexibility provided by rprojroot is very useful. Some of my projects are comprised of partially independent sub-projects, each with a distinct root directory. That happens sometimes when blogging: there are contexts in which you might want to consider ‚Äúthe blog‚Äù to be the project, but other contexts in which ‚Äúthe post‚Äù might be the project. If you‚Äôre not careful this can lead to chaos (e.g., RStudio projects nested inside other RStudio projects), and I‚Äôve found rprojroot very helpful in avoiding ambiguity in these situations.</p>
<p>Having chosen ‚Äúthe blog‚Äù as the root folder, the next step in orientation is to find the post folder. Because this is a <a href="https://rstudio.github.io/distill/">distill</a> blog, all my posts are stored in the <code>_posts</code> folder, and I‚Äôve adopted a consistent <a href="https://slides.djnavarro.net/project-structure/">naming</a> <a href="https://speakerdeck.com/jennybc/how-to-name-files">convention</a> for organising the post folders. Every name begins with the post date in year-month-day format, followed by a human-readable ‚Äúslug‚Äù:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">post <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(params<span class="sc" style="color: #5E5E5E;">$</span>date, params<span class="sc" style="color: #5E5E5E;">$</span>slug, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"_"</span>)</span>
<span id="cb7-2">post</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2021-09-07_water-colours"</code></pre>
</div>
</div>
<p>This allows me to construct the path to the image file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">file <span class="ot" style="color: #003B4F;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">path</span>(blog, <span class="st" style="color: #20794D;">"posts"</span>, post, <span class="st" style="color: #20794D;">"jasmine.jpg"</span>)</span>
<span id="cb9-2">file</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/danielle/GitHub/sites/quarto-blog/posts/2021-09-07_water-colours/jasmine.jpg</code></pre>
</div>
</div>
<p>Here‚Äôs the image:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/jasmine.jpg" class="img-fluid" width="960"></p>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>The photo has an emotional resonance to me: it dates back to 2011 and appeared on the cover of <a href="https://learningstatisticswithr.com">Learning Statistics with R</a>. Although 10 years separate the <em>Water Colours</em> series from the text and the photo, the two are linked by a shared connection to events from a decade ago</p>
</div></div></section>
<section id="importing-the-image" class="level3">
<h3 class="anchored" data-anchor-id="importing-the-image">Importing the image</h3>
<p>Our next step is to import the image into R at a suitable resolution. The original image size is 1000x600 pixels, which is a little more than we need. Here‚Äôs a simple <code>import_image()</code> function that does this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">import_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(path, width, height) {</span>
<span id="cb11-2">  geometry <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(width, <span class="st" style="color: #20794D;">"x"</span>, height) <span class="co" style="color: #5E5E5E;"># e.g., "100x60"</span></span>
<span id="cb11-3">  path <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-4">    magick<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">image_read</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-5">    magick<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">image_scale</span>(geometry)</span>
<span id="cb11-6">}</span></code></pre></div>
</div>
<p>Internally, the work is being done by the fabulous <a href="https://docs.ropensci.org/magick/">magick</a> package that provides bindings to the <a href="https://imagemagick.org/">ImageMagick</a> library. In truth, it‚Äôs the ImageMagick library that is doing most the work here. R doesn‚Äôt load the complete image, it lets ImageMagick take care of that. Generally that‚Äôs a good thing for performance reasons (you don‚Äôt want to load large images into memory if you can avoid it), but in this case we‚Äôre going to work with the raw image data inside R.</p>
<p>This brings us to the next task‚Ä¶</p>
</section>
<section id="converting-the-image-to-data" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="converting-the-image-to-data">Converting the image to data</h3>
<p>Converting the image into a data structure we can use is a two step process. First, we create a matrix that represents the image in a format similar to the image itself. That‚Äôs the job of the <code>construct_matrix()</code> function below. It takes the <code>image</code> as input, and first coerces it to a raster object and then to a regular matrix: in the code below, the matrix is named <code>mat</code>, and the pixel on the i-th row and j-th column of the image is represented by the contents of <code>mat[i, j]</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">construct_matrix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(image) {</span>
<span id="cb12-2">  </span>
<span id="cb12-3">  <span class="co" style="color: #5E5E5E;"># read matrix</span></span>
<span id="cb12-4">  mat <span class="ot" style="color: #003B4F;">&lt;-</span> image <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;">as.raster</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-6">    <span class="fu" style="color: #4758AB;">as.matrix</span>()</span>
<span id="cb12-7">  </span>
<span id="cb12-8">  <span class="co" style="color: #5E5E5E;"># use the row and column names to represent co-ordinates</span></span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;">rownames</span>(mat) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"y"</span>, <span class="fu" style="color: #4758AB;">nrow</span>(mat)<span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># &lt;- flip y</span></span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;">colnames</span>(mat) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="fu" style="color: #4758AB;">ncol</span>(mat))</span>
<span id="cb12-11">  </span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;">return</span>(mat)</span>
<span id="cb12-13">}</span></code></pre></div>
</div>
<p>A little care is needed when interpreting the rows of this matrix. When we think about graphs, the values on y-axis increase as we move our eyes upwards from the bottom, so our mental model has the small numbers at the bottom and the big numbers at the top. But that‚Äôs not the only mental model in play here. When we read a matrix or a table we don‚Äôt <em>look</em> at it, we <em>read</em> it - and we read from top to bottom. A numbered list, for example, has the smallest numbers at the top, and the numbers get bigger as we read down the list. Both of those mental models are sensible, but it‚Äôs hard to switch between them.</p>
<p>The tricky part here is that the raw image is encoded in ‚Äúreading format‚Äù. It‚Äôs supposed to be read like a table or a list, so the indices increase as we read down the image. The image data returned by <code>construct_matrix()</code> is organised this format. However, when we draw pictures with ggplot2 later on, we‚Äôre going to need to switch to a ‚Äúgraph format‚Äù convention with the small numbers at the bottom. That‚Äôs the reason why the code above flips the order of the row names. Our next task will be to convert this (reading-formatted) matrix into a tidy tibble, and those row and column names will become become our (graph-formatted) x- and y-coordinates, so the row names need to be labelled in reverse order.</p>
<p>To transform the image matrix into a tidy tibble, I‚Äôve written a handy <code>construct_tibble()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">construct_tibble <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(mat) {</span>
<span id="cb13-2">  </span>
<span id="cb13-3">  <span class="co" style="color: #5E5E5E;"># convert to tibble</span></span>
<span id="cb13-4">  tbl <span class="ot" style="color: #003B4F;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-6">    <span class="fu" style="color: #4758AB;">rownames_to_column</span>(<span class="st" style="color: #20794D;">"y"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-7">    <span class="fu" style="color: #4758AB;">as_tibble</span>() </span>
<span id="cb13-8">  </span>
<span id="cb13-9">  <span class="co" style="color: #5E5E5E;"># reshape</span></span>
<span id="cb13-10">  tbl <span class="ot" style="color: #003B4F;">&lt;-</span> tbl <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-11">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb13-12">      <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"x"</span>),</span>
<span id="cb13-13">      <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"x"</span>,</span>
<span id="cb13-14">      <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"shade"</span></span>
<span id="cb13-15">    ) </span>
<span id="cb13-16">  </span>
<span id="cb13-17">  <span class="co" style="color: #5E5E5E;"># tidy</span></span>
<span id="cb13-18">  tbl <span class="ot" style="color: #003B4F;">&lt;-</span> tbl <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-19">    <span class="fu" style="color: #4758AB;">arrange</span>(x, y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-20">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb13-21">      <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">"x"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(),</span>
<span id="cb13-22">      <span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">"y"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(),</span>
<span id="cb13-23">      <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">row_number</span>()</span>
<span id="cb13-24">    )</span>
<span id="cb13-25">  </span>
<span id="cb13-26">  <span class="fu" style="color: #4758AB;">return</span>(tbl)</span>
<span id="cb13-27">}</span></code></pre></div>
</div>
<p>The code has the following strucure:</p>
<ul>
<li><p>The first part of this code coerces the matrix to a plain data frame, then uses <code>rownames_to_columns()</code> to extract the row names before coercing it to a tibble. This step is necessary because tibbles don‚Äôt have row names, and we need those row names: our end goal is to have a variable <code>y</code> to store those co-ordinate values.</p></li>
<li><p>The second part of the code uses <code>pivot_longer()</code> to capture all the other variables (currently named <code>x1</code>, <code>x2</code>, etc) and pull them down into a single column that specifies the <code>x</code> co-ordinate. At this stage, the <code>tbl</code> tibble contains three variables: an <code>x</code> value, a <code>y</code> value, and a <code>shade</code> that contains the hex code for a colour.</p></li>
<li><p>The last step is to tidy up the values. After <code>pivot_longer()</code> does its job, the <code>x</code> variable contains strings like <code>"x1"</code>, <code>"x2"</code>, etc, but we‚Äôd prefer them to be actual numbers like <code>1</code>, <code>2</code>, etc. The same is true for the <code>y</code> variable. To fix this, the last part of the code does a tiny bit of string manipulation using <code>str_remove_all()</code> to get rid of the unwanted prefixes, and then coerces the result to a number.</p></li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<p>The <code>names_prefix</code> argument to <code>pivot_longer()</code> can transform <code>x</code> without the third step, but I prefer the verbose form. I find it easier to read and it treats <code>x</code> and <code>y</code> the same</p>
</div></div><p>Taken together, the <code>import_image()</code>, <code>construct_matrix()</code>, and <code>construct_tibble()</code> functions provide us with everything we need to pull the data from the image file and wrangle it into a format that ggplot2 is expecting:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">jas <span class="ot" style="color: #003B4F;">&lt;-</span> file <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">import_image</span>(<span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">100</span>, <span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">60</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;">construct_matrix</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;">construct_tibble</span>()</span>
<span id="cb14-5"></span>
<span id="cb14-6">jas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6,000 √ó 4
       y     x shade        id
   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt;
 1     1     1 #838c70ff     1
 2    10     1 #3c3123ff     2
 3    11     1 #503d3dff     3
 4    12     1 #363126ff     4
 5    13     1 #443a30ff     5
 6    14     1 #8a6860ff     6
 7    15     1 #665859ff     7
 8    16     1 #5a5d51ff     8
 9    17     1 #535c4cff     9
10    18     1 #944b61ff    10
# ‚Ä¶ with 5,990 more rows</code></pre>
</div>
</div>
<p>A little unusually, the hex codes here are specified in RGBA format: the first two alphanumeric characters specify the hexadecimal code for the red level, the second two represent the green level (or ‚Äúchannel‚Äù), the third two are the blue channel, and the last two are the opacity level (the alpha channel). I‚Äôm going to ignore the alpha channel for this exercise though.</p>
<p>There‚Äôs one last thing to point out before turning to the fun art part. Notice that <code>jas</code> also contains an <code>id</code> column (added by the third part of the <code>construct_tibble()</code> function). It‚Äôs generally good practice to have an <code>id</code> column that uniquely identifies each row, and will turn out to be useful later when we need to join this data set with other data sets that we‚Äôll generate.</p>
</section>
<section id="art-from-data-visualisation" class="level3">
<h3 class="anchored" data-anchor-id="art-from-data-visualisation">Art from data visualisation</h3>
<p>Let the art begin!</p>
<p>The first step is to define a helper function <code>ggplot_themed()</code> that provides a template that we‚Äôll reuse in every plot. Mostly this involves preventing ggplot2 from doing things it wants to do. When we‚Äôre doing data visualisation it‚Äôs great that ggplot2 automatically provides things like ‚Äúlegends‚Äù, ‚Äúaxes‚Äù, and ‚Äúscales‚Äù to map from data to visual aesthetics, but from an artistic perspective they‚Äôre just clutter. I don‚Äôt want to manually strip that out every time I make a plot, so it makes sense to have a function that gets rid of all those things:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">ggplot_themed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data) {</span>
<span id="cb16-2">  data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-4">    <span class="fu" style="color: #4758AB;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb16-5">    <span class="fu" style="color: #4758AB;">scale_size_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb16-6">    <span class="fu" style="color: #4758AB;">scale_colour_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb16-7">    <span class="fu" style="color: #4758AB;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb16-8">    <span class="fu" style="color: #4758AB;">theme_void</span>() </span>
<span id="cb16-9">}</span></code></pre></div>
</div>
<p>This ‚Äútemplate function‚Äù allows us to start with a clean slate, and it makes our subsequent coding task easier. The <code>x</code> and <code>y</code> aesthetics are already specified, ggplot2 won‚Äôt try to ‚Äúinterpret‚Äù our colours and sizes for us, and it won‚Äôt mess with the aspect ratio. In a sense, this function turns off the autopilot: we‚Äôre flying this thing manually‚Ä¶</p>
<p>There are many ways to plot the <code>jas</code> data in ggplot2. The least imaginative possibility is <code>geom_tile()</code>, which produces a pixellated version of the jasmines photo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;">geom_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">fill =</span> shade)) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/jasmine-raster-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Of course, if you are like me you always forget to use the fill aesthetic. The muscle memory tells me to use the colour aesthetic, so I often end up drawing something where only the borders of the tiles are coloured:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;">geom_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> shade)) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/jasmine-raster-variant-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>It‚Äôs surprisingly pretty, and a cute demonstration of how good the visual system is at reconstructing images from low-quality input: remarkably, the jasmines are still perceptible despite the fact that most of the plot area is black. I didn‚Äôt end up pursuing this (yet!) but I think there‚Äôs a lot of artistic potential here. It might be worth playing with at a later date. In that sense generative art is a lot like any other kind of art (or, for that matter, science). It is as much about exploration and discovery as it is about technical prowess.</p>
<p>The path I did follow is based on <code>geom_point()</code>. Each pixel in the original image is plotted as a circular marker in the appropriate colour. Here‚Äôs the simplest version of this idea applied to the <code>jas</code> data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">colour =</span> shade)) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/jasmine-scatter-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>It‚Äôs simple, but I like it.</p>
</section>
<section id="extracting-the-colour-channels" class="level3">
<h3 class="anchored" data-anchor-id="extracting-the-colour-channels">Extracting the colour channels</h3>
<p>Up to this point we haven‚Äôt been manipulating the colours in any of the plots: the hex code in the <code>shade</code> variable is left intact. There‚Äôs no inherent reason we should limit ourselves to such boring visualisations. All we need to do is extract the different ‚Äúcolour channels‚Äù and start playing around.</p>
<p>It‚Äôs not too difficult to do this: base R provides the <code>col2rgb()</code> function that separates the hex code into red, green, blue channels, and represents each channel with integers between 0 and 255. It also provides the <code>rgb2hsv()</code> function that converts this RGB format into <a href="https://en.wikipedia.org/wiki/HSL_and_HSV">hue, saturation, and value</a> format, represented as numeric values between 0 and 1.</p>
<p>This technique is illustrated by the <code>extract_channels()</code> helper function shown below. It looks at the <code>shade</code> column in the data frame, and adds six new columns, one for each channel. I‚Äôm a sucker for variable names that are all the same length (often unwisely), and I‚Äôve named them <code>red</code>, <code>grn</code>, <code>blu</code>, <code>hue</code>, <code>sat</code>, and <code>val</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">extract_channels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(tbl) {</span>
<span id="cb20-2">  rgb <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>(tbl, <span class="fu" style="color: #4758AB;">col2rgb</span>(shade))</span>
<span id="cb20-3">  hsv <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rgb2hsv</span>(rgb)</span>
<span id="cb20-4">  tbl <span class="ot" style="color: #003B4F;">&lt;-</span> tbl <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb20-6">      <span class="at" style="color: #657422;">red =</span> rgb[<span class="dv" style="color: #AD0000;">1</span>, ],</span>
<span id="cb20-7">      <span class="at" style="color: #657422;">grn =</span> rgb[<span class="dv" style="color: #AD0000;">2</span>, ],</span>
<span id="cb20-8">      <span class="at" style="color: #657422;">blu =</span> rgb[<span class="dv" style="color: #AD0000;">3</span>, ],</span>
<span id="cb20-9">      <span class="at" style="color: #657422;">hue =</span> hsv[<span class="dv" style="color: #AD0000;">1</span>, ],</span>
<span id="cb20-10">      <span class="at" style="color: #657422;">sat =</span> hsv[<span class="dv" style="color: #AD0000;">2</span>, ],</span>
<span id="cb20-11">      <span class="at" style="color: #657422;">val =</span> hsv[<span class="dv" style="color: #AD0000;">3</span>, ]</span>
<span id="cb20-12">    )</span>
<span id="cb20-13">  <span class="fu" style="color: #4758AB;">return</span>(tbl)</span>
<span id="cb20-14">}</span></code></pre></div>
</div>
<p>Here‚Äôs what that looks like applied to the <code>jas</code> data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">jas <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract_channels</span>(jas)</span>
<span id="cb21-2">jas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6,000 √ó 10
       y     x shade        id   red   grn   blu    hue   sat   val
   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     1     1 #838c70ff     1   131   140   112 0.220  0.200 0.549
 2    10     1 #3c3123ff     2    60    49    35 0.0933 0.417 0.235
 3    11     1 #503d3dff     3    80    61    61 0      0.237 0.314
 4    12     1 #363126ff     4    54    49    38 0.115  0.296 0.212
 5    13     1 #443a30ff     5    68    58    48 0.0833 0.294 0.267
 6    14     1 #8a6860ff     6   138   104    96 0.0317 0.304 0.541
 7    15     1 #665859ff     7   102    88    89 0.988  0.137 0.4  
 8    16     1 #5a5d51ff     8    90    93    81 0.208  0.129 0.365
 9    17     1 #535c4cff     9    83    92    76 0.260  0.174 0.361
10    18     1 #944b61ff    10   148    75    97 0.950  0.493 0.580
# ‚Ä¶ with 5,990 more rows</code></pre>
</div>
</div>
<p>A whole new world of artistic possibilities has just emerged!</p>
</section>
<section id="art-from-channel-manipulation" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="art-from-channel-manipulation">Art from channel manipulation</h3>
<p>One way to use this representation is in <a href="https://en.wikipedia.org/wiki/Halftone">halftone images</a>. If you have a printer that contains only black ink, you can approximate shades of grey by using the size of each dot to represent how dark that pixel should be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">map_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb23-2">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">normalise</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">-</span>x, <span class="at" style="color: #657422;">to =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb23-3">}</span>
<span id="cb23-4"></span>
<span id="cb23-5">jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-6">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb23-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb23-8">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">map_size</span>(val)),</span>
<span id="cb23-9">    <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"black"</span>, </span>
<span id="cb23-10">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb23-11">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/jasmine-halftone-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>In this code the <code>ambient::normalise()</code> function is used to rescale the input to fall within a specified range. Usually ggplot2 handles this automatically, but as I mentioned, we‚Äôve turned off the autopilot‚Ä¶</p>
</div></div><p>For real world printers, this approach is very convenient because it allows us to construct any shade we like using only a few different colours of ink. In the halftone world shades of grey are merely blacks of different size, pinks are merely sizes of red (sort of), and so on.</p>
<p>But we‚Äôre not using real printers, and in any case the image above is not a very good example of a halftone format: I‚Äôm crudely mapping <code>1-val</code> to the size aesthetic, and that‚Äôs not actually the right way to do this (if you want to see this done properly, look at the <a href="https://github.com/cmarcum/halftoner">halftoner</a> package). The image above is ‚Äúinspired by‚Äù the halftone concept, not the real thing. I‚Äôm okay with that, and abandoning the idea of fidelity opens up new possibilities. For example, there‚Äôs nothing stopping us retaining the original hue and saturation, while using dot size to represent the intensity value. That allows us to produce ‚Äúhalftonesque‚Äù images like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb24-4">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb24-5">      <span class="at" style="color: #657422;">colour =</span> <span class="fu" style="color: #4758AB;">hsv</span>(hue, sat, .<span class="dv" style="color: #AD0000;">5</span>), </span>
<span id="cb24-6">      <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">map_size</span>(val)</span>
<span id="cb24-7">    ), </span>
<span id="cb24-8">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb24-9">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/jasmine-halftonesque-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In this code, the <code>hsv()</code> function takes the hue and saturation channels from the original image, but combines them with a constant intensity value: the output is a new colour specified as a hex code that ggplot2 can display in the output. Because we have stripped out the value channel, we can reuse the halftone trick. Much like a halftone image, the image above uses the size aesthetic to represent the intensity at the corresponding pixel.</p>
</section>
</section>
<section id="intermission" class="level2">
<h2 class="anchored" data-anchor-id="intermission">Intermission</h2>
<p>Up to this point I‚Äôve talked about image manipulation, and I hope you can see the artistic potential created when we pair image processing tools like magick with data visualisation tools like ggplot2. What I haven‚Äôt talked about is how to choose (or generate!) the images to manipulate, and I haven‚Äôt talked about how we might introduce a probabilistic component to the process. I‚Äôm not going to say much about how to choose images. The possibilities are endless. For this post I‚Äôve used a photo I took in my garden many years ago, but the pieces in <em>Water Colours</em> series have a different origin: I dripped some food colouring into a glass of water and took some photos of the dye diffusing. Small sections were cropped out of these photos and often preprocessed in some fashion by changing the hue, saturation etc. These manipulated photos were then passed into a noise generation process, and the output produced images like this:</p>
<div class="cell" data-hash="index_cache/html/water-colour-cards-2_7a2cc16f9f0ef094873102b67d6b41b8">
<div class="cell-output-display">
<div>
<div class="row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4" style="margin-left: -.4rem; margin-right: -.4rem; margin-top: 1rem; margin-bottom: 1rem; ">
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img48_storm-cell.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img48_storm-cell.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img48_storm-cell.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Storm Cell / Air Elemental</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img49_tonal-earth.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img49_tonal-earth.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img49_tonal-earth.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Tonal Earth</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img50_cold-front.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img50_cold-front.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img50_cold-front.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Cold Front</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img51_kintsugi-dreams.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img51_kintsugi-dreams.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img51_kintsugi-dreams.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Kintsugi Dreams</h5>
</a>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="art-from-noise-generators" class="level2">
<h2 class="anchored" data-anchor-id="art-from-noise-generators">Art from noise generators</h2>
<section id="multidimensional-noise-generation" class="level3">
<h3 class="anchored" data-anchor-id="multidimensional-noise-generation">Multidimensional noise generation</h3>
<p>How can we generate interesting noise patterns in R? As usual, there are many different ways you can do this, but my favourite method is to use the <a href="https://ambient.data-imaginist.com/">ambient</a> package that provides bindings to the <a href="https://github.com/Auburn/FastNoiseLite">FastNoise</a> C++ library. A proper description of what you can do with ambient is beyond what I can accomplish here. There are a <em>lot</em> of things you can do with a tool like this, and I‚Äôve explored only a small subset of the possibilities in my art. Rather than make a long post even longer, what I‚Äôll do is link to a lovely essay on <a href="https://tylerxhobbs.com/essays/2020/flow-fields">flow fields</a> and encourage you to play around yourself.</p>
<p>To give you a sense of what the possibilities are, I‚Äôve written a <code>field()</code> function that uses the ambient package to generate noise. At its heart is <code>ambient::gen_simplex()</code>, a function that generates <a href="https://en.wikipedia.org/wiki/Simplex_noise">simplex noise</a> (examples <a href="https://ambient.data-imaginist.com/reference/noise_simplex.html">here</a>), a useful form of multidimensional noise that has applications in computer graphics. In the code below, the simplex noise is then modified by a <a href="https://ambient.data-imaginist.com/reference/billow.html">billow fractal</a> that makes it ‚Äúlumpier‚Äù: that‚Äôs the job of <code>ambient::gen_billow()</code> and <code>ambient::fracture()</code>. This is then modified one last time by the <code>ambient::curl_noise()</code> function to avoid some undesirable properties of the flow fields created by simplex noise.</p>
<p>In any case, here is the code. You‚Äôll probably need to read through the ambient documentation to understand all the moving parts here, but for our purposes the main things to note are the arguments. The <code>points</code> argument takes a data frame or tibble that contains the <code>x</code> and <code>y</code> coordinates of a set of points (e.g., something like the <code>jas</code> data!). The <code>frequency</code> argument controls the overall ‚Äúscale‚Äù of the noise: does it change quickly or slowly as you move across the image? The <code>octaves</code> argument controls the amount of fractal-ness (hush, I know that‚Äôs not a word) in the image. How many times do you apply the underlying transformation?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">field <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(points, <span class="at" style="color: #657422;">frequency =</span> .<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">octaves =</span> <span class="dv" style="color: #AD0000;">1</span>) {</span>
<span id="cb25-2">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">curl_noise</span>(</span>
<span id="cb25-3">    <span class="at" style="color: #657422;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>fracture,</span>
<span id="cb25-4">    <span class="at" style="color: #657422;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>billow,</span>
<span id="cb25-5">    <span class="at" style="color: #657422;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>gen_simplex,</span>
<span id="cb25-6">    <span class="at" style="color: #657422;">x =</span> points<span class="sc" style="color: #5E5E5E;">$</span>x,</span>
<span id="cb25-7">    <span class="at" style="color: #657422;">y =</span> points<span class="sc" style="color: #5E5E5E;">$</span>y,</span>
<span id="cb25-8">    <span class="at" style="color: #657422;">frequency =</span> frequency,</span>
<span id="cb25-9">    <span class="at" style="color: #657422;">octaves =</span> octaves,</span>
<span id="cb25-10">    <span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb25-11">  )</span>
<span id="cb25-12">}</span></code></pre></div>
</div>
<p>Interpreting the output of the <code>field()</code> function requires a little care. The result <em>isn‚Äôt</em> a new set of points. Rather, it is a collection of directional vectors that tell you ‚Äúhow fast‚Äù the x- and y-components are flowing at each of the locations specified in the <code>points</code> input. If we want to compute a new set of points (which is usually true), we need something like the <code>shift()</code> function below. It takes a set of <code>points</code> as input, computes the directional vectors at each of the locations, and then moves each point by a specified <code>amount</code>, using the flow vectors to work out how far to move and what direction to move. The result is a new data frame with the same columns and the same number of rows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">shift <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(points, amount, ...) {</span>
<span id="cb26-2">  vectors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">field</span>(points, ...)</span>
<span id="cb26-3">  points <span class="ot" style="color: #003B4F;">&lt;-</span> points <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb26-4">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb26-5">      <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">+</span> vectors<span class="sc" style="color: #5E5E5E;">$</span>x <span class="sc" style="color: #5E5E5E;">*</span> amount,</span>
<span id="cb26-6">      <span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">+</span> vectors<span class="sc" style="color: #5E5E5E;">$</span>y <span class="sc" style="color: #5E5E5E;">*</span> amount,</span>
<span id="cb26-7">      <span class="at" style="color: #657422;">time =</span> time <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb26-8">      <span class="at" style="color: #657422;">id =</span> id</span>
<span id="cb26-9">    )</span>
<span id="cb26-10">  <span class="fu" style="color: #4758AB;">return</span>(points)</span>
<span id="cb26-11">}</span></code></pre></div>
</div>
<p>It‚Äôs worth noting that the <code>shift()</code> function assumes that <code>points</code> contains an <code>id</code> column as well as the <code>x</code> and <code>y</code> columns. This will be crucial later when we want to merge the output with the <code>jas</code> data. Because the positions of each point are changing, the <code>id</code> column will be the method we use to join the two data sets. It‚Äôs also worth noting that <code>shift()</code> keeps track of time for you. It assumes that the input data contains a <code>time</code> column, and the output data contains the same column with every value incremented by one. In other words, it keeps the <code>id</code> constant so we know which point is referred to by the row, but modifies its position in <code>time</code> and space (<code>x</code> and <code>y</code>). Neat.</p>
</section>
<section id="art-from-the-noise" class="level3">
<h3 class="anchored" data-anchor-id="art-from-the-noise">Art from the noise</h3>
<p>To illustrate how this all works, I‚Äôll start by creating a regular 50x30 grid of points:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">points_time0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">expand_grid</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">50</span>, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">30</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">time =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">row_number</span>())</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="fu" style="color: #4758AB;">ggplot_themed</span>(points_time0) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb27-5">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> .<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/plain-grid-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Next, I‚Äôll apply the <code>shift()</code> function three times in succession, and bind the results into a single tibble that contains the the data at each point in time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">points_time1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">shift</span>(points_time0, <span class="at" style="color: #657422;">amount =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb28-2">points_time2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">shift</span>(points_time1, <span class="at" style="color: #657422;">amount =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb28-3">points_time3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">shift</span>(points_time2, <span class="at" style="color: #657422;">amount =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb28-4"></span>
<span id="cb28-5">pts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb28-6">  points_time0, </span>
<span id="cb28-7">  points_time1, </span>
<span id="cb28-8">  points_time2,</span>
<span id="cb28-9">  points_time3</span>
<span id="cb28-10">)</span></code></pre></div>
</div>
<p>Then I‚Äôll quickly write a couple of boring wrapper functions that will control how the size and transparency of the markers changes as a function of time‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">map_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb29-2">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">normalise</span>(x, <span class="at" style="color: #657422;">to =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb29-3">}</span>
<span id="cb29-4">map_alpha <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb29-5">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">normalise</span>(<span class="sc" style="color: #5E5E5E;">-</span>x, <span class="at" style="color: #657422;">to =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, .<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb29-6">}</span></code></pre></div>
</div>
<p>‚Ä¶and now we can create some art:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">pts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb30-4">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb30-5">      <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">map_size</span>(time), </span>
<span id="cb30-6">      <span class="at" style="color: #657422;">alpha =</span> <span class="fu" style="color: #4758AB;">map_alpha</span>(time)</span>
<span id="cb30-7">    ),</span>
<span id="cb30-8">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb30-9">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/noise-stepped-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>So pretty!</p>
</section>
<section id="accumulating-art-with-purrr" class="level3">
<h3 class="anchored" data-anchor-id="accumulating-art-with-purrr">Accumulating art with purrr</h3>
<p>‚Ä¶ but also so ugly. The code I used above is awfully inelegant: I‚Äôve ‚Äúiteratively‚Äù created a sequence of data frames by writing the same line of code several times. That‚Äôs almost never the right answer, especially when the code doesn‚Äôt know in advance how many times we want to <code>shift()</code> the points! To fix this I could write a loop (and contrary to folklore, there‚Äôs nothing wrong with loops in R so long as you‚Äôre careful to avoid unnecessary copying). However, I‚Äôve become addicted to functional programming tools in the <a href="https://purrr.tidyverse.org/">purrr</a> package, so I‚Äôm going to use those rather than write a loop.</p>
<p>To solve my problem I‚Äôm going to use the <code>purrr::accumulate()</code> function, which I personally feel is an <a href="https://adv-r.hadley.nz/functionals.html#accumulate">underappreciated gem</a> in the functional programming toolkit. It does <em>precisely</em> the thing we want to do here: it takes one object (e.g., <code>points</code>) as input together with a second quantity (e.g., an <code>amount</code>), and uses the user-supplied function (e.g., <code>shift()</code>) to produce a <em>new</em> object that can, once again, be passed to the user-supplied function (yielding new <code>points</code>). It continues with this process, taking the output of the last iteration of <code>shift()</code> and using it as input to the next iteration, until it runs out of <code>amount</code> values. It is very similar to the better-known <code>purrr::reduce()</code> function, except that it doesn‚Äôt throw away the intermediate values. The <code>reduce()</code> function is only interested in the destination; <code>accumulate()</code> is a whole journey.</p>
<p>So let‚Äôs use it. The <code>iterate()</code> function below gives a convenient interface:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">iterate <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(pts, time, step, ...) {</span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">bind_rows</span>(<span class="fu" style="color: #4758AB;">accumulate</span>(</span>
<span id="cb31-3">    <span class="at" style="color: #657422;">.x =</span> <span class="fu" style="color: #4758AB;">rep</span>(step, time), </span>
<span id="cb31-4">    <span class="at" style="color: #657422;">.f =</span> shift, </span>
<span id="cb31-5">    <span class="at" style="color: #657422;">.init =</span> pts,</span>
<span id="cb31-6">    ...</span>
<span id="cb31-7">  ))</span>
<span id="cb31-8">}</span></code></pre></div>
</div>
<p>Here‚Äôs the code to recreate the <code>pts</code> data from the previous section:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">pts <span class="ot" style="color: #003B4F;">&lt;-</span> points_time0 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;">iterate</span>(<span class="at" style="color: #657422;">time =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">step =</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>It produces the same image, but the code is nicer!</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/noise-stepped-data-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="assembling-the-parts" class="level2">
<h2 class="anchored" data-anchor-id="assembling-the-parts">Assembling the parts</h2>
<section id="adding-noise-to-jasmines-coordinates" class="level3">
<h3 class="anchored" data-anchor-id="adding-noise-to-jasmines-coordinates">Adding noise to jasmines coordinates</h3>
<p>The time has come to start assembling the pieces of the jigsaw puzzle, by applying the flow fields from the previous section to the data associated with the jasmines image. The first step in doing so is to write a small <code>extract_points()</code> function that will take a data frame (like <code>jas</code>) as input, extract the positional information (<code>x</code> and <code>y</code>) and the identifier column (<code>id</code>), and add a <code>time</code> column so that we can modify positions over time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">extract_points <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data) {</span>
<span id="cb33-2">  data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-3">    <span class="fu" style="color: #4758AB;">select</span>(x, y, id) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb33-4">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">time =</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb33-5">}</span></code></pre></div>
</div>
<p>Here‚Äôs how we can use this. The code below extracts the positional information from <code>jas</code> and then use the <code>iterate()</code> function to iteratively shift those positions along the paths traced out by a flow field:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">pts <span class="ot" style="color: #003B4F;">&lt;-</span> jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">extract_points</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;">iterate</span>(<span class="at" style="color: #657422;">time =</span> <span class="dv" style="color: #AD0000;">20</span>, <span class="at" style="color: #657422;">step =</span> .<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>The <code>pts</code> tibble doesn‚Äôt contain any of the colour information from <code>jas</code>, but it does have the ‚Äúright kind‚Äù of positional information. It‚Äôs also rather pretty in its own right:</p>
<div class="cell" data-hash="index_cache/html/accumulated-noise-image_5068ecca44ec2baf3d872898cb386644">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">map_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb35-2">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">normalise</span>(x<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">to =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">3.5</span>))</span>
<span id="cb35-3">}</span>
<span id="cb35-4"></span>
<span id="cb35-5">pts <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb35-6">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb35-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb35-8">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">map_size</span>(time)),</span>
<span id="cb35-9">    <span class="at" style="color: #657422;">alpha =</span> .<span class="dv" style="color: #AD0000;">01</span>,</span>
<span id="cb35-10">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb35-11">  ) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/accumulated-noise-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="joining-the-noise-with-jasmine-colours" class="level3">
<h3 class="anchored" data-anchor-id="joining-the-noise-with-jasmine-colours">Joining the noise with jasmine colours</h3>
<p>We can now take the pixels from the jasmines image and make them ‚Äúflow‚Äù across the image. To do this, we‚Äôll need to reintroduce the colour information. We can do this using <code>full_join()</code> from the dplyr package. I‚Äôve written a small convenience function <code>restore_points()</code> that performs the join only after removing the original <code>x</code> and <code>y</code> coordinates from the <code>jas</code> data. The reason for this is that the <code>pts</code> data now contains the positional information we need, so we want the <code>x</code> and <code>y</code> values from that data set. That‚Äôs easy enough: we drop those coordinates with <code>select()</code> and then join the two tables using only the <code>id</code> column. See? I promised it would be useful!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">restore_points <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(jas, pts) {</span>
<span id="cb36-2">  jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-3">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>x, <span class="sc" style="color: #5E5E5E;">-</span>y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-4">    <span class="fu" style="color: #4758AB;">full_join</span>(pts, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"id"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb36-5">    <span class="fu" style="color: #4758AB;">arrange</span>(time, id) </span>
<span id="cb36-6">}</span></code></pre></div>
</div>
<p>The result is a tibble that looks like this:</p>
<div class="cell" data-hash="index_cache/html/noisy-jasmine-data_585be5e9ea1d37592db14356f3f63db4">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">jas <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">restore_points</span>(jas, pts)</span>
<span id="cb37-2">jas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 126,000 √ó 11
   shade        id   red   grn   blu    hue   sat   val     x     y  time
   &lt;chr&gt;     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 #838c70ff     1   131   140   112 0.220  0.200 0.549     1     1     0
 2 #3c3123ff     2    60    49    35 0.0933 0.417 0.235     1    10     0
 3 #503d3dff     3    80    61    61 0      0.237 0.314     1    11     0
 4 #363126ff     4    54    49    38 0.115  0.296 0.212     1    12     0
 5 #443a30ff     5    68    58    48 0.0833 0.294 0.267     1    13     0
 6 #8a6860ff     6   138   104    96 0.0317 0.304 0.541     1    14     0
 7 #665859ff     7   102    88    89 0.988  0.137 0.4       1    15     0
 8 #5a5d51ff     8    90    93    81 0.208  0.129 0.365     1    16     0
 9 #535c4cff     9    83    92    76 0.260  0.174 0.361     1    17     0
10 #944b61ff    10   148    75    97 0.950  0.493 0.580     1    18     0
# ‚Ä¶ with 125,990 more rows</code></pre>
</div>
</div>
<p>More importantly though, it produces images like this:</p>
<div class="cell" data-hash="index_cache/html/noisy-jasmine-image_64d40cf5e07e088f0ad9214c0743206c">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">map_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y) {</span>
<span id="cb39-2">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">normalise</span>((<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> x) <span class="sc" style="color: #5E5E5E;">*</span> y<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">to =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb39-3">}</span>
<span id="cb39-4"></span>
<span id="cb39-5">jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb39-6">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb39-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb39-8">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb39-9">      <span class="at" style="color: #657422;">colour =</span> <span class="fu" style="color: #4758AB;">hsv</span>(hue, sat, .<span class="dv" style="color: #AD0000;">5</span>), </span>
<span id="cb39-10">      <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">map_size</span>(val, time)</span>
<span id="cb39-11">    ), </span>
<span id="cb39-12">    <span class="at" style="color: #657422;">alpha =</span> .<span class="dv" style="color: #AD0000;">03</span>,</span>
<span id="cb39-13">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb39-14">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/noisy-jasmine-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>When colouring the image, we‚Äôre using the same ‚Äúhalftonesque‚Äù trick from earlier. The colours vary only in hue and saturation. The intensity values are mapped to the size aesthetic, much like we did earlier, but this time around the size aesthetic is a function of two variables: it depends on <code>time</code> as well as <code>val</code>. The way I‚Äôve set it up here is to have the points get larger as time increases, but there‚Äôs no reason we have to do it that way. There are endless ways in which you could combine the positional, temporal, and shading data to create interesting generative art. This is only one example.</p>
</section>
<section id="the-last-chapter" class="level3">
<h3 class="anchored" data-anchor-id="the-last-chapter">The last chapter</h3>
<p>At last we have the tools we need to create images in a style similar (though not identical) to those produced by the <em>Water Colours</em> system. We can import, reorganise, and separate the data:</p>
<div class="cell" data-hash="index_cache/html/jasmine-detailed-read_945802ec42602753f52e3f11bf61241a">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">jas <span class="ot" style="color: #003B4F;">&lt;-</span> file <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">import_image</span>(<span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">200</span>, <span class="at" style="color: #657422;">height =</span> <span class="dv" style="color: #AD0000;">120</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;">construct_matrix</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb40-4">  <span class="fu" style="color: #4758AB;">construct_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb40-5">  <span class="fu" style="color: #4758AB;">extract_channels</span>()</span></code></pre></div>
</div>
<p>We can define flow fields with different properties, move the pixels through the fields, and rejoin the modified positions with the colour information</p>
<div class="cell" data-hash="index_cache/html/jasmine-detailed-data_923c83b865ab495cdae3d009b7a5dbd5">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">pts <span class="ot" style="color: #003B4F;">&lt;-</span> jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;">extract_points</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb41-3">  <span class="fu" style="color: #4758AB;">iterate</span>(</span>
<span id="cb41-4">    <span class="at" style="color: #657422;">time =</span> <span class="dv" style="color: #AD0000;">40</span>, </span>
<span id="cb41-5">    <span class="at" style="color: #657422;">step =</span> .<span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb41-6">    <span class="at" style="color: #657422;">octaves =</span> <span class="dv" style="color: #AD0000;">10</span>, </span>
<span id="cb41-7">    <span class="at" style="color: #657422;">frequency =</span> .<span class="dv" style="color: #AD0000;">05</span></span>
<span id="cb41-8">  )</span>
<span id="cb41-9"></span>
<span id="cb41-10">jas <span class="ot" style="color: #003B4F;">&lt;-</span> jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb41-11">  <span class="fu" style="color: #4758AB;">restore_points</span>(pts)</span>
<span id="cb41-12"></span>
<span id="cb41-13">jas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 984,000 √ó 11
   shade        id   red   grn   blu    hue    sat   val     x     y  time
   &lt;chr&gt;     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 #9c8178ff     1   156   129   120 0.0417 0.231  0.612     1     1     0
 2 #81b564ff     2   129   181   100 0.274  0.448  0.710     1    10     0
 3 #8b7870ff     3   139   120   112 0.0494 0.194  0.545     1   100     0
 4 #eedfdbff     4   238   223   219 0.0351 0.0798 0.933     1   101     0
 5 #c29aa3ff     5   194   154   163 0.962  0.206  0.761     1   102     0
 6 #d5e1c3ff     6   213   225   195 0.233  0.133  0.882     1   103     0
 7 #bde8beff     7   189   232   190 0.337  0.185  0.910     1   104     0
 8 #b3dfbcff     8   179   223   188 0.367  0.197  0.875     1   105     0
 9 #b2dcbdff     9   178   220   189 0.377  0.191  0.863     1   106     0
10 #b3d9bfff    10   179   217   191 0.386  0.175  0.851     1   107     0
# ‚Ä¶ with 983,990 more rows</code></pre>
</div>
</div>
<p>We can write customised helpers to guide how information is used:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">map_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y) {</span>
<span id="cb43-2">  <span class="dv" style="color: #AD0000;">12</span> <span class="sc" style="color: #5E5E5E;">*</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> x) <span class="sc" style="color: #5E5E5E;">*</span> (<span class="fu" style="color: #4758AB;">max</span>(y)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">-</span> y<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">/</span> y<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb43-3">}</span></code></pre></div>
</div>
<p>And we can render the images with ggplot2:</p>
<div class="cell" data-hash="index_cache/html/jasmine-detailed-image_b631bfef230aa80e6ade5fd4a74ea900">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">pic <span class="ot" style="color: #003B4F;">&lt;-</span> jas <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;">ggplot_themed</span>() <span class="sc" style="color: #5E5E5E;">+</span>  </span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb44-4">    <span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb44-5">      <span class="at" style="color: #657422;">colour =</span> shade, </span>
<span id="cb44-6">      <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">map_size</span>(val, time)</span>
<span id="cb44-7">    ), </span>
<span id="cb44-8">    <span class="at" style="color: #657422;">alpha =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb44-9">    <span class="at" style="color: #657422;">stroke =</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb44-10">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb44-11">  ) </span>
<span id="cb44-12"></span>
<span id="cb44-13">pic</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 1 rows containing missing values (geom_point).</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/jasmine-detailed-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The colour bleeding over the edges here is to be expected. Some of the points created with <code>geom_point()</code> are quite large, and they extend some distance beyond the boundaries of the original jasmines photograph. The result doesn‚Äôt appeal to my artistic sensibilities, so I‚Äôll adjust the scale limits in ggplot2 so that we don‚Äôt get that strange border:</p>
<div class="cell" data-hash="index_cache/html/jasmine-cropped-image_59b5406d0b5e4e4916a266225d9ab60a">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">pic <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">190</span>), <span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">114</span>), <span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Removed 198656 rows containing missing values (geom_point).</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/index_files/figure-html/jasmine-cropped-image-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The end result is something that has a qualitative similarity to the <em>Water Colours</em> pieces, but is also possessed of a style that is very much its own. This is as it should be. It may be true that ‚Äúall art is theft‚Äù ‚Äì as Picasso is often misquoted as saying ‚Äì but a good artistic theft is no mere replication. It can also be growth, change, and reconstruction.</p>
<p>A happy ending after all.</p>
</section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<blockquote class="blockquote">
<p>I find it so amazing when people tell me that electronic music has no soul. You can‚Äôt blame the computer. If there‚Äôs no soul in the music, it‚Äôs because nobody put it there (<a href="https://www.azquotes.com/quote/564301">Bj√∂rk</a>, via <a href="https://twitter.com/TimdeSousa/status/1432898952907554822">Tim de Sousa</a>)</p>
</blockquote>
<div class="cell" data-hash="index_cache/html/water-colour-cards-3_2324dbb0a7d769505e14765f12ca0eef">
<div class="cell-output-display">
<div>
<div class="row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4" style="margin-left: -.4rem; margin-right: -.4rem; margin-top: 1rem; margin-bottom: 1rem; ">
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img53_departure.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img53_departure.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img53_departure.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Departure</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img54_echo.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img54_echo.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img54_echo.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Echo</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img57_portal.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img57_portal.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img57_portal.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Portal</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img60_salt-stone-storm.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img60_salt-stone-storm.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img60_salt-stone-storm.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Gods of Salt, Stone, and Storm</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img61_amanecer-de-invierno.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img61_amanecer-de-invierno.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img61_amanecer-de-invierno.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">El √öltimo Amanecer de Invierno</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img65_plume.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img65_plume.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img65_plume.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Plume</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img67_woodland-spirits.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img67_woodland-spirits.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img67_woodland-spirits.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Woodland Spirits</h5>
</a>
</div>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .4rem ; border-width: 0; border-radius: .6rem .6rem .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img68_below-the-horizon.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2021-09-07_water-colours/https:/djnavarro.net/series-water-colours/500/watercolour_sys02_img68_below-the-horizon.jpg" class="card-img-top" style="border-style:solid; border-color:inherits; border-width:1px 1px 0 1px; border-radius: .6rem .6rem 0 0 ;">
</a>
<div class="card-body justify-content-end m-0 p-0" style="visibility: visible; background-color: inherits; border-style:solid; border-color:inherits; border-width:1px; border-radius: 0 0 .6rem .6rem ;">
<a href="https://djnavarro.net/series-water-colours/2000/watercolour_sys02_img68_below-the-horizon.jpg">
<h5 class="card-title my-auto px-3 pt-3 pb-3 anchored">Below the Horizon</h5>
</a>
</div>
</div>
</div>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {Art, Jasmines, and the Water Colours},
  date = {2021-09-07},
  url = {https://blog.djnavarro.net/water-colours},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúArt, Jasmines, and the Water
Colours.‚Äù</span> September 7, 2021. <a href="https://blog.djnavarro.net/water-colours">https://blog.djnavarro.net/water-colours</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2021-09-07_water-colours/index.html</guid>
  <pubDate>Mon, 06 Sep 2021 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-09-07_water-colours/jasmine-recollected.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Managing GitHub credentials from R, difficulty level linux</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>There are days when I regret switching to linux as an R user. It‚Äôs not that I‚Äôm particularly enamoured of Apple or Microsoft, and I do enjoy the freedom to tinker that linux systems provide, but without the same resourcing that underpins Windows or Mac OS, I do spent a disproportionate amount my time trying to make my long-suffering Ubuntu laptop do something that would ‚Äújust work‚Äù if I‚Äôd gone with one of the more traditional options. But such is life, and besides, there‚Äôs a case to be made that the time I spend on these things is not wasted: usually, I end up learning something useful.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/https:/media.giphy.com/media/DEaRw1U6F4s9O/giphy.gif" width="100%"> La la la la la. (Figure from giphy.com)</p>
</div></div><p>This is one of those stories.</p>
<section id="the-story-is-quite-short" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-story-is-quite-short">The story is quite short‚Ä¶</h2>
<section id="using-github-credentials-with-r" class="level3">
<h3 class="anchored" data-anchor-id="using-github-credentials-with-r">Using GitHub credentials with R</h3>
<p>For some years now I have been using git repositories for version control, with some ambivalence to my feelings. I absolutely love version control, and I think GitHub is a fabulous tool, but git itself gives me headaches. It feels counterintuitive and untidy, and I am resistant to learning new git tricks because of that. However, now that GitHub is moving to <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">end password authentication for git operations</a>, I find myself needing to do precisely that. Sigh.</p>
<p>Like many R users, whenever I encounter a git problem my first impulse is to see whether <a href="https://happygitwithr.com/">Happy Git and GitHub for the useR</a> <span class="citation" data-cites="bryan2018happy">(Bryan 2018)</span> can help me out, and true to form, it can. Having decided that I will revert to being an https girl, renouncing my flirtation with ssh, I‚Äôve found the chapter on <a href="https://happygitwithr.com/credential-caching.html">caching https credentials</a> extremely useful. The usethis article on <a href="https://usethis.r-lib.org/articles/articles/git-credentials.html">git credentials</a> is also worth the read.</p>
<p>The problem can be broken into three parts:</p>
<ul>
<li>How do I set up an authentication token on my GitHub account?</li>
<li>How do I configure my git installation to use the authentication token?</li>
<li>How do I ensure that R detects these credentials?</li>
</ul>
<p>Thanks to the fabulous work of the <a href="https://www.tidyverse.org/">tidyverse</a> team, it‚Äôs possible for R users to solve the problem in a fairly painless way. The solution has been documented repeatedly, but for the sake of completeness I‚Äôll repeat the advice here.</p>
</section>
<section id="setting-up-the-credentials" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="setting-up-the-credentials">Setting up the credentials</h3>
<p>The first thing you‚Äôll need to do is set up a GitHub token. You can do this on the GitHub website, but for an R user it‚Äôs probably easiest to use the usethis package <span class="citation" data-cites="usethis">(Wickham and Bryan 2021)</span>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">usethis<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">create_github_token</span>()</span></code></pre></div>
</div>
<p>This will open GitHub in a browser window, take you to the ‚Äúcreate a new token page‚Äù, and pre-populate all the fields with sensible default values. After accepting these values, the token is created and you‚Äôll be given a PAT, a ‚Äúpersonal authentication token‚Äù. It‚Äôll look something like this‚Ä¶</p>
<pre><code>ghp_dgdfasdklfjsdklfjsadfDKFJASDLKFJ3453</code></pre>
<p>‚Ä¶and you should immediately save this in a secure password manager, like <a href="https://1password.com/">1password</a>, <a href="https://www.lastpass.com/">lastpass</a>, etc, because GitHub will only show it to you this one time. <br><br><br>You did save it to your password manager, right? <br><br><br>Right? <br><br><br>I mean, you might need it again. <br><br><br>You really might. <br><br><br>Yes, you. <br><br><br>All right then. <br><br><br>I‚Äôll trust you‚Äôve taken sensible precautions now, so let‚Äôs keep going. The next step in the process is to configure your git installation to use your token. This is, once again, quite easy to do with gitcreds <span class="citation" data-cites="gitcreds">(Cs√°rdi 2020)</span>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">gitcreds<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gitcreds_set</span>()</span></code></pre></div>
</div>
<p>When you call this function interactively, R will ask for your PAT. Paste it into the console, hit enter, and you are done. Your git installation is now configured to use the token. Yay! Let‚Äôs move onto the third step, which is to ensure that R will recognise and use these credentials. As it turns out, step three doesn‚Äôt require you to do anything, because it happens automatically! Functions like <code>usethis::pr_push()</code> recognise your credentials as soon as gitcreds sets them up, and everything works perfectly‚Ä¶</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/https:/media.giphy.com/media/BC87NFCPxG0M0/giphy.gif" width="100%"> Quinn. (Figure from giphy.com)</p>
</div></div></section>
</section>
<section id="unless-youre-on-linux" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="unless-youre-on-linux">‚Ä¶ unless you‚Äôre on linux</h2>
<p>If you‚Äôre on linux, you might find yourself in the same boat I was. The credentials you just set up work flawlessly for about 15 minutes, at which time R complains that it cannot find any credentials and you spend the next 15 minutes crying melodramatically.</p>
<p>When this happened to me I assumed the problem was my R environment. I tried updating gitcreds, usethis, and every other R package I could think of that might possibly be involved in communicating with git. Nothing worked. The reason nothing worked is that the problem wasn‚Äôt with R at all‚Ä¶ it was git, and in hindsight I realise that the problem is specific to git on linux. All those beautiful people with their fancy Windows and Mac machines won‚Äôt run into the problem I encountered. They won‚Äôt spend an entire Saturday trying to teach themselves git credential management. They will never know my pain. Curse them and their superior purchasing decisions.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/https:/media.giphy.com/media/4vhF7cLLmu4zC/giphy.gif" width="100%"> Daria. (Figure from giphy.com)</p>
</div></div><p>Just kidding. I love my quirky little Ubuntu box and I have a lot of fun learning how to fix her up every time she sets herself on fire.</p>
<section id="where-did-i-leave-my-config" class="level3">
<h3 class="anchored" data-anchor-id="where-did-i-leave-my-config">Where did I leave my config?</h3>
<p>Okay, I‚Äôm going to need to make changes to my git configuration. Although git makes it possible to store configuration locally, at the repository level, I rarely need this flexibility. The relevant information is stored in the global configuration file: on my machine, this is located at <code>/home/danielle/.gitconfig</code>. I can use <a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config">git config</a> to list these configuration settings, like this</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;">git</span> config <span class="at" style="color: #657422;">--global</span> <span class="at" style="color: #657422;">--list</span></span></code></pre></div>
</div>
<p>and at the start of this exercise the output would have looked like this:</p>
<pre><code>user.name=Danielle Navarro
user.email=d.navarro@unsw.edu.au</code></pre>
<p>I‚Äôm not sure why this is, but I always feel slightly more reassured when I‚Äôm able to inspect the configuration file itself. Opening my <code>.gitconfig</code> file shows the same information, but the formatting is slightly different in the raw file:</p>
<pre><code>[user]
    name = Danielle Navarro
    email = d.navarro@unsw.edu.au</code></pre>
<p>To solve the git credential problem, we‚Äôre going to need to edit this configuration information. Depending on which solution you go with, you might need to install new software too.</p>
</section>
<section id="dont-forget-to-update-git" class="level3">
<h3 class="anchored" data-anchor-id="dont-forget-to-update-git">Don‚Äôt forget to update git</h3>
<p>Before starting, it‚Äôs a good idea to make sure you have the latest version of git: older versions may not have the tools you need. As it happens, I had already updated git to the most recent version (2.32.0 at the time of writing), but in case anyone ends up relying on this post, here‚Äôs how you do it:</p>
<pre><code>sudo add-apt-repository ppa:git-core/ppa
sudo apt update
sudo apt install git</code></pre>
</section>
</section>
<section id="three-solutions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="three-solutions">Three solutions</h2>
<section id="set-a-long-timeout-for-the-git-cache" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="set-a-long-timeout-for-the-git-cache">1. Set a long timeout for the git cache</h3>
<p>Recent versions of git are released with a <a href="https://git-scm.com/docs/git-credential-cache">credential cache</a> that retains your credentials in memory temporarily. The information is never written to disk, and it expires after a time. You can tell git to use this cache as your ‚Äúcredential helper‚Äù by typing the following command at the terminal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;">git</span> config <span class="at" style="color: #657422;">--global</span> credential.helper cache</span></code></pre></div>
</div>
<p>After doing this, my <code>.gitconfig</code> file now looks like this:</p>
<pre><code>[user]
    name = Danielle Navarro
    email = d.navarro@unsw.edu.au
[credential]
    helper = cache</code></pre>
<p>Unfortunately this isn‚Äôt an ideal solution, because the cache expires after 900 seconds (15 minutes). As soon as the cache expires, git loses track of your GitHub credentials and so does R. So you have to set the credentials again by calling <code>gitcreds::gitcreds_set()</code> and entering the PAT again. That‚Äôs annoying, but you did store the PAT in a password manager right? You were smart. You definitely aren‚Äôt going to be foolish like me, forget to store your PAT every time, and end up needing to create a new GitHub token every 15 minutes.</p>
<p>A simple solution to this problem is to ask git to store information in the cache for just a teeny tiny little bit longer. Instead of having the cache expire after the default 900 seconds, maybe set it to expire after 10 million seconds. That way, you‚Äôll only have to refresh the cache using <code>gitcreds::gitcreds_set()</code> once every four months instead of four times an hour. Implementing this solution requires only one line of code at the terminal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;">git</span> config <span class="at" style="color: #657422;">--global</span> credential.helper <span class="st" style="color: #20794D;">'cache --timeout=10000000'</span></span></code></pre></div>
</div>
<p>After typing this, my <code>.gitconfig</code> file looks like this:</p>
<pre><code>[user]
    name = Danielle Navarro
    email = d.navarro@unsw.edu.au
[credential]
    helper = cache --timeout=10000000</code></pre>
<p>In some ways this is a bit of a hack. If cache expiry normally happens every 15 minutes, there‚Äôs something a little odd about dragging it out and making it hang around for 16 weeks. That being said, I‚Äôve done many stranger things than this in my life. It may not be the most elegant way to solve the problem, but it works.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/https:/media.giphy.com/media/6qt69qcDApRU4/giphy.gif" width="100%"> Trent. (Figure from giphy.com)</p>
</div></div></section>
<section id="use-libsecret-credential-manager" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="use-libsecret-credential-manager">2. Use libsecret credential manager</h3>
<p>It puzzled me slightly that this problem only exists for linux computers, so I did a little more reading on how <a href="https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage">git manages credentials</a>. It turns out you don‚Äôt have to rely on the in-memory cache: you can tell git to use some other program to supply the credentials. This is what all those swanky Mac and Windows people have been doing all along. On Macs, for example, git defaults to using the OS X keychain to store credentials safely on disk. It‚Äôs possible to do the same thing on linux using <a href="https://wiki.gnome.org/Projects/Libsecret">libsecret</a> (source on <a href="https://gitlab.gnome.org/GNOME/libsecret">gitlab</a>) and thankfully it‚Äôs not much harder to set this up than to use the ‚Äúlong cache‚Äù trick described in the previous section.</p>
<p>The first step is ensuring libsecret is installed on your machine. It probably is (or at least, it was on my Ubuntu 20.04 box), but in case it isn‚Äôt here‚Äôs the command you need</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="fu" style="color: #4758AB;">sudo</span> apt install libsecret-1-0 libsecret-1-dev</span></code></pre></div>
</div>
<p>It helps to realise that libsecret isn‚Äôt an application designed to work with git (i.e., it‚Äôs not the credential manager), nor is it the <a href="https://itsfoss.com/ubuntu-keyring/">keyring</a> where the passwords are stored. Rather, it‚Äôs a library that communicates with the keyring: I found <a href="https://rtfm.co.ua/en/what-is-linux-keyring-gnome-keyring-secret-service-and-d-bus/">this post</a> useful for making sense of it. So if we want to use libsecret to access the keyring, we‚Äôre going to need a git credential manager that knows how to talk to libsecret. As it turns out, git comes with one already, you just have to build it using <code>make</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="bu" style="color: null;">cd</span> /usr/share/doc/git/contrib/credential/libsecret</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">sudo</span> make</span></code></pre></div>
</div>
<p>This will build the <code>git-credential-libsecret</code> application for you and now all you have to do is tell git to use this as the ‚Äúcredential helper‚Äù application that supplies the GitHub credentials:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;">git</span> config <span class="at" style="color: #657422;">--global</span> credential.helper <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb14-2">  /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret</span></code></pre></div>
</div>
<p>After typing that, my <code>.gitconfig</code> file looks like this‚Ä¶</p>
<pre><code>[user]
    name = Danielle Navarro
    email = d.navarro@unsw.edu.au
[credential]
    helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret</code></pre>
<p>‚Ä¶ and I‚Äôm all set and ready to go.</p>
<p>One thing I found handy during this step is to check that R was reading the correct configuration information. It‚Äôs possible to do this with gitcreds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">gitcreds<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gitcreds_list_helpers</span>()</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret"</code></pre>
</div>
</div>
<p>In any case, if all the applications are talking to each other properly, the next time you call <code>gitcreds::gitcreds_set()</code> they‚Äôll all send the message along: R will pass your PAT to git, git will pass it to git-credential-libsecret, git-credential-libsecret will pass it to libsecret, and the PAT will end up in your linux keychain. Whenever you need to authenticate and push some commits up to GitHub from R, it should find the credentials using the same communication channel. Everything should work swimmingly.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/https:/media.giphy.com/media/10c3XjPPw2Kkbm/giphy.gif" width="100%"> Quinn et al.&nbsp;(Figure from giphy.com)</p>
</div></div></section>
<section id="use-gcm-core" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="use-gcm-core">3. Use GCM core</h3>
<p>As far as I can tell, the libsecret credential manager is a perfectly good solution to the problem, but in the end I made a different choice: I decided to go with ‚Äúgit credential manager core‚Äù, or <a href="https://github.com/microsoft/Git-Credential-Manager-Core">GCM Core</a>. It‚Äôs developed by Microsoft and, perhaps unsurprisingly, it is what GitHub currently <a href="https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git">recommends</a>. It‚Äôs slightly more painful to set up, and the <a href="https://github.com/microsoft/Git-Credential-Manager-Core#linux-install-instructions">installation instructions</a> are different depending on what flavour of linux you‚Äôre running. Because I‚Äôm on Ubuntu 20.04, I downloaded the .deb file associated with the <a href="https://github.com/microsoft/Git-Credential-Manager-Core/releases/latest">most recent release of GCM core</a>, and then installed the application using the <code>dpkg</code> command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="fu" style="color: #4758AB;">sudo</span> dpkg <span class="at" style="color: #657422;">-i</span> <span class="op" style="color: #5E5E5E;">&lt;</span>path-to-deb-file<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
</div>
<p>This will build GCM core on your system, and once that‚Äôs done you can ask it to take care of the git configuration for you:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;">git-credential-manager-core</span> configure</span></code></pre></div>
</div>
<p>This will edit the <code>.gitconfig</code> file, so for me it now looks like this:</p>
<pre><code>[user]
    name = Danielle Navarro
    email = d.navarro@unsw.edu.au
[credential]
    helper = 
    helper = /usr/bin/git-credential-manager-core
[credential "https://dev.azure.com"]
    useHttpPath = true</code></pre>
<p>In a happier world you would be done at this point, but we don‚Äôt live in a happy world. We live in a sick sad world that has global pandemics and pineapple on pizzas. So there‚Äôs still one job left to do.</p>
<p>Much like the libsecret credential manager I built in the previous section, GCM core is ‚Äújust‚Äù a git credential manager: it communicates with git, but it isn‚Äôt a password manager or a keyring, and it doesn‚Äôt store the PAT itself. Instead, it offers you several different <a href="https://github.com/microsoft/Git-Credential-Manager-Core/blob/main/docs/linuxcredstores.md">options</a> for how the PAT is to be stored. If you click through and take a look at the list, the first suggested option is to connect to a <a href="https://specifications.freedesktop.org/secret-service/">secret service API</a>. As far as I can tell ‚Äúsecret service‚Äù isn‚Äôt an application, it‚Äôs a specification, and in practice it‚Äôs just a fancy way of referring to a linux keychain. Just as the libsecret credential manager needs some way of communicating with the keychain (i.e., the libsecret library itself), GCM core needs an intermediary. In fact, it turns out GCM core also uses libsecret to talk to the keychain. So that‚Äôs the option I went with. The terminal command to set this up is this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="fu" style="color: #4758AB;">git</span> config <span class="at" style="color: #657422;">--global</span> credential.credentialStore secretservice</span></code></pre></div>
</div>
<p>After running the command, my <code>.gitconfig</code> file looks like this:</p>
<pre><code>[user]
    name = Danielle Navarro
    email = d.navarro@unsw.edu.au
[credential]
    helper = 
    helper = /usr/bin/git-credential-manager-core
    credentialStore = secretservice
[credential "https://dev.azure.com"]
    useHttpPath = true</code></pre>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/https:/media.giphy.com/media/xrbdBK5A5cIYo/giphy.gif" width="100%"> Jane. (Figure from giphy.com)</p>
</div></div><p>As before, I can check that R is reading the correct configuration information‚Ä¶</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">gitcreds<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gitcreds_list_helpers</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/usr/local/share/gcm-core/git-credential-manager-core"</code></pre>
</div>
</div>
<p>‚Ä¶and now I‚Äôm ready to go. My problems are solved. The sun is shining, the birds are singing, and git is working properly from R again. All is well in heaven and earth. Oh the sheer excitement of it all. I hope I can contain my boundless enthusiasm and joy.</p>

<!--------------- appendices go here ----------------->
<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/https:/media.giphy.com/media/S0l1Ah4cjIdwY/giphy.gif" width="100%"> Daria. (Figure from giphy.com)</p>
</div></div><div class="cell">

</div>



</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-bryan2018happy" class="csl-entry">
Bryan, Jennifer. 2018. <em>Happy Git and GitHub for the useR</em>. GitHub.
</div>
<div id="ref-gitcreds" class="csl-entry">
Cs√°rdi, G√°bor. 2020. <em>Gitcreds: Query ‚ÄôGit‚Äô Credentials from ‚Äôr‚Äô</em>. <a href="https://CRAN.R-project.org/package=gitcreds">https://CRAN.R-project.org/package=gitcreds</a>.
</div>
<div id="ref-usethis" class="csl-entry">
Wickham, Hadley, and Jennifer Bryan. 2021. <em>Usethis: Automate Package and Project Setup</em>. <a href="https://CRAN.R-project.org/package=usethis">https://CRAN.R-project.org/package=usethis</a>.
</div>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {Managing {GitHub} Credentials from {R,} Difficulty Level
    Linux},
  date = {2021-08-08},
  url = {https://blog.djnavarro.net/git-credential-helpers},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúManaging GitHub Credentials from R,
Difficulty Level Linux.‚Äù</span> August 8, 2021. <a href="https://blog.djnavarro.net/git-credential-helpers">https://blog.djnavarro.net/git-credential-helpers</a>.
</div></div></section></div> ]]></description>
  <category>Git</category>
  <category>Credentials</category>
  <category>Linux</category>
  <guid>https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/index.html</guid>
  <pubDate>Sat, 07 Aug 2021 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/credentials.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Generative art in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A little while ago I was invited by <a href="https://twitter.com/MortaraSara">Sara Mortara</a> to contribute art as part of an exhibit to be presented at the <a href="https://user2021.r-project.org/">2021 useR! conference</a>, along with several artists who I admire greatly. I could hardly say no to that, now could I? So I sent some pieces that I‚Äôm fond of, most of which are posted somewhere on my <a href="https://art.djnavarro.net/">art website</a>. I realised later though that I was going to have to talk a little about my art too, and Sara suggested an informal Q&amp;A during the timeslot allocated to the exhibit. Naturally, I agreed since that meant I didn‚Äôt have to prepare anything formal, and like all artists I am extremely lazy. Later though, it occurred to me that it actually wouldn‚Äôt be terrible if I wrote a blog post to accompany my contribution to the exhibit, loosely based on the questions Sara suggested. And so here we are‚Ä¶</p>
<p><strong>When did you start using R for art? Do you remember your first piece?</strong></p>
<p>I started making art in R some time in late 2019. I‚Äôd discovered some of the art that <a href="https://www.data-imaginist.com/art">Thomas Lin Pedersen</a> had been making ‚Äì at the time he was posting pieces from his <em>Genesis</em> series ‚Äì and at the same time I found the <a href="https://github.com/thomasp85/ambient">ambient</a> package that he was using to create the pieces. Thomas famously does not post source code for his art, and being stubborn and curious I wanted to work out how he was doing it, so I started playing with ambient to see if I could reverse engineer his system. My very first piece was <em>Constellations</em>, shown below. It‚Äôs certainly not the prettiest thing I‚Äôve created, and there are a lot of things I‚Äôd like to change about it now, but it‚Äôs nice to have your early work lying around to see how you‚Äôve changed since then:</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/other/constellations.png" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Constellations</p>
</div></div><p>If you follow the link above and look at Thomas‚Äô <em>Genesis</em> pieces you can tell that it‚Äôs not even remotely close to the mark, but I did eventually get the hang of it and managed to produce a few pieces like <em>Rainbow Prisms</em> which are closer to the kind of work he was producing:</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/other/rainbow_prisms.png" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Rainbow Prisms</p>
</div></div><p>It‚Äôs still not quite the same as Thomas‚Äô in style, but by the time I‚Äôd worked out how to produce these I decided it was time to change my approach and branch out a bit. I love Thomas‚Äô work of course, but I didn‚Äôt want my art to be just a low quality imitation of his! And besides, by that point I‚Äôd started discovering a whole lot of other people making generative art in R, such as <a href="https://www.williamrchase.com/">Will Chase</a>, <a href="https://hen.link/antonio">Antonio S√°nchez Chinch√≥n</a>, <a href="https://marcusvolz.com/">Marcus Volz</a>, and (somewhat later) <a href="https://ijeamaka-anyene.netlify.app/">Ijeamaka Anyene</a>. Each has their own style and ‚Äì following the famous advice that <em>art is theft</em> ‚Äì have shamelessly taken ideas and inspiration from each at different times.</p>
<p>Some of those early pieces are still around, as part of the <a href="https://art.djnavarro.net/gallery/rosemary/">Rosemary</a> gallery.</p>
<p><br><br> <strong>Were you an artist before making generative art in R?</strong></p>
<p>Not really. I always wanted to do more artistic and creative things, but the only thing I‚Äôd ever done that required any kind of mix of aesthetic sensibility and craftwork was gardening. I used to have a lovely garden in Adelaide with a mix of Mediterranean and Australian native plants, and I had the same kind of enthusiasm for gardening then as I do for art now. Maybe one day I‚Äôll garden again but there‚Äôs no space for that in my Sydney apartment!</p>
<p><br><br> <strong>Can you talk about your creative process? Do you begin from code or from the outcome you are looking for? Do you start with the color palette in mind, or is it an iterative process?</strong></p>
<p>I‚Äôm honestly not sure I have a consistent process? I spend a lot of time browsing artwork by other people on twitter and instagram, and from time to time I read posts about the techniques that they use. Whenever I do this I end up thinking a bit about how I might use this technique or wondering what methods other artists use to create their work, but I don‚Äôt usually act on that information until I think of something I <em>want</em> to do with it. That kind of technical or stylistic information is like background knowledge that lies dormant until I need it.</p>
<p>Most of the time the starting point for my art is an emotion. I might be angry or lonely or tired, or just in need of something to occupy my mind and distract me from something else. When I start implementing a new system it‚Äôs often (though not always) a modification of a previous one. In principle this modification process <em>could</em> go in any direction, but my aesthetic sensibilities depend a lot on my state of mind, and that imposes a bias. I tweak the code one way, and see what it produces. If I like it, I keep the change, if I don‚Äôt I reject it. It‚Äôs a lot like a <a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm">Metropolis-Hastings sampler</a> that way, but my mood strongly shapes the accept/reject decision, so the same starting point can lead to different outcomes. As a concrete example, the <a href="https://art.djnavarro.net/gallery/pollen/">Pollen</a>, <a href="https://art.djnavarro.net/gallery/bursts/">Bursts</a> and <a href="https://art.djnavarro.net/gallery/embers/">Embers</a> series are all based on the same underlying engine, the <a href="https://en.wikipedia.org/wiki/Fractal_flame">fractal flame</a> algorithm created by Scott Draves, but my emotional state was very different at the time I coded each version. For example, the <em>Pollen Cloud</em> piece I contributed to the useR exhibit is soft and gentle largely because I was feeling peaceful and relaxed at the time:</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/exhibit/pollen_cloud.jpg" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Pollen Cloud</p>
</div></div><p>By way of contrast, the <em>Geometry in a Hurricane</em> piece from <em>Bursts</em> is layered in jagged textures with a chaotic energy because I was angry at the time I was coding:</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/other/geometry_in_a_hurricane.png" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Geometry in a Hurricane</p>
</div></div><p>The <em>Soft Ember</em> piece below (also included in the exhibit) has a different feel again. There‚Äôs more energy to it than the pollen pieces, but it‚Äôs not as chaotic as the bursts series. Again, that‚Äôs very much a reflection of my mood. I wasn‚Äôt angry when I coded this system, but I wasn‚Äôt relaxed either. At the time, something exciting had happened in my life that I wasn‚Äôt quite able to do anything about, but I was indulging in the anticipation of a new thing, and some of that emotion ended up showing through in the pieces that I made at the time:</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/exhibit/soft_ember.jpg" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Soft Ember</p>
</div></div><p>To bring all this back to the question, it‚Äôs very much an iterative process. The driver behind the process is usually an emotion, and the colour choices, the shapes, and the code are all adapted on the fly to meet with how I‚Äôm feeling.</p>
<p><br><br> <strong>What is your inspiration?</strong></p>
<p>To the extent that my art is driven by emotion, the inspiration for it tends to be tied to sources of strong emotion in my life. Sometimes that emotion comes from the sources of love and joy: family, intimate partners, and so on. The <a href="https://art.djnavarro.net/gallery/heartbleed/">Heartbleed</a> series is one of those. The background texture to these images is generated by simulating a simple Turing machine known as a <a href="https://en.wikipedia.org/wiki/Turmite">turmite</a> and the swirly hearts in the foreground are generated using the toolkit provided by the ambient package. This system is very much motivated from emotional responses to the loved ones in my life. One of the pieces in the exhibit is from this series:</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/exhibit/turmite59_in_red.jpg" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Turmite 59 in Red</p>
</div></div><p>Other times the emotional motivation comes from sources of pain - sometimes things that were physically painful, sometimes that were psychologically painful. The <em>Orchid Thorn</em> piece I included in the exhibit is one of those, linked to an intense physically painful experience.</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/exhibit/orchid_thorn.png" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Orchid Thorn</p>
</div></div><p>The <em>Bitterness</em> piece below, which I haven‚Äôt done much with other than post to my <a href="https://www.instagram.com/daniellenavarro77/">instagram</a>, is strongly tied to the psychological stresses associated with my gender transition. Yes, there‚Äôs a softness to the piece, but there‚Äôs also a sandpaper-like texture there that makes me think of abrasion. The colour shifts make me think about transitions, but the roughness at some of the boundaries reminds me that change is often painful.</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/other/bitterness.jpg" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Bitterness</p>
</div></div><p>One odd property of the art, at least from my point of view, is that looking at a given piece recalls to mind the events and emotions that inspired the work, and to some extent that recollection becomes a way of re-experiencing the events. Sometimes that‚Äôs a good thing. Not always though.</p>
<p><br><br> <strong>What is your advice for people who wants to create art in R?</strong></p>
<p>I think I‚Äôd suggest three things. Find artists you like, read about their processes. Sometimes they‚Äôll show source code or link to algorithms like I‚Äôve done in a few places in this piece, and it can be really valuable to try to retrace their steps. There‚Äôs nothing wrong with learning technique by initially copying other artists and then developing your own style as you go.</p>
<p>The second thing I‚Äôd suggest, for R folks specifically, is to take advantage of the skills you already have. Most of us have skills in simulation, data wrangling, and data visualisation, and those skills can be repurposed for artistic work quite easily. A lot of my pieces are created using that specific combination. I‚Äôll often define a stochastic process and sample data from it using tools in base R, use <a href="https://dplyr.tidyverse.org/">dplyr</a> to transform and manipulate it, then use <a href="https://ggplot2.tidyverse.org/">ggplot2</a> to map the data structure onto a visualisation. One of the nice things about dplyr and ggplot2 being compositional grammars is the fact that you can ‚Äúreuse‚Äù their parts for different purposes. I get a lot of artistic mileage out of <code>geom_point()</code> and <code>geom_polygon()</code>, and quite frankly <a href="https://purrr.tidyverse.org/">purrr</a> is an absolute godsend when the generative process you‚Äôre working with is iterative in nature.</p>
<p>The other thing would be try not to put pressure on yourself to be good at it immediately. I wasn‚Äôt, and I don‚Äôt think anyone else was either. Earlier I showed the <em>Constellations</em> piece and referred to it as the first piece I created. In a way that‚Äôs true, because it was the first time I reached a level that I felt comfortable showing to other people. But I made a lot of junk before that, and I made a lot of junk after that. I make some good art now (or so people tell me) precisely <em>because</em> I made a lot of bad art before. Even now, though, I can‚Äôt tell which systems will end up good and which will end up bad. It‚Äôs a bit of a lottery, and I‚Äôm trying my best not to worry too much about how the lottery works. I like to have fun playing with visual tools, and sometimes the tinkering takes me interesting places.</p>
<p><br><br> <strong>Anything to add about your pieces in the exhibit?</strong></p>
<p>Not a lot. Several of the pieces I‚Äôve contributed are already linked above, but I might just say a little about the other pieces and how they were made. The <em>Silhouette in Teal</em> piece uses the <a href="https://flametree.djnavarro.net/">flametree</a> generative art package to create the tree shown in silhouette in the foreground, and a simple random walk to generate the texture in the background:</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/exhibit/silhouette_in_teal.jpg" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Silhouette in Teal</p>
</div></div><p>It has also been surprisingly popular on my <a href="https://society6.com/djnavarro">Society6</a> store, which you can visit if you want some of my art on random objects. I am not sure why, but I have sold a lot more shower curtains and yoga mats than I would have expected to sell in my lifetime.</p>
<p><em>Leviathan</em> emerged from my first attempt to create simulated watercolours in R using this <a href="https://tylerxhobbs.com/essays/2017/a-generative-approach-to-simulating-watercolor-paints">guide</a> written by Tyler Hobbs. I was in a dark mood at the time and the ominous mood to the piece seems quite fitting to me.</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/exhibit/leviathan.png" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Leviathan</p>
</div></div><p>The <em>Floral Effect</em> piece is an odd one. It‚Äôs part of the <a href="https://art.djnavarro.net/gallery/viewports/">Viewports</a> series that I created by applying Thomas Lin Pedersen‚Äôs <a href="https://ggfx.data-imaginist.com/">ggfx</a> package over the top of the output of the same system I used to create the <a href="https://art.djnavarro.net/gallery/native-flora/">Native Flora</a> series, which in turn is an application of the flametree system I mentioned earlier. I quite like it when these systems build on top of one another.</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/exhibit/floral_effect.png" width="100%">
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Floral Effect</p>
</div></div><p>The last piece I included, <em>Fire and Ice</em>, is a little different from the others in that it‚Äôs not a ‚Äúpure‚Äù generative system. It works by reading an image file into R, using Chris Marcum‚Äôs <a href="https://github.com/cmarcum/halftoner">halftoner</a> package to convert it to a <a href="https://en.wikipedia.org/wiki/Halftone">halftone image</a>, and then manipulate that image using the tools provided in the ambient package. The end result is something that still resembles the original image but has more of a painted feel:</p>
<div class="cell-output-display">
<img src="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/exhibit/fire_and_ice.jpg" width="100%">
</div>

<!--------------- appendices go here ----------------->
<div class="no-row-height column-margin column-container"><div class="">
<p>Fire and Ice</p>
</div></div><div class="cell">
<div class="cell-output-display">


</div>
</div>



<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2022-08-23 13:12:01 AEST</p>
</div></section><section id="details" class="level2 appendix"><h2 class="quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/djnavarro/quarto-blog/tree/main/posts/2021-07-08_generative-art-in-r/index.qmd">source code</a>, <a href="https://github.com/djnavarro/quarto-blog/tree/main/posts/2021-07-08_generative-art-in-r/renv.lock">R environment</a></p>
</div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2021,
  author = {Danielle Navarro},
  editor = {},
  title = {Generative Art in {R}},
  date = {2021-07-08},
  url = {https://blog.djnavarro.net/generative-art-in-r},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2021" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2021. <span>‚ÄúGenerative Art in R.‚Äù</span> July 8,
2021. <a href="https://blog.djnavarro.net/generative-art-in-r">https://blog.djnavarro.net/generative-art-in-r</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/index.html</guid>
  <pubDate>Wed, 07 Jul 2021 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2021-07-08_generative-art-in-r/turmite59-in-red.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
