<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/index.html</link>
<atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://blog.djnavarro.net/profile_hex.jpg</url>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/index.html</link>
</image>
<generator>quarto-1.2.280</generator>
<lastBuildDate>Sun, 12 Mar 2023 13:00:00 GMT</lastBuildDate>
<item>
  <title>Shattered landscapes</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>Magic doesn’t come from talent. It comes from pain. <br> &nbsp; &nbsp; – <a href="https://www.youtube.com/watch?v=WBeLX3O_mEU">Eliot Waugh</a><sup>1</sup></p>
</blockquote>
<p>In the last few weeks I’ve been tinkering with a generative art system I ended up calling <a href="https://art.djnavarro.net/gallery/broken-lands/"><em>Broken Lands</em></a>. It creates maps of bizarre and – I expect – impossible landscapes in R, using the <a href="https://ambient.data-imaginist.com/">ambient</a> package to generate the topography, and <a href="https://www.rayshader.com/">rayshader</a> to render shadows cast by a hypothetical light source. It creates images like these:</p>
<div class="column-screen-inset">
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/https:/djnavarro.net/series-broken-lands/3000/alien-floe_15_2406.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/https:/djnavarro.net/series-broken-lands/3000/alien-floe_15_2416.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/https:/djnavarro.net/series-broken-lands/3000/alien-floe_15_2496.png" class="img-fluid"></p>
</div>
</div>
</div>
</div>
<p>To my eye, at least, these images are both beautiful and tragic. I cannot help but interpret them as coastal landscapes in an alien geography of some kind, a land that has suffered some cataclysm like the <a href="https://awoiaf.westeros.org/index.php/Doom_of_Valyria">Doom of Valyria</a> or the <a href="https://dragonlancenexus.com/the-rise-and-demise-of-istar/">Fall of Istar</a>. The contours feel too contorted to be the result of any terrestrial process, and – again, by my interpretation – there’s a tension between the smoothness of the individual contours and the jagged, chaotic structure of the landscape overall.</p>
<p>But what would I know? I wrote the code that makes the system work, but I don’t have a monopoly of interpretation of the images. <a href="https://en.wikipedia.org/wiki/The_Death_of_the_Author">Death of the author</a> and all that. Barthes would call me the “scriptor” rather than the author, I suppose, which honestly feels about right for generative art. So yeah. The pieces are what they are, quite separate from the artist and from the process by which the system was constructed.</p>
<p>That said, if you’re familiar with the R ecosystem you can probably take an educated guess about the tools I used to make these pieces. The spatial noise patterns that form the basis of these pieces are created using the <a href="https://ambient.data-imaginist.com/">ambient</a> package. The shadows and three-dimensional look are provided by <a href="https://www.rayshader.com/">rayshader</a>. I wrote about both of these packages in my workshop on <a href="https://art-from-code.netlify.app/">generative art in R</a> workshop (specifically: <a href="https://art-from-code.netlify.app/day-1/session-2/">ambient art</a>, <a href="https://art-from-code.netlify.app/day-1/session-4/">rayshader art</a>), and those tutorials are probably the place to begin if you’ve never used either of these packages for generative art before.</p>
<p>Let’s set a random seed that we’ll use for all the random components throughout the post:<sup>2</sup> <sup>3</sup> <sup>4</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">seed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">14</span></span></code></pre></div>
</div>
<p><br></p>
<section id="starting-simple" class="level2">
<h2 class="anchored" data-anchor-id="starting-simple">Starting simple</h2>
<p>I’ll start by building a simple system that doesn’t go very far beyond what I covered in the <em>Art From Code</em> workshop. It’s built using three functions. There’s a <code>new_grid()</code> function used to define a grid of x and y coordinates, a <code>generate_simplex()</code> function used to create spatial noise patterns on such a grid, and a <code>render()</code> function used to create an image. First, the <code>new_grid()</code> function:</p>
<div class="cell">

</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">new_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">1000</span>) {</span>
<span id="cb2-2">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">long_grid</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">length.out =</span> n),</span>
<span id="cb2-4">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">length.out =</span> n)</span>
<span id="cb2-5">  )</span>
<span id="cb2-6">}</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;">new_grid</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 2
       x       y
   &lt;dbl&gt;   &lt;dbl&gt;
 1     0 0      
 2     0 0.00100
 3     0 0.00200
 4     0 0.00300
 5     0 0.00400
 6     0 0.00501
 7     0 0.00601
 8     0 0.00701
 9     0 0.00801
10     0 0.00901
# … with 999,990 more rows</code></pre>
</div>
</div>
<p>The output appears to be a tibble that contains x and y coordinates.<sup>5</sup> This defines the spatial locations that we’ll use to create the image, but we’ll need to assign colours to each of those locations.</p>
<p><br></p>
<section id="painting-a-canvas-with-spatial-noise" class="level3">
<h3 class="anchored" data-anchor-id="painting-a-canvas-with-spatial-noise">Painting a canvas with spatial noise</h3>
<p>In order to do this, we’ll write a function called <code>generate_simplex()</code> that generates interesting patterns of spatial noise:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">generate_simplex <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y, <span class="at" style="color: #657422;">seed =</span> <span class="cn" style="color: #8f5902;">NULL</span>) {</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(seed)) {</span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;">set.seed</span>(seed)</span>
<span id="cb4-4">  }</span>
<span id="cb4-5">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fracture</span>(</span>
<span id="cb4-6">    <span class="at" style="color: #657422;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>gen_simplex,</span>
<span id="cb4-7">    <span class="at" style="color: #657422;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>billow,</span>
<span id="cb4-8">    <span class="at" style="color: #657422;">octaves =</span> <span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb4-9">    <span class="at" style="color: #657422;">freq_init =</span> .<span class="dv" style="color: #AD0000;">02</span>,</span>
<span id="cb4-10">    <span class="at" style="color: #657422;">frequency =</span> <span class="sc" style="color: #5E5E5E;">~</span> . <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb4-11">    <span class="at" style="color: #657422;">gain_init =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-12">    <span class="at" style="color: #657422;">gain =</span> <span class="sc" style="color: #5E5E5E;">~</span> . <span class="sc" style="color: #5E5E5E;">*</span> .<span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb4-13">    <span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb4-14">    <span class="at" style="color: #657422;">y =</span> y</span>
<span id="cb4-15">  )</span>
<span id="cb4-16">}</span></code></pre></div>
</div>
<p>The particular choices I’ve made here came about from trial and error. I played around with a lot of different settings when creating generative art in this style, and these were things I liked. I’m not going to dive into the details here: you can find out more by reading the <a href="[ambient art](https://art-from-code.netlify.app/day-1/session-2/)">tutorial on spatial noise art</a> I linked to earlier. For the current post, all I want to highlight is that we can use this function to add a new column to the <code>canvas</code> that defines our artwork:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">canvas <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">new_grid</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">paint =</span> <span class="fu" style="color: #4758AB;">generate_simplex</span>(x, y, <span class="at" style="color: #657422;">seed =</span> seed))</span>
<span id="cb5-3"></span>
<span id="cb5-4">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 3
       x       y paint
   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1     0 0       -3.96
 2     0 0.00100 -3.95
 3     0 0.00200 -3.95
 4     0 0.00300 -3.94
 5     0 0.00400 -3.93
 6     0 0.00501 -3.92
 7     0 0.00601 -3.91
 8     0 0.00701 -3.91
 9     0 0.00801 -3.90
10     0 0.00901 -3.89
# … with 999,990 more rows</code></pre>
</div>
</div>
<p>This <code>canvas</code> object is structured like a lookup table: it’s a data frame with columns specifying x and y coordinates, and it contains a third column that specifies the colour of “paint” that needs to be applied at each coordinate. However, it’s a very structured data frame because the x and y values form a grid. This makes straightforward to flip from this format to a “bitmap” matrix format:<sup>6</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">bitmap <span class="ot" style="color: #003B4F;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> paint)</span>
<span id="cb7-2">bitmap[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      x
y           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]
  [1,] -3.963129 -3.931507 -3.899957 -3.868550 -3.837357 -3.806447
  [2,] -3.954987 -3.932781 -3.901242 -3.869845 -3.838662 -3.807762
  [3,] -3.946846 -3.924674 -3.902573 -3.871211 -3.840061 -3.809194
  [4,] -3.938708 -3.916594 -3.894550 -3.872644 -3.841552 -3.810740
  [5,] -3.930575 -3.908541 -3.886577 -3.864752 -3.843132 -3.812398
  [6,] -3.922448 -3.900516 -3.878655 -3.856932 -3.835414 -3.814166</code></pre>
</div>
</div>
<p>A grid of numbers isn’t very pretty to look at, but we will need to create this matrix representation before passing the data to rayshader later. But I’m getting ahead of myself. For now, we can use the <code>image()</code> function to render an image from matrix-formatted data:</p>
<div class="cell">

</div>
<div class="cell" data-hash="index_cache/html/simple-render_3eab0a7eeb32bc70f337c05d8f82896f">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> paint) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">image</span>(<span class="at" style="color: #657422;">axes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">asp =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">useRaster =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/simple-render-1.png" class="img-fluid" width="576"></p>
</div>
</div>
<p>We’re a long way from our goal, but at least we now have an output that looks like art rather than a matrix of numbers. It’s a start!</p>
<p><br></p>
</section>
<section id="casting-shadows-across-the-landscape" class="level3">
<h3 class="anchored" data-anchor-id="casting-shadows-across-the-landscape">Casting shadows across the landscape</h3>
<p>The next step in the process is to define a <code>render()</code> function that will take an “elevation” matrix as input, but instead of drawing a “heat map” like <code>image()</code> does, it renders it as a three-dimensional topographic map with shadows cast by a hypothetical light source. This is surprisingly easy to do using rayshader. Here’s the function I’ll use in this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">render <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(mat, <span class="at" style="color: #657422;">shades =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">zscale =</span> .<span class="dv" style="color: #AD0000;">005</span>) {</span>
<span id="cb10-2">  <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">is.null</span>(shades)) {</span>
<span id="cb10-3">    n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(<span class="fu" style="color: #4758AB;">unique</span>(mat))</span>
<span id="cb10-4">    shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hcl.colors</span>(n, <span class="st" style="color: #20794D;">"YlOrRd"</span>, <span class="at" style="color: #657422;">rev =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb10-5">  }</span>
<span id="cb10-6">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">height_shade</span>(</span>
<span id="cb10-7">    <span class="at" style="color: #657422;">heightmap =</span> mat,</span>
<span id="cb10-8">    <span class="at" style="color: #657422;">texture =</span> shades</span>
<span id="cb10-9">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb10-10">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_shadow</span>(</span>
<span id="cb10-11">      <span class="at" style="color: #657422;">shadowmap =</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">ray_shade</span>(</span>
<span id="cb10-12">        <span class="at" style="color: #657422;">heightmap =</span> mat,</span>
<span id="cb10-13">        <span class="at" style="color: #657422;">sunaltitude =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb10-14">        <span class="at" style="color: #657422;">sunangle =</span> <span class="dv" style="color: #AD0000;">80</span>,</span>
<span id="cb10-15">        <span class="at" style="color: #657422;">multicore =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb10-16">        <span class="at" style="color: #657422;">zscale =</span> zscale</span>
<span id="cb10-17">      ),</span>
<span id="cb10-18">      <span class="at" style="color: #657422;">max_darken =</span> .<span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb10-19">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb10-20">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plot_map</span>()</span>
<span id="cb10-21">}</span></code></pre></div>
</div>
<p>I’m not going to go into the specifics: you can find out more by reading the <a href="[ambient art](https://art-from-code.netlify.app/day-1/session-4/)">tutorial on rayshader art</a> I linked to earlier. For this post, I’m simply going to show you what it does. Taking the <code>canvas</code> data as input, we first use <code>as.array()</code> to switch from a “data frame style” representation to a “matrix style” representation, and then pass the matrix to <code>render()</code>:</p>
<div class="cell" data-hash="index_cache/html/render-landscape_59c4a810d191eb5a7228c812793b479f">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> paint) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">render</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/render-landscape-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Again, still a long way from our desired goal, but we are making progress. Thanks to rayshader, we have output that looks like a shaded topographic map.</p>
<p><br></p>
</section>
<section id="making-islands-from-the-landscape" class="level3">
<h3 class="anchored" data-anchor-id="making-islands-from-the-landscape">Making islands from the landscape</h3>
<!--
> I cut my bangs with some rusty kitchen scissors <br>
I screamed his name 'til the neighbors called the cops <br>
I numbed the pain at the expense of my liver <br>
Don't know what I did next, all I know I couldn't stop <br>
&nbsp; &nbsp; -- Miranda Lambert
-->
<p>At this point we have the ability to generate landscapes, but the images just look like a bunch of hills. They don’t have the “coastal” feeling that the original images did. We can create islands by setting a “sea level”. You can do this in a sophisticated way in rayshader using <code>detect_water()</code> and <code>add_water()</code>, but that’s overkill for our purposes. All we really want to do is imagine setting a sea level such that about half the image is “water” and half the image is “land”. To do that we just calculate the median value in the original data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">sea_level <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">median</span>(canvas<span class="sc" style="color: #5E5E5E;">$</span>paint)</span></code></pre></div>
</div>
<p>From there it’s an exercise in using dplyr. Using <code>mutate()</code> we create a new “islands” column whose value is equal to the original value or the sea level, whichever is higher:</p>
<div class="cell" data-hash="index_cache/html/render-islands_89c99343fd7783865ca6e6cfde8463a6">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb13-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #657422;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb13-4">      <span class="at" style="color: #657422;">condition =</span> paint <span class="sc" style="color: #5E5E5E;">&lt;</span> sea_level,</span>
<span id="cb13-5">      <span class="at" style="color: #657422;">true =</span> sea_level, </span>
<span id="cb13-6">      <span class="at" style="color: #657422;">false =</span> paint</span>
<span id="cb13-7">    )</span>
<span id="cb13-8">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">render</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/render-islands-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Et voilà! We have a generative art system that creates fictitious topographic maps of coastal islands. It’s still not quite the same thing as the original, but it’s kind of a nice system in itself. If you want to play with it, the complete source code for generating this image is included in the <a href="islands.R">islands.R</a> script accompanying this post.</p>
<p><br></p>
</section>
<section id="tweaking-the-spatial-noise-generator" class="level3">
<h3 class="anchored" data-anchor-id="tweaking-the-spatial-noise-generator">Tweaking the spatial noise generator</h3>
<p>If you do end up playing around, a really useful way to create variations on this system is to modify the function that generates the spatial noise patterns. For example, this <code>generate_fancy_noise()</code> function is awfully similar to the noise generator I used in the <em>Broken Lands</em> series:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">generate_fancy_noise <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y, <span class="at" style="color: #657422;">seed =</span> <span class="cn" style="color: #8f5902;">NULL</span>) {</span>
<span id="cb14-2">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(seed)) {</span>
<span id="cb14-3">    <span class="fu" style="color: #4758AB;">set.seed</span>(seed)</span>
<span id="cb14-4">  }</span>
<span id="cb14-5">  z <span class="ot" style="color: #003B4F;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fracture</span>(</span>
<span id="cb14-6">    <span class="at" style="color: #657422;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>gen_worley,</span>
<span id="cb14-7">    <span class="at" style="color: #657422;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>billow,</span>
<span id="cb14-8">    <span class="at" style="color: #657422;">octaves =</span> <span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb14-9">    <span class="at" style="color: #657422;">freq_init =</span> .<span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb14-10">    <span class="at" style="color: #657422;">frequency =</span> <span class="sc" style="color: #5E5E5E;">~</span> . <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb14-11">    <span class="at" style="color: #657422;">gain_init =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb14-12">    <span class="at" style="color: #657422;">gain =</span> <span class="sc" style="color: #5E5E5E;">~</span> . <span class="sc" style="color: #5E5E5E;">*</span> .<span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb14-13">    <span class="at" style="color: #657422;">value =</span> <span class="st" style="color: #20794D;">"distance2"</span>,</span>
<span id="cb14-14">    <span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb14-15">    <span class="at" style="color: #657422;">y =</span> y</span>
<span id="cb14-16">  )</span>
<span id="cb14-17">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fracture</span>(</span>
<span id="cb14-18">    <span class="at" style="color: #657422;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>gen_simplex,</span>
<span id="cb14-19">    <span class="at" style="color: #657422;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>billow,</span>
<span id="cb14-20">    <span class="at" style="color: #657422;">octaves =</span> <span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb14-21">    <span class="at" style="color: #657422;">freq_init =</span> .<span class="dv" style="color: #AD0000;">02</span>,</span>
<span id="cb14-22">    <span class="at" style="color: #657422;">frequency =</span> <span class="sc" style="color: #5E5E5E;">~</span> . <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb14-23">    <span class="at" style="color: #657422;">gain_init =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb14-24">    <span class="at" style="color: #657422;">gain =</span> <span class="sc" style="color: #5E5E5E;">~</span> . <span class="sc" style="color: #5E5E5E;">*</span> .<span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb14-25">    <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">+</span> z,</span>
<span id="cb14-26">    <span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">+</span> z</span>
<span id="cb14-27">  )</span>
<span id="cb14-28">}</span></code></pre></div>
</div>
<p>Here it is in action:</p>
<div class="cell" data-hash="index_cache/html/island-fancy-noise_53f5ddc84ded78d671abebedeed2a975">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">new_grid</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb15-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb15-3">    <span class="at" style="color: #657422;">height =</span> <span class="fu" style="color: #4758AB;">generate_fancy_noise</span>(x, y, <span class="at" style="color: #657422;">seed =</span> seed),</span>
<span id="cb15-4">    <span class="at" style="color: #657422;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb15-5">      <span class="at" style="color: #657422;">condition =</span> height <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fu" style="color: #4758AB;">median</span>(height),</span>
<span id="cb15-6">      <span class="at" style="color: #657422;">true =</span> <span class="fu" style="color: #4758AB;">median</span>(height),</span>
<span id="cb15-7">      <span class="at" style="color: #657422;">false =</span> height</span>
<span id="cb15-8">    )</span>
<span id="cb15-9">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb15-11">  <span class="fu" style="color: #4758AB;">render</span>(<span class="at" style="color: #657422;">zscale =</span> .<span class="dv" style="color: #AD0000;">01</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/island-fancy-noise-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Very pretty. I suspect that had I isolated this particular noise generator earlier in the artistic process – rather than figuring out in hindsight that this was what I’d been using all along – I might have stopped here, and not bothered with any of the other tricks that I actually used.<sup>7</sup> But of course this is a post-mortem deconstruction,<sup>8</sup> not a description of the bizarrely tangled artistic process I actually followed, so there are more layers to come…</p>
<p><br></p>
</section>
</section>
<section id="queering-geography" class="level2">
<h2 class="anchored" data-anchor-id="queering-geography">Queering geography</h2>
<p>The final image in the last section captures something about the overall structure of the <em>Broken Lands</em> images, but it feels wrong in the particulars. It’s too smooth, too fluid, too… natural. It doesn’t have the same feel as the originals. I don’t have the same feeling of alienness that the original pieces have. Where does that not-quite-real feeling come from?</p>
<p>The answer to this involves every generative artists favourite trick: curl fields. If you’ve read the tutorial articles I linked to earlier, you’ve encountered these before so I won’t repeat myself by explaining yet again what a curl field is. What I’ll do instead is write a <code>generate_curl()</code> function that takes the original grid of coordinates (in the “base” space) and transforms them to a new set of points (in an “embedding” space) using a curl transformation:<sup>9</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">generate_curl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y, <span class="at" style="color: #657422;">seed =</span> <span class="cn" style="color: #8f5902;">NULL</span>) {</span>
<span id="cb16-2">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(seed)) {</span>
<span id="cb16-3">    <span class="fu" style="color: #4758AB;">set.seed</span>(seed)</span>
<span id="cb16-4">  }</span>
<span id="cb16-5">  ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">curl_noise</span>(</span>
<span id="cb16-6">    <span class="at" style="color: #657422;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>fracture,</span>
<span id="cb16-7">    <span class="at" style="color: #657422;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>gen_simplex,</span>
<span id="cb16-8">    <span class="at" style="color: #657422;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;">::</span>fbm,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;">octaves =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb16-10">    <span class="at" style="color: #657422;">frequency =</span> <span class="sc" style="color: #5E5E5E;">~</span> . <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb16-11">    <span class="at" style="color: #657422;">freq_init =</span> .<span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb16-12">    <span class="at" style="color: #657422;">gain_init =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb16-13">    <span class="at" style="color: #657422;">gain =</span> <span class="sc" style="color: #5E5E5E;">~</span> . <span class="sc" style="color: #5E5E5E;">*</span> .<span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb16-14">    <span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb16-15">    <span class="at" style="color: #657422;">y =</span> y</span>
<span id="cb16-16">  )</span>
<span id="cb16-17">}</span></code></pre></div>
</div>
<p>Here’s what happens when we apply this function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">new_grid</span>()</span>
<span id="cb17-2">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">generate_curl</span>(grid<span class="sc" style="color: #5E5E5E;">$</span>x, grid<span class="sc" style="color: #5E5E5E;">$</span>y, <span class="at" style="color: #657422;">seed =</span> seed)</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;">head</span>(coords)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             x        y
1 1.417494e-07 2.625000
2 4.275159e-05 2.624981
3 1.705772e-04 2.624924
4 3.836068e-04 2.624829
5 6.818209e-04 2.624697
6 1.065192e-03 2.624526</code></pre>
</div>
</div>
<p>The code here is slightly unpleasant, yes, but I’ll do it in a slightly cleaner way in a moment. What matters right now is the fact that the <code>coords</code> data frame is a transformed version of the <code>grid</code> data. The original (x,y) coordinates in the base space have been transformed to some (x,y) coordinates in some new space.</p>
<p>A slightly cleaner way of doing this – keeping both the original coordinates and the transformed values – would be as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">canvas <span class="ot" style="color: #003B4F;">&lt;-</span> grid <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb19-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb19-3">    <span class="at" style="color: #657422;">curl_x =</span> coords<span class="sc" style="color: #5E5E5E;">$</span>x,</span>
<span id="cb19-4">    <span class="at" style="color: #657422;">curl_y =</span> coords<span class="sc" style="color: #5E5E5E;">$</span>y</span>
<span id="cb19-5">  )</span>
<span id="cb19-6"></span>
<span id="cb19-7">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 4
       x       y      curl_x curl_y
   &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt;
 1     0 0       0.000000142   2.62
 2     0 0.00100 0.0000428     2.62
 3     0 0.00200 0.000171      2.62
 4     0 0.00300 0.000384      2.62
 5     0 0.00400 0.000682      2.62
 6     0 0.00501 0.00107       2.62
 7     0 0.00601 0.00153       2.62
 8     0 0.00701 0.00209       2.62
 9     0 0.00801 0.00273       2.62
10     0 0.00901 0.00345       2.62
# … with 999,990 more rows</code></pre>
</div>
</div>
<p>Okay that’s nice, but what exactly are these “curl transformed” values? What do they look like? Fair question. Here’s a plot showing what has happened to our nice rectangular grid after the transformation…</p>
<div class="cell" data-hash="index_cache/html/plot-curl-transform_024c86bb8595fbe107b5f6ae51d9ba2f">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/plot-curl-transform-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This image has an evocative feel, right? Like I’ve taken a regular square sheet of fabric and folded or transformed it in some strange way to create an “embedded” manifold? Well, yeah. That’s precisely what I’ve done.</p>
<p>Our noise operations will be specified on this transformed/embedded manifold, but – to reveal the ending slightly too soon – the final image will be defined on the base space. The code below shows how to apply the noise operations in the embedding space:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">canvas <span class="ot" style="color: #003B4F;">&lt;-</span> canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb21-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb21-3">    <span class="at" style="color: #657422;">height =</span> <span class="fu" style="color: #4758AB;">generate_fancy_noise</span>(curl_x, curl_y, <span class="at" style="color: #657422;">seed =</span> seed),</span>
<span id="cb21-4">    <span class="at" style="color: #657422;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb21-5">      <span class="at" style="color: #657422;">condition =</span> height <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fu" style="color: #4758AB;">median</span>(height),</span>
<span id="cb21-6">      <span class="at" style="color: #657422;">true =</span> <span class="fu" style="color: #4758AB;">median</span>(height),</span>
<span id="cb21-7">      <span class="at" style="color: #657422;">false =</span> height</span>
<span id="cb21-8">    )</span>
<span id="cb21-9">  )</span>
<span id="cb21-10"></span>
<span id="cb21-11">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 6
       x       y      curl_x curl_y height islands
   &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
 1     0 0       0.000000142   2.62 -0.676  -0.676
 2     0 0.00100 0.0000428     2.62 -0.675  -0.675
 3     0 0.00200 0.000171      2.62 -0.674  -0.674
 4     0 0.00300 0.000384      2.62 -0.672  -0.672
 5     0 0.00400 0.000682      2.62 -0.670  -0.670
 6     0 0.00501 0.00107       2.62 -0.667  -0.667
 7     0 0.00601 0.00153       2.62 -0.664  -0.664
 8     0 0.00701 0.00209       2.62 -0.662  -0.662
 9     0 0.00801 0.00273       2.62 -0.660  -0.660
10     0 0.00901 0.00345       2.62 -0.658  -0.658
# … with 999,990 more rows</code></pre>
</div>
</div>
<p>Just to give you a sense of what that looks like in the embedding space, here’s what happens when we redraw the “manifold” plot from above, with each point coloured using the value of the “islands” variable:</p>
<div class="cell" data-hash="index_cache/html/demo-worley-distance_ad5074cdd8c189365ccd09e3cb6846a3">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/demo-worley-distance-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>You can sort of see what’s going on here. We have a spatial noise pattern that generated the topography that I showed in the last section, but it’s defined on the <em>embedding</em> space. Our <em>base</em> space is like a rectangular fabric that has been laid and folded over and over onto this embedding space, and then we’ve spray painted this pattern onto the fabric.<sup>10</sup> <sup>11</sup> <sup>12</sup> When we unfold the spray painted fabric and lay it flat again, this is what we get:</p>
<div class="cell" data-hash="index_cache/html/unfolded-fabric_2e7f26189e4931538cd79b6853c25fe4">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;">image</span>(<span class="at" style="color: #657422;">axes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">asp =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">useRaster =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/unfolded-fabric-1.png" class="img-fluid" width="576"></p>
</div>
</div>
<p>It’s a bit like tie-dyeing I guess? That’s what it feels like to me. I’m taking something regular, scrunching it up in a strange way, and then applying the colours to the scrunched up object before unfolding it.</p>
<p>In any case, we can use our <code>render()</code> function to add shadows with rayshader:</p>
<div class="cell" data-hash="index_cache/html/plot-worley-distance_12c95c9c90abd9891eab921e41c0ca53">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;">render</span>(<span class="at" style="color: #657422;">zscale =</span> .<span class="dv" style="color: #AD0000;">05</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/plot-worley-distance-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Okay now <em>that</em> feels like an alien geography to me! It still doesn’t look at all like our final images, but it has the right feel to it. Yes, it’s still a geography of sorts, but it feels stretched and twisted in an unnatural way. It feels… well, it feels <em>painful</em>. Nothing like this can occur naturally without the action of some catastrophic process. That’s what it feels like to me. The “brokenness” of the original images is created by this transformation: natural-ish patterns imposed on a twisted space create bizarre and alien patterns when those contortions are unfolded. It feels weird… it feels strange… it feels queer.<sup>13</sup></p>
</section>
<section id="artistic-trickery" class="level2">
<h2 class="anchored" data-anchor-id="artistic-trickery">Artistic trickery</h2>
<p>The last image in the previous section doesn’t look all that much like the <em>Broken Lands</em> pieces, but – perhaps surprisingly – we’re weirdly close to creating something that really does look like those pieces. There are no deep insights left to explore. From here on out, it’s really just a matter of applying a few artistic tricks. To be precise, there are three little tricks left to document.</p>
<p><br></p>
<section id="be-discreette" class="level3">
<h3 class="anchored" data-anchor-id="be-discreette">Be discre[et|te]</h3>
<p>The first trick is discretisation. So far we’ve been creating images in which the “elevation” of the landscapes vary smoothly. The <em>Broken Lands</em> images don’t do that. Instead, there is a distinct feeling that the lands are terraced. In the original pieces there’s that same unnatural terracing that that you see in <a href="https://en.wikipedia.org/wiki/Open-pit_mining">open cut mining</a>.<sup>14</sup> Creating that look in this system is not difficult. First, I’ll define a <code>discretise()</code> function that takes a continuously-varying vector as input, cuts it into <code>n</code> distinct levels that vary in value between 0 and 1, and returns the discretised values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">discretise <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, n) {</span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;">round</span>(ambient<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">normalise</span>(x) <span class="sc" style="color: #5E5E5E;">*</span> n) <span class="sc" style="color: #5E5E5E;">/</span> n</span>
<span id="cb25-3">}</span></code></pre></div>
</div>
<p>Here’s an example in which 100 normally distributed numbers are sliced into 5 levels:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">discretise</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">100</span>), <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.6 0.8 0.2 0.4 0.6 0.4 0.6 0.4 0.8 0.6 0.4 0.2 0.2 0.4 0.6 0.6 0.6
 [18] 0.4 0.6 0.4 0.8 0.4 0.4 0.6 0.6 0.4 0.2 0.0 0.4 0.6 0.6 0.4 0.0 0.8
 [35] 0.2 0.2 0.4 0.6 0.4 0.4 0.8 0.4 0.4 0.4 0.4 0.2 0.4 0.2 0.6 0.4 0.8
 [52] 0.6 0.6 0.4 0.6 0.6 0.6 0.8 0.4 0.6 0.4 0.4 0.4 0.8 0.6 0.4 0.4 0.8
 [69] 0.4 0.2 0.4 0.2 0.6 0.2 0.2 0.8 0.4 0.4 0.6 0.4 0.6 0.4 0.8 0.6 0.4
 [86] 0.0 0.6 0.4 1.0 0.4 0.6 0.4 0.8 0.0 0.8 0.4 0.8 0.8 0.2 0.6</code></pre>
</div>
</div>
<p>To create a discretised version of our alien landscapes, all we have to do is liberally pepper our original code with a few calls to <code>discretise()</code>. Here’s an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">new_grid</span>() </span>
<span id="cb28-2">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">generate_curl</span>(grid<span class="sc" style="color: #5E5E5E;">$</span>x, grid<span class="sc" style="color: #5E5E5E;">$</span>y, <span class="at" style="color: #657422;">seed =</span> seed)</span>
<span id="cb28-3"></span>
<span id="cb28-4">canvas <span class="ot" style="color: #003B4F;">&lt;-</span> grid <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb28-5">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb28-6">    <span class="at" style="color: #657422;">curl_x =</span> coords<span class="sc" style="color: #5E5E5E;">$</span>x <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">discretise</span>(<span class="dv" style="color: #AD0000;">50</span>), </span>
<span id="cb28-7">    <span class="at" style="color: #657422;">curl_y =</span> coords<span class="sc" style="color: #5E5E5E;">$</span>y <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">discretise</span>(<span class="dv" style="color: #AD0000;">50</span>),</span>
<span id="cb28-8">    <span class="at" style="color: #657422;">height =</span> <span class="fu" style="color: #4758AB;">generate_fancy_noise</span>(curl_x, curl_y, <span class="at" style="color: #657422;">seed =</span> seed) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb28-9">      <span class="fu" style="color: #4758AB;">discretise</span>(<span class="dv" style="color: #AD0000;">50</span>),</span>
<span id="cb28-10">    <span class="at" style="color: #657422;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb28-11">      <span class="at" style="color: #657422;">condition =</span> height <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fu" style="color: #4758AB;">median</span>(height),</span>
<span id="cb28-12">      <span class="at" style="color: #657422;">true =</span> <span class="fu" style="color: #4758AB;">median</span>(height),</span>
<span id="cb28-13">      <span class="at" style="color: #657422;">false =</span> height</span>
<span id="cb28-14">    )</span>
<span id="cb28-15">) </span>
<span id="cb28-16"></span>
<span id="cb28-17">canvas</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 6
       x       y curl_x curl_y height islands
   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
 1     0 0         0.32      1   0.72    0.72
 2     0 0.00100   0.32      1   0.72    0.72
 3     0 0.00200   0.32      1   0.72    0.72
 4     0 0.00300   0.32      1   0.72    0.72
 5     0 0.00400   0.32      1   0.72    0.72
 6     0 0.00501   0.32      1   0.72    0.72
 7     0 0.00601   0.32      1   0.72    0.72
 8     0 0.00701   0.32      1   0.72    0.72
 9     0 0.00801   0.32      1   0.72    0.72
10     0 0.00901   0.32      1   0.72    0.72
# … with 999,990 more rows</code></pre>
</div>
</div>
<p>If we plot this as a heatmap, the discrete levels are immediately obvious:</p>
<div class="cell" data-hash="index_cache/html/unfolded-fabric-discrete_b8a32407e08fed0238b23d30819ea920">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;">image</span>(<span class="at" style="color: #657422;">axes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">asp =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">useRaster =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/unfolded-fabric-discrete-1.png" class="img-fluid" width="576"></p>
</div>
</div>
<p>This terracing has the effect of levelling out some of the more bizarre features of the alien landscape we plotted earlier. Here’s what we get when we pass this terraced landscape to our <code>render()</code> function:</p>
<div class="cell" data-hash="index_cache/html/rayshaded_6ae7540888474db59e0519b96d8fdf8b">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;">render</span>(<span class="at" style="color: #657422;">zscale =</span> .<span class="dv" style="color: #AD0000;">01</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/rayshaded-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Ah, yes. Now we have something that feels closer to the <em>Broken Lands</em> pieces. The twists and contortions of the alien landscape are preserved, but they have now been forced onto a flatter, controlled geometry. The chaos of the alien land has been tamed. This is a domesticated variant. Safe for children and capitalists alike.</p>
<p><br></p>
</section>
<section id="be-smooth" class="level3">
<h3 class="anchored" data-anchor-id="be-smooth">Be smooth</h3>
<p>At some level I appreciate the stark feel of the previous piece, but even I am not enough of a masochist<sup>15</sup> to truly enjoy the brutality of what I just did. All those intricate alien swirls have been flattened and erased so crudely that we are left with something a little too minimal for my tastes.</p>
<p>And so to the second artistic sleight-of-hand: some of the starkness of the last piece can be ameliorated if we apply noise processes in both the embedding space (i.e., noise is applied to <code>curl_x</code> and <code>curl_y</code>) and in the base space (i.e., to <code>x</code> and <code>y</code>). The code for that might look a little like this:</p>
<div class="cell" data-hash="index_cache/html/mixed-method_038429f2e450bbe1fc914f53688a602f">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">new_grid</span>() </span>
<span id="cb32-2">coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">generate_curl</span>(grid<span class="sc" style="color: #5E5E5E;">$</span>x, grid<span class="sc" style="color: #5E5E5E;">$</span>y, <span class="at" style="color: #657422;">seed =</span> seed)</span>
<span id="cb32-3"></span>
<span id="cb32-4">canvas <span class="ot" style="color: #003B4F;">&lt;-</span> grid <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb32-5">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb32-6">    <span class="at" style="color: #657422;">curl_x =</span> coords<span class="sc" style="color: #5E5E5E;">$</span>x <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">discretise</span>(<span class="dv" style="color: #AD0000;">50</span>), </span>
<span id="cb32-7">    <span class="at" style="color: #657422;">curl_y =</span> coords<span class="sc" style="color: #5E5E5E;">$</span>y <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">discretise</span>(<span class="dv" style="color: #AD0000;">50</span>),</span>
<span id="cb32-8">    <span class="at" style="color: #657422;">noise_curl =</span> <span class="fu" style="color: #4758AB;">generate_fancy_noise</span>(curl_x, curl_y, <span class="at" style="color: #657422;">seed =</span> seed),</span>
<span id="cb32-9">    <span class="at" style="color: #657422;">noise_base =</span> <span class="fu" style="color: #4758AB;">generate_simplex</span>(x, y, <span class="at" style="color: #657422;">seed =</span> seed),</span>
<span id="cb32-10">    <span class="at" style="color: #657422;">height =</span> (noise_curl <span class="sc" style="color: #5E5E5E;">+</span> noise_base) <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">discretise</span>(<span class="dv" style="color: #AD0000;">50</span>),</span>
<span id="cb32-11">    <span class="at" style="color: #657422;">islands =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb32-12">      <span class="at" style="color: #657422;">condition =</span> height <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="fu" style="color: #4758AB;">median</span>(height),</span>
<span id="cb32-13">      <span class="at" style="color: #657422;">true =</span> <span class="fu" style="color: #4758AB;">median</span>(height),</span>
<span id="cb32-14">      <span class="at" style="color: #657422;">false =</span> height</span>
<span id="cb32-15">    )</span>
<span id="cb32-16">) </span>
<span id="cb32-17"></span>
<span id="cb32-18">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb32-19">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb32-20">  <span class="fu" style="color: #4758AB;">render</span>(<span class="at" style="color: #657422;">zscale =</span> .<span class="dv" style="color: #AD0000;">01</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/mixed-method-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>There is no principle to this. No deep underlying logic. It is simply an attempt to paper over the cracks, to smooth out some of the raw, sharp edges that were left over when we discretised in the first step.</p>
<p>There is probably a life metaphor here, but I choose not to look too closely.</p>
<p><br></p>
</section>
<section id="be-chaotic" class="level3">
<h3 class="anchored" data-anchor-id="be-chaotic">Be chaotic</h3>
<p>The final layer of trickery involves the colour palette. Throughout this post I’ve used the default “yellow and red” palette that <code>image()</code> uses to create heat map images, but the <code>render()</code> function I wrote at the beginning lets you choose your own colour scheme. For instance, let’s say I want the land to vary smoothly along a “teal and green” colour palette, while having the water stay white (or thereabouts). It’s surprisingly straightforward to do this, by passing a hand crafted vector of colours to <code>render()</code>:</p>
<div class="cell" data-hash="index_cache/html/manual-colour_98e82ce263e6d6c08a8c44be9b7ceb1c">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hcl.colors</span>(<span class="dv" style="color: #AD0000;">50</span>, <span class="st" style="color: #20794D;">"TealGrn"</span>)</span>
<span id="cb33-2">shades[<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#ffffff"</span></span>
<span id="cb33-3"></span>
<span id="cb33-4">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb33-6">  <span class="fu" style="color: #4758AB;">render</span>(<span class="at" style="color: #657422;">shades =</span> shades) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/manual-colour-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This is so very, very close to the style of imagery in the original <em>Broken Lands</em> series. The only thing missing is a slight feeling of chaos to the colours. If you scroll back up to the top of the post you’ll notice that the original images don’t quite adhere to the smoothly-varying-shades feel of a proper topographic map. The reason for this is that I shuffled the colour palette, so each “level” in the discrete map has a randomly sampled colour from the palette. Here’s some code that does precisely that:</p>
<div class="cell" data-hash="index_cache/html/manual-colour-shuffled_ab41e7b2a8c5325c9f9ef9f713abc54d">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">generate_shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"TealGrn"</span>, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">50</span>, <span class="at" style="color: #657422;">seed =</span> <span class="cn" style="color: #8f5902;">NULL</span>) {</span>
<span id="cb34-2">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(seed)) {</span>
<span id="cb34-3">    <span class="fu" style="color: #4758AB;">set.seed</span>(seed)</span>
<span id="cb34-4">  }</span>
<span id="cb34-5">  shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hcl.colors</span>(n, palette)</span>
<span id="cb34-6">  shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(shades)</span>
<span id="cb34-7">  shades[<span class="dv" style="color: #AD0000;">1</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"#ffffff"</span></span>
<span id="cb34-8">  shades  </span>
<span id="cb34-9">}</span>
<span id="cb34-10"></span>
<span id="cb34-11">canvas <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb34-12">  <span class="fu" style="color: #4758AB;">as.array</span>(<span class="at" style="color: #657422;">value =</span> islands) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb34-13">  <span class="fu" style="color: #4758AB;">render</span>(<span class="at" style="color: #657422;">shades =</span> <span class="fu" style="color: #4758AB;">generate_shades</span>(<span class="at" style="color: #657422;">seed =</span> seed)) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index_files/figure-html/manual-colour-shuffled-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>… and there it is. This version of the system isn’t precisely equivalent to the original, but it mirrors it in every respect that matters to me. The magic is all laid bare. There are no artistic secrets left in this system. Everything you need to know about these images is committed to text. Documented. Described. Codified.</p>
<p>I love the originals no less now that the magic is revealed. There is no art in secrecy.</p>
<p><br></p>
</section>
</section>
<section id="goodnight-sweet-dreams" class="level2">
<h2 class="anchored" data-anchor-id="goodnight-sweet-dreams">Goodnight, sweet dreams</h2>
<blockquote class="blockquote">
<p>One day we’re gonna wake up laughing <br> Put on your dancing shoes <br> You won’t believe the tales I tell <br> That time, Danielle, ain’t mine to choose <br> Danielle, Danielle, Danielle <br> &nbsp; &nbsp; – <a href="https://youtu.be/RClo-JU-8P4?t=79">Tex Perkins</a> (and others, but whatever…)<sup>16</sup></p>
</blockquote>
<p>Much like the <em>Broken Lands</em> system itself,<sup>17</sup> this post has a peculiar genesis. If you read the <a href="https://blog.djnavarro.net/posts/2022-12-26_strange-year/">strange year</a> post I wrote a few months ago, you’d be unsurprised to hear that I am attempting to <a href="https://en.wikipedia.org/wiki/Squaring_the_circle">square a few circles</a> right now. Something broke – rather badly – and I’m trying to work out how to put the pieces together even knowing that the shattered parts can’t go back together in the shape they were before. Aspects to my life that were once central to my sense of self are scattered, and there are little slivers of glass laid everywhere – when I attempt to pick up one of the pieces from the floor I get cut deeply by those tiny transparent needles.</p>
<p>This post is one of those attempts. One of the pieces I need to pick up is my writing. The little cataclysm of 2022 broke my writing. I didn’t become a bad writer, or at least I don’t think I did. Rather, I lost my sense of ownership over my writing, and it’s been some work trying to regain that.</p>
<p>And so to the point…</p>
<p>I wrote this post because I loved creating the artwork, and it’s written the way it is written because it makes me happy to write again. That’s it. It’s something I wrote because I want to own my words again. There’s no “take home message”. There’s no “call to action”. You can love it, or hate it, or ignore it. That’s okay: I didn’t write it for you.</p>
<p>I wrote it for me.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Also Lev Grossman I guess, but honestly Hale Appleman’s delivery is so good that I cannot possibly attribute the quote to anyone except Eliot.↩︎</p></li>
<li id="fn2"><p>Why 14? No reason. I got to the end of the post after tinkering with lots of things and with lots of seeds, was happy with what I’d coded, and then asked my daughter to give me a random number that I could use for this post, because I didn’t want it to seem like I’d engaged in “seed hacking” to make it look pretty.↩︎</p></li>
<li id="fn3"><p>There’s an obvious parallel between seed hacking in generative art and p-hacking in statistics, but I refuse to go down that path. I’ve had so many tediously overconfident men in oPeN sCIenCe lecture me at length on p-hacking, and berating me for my quEStionAbLe reSeArcH PRaCtiCe when I’ve suggested that in real world inference there are cases where statistics should not adhere strictly to the rules laid down by Jerzy Neyman that… well, quite frankly, at this point in my life I loathe the whole concept of <img src="https://latex.codecogs.com/png.latex?p"> and everyone who talks about it.↩︎</p></li>
<li id="fn4"><p>Yes, <em>men</em>. Without fail, the people berating me for daring to know something about the limits of classical null hypothesis tests have been men. I’ll let you know if that changes, but in my life experience to date, mansplaining seems to be an extremely gendered phenomenon.↩︎</p></li>
<li id="fn5"><p>It’s actually a slightly different kind of object called a “long grid” but for now I’ll treat it like a tibble↩︎</p></li>
<li id="fn6"><p>Okay that’s not quite correct. The <code>as.array()</code> method works here because we created this object by calling <code>ambient::long_grid()</code> rather than <code>tidyr::expand_grid()</code> or the <code>expand.grid()</code> function in base R. When you call <code>expand_grid()</code> all you’re doing is creating a regular data frame (or tibble), and you can redefine the x and y values however you like. With a long grid object, however, you’re creating a somewhat different data structure that is <em>required</em> to form a grid. You can’t modify the x and y values the same way you would for a tibble, because those values are part of the underlying data structure. That seems like an odd restriction the first time you encounter it, but the fact that the grid itself is immutable is what makes it trivially easy to call <code>as.array()</code> in this context.↩︎</p></li>
<li id="fn7"><p>Easter egg for the three people who know the reference: I rather suspect that what I’ve done in this section is create the artistic version of the “linear ballistic accumulator” model of human choice behaviour, where my original system was a full fledged diffusion model. Happily for all concerned, neither Scott nor Roger are going to read this post.↩︎</p></li>
<li id="fn8"><p>Fortunately for me, this is an art post and not a reGIStEreD RepORt, so I’m allowed to talk freely about this deconstruction. In a former life I’d have spent about three months arguing with petty reviewers about the distinction between deconstruction and HARKing, and frankly life is too short for that bollocks.↩︎</p></li>
<li id="fn9"><p>Fine. Yes, if you look closely at the code you can see I’m doing more than simply applying a curl field. But please… allow me some latitude here. This is a blog post not a dissertation.↩︎</p></li>
<li id="fn10"><p>Presumably using some magic spray paint that coats every layer of the folded fabric, not just the topmost layer!↩︎</p></li>
<li id="fn11"><p>Okay yes the metaphor is a bit strained, but it’s the best I can think of when what I’m actually doing is constructing a surjective mapping from the base space to the embedding space, adding noise to the mapped values, and then using “magic” to pull back to the base space because I’m a good girl who doesn’t throw away the original values when she performs a many-to-one trick.↩︎</p></li>
<li id="fn12"><p>Yes I’m aware that the “many to one” jokes write themselves at this point but as I mentioned previously I am a good girl so I shan’t continue this line of thought.↩︎</p></li>
<li id="fn13"><p>There is an obvious metaphor for the queer experience of living in a world defined by cisheteronormativity here, but I’ll let you flesh out the rest of the mapping on your own. You’re a clever person, you know how to read between the lines, right?↩︎</p></li>
<li id="fn14"><p>I grew up in a small mining town, four hours drive from the nearest city (sort of: technically it was the town founded around the refinery, and the mines were about an hour away). It was traumatic, and there are not enough drugs in the world to make me elaborate.↩︎</p></li>
<li id="fn15"><p>Which, let’s be frank, is saying quite a lot.↩︎</p></li>
<li id="fn16"><p>A note for foreigners: if you are an Australian male-attracted person of a certain age, you immediately understand. It doesn’t matter if you’re a bisexual, a straight woman, or a gay man. It doesn’t matter if you got hooked by Beasts of Bourbon, or by Cruel Sea, or by the solo acts. There’s nothing specific to it. There are no invariants to uncover except Tex Perkins.↩︎</p></li>
<li id="fn17"><p>The very earliest version of the system appeared as a throwaway piece in the <a href="https://art.djnavarro.net/gallery/quarantine/">quarantine moods</a> series, then became frozen in the <a href="https://art.djnavarro.net/gallery/ice-floes/">ice floes</a> system, re-emerged as the <a href="https://art-from-code.netlify.app/day-1/session-4/#fractured-terrain">fractured terrain</a> section in the <em>Art From Code</em> workshop, and then eventually became its own <a href="https://art.djnavarro.net/gallery/broken-lands/">thing</a>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Danielle Navarro},
  title = {Shattered Landscapes},
  date = {2023-03-13},
  url = {https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2023. <span>“Shattered Landscapes.”</span> March 13,
2023. <a href="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes">https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/index.html</guid>
  <pubDate>Sun, 12 Mar 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-03-13_shattered-landscapes/cover.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Fun and games with p5.js and observable.js in quarto</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-01-14_p5js/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>Be sweet to me, baby <br> I wanna believe in you <br> I wanna believe <br> Be sweet <br> Be sweet to me, baby <br> I wanna believe in you <br> I wanna believe in something <br> &nbsp; – Japanese Breakfast</p>
</blockquote>
<p>Okay, so… I write this blog using <a href="https://quarto.org/">quarto</a>, and quarto has native support for <a href="https://observablehq.com">observable.js</a> … and observable.js supports third-party javascript libraries such as <a href="https://p5js.org/">p5.js</a> executing in code cells… so, like… I can use p5.js to create generative art, inside the browser, inside a blog post? Right?</p>
<p>Apparently the answer to that is yes.</p>
<p>There is but one tiny problem. I don’t know anything about observable.js or p5.js. I supposed I’d best remedy that.</p>
<section id="enabling-p5js" class="level2">
<h2 class="anchored" data-anchor-id="enabling-p5js">Enabling p5js</h2>
<p>The first step in the process is enabling p5.js, which is not one of the core libraries in observable, and is not immediately available. To use a third-party library that exists as an <a href="https://docs.npmjs.com/about-packages-and-modules">NPM modules</a> we can import it using <code>require()</code>.</p>
<div class="cell" data-output="all">
<div class="sourceCode cell-code" id="cb1" data-startfrom="48" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 47;"><span id="cb1-48">P5 <span class="op" style="color: #5E5E5E;">=</span> <span class="pp" style="color: #AD0000;">require</span>(<span class="st" style="color: #20794D;">"p5"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-1" data-nodetype="declaration">

</div>
</div>
</div>
<p>Just like that, thanks to the joy of the <a href="https://www.jsdelivr.com/">jsDelivr CDN</a>, p5.js is now available to me in this post.</p>
<p>Well, sort of. As you can see from the output,<sup>1</sup> the <code>P5</code> object is a function that takes three inputs. To do anything useful with it, I’ll use a trick I learned from <a href="https://observablehq.com/@tmcw/p5">this fabulous notebook by Tom MacWright</a> to run p5.js in “instance mode”. Normally, p5.js works by defining a lot of global objects. That works fine if you’re only doing one “sketch” on a single page, but it’s not so clean if you want to write modular code where a single page (like this one) could contain multiple p5.js sketches.</p>
<p>To run p5.js in instance mode, and in a way that plays nicely with observable.js and quarto, I’ll define <code>createSketch</code> as a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">generator function</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" data-startfrom="58" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 57;"><span id="cb2-58"><span class="kw" style="color: #003B4F;">function</span><span class="op" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">createSketch</span>(sketch) {</span>
<span id="cb2-59">  <span class="kw" style="color: #003B4F;">const</span> element <span class="op" style="color: #5E5E5E;">=</span> DOM<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">element</span>(<span class="st" style="color: #20794D;">'div'</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-60">  <span class="kw" style="color: #003B4F;">yield</span> element<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-61">  <span class="kw" style="color: #003B4F;">const</span> instance <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">P5</span>(sketch<span class="op" style="color: #5E5E5E;">,</span> element<span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">true</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-62">  <span class="cf" style="color: #003B4F;">try</span> {</span>
<span id="cb2-63">    <span class="cf" style="color: #003B4F;">while</span> (<span class="kw" style="color: #003B4F;">true</span>) {</span>
<span id="cb2-64">      <span class="kw" style="color: #003B4F;">yield</span> element<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-65">    }</span>
<span id="cb2-66">  } <span class="cf" style="color: #003B4F;">finally</span> {</span>
<span id="cb2-67">    instance<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">remove</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-68">  }</span>
<span id="cb2-69">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-2" data-nodetype="declaration">

</div>
</div>
</div>
<p>Using this approach, each instantiation of <code>P5</code> is attached to a div element that created when <code>createSketch</code> is called. If you want to know more about how this approach works, it’s probably best to go to the original source that I adapted it from, because Tom has commented it and explained it nicely: <a href="https://observablehq.com/@tmcw/p5">observablehq.com/<span class="citation" data-cites="tmcw/p5">@tmcw/p5</span></a></p>
</section>
<section id="donut-1" class="level2">
<h2 class="anchored" data-anchor-id="donut-1">Donut 1</h2>
<p>In keeping with the tradition I’ve set up in the last few blog posts, all the examples are donut themed.<sup>2</sup> When calling <code>createSketch</code> I’ll pass an anonymous function that takes a single argument <code>s</code>, the document element to which all the p5 functions are attached. I’ll use the <a href="https://www.w3schools.com/js/js_arrow_function.asp">arrow notation</a>, so my code is going to look something like this:</p>
<div class="cell" data-eval="false">
<div class="sourceCode cell-code" id="cb3" data-startfrom="80" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 79;"><span id="cb3-80"><span class="fu" style="color: #4758AB;">createSketch</span>(s <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb3-81">  <span class="co" style="color: #5E5E5E;">// add some p5.js code </span></span>
<span id="cb3-82">})</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-3" data-nodetype="expression">

</div>
</div>
</div>
<p>The idea in p5.js is all the work is done by two functions. The <code>setup</code> function includes code that is called only once, and if you want to draw static images you can do everything at the setup stage. In contrast the <code>draw</code> function is called repeatedly, so you can use that to add dynamic elements.</p>
<p>Here’s an example of a static sketch that draws a single donut shape using two circles:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" data-startfrom="90" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 89;"><span id="cb4-90"><span class="fu" style="color: #4758AB;">createSketch</span>(s <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb4-91">    s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">setup</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb4-92">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">createCanvas</span>(<span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-93">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span>(<span class="st" style="color: #20794D;">"black"</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-94">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fill</span>(<span class="st" style="color: #20794D;">"red"</span>)<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">circle</span>(<span class="dv" style="color: #AD0000;">250</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">250</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">100</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-95">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fill</span>(<span class="st" style="color: #20794D;">"black"</span>)<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">circle</span>(<span class="dv" style="color: #AD0000;">250</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">250</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">30</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-96">    }<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-97">  }</span>
<span id="cb4-98">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-4" data-nodetype="expression">

</div>
</div>
</div>
<p>In this example:</p>
<ul>
<li><code>createCanvas</code> creates the drawing area in which the sketch will be rendered. Arguments are the width and height in pixels</li>
<li><code>background</code> sets the background colour. The colour specification is flexible: it can be a recognised colour name, a hex string, or a numeric RGB specification</li>
<li><code>fill</code> sets the fill colour</li>
<li><code>circle</code> draws a circle: the first two arguments specify the origin of the circle, and the third argument specifies the diameter</li>
</ul>
<p>I’ve used <a href="https://dev.to/isiakaabd/method-chaining-in-javascript-154a">method chaining</a> here to remind me that the first <code>fill</code> and the first <code>circle</code> go together: writing <code>s.fill("red").circle(250, 250, 100)</code> on a single line helps me group code together conceptually. It’s mostly for my own convenience though.</p>
</section>
<section id="donut-2" class="level2">
<h2 class="anchored" data-anchor-id="donut-2">Donut 2</h2>
<p>Okay Danielle, that’s nice but it’s not <em>that</em> nice. Can we do something a little more interesting? Maybe with some dynamics? Well okay, Other Danielle, since you asked so sweetly, here’s an example with a moving circle that changes colour and traces out a donut shape:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" data-startfrom="115" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 114;"><span id="cb5-115"><span class="fu" style="color: #4758AB;">createSketch</span>(s <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb5-116">  </span>
<span id="cb5-117">    s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">setup</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb5-118">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">createCanvas</span>(<span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">500</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-119">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span>(<span class="dv" style="color: #AD0000;">0</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-120">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">noStroke</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-121">    }<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-122">    </span>
<span id="cb5-123">    s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">draw</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb5-124">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">translate</span>(</span>
<span id="cb5-125">        <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">*</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">cos</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">millis</span>() <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">.</span><span class="bn" style="color: #AD0000;">001</span> <span class="op" style="color: #5E5E5E;">*</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">PI</span>)<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb5-126">        <span class="dv" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">*</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">sin</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">millis</span>() <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">.</span><span class="bn" style="color: #AD0000;">001</span> <span class="op" style="color: #5E5E5E;">*</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">PI</span>)<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb5-127">      )<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-128">      <span class="cf" style="color: #003B4F;">if</span> (s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">random</span>(<span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">1</span>) {</span>
<span id="cb5-129">        s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fill</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">random</span>(<span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">255</span>))<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-130">      }</span>
<span id="cb5-131">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">circle</span>(<span class="dv" style="color: #AD0000;">250</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">250</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">100</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-132">    }<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb5-133">    </span>
<span id="cb5-134">  }</span>
<span id="cb5-135">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-5" data-nodetype="expression">

</div>
</div>
</div>
<p>This example makes use of some geometry functions included in p5.j (<code>sin</code>, <code>cos</code>, <code>translate</code>), a random number generator (<code>random</code>), and timer that returns the number of milliseconds since the sketch started (<code>millis</code>). These are all documented in the <a href="https://p5js.org/reference/">p5.js reference</a>.</p>
</section>
<section id="donut-3" class="level2">
<h2 class="anchored" data-anchor-id="donut-3">Donut 3</h2>
<p>For the third example we’ll introduce some fonts, adapting an example from <a href="https://observablehq.com/@tmcw/p5">observablehq.com/<span class="citation" data-cites="tmcw/p5">@tmcw/p5</span></a>. First, I’ll add some CSS to import the Courgette font:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb6-1"><span class="im" style="color: #00769E;">@import</span> <span class="fu" style="color: #4758AB;">url(</span><span class="st" style="color: #20794D;">https://fonts.googleapis.com/css?family=Courgette</span><span class="fu" style="color: #4758AB;">)</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<style type="text/css">
@import url(https://fonts.googleapis.com/css?family=Courgette);
</style>
</div>
<p>Now we can use that font in a p5.js scrolling window:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" data-startfrom="152" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 151;"><span id="cb7-152"><span class="fu" style="color: #4758AB;">createSketch</span>(s <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb7-153">  </span>
<span id="cb7-154">    s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">setup</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb7-155">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">createCanvas</span>(<span class="dv" style="color: #AD0000;">746</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">300</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-156">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textFont</span>(<span class="st" style="color: #20794D;">'Courgette'</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-157">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textStyle</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">BOLD</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-158">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textAlign</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">CENTER</span><span class="op" style="color: #5E5E5E;">,</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">CENTER</span>)</span>
<span id="cb7-159">    }<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-160">    </span>
<span id="cb7-161">    s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">draw</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb7-162">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">translate</span>(</span>
<span id="cb7-163">        s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">millis</span>() <span class="op" style="color: #5E5E5E;">*</span> (<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="op" style="color: #5E5E5E;">%</span> (s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">width</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1000</span>)<span class="op" style="color: #5E5E5E;">,</span> </span>
<span id="cb7-164">        s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">height</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-165">      )<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-166">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span>(<span class="st" style="color: #20794D;">'#222222'</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-167">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fill</span>(<span class="st" style="color: #20794D;">'#DC3F74'</span>)<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">textSize</span>(<span class="dv" style="color: #AD0000;">100</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-168">      s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">text</span>(<span class="st" style="color: #20794D;">'Donuts: A Hole World'</span><span class="op" style="color: #5E5E5E;">,</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">width</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">500</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-169">    }<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb7-170">    </span>
<span id="cb7-171">  }</span>
<span id="cb7-172">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-6" data-nodetype="expression">

</div>
</div>
</div>
<p>Could life be any more thrilling than this?</p>
</section>
<section id="donut-4" class="level2">
<h2 class="anchored" data-anchor-id="donut-4">Donut 4</h2>
<p>Well, maybe it can. We could make it a little more interesting by using webGL to move our donut plots into the… THIRD DIMENSION! (Gasp!)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" data-startfrom="184" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 183;"><span id="cb8-184"><span class="fu" style="color: #4758AB;">createSketch</span>(s <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb8-185"></span>
<span id="cb8-186">  s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">setup</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb8-187">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">createCanvas</span>(<span class="dv" style="color: #AD0000;">746</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">746</span><span class="op" style="color: #5E5E5E;">,</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">WEBGL</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-188">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">noStroke</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-189">  }</span>
<span id="cb8-190"></span>
<span id="cb8-191">  s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">draw</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb8-192"></span>
<span id="cb8-193">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">background</span>(<span class="dv" style="color: #AD0000;">0</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-194"></span>
<span id="cb8-195">    <span class="kw" style="color: #003B4F;">let</span> locX <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">mouseX</span> <span class="op" style="color: #5E5E5E;">-</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">height</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-196">    <span class="kw" style="color: #003B4F;">let</span> locY <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">mouseY</span> <span class="op" style="color: #5E5E5E;">-</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">width</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span>  </span>
<span id="cb8-197">    </span>
<span id="cb8-198">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">ambientLight</span>(<span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">60</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-199">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">pointLight</span>(<span class="dv" style="color: #AD0000;">190</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">80</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">190</span><span class="op" style="color: #5E5E5E;">,</span> locX<span class="op" style="color: #5E5E5E;">,</span> locY<span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">100</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-200">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">pointLight</span>(<span class="dv" style="color: #AD0000;">80</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">80</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">190</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">100</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-201">  </span>
<span id="cb8-202">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">specularMaterial</span>(<span class="dv" style="color: #AD0000;">255</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-203">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotateX</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">frameCount</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.01</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-204">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">rotateY</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">frameCount</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.01</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-205">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">torus</span>(<span class="dv" style="color: #AD0000;">150</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">80</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">64</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-206">  }</span>
<span id="cb8-207"></span>
<span id="cb8-208">})</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-7" data-nodetype="expression">

</div>
</div>
</div>
<p>If you move the mouse over the donut<sup>3</sup> you’ll see that the light source moves with it.</p>
</section>
<section id="donut-5" class="level2">
<h2 class="anchored" data-anchor-id="donut-5">Donut 5</h2>
<p>For the final example, I’ll do a tiny bit of object-oriented programming. Inspired by a generative art course by Bernat Ferragut (<a href="https://ga-course.surge.sh/">ga-course.surge.sh</a>) that I was skimming yesterday, I’ll define a <code>Dot</code> class that creates a particle that moves around on the canvas and has the ability to bounce off circular boundaries:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" data-startfrom="220" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 219;"><span id="cb9-220"><span class="kw" style="color: #003B4F;">class</span> Dot {</span>
<span id="cb9-221">  <span class="fu" style="color: #4758AB;">constructor</span>(sketch<span class="op" style="color: #5E5E5E;">,</span> x<span class="op" style="color: #5E5E5E;">,</span> y<span class="op" style="color: #5E5E5E;">,</span> colour<span class="op" style="color: #5E5E5E;">,</span> size) {</span>
<span id="cb9-222">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span> <span class="op" style="color: #5E5E5E;">=</span> sketch<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-223">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">x</span> <span class="op" style="color: #5E5E5E;">=</span> x <span class="op" style="color: #5E5E5E;">|</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-224">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">y</span> <span class="op" style="color: #5E5E5E;">=</span> y <span class="op" style="color: #5E5E5E;">|</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-225">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">colour</span> <span class="op" style="color: #5E5E5E;">=</span> colour<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-226">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">size</span> <span class="op" style="color: #5E5E5E;">=</span> size<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-227">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">velX</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">random</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-228">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">velY</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">random</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-229">  }</span>
<span id="cb9-230"></span>
<span id="cb9-231">  <span class="fu" style="color: #4758AB;">on</span>() {</span>
<span id="cb9-232">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">noStroke</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-233">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">fill</span>(<span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">colour</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-234">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">circle</span>(<span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">x</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">y</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">size</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-235">  }</span>
<span id="cb9-236"></span>
<span id="cb9-237">  <span class="fu" style="color: #4758AB;">move</span>() {</span>
<span id="cb9-238">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">x</span> <span class="op" style="color: #5E5E5E;">+=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">velX</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-239">    <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">y</span> <span class="op" style="color: #5E5E5E;">+=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">velY</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-240">  }</span>
<span id="cb9-241">  </span>
<span id="cb9-242">  <span class="fu" style="color: #4758AB;">bounce</span>(radius<span class="op" style="color: #5E5E5E;">,</span> inside) {</span>
<span id="cb9-243">    <span class="kw" style="color: #003B4F;">let</span> x <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">x</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">width</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-244">    <span class="kw" style="color: #003B4F;">let</span> y <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">y</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">height</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-245">    <span class="cf" style="color: #003B4F;">if</span> (</span>
<span id="cb9-246">      inside <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> x<span class="op" style="color: #5E5E5E;">*</span>x <span class="op" style="color: #5E5E5E;">+</span> y<span class="op" style="color: #5E5E5E;">*</span>y <span class="op" style="color: #5E5E5E;">&gt;</span> radius <span class="op" style="color: #5E5E5E;">*</span> radius <span class="op" style="color: #5E5E5E;">||</span></span>
<span id="cb9-247">      <span class="op" style="color: #5E5E5E;">!</span>inside <span class="op" style="color: #5E5E5E;">&amp;&amp;</span> x<span class="op" style="color: #5E5E5E;">*</span>x <span class="op" style="color: #5E5E5E;">+</span> y<span class="op" style="color: #5E5E5E;">*</span>y <span class="op" style="color: #5E5E5E;">&lt;</span> radius <span class="op" style="color: #5E5E5E;">*</span> radius</span>
<span id="cb9-248">    ) {</span>
<span id="cb9-249">    </span>
<span id="cb9-250">      <span class="co" style="color: #5E5E5E;">// https://math.stackexchange.com/a/611836</span></span>
<span id="cb9-251">      <span class="kw" style="color: #003B4F;">let</span> nx <span class="op" style="color: #5E5E5E;">=</span> x <span class="op" style="color: #5E5E5E;">/</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">sqrt</span>(x<span class="op" style="color: #5E5E5E;">*</span>x <span class="op" style="color: #5E5E5E;">+</span> y<span class="op" style="color: #5E5E5E;">*</span>y)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-252">      <span class="kw" style="color: #003B4F;">let</span> ny <span class="op" style="color: #5E5E5E;">=</span> y <span class="op" style="color: #5E5E5E;">/</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">s</span><span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">sqrt</span>(x<span class="op" style="color: #5E5E5E;">*</span>x <span class="op" style="color: #5E5E5E;">+</span> y<span class="op" style="color: #5E5E5E;">*</span>y)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-253">      <span class="kw" style="color: #003B4F;">let</span> vx <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">velX</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-254">      <span class="kw" style="color: #003B4F;">let</span> vy <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">velY</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-255">      <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">velX</span> <span class="op" style="color: #5E5E5E;">=</span> (ny<span class="op" style="color: #5E5E5E;">*</span>ny <span class="op" style="color: #5E5E5E;">-</span> nx<span class="op" style="color: #5E5E5E;">*</span>nx)<span class="op" style="color: #5E5E5E;">*</span>vx <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>nx<span class="op" style="color: #5E5E5E;">*</span>ny<span class="op" style="color: #5E5E5E;">*</span>vy<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-256">      <span class="kw" style="color: #003B4F;">this</span><span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">velY</span> <span class="op" style="color: #5E5E5E;">=</span> (nx<span class="op" style="color: #5E5E5E;">*</span>nx <span class="op" style="color: #5E5E5E;">-</span> ny<span class="op" style="color: #5E5E5E;">*</span>ny)<span class="op" style="color: #5E5E5E;">*</span>vy <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>nx<span class="op" style="color: #5E5E5E;">*</span>ny<span class="op" style="color: #5E5E5E;">*</span>vx<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-257">    </span>
<span id="cb9-258">    }</span>
<span id="cb9-259">  }</span>
<span id="cb9-260">  </span>
<span id="cb9-261">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-8" data-nodetype="declaration">

</div>
</div>
</div>
<p>Naturally, I will use this to draw a donut:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" data-startfrom="268" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 267;"><span id="cb10-268"><span class="fu" style="color: #4758AB;">createSketch</span>(s <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb10-269"></span>
<span id="cb10-270">  <span class="kw" style="color: #003B4F;">let</span> n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-271">  <span class="kw" style="color: #003B4F;">let</span> dot<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-272">  <span class="kw" style="color: #003B4F;">let</span> dotList <span class="op" style="color: #5E5E5E;">=</span> []<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-273">  <span class="kw" style="color: #003B4F;">let</span> palette <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb10-274">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">color</span>(<span class="st" style="color: #20794D;">"#6B1B00"</span>)<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb10-275">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">color</span>(<span class="st" style="color: #20794D;">"#AE8B70"</span>)<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb10-276">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">color</span>(<span class="st" style="color: #20794D;">"#F9FEFB"</span>)<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb10-277">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">color</span>(<span class="st" style="color: #20794D;">"#56382D"</span>) </span>
<span id="cb10-278">  ]<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-279"></span>
<span id="cb10-280">  s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">setup</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb10-281">    s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">createCanvas</span>(<span class="dv" style="color: #AD0000;">746</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">746</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-282">    <span class="cf" style="color: #003B4F;">for</span>(<span class="kw" style="color: #003B4F;">let</span> i <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span> i <span class="op" style="color: #5E5E5E;">&lt;</span> n<span class="op" style="color: #5E5E5E;">;</span> i<span class="op" style="color: #5E5E5E;">++</span>) {</span>
<span id="cb10-283">      <span class="kw" style="color: #003B4F;">let</span> angle <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">random</span>(<span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">,</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">TWO_PI</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-284">      <span class="kw" style="color: #003B4F;">let</span> radius <span class="op" style="color: #5E5E5E;">=</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">width</span> <span class="op" style="color: #5E5E5E;">*</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">random</span>(<span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">12</span><span class="op" style="color: #5E5E5E;">,</span> <span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">33</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-285">      dotList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">push</span>(dot <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">new</span> <span class="fu" style="color: #4758AB;">Dot</span>(</span>
<span id="cb10-286">        s<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb10-287">        s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">width</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">cos</span>(angle) <span class="op" style="color: #5E5E5E;">*</span> radius<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb10-288">        s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">height</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">sin</span>(angle) <span class="op" style="color: #5E5E5E;">*</span> radius<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb10-289">        s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">random</span>(palette)<span class="op" style="color: #5E5E5E;">,</span></span>
<span id="cb10-290">        s<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">random</span>(<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb10-291">      ))<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-292">    }</span>
<span id="cb10-293">  }<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-294">    </span>
<span id="cb10-295">  s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">draw</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">function</span>() {</span>
<span id="cb10-296">    dotList<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">map</span>(dot <span class="kw" style="color: #003B4F;">=&gt;</span> {</span>
<span id="cb10-297">      dot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">on</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-298">      dot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">move</span>()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-299">      dot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">bounce</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">35</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">true</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-300">      dot<span class="op" style="color: #5E5E5E;">.</span><span class="fu" style="color: #4758AB;">bounce</span>(s<span class="op" style="color: #5E5E5E;">.</span><span class="at" style="color: #657422;">width</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="op" style="color: #5E5E5E;">.</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">,</span> <span class="kw" style="color: #003B4F;">false</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-301">    })<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-302">  }<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb10-303">})</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-9" data-nodetype="expression">

</div>
</div>
</div>
<p>Mmmm…. donuts.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>An assignment like this would not normally produce any visible output for an observable.js code cell within in a quarto document, but I’ve set <code>output: all</code> for expository purposes.↩︎</p></li>
<li id="fn2"><p>A tradition that, like most things, will last only until I get bored with it.↩︎</p></li>
<li id="fn3"><p>I can’t make up my mind if the colour scheme implies this is a bisexual donut or a trans donut. Oh wait, it’s probably both.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Danielle Navarro},
  title = {Fun and Games with P5.js and Observable.js in Quarto},
  date = {2023-01-14},
  url = {https://blog.djnavarro.net/posts/2023-01-14_p5js},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2023. <span>“Fun and Games with P5.js and
Observable.js in Quarto.”</span> January 14, 2023. <a href="https://blog.djnavarro.net/posts/2023-01-14_p5js">https://blog.djnavarro.net/posts/2023-01-14_p5js</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>P5</category>
  <category>Observable</category>
  <category>Javascript</category>
  <category>Quarto</category>
  <guid>https://blog.djnavarro.net/posts/2023-01-14_p5js/index.html</guid>
  <pubDate>Fri, 13 Jan 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-01-14_p5js/donut.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Deploying R with kubernetes</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>Me: ooh I made a kubernetes app <br> 10yo: I made a paper dragon <br> Me: yeah… yours is cooler <br> &nbsp; – My daughter, reminding me that perspective is a thing</p>
</blockquote>
<p>Story time. There was a very weird moment in machine learning history, about 20 years ago, when the probabilistic AI folks were completely obsessed with Bayesian nonparametrics, and a disproportionate number of papers at NeurIPS had titles like “[Cutesy prefix]: An infinite dimensional model of [something really boring]”. In most cases, you’d dig into the paper and discover that they hadn’t done anything very special. All they’d done is implement a Bayesian model of [boring thing] that was ambiguous about the number of [components], and instead of thinking about what prior constraints make sense for the problem they were trying to solve, the authors used a <a href="https://en.wikipedia.org/wiki/Chinese_restaurant_process">Chinese restaurant process</a> (CRP) to specify the conditional prior distribution over allocations of observations to components. The CRP has the mildly-interesting property that for any finite sample size there is a non-negligible conditional probability that the next observation belongs to a hitherto unobserved component, and asymptotically the partitions over observations it generates have a countably infinite number of components. Alas, exactly zero of these papers happened to have an infinitely large data set to train the model on, and without fail the results in the papers didn’t appear to have anything “infinite dimensional” about them whatsoever.</p>
<p>I say this with love and gentleness, dear reader, because I wrote quite a few of those papers myself.</p>
<p>Why do I tell this story in a blog post that has absolutely nothing to do with machine learning, statistics, or Bayesian inference? Because in a fit of pique, somewhere around 2006, I decided to do the damned reading myself and learned quite a lot of Bayesian nonparametrics. Not because I thought it would be useful, but because I was curious and I was getting extremely irritated at overconfident machine learning boys telling me that as a mere psychologist I couldn’t possibly understand the depth of their thinking.</p>
<p>Which brings me, naturally enough, to <a href="https://kubernetes.io/">kubernetes</a>.</p>
<p><br></p>
<section id="ggplot2-on-kubernetes" class="level2">
<h2 class="anchored" data-anchor-id="ggplot2-on-kubernetes">ggplot2 on kubernetes</h2>
<p>Let’s start at the ending, shall we? The art shown below is generated at <a href="https://donut.djnavarro.net">donut.djnavarro.net</a>, and it is more-or-less unique. The site is designed to serve a different image every time it is accessed, using the timestamp as the seed to a generative art system written in R with ggplot2. If you refresh this page, the artwork will change:</p>
<a href="https://donut.djnavarro.net"><img width="100%" src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/https:/donut.djnavarro.net" title="donut.djnavarro.net"></a>
<p><br></p>
<p>Under the hood, the site is a kubernetes app running containerised R code with google kubernetes engine. Sounds fancy, right?</p>
<p>Well, maybe. Shall we take a look at how it works? Perhaps, like so many other things in this world, it will turn out not to be anywhere near as complicated as it is made out to be.</p>
<p><br></p>
</section>
<section id="um.-what-is-kubernetes-do-i-care" class="level2">
<h2 class="anchored" data-anchor-id="um.-what-is-kubernetes-do-i-care">Um. What is kubernetes? Do I care?</h2>
<p>There’s nothing I love more than looking at the website for a software tool and trying to work out what it does by reading how the developers have chosen to describe it. On the <a href="https://kubernetes.io/">kubernetes</a> website they’ve gone with the headline <em>“Production-Grade Container Orchestration”</em>, and started with this:</p>
<blockquote class="blockquote">
<p>Kubernetes, also known as K8s, is an open-source system for automating deployment, scaling, and management of containerized applications.</p>
</blockquote>
<p>As opening lines go it wouldn’t get you a lot of attention on grindr<sup>1</sup> but context makes a difference and it’s not so terrible as a description of what kubernetes does. It’s a useful tool if you need to deploy an application on a cluster<sup>2</sup> and have that application run smoothly as you “scale” your cluster by adding more “nodes”<sup>3</sup> to the cluster. For the application I’m about to write, kubernetes is overkill. I don’t actually need kubernetes to run something this simple, but this is a learning exercise. I’m doing it so that I can familiarise myself with core concepts. When I get to the part of the post that actually <em>does</em> something with kubernetes I’ll start introducing terminology, but for now that’s enough for us.</p>
<p>Should you care as an R user? I mean, probably not. If you want a proper answer, Roel Hogervorst has an excellent blog post called <a href="https://www.r-bloggers.com/2022/04/wtf-is-kubernetes-and-should-i-care-as-r-user/"><em>“WTF is Kubernetes and Should I Care as R User?”</em></a> I won’t duplicate content here: you should read the original post. But the short answer is that you probably won’t need to run your own application using kubernetes, but you might need to contribute code to a larger application that uses it. If so, you may want to play around with kubernetes to make sure you understand what it does.</p>
<p><br></p>
</section>
<section id="write-the-r-code" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="write-the-r-code">Write the R code</h2>
<blockquote class="blockquote">
<p>Likes to watch me in the glass room, bathroom <br> Chateau Marmont, slippin’ on my red dress, puttin’ on my makeup <br> Glass room, perfume, cognac, lilac fumes <br> Says it feels like heaven to him <br> &nbsp; – Lana Del Rey<sup>4</sup></p>
</blockquote>
<p>Let’s begin at the beginning. Anytime you want to write something, it helps to have something to say. There is nothing more tiresome than an op-ed writer trying to fill out 1000 words to make the Saturday paper deadline, but tech writing that tries to demonstrate a tool<sup>5</sup> without anything even remotely resembling an application runs a very close second. So let’s at least <em>pretend</em> we have a use case for this yeah?</p>
<p>In real life I am an unemployed 40-something woman who smokes and drinks too much and makes very poor choices around men, but in my spare moments I make <a href="https://art.djnavarro.net/">generative art</a> using R. It’s an extremely unprofitable hobby<sup>6</sup> but it’s not completely without market value. Among other things the lovely folks at Posit were kind enough to pay me to put together an <a href="https://art-from-code.netlify.app">“art from code”</a> workshop last year, and thanks to their kindness and my weird priorities there is now a nice little online tutorial that you can use to learn how to make generative art in R. What I’m going to do in this post is build a little kubernetes app that creates generative in R. It won’t be very fancy, but hopefully you can see how an app like this could be expanded<sup>7</sup> to create a platform for “long form generative art” with R, not dissimilar to what <a href="https://www.artblocks.io/">artblocks</a> or <a href="https://www.fxhash.xyz/">fxhash</a> allow generative artists to do with javascript. The artist supplies code (in this case using R) that generates artwork, and the server uses that code to generate an arbitrary number of pieces that… idk, I guess you could sell them? Whatever. Do I look like a capitalist to you?</p>
<p>To build something like this we’ll need some R code that creates generative art. I won’t try to make anything too fancy here. In fact, I’ll reuse code for the “donuts” system I used in my <a href="https://blog.djnavarro.net/queue/">multi-threaded task queues post</a>. It’s a good choice for this application because the donuts system is something that is extremely easy to implement in R because the ggplot2 package provides tooling for creating data visualisations that use polar geometry<sup>8</sup></p>
<p>Here’s how you build the system. I won’t go into detail because this system is a very minor variation on <a href="https://art-from-code.netlify.app/day-1/session-1/#composition">this one in my art-from-code tutorial</a>, but here’s the gist. First, the plot is going to need a colour scheme, so we’ll define a function that samples a palette randomly with the assistance of the ggthemes package:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb1" data-startfrom="4" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 3;"><span id="cb1-4">sample_canva <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">seed =</span> <span class="cn" style="color: #8f5902;">NULL</span>) {</span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;">set.seed</span>(seed)</span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;">sample</span>(ggthemes<span class="sc" style="color: #5E5E5E;">::</span>canva_palettes, <span class="dv" style="color: #AD0000;">1</span>)[[<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb1-7">}</span></code></pre></div>
</div>
</div>
<p>Next, we’ll have a function that generates a table full of random numbers that we will later on map onto various plot aesthetics to make a pretty picture:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb2" data-startfrom="10" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 9;"><span id="cb2-10">sample_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">seed =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">100</span>){</span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(seed)) <span class="fu" style="color: #4758AB;">set.seed</span>(seed)</span>
<span id="cb2-12">  dat <span class="ot" style="color: #003B4F;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb2-13">    <span class="at" style="color: #657422;">x0 =</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">runif</span>(n),</span>
<span id="cb2-14">    <span class="at" style="color: #657422;">y0 =</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">runif</span>(n),</span>
<span id="cb2-15">    <span class="at" style="color: #657422;">x1 =</span> x0 <span class="sc" style="color: #5E5E5E;">+</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">runif</span>(n, <span class="at" style="color: #657422;">min =</span> <span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">max =</span> .<span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb2-16">    <span class="at" style="color: #657422;">y1 =</span> y0 <span class="sc" style="color: #5E5E5E;">+</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">runif</span>(n, <span class="at" style="color: #657422;">min =</span> <span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">max =</span> .<span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb2-17">    <span class="at" style="color: #657422;">shade =</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">runif</span>(n),</span>
<span id="cb2-18">    <span class="at" style="color: #657422;">size =</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">runif</span>(n),</span>
<span id="cb2-19">    <span class="at" style="color: #657422;">shape =</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">0</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">22</span>, <span class="at" style="color: #657422;">size =</span> n, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span>
<span id="cb2-20">  )</span>
<span id="cb2-21">}</span></code></pre></div>
</div>
</div>
<p>Now comes the part of the system that does most of the artistic work, by defining a visual layout for any plots that are created using the system:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb3" data-startfrom="24" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 23;"><span id="cb3-24">donut_style <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">data =</span> <span class="cn" style="color: #8f5902;">NULL</span>, palette) {</span>
<span id="cb3-25">  ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">ggplot</span>(</span>
<span id="cb3-26">    <span class="at" style="color: #657422;">data =</span> data,</span>
<span id="cb3-27">    <span class="at" style="color: #657422;">mapping =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb3-28">      <span class="at" style="color: #657422;">x =</span> x0,</span>
<span id="cb3-29">      <span class="at" style="color: #657422;">y =</span> y0,</span>
<span id="cb3-30">      <span class="at" style="color: #657422;">xend =</span> x1,</span>
<span id="cb3-31">      <span class="at" style="color: #657422;">yend =</span> y1,</span>
<span id="cb3-32">      <span class="at" style="color: #657422;">colour =</span> shade,</span>
<span id="cb3-33">      <span class="at" style="color: #657422;">linewidth =</span> size</span>
<span id="cb3-34">    )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-35">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">coord_polar</span>(<span class="at" style="color: #657422;">clip =</span> <span class="st" style="color: #20794D;">"off"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-36">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scale_y_continuous</span>(</span>
<span id="cb3-37">      <span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb3-38">      <span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb3-39">      <span class="at" style="color: #657422;">oob =</span> scales<span class="sc" style="color: #5E5E5E;">::</span>oob_keep</span>
<span id="cb3-40">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-41">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scale_x_continuous</span>(</span>
<span id="cb3-42">      <span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>),</span>
<span id="cb3-43">      <span class="at" style="color: #657422;">limits =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb3-44">      <span class="at" style="color: #657422;">oob =</span> scales<span class="sc" style="color: #5E5E5E;">::</span>oob_keep</span>
<span id="cb3-45">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-46">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-47">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scale_linewidth</span>(<span class="at" style="color: #657422;">range =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-48">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-49">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb3-50">      <span class="at" style="color: #657422;">panel.background =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">element_rect</span>(</span>
<span id="cb3-51">        <span class="at" style="color: #657422;">fill =</span> palette[<span class="dv" style="color: #AD0000;">1</span>], <span class="at" style="color: #657422;">colour =</span> palette[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb3-52">      )</span>
<span id="cb3-53">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-54">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">guides</span>(</span>
<span id="cb3-55">      <span class="at" style="color: #657422;">colour =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb3-56">      <span class="at" style="color: #657422;">linewidth =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb3-57">      <span class="at" style="color: #657422;">fill =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">guide_none</span>(),</span>
<span id="cb3-58">      <span class="at" style="color: #657422;">shape =</span> ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">guide_none</span>()</span>
<span id="cb3-59">    )</span>
<span id="cb3-60">}</span></code></pre></div>
</div>
</div>
<p>The last step is a function that puts it all together. The <code>donut()</code> function takes a single integer-valued input and returns a plot object that happens to look slightly pretty:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb4" data-startfrom="63" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 62;"><span id="cb4-63">donut <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(seed) {</span>
<span id="cb4-64"></span>
<span id="cb4-65">  dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample_data</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">200</span>, <span class="at" style="color: #657422;">seed =</span> seed) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-66">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">y1 =</span> y0, <span class="at" style="color: #657422;">size =</span> size <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb4-67"></span>
<span id="cb4-68">  line_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"331311"</span>, <span class="st" style="color: #20794D;">"11"</span>, <span class="st" style="color: #20794D;">"111115"</span>), <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-69"></span>
<span id="cb4-70">  pic <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">donut_style</span>(<span class="at" style="color: #657422;">palette =</span> <span class="fu" style="color: #4758AB;">sample_canva</span>(<span class="at" style="color: #657422;">seed =</span> seed)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-71">    ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_segment</span>(<span class="at" style="color: #657422;">data =</span> dat, <span class="at" style="color: #657422;">linetype =</span> line_spec)</span>
<span id="cb4-72"></span>
<span id="cb4-73">  <span class="cf" style="color: #003B4F;">if</span>(stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">&lt;</span> .<span class="dv" style="color: #AD0000;">5</span>) {</span>
<span id="cb4-74">    pic <span class="ot" style="color: #003B4F;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-75">      ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_segment</span>(</span>
<span id="cb4-76">        <span class="at" style="color: #657422;">data =</span> dat <span class="sc" style="color: #5E5E5E;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">y1 =</span> y1 <span class="sc" style="color: #5E5E5E;">-</span> .<span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">y0 =</span> y0 <span class="sc" style="color: #5E5E5E;">-</span> .<span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb4-77">        <span class="at" style="color: #657422;">linetype =</span> line_spec</span>
<span id="cb4-78">      )</span>
<span id="cb4-79">  }</span>
<span id="cb4-80">  <span class="cf" style="color: #003B4F;">if</span>(stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">&lt;</span> .<span class="dv" style="color: #AD0000;">5</span>) {</span>
<span id="cb4-81">    pic <span class="ot" style="color: #003B4F;">&lt;-</span> pic <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb4-82">      ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_segment</span>(</span>
<span id="cb4-83">        <span class="at" style="color: #657422;">data =</span> dat <span class="sc" style="color: #5E5E5E;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">y1 =</span> y1 <span class="sc" style="color: #5E5E5E;">-</span> .<span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">y0 =</span> y0 <span class="sc" style="color: #5E5E5E;">-</span> .<span class="dv" style="color: #AD0000;">4</span>),</span>
<span id="cb4-84">        <span class="at" style="color: #657422;">linetype =</span> line_spec</span>
<span id="cb4-85">      )</span>
<span id="cb4-86">  }</span>
<span id="cb4-87"></span>
<span id="cb4-88">  pic</span>
<span id="cb4-89">}</span></code></pre></div>
</div>
</div>
<p>Here it is in action:</p>
<div class="page-columns page-full">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="cf" style="color: #003B4F;">for</span>(seed <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>) <span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">donut</span>(seed))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-1.png" class="img-fluid" width="576"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-2.png" class="img-fluid" width="576"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-3.png" class="img-fluid" width="576"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-4.png" class="img-fluid" width="576"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-5.png" class="img-fluid" width="576"></p>
</div>
<div class="cell-output-display quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index_files/figure-html/donut-examples-6.png" class="img-fluid" width="576"></p>
</div>
</div>
</div>
</div>
<p>Not my finest work, but still pretty enough to be fun.</p>
<p><br></p>
</section>
<section id="expose-an-api" class="level2">
<h2 class="anchored" data-anchor-id="expose-an-api">Expose an API</h2>
<blockquote class="blockquote">
<p>Are you posting hole on main again? <br> &nbsp; – Everyone who knows me, eventually</p>
</blockquote>
<p>The next step in the process is to define a public API that specifies how visitors to the website can interact with the underlying R code. That’s not something we typically do with R code because we aren’t usually in the business of writing web applications in R, but thanks to endless joy that is the <a href="https://www.rplumber.io/">plumber</a> this task can be accomplished with a few lines of code decoration:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb6" data-startfrom="91" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 90;"><span id="cb6-91"><span class="co" style="color: #5E5E5E;">#* draws a donut plot</span></span>
<span id="cb6-92"><span class="co" style="color: #5E5E5E;">#* @serializer svg list(width = 10, height = 10)</span></span>
<span id="cb6-93"><span class="co" style="color: #5E5E5E;">#* @get /</span></span>
<span id="cb6-94"><span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">seed =</span> <span class="cn" style="color: #8f5902;">NA</span>) {</span>
<span id="cb6-95">  <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">is.na</span>(seed)) {</span>
<span id="cb6-96">    seed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>())</span>
<span id="cb6-97">  }</span>
<span id="cb6-98">  <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">donut</span>(seed))</span>
<span id="cb6-99">}</span></code></pre></div>
</div>
</div>
<p>There are a few things to note here:</p>
<ul>
<li><p>The code decoration on line 93 specifies that the function defined in lines 94-99 will be called whenever an HTML <code>GET</code> request is sent to the <code>/</code> endpoint. Or, in simpler language, whenever someone visits the main page for the website that eventually ended up being hosted at <a href="https://donut.djnavarro.net">donut.djnavarro.net</a>.</p></li>
<li><p>The code decoration on line 92 how the output from the R function (an in-memory data structure) will be serialised (to a binary stream) and transmitted to the user.<sup>9</sup> In this case, the output is a plot object that would normally be handled by the R graphics device. What I’ve used plumber to do here, is have this output converted to an svg file. It’s that svg file that the website will serve to the user.</p></li>
<li><p>Finally, notice that the function does take a <code>seed</code> argument.<sup>10</sup> I’ve set <code>NA</code> as the default value rather than the more conventional <code>NULL</code> because plumber won’t accept a <code>NULL</code> default in this context.</p></li>
</ul>
<p>Noting that all the code I’ve presented so far belongs to a file called <a href="https://github.com/djnavarro/donut/blob/main/server.R"><code>server.R</code></a> (the link goes to the github repo for this “donut” side-project), I can start the web server running locally on port 3456 like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">plumber<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plumb</span>(<span class="at" style="color: #657422;">file=</span><span class="st" style="color: #20794D;">"server.R"</span>)<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">run</span>(<span class="at" style="color: #657422;">port =</span> <span class="dv" style="color: #AD0000;">3456</span>)</span></code></pre></div>
</div>
<p><br></p>
</section>
<section id="containerise-it" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="containerise-it">Containerise it</h2>
<p>At this point in the process I have a perfectly functional webserver… that only runs on my machine which just happens to have the dependencies installed, and is only accessible locally from that machine. We’ll need to fix both of those problems.</p>
<p>Let’s start by fixing the first one by running the website from within a docker container. Under normal circumstances I’d walk you through that process, but since I wrote a <a href="https://blog.djnavarro.net/playing-with-docker/">long blog post about docker</a> just the other day, I’ll jump straight to showing you the <a href="https://github.com/djnavarro/donut/blob/main/Dockerfile"><code>Dockerfile</code></a>:</p>
<div class="column-page-right">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Dockerfile</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb8-1"><span class="kw" style="color: #003B4F;">FROM</span> rocker/r-ver:4.2.2</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">LABEL</span> org.opencontainers.image.source <span class="st" style="color: #20794D;">"https://github.com/djnavarro/donut"</span></span>
<span id="cb8-4"><span class="kw" style="color: #003B4F;">LABEL</span> org.opencontainers.image.authors <span class="st" style="color: #20794D;">"Danielle Navarro &lt;djnavarro@protonmail.com&gt;"</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;">LABEL</span> org.opencontainers.image.description DESCRIPTION</span>
<span id="cb8-6"><span class="kw" style="color: #003B4F;">LABEL</span> org.opencontainers.image.licenses <span class="st" style="color: #20794D;">"MIT"</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="kw" style="color: #003B4F;">RUN</span> <span class="ex" style="color: null;">Rscript</span> <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">'install.packages(c("ggplot2", "scales", "tibble", "dplyr", "plumber", "ggthemes"))'</span></span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;">COPY</span> server.R /home/server.R</span>
<span id="cb8-10"><span class="kw" style="color: #003B4F;">EXPOSE</span> 80</span>
<span id="cb8-11"><span class="kw" style="color: #003B4F;">CMD</span> <span class="ex" style="color: null;">Rscript</span> <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">'plumber::plumb(file="/home/server.R")$run(host="0.0.0.0", port = 80)'</span></span></code></pre></div>
</div>
</div>
</div>
<p>Every instruction in this dockerfile is something I covered in the last post, except for the <a href="https://docs.docker.com/engine/reference/builder/#expose"><code>EXPOSE</code></a> instruction on line 10. That one tells the container to listen on port 80. It doesn’t necessarily publish the output anywhere accessible from outside the container<sup>11</sup> but it does mean that the plumber web server running inside the container is listening on port 80 and can create a response when it receives a request. I’ll deal with the publishing issue later.</p>
<p><br></p>
</section>
<section id="push-it-to-the-registry" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="push-it-to-the-registry">Push it to the registry</h2>
<p>The next step in the process is to host the image created from this dockerfile on a public registry.<sup>12</sup> I talked about that process in the last post too, so again I’ll keep things simple. The process I followed for the donut project is essentially identical to the one I used in this <a href="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/#hosting-images">section of the docker post</a>. I’ve created a github actions workflow that automatically builds the image on github and hosts it with the github container registry. The resulting image name is <code>ghcr.io/djnavarro/donut:main</code> and here’s the <a href="https://github.com/djnavarro/donut/blob/main/.github/workflows/build-image.yaml"><code>build-image.yaml</code></a> workflow I’m using:</p>
<div class="column-page-right">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.github/workflows/build-image.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> publish donut image</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">on</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">push</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-5"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">branches</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">'main'</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;">env</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">REGISTRY</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ghcr.io</span></span>
<span id="cb9-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">IMAGE_NAME</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ github.repository }}</span></span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="fu" style="color: #4758AB;">jobs</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-12"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">build-and-push-image</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-13"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">runs-on</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ubuntu-latest</span></span>
<span id="cb9-14"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">strategy</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-15"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">fail-fast</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb9-16"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">matrix</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-17"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">include</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-18"><span class="at" style="color: #657422;">          </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">dockerfile</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ./Dockerfile</span></span>
<span id="cb9-19"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ghcr.io/djnavarro/donut</span></span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">permissions</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-22"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> read</span></span>
<span id="cb9-23"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">packages</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> write</span></span>
<span id="cb9-24"></span>
<span id="cb9-25"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">steps</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-26"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> checkout repository</span></span>
<span id="cb9-27"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> actions/checkout@v2</span></span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> login to the container registry</span></span>
<span id="cb9-30"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9</span></span>
<span id="cb9-31"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">with</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-32"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">registry</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ env.REGISTRY }}</span></span>
<span id="cb9-33"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">username</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ github.actor }}</span></span>
<span id="cb9-34"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">password</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ secrets.GITHUB_TOKEN }}</span></span>
<span id="cb9-35"></span>
<span id="cb9-36"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> extract metadata (tags, labels) for docker</span></span>
<span id="cb9-37"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">id</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> meta</span></span>
<span id="cb9-38"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38</span></span>
<span id="cb9-39"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">with</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-40"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">images</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ matrix.image }}</span></span>
<span id="cb9-41"></span>
<span id="cb9-42"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> build and push docker image</span></span>
<span id="cb9-43"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc</span></span>
<span id="cb9-44"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">with</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-45"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">context</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> .</span></span>
<span id="cb9-46"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">file</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ matrix.dockerfile }}</span></span>
<span id="cb9-47"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">push</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb9-48"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">tags</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ steps.meta.outputs.tags }}</span></span>
<span id="cb9-49"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">labels</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ steps.meta.outputs.labels }}</span></span></code></pre></div>
</div>
</div>
</div>
<p>At long, long last we have all the precursors in place. We have a little web application that runs inside a docker container, and the image describing that container is hosted on a registry.<sup>13</sup> We can get started on the kubernetes side of things…</p>
<p><br></p>
</section>
<section id="create-a-kubernetes-cluster" class="level2">
<h2 class="anchored" data-anchor-id="create-a-kubernetes-cluster">Create a kubernetes cluster</h2>
<p>At the risk of stating the bloody obvious, if you want to use kubernetes to deploy an application on a cluster… you’re probably going to need a cluster running kubernetes. You can get yourself one of these in lots of different ways but the way I’m going to do it is with GKE, the <a href="https://cloud.google.com/kubernetes-engine">google kubernetes engine</a>. You’ll need a google account to do this, and yes this is something that they charge actual money for, but the good news is that when you sign up for google cloud services you get a few hundred dollars of credit to start with. That’s pretty useful for novices: it’s nice to be able to play around and learn the basics before you have to start worrying about what it’s going to cost.</p>
<p>If you go down that path you can access your projects from the cloud console, located at <a href="https://console.cloud.google.com/">console.cloud.google.com</a>. Once there you can navigate to the various pages you’ll need by clicking on links and menu items, but google offers a lot of different cloud services and it does take a little while for the interface to start feeling familiar, so I’ll link to the pages you need directly as well.</p>
<p>Before you can create a cluster of your very own, you need to create a project. Pretty much everything you do with google cloud services is organised into projects so that’s where we’ll start. To create a project, go to <a href="https://console.cloud.google.com/projectcreate">console.cloud.google.com/projectcreate</a> and follow the prompts. Give your project a fancy name that makes you sound cool: I called mine <code>donut-art</code>.</p>
<p>Now that you have a project, you’ll need to enable the specific google cloud services that your project will need access to. In this example the only thing I’ll need is GKE itself, but in other situations you might need access to google cloud storage or something like that. To enable GKE on your current project go to <a href="https://console.cloud.google.com/kubernetes/">console.cloud.google.com/kubernetes/</a>. If it hasn’t already been enabled for the project the page will ask if you want to. Even more conveniently, if you don’t have a cluster running it will ask if you want to create one.<sup>14</sup> It will give you two options: an “autopilot” cluster is one where google will automatically manage the configuration for you, whereas for a “standard” cluster you’ll have to be more explicit about how many nodes you want and how they are organised. There are situations where you need to use the standard cluster,<sup>15</sup> but this is not one of those so I went with the autopilot approach because it’s simpler. I didn’t need to change any of the defaults: I called my cluster <code>donut-cluster</code>, and created it in the region <code>australia-southeast1</code>.<sup>16</sup></p>
<p>Here’s a screenshot showing you what the relevant bit of the google kubernetes engine console looks like for me now that I have a cluster up and running:</p>
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/donut-cluster.png" class="img-fluid"></p>
<p>If I click on the “donut-cluster” link it takes me to a page with a lot more detail, but you can see that some of the information is the same:</p>
<p><br></p>
<p><img src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/donut-cluster-detail.png" class="img-fluid"></p>
<p><br></p>
</section>
<section id="command-line-tools" class="level2">
<h2 class="anchored" data-anchor-id="command-line-tools">Command line tools</h2>
<p>Time for a little digression.</p>
<p>Take a look at the menu shown in the last screenshot. If I click on the “connect” button and it will reveal a command I can use to connect to the cluster from the terminal on my laptop… but it requires me to have the gcloud command line tools installed. Now, if you don’t want to install the tools locally you can avoid this by selecting the “run in cloud shell” option that also appears on the dialog box. However, I dislike the cloud shell and prefer to work from my own terminal. So, the next step is to install the command line tools. For this project, the two things I need are gcloud (to interact with google cloud services) and kubectl (to interact with kubernetes).</p>
<section id="installing-gcloud" class="level3">
<h3 class="anchored" data-anchor-id="installing-gcloud">Installing gcloud</h3>
<p>It turns out that installing the command line tools is relatively straightforward, and is made a lot easier thanks to the <a href="https://cloud.google.com/sdk/docs/install">gcloud installation instructions</a> which are detailed and not too hard to follow. In addition to the basic tools, I installed the “gke-gcloud-auth-plugin” which are needed for authentication. Once the command line tools are installed, authentication from your terminal is a one-line command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;">gcloud</span> auth login</span></code></pre></div>
</div>
<p>I can now interact with my google cloud projects from my command line.</p>
</section>
<section id="installing-kubectl" class="level3">
<h3 class="anchored" data-anchor-id="installing-kubectl">Installing kubectl</h3>
<p>The second tool I need for this project is <a href="https://kubernetes.io/docs/reference/kubectl/">kubectl</a>, a command line tool used to control a kubernetes cluster. You can find installation instructions for different operating systems by visiting the kubernetes <a href="https://kubernetes.io/docs/tasks/tools/">install tools</a> page. I’m doing this from a linux machine, so I also found it useful to enable autocompletion of kubectl commands within the bash shell. The instructions for this are included in the kubectl install page for linux.</p>
</section>
<section id="connect-to-the-cluster" class="level3">
<h3 class="anchored" data-anchor-id="connect-to-the-cluster">Connect to the cluster</h3>
<p>Now that I have gcloud and kubectl running, I can connect to my cluster. The first thing to do is use gcloud to get the credentials needed to connect to my cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1">  <span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">USE_GKE_GCLOUD_AUTH_PLUGIN</span><span class="op" style="color: #5E5E5E;">=</span>True</span>
<span id="cb11-2">  <span class="ex" style="color: null;">gcloud</span> container clusters get-credentials donut-cluster <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb11-3">    <span class="at" style="color: #657422;">--zone</span> australia-southeast1 <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb11-4">    <span class="at" style="color: #657422;">--project</span> donut-art</span></code></pre></div>
</div>
<pre><code>Fetching cluster endpoint and auth data.
kubeconfig entry generated for donut-cluster.</code></pre>
<p>Then I can use kubectl to verify that it can connect to my cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">kubectl</span> cluster-info</span></code></pre></div>
</div>
<pre><code>Kubernetes control plane is running at blah blah blah
GLBCDefaultBackend is running at blah blah blah
KubeDNS is running at blah blah blah
KubeDNSUpstream is running at blah blah blah
Metrics-server is running at blah blah blah</code></pre>
<p>Okay, I may have edited the output slightly. The missing bits are the various URLs. They aren’t very interesting… the main thing to notice is that yes, kubectl can connect to my cluster and the cluster is up and running.</p>
<p><br></p>
</section>
</section>
<section id="kubernetes-terminology" class="level2">
<h2 class="anchored" data-anchor-id="kubernetes-terminology">Kubernetes terminology</h2>
<p>Not surprisingly, kubernetes has a lot of terminology. That’s quite daunting when you’re getting started and I’m not going to attempt a complete glossary here. Instead, let’s start with these four terms, since we’ll use them a lot:</p>
<ul>
<li><strong>Container</strong>. This has the same meaning it has in other contexts: a container is a self-contained executable that bundles up dependencies and runs isolated from other processes on the machine. Kubernetes supports other types of containers besides docker containers, but let’s pretend we’re only talking about docker here.</li>
<li><strong>Pod</strong>. A pod is the smallest deployable unit you can create: it is an abstraction that refers to one or more containers working together. An application can have many pods running on many machines (nodes) but each pod runs on one machine. Pods are considered ephemeral. Kubernetes will have no qualms about shutting down a pod if it doesn’t seem to be doing its job, or creating new pods to replace it if it needs to,<br>
</li>
<li><strong>Deployment</strong>. A deployment is an abstraction that specifies a collection of pods that your application runs. Essentially it describes your “desired state” for the application. When you “apply” a deployment kubernetes will start the application running (more or less), and try to make the thing that’s actually running look like your stated deployment configuration.</li>
<li><strong>Service</strong>. A service is an abstraction that specifies how the pods running on your kubernetes cluster communicate with the outside world. They’re awfully handy things to have if you want your application to be accessible on the web.</li>
</ul>
<p>Conceptually, it’s also helpful to know these terms at the very beginning, even though frankly I’m not going to do anything with them here:</p>
<ul>
<li><strong>Node</strong>. A node refers one of the machines running in your cluster.</li>
<li><strong>Control Plane</strong>. The control plane refers to a collection of processes that run together on a single node and are in charge of actually running the whole thing. We won’t need to do anything to the control plane in this post other than leave it alone and let it do its job, but it does help to know the term because it shows up everywhere.</li>
</ul>
<p>More terms will appears as we go along – and I’ll try to explain all those when they pop up – but these are the ones that I wish I’d understood properly before I started trying to play with kubernetes clusters.</p>
<p><br></p>
</section>
<section id="create-a-deployment" class="level2">
<h2 class="anchored" data-anchor-id="create-a-deployment">Create a deployment</h2>
<p>The way to configure your kubernetes cluster is with manifest files that are written in <a href="https://en.wikipedia.org/wiki/YAML">yaml</a> format and use the <code>kubectl apply</code> command to update your cluster using the instructions laid out in the manifest file. You can use a manifest to modify any aspect to your cluster configuration, and later in this post I’ll show a few more manifests, but for now here’s the <a href="https://github.com/djnavarro/donut/blob/main/deployment.yaml"><code>deployment.yaml</code></a> file I’m using to specify a deployment for the donuts application:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb15-1"><span class="fu" style="color: #4758AB;">apiVersion</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> apps/v1</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">kind</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Deployment</span></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">labels</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-5"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">app.kubernetes.io/name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> donut-example</span></span>
<span id="cb15-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> donut</span></span>
<span id="cb15-7"><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">replicas</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb15-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">selector</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">matchLabels</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-11"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">app.kubernetes.io/name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> donut-example</span></span>
<span id="cb15-12"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">template</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-13"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-14"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">labels</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-15"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">app.kubernetes.io/name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> donut-example</span></span>
<span id="cb15-16"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-17"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">containers</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-18"><span class="at" style="color: #657422;">        </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> donut</span></span>
<span id="cb15-19"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ghcr.io/djnavarro/donut:main</span></span>
<span id="cb15-20"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">imagePullPolicy</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Always</span></span>
<span id="cb15-21"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">resources</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-22"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">requests</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-23"><span class="at" style="color: #657422;">              </span><span class="fu" style="color: #4758AB;">memory</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"64Mi"</span></span>
<span id="cb15-24"><span class="at" style="color: #657422;">              </span><span class="fu" style="color: #4758AB;">cpu</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"250m"</span></span>
<span id="cb15-25"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">limits</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-26"><span class="at" style="color: #657422;">              </span><span class="fu" style="color: #4758AB;">memory</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"128Mi"</span></span>
<span id="cb15-27"><span class="at" style="color: #657422;">              </span><span class="fu" style="color: #4758AB;">cpu</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"500m"</span></span>
<span id="cb15-28"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">ports</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb15-29"><span class="at" style="color: #657422;">            </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">containerPort</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">80</span></span></code></pre></div>
</div>
</div>
<p>For the moment, let’s censor the metadata and everything that uses the metadata so that we can focus on what the rest of the manifest is doing:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb16-1"><span class="fu" style="color: #4758AB;">apiVersion</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> apps/v1</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">kind</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Deployment</span></span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb16-4"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb16-5"><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">replicas</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb16-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">selector</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-8"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">use some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb16-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">template</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-11"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb16-12"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-13"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">containers</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-14"><span class="at" style="color: #657422;">        </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">names are metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb16-15"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ghcr.io/djnavarro/donut:main</span></span>
<span id="cb16-16"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">imagePullPolicy</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Always</span></span>
<span id="cb16-17"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">resources</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-18"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">requests</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-19"><span class="at" style="color: #657422;">              </span><span class="fu" style="color: #4758AB;">memory</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"64Mi"</span></span>
<span id="cb16-20"><span class="at" style="color: #657422;">              </span><span class="fu" style="color: #4758AB;">cpu</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"250m"</span></span>
<span id="cb16-21"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">limits</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-22"><span class="at" style="color: #657422;">              </span><span class="fu" style="color: #4758AB;">memory</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"128Mi"</span></span>
<span id="cb16-23"><span class="at" style="color: #657422;">              </span><span class="fu" style="color: #4758AB;">cpu</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"500m"</span></span>
<span id="cb16-24"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">ports</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb16-25"><span class="at" style="color: #657422;">            </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">containerPort</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">80</span></span></code></pre></div>
</div>
</div>
<p>There’s a lot going on here, so for the moment let’s focus on the bottom.<sup>17</sup> The section of the code from lines 13-25 is used to specify the docker containers<sup>18</sup> that my cluster is going to deploy. There’s only one container listed in this section, and the line that reads <code>image: ghcr.io/djnavarro/donut:main</code> is the way that I’ve specified the docker image to use when creating the container. There are other settings I’ve used to set up this container: I’ve asked kubernetes to allocate memory and cpu resources to the container, and I’ve exposed container port 80 (which, if you can remember back that far, is where the plumber web API is running inside the container). I’ve also set <code>imagePullPolicy: Always</code> to ensure that every time I update this deployment kubernetes will pull the image from the registry afresh. I did that because more often than not while I was writing code for the kubernetes deployment I was tweaking the image too, and I wanted to make sure that I was always trying to deploy the most recent version of the image.</p>
<p>Okay, now that we know what’s going on in that section of the code, let’s collapse that part and think about the manifest file like this:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb17-1"><span class="fu" style="color: #4758AB;">apiVersion</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> apps/v1</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">kind</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Deployment</span></span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb17-4"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">replicas</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb17-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">selector</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-8"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">use some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb17-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">template</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-11"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb17-12"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb17-13"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">details of one or more containers</span><span class="kw" style="color: #003B4F;">]</span></span></code></pre></div>
</div>
</div>
<p>Okay, so now let’s think about the bottom part of this code too. Lines 9-13 of this condensed pseudo-manifest describe some kind of template. But a template for what? Well, as clearly stated on line 13 in human(ish) language, it’s a template for “one or more containers”. In kubernetes terminology, a deployable thing that holds one or more containers is a pod… so this section of the code is describing a <a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates">pod template</a>. It’s an instruction to kubernetes that says… “hey, when you create a pod as part of this deployment, here’s the template you should use”. So we can simplify again:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb18-1"><span class="fu" style="color: #4758AB;">apiVersion</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> apps/v1</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">kind</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Deployment</span></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb18-4"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb18-5"><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">replicas</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb18-7"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">selector</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-8"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">use some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb18-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">template</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-10"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">details of the pod template</span><span class="kw" style="color: #003B4F;">]</span></span></code></pre></div>
</div>
</div>
<p>In this condensed form we can see that lines 5-10 provide a specification of the deployment itself. I’ve given it a pod template that tells kubernetes what the pods should look like, and I’ve specified the number of “replicas”. How many copies of this pod do I want it to run in this deployment: for no good reason at all I decided to run two (i.e., two replicas).</p>
<p>If we simplify the manifest yet again, we can see the top-level description:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb19-1"><span class="fu" style="color: #4758AB;">apiVersion</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> apps/v1</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">kind</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Deployment</span></span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb19-4"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">some metadata</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb19-6"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">details of the deployment</span><span class="kw" style="color: #003B4F;">]</span></span></code></pre></div>
</div>
</div>
<p>The only other things to point out right now is that the “kind” field is used to tell kubernetes what type of object to create (a Deployment), and the “apiVersion” field is used to specify which version of the kubernetes API to use when interpreting the manifest. That’s handy to note because later on I’ll be using APIs that are a bit more specific to the google kubernetes engine.</p>
<p>Okay, so now that we have some sense of what’s going on in the <code>deployment.yaml</code> file (ignoring the fact that I’ve glossed over the metadata bits), let’s actually apply it to our cluster:<sup>19</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;">kubectl</span> apply <span class="at" style="color: #657422;">-f</span> deployment.yaml</span></code></pre></div>
</div>
<p>To see if it’s working we can use <code>kubectl get deployments</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;">kubectl</span> get deployments</span></code></pre></div>
</div>
<pre><code>NAME    READY   UP-TO-DATE   AVAILABLE   AGE
donut   2/2     2            2           19h</code></pre>
<p>It is alive.</p>
<p>For more details on this part of the process, check out the kubernetes documentation on <a href="https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/">deploying a stateless application</a>. You may also want to look at the page on <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/">managing container resources</a> at this point.</p>
<p><br></p>
</section>
<section id="expose-the-deployment-no-https" class="level2">
<h2 class="anchored" data-anchor-id="expose-the-deployment-no-https">Expose the deployment (no https)</h2>
<p>At this point my little donut application is running happily on the cluster, but it doesn’t have a public IP address. No-one can visit it. To expose the deployment to the world you’ll need to start a service running that takes care of this for you. Exactly how you go about doing this depends on whether you want to enable https on the website. If you’re not too fussed about https the process is fairly simple and you can find details on how to do it by reading the <a href="https://kubernetes.io/docs/tutorials/stateless-application/expose-external-ip-address/">tutorial on exposing an external IP address</a>, and you may find the kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/">documentation on services</a> helpful too. The TL;DR is that it’s simple enough that you don’t even need to bother with a manifest file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;">kubectl</span> expose deployment donut <span class="at" style="color: #657422;">--type</span><span class="op" style="color: #5E5E5E;">=</span>LoadBalancer <span class="at" style="color: #657422;">--name</span><span class="op" style="color: #5E5E5E;">=</span>donut-service</span></code></pre></div>
</div>
<p>The application is now online. It has a public IP address that you can find, and if you own a domain that you want to map to that IP address all you have to do is create a DNS record that points the URL at the appropriate IP. With any luck your domain provider will have some decent documentation for this. For instance, I use google domains for <code>djnavarro.net</code> domain, and they have some pretty decent <a href="https://support.google.com/a/answer/2579934?hl=en">instructions on configuring DNS records</a> that I could use to point <code>donut.djnavarro.net</code> at the IP address for my kubernetes application.</p>
<p>Unfortunately for me, I am a masochist, and as such I chose the option that delivers pain.</p>
<p><br></p>
</section>
<section id="expose-the-deployment-with-https" class="level2">
<h2 class="anchored" data-anchor-id="expose-the-deployment-with-https">Expose the deployment (with https)</h2>
<blockquote class="blockquote">
<p>I like the kick in the face <br> And the things you do to me <br> I love the way that it hurts <br> I don’t miss you, I miss the misery <br> &nbsp; – Halestorm</p>
</blockquote>
<p>Configuring the kubernetes application to use https is a bit of a pain in the ass.<sup>20</sup> I’m deploying all this through google kubernetes engine, so the approach I took was to follow the guide for using <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs">google-managed ssl certificates</a>. The guide is excellent… apart from a couple of minor… issues… that really fucked me<sup>21</sup> when I tried to follow it. I’ll mention those as I go.</p>
<section id="get-a-static-ip" class="level3">
<h3 class="anchored" data-anchor-id="get-a-static-ip">Get a static IP</h3>
<p>The first thing you have to do is create a static IP address that you’ll later use for your cluster. The <code>gcloud compute addresses create</code> command does that for you. Here’s how I did that for my cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;">gcloud</span> compute addresses create donut-ip-address <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb24-2">  <span class="at" style="color: #657422;">--global</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb24-3">  <span class="at" style="color: #657422;">--project</span> donut-art</span></code></pre></div>
</div>
<!-- :::{.column-page-right} -->
<!-- ``` -->
<!-- Created [https://www.googleapis.com/compute/v1/projects/donut-art/global/addresses/donut-ip-address] -->
<!-- ``` -->
<!-- ::: -->
<p>This prints out a very boring message that informs you that the ID address has been created. More helpfully, now that the IP address exists you can ask google to tell you what it is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;">gcloud</span> compute addresses describe donut-ip-address <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb25-2">  <span class="at" style="color: #657422;">--global</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb25-3">  <span class="at" style="color: #657422;">--project</span> donut-art</span></code></pre></div>
</div>
<p>When you do this, the output prints out the IP address and some other details. Later on, this is the address you’ll create a DNS record for so that – in my case – the <a href="https://donut.djnavarro.net/">https://donut.djnavarro.net/</a> address points to the correct location.</p>
</section>
<section id="get-a-certificate" class="level3">
<h3 class="anchored" data-anchor-id="get-a-certificate">Get a certificate</h3>
<p>The next step in the process is to create a managed certificate. Somebody needs to certify that my website is what it says it is.<sup>22</sup> I’m going to need a manifest file for this, which I’ve saved as <a href="https://github.com/djnavarro/donut/blob/main/managed-cert.yaml"><code>managed-cert.yaml</code></a>:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>managed-cert.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb26-1"><span class="fu" style="color: #4758AB;">apiVersion</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> networking.gke.io/v1</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;">kind</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ManagedCertificate</span></span>
<span id="cb26-3"><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb26-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> managed-cert</span></span>
<span id="cb26-5"><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb26-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">domains</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb26-7"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> donut.djnavarro.net</span></span></code></pre></div>
</div>
</div>
<p>Notice that the <code>apiVersion</code> field here is using something specific to GKE: I’m using google infrastructure here and they’ve kindly<sup>23</sup> provided an API that makes it easy to use their managed certificates. The yaml here is pretty simple: I’m asking google to supply me with a certificate for my kubernetes application, which will be valid for the domain <code>donut.djnavarro.net</code> (you can list more than one here but I didn’t).</p>
<p>Now that I have a manifest, I apply it to my cluster in the usual way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="ex" style="color: null;">kubectl</span> apply <span class="at" style="color: #657422;">-f</span> managed-cert.yaml</span></code></pre></div>
</div>
<p>Okay, at this point in the guide it warns you that it might take an hour or so for the certificate to be provisioned. I manage so many websites now that I’d stopped paying attention to this warning because like, 90% of the time, the thing actually happens in 20 seconds. Yeah nah, not this time babe. This one actually took an hour. We’ll come back to it. I mean, if you want to check you can try this command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;">kubectl</span> describe managedcertificate managed-cert</span></code></pre></div>
</div>
<p>It will print out a bunch of stuff, but when you scroll through the output you’ll very likely come across something that says that the certificate is “Provisioning”. It did work for me but it took a while so let’s move on while that is happening.</p>
</section>
<section id="create-a-service" class="level3">
<h3 class="anchored" data-anchor-id="create-a-service">Create a service</h3>
<p>Next up is the step that fucked me in the worst possible way. It failed, because I did a copy-paste on a bit of code that I needed to edit. I did that because the guide on the google website doesn’t flag this as something you need to edit. Worse yet, it failed silently because kubernetes had no bloody way to know my manifest was fucked up. Worst of all, for at least three hours I was convinced that my error was in the <em>later</em> step because this step failed silently.</p>
<p>Siiiiiiiiiiiiiigh. Computers were a mistake.</p>
<p>Anyway, let’s start by looking at the manifest file, which I’ve called <a href="https://github.com/djnavarro/donut/blob/main/mc-service.yaml"><code>mc-service.yaml</code></a>:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mc-service.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb29-1"><span class="fu" style="color: #4758AB;">apiVersion</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> v1</span></span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;">kind</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Service</span></span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb29-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> mc-service</span></span>
<span id="cb29-5"><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb29-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">selector</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb29-7"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">app.kubernetes.io/name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> donut-example</span></span>
<span id="cb29-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">type</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> NodePort</span></span>
<span id="cb29-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">ports</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb29-10"><span class="at" style="color: #657422;">    </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">protocol</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> TCP</span></span>
<span id="cb29-11"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">port</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">80</span></span>
<span id="cb29-12"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">targetPort</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">80</span></span></code></pre></div>
</div>
</div>
<p>At this point in the process I freely admit I’m at the edge of my own knowledge, and I don’t want to say too much about something I only barely understand myself, but there are two things I will point out about this:</p>
<ul>
<li><p>Notice that under <code>spec.selector</code> (lines 5-7) I’m referring to the name of my deployment (<code>donut-example</code>). That’s what the kubernetes docs tell you to do when setting up a NodePort service (see <a href="https://kubernetes.io/docs/concepts/services-networking/service/">here</a>), but the guide on the the corresponding google page that I linked to earlier (i.e., <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs">this one</a>) misled me. It made me think I was supposed to use the name of the service (<code>mc-service</code>). You want this service to point at your deployment!</p></li>
<li><p>Notice I’m doing everything on port 80? You probably don’t need to do this, but I found some discussion online about an old issue with kubernetes where they were hardcoding port 80 somewhere. I’m pretty certain that’s been properly resolved now and I don’t need to use port 80 for everything, but it was one of the tweaks I made on the way to figuring out the problem with <code>spec.selector</code> and… well… fuck it. The current version works and I’m new to kubernetes so I’m not changing it today.</p></li>
</ul>
<p>In any case, now that I have a manifest file I can apply it to the cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;">kubectl</span> apply <span class="at" style="color: #657422;">-f</span> mc-service.yaml</span></code></pre></div>
</div>
</section>
<section id="create-the-dns-record" class="level3">
<h3 class="anchored" data-anchor-id="create-the-dns-record">Create the DNS record</h3>
<p>The next step in the process was to create a DNS record (with google domains in my case) for <code>donut.djnavarro.net</code> that points this subdomain to the appropriate IP address. I talked about this earlier in the post, so let’s move on…</p>
</section>
<section id="create-an-ingress" class="level3">
<h3 class="anchored" data-anchor-id="create-an-ingress">Create an ingress</h3>
<p>If the gods were kind we would be done, but of course we are not. I have a managed certificate and I have a service that exposes my deployment. That <em>doesn’t</em> mean that my application is configured to serve pages over https. To do this I need to create an <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">ingress</a> that manages external access to the service I created earlier and handles the SSL bit. Which is the thing I really need in order to make https work. Again…</p>
<p>Siiiiiiiiiiiigh.</p>
<p>Okay, here’s my <a href="https://github.com/djnavarro/donut/blob/main/mc-ingress.yaml"><code>mc-ingress.yaml</code></a> manifest file for that:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mc-ingress.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb31-1"><span class="fu" style="color: #4758AB;">apiVersion</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> networking.k8s.io/v1</span></span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;">kind</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Ingress</span></span>
<span id="cb31-3"><span class="fu" style="color: #4758AB;">metadata</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb31-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> mc-ingress</span></span>
<span id="cb31-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">annotations</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb31-6"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">kubernetes.io/ingress.global-static-ip-name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> donut-ip-address</span></span>
<span id="cb31-7"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">networking.gke.io/managed-certificates</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> managed-cert</span></span>
<span id="cb31-8"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">kubernetes.io/ingress.class</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"gce"</span></span>
<span id="cb31-9"><span class="fu" style="color: #4758AB;">spec</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb31-10"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">defaultBackend</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb31-11"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">service</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb31-12"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> mc-service</span></span>
<span id="cb31-13"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">port</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb31-14"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">number</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="dv" style="color: #AD0000;">80</span></span></code></pre></div>
</div>
</div>
<p>This manifest uses the static IP address I created (<code>donut-ip-address</code>), as well as the TLS certificate that I’ve asked google to provide me (<code>managed-cert</code>), and it specifies the <code>mc-service</code> I created as the backend. These things together give me https… apparently.</p>
<p>As usual, I apply the manifest to my cluster:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="ex" style="color: null;">kubectl</span> apply <span class="at" style="color: #657422;">-f</span> mc-ingress.yaml </span></code></pre></div>
</div>
<p>I can inspect the results with <code>kubectl get ingress</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;">kubectl</span> get ingress</span></code></pre></div>
</div>
<pre><code>NAME         CLASS    HOSTS   ADDRESS         PORTS   AGE
mc-ingress   &lt;none&gt;   *       34.149.195.33   80      98s</code></pre>
<p>I might still have to wait for the certificate provisioning to finish, so I’d better check again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;">kubectl</span> describe managedcertificate managed-cert</span></code></pre></div>
</div>
<p>Here’s the relevant bit of the output showing what it looks like once it’s all working:</p>
<pre><code>Spec:
  Domains:
    donut.djnavarro.net
Status:
  Certificate Name:    mcrt-b2204ff4-ad92-4811-a56d-f007190bb659
  Certificate Status:  Active
  Domain Status:
    Domain:     donut.djnavarro.net
    Status:     Active</code></pre>
<p>At last. I have https. It works, which I can verify simply by visiting <a href="https://donut.djnavarro.net">https://donut.djnavarro.net</a> and seeing if my app is working. Obviously I know that it is, because the embedded image at the start of the post is doing what it’s supposed to, but just for fun I’ll do it again:</p>
<a href="https://donut.djnavarro.net"><img width="100%" src="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/https:/donut.djnavarro.net" title="donut.djnavarro.net"></a>
<p><br></p>
<p>Excellent. It works.</p>
<p><br></p>
</section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>The application I built is very limited, and I think it’s important to point to the things that I know it does poorly. I am sure there are others, but the big one is storage. As currently designed, the app generates a new image every time the site is visited. That’s wasteful, especially if you’re going to reuse images. You can do better than this by enabling google cloud storage, connecting to it as a volume, and writing generated images to storage when they are create. The plumber app would then check for the relevant files before trying to generate a new one. There’s a useful <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/volumes">tutorial on volumes</a> if you want to explore this with the google kubernetes engine.</p>
<p>It’s also worth pointing out that I have completely ignored <a href="https://helm.sh/">helm</a>, the package manager for kubernetes. Helm is excellent, and when the time comes that you want to deploy an application that someone else has designed properly, the thing you actually do is use a helm “chart”. For example, the one time I actually got <a href="https://spark.apache.org/">spark</a> running properly on a kubernetes cluster, the way I did it was using a terribly-useful helm chart provided by Bitnami: <a href="https://bitnami.com/stack/spark/helm">bitnami.com/stack/spark/helm</a>. There’s a lot of useful tooling built up around kubernetes, and you might as well take advantage of that!</p>
<p>That being said… yes there’s a lot more to talk about, but I’m done with this post. I’m tired and unemployed, and since nobody is paying me for any of this I’m going to call it quits for today.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Though who knows: there’s a lot of strange on grindr.↩︎</p></li>
<li id="fn2"><p>Lots of computers working as a single unit.↩︎</p></li>
<li id="fn3"><p>Also known colloquially as “computers”. A node in a cluster is one of the machines that makes up the cluster. I’m endlessly entertained by the human ability to make concepts impenetrable to outsiders by writing in jargon that is never explained to novices.↩︎</p></li>
<li id="fn4"><p>Oh look it’s a trans who likes Lana, how original.↩︎</p></li>
<li id="fn5"><p>The author does not count.↩︎</p></li>
<li id="fn6"><p>Unless you are Thomas Lin Pedersen, but I think it is very clear that he is much taller than me.↩︎</p></li>
<li id="fn7"><p>After a <em>staggering</em> amount of work, mind you…↩︎</p></li>
<li id="fn8"><p>To be honest I am still not convinced <code>coord_polar()</code> is particularly useful for visualisation because I very rarely have anything to say that is naturally expressed as a pie chart, but it’s brilliant for generative art.↩︎</p></li>
<li id="fn9"><p>This isn’t the right place for a deep dive on <a href="https://blog.djnavarro.net/serialisation-with-rds/">serialising R objects</a>, but I’ve written about it before.↩︎</p></li>
<li id="fn10"><p>Arguments can be passed to a plumber endpoint through the query string. For instance, the URL <a href="http://donut.djnavarro.net/?seed=6">http://donut.djnavarro.net/?seed=6</a> fixes the <code>seed</code> to 6, so the output will always be the same as the red and black donut shown in the bottom right of the output above.↩︎</p></li>
<li id="fn11"><p>Here’s a blog post on the difference between <a href="https://nickjanetakis.com/blog/docker-tip-59-difference-between-exposing-and-publishing-ports">exposing and publishing ports</a> in docker if you need it!↩︎</p></li>
<li id="fn12"><p>It doesn’t have to be public: kubernetes can pull images from private registries too, but I’m not going to bother with that sort of thing here↩︎</p></li>
<li id="fn13"><p>If this were something fancier you’d probably have more than one container, but I’m keeping this as simple as possible for the sake of what’s left of my sanity.↩︎</p></li>
<li id="fn14"><p>I should mention that yes you can do all this with the <code>gcloud</code> command line tool, but I haven’t reached the point in the post where I talk about that yet, and in any case the point-and-click process is actually pretty easy.↩︎</p></li>
<li id="fn15"><p>An example would be if you plan to deploy <a href="https://spark.apache.org/">spark</a> on kubernetes. I’ve been playing around with that a little and for that you really need to have google back off and not delete nodes whenever the autopilot thinks you don’t need them. But that’s not the case for the donut app so I’m keeping it simple.↩︎</p></li>
<li id="fn16"><p>Also known as “Sydney” to those of us who live here↩︎</p></li>
<li id="fn17"><p>Too obvious.↩︎</p></li>
<li id="fn18"><p>Kubernetes supports other types of containers besides docker, but let’s not complicate matters.↩︎</p></li>
<li id="fn19"><p>The <code>-f</code> argument in <code>kubectl apply</code> here tells it to use the manifest <strong>f</strong>ile.↩︎</p></li>
<li id="fn20"><p>Which may be your thing in an appropriate mutually consensual context, but it’s not everyone’s cup of tea.↩︎</p></li>
<li id="fn21"><p>Not in the fun way.↩︎</p></li>
<li id="fn22"><p>I could go on a long ramble about all my issues with authority figures at this point, but frankly I don’t think that certification authorities are a bad thing so perhaps just this once I’ll be a good girl and use the damn service. It’s convenient and it’s useful.↩︎</p></li>
<li id="fn23"><p>lol no. This is a figure of speech. Nothing that google or any large tech company does is a kindness. It is self interest on their part, of course, but it’s convenient for my purposes here.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Danielle Navarro},
  title = {Deploying {R} with Kubernetes},
  date = {2023-01-10},
  url = {https://blog.djnavarro.net/posts/2023-01-10_kubernetes},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2023. <span>“Deploying R with Kubernetes.”</span>
January 10, 2023. <a href="https://blog.djnavarro.net/posts/2023-01-10_kubernetes">https://blog.djnavarro.net/posts/2023-01-10_kubernetes</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Docker</category>
  <category>Kubernetes</category>
  <category>Plumber</category>
  <guid>https://blog.djnavarro.net/posts/2023-01-10_kubernetes/index.html</guid>
  <pubDate>Mon, 09 Jan 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-01-10_kubernetes/donut.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Playing with docker and the github container registry</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Docker docker docker baby. This is a post about docker, and on the off chance that you’ve been living under a rock for the last several years, docker<sup>1</sup> allows you to run your code within a “container” that isolates it from other processes running on your machine. Containers are a bit like virtual machines, but smaller, more portable, and don’t require you to have a complete copy of a second operating system running on your machine. They’re… actually, you know what? Why don’t I quote the relevant paragraphs from <a href="https://www.docker.com/resources/what-container/">the docker website</a>:</p>
<blockquote class="blockquote">
<p><strong>CONTAINERS</strong>: Containers are an abstraction at the app layer that packages code and dependencies together. Multiple containers can run on the same machine and share the OS kernel<sup>2</sup> <sup>3</sup> <sup>4</sup> with other containers, each running as isolated processes in user space. Containers take up less space than VMs (container images are typically tens of MBs in size), can handle more applications and require fewer VMs and Operating systems.</p>
<p><strong>VIRTUAL MACHINES</strong>: Virtual machines (VMs) are an abstraction of physical hardware turning one server into many servers. The hypervisor allows multiple VMs to run on a single machine. Each VM includes a full copy of an operating system, the application, necessary binaries and libraries – taking up tens of GBs. VMs can also be slow to boot.</p>
</blockquote>
<p>They even have pretty pictures on the website. I thought about reproducing their figures for this blog post but why bother? If you want to look at their pictures you can go look at the website and in any case I think we can all agree that making these cute whale graphics with ggplot2 was a much better use of my time, yes?</p>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-row-1-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
<p>Anyway. I’ve been meaning to teach myself docker for a few years now. It’s one of those “things” that has this weird aura of being difficult when it… doesn’t seem to be all that difficult? For a long time I’ve had this feeling of dread or insecurity about it, thinking that it must be “too technical” for me.<sup>5</sup> I have no doubt that the internals to docker are complicated, and there are subtleties to using docker well that will take a while to grasp, but when I managed to set aside my fears and read the documentation it turned out that the basics were surprisingly easy.</p>
<section id="installing-docker" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="installing-docker">Installing docker</h2>
<p>The <a href="https://docs.docker.com/get-docker/">installation guides</a> on the docker website are good, and have information for various operating systems. I’m doing this on my ubuntu laptop<sup>6</sup> so I followed the <a href="https://docs.docker.com/engine/install/ubuntu/">ubuntu install guide</a>. I also went a little further and followed the <a href="https://docs.docker.com/engine/install/linux-postinstall/">post-install instructions for linux</a> so that I could run docker commands without requiring superuser privileges: that’s the reason you won’t see any <code>sudo</code> commands in this post. Obviously, that’s something that will be a bit different on different operating systems and I’m not trying to write a tutorial here, but if you are using this post as a resource you can check that everything is working on your own installation by running this command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">docker</span> run hello-world</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
2db29710123e: Pull complete 
Digest: sha256:c77be1d3a47d0caf71a82dd893ee61ce01f32fc758031a6ec4cf1389248bb833
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/</code></pre>
</div>
<p>Okay that looks good. Docker<sup>7</sup> seems to be running on my machine. As an aside, as long as you are online you don’t need to have a copy <code>hello-world</code> itself for this to work: docker will download it for you when you run the command.</p>
</section>
<section id="terminology" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="terminology">Terminology</h2>
<p>Before diving in and using docker, it helps to disambiguate three terms:</p>
<ul>
<li><strong>Container</strong>. A container is an executable. It runs on your machine isolated from other processes, has a namespace on the kernel, etc. Setting the particulars aside, it <em>is</em> a computing environment.</li>
<li><strong>Image</strong>. An image is a read-only template that contains the instruction to build a container. It’s a “snapshot” of a computing environment, constructed from one or more “layers” of build steps. Images are binaries that are stored locally and hosted on various registries. More on that later!</li>
<li><strong>Dockerfile</strong>. Finally, there’s the dockerfile.<sup>8</sup> That’s a plain text file that you as the user write. It contains the instructions for how to construct an image. They supply, in a (very!) abstract sense, the source code for an image.</li>
</ul>
<p>So it works like this. You use a dockerfile to <strong>build</strong> an image, the image contains the instructions to <strong>run</strong> a container, and the corresponding commands are quite sensibly called <code>docker build</code> and <code>docker run</code>. Or if you like diagrams with labelled arrows…</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bdockerfile%7D%20%5Cxrightarrow%7B%5Cmbox%7Bbuild%7D%7D%20%5Cmbox%7Bimage%7D%20%5Cxrightarrow%7B%5Cmbox%7Brun%7D%7D%20%5Cmbox%7Bcontainer%7D%0A"></p>
<p>At any point you can get a summary of the images on your system by running <code>docker image list</code>. If you’re doing this with a fresh installation and you run the command after running the “hello world” example above,<sup>9</sup> you’d get output that looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">docker</span> image list</span></code></pre></div>
</div>
<pre><code>REPOSITORY    TAG       IMAGE ID       CREATED         SIZE
hello-world   latest    feb5d9fea6a5   15 months ago   13.3kB</code></pre>
<p>You can do the same thing for containers with <code>docker container ls</code>,<sup>10</sup> which by default will show you currently-running containers. To see all containers, running or not, add the <code>--all</code> parameter:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">docker</span> container ls <span class="at" style="color: #657422;">--all</span></span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES
efcf7186776f   hello-world   "/hello"   6 minutes ago   Exited (0) 6 minutes ago             bold_davinci</code></pre>
</div>
<p>Notice the difference in the “CREATED” time! The <em>image</em> for hello-world is something that someone else created 15 months ago and kindly placed online so I could pull it onto my machine without building it myself. The <em>container</em> is the executable that I created from that image a mere 6 minutes ago when I called <code>docker run</code>. They’re both currently on my laptop, but they are quite different things.</p>
<p>Ah, but I am rambling again, aren’t I? Sorry. Shall we have a go at this then?</p>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-0-1.png" class="img-fluid figure-img" width="672"></p>
<p></p><figcaption class="figure-caption">This was my first attempt at plotting something that looks a bit like the docker whale. It’s nothing fancy: I created a data frame with coordinates corresponding to a circle and then distorted it in two different ways. One distortion produces the whale body, another makes the tail. They are rendered in ggplot2 with <code>geom_polygon()</code>. Later in the process I tweaked the tail a bit.</figcaption><p></p>
</figure>
</div>
</div></div></div>
</section>
<section id="motivating-problem" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="motivating-problem">Motivating problem</h2>
<p>In my <a href="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/">last post</a> I mentioned that, <a href="https://knowyourmeme.com/memes/btw-i-use-arch">btw I use arch</a> now.<sup>11</sup> Well. Sort of. A more accurate statement would be to say that I installed arch linux on a secondary laptop as something to play with and I’m still using ubuntu for my day to day coding. At the moment I’m still getting used to the quirks of arch and encountering odd behaviour when – for example – one of my scripts that ran perfectly well on my ubuntu machine caused RStudio to crash when I ran it on the arch box. The “it works on my machine” problem strikes again… sigh.</p>
<p>In an effort to isolate the problem I started reran the unit tests for the package that I thought might be responsible for the crash and they all passed on both machines, but since that package is my <a href="https://blog.djnavarro.net/posts/2022-12-22_queue/">queue</a> package and the unit test aren’t as comprehensive as I’d like I would not be at all surprised if there’s an exotic bug that makes it fail only on arch.</p>
<p>All this made me think a little about how I typically use CI.<sup>12</sup> Like many R developers I’ll use github actions to run my unit tests on mac os, ubuntu, and windows. I’ll run the tests with multiple versions of R including R-devel. If I’m thinking about a CRAN submission I’ll expand the scope and run my tests using other services also.</p>
<p>I’ve never tested on arch though.</p>
<p>I’ve never tested on arch because I’ve never had an arch machine to test on before. Or… [docker enters from stage left]… I’ve never had an arch image that I can use to containerise my unit tests before…</p>
<p>Ooh… a side project! Why don’t I try creating some docker images with R running on arch linux? In other words, why don’t I do a really lazy, half-arsed version of the thing that the <a href="https://rocker-project.org/">rocker project</a> has already done to an extremely high standard with ubuntu and debian… except with arch?<sup>13</sup></p>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-1-1.png" class="img-fluid figure-img" width="672"></p>
<p></p><figcaption class="figure-caption">Adding the boxes was conceptually easy: the <code>expand_grid()</code> function from tidyr creates the necessary data structure, and <code>geom_tile()</code> plots it. One thing I really like about this iteration is that the spacing of the boxes creates a <a href="https://en.wikipedia.org/wiki/Grid_illusion">Hermann grid illusion</a>. It’s not as cool as the scintillating grid version, but I used to teach it in introductory cognitive science classes and I have a soft spot for it.</figcaption><p></p>
</figure>
</div>
</div></div></div>
</section>
<section id="minimal-example" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="minimal-example">Minimal example</h2>
<p>Sometimes the easiest way to tell a story is to begin at the ending, and – spoiler! – I did in fact succeed in my attempt,<sup>14</sup> and I am now the proud<sup>15</sup> maintainer of two hastily-constructed images hosted on the github container repository. Now that I have these things, it should be really easy for us to put together a simple project that will run R code using these images and – even though I’m going to be using my ubuntu laptop – have it be executed by a container that is running arch.</p>
<p>Oh. The. Thrill.</p>
<p>Be. Still. My. Beating. Heart.</p>
<p>Okay, so here it is. Accompanying this post is a project called <a href="https://github.com/djnavarro/quarto-blog/tree/main/posts/2023-01-01_playing-with-docker/system-check"><code>system-check</code></a> that consists of a three-line dockerfile and a two-line R script. Let’s ignore the dockerfile for a moment and focus on the R code. Here’s the script:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./system-check/script.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Running on:"</span>, osVersion), <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">  "</span>)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"With locale:"</span>, <span class="fu" style="color: #4758AB;">strsplit</span>(<span class="fu" style="color: #4758AB;">Sys.getlocale</span>(), <span class="st" style="color: #20794D;">";"</span>)[[<span class="dv" style="color: #AD0000;">1</span>]]), <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">  "</span>)</span></code></pre></div>
</div>
</div>
<p>If we ignore the parts the code dedicated to making the output pretty, we can see that all it’s doing is printing the <code>osVersion</code> and calling <code>Sys.getlocale()</code>. Here’s what happens when I run the script on my ubuntu laptop, without using docker in any way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">Rscript</span> ./system-check/script.R</span></code></pre></div>
</div>
<pre><code>Running on:
  Ubuntu 22.04.1 LTS
With locale:
  LC_CTYPE=en_AU.UTF-8
  LC_NUMERIC=C
  LC_TIME=en_AU.UTF-8
  LC_COLLATE=en_AU.UTF-8
  LC_MONETARY=en_AU.UTF-8
  LC_MESSAGES=en_AU.UTF-8
  LC_PAPER=en_AU.UTF-8
  LC_NAME=C
  LC_ADDRESS=C
  LC_TELEPHONE=C
  LC_MEASUREMENT=en_AU.UTF-8
  LC_IDENTIFICATION=C</code></pre>
<p>The first part of the output tells me my operating system (ubuntu), and the second part specifies the locale. I’m in Australia so for most things my locale is <code>en_AU.UTF-8</code>. That makes sense, but of course this output is specific to my machine: an arch user running R in the United States should expect to see something very different.</p>
<p>That’s where docker comes in.</p>
<p>The docker images that I built and am hosting on github simulate exactly that. The computing environments specified by the <code>arch-r-base</code> and <code>arch-r-test</code> images use arch linux as the operating system and have the system locale set to <code>en_US.UTF-8</code>. So if I were to execute this script from within a container running the <code>arch-r-base</code><sup>16</sup> image, I should expect to see different results even though my laptop is running ubuntu and my system locale is <code>en_AU.UTF-8</code>.</p>
<p>Here’s a dockerfile specifying an image that does exactly that:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./system-check/Dockerfile</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb10-1"><span class="kw" style="color: #003B4F;">FROM</span> ghcr.io/djnavarro/arch-r-base:release</span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">COPY</span> script.R /home/script.R</span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">CMD</span> <span class="ex" style="color: null;">Rscript</span> /home/script.R</span></code></pre></div>
</div>
</div>
<p>It’s a sequence of three <strong>docker instructions</strong>.</p>
<ul>
<li><p>Like all dockerfiles, it begins with a <a href="https://docs.docker.com/engine/reference/builder/#from"><code>FROM</code></a><sup>17</sup> <sup>18</sup> instruction that specifies the name of a preexisting docker image to use as a starting point. I’ve been very explicit here and <a href="https://windsock.io/referencing-docker-images/">referenced the image</a> using a fully qualified name that consists of a container repository (<code>ghcr.io</code>), a username (<code>djnavarro</code>), the image name <code>arch-r-base</code>, and an optional tag (<code>release</code>). You don’t always need to be that precise, especially if you’re using an image that you know exists locally.</p></li>
<li><p>The second step is a <a href="https://docs.docker.com/engine/reference/builder/#copy"><code>COPY</code></a> instruction that copies the R script to a specific file path within the image. This takes place at build time. This step is necessary because when the container starts up it will be isolated from other processes on the system. It doesn’t have access to the host file system. If you want the container to have access to a file you need to copy it at build time.<sup>19</sup></p></li>
<li><p>The third step is a <a href="https://docs.docker.com/engine/reference/builder/#cmd"><code>CMD</code></a> instruction. Every dockerfile must have a <code>CMD</code> instruction (and much like highlanders there can be only one) specifying a default for what the container should do when it is launched.<sup>20</sup></p></li>
</ul>
<p>Later on, when you’re starting to feel comfortable with the basic idea of writing dockerfiles, its worth reading the official guide on <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">dockerfile best practices</a>. Lots of little things started to make sense to me when I did that. For now, let’s just acknowledged that yes Virginia we have a dockerfile.</p>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-2-1.png" class="img-fluid" width="672"></p>
</div></div></div>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-3-1.png" class="img-fluid figure-img" width="672"></p>
<p></p><figcaption class="figure-caption">I created the random container stacks using dplyr. The boxes are grouped by column (using their x-coordinate), a random height is generated for that column, and rows in the data frame corresponding to boxes above that height are filtered out of the data set before it is passed to ggplot2.</figcaption><p></p>
</figure>
</div>
</div></div></div>
<section id="building-the-image" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="building-the-image">Building the image</h3>
<p>Our next step is to build it to an image. The way we do that from the terminal is with the <a href="https://docs.docker.com/engine/reference/commandline/build/"><code>docker build</code></a> command. For the purposes of this post – which I am writing in quarto and thus has a code execution engine blah blah blah – I am going to assume<sup>21</sup> that the working directory is set to the folder containing the post, and that it contains a subfolder called <code>system-check</code> in which the dockerfile and the R script are stored. In other words, <code>system-check</code> is the directory holding the docker project.</p>
<p>The simplest way to build an image from this project is like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;">docker</span> build system-check</span></code></pre></div>
</div>
<p>This command tells docker to look for a dockerfile in the <code>system-check</code> folder, and make an image using whatever it finds there. That’s a perfectly fine way to do it, but my personal preference is to give the resulting image a name, using the <code>--tag</code> flag. So the command, which I’ve broken over a few lines to highlight its structure, now looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">docker</span> build <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb12-2">  <span class="at" style="color: #657422;">--tag</span> my-system-check <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb12-3">  system-check</span></code></pre></div>
</div>
<p>The reason I’ve done this is that later on when I call the <code>docker run</code> command I can refer to the image by name, which does make life simpler. Under normal circumstances I’d probably have called the image <code>system-check</code> rather than <code>my-system-check</code> (why create new names when I don’t need to?) but for the purposes of this post I think it’s helpful to be clear that when I refer to the image name I’m referring to the thing I created using <code>--tag</code>, not the name of the folder that holds the dockerfile!</p>
<p>Okay, enough talk. Let’s run it this time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">docker</span> build <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb13-2">  <span class="at" style="color: #657422;">--tag</span> my-system-check <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb13-3">  system-check</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/3 : FROM ghcr.io/djnavarro/arch-r-base:release
release: Pulling from djnavarro/arch-r-base
597018910566: Pull complete 
8150bcc6bc64: Pull complete 
e49e8a34689c: Pull complete 
c14eff78251d: Pull complete 
42b358854199: Pull complete 
babcc0d99cfd: Pull complete 
Digest: sha256:f9ff0f7b431ed1b975823c871949ccbc15c3e3d7dce23775f793f9f64bb2779e
Status: Downloaded newer image for ghcr.io/djnavarro/arch-r-base:release
 ---&gt; 0a9929e54a6b
Step 2/3 : COPY script.R /home/script.R
 ---&gt; b9913096b118
Step 3/3 : CMD Rscript /home/script.R
 ---&gt; Running in 1314ee0ff2fb
Removing intermediate container 1314ee0ff2fb
 ---&gt; 489003ffb5d0
Successfully built 489003ffb5d0
Successfully tagged my-system-check:latest</code></pre>
</div>
<p>The output here shows you that the build process unfolds as a sequence of three steps: one for each of our docker instructions. It also gives you the impression (correctly!) that the first step is considerably more complex than the other two. That makes sense: the <code>arch-r-base</code> image is itself constructed from a sequence of steps, and those steps have produced an image that is built from several “layers”. Each of those hexadecimal hashes refers to one of the layers.<sup>22</sup></p>
<p>When you run this on your own system you’ll see little progress bars as the different layers of the image are downloaded. For example, that line that says <code>597018910566: Pull complete</code>? That’s referring to the very first layer in the <code>arch-r-base</code> image (which is arch linux itself) and that layer is about 280MB or something like that, so you get a little progress bar to let you know how its going. That’s super helpful if you ever find yourself using the <code>arch-r-test</code> image, because one of the layers in that image includes a texlive installation (ugh) so that layer is (I’m so sorry) about 2GB in size.</p>
<p>Downloading large images is a huge pain, and generally I would try to avoid creating an image with a layer that large. Thankfully, docker is smart enough to check the local cache before trying to download anything.<sup>23</sup> We can see this in action if we repeat the exact same command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;">docker</span> build <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb15-2">  <span class="at" style="color: #657422;">--tag</span> my-system-check <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb15-3">  system-check</span></code></pre></div>
</div>
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/3 : FROM ghcr.io/djnavarro/arch-r-base:release
 ---&gt; 0a9929e54a6b
Step 2/3 : COPY script.R /home/script.R
 ---&gt; Using cache
 ---&gt; b9913096b118
Step 3/3 : CMD Rscript /home/script.R
 ---&gt; Using cache
 ---&gt; 489003ffb5d0
Successfully built 489003ffb5d0
Successfully tagged my-system-check:latest</code></pre>
<p>This finishes instantaneously because docker<sup>24</sup> <sup>25</sup> notices that I already have a copy of this image so it uses the cache for everything.</p>
<p>We can confirm that this has worked by running <code>docker image list</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;">docker</span> image list</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>REPOSITORY                      TAG       IMAGE ID       CREATED          SIZE
my-system-check                 latest    489003ffb5d0   26 minutes ago   955MB
ghcr.io/djnavarro/arch-r-base   release   0a9929e54a6b   13 hours ago     955MB
hello-world                     latest    feb5d9fea6a5   15 months ago    13.3kB</code></pre>
</div>
<p>Now, you might be wondering about those image sizes. Did I really just create <em>two</em> 955MB images? That seems a bit much. It’s certainly true that the image is 955MB in size: after all, the image does have to describe an entire operating system running R, so it’s not surprising that it isn’t tiny. But it looks as if I just wasted an entire GB of space by making two of them. Thankfully, docker is not that silly. The <code>my-system-check</code> image is almost identical to <code>arch-r-base</code>. In fact, it’s just one very small layer added on top of the layers that comprise the <code>arch-r-base</code> image. If you dig into the documentation on <a href="https://docs.docker.com/storage/storagedriver/">storage</a> you discover that docker quite sensibly allows images to share layers, so even though <code>arch-r-base</code> and <code>my-system-check</code> are individually 955MB in size, they are also <em>collectively</em> 955MB in size thanks to layer sharing.</p>
<p>The sheer excitement of working with computers is just too much for me to bear sometimes.</p>
</section>
<section id="run-in-a-container" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="run-in-a-container">Run in a container</h3>
<p>Okay, we are ready to go baby! The image is set up, and all we have to do is run it in a container using <a href="https://docs.docker.com/engine/reference/commandline/run/"><code>docker run</code></a>. The <code>docker run</code> command is quite powerful, and has a lot of arguments you can use to control how the image executes.<sup>26</sup> I’m not going to use any of that flexibility here. This is just a vanilla command asking docker to run the <code>my-system-check</code> image:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;">docker</span> run my-system-check</span></code></pre></div>
</div>
<pre><code>Running on:
  Arch Linux
With locale:
  LC_CTYPE=en_US.UTF-8
  LC_NUMERIC=C
  LC_TIME=en_US.UTF-8
  LC_COLLATE=en_US.UTF-8
  LC_MONETARY=en_US.UTF-8
  LC_MESSAGES=en_US.UTF-8
  LC_PAPER=en_US.UTF-8
  LC_NAME=C
  LC_ADDRESS=C
  LC_TELEPHONE=C
  LC_MEASUREMENT=en_US.UTF-8
  LC_IDENTIFICATION=C</code></pre>
<p>It’s an awfully elaborate way to say “btw I use arch”, but yes… the image does what we hoped it would. It’s executed the R script on arch linux with a <code>en_US.UTF-8</code> locale. I have successfully faked it<sup>27</sup> as an arch user.</p>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-row-2-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="fancier-example" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="fancier-example">Fancier example</h2>
<p>For the next example I’ll add a little bit of extra complexity. The real reason I wanted the <code>arch-r</code> images in the first place was to make it easier to run unit tests for an R package on a system running arch linux. If I were going to do this properly I’d set it up in a way that could be incorporated into a CI workflow with github actions, but I’m not going to be that fancy for this blog post. Instead, I’ll set it up so that I can generate containers running arch linux that can clone a package repository from github into the container, and then run the unit tests. I’ll even give it a bit of flexibility so that the user can decide at build time<sup>28</sup> which github repository the container points to.</p>
<p>As before the project – which I’ve called <code>test-on-arch</code> – consists of two files. There’s an R script that executes at run time, and the dockerfile executed at build time. Here they are:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./test-on-arch/Dockerfile</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb21-1"><span class="kw" style="color: #003B4F;">FROM</span> ghcr.io/djnavarro/arch-r-test:release</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;"># copy the testing script</span></span>
<span id="cb21-4"><span class="kw" style="color: #003B4F;">COPY</span> clone-and-check.R /home/clone-and-check.R</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;"># pass args through environment variables</span></span>
<span id="cb21-7"><span class="kw" style="color: #003B4F;">ARG</span> user</span>
<span id="cb21-8"><span class="kw" style="color: #003B4F;">ARG</span> repo</span>
<span id="cb21-9"><span class="kw" style="color: #003B4F;">ARG</span> cran=https://cloud.r-project.org</span>
<span id="cb21-10"><span class="kw" style="color: #003B4F;">ENV</span> user=$user</span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;">ENV</span> repo=$repo</span>
<span id="cb21-12"><span class="kw" style="color: #003B4F;">ENV</span> cran=$cran</span>
<span id="cb21-13"></span>
<span id="cb21-14"><span class="co" style="color: #5E5E5E;"># run the testing script</span></span>
<span id="cb21-15"><span class="kw" style="color: #003B4F;">CMD</span> <span class="ex" style="color: null;">Rscript</span> /home/clone-and-check.R</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./test-on-arch/clone-and-check.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># get the system environment variables</span></span>
<span id="cb22-2">user <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.getenv</span>(<span class="st" style="color: #20794D;">"user"</span>)</span>
<span id="cb22-3">repo <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.getenv</span>(<span class="st" style="color: #20794D;">"repo"</span>)</span>
<span id="cb22-4">cran <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.getenv</span>(<span class="st" style="color: #20794D;">"cran"</span>)</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;"># define github url and a path for the local package install</span></span>
<span id="cb22-7">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"https://github.com"</span>, user, repo, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb22-8">dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"/home/project"</span>, repo, <span class="at" style="color: #657422;">sep=</span><span class="st" style="color: #20794D;">"/"</span>)</span>
<span id="cb22-9"></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;"># clone repo, install dependencies, and run checks</span></span>
<span id="cb22-11">gert<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">git_clone</span>(url, dir, <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb22-12">remotes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_deps</span>(dir, <span class="at" style="color: #657422;">dependencies =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">repos =</span> cran)</span>
<span id="cb22-13">rcmdcheck<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rcmdcheck</span>(dir)</span></code></pre></div>
</div>
</div>
<p>Like last time, the place to start is with the R script. It expects to find <code>user</code>, <code>repo</code>, and <code>cran</code> values as environment variables. Once it finds those, it clones the <code>user/repo</code> repository from github, installs any dependencies of the package from <code>cran</code>, and then uses rcmdcheck to check the downloaded package.</p>
<p>Now let’s look at how the dockerfile sets up the computing environment to enable this script to be run on arch linux:</p>
<ul>
<li><p>Just like we saw in the last example, the dockerfile begins with a <code>FROM</code> instruction. This time around though I’m using the <code>arch-r-test</code> image rather than the <code>arch-r-base</code> image. Much like the base image, the test image runs arch linux and installs R in the environment. However, it also installs several other system dependencies and R packages that come in handy when running <code>R CMD check</code>, which makes it a bit more useful in this context.</p></li>
<li><p>The next step in the dockerfile is the <code>COPY</code> instruction that ensures that the image has a copy of the R script. There’s nothing new here so we can move on.</p></li>
<li><p>The next two steps use the <a href="https://docs.docker.com/engine/reference/builder/#arg"><code>ARG</code></a> instruction. This is a new one for us: it’s a mechanism for allowing the user to specify arguments that will be passed to docker when building the image. That’s handy because it means I can customise the image that gets built. The obvious use here is that I can specify the <code>user</code> and the <code>repo</code> for the package that I want to check! (Later on we’ll see how this is done using the <code>--build-arg</code> argument to <code>docker build</code>)</p></li>
<li><p>Next up is another <code>ARG</code> step, used to specify the url for the <code>cran</code> repository that the container should use to download any R packages. Notice, however, that this time I’ve specified a default value, so you don’t actually have to specify <code>cran</code> when you call <code>docker build</code>: if you don’t it will just use the default url</p></li>
<li><p>The <code>ARG</code> steps pass the user input to docker, but they don’t set any environment variables (remember, our R script is expecting to find environment variables). That’s the job of the <a href="https://docs.docker.com/engine/reference/builder/#env"><code>ENV</code></a> instructions that appear in the next three steps.<sup>29</sup></p></li>
<li><p>Finally, we have the <code>CMD</code> instruction, which specifies a default action for the container: run the script.</p></li>
</ul>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-4-1.png" class="img-fluid figure-img" width="672"></p>
<p></p><figcaption class="figure-caption">After a little bit of tinkering I decided to make the tail a little fatter and use <code>theme_minimal()</code> with a border added as a way of subtly communicating the fact that ggplot2 is doing the work. The grid lines are almost invisible in a single whale plot like this but become more prominent in the facetted plots where there are more of them.</figcaption><p></p>
</figure>
</div>
</div></div></div>
<section id="building-the-image-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="building-the-image-1">Building the image</h3>
<p>Setting aside the fact that our <code>test-on-arch</code> project has a lot of flaws and limitations, it will serve the purposes we need it to. Let’s say I want to create an image that will check the queue package hosted at <a href="https://github.com/djnavarro/queue/">github.com/djnavarro/queue</a>. To do that I’ll need to set <code>user=djnavarro</code> and <code>repo=queue</code> when I build the image, which I can do with the <code>--build-arg</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;">docker</span> build <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb23-2">  <span class="at" style="color: #657422;">--tag</span> test-queue <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb23-3">  <span class="at" style="color: #657422;">--build-arg</span> user=djnavarro <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb23-4">  <span class="at" style="color: #657422;">--build-arg</span> repo=queue <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb23-5">  test-on-arch</span></code></pre></div>
</div>
<p>Notice that I’ve chosen to call this image <code>test-queue</code>. A nice thing about being able to name the images independently from the dockerfile is that it’s easy to create multiple images using the same dockerfile (just with different arguments) and give them meaningful names. And sure, this particular example is very silly because literally everything I’m doing here at the build stage could be done just as efficiently at the run stage. But whatever.</p>
<p>Let’s see what happens when I try to execute this build command. The <code>arch-r-test</code> image is considerably larger than <code>arch-r-base</code>. This one isn’t a frugal image! It takes a while, so I’m going to go have a smoke while I wait<sup>30</sup> but the nice thing is that if you’ve done it once you don’t have to do it again. Anyway…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;">docker</span> build <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb24-2">  <span class="at" style="color: #657422;">--tag</span> test-queue <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb24-3">  <span class="at" style="color: #657422;">--build-arg</span> user=djnavarro <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb24-4">  <span class="at" style="color: #657422;">--build-arg</span> repo=queue <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb24-5">  test-on-arch</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/9 : FROM ghcr.io/djnavarro/arch-r-test:release
release: Pulling from djnavarro/arch-r-test
597018910566: Already exists 
8150bcc6bc64: Already exists 
198fc6066fb9: Pull complete 
b1600153860f: Pull complete 
ed6330815f89: Pull complete 
fb2d11f79510: Pull complete 
ff05f09f5a58: Pull complete 
9abaa14ad138: Pull complete 
Digest: sha256:f4605c32e18168589bd32248f5af97f8f1b57bd4de5fa6e1b54e53db13ab9514
Status: Downloaded newer image for ghcr.io/djnavarro/arch-r-test:release
 ---&gt; 4f873f316861
Step 2/9 : COPY clone-and-check.R /home/clone-and-check.R
 ---&gt; d7c276834cf8
Step 3/9 : ARG user
 ---&gt; Running in efeeb43f874d
Removing intermediate container efeeb43f874d
 ---&gt; d5d055328ea4
Step 4/9 : ARG repo
 ---&gt; Running in 75f6d1ff1502
Removing intermediate container 75f6d1ff1502
 ---&gt; 7edce4d95863
Step 5/9 : ARG cran=https://cloud.r-project.org
 ---&gt; Running in 3f620871b0d7
Removing intermediate container 3f620871b0d7
 ---&gt; 51a7ec6700ba
Step 6/9 : ENV user=$user
 ---&gt; Running in c7a7811e374e
Removing intermediate container c7a7811e374e
 ---&gt; b8e01e708a08
Step 7/9 : ENV repo=$repo
 ---&gt; Running in 2f01c723898c
Removing intermediate container 2f01c723898c
 ---&gt; 0939221c1a35
Step 8/9 : ENV cran=$cran
 ---&gt; Running in 37399a0bbe70
Removing intermediate container 37399a0bbe70
 ---&gt; ccba9748fdd2
Step 9/9 : CMD Rscript /home/clone-and-check.R
 ---&gt; Running in 5d3eb7184e21
Removing intermediate container 5d3eb7184e21
 ---&gt; 76926d5616d7
Successfully built 76926d5616d7
Successfully tagged test-queue:latest</code></pre>
</div>
<p>Notice that during the first step when downloading <code>arch-r-test</code>, I didn’t have to download the whole thing. Two of the layers in <code>arch-r-test</code> are shared with the <code>arch-r-base</code> image, and docker is smart enough to notice that I already have those layers in my cache. That’s what the <code>Already exists</code> part of the output indicates. Admittedly it doesn’t save us much in this case because its the texlive installation that causes pain, but it’s a nice feature nevertheless.</p>
<p>As a little sanity check – because, dear reader, I have been sitting here waiting very patiently while a large image downloaded over a slow connection and would like to confirm that I don’t have to do that again – let’s repeat the exercise from earlier and try building it a second time just to reassure ourselves that the cache is doing its job:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;">docker</span> build <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb26-2">  <span class="at" style="color: #657422;">--tag</span> test-queue <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb26-3">  <span class="at" style="color: #657422;">--build-arg</span> user=djnavarro <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb26-4">  <span class="at" style="color: #657422;">--build-arg</span> repo=queue <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb26-5">  test-on-arch </span></code></pre></div>
</div>
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/9 : FROM ghcr.io/djnavarro/arch-r-test:release
 ---&gt; 4f873f316861
Step 2/9 : COPY clone-and-check.R /home/clone-and-check.R
 ---&gt; Using cache
 ---&gt; d7c276834cf8
Step 3/9 : ARG user
 ---&gt; Using cache
 ---&gt; d5d055328ea4
Step 4/9 : ARG repo
 ---&gt; Using cache
 ---&gt; 7edce4d95863
Step 5/9 : ARG cran=https://cloud.r-project.org
 ---&gt; Using cache
 ---&gt; 51a7ec6700ba
Step 6/9 : ENV user=$user
 ---&gt; Using cache
 ---&gt; b8e01e708a08
Step 7/9 : ENV repo=$repo
 ---&gt; Using cache
 ---&gt; 0939221c1a35
Step 8/9 : ENV cran=$cran
 ---&gt; Using cache
 ---&gt; ccba9748fdd2
Step 9/9 : CMD Rscript /home/clone-and-check.R
 ---&gt; Using cache
 ---&gt; 76926d5616d7
Successfully built 76926d5616d7
Successfully tagged test-queue:latest</code></pre>
<p>Not going to lie, I breathed a little sigh of relief. Docker used the cached layers, and that all happened instantaneously. Okay cool. I’m going to stop doing these checks from now on, but one last time let’s take a peek at the list of images I have stored locally:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="ex" style="color: null;">docker</span> image list</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>REPOSITORY                      TAG       IMAGE ID       CREATED              SIZE
test-queue                      latest    76926d5616d7   About a minute ago   4.99GB
my-system-check                 latest    b7426ffb1484   12 minutes ago       955MB
ghcr.io/djnavarro/arch-r-test   release   4f873f316861   17 hours ago         4.99GB
ghcr.io/djnavarro/arch-r-base   release   0a9929e54a6b   17 hours ago         955MB
hello-world                     latest    feb5d9fea6a5   15 months ago        13.3kB</code></pre>
</div>
</section>
<section id="run-in-a-container-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="run-in-a-container-1">Run in a container</h3>
<p>Okay where were we? Ah yes, we’ve built our image so now it’s time to run it. Does my little queue package build cleanly and pass its unit tests on arch? Let’s find out…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="ex" style="color: null;">docker</span> run test-queue</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Transferred 766 of 766 objects...done!
Checked out 34 of 34 commits... done!

── R CMD build ─────────────────────────────────────────────────────────────────
* checking for file ‘.../DESCRIPTION’ ... OK
* preparing ‘queue’:
* checking DESCRIPTION meta-information ... OK
* installing the package to build vignettes
* creating vignettes ... OK
* checking for LF line-endings in source and make files and shell scripts
* checking for empty or unneeded directories
* building ‘queue_0.0.2.tar.gz’

── R CMD check ─────────────────────────────────────────────────────────────────
* using log directory ‘/tmp/Rtmp1Nld2I/file131069108/queue.Rcheck’
* using R version 4.2.2 (2022-10-31)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘queue/DESCRIPTION’ ... OK
* this is package ‘queue’ version ‘0.0.2’
* package encoding: UTF-8
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘queue’ can be installed ... OK
* checking installed package size ... OK
* checking package directory ... OK
* checking ‘build’ directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... NOTE
Namespaces in Imports field not imported from:
  ‘callr’ ‘cli’ ‘R6’ ‘tibble’
  All declared Imports should be used.
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking installed files from ‘inst/doc’ ... OK
* checking files in ‘vignettes’ ... OK
* checking examples ... OK
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ...
  Running ‘testthat.R’
 OK
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in ‘inst/doc’ ... OK
* checking running R code from vignettes ...
  ‘queue.Rmd’ using ‘UTF-8’... OK
 NONE
* checking re-building of vignette outputs ... OK
* checking PDF version of manual ... OK
* DONE

Status: 1 NOTE
See
  ‘/tmp/Rtmp1Nld2I/file131069108/queue.Rcheck/00check.log’
for details.
System has not been booted with systemd as init system (PID 1). Can't operate.
Failed to connect to bus: Host is down
Warning: Your system is mis-configured: ‘/var/db/timezone/localtime’ is not a symlink
Warning: ‘/var/db/timezone/localtime’ is not identical to any known timezone file
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
── R CMD check results ──────────────────────────────────────── queue 0.0.2 ────
Duration: 38.5s

❯ checking dependencies in R code ... NOTE
  Namespaces in Imports field not imported from:
    ‘callr’ ‘cli’ ‘R6’ ‘tibble’
    All declared Imports should be used.

0 errors ✔ | 0 warnings ✔ | 1 note ✖</code></pre>
</div>
<p>Okay yes, this is the expected result. That note would of course get me in trouble on CRAN, but it’s what I was expecting to see: I get the same note on ubuntu. I just haven’t gotten around to fixing it yet. The only part that is different to what I see on ubuntu is this:</p>
<div class="column-page-right">
<pre><code>System has not been booted with systemd as init system (PID 1). Can't operate.
Failed to connect to bus: Host is down
Warning: Your system is mis-configured: ‘/var/db/timezone/localtime’ is not a symlink
Warning: ‘/var/db/timezone/localtime’ is not identical to any known timezone file
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1</code></pre>
</div>
<p>Yeah. This is interesting. I deliberately didn’t try to faff about with <a href="https://en.wikipedia.org/wiki/Systemd">systemd</a> in these images, so this is an expected warning. It’s not a problem with queue or with arch, just a consequence of how I built the images. That would have some consequences for testing a lot of packages, but I’m not trying to recreate the rocker project here so I’m not too fussed about it in this little exercise.</p>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-6a-1.png" class="img-fluid" width="672"></p>
</div></div></div>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-6b-1.png" class="img-fluid figure-img" width="672"></p>
<p></p><figcaption class="figure-caption">The colour scheme is sampled using <code>ggthemes::canva_palettes</code>, picking one of the ones that provides a blue/green palette.</figcaption><p></p>
</figure>
</div>
</div></div></div>
</section>
<section id="two-images-one-dockerfile" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="two-images-one-dockerfile">Two images, one dockerfile</h3>
<p>The advantage to passing arguments is that you can build many images from the same dockerfile, and docker will reuse the cached layers intelligently. We’ve seen this already, but here’s another example. Let’s try using the <code>test-on-arch</code> dockerfile to build an image that checks the <a href="https://github.com/rladies/praise">praise</a> package. Up to this point I’ve never tried testing the praise package on arch before, but (of course????) this builds immediately and without downloading anything, because everything that actually matters about this build was already done when I built the <code>test-queue</code> image earlier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="ex" style="color: null;">docker</span> build <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb33-2">  <span class="at" style="color: #657422;">--tag</span> test-praise <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb33-3">  <span class="at" style="color: #657422;">--build-arg</span> user=rladies <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb33-4">  <span class="at" style="color: #657422;">--build-arg</span> repo=praise <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb33-5">  test-on-arch </span></code></pre></div>
</div>
<pre><code>Sending build context to Docker daemon  3.072kB
Step 1/9 : FROM ghcr.io/djnavarro/arch-r-test:release
 ---&gt; 4f873f316861
Step 2/9 : COPY clone-and-check.R /home/clone-and-check.R
 ---&gt; Using cache
 ---&gt; d7c276834cf8
Step 3/9 : ARG user
 ---&gt; Using cache
 ---&gt; d5d055328ea4
Step 4/9 : ARG repo
 ---&gt; Using cache
 ---&gt; 7edce4d95863
Step 5/9 : ARG cran=https://cloud.r-project.org
 ---&gt; Using cache
 ---&gt; 51a7ec6700ba
Step 6/9 : ENV user=$user
 ---&gt; Running in 3a9b1843d5b4
Removing intermediate container 3a9b1843d5b4
 ---&gt; aa2578d71155
Step 7/9 : ENV repo=$repo
 ---&gt; Running in 1d15632dd6ca
Removing intermediate container 1d15632dd6ca
 ---&gt; 057a61970d7c
Step 8/9 : ENV cran=$cran
 ---&gt; Running in e5586a32b05a
Removing intermediate container e5586a32b05a
 ---&gt; 48852232e4b7
Step 9/9 : CMD Rscript /home/clone-and-check.R
 ---&gt; Running in 0fb9a526210c
Removing intermediate container 0fb9a526210c
 ---&gt; a02feea26152
Successfully built a02feea26152
Successfully tagged test-praise:latest</code></pre>
<p>Once again, we can take a look at the list of images:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="ex" style="color: null;">docker</span> image list</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>REPOSITORY                      TAG       IMAGE ID       CREATED          SIZE
test-praise                     latest    a02feea26152   20 seconds ago   4.99GB
test-queue                      latest    76926d5616d7   4 minutes ago    4.99GB
my-system-check                 latest    b7426ffb1484   14 minutes ago   955MB
ghcr.io/djnavarro/arch-r-test   release   4f873f316861   17 hours ago     4.99GB
ghcr.io/djnavarro/arch-r-base   release   0a9929e54a6b   17 hours ago     955MB
hello-world                     latest    feb5d9fea6a5   15 months ago    13.3kB</code></pre>
</div>
<p>Again note the value of layer sharing. If these were all independent images we’d be looking at 17GB on disk. In fact, because <code>arch-r-test</code> reuses the layers from <code>arch-r-base</code> and all the other images are trivial additions to one of these two images, the <em>total</em> size of all these images is in fact “only” 5GB… i.e., the size of the <code>arch-r-test</code> image. And again, the only reason that one is so big is that I was really fussy about tex installations and bundled an entire texlive distribution with extra fonts and everything because I have no desire deal with tests whining about missing tex stuff.</p>
<p>Anyway, let’s get back on track and run the <code>test-praise</code> image in a container:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb37-1"><span class="ex" style="color: null;">docker</span> run test-praise</span></code></pre></div>
</div>
<div class="column-page-right">
<pre><code>Transferred 431 of 431 objects...done!
Checked out 26 of 26 commits... done!

── R CMD build ─────────────────────────────────────────────────────────────────
* checking for file ‘.../DESCRIPTION’ ... OK
* preparing ‘praise’:
* checking DESCRIPTION meta-information ... OK
* checking for LF line-endings in source and make files and shell scripts
* checking for empty or unneeded directories
Omitted ‘LazyData’ from DESCRIPTION
* building ‘praise_1.0.0.tar.gz’

── R CMD check ─────────────────────────────────────────────────────────────────
* using log directory ‘/tmp/Rtmpi7Ngun/file12ad64a83/praise.Rcheck’
* using R version 4.2.2 (2022-10-31)
* using platform: x86_64-pc-linux-gnu (64-bit)
* using session charset: UTF-8
* checking for file ‘praise/DESCRIPTION’ ... OK
* this is package ‘praise’ version ‘1.0.0’
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking whether package ‘praise’ can be installed ... OK
* checking installed package size ... OK
* checking package directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... OK
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking examples ... OK
* checking for unstated dependencies in ‘tests’ ... OK
* checking tests ...
  Running ‘testthat.R’
 OK
* checking PDF version of manual ... OK
* DONE

Status: OK

System has not been booted with systemd as init system (PID 1). Can't operate.
Failed to connect to bus: Host is down
Warning: Your system is mis-configured: ‘/var/db/timezone/localtime’ is not a symlink
Warning: ‘/var/db/timezone/localtime’ is not identical to any known timezone file
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
── R CMD check results ─────────────────────────────────────── praise 1.0.0 ────
Duration: 25.1s

0 errors ✔ | 0 warnings ✔ | 0 notes ✔</code></pre>
</div>
<p>Once again we see the warning about systemd, and once again I am ignoring it. The thing that matters here, as far as I’m concerned, is that the unit tests for the praise package pass on arch.</p>
</section>
<section id="a-small-caution" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="a-small-caution">A small caution</h3>
<p>Before we move onto the third project I want to talk about one more example using this one, as a way of cautioning anyone who might feel inclined to use it without fixing its many deficiencies. Let’s try using <code>test-on-arch</code> to run the unit tests for ggplot2, shall we? Unlike praise and queue, ggplot2 is a large and complicated package with substantial dependencies and a lot of unit tests. That’s going to be a problem given that <code>test-on-arch</code> clones the entire repository from scratch every time it’s called. Building the image is easy, because the build stage for <code>test-on-arch</code> doesn’t do anything except copy the script and pass a few arguments…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb39-1"><span class="ex" style="color: null;">docker</span> build <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb39-2">  <span class="at" style="color: #657422;">--tag</span> test-ggplot2 <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb39-3">  <span class="at" style="color: #657422;">--build-arg</span> user=tidyverse <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb39-4">  <span class="at" style="color: #657422;">--build-arg</span> repo=ggplot2 <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb39-5">  test-on-arch </span></code></pre></div>
</div>
<p>But when we call <code>docker run</code> things become unpleasant for us even before we’ve had a chance to start running the unit tests, because the git clone operation is very time consuming…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"><span class="ex" style="color: null;">docker</span> run test-ggplot2 </span></code></pre></div>
</div>
<pre><code>Transferred 15676 of 74694 objects...</code></pre>
<p><br></p>
<p>…uh, right. Look this is going to take a while, so maybe we should move on?</p>
<p>The main reason I wanted to point to this is to highlight that the clone step occurs at run time, and the entire clone operation is repeated every time we call it. That’s not a smart way to do this. If you really wanted to design a docker workflow for testing packages on arch, you’d want to make some smarter design choices than this! The <code>test-on-arch</code> project I’ve used in this blog post is a toy, nothing more.<sup>31</sup></p>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-row-3-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="hosting-images" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="hosting-images">Hosting images</h2>
<p>For the third example, let’s look at the <a href="https://github.com/djnavarro/arch-r/blob/main/base/Dockerfile"><code>arch-r-base</code></a> image itself. In addition to the dockerfile there are two small text files used to specify locale information. The two locale files aren’t very interesting and could easily have been included as strings in the dockerfile, but I found it neater to keep them separate. The <code>locale-gen</code> file specifies locales that the image understands, and <code>locale.conf</code> specifies configuration details. (Both are configuration files on linux). In any case, here’s the whole thing:</p>
<div class="column-page-right">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>base/Dockerfile</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb42-1"><span class="kw" style="color: #003B4F;">FROM</span> archlinux:base-devel</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="kw" style="color: #003B4F;">LABEL</span> org.opencontainers.image.source <span class="st" style="color: #20794D;">"https://github.com/djnavarro/arch-r"</span> </span>
<span id="cb42-4"><span class="kw" style="color: #003B4F;">LABEL</span> org.opencontainers.image.authors <span class="st" style="color: #20794D;">"Danielle Navarro &lt;djnavarro@protonmail.com&gt;"</span> </span>
<span id="cb42-5"><span class="kw" style="color: #003B4F;">LABEL</span> org.opencontainers.image.description DESCRIPTION</span>
<span id="cb42-6"><span class="kw" style="color: #003B4F;">LABEL</span> org.opencontainers.image.licenses <span class="st" style="color: #20794D;">"GPL-3.0"</span></span>
<span id="cb42-7"></span>
<span id="cb42-8"><span class="co" style="color: #5E5E5E;"># set the locale</span></span>
<span id="cb42-9"><span class="kw" style="color: #003B4F;">COPY</span> base/locale.gen /etc/locale.gen</span>
<span id="cb42-10"><span class="kw" style="color: #003B4F;">COPY</span> base/locale.conf /etc/locale.conf</span>
<span id="cb42-11"><span class="kw" style="color: #003B4F;">RUN</span> <span class="ex" style="color: null;">locale-gen</span></span>
<span id="cb42-12"><span class="kw" style="color: #003B4F;">ENV</span> LANG=en_US.UTF-8</span>
<span id="cb42-13"><span class="kw" style="color: #003B4F;">ENV</span> LC_ALL=en_US.UTF-8</span>
<span id="cb42-14"></span>
<span id="cb42-15"><span class="co" style="color: #5E5E5E;"># install R and set default command</span></span>
<span id="cb42-16"><span class="kw" style="color: #003B4F;">RUN</span> <span class="ex" style="color: null;">pacman</span> <span class="at" style="color: #657422;">-Syu</span> <span class="at" style="color: #657422;">--noconfirm</span> r</span>
<span id="cb42-17"><span class="kw" style="color: #003B4F;">CMD</span> <span class="ex" style="color: null;">R</span> <span class="at" style="color: #657422;">--no-save</span></span></code></pre></div>
</div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>base/locale.gen</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb43-1"><span class="ex" style="color: null;">C.UTF8</span> UTF-8</span>
<span id="cb43-2"><span class="ex" style="color: null;">en_US.UTF-8</span> UTF-8</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>base/locale.conf</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb44-1"><span class="va" style="color: #111111;">LANG</span><span class="op" style="color: #5E5E5E;">=</span>en_US.UTF-8</span>
<span id="cb44-2"><span class="va" style="color: #111111;">LC_ALL</span><span class="op" style="color: #5E5E5E;">=</span>en_US.UTF-8</span></code></pre></div>
</div>
</div>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-5a-1.png" class="img-fluid" width="672"></p>
</div></div></div>
<div class="cell page-columns page-full">

<div class="no-row-height column-margin column-container"><div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-5b-1.png" class="img-fluid figure-img" width="672"></p>
<p></p><figcaption class="figure-caption">The names are sampled using the babynames package. I deliberately chose to ignore name frequency, sampling uniformly at random from the names in the data set. You end up with more interesting choices that way.</figcaption><p></p>
</figure>
</div>
</div></div></div>
<p>Truly exciting stuff, I know. Thankfully only some of it is new. The <code>FROM</code> instruction uses the <code>archlinux:base-devel</code> image hosted <a href="https://hub.docker.com/_/archlinux">here</a>. The <a href="https://docs.docker.com/engine/reference/builder/#run"><code>RUN</code></a> instruction is used to execute commands at build time, so you can see in this example I’ve used it to create system locale information (by calling <code>locale-gen</code>) and to install R (using the <code>pacman</code> package manager used on arch linux).</p>
<p>The other new thing here is the <a href="https://docs.docker.com/engine/reference/builder/#label"><code>LABEL</code></a> instruction used to supply metadata about the image. This is particularly important if you’re planning to make your image public, as I have done with the <code>arch-r-base</code> and <code>arch-r-test</code> images. The labelling that I’ve supplied here follows the <a href="https://github.com/opencontainers/image-spec/blob/main/annotations.md">specifications</a> provided by the <a href="https://opencontainers.org/">open container initiative</a>, or at least attempts to. I’m still new to this, but as far as I can tell this is correct? Anyway, you can see that it specifies the location of the source code, the author of the image, and the licence. That’s the main thing.</p>
<p>You are probably wondering, though, why the description just reads “DESCRIPTION” and doesn’t have an actual… you know… description. The reason for that is that I’m hosting these through the <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">github container registry</a> that links my github repository to the images automatically. Specifically, I’m using a github action that automates the build process and populates the description on the <a href="https://github.com/djnavarro/arch-r/pkgs/container/arch-r-base">arch-r-base package page</a> using the description field from the <a href="https://github.com/djnavarro/arch-r">arch-r github repository</a>. Leaving the value for that field as “DESCRIPTION” ensures that all works smoothly.</p>
<p>Speaking of which, I’m not in any way an expert on github actions – this is my first attempt at creating a workflow and I cribbed heavily from other workflows I found online – but for whatever it’s worth I figure I should share. Here’s the <a href="https://github.com/djnavarro/arch-r/blob/main/.github/workflows/build-image.yaml">workflow</a> I’m using:</p>
<div class="column-page-right">
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.github/workflows/build-image.yaml</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb45-1"><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> publish arch-r images</span></span>
<span id="cb45-2"></span>
<span id="cb45-3"><span class="fu" style="color: #4758AB;">on</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">push</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-5"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">branches</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">'release'</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb45-6"><span class="at" style="color: #657422;">    </span></span>
<span id="cb45-7"><span class="fu" style="color: #4758AB;">env</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">REGISTRY</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ghcr.io</span></span>
<span id="cb45-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">IMAGE_NAME</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ github.repository }}</span></span>
<span id="cb45-10"></span>
<span id="cb45-11"><span class="fu" style="color: #4758AB;">jobs</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-12"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">build-and-push-image</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-13"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">runs-on</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ubuntu-latest</span></span>
<span id="cb45-14"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">strategy</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-15"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">fail-fast</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">false</span></span>
<span id="cb45-16"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">matrix</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-17"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">include</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-18"><span class="at" style="color: #657422;">          </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">dockerfile</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ./base/Dockerfile</span></span>
<span id="cb45-19"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ghcr.io/djnavarro/arch-r-base</span></span>
<span id="cb45-20"><span class="at" style="color: #657422;">          </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">dockerfile</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ./test/Dockerfile</span></span>
<span id="cb45-21"><span class="at" style="color: #657422;">            </span><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ghcr.io/djnavarro/arch-r-test</span></span>
<span id="cb45-22"><span class="at" style="color: #657422;">            </span></span>
<span id="cb45-23"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">permissions</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-24"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> read</span></span>
<span id="cb45-25"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">packages</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> write</span></span>
<span id="cb45-26"></span>
<span id="cb45-27"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">steps</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-28"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> checkout repository</span></span>
<span id="cb45-29"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> actions/checkout@v2</span></span>
<span id="cb45-30"></span>
<span id="cb45-31"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> login to the container registry</span></span>
<span id="cb45-32"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9</span></span>
<span id="cb45-33"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">with</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-34"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">registry</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ env.REGISTRY }}</span></span>
<span id="cb45-35"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">username</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ github.actor }}</span></span>
<span id="cb45-36"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">password</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ secrets.GITHUB_TOKEN }}</span></span>
<span id="cb45-37"></span>
<span id="cb45-38"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> extract metadata (tags, labels) for docker</span></span>
<span id="cb45-39"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">id</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> meta</span></span>
<span id="cb45-40"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38</span></span>
<span id="cb45-41"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">with</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-42"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">images</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ matrix.image }}</span></span>
<span id="cb45-43"></span>
<span id="cb45-44"><span class="at" style="color: #657422;">      </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> build and push docker image</span></span>
<span id="cb45-45"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">uses</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc</span></span>
<span id="cb45-46"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">with</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb45-47"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">context</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> .</span></span>
<span id="cb45-48"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">file</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ matrix.dockerfile }}</span></span>
<span id="cb45-49"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">push</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb45-50"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">tags</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ steps.meta.outputs.tags }}</span></span>
<span id="cb45-51"><span class="at" style="color: #657422;">          </span><span class="fu" style="color: #4758AB;">labels</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${{ steps.meta.outputs.labels }}</span></span></code></pre></div>
</div>
</div>
</div>
<p>For this workflow to run, I needed to edit the permissions associated with my github PAT to include some additional scopes. If, like me, you’ve created your PAT using the default scopes provided by <code>usethis::create_github_token()</code>, you’ll need a few more to run workflows that build and modify docker images if you want to work with github packages. This workflow doesn’t use all these, but the permissions typically required for to work with container images on github are these:</p>
<ul>
<li><code>read:packages</code> scope to download container images and read metadata.</li>
<li><code>write:packages</code> scope to download and upload container images and read and write metadata.</li>
<li><code>delete:packages</code> scope to delete container images.</li>
</ul>
<p>In any case, this github actions workflow triggers an automatic deployment to the github container registry whenever there is a new push to the release branch of the repository. This is what creates the <code>ghcr.io/djnavarro/arch-r-base:release</code> and <code>ghcr.io/djnavarro/arch-r-test:release</code> images. I’m entirely certain that this could be done in a more sophisticated way, but it does work, and that was my main goal for this post.</p>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-row-4-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>And that brings us to the end of the post. There’s not much else to say really. I played around with docker. Learned a few things. Had some fun. Drew some whales. Normal stuff, really. But if you’re at all keen on following up on any of the things in this post, here are some resources I relied on when writing this:</p>
<ul>
<li><p>The docker reference documentation: <a href="https://docs.docker.com/reference/">docs.docker.com/reference</a></p></li>
<li><p>Dockerfile best practices <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">docs.docker.com/develop/develop-images/dockerfile_best-practices</a></p></li>
<li><p>Instructions on giving docker sudo privileges for linux users: <a href="https://docs.docker.com/engine/install/linux-postinstall/">docs.docker.com/engine/install/linux-postinstall</a></p></li>
<li><p>The rocker project by Carl Boettiger, Dirk Eddelbuettel, Noam Ross, and Shima Tatsuya: <a href="https://rocker-project.org/">rocker-project.org</a></p></li>
<li><p>Source code for the rocker repositories: <a href="https://github.com/rocker-org/rocker">github.com/rocker-org/rocker</a></p></li>
<li><p>Blog post on docker by Colin Fay: <a href="https://colinfay.me/docker-r-reproducibility/">colinfay.me/docker-r-reproducibility</a></p></li>
<li><p>Slides on docker by Noam Ross: <a href="https://github.com/noamross/nyhackr-docker-talk">github.com/noamross/nyhackr-docker-talk</a></p></li>
<li><p>Docker for beginners by Prakhar Srivastav: <a href="https://docker-curriculum.com/">docker-curriculum.com</a></p></li>
<li><p>Referencing docker images by Nigel Brown <a href="https://windsock.io/referencing-docker-images/">windsock.io/referencing-docker-images</a></p></li>
<li><p>Working with the github container registry: <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry</a></p></li>
<li><p>Information about open containers labels: <a href="https://github.com/opencontainers/image-spec/blob/main/annotations.md">github.com/opencontainers/image-spec/blob/main/annotations.md</a></p></li>
</ul>
</section>
<section id="postscript-making-dockerplots-in-ggplot2" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="postscript-making-dockerplots-in-ggplot2">Postscript: Making “dockerplots” in ggplot2</h2>
<p>I had a lot of fun making the whales. They’re cute, and they make me happy. The function that generates these is called <code>sample_whales()</code>, and you can find the source code by expanding the folded code block below. Enjoy!</p>
<div class="cell">
<details>
<summary>Source code for <code>sample_whales()</code></summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb46-3"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb46-4"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb46-5"></span>
<span id="cb46-6">sample_whales <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">seed =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">6</span>) {</span>
<span id="cb46-7"></span>
<span id="cb46-8">  <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">is.null</span>(seed)) seed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb46-9">  <span class="fu" style="color: #4758AB;">set.seed</span>(seed)</span>
<span id="cb46-10"></span>
<span id="cb46-11">  nwhales <span class="ot" style="color: #003B4F;">&lt;-</span> nrow <span class="sc" style="color: #5E5E5E;">*</span> ncol</span>
<span id="cb46-12"></span>
<span id="cb46-13">  <span class="co" style="color: #5E5E5E;"># define a circle</span></span>
<span id="cb46-14">  circle <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb46-15">    <span class="at" style="color: #657422;">th =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">*</span>pi, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">1000</span>),</span>
<span id="cb46-16">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">cos</span>(th),</span>
<span id="cb46-17">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">sin</span>(th)</span>
<span id="cb46-18">  )</span>
<span id="cb46-19"></span>
<span id="cb46-20">  <span class="co" style="color: #5E5E5E;"># distort a circle to create the whale body</span></span>
<span id="cb46-21">  whale_body <span class="ot" style="color: #003B4F;">&lt;-</span> circle <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb46-22">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb46-23">      <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">if_else</span>(y <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, y),</span>
<span id="cb46-24">      <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">if_else</span>(x <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">abs</span>(y) <span class="sc" style="color: #5E5E5E;">^</span> .<span class="dv" style="color: #AD0000;">6</span>, <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">abs</span>(y) <span class="sc" style="color: #5E5E5E;">^</span> <span class="fl" style="color: #AD0000;">1.7</span>)</span>
<span id="cb46-25">    )</span>
<span id="cb46-26"></span>
<span id="cb46-27">  <span class="co" style="color: #5E5E5E;"># distort a circle to create the whale tail</span></span>
<span id="cb46-28">  whale_tail <span class="ot" style="color: #003B4F;">&lt;-</span> circle <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb46-29">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb46-30">      <span class="at" style="color: #657422;">weight =</span> (<span class="fu" style="color: #4758AB;">abs</span>(th <span class="sc" style="color: #5E5E5E;">-</span> pi)<span class="sc" style="color: #5E5E5E;">/</span>pi) <span class="sc" style="color: #5E5E5E;">^</span> <span class="fl" style="color: #AD0000;">1.3</span>,</span>
<span id="cb46-31">      <span class="at" style="color: #657422;">angle =</span> pi <span class="sc" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.2</span>,</span>
<span id="cb46-32">      <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">*</span> weight <span class="sc" style="color: #5E5E5E;">+</span> .<span class="dv" style="color: #AD0000;">35</span> <span class="sc" style="color: #5E5E5E;">*</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> weight),</span>
<span id="cb46-33">      <span class="at" style="color: #657422;">x_scaled =</span> x <span class="sc" style="color: #5E5E5E;">*</span> .<span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb46-34">      <span class="at" style="color: #657422;">y_scaled =</span> y <span class="sc" style="color: #5E5E5E;">*</span> .<span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb46-35">      <span class="at" style="color: #657422;">x =</span> x_scaled <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;">-</span> y_scaled <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">sin</span>(angle),</span>
<span id="cb46-36">      <span class="at" style="color: #657422;">y =</span> x_scaled <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;">+</span> y_scaled <span class="sc" style="color: #5E5E5E;">*</span> <span class="fu" style="color: #4758AB;">cos</span>(angle),</span>
<span id="cb46-37">      <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">1.35</span>,</span>
<span id="cb46-38">      <span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.25</span></span>
<span id="cb46-39">    )</span>
<span id="cb46-40"></span>
<span id="cb46-41">  <span class="co" style="color: #5E5E5E;"># bind the body to the tail to make a whale</span></span>
<span id="cb46-42">  whale <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(whale_body, whale_tail)</span>
<span id="cb46-43"></span>
<span id="cb46-44">  <span class="co" style="color: #5E5E5E;"># fully stacked set of boxes</span></span>
<span id="cb46-45">  box_stack <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">expand_grid</span>(</span>
<span id="cb46-46">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="sc" style="color: #5E5E5E;">-</span>.<span class="dv" style="color: #AD0000;">7</span>, .<span class="dv" style="color: #AD0000;">5</span>, .<span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb46-47">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">seq</span>(.<span class="dv" style="color: #AD0000;">25</span>, <span class="fl" style="color: #AD0000;">1.5</span>, .<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb46-48">  )</span>
<span id="cb46-49"></span>
<span id="cb46-50">  <span class="co" style="color: #5E5E5E;"># sample names using babynames package</span></span>
<span id="cb46-51">  names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unique</span>(<span class="fu" style="color: #4758AB;">sample</span>(</span>
<span id="cb46-52">    <span class="at" style="color: #657422;">x =</span> babynames<span class="sc" style="color: #5E5E5E;">::</span>babynames<span class="sc" style="color: #5E5E5E;">$</span>name,</span>
<span id="cb46-53">    <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">ceiling</span>(nwhales <span class="sc" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.2</span>)</span>
<span id="cb46-54">  ))</span>
<span id="cb46-55"></span>
<span id="cb46-56">  <span class="co" style="color: #5E5E5E;"># sample colours using a blue palette from ggthemes</span></span>
<span id="cb46-57">  shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(</span>
<span id="cb46-58">    <span class="at" style="color: #657422;">x =</span> ggthemes<span class="sc" style="color: #5E5E5E;">::</span>canva_palettes<span class="sc" style="color: #5E5E5E;">$</span><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Cool blues</span><span class="st" style="color: #20794D;">`</span>,</span>
<span id="cb46-59">    <span class="at" style="color: #657422;">size =</span> nrow <span class="sc" style="color: #5E5E5E;">*</span> ncol,</span>
<span id="cb46-60">    <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb46-61">  )</span>
<span id="cb46-62"></span>
<span id="cb46-63">  boxes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb46-64">  whales <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb46-65">  <span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>(nrow <span class="sc" style="color: #5E5E5E;">*</span> ncol)) {</span>
<span id="cb46-66"></span>
<span id="cb46-67">    <span class="co" style="color: #5E5E5E;"># assign the whales a name and a look</span></span>
<span id="cb46-68">    whales[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> whale <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb46-69">      <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb46-70">        <span class="at" style="color: #657422;">name =</span> names[[i]],</span>
<span id="cb46-71">        <span class="at" style="color: #657422;">look =</span> shades[[i]]</span>
<span id="cb46-72">      )</span>
<span id="cb46-73"></span>
<span id="cb46-74">    <span class="co" style="color: #5E5E5E;"># assign the whales a name and colour,</span></span>
<span id="cb46-75">    <span class="co" style="color: #5E5E5E;"># and randomly remove boxes off the stack</span></span>
<span id="cb46-76">    boxes[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> box_stack <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb46-77">      <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb46-78">        <span class="at" style="color: #657422;">name =</span> names[[i]],</span>
<span id="cb46-79">        <span class="at" style="color: #657422;">look =</span> shades[[i]]</span>
<span id="cb46-80">      ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb46-81">      <span class="fu" style="color: #4758AB;">group_by</span>(x) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb46-82">      <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">max_height =</span> <span class="fu" style="color: #4758AB;">runif</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">min =</span> .<span class="dv" style="color: #AD0000;">05</span>, <span class="at" style="color: #657422;">max =</span> <span class="fl" style="color: #AD0000;">1.8</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb46-83">      <span class="fu" style="color: #4758AB;">filter</span>(y <span class="sc" style="color: #5E5E5E;">&lt;</span> max_height)</span>
<span id="cb46-84">  }</span>
<span id="cb46-85"></span>
<span id="cb46-86">  <span class="co" style="color: #5E5E5E;"># collapse lists to data frames</span></span>
<span id="cb46-87">  boxes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(boxes)</span>
<span id="cb46-88">  whales <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(whales)</span>
<span id="cb46-89"></span>
<span id="cb46-90">  <span class="co" style="color: #5E5E5E;"># last minute tinkering... :-)</span></span>
<span id="cb46-91">  boxes <span class="ot" style="color: #003B4F;">&lt;-</span> boxes <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">-</span> .<span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">x =</span> x <span class="sc" style="color: #5E5E5E;">+</span> .<span class="dv" style="color: #AD0000;">01</span>)</span>
<span id="cb46-92">  whales <span class="ot" style="color: #003B4F;">&lt;-</span> whales <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">y =</span> y <span class="sc" style="color: #5E5E5E;">-</span> .<span class="dv" style="color: #AD0000;">31</span>)</span>
<span id="cb46-93"></span>
<span id="cb46-94">  <span class="co" style="color: #5E5E5E;"># draw the plot</span></span>
<span id="cb46-95">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">mapping =</span> <span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">fill =</span> look, <span class="at" style="color: #657422;">colour =</span> look)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-96">    <span class="fu" style="color: #4758AB;">geom_polygon</span>(<span class="at" style="color: #657422;">data =</span> whales, <span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-97">    <span class="fu" style="color: #4758AB;">geom_tile</span>(</span>
<span id="cb46-98">      <span class="at" style="color: #657422;">data =</span> boxes,</span>
<span id="cb46-99">      <span class="at" style="color: #657422;">width =</span> .<span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb46-100">      <span class="at" style="color: #657422;">height =</span> .<span class="dv" style="color: #AD0000;">18</span>,</span>
<span id="cb46-101">      <span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb46-102">      <span class="at" style="color: #657422;">linejoin =</span> <span class="st" style="color: #20794D;">"bevel"</span></span>
<span id="cb46-103">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-104">    <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="fu" style="color: #4758AB;">vars</span>(name), <span class="at" style="color: #657422;">nrow =</span> nrow, <span class="at" style="color: #657422;">ncol =</span> ncol) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-105">    <span class="fu" style="color: #4758AB;">coord_equal</span>(<span class="at" style="color: #657422;">xlim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.5</span>, <span class="fl" style="color: #AD0000;">1.5</span>), <span class="at" style="color: #657422;">ylim =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.5</span>, <span class="fl" style="color: #AD0000;">1.5</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-106">    <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">labels =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">name =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-107">    <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">labels =</span> <span class="cn" style="color: #8f5902;">NULL</span>, <span class="at" style="color: #657422;">name =</span> <span class="cn" style="color: #8f5902;">NULL</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-108">    <span class="fu" style="color: #4758AB;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-109">    <span class="fu" style="color: #4758AB;">scale_color_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-110">    <span class="fu" style="color: #4758AB;">theme_minimal</span>(<span class="at" style="color: #657422;">base_size =</span> <span class="dv" style="color: #AD0000;">14</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-111">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb46-112">      <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb46-113">      <span class="at" style="color: #657422;">panel.border =</span> <span class="fu" style="color: #4758AB;">element_rect</span>(<span class="at" style="color: #657422;">fill =</span> <span class="cn" style="color: #8f5902;">NA</span>, <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"grey90"</span>)</span>
<span id="cb46-114">    )</span>
<span id="cb46-115">}</span></code></pre></div>
</details>
</div>
<div class="cell page-columns page-full" data-layout-align="center" data-fig.dpi="200">
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index_files/figure-html/whale-grid-1.png" class="img-fluid figure-img" width="1536"></p>
</figure>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Look, I know it’s technically supposed to be “Docker” not “docker” and it’s supposed to be “GitHub” not “github”. But my body was “supposed” to use testosterone as its primary sex hormone too, and we’ve all seen how little regard I had for that. Sometimes conventions are worth breaking out of sheer bloody-mindedness.↩︎</p></li>
<li id="fn2"><p>STEM people need to find new words for things. What is a “kernel”? Is it the bits of an operating system that run essential processes? Is it a specialised function that applies only to input arguments of specific types (i.e., what R folks would call a “method” in the functional object oriented programming sense, as opposed to the encapsulated object-oriented programming paradigm that dominates in other languages)? Or is it the thing the governs the transformation from data space to feature space in a support vector machine or other inferential systems built on reproducing kernel Hilbert spaces? For fuck’s sake people LEARN A NEW WORD.↩︎</p></li>
<li id="fn3"><p>I’d like to propose using “egg” in lieu of “kernel” for any new tech nomenclature. Not only does it show you have some wit and know your audience.↩︎</p></li>
<li id="fn4"><p>Your audience consists of queers. Nobody else reads this far into a nested footnote series.↩︎</p></li>
<li id="fn5"><p>Sometimes I think that the “not technical enough” concept is just straight up misogyny, both internalised and… external. I mean, I taught myself Bayesian nonparametrics and algorithmic information theory and even wrote respected academic papers in both those fields in addition to my own discipline of mathematical psychology. I was an editor at Science (yes, the journal). I wrote a quite successful statistics textbook. I’m an author on the ggplot2 book. I was a successful tenured academic in a mathematical science with no formal training in mathematics. I’ve taught myself several programming languages. Last year I wrote quite a lot of Apache Arrow content that everyone seems to like. So, um, yeah. Perhaps I should stop paying attention to the opinions of boys who condescend to me and tell me I’m not technical enough because… I’m stronger in R than in Python or C++? Tiresome.↩︎</p></li>
<li id="fn6"><p>Yes I know <a href="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/">I use Arch now</a>, hush. you’ll see why I’m doing this from ubuntu in a moment…↩︎</p></li>
<li id="fn7"><p>I suppose, for the sake of precision, I should draw attention to the part of the output that refers to the <strong>docker client</strong> and the <strong>docker daemon</strong>. Docker takes a client-server approach. When I’m typing these commands I’m interacting with the docker client, which passes my requests over to the docker daemon. The daemon is the process that does most of the work. It pulls images from registries (e.g., <a href="https://hub.docker.com/">docker hub</a>, <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry">github container registry</a>, etc), it builds images, it creates containers, etc. In this case, the client and the daemon are both running on the same machine, but they don’t actually have to. The daemon could totally run on a remote system. However, the distinction between the client and the daemon isn’t important for this post so I’m going to ignore it and collectively refer to both of them working together as “docker”.↩︎</p></li>
<li id="fn8"><p>I’m sure that’s supposed to be “Docker file”. Per my earlier footnote, I don’t care.↩︎</p></li>
<li id="fn9"><p>As a little aside. In order to create this output with the “appearance” of starting with a fresh docker installation I – quite nobly – cleared out all my cached containers and images so that I could start from a clean system. Should you ever want to do the same, it’s a two step process. Assuming you don’t have any containers running, your first step is to delete any containers on your system that aren’t running (i.e., all of them) with <code>docker container prune</code>. Then you can delete any “dangling” images that aren’t associated with a container (i.e., all of them) with <code>docker image prune --all</code>. You’re welcome.↩︎</p></li>
<li id="fn10"><p>No I don’t know why they use <code>list</code> for images and <code>ls</code> for containers. That seems unhelpful.↩︎</p></li>
<li id="fn11"><p>I strongly feel there is qualitative dissertation to be written mapping the btw-i-use-arch guy onto the <a href="https://en.wikipedia.org/wiki/Men_Explain_Things_to_Me">men-explain-things-to-me</a> guy from the Rebecca Solnit essay. As far as I can tell they are essentially the same person, just inhabiting different semantic domains. One day I will write the story of the guy at a conference who breathlessly explained a paper to me and how my work would be improved considerably if I’d read it while I was quietly wondering how to explain to him that it was my paper… sigh. <em>Men</em>.↩︎</p></li>
<li id="fn12"><p>Am I the only one who still thinks that CI should stand for “confidential informant” rather than “continuous integration”?↩︎</p></li>
<li id="fn13"><p>Quite obviously, I do not actually recommend anyone use the images I’ve set up. I mean, surely my phrasing here makes 1000% clear that this is a cute project I threw together in a couple of days for my own amusement. If you are looking to do reproducible computing in R you should be using the images provided by rocker. If you use my images and something goes wrong then to be perfectly frank you only have yourself to blame.↩︎</p></li>
<li id="fn14"><p>Set your sights low enough and it is very easy to achieve your goals.↩︎</p></li>
<li id="fn15"><p>No.&nbsp;Just no.↩︎</p></li>
<li id="fn16"><p>It’s an open question how long I’m going to last in this post before making an Archer joke.↩︎</p></li>
<li id="fn17"><p>Technically it’s possible for an <code>ARG</code> instruction to precede a <code>FROM</code> instruction but I’m yet to actually see that in the wild.↩︎</p></li>
<li id="fn18"><p>Much like SQL clauses, docker instructions are written in uppercase by convention. They don’t actually <em>have</em> to be uppercase, but again, I’ve never seen a dockerfile written any other way. Along the same lines, your dockerfile doesn’t actually have to be called “Dockerfile”, but it’s the default and everyone uses it.↩︎</p></li>
<li id="fn19"><p>Alternatively, you can use the <a href="https://docs.docker.com/engine/reference/builder/#volume"><code>VOLUME</code></a> instruction to create a mount point and use that as a way to share a folder between the host and the container at run time, but that’s more fiddly and there’s really no need for that in this simple example. But if you want an easy-to-follow example using the <code>VOLUME</code> instruction in an R project, Colin Fay uses it in his <a href="https://colinfay.me/docker-r-reproducibility/">docker for R users</a> post.↩︎</p></li>
<li id="fn20"><p>The user can override the default by when calling <code>docker run</code> but I’m not going to cover that in this post↩︎</p></li>
<li id="fn21"><p>Correctly.↩︎</p></li>
<li id="fn22"><p>To a first approximation you can imagine that every docker instruction produces a layer, and it is my understanding that this is how it used to be. But for efficiency reasons more recent versions of docker only produce persistent layers from <code>RUN</code>, <code>COPY</code>, and <code>ADD</code> instructions. Other instructions produce temporary intermediate images, but do not create persistent layers in the final image.↩︎</p></li>
<li id="fn23"><p>Or, as Sterling would phrase it, “I swear I had something for this.”↩︎</p></li>
<li id="fn24"><p>Now that I’ve started making Archer jokes, it’s very hard not to turn “docker” into a euphemism. Hm. I should call him.↩︎</p></li>
<li id="fn25"><p>Look all I’m saying is that “Queering the dock: images as tops, containers as bottoms” would make a terrible thesis and I would read the hell out of it.↩︎</p></li>
<li id="fn26"><p>In truth I didn’t actually need to construct the <code>my-system-check</code> image at all: I could have just run <code>arch-r-base</code> in a container with a few arguments tweaked. But that would defeat the point of the exposition, obviously.↩︎</p></li>
<li id="fn27"><p>Phrasing.↩︎</p></li>
<li id="fn28"><p>Okay yeah I could do this at run time too, but I want an excuse to talk about the <code>ARG</code> instruction.↩︎</p></li>
<li id="fn29"><p>Okay yes, clever person, I could have chosen to pass environment variables at run time using the <code>--env</code> argument to <code>docker run</code>. I didn’t need to do this at build time using <code>ARG</code>. But that would defeat the point of the exposition wouldn’t it? I wanted to use <code>ARG</code> and <code>ENV</code> in the main text, and quietly mention the <code>--env</code> argument to <code>docker run</code> in an aside. And I have now accomplished exactly that, haven’t I?↩︎</p></li>
<li id="fn30"><p>I am, after all, “on smoko” (which in my case means I am unemployed and bored out of my mind) but incidentally if you want to see the most fabulous cover ever (Wet Leg covering The Chats), <a href="https://www.youtube.com/watch?v=P_dza9y6cg0">here it is</a>.↩︎</p></li>
<li id="fn31"><p>I know the mystery will be too much for some people so I’d better resolve it: no, the ggplot2 tests didn’t pass on the arch image. Some of the dependencies didn’t install properly, and then eventually it threw an error trying to build the vignettes. If I had the energy I’d dig into it and figure out why… but I don’t.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Danielle Navarro},
  title = {Playing with Docker and the Github Container Registry},
  date = {2023-01-01},
  url = {https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2023. <span>“Playing with Docker and the Github
Container Registry.”</span> January 1, 2023. <a href="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker">https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>R</category>
  <category>Docker</category>
  <guid>https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/index.html</guid>
  <pubDate>Sat, 31 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-01-01_playing-with-docker/whales.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>btw I use Arch now</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I installed <a href="https://archlinux.org/">Arch Linux</a> on an aging Dell XPS 13 today.</p>
<p>Did I plan to do this when I woke up this morning? No, it was an impulsive decision. Was it a sensible way to spend the last Friday of 2022? Also no. Was it the kind of thing that will pay off in the long run through a deeper technical understanding of… something? Again, the answer is no.</p>
<p>Ah, but will it impress people and make them think I am cool?</p>
<p>Oh honey.</p>
<p>No.<sup>1</sup></p>
<p>But look…</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/screenfetch.png" class="img-fluid figure-img" alt="The screenfetch for Arch running on my laptop"></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/laptops.jpg" class="img-fluid figure-img" alt="My regular laptop running Ubuntu (on the left) and the newly-built Arch laptop (on the right)"></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/rstudio.png" class="img-fluid figure-img" alt="The Arch screenfetch alongside ggplot2 output, both inside RStudio"></p>
</figure>
</div>
<p>So pretty. So pointless. So fun.</p>
<p><br></p>
<section id="installing-arch" class="level2">
<h2 class="anchored" data-anchor-id="installing-arch">Installing Arch</h2>
<p>I have absolutely no intention of writing a “how to install Arch” guide, for many excellent reasons. Top of that list is that I am a complete amateur when it comes to Arch and I have no idea whatsoever what I’m doing. The only reason any of this happened is that I happened to have a spare laptop<sup>2</sup> and couldn’t think of anything better to do with it. My point is I have no business whatsoever in trying to guide anyone else through the installation process. What I am going to do, however, is jot down my notes to myself on the process. I may need them again…</p>
<ul>
<li><p>The installation guide (<a href="wiki.archlinux.org/title/installation_guide">https://wiki.archlinux.org/title/installation_guide</a>) is good but dense, and I had to read a lot of the documents it links to in order to make progress. It took me three tries to get a working installation, because I missed some subtle thing (e.g., the first time I didn’t have the bootable USB booting in UEFI mode, because <em>obviously</em> I would have thought of that at the beginning… sigh).</p></li>
<li><p>Everything became easier once I started feeling comfortable using <a href="https://wiki.archlinux.org/title/pacman">pacman</a>.</p></li>
<li><p>The network configuration step gave me some grief. Eventually I got it to work when I installed <a href="https://wiki.archlinux.org/title/NetworkManager">NetworkManager</a> and enabled <code>NetworkManager.service</code>, which in turn only made sense to me after I’d read about <a href="https://wiki.archlinux.org/title/Help:Reading#Control_of_systemd_units">start/enable</a> and realised that “starting” a service sets it running in the background now, and “enabling” it means it will start automatically on startup.</p></li>
<li><p>Toward the end of the installation it tells you to install a bootloader. I thought I wouldn’t need to since I already had grub on my machine from the previous Ubuntu install but in the end it didn’t work without going through the <a href="https://wiki.archlinux.org/title/GRUB">GRUB</a> install process</p></li>
<li><p>Setting up users was an odd exercise in reminding me that I’d forgotten what life was like before sudo. During the initial installation I set up a root user, but no regular users, so my first step was to give myself a … um, me. This article on <a href="https://linuxhint.com/add_users_arch_linux/">adding users on Arch Linux</a> was helpful. Partly because it’s a nice walkthrough, but also because it clued me into the fact that Arch doesn’t come with <a href="https://wiki.archlinux.org/title/sudo">sudo</a>, so I had to install that. It also highlighted things I’d never thought about with sudo before, mostly around which users have sudo privileges. Anyway, the article walked me through the process so now I am danielle on my Arch box (insert the usual Australian joke about getting a root). I added myself to the wheel group so that I can escalate to admin privileges using sudo, and I’m done.</p></li>
<li><p>As much as the thought of returning to my childhood and running a computer without any desktop environment at all amused me… no. No we are going to have a desktop. I did think about other possible desktop environments besides old faithful, but in the end decided that I actually quite like the look and feel of default <a href="https://wiki.archlinux.org/title/GNOME">GNOME</a> (even without the various tweaks that distros usually overlay on top of it) so I installed that. I did, however, make one concession to nostalgia. I decided not to have the machine automatically boot into GNOME. Instead I followed the instructions so I could start it with <code>startx</code> as soon as I log in, or choose to stay in the shell.</p></li>
<li><p>Installing a decent browser (<a href="https://wiki.archlinux.org/title/firefox">firefox</a>, obviously…) was easy, but not surprisingly the font situation for the web was a bit tricky. Arch doesn’t come with an extensive font library so the browser would often rely on fallback fonts for pages that don’t bundle the fonts, making a lot of pages look a bit unpleasant. Fixing that took a bit of digging. The best description on fonts I found was <a href="https://gist.github.com/YoEight/d19112db56cd8f93835bf2d009d617f7">this gist</a>. I have a suspicion that it’s the <a href="https://archlinux.org/packages/extra/any/noto-fonts/">noto-fonts</a> package that does a lot of the work in fixing the issues</p></li>
<li><p>Fixing the touchpad scroll direction and speed was awkward too. Initially the settings panel in GNOME didn’t acknowledge that I even had a touchpad, which was annoying. So I started trying to edit the <a href="https://man.archlinux.org/man/xorg.conf.5">xorg.conf</a> settings and… actually I don’t think that fixed anything but weirdly after editing <code>/etc/X11/xorg.conf</code> the touchpad settings magically showed up in the GNOME settings panel and then I could edit them. Yeah. I have no idea whatsoever whether this had anything to do with me, or if the gods at large were messing with me or what. So um… yeah, future Danielle, best of luck!</p></li>
</ul>
<p>Moving on…</p>
<p><br></p>
</section>
<section id="setting-up-r-on-arch" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-r-on-arch">Setting up R on Arch</h2>
<p>Any time I get a new machine set up, my first discretionary task is to make sure that I can do data science work with it (that’s a depressingly revealing statement about me). Once upon a time that really meant getting R set up, but I’m a bit more polyglot nowadays (gasp!). Nevertheless, R is my first love so I always start there…</p>
<p>Some of the set up tasks are easy, or at least as easy as anything gets on linux. For example, installing <a href="https://wiki.archlinux.org/title/r">R</a> is “easy”, and installing <a href="https://wiki.archlinux.org/title/git">git</a> is “easy”. Similarly, if you use <a href="https://wiki.archlinux.org/title/Visual_Studio_Code">VS code</a> as your IDE, that too is “easy”. These are all easy tasks because they’re officially supported. You can install all three with one command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">sudo</span> pacman <span class="at" style="color: #657422;">-S</span> r git code</span></code></pre></div>
<p>That installs the most recent R release, the current git release, and the current VS code release. It’s considerably easier than installing on a Ubuntu LTS release, especially for R, to be honest. On Ubuntu there’s a lot of messing about trying to get the latest versions. The Arch repositories are up to date, which does simplify matters considerably.</p>
<p>Things become a little trickier when you have to venture outside the official repositories. For example, suppose I want to use RStudio as my IDE. There isn’t an Arch package for RStudio, and – to the surprise of nobody – Posit doesn’t release one either. However, I’m hardly the first person to want to use RStudio on Arch, so it is equally unsurprising that the Arch community has stepped in to help fill the gap.</p>
<p>In other words, I’ve reached the point where I have to start installing from the <a href="https://aur.archlinux.org/">Arch user repository</a> (AUR). This is a community resource, so you have to be a bit more careful in checking that the packages you install from here are good ones, but that’s no different to investigating an R package before installing from CRAN or GitHub. It’s also really important to read through <a href="https://wiki.archlinux.org/title/Arch_User_Repository">the AUR guidelines</a> <em>before</em> you start trying to use it, because it talks about the tools you’ll need to install first and has a nice walkthrough of the process. So I did that, installed everything from the <a href="https://archlinux.org/groups/x86_64/base-devel/">base-devel group</a> and got started…<sup>3</sup></p>
<p>There are a few different user submitted packages for RStudio on the AUR. The one I decided to use was <a href="https://aur.archlinux.org/packages/rstudio-desktop-bin">rstudio-desktop-bin</a>, largely because it’s a binary<sup>4</sup> and because other Arch users seem to like it. It’s a multi-step process. First I had to get a copy of the package files. The easiest way is with git:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;">git</span> clone https://aur.archlinux.org/rstudio-desktop-bin.git</span></code></pre></div>
<p>The <code>rstudio-desktop-bin</code> folder that I just downloaded contains a <code>PKGBUILD</code> file… opening it in a text editor reveals that it’s basically a recipe for building a package. It doesn’t actually contain any of the components you need, and in fact for RStudio what you’ll notice when you take a peek at the inside is that it’s essentially a wrapper telling Arch how to use the <code>.deb</code> binary that Posit releases for Ubuntu/Debian systems.</p>
<p>To build the package I navigate to this folder and call <code>makepkg</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="bu" style="color: null;">cd</span> rstudio-desktop-bin</span>
<span id="cb3-2"><span class="ex" style="color: null;">makepkg</span> <span class="at" style="color: #657422;">-s</span></span></code></pre></div>
<p>The <code>-s</code> flag attempts to synchronise: it will download and install any dependencies, as long as those are official dependencies (I think?). It doesn’t install dependencies when those are also packages on the AUR. Those you just have to do manually.</p>
<p>Anyway once <code>makepkg</code> does its job, you end up with a whole lot of new files in that folder. The one that we care most about is the one with the <code>.pkg.tar.zst</code> file extension. That’s the one that <code>pacman</code> can install:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;">sudo</span> pacman <span class="at" style="color: #657422;">-U</span> rstudio-desktop-bin-2022.12.0.353-1-x86_64.pkg.tar.zst</span></code></pre></div>
<p>This will install RStudio and… it almost works. When I attempt to open RStudio I get a message in the Rstudio window complaining about a missing library. Digging into the comments on the <a href="https://aur.archlinux.org/packages/rstudio-desktop-bin">rstudio-desktop-bin</a> revealed the problem. One of the system dependencies for RStudio is missing from the PKGBUILD file: you have to install <code>openssl-1.1</code> to make it work. This did the trick for me:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;">sudo</span> pacman <span class="at" style="color: #657422;">-s</span> openssl-1.1</span></code></pre></div>
<p>And that’s it. Just like that I have RStudio running on Arch…</p>
<p>… and just like that I felt an immediate need to also get quarto running on Arch so that I could write this blog post on my new Arch box. Quarto is also available on the AUR, and I installed it using the <a href="https://aur.archlinux.org/packages/quarto-cli">quarto-cli</a> package, following essentially the same process described above. There were no missing dependencies, and everything seems to work fine.</p>
<p>I’m suspicious. Things aren’t supposed to work first time. I fully expect my laptop to catch fire simply because I am doing something foolish.</p>
</section>
<section id="was-it-worth-it" class="level2">
<h2 class="anchored" data-anchor-id="was-it-worth-it">Was it worth it?</h2>
<p>Probably not. But I don’t care. I had fun. Sometimes we do things because it’s useful to do them. Sometimes we do things because we like doing them. It’s important to know the difference. This was fun.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>No.↩︎</p></li>
<li id="fn2"><p>Don’t ask why, it’s a long and unbearably stupid story.↩︎</p></li>
<li id="fn3"><p>After I posted this on mastodon, <a href="https://fosstodon.org/@urswilke/109605698346985430">Urs Wilke</a> kindly told me about <a href="https://aur.archlinux.org/packages/yay">yay</a>, which simplifies the process of installing packages from AUR. I intend to look into this! It looks really nice↩︎</p></li>
<li id="fn4"><p>I have indeed managed to build the RStudio IDE from source on Arch. Once. I shan’t be doing that again. All my horrible memories of building all the Apache Arrow R and C++ libraries from source for the very first time came flooding back.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Btw {I} Use {Arch} Now},
  date = {2022-12-31},
  url = {https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Btw I Use Arch Now.”</span> December 31,
2022. <a href="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch">https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/index.html</guid>
  <pubDate>Fri, 30 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-12-31_btw-i-use-arch/arch.png" medium="image" type="image/png" height="137" width="144"/>
</item>
<item>
  <title>A very strange year</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-12-26_strange-year/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Content note: This post refers briefly to sexual assault</p>
</div>
</div>
<p>We all saw this back in 2020, right? It seemed pretty funny to me at the time – 2020 was such a messed up year that it seemed hard to believe that 2022 could <em>really</em> be even stranger. Oh how very wrong I was.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/godzilla.jpg" class="img-fluid figure-img"></p>
</figure>
</div>
<p>My personal life has taken the biggest upheavals. After leaving academia in late 2021, I started my first ever tech job in January 2022… and was let go from my first ever tech job in December 2022. Not gonna lie, that one stings a bit, but mostly because it’s recent and I still haven’t really emotionally processed it all. I’m objective enough to recognise that the situation I’m in now really isn’t so bad. I lost a job that I was enjoying. I feel sad and hurt about losing it because I’m a normal human being who feels sad about things that are sad. It’ll pass. I’ll heal.</p>
<p>Besides, let’s be honest. In a year when I find myself in the situation where I can say things like “okay sure I’ve been sexually assaulted four times in the last 12 months, but technically speaking, only two of the men raped me” in a conversation and have it be entirely true, losing a job just doesn’t carry the level of trauma that it probably should.</p>
<p>On reflection, that is a very horrible sentence to have written.</p>
<p>But it is true. Sexual assault has been a recurring theme in 2022 for me, and while I don’t have much desire to talk about what it feels like to have been repeatedly violated in my personal life, I also don’t feel like I should be ashamed that it happened. I’m not going to make a secret of something that was not my fault. It happened, and I cannot change the fact that it happened. I’ve picked up the pieces as best I can and gone about my life again. What else can I do?</p>
<p>But let’s turn to happier topics, shall we? I’ve said the thing I wanted to say about the dark topics and there’s no need to dwell.</p>
<section id="contributing-to-the-ggplot2-book" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="contributing-to-the-ggplot2-book">Contributing to the ggplot2 book</h2>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/ggplot2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div></div><p>I keep a little log of things that I’ve been doing with my time, and it’s interesting to look back at what I was doing in January 2022. It feels like a lifetime ago: on January 9th I merged <a href="https://github.com/hadley/ggplot2-book/pull/260">a big pull request into the work-in-progress 3rd edition of the ggplot2 book</a> that reorganised the scales chapters. I haven’t had time to do anything else on that since January, but I really like how the writing worked out for that (plus it’s always fun to work with Hadley!) The book now has four separate chapters on scales. Three of the chapters focus on the practicalities of working with scales:</p>
<ul>
<li>Position scales: <a href="https://ggplot2-book.org/scale-position.html">ggplot2-book.org/scale-position.html</a></li>
<li>Colour scales: <a href="https://ggplot2-book.org/scale-colour.html">ggplot2-book.org/scale-colour.html</a></li>
<li>Scales for other aesthetics: <a href="https://ggplot2-book.org/scale-other.html">ggplot2-book.org/scale-other.html</a></li>
</ul>
<p>There’s a fourth one too, which talks more about the underlying theory:</p>
<ul>
<li>Scales and guides <a href="https://ggplot2-book.org/scales-guides.html">ggplot2-book.org/scales-guides.html</a></li>
</ul>
<p>Having done earlier work helping out with revising the <a href="https://ggplot2-book.org/maps.html">Maps</a> and <a href="https://ggplot2-book.org/annotations.html">Annotations</a> chapters, it felt really nice to be able to work on that. It’s possible I’ll have more time to revisit in 2023, but at this point all my plans are up in the air so who knows.</p>
</section>
<section id="writing-about-apache-arrow" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="writing-about-apache-arrow">Writing about Apache Arrow</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/arrow.png" class="img-fluid"></p>
</div></div><p>For most of the year I was gainfully employed to work on open source projects – Apache Arrow in particular – and I’ve written a lot over the last year about it. On this blog alone here’s what I wrote this year:</p>
<ul>
<li><a href="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/">Getting started with Apache Arrow in R</a>. A now slightly dated primer on how to get started. Okay this one was technically November 2021, but it’s the logical beginning of the sequence of posts and I’m including anyway</li>
<li><a href="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/">Binding Apache Arrow to R</a>. A post about how the dplyr bindings in the arrow R package work and how you can write them yourself</li>
<li><a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/">Data types in Arrow and R</a>. A very long post that walks you through the low level data types used by Arrow and R, and some of the subtle details around translating from one to the other</li>
<li><a href="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/">Arrays and tables in Arrow</a>. This post builds on the previous one and talks about some of the higher level data structures used in Apache Arrow (Arrays, Tables, Record Batches, etc), and the ways in which they are similar to and different from similar data structures in R (vectors, data frames, etc).</li>
<li><a href="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/">How to visualise a billion rows of data in R with Apache Arrow</a>. This one was a practical post, walking you through the process of plotting a very large data set</li>
<li><a href="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/">Passing data between R and Python with reticulate</a> Part one of a two-part series about how you can use Arrow to pass data between R and Python without incurring serialisation costs. In part one I talked about it from an R-centric perspective, using the reticulate R package as the primary tool</li>
<li><a href="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/">Passing data between Python and R with rpy2</a> Part two of the same series. This one takes a Pythonic perspective and uses the rpy2 Python library as the primary tool</li>
<li><a href="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/">Building an Arrow Flight server</a>. One of the underrated features of the Arrow toolkit is that is the Flight RPC protocol: you can use it to efficiently communicate Arrow data over a network. This post is a walkthrough of how to do that in R and Python (mostly Python, really)</li>
<li><a href="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/">The Arrow Dataset API</a>. The last Arrow post I wrote this year talked about the Arrow Dataset API in more detail than I had done previously.</li>
</ul>
<p>A lot of these posts are… well, they’re long and they’re detailed. The intention was always to try to create a collection of useful resources with code walkthoughs that I could later fold back into documentation, books, workshops and so on. The nice thing is that this actually did happen. For example…</p>
<ul>
<li>I wrote an entire workshop on <a href="https://arrow-user2022.netlify.app/">Larger than memory data workflows with Apache Arrow</a> for the R community. The slides, walkthrough, tutorial, etc are all up on the website</li>
<li>I contributed a chapter on Arrow to the 2nd edition of <a href="https://r4ds.hadley.nz/arrow.html">R for Data Science</a>. Given the centrality of R4DS in the R community I kind of feel like that’s probably one of the more useful things I actually managed to get done!</li>
</ul>
<p>But probably the biggest thing is that a lot of the content from my other writing worked its way into a <a href="https://github.com/apache/arrow/commit/4afe71030cdd9d3103c7b028082ba63bafdf5d27">big pull request</a> I wrote updating the documentation for the arrow R package. It hasn’t <em>quite</em> gone properly live yet, and I don’t think it will migrate to the front page until the 11.0.0 release in January, but it’s currently available on the dev version of the documentation.</p>
<ul>
<li>I completely rewrote the <a href="https://arrow.apache.org/docs/dev/r/articles/arrow.html">Get started</a> page so that it is now more novice friendly and helps orient new users</li>
<li>I added a new article highlighting the <a href="https://arrow.apache.org/docs/dev/r/articles/read_write.html">read/write capabilities</a> of Arrow</li>
<li>I added a new article talking about the <a href="https://arrow.apache.org/docs/dev/r/articles/data_wrangling.html">data wrangling using the dplyr interface</a> that was partly new material, and partly reworked existing content</li>
<li>I tidied up the article on <a href="https://arrow.apache.org/docs/dev/r/articles/dataset.html">multi-file Dataset objects</a></li>
<li>I added a new article on <a href="https://arrow.apache.org/docs/dev/r/articles/data_objects.html">data objects in Arrow</a> that reworked a lot of content I’d originally written for my blog</li>
<li>I added a new article on <a href="https://arrow.apache.org/docs/dev/r/articles/data_types.html">data types in Arrow</a> that, again, reworked a lot of content I’d written for my blog</li>
<li>I laid the groundwork for a tidier discussion of <a href="https://arrow.apache.org/docs/dev/r/articles/metadata.html">metadata in Arrow</a> that I’d intended to expand on later</li>
</ul>
<p>Oh, and I also wrote the <a href="https://arrow.apache.org/visual_identity/">Arrow Visual Identity</a> page and all the code for generating the various logos!</p>
<p>There was a lot more I wanted to do with Arrow, to be honest. For example, the R package doesn’t handle Arrow Flight correctly at the moment (it works in special cases but it badly needs updating), and – before I found myself unemployed – I had talked about writing bindings so that the R package implemented the Arrow Flight protocol correctly. Maybe one day I’ll write them. I don’t think it’s actually very hard because the hard work is already done in the C++ library, but… oddly, I think I’ll take a bit of a break from Arrow work while I let my emotions about my employment situation settle.</p>
</section>
<section id="art" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="art">Art</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/hexagonal.png" class="img-fluid"></p>
</div></div><p>I made a lot of generative art in 2022, though maybe not quite as much as in 2021. I added nine new galleries on my art website <a href="https://art.djnavarro.net/">art.djnavarro.net</a>, but really the big thing for me in art this year was being invited to give a generative art workshop at rstudio::conf. So, thanks to the support of folks at Posit, there is now a fully fledged freely available tutorial – okay it’s closer to being an entire book, really – on how to make generative art with R. It’s online at <a href="https://art-from-code.netlify.app/">art-from-code.netlify.app</a>. It makes me really happy that I was lucky enough to be able to write that one. I was also interviewed for the DSxD book on <a href="https://datasciencebydesign.org/book">The Future of Data Science</a> for my artistic work! Oh, and one of my art pieces was used – with my permission freely given to the authors because they are lovely – as a the cover of a book on transgender sexual health, which I think is really cool.</p>
</section>
<section id="academia" class="level2">
<h2 class="anchored" data-anchor-id="academia">Academia</h2>
<p>Somehow, despite the fact that I am no longer in academia, I managed to publish some academic papers… in my spare time, like normal people do. To be fair though I didn’t actually do much of the work this year: these were all project that I’d committed to while I was still in academia. They were mostly papers that had been accepted or in the final stages of revision at the start of 2021 and have been slowly emerging from the pipeline one by one. It’s hard to know what to say about my academic output given that I’m no longer invested in the peculiar norms of the academia. It’s not my world anymore. I care a lot about some of the values, and so I’m still maintaining a personal archive as well as contributing my papers to institutional and other public archives, but… look, if ever you feel a need to ask “wait, what was Danielle’s academic research all about?” I moved all that to <a href="https://papers.djnavarro.net/">papers.djnavarro.net</a> at the end of 2022.</p>
</section>
<section id="what-else" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-else">What else?</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2022-12-26_strange-year/crayola.png" class="img-fluid"></p>
</div></div><p>I did a lot of other things in 2022. There’s really no need to try to go through all of them. But here are some other personal favourites that made an appearance on this blog:</p>
<ul>
<li>I wrote an R package on multi-threaded task queues: <a href="https://blog.djnavarro.net/posts/2022-12-22_queue/">blog.djnavarro.net/queue</a></li>
<li>I wrote about Crayola crayon colours and some fun data wrangling problems: <a href="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/">blog.djnavarro.net/crayola-crayon-colours</a></li>
<li>I wrote an absurdly popular blog post about mastodon: <a href="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/">blog.djnavarro.net/what-i-know-about-mastodon/</a></li>
<li>I wrote a post that I <em>thought</em> was absurdly-popular (until the mastodon thing happened) about porting this blog from distill to quarto: <a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/">blog.djnavarro.net/porting-to-quarto</a></li>
</ul>
</section>
<section id="so-what-happens-next" class="level2">
<h2 class="anchored" data-anchor-id="so-what-happens-next">So what happens next?</h2>
<p>Arriving at the end of this post, I find myself very unsure about what comes next. It’s been such a strange year. I’m proud of the work that I’ve done and the projects I’ve completed. It feels good to be able to look at the list above and think yeah that’s actually a pretty decent body of work, and I could have added more if I’d wanted to. I think I’ve used my time well? I’ve accomplished a lot and learned a lot. But at the same time these things sit against a stunningly horrible backdrop, and it hasn’t been easy coping with that. In general I try not to talk about those kinds of topics on this blog – this is a data science blog, after all, and it’s not really a place for talking about sexual assault and what can do to your sense of self worth – but I suppose I would like it if 2023 goes a little differently. Not sure I can manage another year like this one.</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {A Very Strange Year},
  date = {2022-12-26},
  url = {https://blog.djnavarro.net/posts/2022-12-26_strange-year},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“A Very Strange Year.”</span> December 26,
2022. <a href="https://blog.djnavarro.net/posts/2022-12-26_strange-year">https://blog.djnavarro.net/posts/2022-12-26_strange-year</a>.
</div></div></section></div> ]]></description>
  <guid>https://blog.djnavarro.net/posts/2022-12-26_strange-year/index.html</guid>
  <pubDate>Sun, 25 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-12-26_strange-year/hexagonal_smol.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Queue</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-12-22_queue/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Okay. So I wrote a simple package for <a href="https://queue.djnavarro.net">multi-threaded tasks queues in R</a> this week. It wasn’t intentional, I swear. I was just trying to teach myself how to use the <a href="https://callr.r-lib.org/">callr</a> package,<sup>1</sup> and making sure I had a solid grasp of encapsulated object-oriented programming with <a href="https://r6.r-lib.org/">R6</a>. Things got a little out of hand. Sorry.</p>
<p>And let’s be very clear about something at the outset. If you want to do parallel computing in R correctly, you go look at <a href="https://www.futureverse.org/">futureverse.org</a>. The <a href="https://future.futureverse.org/">future</a> package by Henrik Bengtsson provides a fabulous way to execute R code asynchronously and in parallel. And there are many excellent packages built on top of that, so there’s a whole lovely ecosystem there just waiting for you.<sup>2</sup> Relatedly, if the reason you’re thinking about parallel computing is that you’ve found yourself with a burning need to analyse terabytes of data with R then babe it might be time to start learning some R workflows using <a href="https://therinspark.com/">Spark</a>, <a href="https://blog.djnavarro.net/category/apachearrow">Arrow</a>, <a href="https://www.r-bloggers.com/2022/04/wtf-is-kubernetes-and-should-i-care-as-r-user/">Kubernetes</a>. It may be time to learn about some of those other eldritch words of power that have figured rather more prominently in my life than one might expect for a simple country girl.<sup>3</sup></p>
<p>My little queue package is a personal project. I happen to like it, but you should not be looking at it as an alternative to serious tools.</p>
<p>That’s been said now. Good. We can put aside all pretension.</p>
<section id="what-does-it-do" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-does-it-do">What does it do?</h2>
<p>Let’s say I have a generative art function called <code>donut()</code>, based loosely on a <a href="https://art-from-code.netlify.app/day-1/session-1/#composition">teaching example from my art from code workshop</a>. The <code>donut()</code> function takes an input <code>seed</code>, creates a piece of generative art using ggplot2, and writes the output to an image file. This process takes several seconds to complete on my laptop:</p>
<div class="cell" data-hash="index_cache/html/my-first-donut_78cc3a9337022adc6a85a72fd51f194e">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tictoc)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">donut</span>(<span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>5.277 sec elapsed</code></pre>
</div>
</div>
<p>Here’s the piece, by the way:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_100.png" class="img-fluid"></p>
<p>That’s nice and I do like this piece, but generative art is an iterative process and I like to make many pieces at once to help me get a feel for the statistical properties of the system. Waiting five or six seconds for one piece to render is one thing: waiting 8-10 minutes for 100 pieces to render is quite another. So it’s helpful if I can do this in parallel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(queue)</span></code></pre></div>
</div>
<p>Here’s how I might do that using queue. I designed the package using R6 classes – more on that later – so we’ll be working in the “encapsulated” object oriented programming style that is more common in other programming languages. The first step is to initialise a <a href="https://queue.djnavarro.net/reference/Queue.html"><code>Queue</code></a> object, specifying the number of workers we want to use. I’ll use six:</p>
<div class="cell" data-hash="index_cache/html/my-first-queue_dfc1ff39dc3ddb607ec985d5339378c1">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">queue <span class="ot" style="color: #003B4F;">&lt;-</span> Queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">new</span>(<span class="at" style="color: #657422;">workers =</span> <span class="dv" style="color: #AD0000;">6</span>)</span></code></pre></div>
</div>
<p>When I do this, the queue package starts six R sessions for us, and all my computations will be done in those R sessions. Under the hood, all the hard work of managing the R sessions is being done by the wonderful callr package by Gábor Csárdi<sup>4</sup> – the only thing that queue does is provide a layer of abstraction and automation to the whole process.</p>
<p>Next, I’ll add some tasks to the queue. <code>Queue</code> objects have an <code>add()</code> method that take a function and a list of arguments, so I can do this to push a task to the queue:</p>
<div class="cell" data-hash="index_cache/html/my-first-task_e9d06a818d4aab8856c997131ca80f42">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(donut, <span class="at" style="color: #657422;">args =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">100</span>))</span></code></pre></div>
</div>
<p>When the queue executes, it will be in a “first in, first out” order,<sup>5</sup> so this task will be the first one to be assigned to a worker. Though of course that’s no guarantee that it will be the first one to finish!</p>
<p>Anyway, let’s load up several more tasks. There’s some weird aversion out there to using loops in R, but this isn’t one of those situations where we need to worry about unnecessary copying, so I’m going to use a loop:</p>
<div class="cell" data-hash="index_cache/html/load-several-tasks_5cc68af5a47beff90603fa0c398907e3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="cf" style="color: #003B4F;">for</span>(s <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">101</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">108</span>) queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(donut, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">seed =</span> s))</span></code></pre></div>
</div>
<p>So now we have nine tasks loaded onto a queue with six workers. To start it running I call the <code>run()</code> method for the queue. By default, all you’d see while the queue is running is a spinner with a progress message telling you how many tasks have completed so far, how many are currently running, and how many are still waiting. But I’ll ask it to be a bit more chatty. I’ll call it setting <code>message = "verbose"</code> so that we can see a log showing the order in which the tasks completed and time each task took to complete, in addition to the total time elapsed on my system while the queue was running:</p>
<div class="cell" data-hash="index_cache/html/run-my-queue_f0e1b58ef56570b65d67c0ec4ae0c11c">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">out <span class="ot" style="color: #003B4F;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">run</span>(<span class="at" style="color: #657422;">message =</span> <span class="st" style="color: #20794D;">"verbose"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_5 finished in 3.18 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_2 finished in 5.78 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_6 finished in 5.78 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_4 finished in 7.34 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_3 finished in 8.09 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_1 finished in 9.46 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_7 finished in 7.76 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_9 finished in 6.09 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: task_8 finished in 6.92 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ Queue complete: 9 tasks done in 12.7 secs</code></pre>
</div>
</div>
<p>Here are the nine pieces that popped off the queue in 13 seconds:</p>
<div class="column-screen-inset">
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_100.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_101.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_102.png" class="img-fluid"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_103.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_104.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_105.png" class="img-fluid"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_106.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_107.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_108.png" class="img-fluid"></p>
</div>
</div>
</div>
</div>
<p>So it’s a three-step process: (1) create the queue, (2) load up the tasks, (3) execute the tasks. In practice I would probably simplify the code to this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">queue <span class="ot" style="color: #003B4F;">&lt;-</span> Queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">new</span>(<span class="at" style="color: #657422;">workers =</span> <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;">for</span>(s <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">100</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">108</span>) queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(donut, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">seed =</span> s))</span>
<span id="cb18-3">out <span class="ot" style="color: #003B4F;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">run</span>()</span></code></pre></div>
</div>
<p>True, I could simplify it further. For example, if I know that I’m always calling the same function and always passing the same the same arguments – just with different values – this could be wrapped up in <a href="https://purrr.tidyverse.org/">purrr</a> style syntax, but honestly I’m not sure why I would bother doing that when <a href="https://furrr.futureverse.org/">furrr</a> already exists? I’m not planning to reinvent the wheel, especially not when Davis Vaughn already offers a fully-operational mass-transit system free of charge.</p>
</section>
<section id="what-does-it-store" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-does-it-store">What does it store?</h2>
<p>The output object <code>out</code> stores quite a lot of information about the tasks, the results, and the events that occurred during task execution, but most of it isn’t immediately interesting to us (especially when things actually work!) So let’s keep things simple for the moment and just look at the first five columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">out[, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  task_id worker_id state        result       runtime
1  task_1    577202  done donut_100.png 9.457713 secs
2  task_2    577226  done donut_101.png 5.782191 secs
3  task_3    577239  done donut_102.png 8.087054 secs
4  task_4    577251  done donut_103.png 7.336802 secs
5  task_5    577263  done donut_104.png 3.183247 secs
6  task_6    577275  done donut_105.png 5.780861 secs
7  task_7    577263  done donut_106.png 7.763061 secs
8  task_8    577226  done donut_107.png 6.921016 secs
9  task_9    577275  done donut_108.png 6.093996 secs</code></pre>
</div>
</div>
<p>The columns are pretty self-explanatory I think?</p>
<ul>
<li><code>task_id</code> is a unique identifier for the task itself</li>
<li><code>worker_id</code> is a unique identifier for the worker that completed the task (it’s also the process id for the R session)</li>
<li><code>state</code> summarises the current state of the task (they’re all <code>"done"</code> because the queue is finished)</li>
<li><code>result</code> is a list column containing the output from each task</li>
<li><code>runtime</code> is a difftime column telling you how long each task took to finish</li>
</ul>
<p>As for the the full output… well… here it is…</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">out</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  task_id worker_id state        result       runtime                                                                          fun args
1  task_1    577202  done donut_100.png 9.457713 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  100
2  task_2    577226  done donut_101.png 5.782191 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  101
3  task_3    577239  done donut_102.png 8.087054 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  102
4  task_4    577251  done donut_103.png 7.336802 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  103
5  task_5    577263  done donut_104.png 3.183247 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  104
6  task_6    577275  done donut_105.png 5.780861 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  105
7  task_7    577263  done donut_106.png 7.763061 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  106
8  task_8    577226  done donut_107.png 6.921016 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  107
9  task_9    577275  done donut_108.png 6.093996 secs function (seed) , {,     source("donut.R", local = TRUE),     donut(seed), }  108
              created              queued            assigned             started            finished code
1 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:03  200
2 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:00  200
3 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:02  200
4 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:01  200
5 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:57  200
6 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:00  200
7 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:27:57 2022-12-23 12:27:57 2022-12-23 12:28:05  200
8 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:00 2022-12-23 12:28:00 2022-12-23 12:28:06  200
9 2022-12-23 12:27:54 2022-12-23 12:27:54 2022-12-23 12:28:00 2022-12-23 12:28:00 2022-12-23 12:28:06  200
                             message stdout stderr error
1 done callr-rs-result-8ce3e320ef539                NULL
2 done callr-rs-result-8ce3e6e032153                NULL
3 done callr-rs-result-8ce3e5d32c7ba                NULL
4  done callr-rs-result-8ce3e72346af                NULL
5 done callr-rs-result-8ce3e4193129d                NULL
6 done callr-rs-result-8ce3e42c3653c                NULL
7 done callr-rs-result-8ce3e6ecedbfa                NULL
8 done callr-rs-result-8ce3e41e0f9e6                NULL
9 done callr-rs-result-8ce3e5a3c4630                NULL</code></pre>
</div>
</div>
<p>Okay so there’s a bit more to unpack here. Let’s take a look…</p>
<ul>
<li>The <code>fun</code> and <code>args</code> columns contain the functions and arguments that were originally used to specify the task</li>
<li>The <code>created</code>, <code>queued</code>, <code>assigned</code>, <code>started</code>, and <code>finished</code> columns contain POSIXct timestamps indicating when the task was created, added to a queue, assigned to a worker, started running on a worker, and returned from the worker</li>
<li><code>code</code> is a numeric code returned by the callr R session: of particular note 200 means it returned successfully, 500 means the session exited cleanly, and 501 means the session crashed</li>
<li><code>message</code> is a message returned by callr</li>
<li><code>stdout</code> and <code>stderr</code> are the contents of the output and error streams from the worker session while the task was running</li>
<li><code>error</code> currently is <code>NULL</code> because I haven’t implemented that bit yet lol.</li>
</ul>
</section>
<section id="surviving-a-crash" class="level2">
<h2 class="anchored" data-anchor-id="surviving-a-crash">Surviving a crash</h2>
<p>I’m going to be honest. Sometimes<sup>6</sup> I write bad code when I am exploring a new generative art system. Code that crashes the R session unpredictably. So it would be nice if the queue had a little bit of robustness for that. To be honest, the queue package isn’t very sophisticated in detecting sessions that have crashed,<sup>7</sup> but it does have some ability to recover when a task crashes its thread. Let’s keep this simple. I’ll define a perfectly safe function that waits for a moment and then returns, and another function that always crashes the R session as soon as it is called:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">wait <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">Sys.sleep</span>(x)</span>
<span id="cb23-3">  x</span>
<span id="cb23-4">}</span>
<span id="cb23-5">crash <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">.Call</span>(<span class="st" style="color: #20794D;">"abort"</span>)</span></code></pre></div>
</div>
<p>Now let’s define a queue that has only two workers, but has no less than three tasks that are guaranteed to crash the worker the moment the tasks are started:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">queue <span class="ot" style="color: #003B4F;">&lt;-</span> Queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">new</span>(<span class="at" style="color: #657422;">workers =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-2">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> .<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb24-3">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(crash)</span>
<span id="cb24-4">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(crash)</span>
<span id="cb24-5">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(crash)</span>
<span id="cb24-6">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> .<span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<p>The queue allocates task in a first-in first-out order, so the three “crash tasks” are guaranteed to be allocated before the final “wait task”. Let’s take a look at what happens when the queue runs:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">run</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ Queue complete: 5 tasks done in 3.34 secs</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 17
  task_id worker_id state result    runtime        fun    args            
  &lt;chr&gt;       &lt;int&gt; &lt;chr&gt; &lt;list&gt;    &lt;drtn&gt;         &lt;list&gt; &lt;list&gt;          
1 task_1     624437 done  &lt;dbl [1]&gt; 0.1263957 secs &lt;fn&gt;   &lt;named list [1]&gt;
2 task_2     624445 done  &lt;NULL&gt;    1.1492345 secs &lt;fn&gt;   &lt;list [0]&gt;      
3 task_3     624437 done  &lt;NULL&gt;    2.0157561 secs &lt;fn&gt;   &lt;list [0]&gt;      
4 task_4     624467 done  &lt;NULL&gt;    1.9129426 secs &lt;fn&gt;   &lt;list [0]&gt;      
5 task_5     624484 done  &lt;dbl [1]&gt; 0.1606448 secs &lt;fn&gt;   &lt;named list [1]&gt;
# … with 10 more variables: created &lt;dttm&gt;, queued &lt;dttm&gt;, assigned &lt;dttm&gt;,
#   started &lt;dttm&gt;, finished &lt;dttm&gt;, code &lt;dbl&gt;, message &lt;chr&gt;,
#   stdout &lt;list&gt;, stderr &lt;list&gt;, error &lt;list&gt;</code></pre>
</div>
</div>
<p>It’s a little slower than we’d hope, but it does finish both valid tasks and returns nothing for the tasks that crashed their R sessions. What has happened in the background is that the queue runs a simple check to see if any of the R sessions have crashed, and attempts to replace them with a new worker whenever it detects that this has happened. It’s not in any sense optimised, but it does sort of work.</p>
</section>
<section id="design" class="level2">
<h2 class="anchored" data-anchor-id="design">Design</h2>
<p>Although my confidence in my ability to have a career in tech is at an all-time low, I have to admit that the work I’ve done over the last year has made me a better programmer. I didn’t much effort into writing queue, but the code feels cleaner and more modular than the code I was writing a year ago. Good practices have become habits, I suppose. That’s a nice feeling. I automatically write proper unit tests as I go, knowing that those tests will save me when I need to make changes later. I document properly as I go, knowing that I won’t remember a bloody thing about how my own code works six hours later – never mind six months. And, maybe most importantly of all, my code now seems to have this habit of organising itself into small, manageable abstractions. I have no idea when that happened, because I wasn’t actually part of a software engineering team. I was just the girl who wrote some docs and few little blog posts.<sup>8</sup></p>
<p>Here’s what I mean. If you take a look at the <a href="https://github.com/djnavarro/queue/blob/4c70aad373fd518250c6bd6c29cebccb6d16dc65/R/queue.R">source code for the <code>Queue</code></a> object, it’s actually not very long: the file is mostly devoted to the documentation, and the object doesn’t have very many methods. Honestly, we’ve already seen most of them:</p>
<ul>
<li><code>new()</code> creates a new queue</li>
<li><code>add()</code> adds a task to a queue</li>
<li><code>run()</code> sets the queue running</li>
</ul>
<p>If everything works smoothly you don’t need anything else, so why burden the user with extra details? Sure, there’s a little complexity to these methods which is of course documented on the <a href="https://queue.djnavarro.net/reference/Queue.html">relevant pkgdown page</a> because I’m not a jerk, but this isn’t a complicated package…</p>
<p>…when it’s working.</p>
<p>Of course, when things start to break, you start to care a lot more about the internals. Fair enough. There are two important data structures within the <code>Queue</code>:</p>
<ul>
<li>Internally, a <code>Queue</code> manages a <a href="https://queue.djnavarro.net/reference/WorkerPool.html"><code>WorkerPool</code></a> comprised of one or more <a href="https://queue.djnavarro.net/reference/Worker.html"><code>Worker</code></a> objects. As you’d expect given the names, these provide abstractions for managing the R sessions. A <code>Worker</code> object provides a wrapper around a callr R session, and tools that automate the interaction between that session and a task.</li>
<li>The <code>Queue</code> also holds a <a href="https://queue.djnavarro.net/reference/TaskList.html"><code>TaskList</code></a> comprised of one or more <a href="https://queue.djnavarro.net/reference/Task.html"><code>Task</code></a> objects. Again, as you might expect from the names, these are the storage classes. A <code>Task</code> object is a container that holds a function, its arguments, any results it might have returned, and any logged information about the process of its execution.</li>
</ul>
<p>In some situations it can be awfully handy to have access to these constituent data structures, particularly because those objects expose additional tools that I deliberately chose not to make available at the <code>Queue</code> level. From the <code>Queue</code> itself what you can do is return the objects:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">workers <span class="ot" style="color: #003B4F;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">get_workers</span>()</span>
<span id="cb28-2">tasks <span class="ot" style="color: #003B4F;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">get_tasks</span>()</span></code></pre></div>
</div>
<p>These objects are R6 classes: they have reference semantics so anything I do with <code>workers</code> and <code>tasks</code> will have corresponding effects on <code>queue</code>. For this blog post I don’t intend to dive into details of what I did when designing the <code>WorkerPool</code> and <code>TaskList</code> classes – especially because queue is only at version 0.0.2 and I don’t yet know what I’m going to do with this cute little package – but I’ll give one example.</p>
<p>Let’s take the workers. By default, a <code>Queue</code> cleans up after itself and closes any R sessions that it started. The <code>WorkerPool</code> object associated with a <code>Queue</code> has a <code>get_pool_state()</code> method that I can use to check the state of the workers, and some other methods to modify the workers if I so choose. Let’s have a go. I ask <code>workers</code> to report on the status of the R sessions, this is what I get:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">workers<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">get_pool_state</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    624484     624496 
"finished" "finished" </code></pre>
</div>
</div>
<p>Yes, as expected the workers have stopped. But I can replace them with live R sessions by calling the <code>refill_pool()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">workers<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">refill_pool</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>624512 624524 
"idle" "idle" </code></pre>
</div>
</div>
<p>And I can shut them down again by calling <code>shutdown_pool()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">workers<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">shutdown_pool</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    624512     624524 
"finished" "finished" </code></pre>
</div>
</div>
<p>Along similar lines the <code>TaskList</code> object has some methods that let me manipulate the data storage associated with my <code>Queue</code>. Normally I don’t need to. Sometimes I do. It’s handy to have those tools lying around. At the moment the toolkit feels a little light, but the nice thing about writing your own package is that I can always add more if I need them :-)</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<div class="cell" data-hash="index_cache/html/austen-joke_faf2b96ff686ee96563e01788b849faf">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">queue <span class="ot" style="color: #003B4F;">&lt;-</span> Queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">new</span>(<span class="at" style="color: #657422;">workers =</span> <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb35-2">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">1.3</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"multithreading"</span>))</span>
<span id="cb35-3">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">0.1</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"it is"</span>))</span>
<span id="cb35-4">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">0.7</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"acknowledged"</span>))</span>
<span id="cb35-5">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">1.0</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"post"</span>))</span>
<span id="cb35-6">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">0.5</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"universally"</span>))</span>
<span id="cb35-7">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">0.1</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"a truth"</span>))</span>
<span id="cb35-8">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">1.2</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"must be"</span>))</span>
<span id="cb35-9">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">0.9</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"about"</span>))</span>
<span id="cb35-10">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">1.6</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"trick"</span>))</span>
<span id="cb35-11">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">0.1</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"that a"</span>))</span>
<span id="cb35-12">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">0.5</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"in want of"</span>))</span>
<span id="cb35-13">queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">add</span>(wait, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> <span class="fl" style="color: #AD0000;">1.0</span>), <span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">toupper</span>(<span class="st" style="color: #20794D;">"an async"</span>))</span>
<span id="cb35-14">out <span class="ot" style="color: #003B4F;">&lt;-</span> queue<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">run</span>(<span class="at" style="color: #657422;">message =</span> <span class="st" style="color: #20794D;">"verbose"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: IT IS finished in 0.172 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: A TRUTH finished in 0.169 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: UNIVERSALLY finished in 0.536 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: ACKNOWLEDGED finished in 0.776 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: THAT A finished in 0.173 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: POST finished in 1.07 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: ABOUT finished in 0.957 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: MULTITHREADING finished in 1.37 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: MUST BE finished in 1.25 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: IN WANT OF finished in 0.582 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: AN ASYNC finished in 1.06 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>→ Done: TRICK finished in 1.66 secs</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>✔ Queue complete: 12 tasks done in 2.21 secs</code></pre>
</div>
</div>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Honestly, the whole reason this exists is that I was reading the callr blog post on writing <a href="https://www.tidyverse.org/blog/2019/09/callr-task-q/">multi-worker task queues</a> and decided to try doing it myself…↩︎</p></li>
<li id="fn2"><p>Note to self: Learn <a href="https://www.jottr.org/2022/12/05/avoid-detectcores/">parallelly</a>↩︎</p></li>
<li id="fn3"><p><code>kubectl auth can-i create chaos</code>↩︎</p></li>
<li id="fn4"><p>Longtime readers will have noticed that I have become a bit of a fangirl. I swear I’m not stalking him, but like, every time I think… gosh this is a really handy bit of infrastructure tooling, who do I have to thank for this… oh, of course it’s bloody Gábor again. Anyway.↩︎</p></li>
<li id="fn5"><p>I am a country girl, so FIFO means “fly-in fly-out”, and I shan’t be listening to any of you computer nerds who claim it has another meaning↩︎</p></li>
<li id="fn6"><p>Often↩︎</p></li>
<li id="fn7"><p>I mean, it was just a fun side project I did over the weekend because I have found myself quite unexpectedly unemployed, and my self-confidence is utterly shattered at the moment, and Stella needs to get her groove back slowly okay?↩︎</p></li>
<li id="fn8"><p>For the record, dear potential future employer, this is what is known as “self-deprecation”. Mistake not my awareness of the absurd cultural norms to which women are expected to conform with a literal claim about competence. In point of fact I am rather good at what I do.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Queue},
  date = {2022-12-22},
  url = {https://blog.djnavarro.net/posts/2022-12-22_queue},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Queue.”</span> December 22, 2022. <a href="https://blog.djnavarro.net/posts/2022-12-22_queue">https://blog.djnavarro.net/posts/2022-12-22_queue</a>.
</div></div></section></div> ]]></description>
  <category>Parallel Computing</category>
  <category>R</category>
  <category>Object-Oriented Programming</category>
  <guid>https://blog.djnavarro.net/posts/2022-12-22_queue/index.html</guid>
  <pubDate>Wed, 21 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-12-22_queue/donut_100.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Crayola crayon colours</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>What am I doing? Why am I here? Oh that’s right. So I was having coffee this morning reading the nerd news on mastodon as a girl likes to do and this <a href="https://mas.to/@kims/109525496705672156">this very cool post about crayon colours</a> by Kim Scheinberg caught my attention.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/crayola_toot.jpg" class="img-fluid figure-img" style="width:75.0%"></p>
</figure>
</div>
<p>The image comes from <a href="http://www.datapointed.net/2010/01/crayola-crayon-color-chart/">this blog post</a> by Stephen Von Worley – he has a <a href="http://www.datapointed.net/2010/10/crayola-color-chart-rainbow-style/">follow up</a> too. Interesting. I realise I am of course about to waste half a day on this…</p>
<section id="its-the-prologue-baby" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="its-the-prologue-baby">It’s the prologue, baby</h2>
<p>Having read the blog posts by Von Worley I worked out that the source of the data is the Wikipedia <a href="https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors">list of Crayola crayon colours</a>, and as it happens I know how to pull data from Wikipedia tables into R. Thanks to <a href="https://ivelasq.rbind.io/blog/politely-scraping/">this amazing post</a> by Isabella Velásquez, I’d learned all about using the <a href="https://dmi3kno.github.io/polite/">polite</a> package to make sure that my webscraping is appropriate and respectful, and using the <a href="https://rvest.tidyverse.org/">rvest</a> package to do the actual scraping. What I had assumed, is that reading the table into R was going to be a simple matter of writing some code like this…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors"</span></span>
<span id="cb1-2">raw <span class="ot" style="color: #003B4F;">&lt;-</span> url <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-3">  polite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">bow</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-4">  polite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scrape</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-5">  rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_nodes</span>(<span class="st" style="color: #20794D;">"table.wikitable"</span>)</span></code></pre></div>
</div>
<p>This scrapes all the tables from the page, but I only want the first one. That’s the big table with the listing of Crayolas standard colours. The table itself looks a little like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">raw[[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{html_node}
&lt;table class="wikitable sortable"&gt;
[1] &lt;caption&gt;\n&lt;/caption&gt;
[2] &lt;tbody&gt;\n&lt;tr&gt;\n&lt;th width="10%" class="sortable"&gt;Color\n&lt;/th&gt;\n&lt;th wid ...</code></pre>
</div>
</div>
<p>I don’t want to parse the html myself, but the hope is that I can use something like the <code>html_table()</code> function to extract the table and return a data frame. Okay, let’s give it a go…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">crayola <span class="ot" style="color: #003B4F;">&lt;-</span> raw[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="sc" style="color: #5E5E5E;">|&gt;</span> rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_table</span>()</span></code></pre></div>
</div>
<p>Well it hasn’t thrown an error, but when I look at the <code>crayola</code> data frame…</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 168 × 9
   Color Name                    `Hexadecimal in their website depiction[b]` Years in production…¹ Notes 16-Bo…² 24-Bo…³ 32-Bo…⁴ 64-Bo…⁵
   &lt;lgl&gt; &lt;chr&gt;                   &lt;chr&gt;                                       &lt;chr&gt;                 &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  
 1 NA    Red                     "#ED0A3F"                                   1903–present          ""    "Yes"   "Yes"   "Yes"   "Yes"  
 2 NA    Maroon                  "#C32148"                                   1949–present          "Kno… "No"    "No"    "No"    "No"   
 3 NA    Scarlet                 "#FD0E35"                                   1998–present          "Kno… "No"    "Yes"   "Yes"   "Yes"  
 4 NA    Brick Red               "#C62D42"                                   1958–present          ""    "No"    "No"    "No"    "Yes"  
 5 NA    English Vermilion       ""                                          1903–1935             "Als… ""      ""      ""      ""     
 6 NA    Madder Lake             ""                                          1903–1935             ""    ""      ""      ""      ""     
 7 NA    Permanent Geranium Lake ""                                          1903–circa 1910       ""    ""      ""      ""      ""     
 8 NA    Maximum Red             ""                                          1926–1944             "Par… ""      ""      ""      ""     
 9 NA    Chestnut                "#B94E48"                                   1903–present          "Kno… "No"    "No"    "Yes"   "Yes"  
10 NA    Orange-Red              "#FF5349"                                   1958–1990             ""    ""      ""      ""      ""     
# … with 158 more rows, and abbreviated variable names ¹​`Years in production[2]`, ²​`16-Box`, ³​`24-Box`, ⁴​`32-Box`, ⁵​`64-Box`</code></pre>
</div>
</div>
<p>… I encounter a rather awkward problem. The <code>color</code> field, which renders on the Wikipedia page as a pretty block of colour showing what the crayon colour looks like, is empty. Sure, I do have text containing hex codes for some of the crayons, but the missing data isn’t missing at random. Old crayon colours are the ones systematically missing an official hex code. Okay, so I really would like to have some data in my <code>color</code> column.</p>
</section>
<section id="act-i-i-think-it-works-like-the-hanky-code" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="act-i-i-think-it-works-like-the-hanky-code">Act I: I think it works like the hanky code</h2>
<p>Look, that’s not a big deal right? Not having any colours for a post about colours? I guess the post will be short. Eh. Let’s set that aside and focus on the important things. Those column names need a little cleaning, so I’ll do the thing I always do and break out <a href="https://sfirke.github.io/janitor/">janitor</a> and <a href="https://dplyr.tidyverse.org/">dplyr</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">crayola <span class="ot" style="color: #003B4F;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-2">  janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-3">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rename</span>(</span>
<span id="cb7-4">    <span class="at" style="color: #657422;">listed =</span> hexadecimal_in_their_website_depiction_b,</span>
<span id="cb7-5">    <span class="at" style="color: #657422;">years =</span> years_in_production_2</span>
<span id="cb7-6">  )</span></code></pre></div>
</div>
<p>Much nicer:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 168 × 9
   color name                    listed    years           notes                                     x16_box x24_box x32_box x64_box
   &lt;lgl&gt; &lt;chr&gt;                   &lt;chr&gt;     &lt;chr&gt;           &lt;chr&gt;                                     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  
 1 NA    Red                     "#ED0A3F" 1903–present    ""                                        "Yes"   "Yes"   "Yes"   "Yes"  
 2 NA    Maroon                  "#C32148" 1949–present    "Known as \"Dark Red\", 1949–1958.[2]"    "No"    "No"    "No"    "No"   
 3 NA    Scarlet                 "#FD0E35" 1998–present    "Known as \"Torch Red\", 1998.[2]"        "No"    "Yes"   "Yes"   "Yes"  
 4 NA    Brick Red               "#C62D42" 1958–present    ""                                        "No"    "No"    "No"    "Yes"  
 5 NA    English Vermilion       ""        1903–1935       "Also spelled \"Vermillion\".[2]"         ""      ""      ""      ""     
 6 NA    Madder Lake             ""        1903–1935       ""                                        ""      ""      ""      ""     
 7 NA    Permanent Geranium Lake ""        1903–circa 1910 ""                                        ""      ""      ""      ""     
 8 NA    Maximum Red             ""        1926–1944       "Part of the Munsell line.[2]"            ""      ""      ""      ""     
 9 NA    Chestnut                "#B94E48" 1903–present    "Known as \"Indian Red\" before 1999.[2]" "No"    "No"    "Yes"   "Yes"  
10 NA    Orange-Red              "#FF5349" 1958–1990       ""                                        ""      ""      ""      ""     
# … with 158 more rows</code></pre>
</div>
</div>
<p>Now where was I? What’s that maxim about never using background colour to encode substantive data in a table? I seem to have run afoul of that. Let’s take a look at the elements of the html table and see if I can work out where things went wrong…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">cells <span class="ot" style="color: #003B4F;">&lt;-</span> raw[[<span class="dv" style="color: #AD0000;">1</span>]] <span class="sc" style="color: #5E5E5E;">|&gt;</span> rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_elements</span>(<span class="st" style="color: #20794D;">"td"</span>)</span>
<span id="cb10-2">cells</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{xml_nodeset (1512)}
 [1] &lt;td style="background: #ED0A3F; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [2] &lt;td&gt;Red\n&lt;/td&gt;
 [3] &lt;td align="center" style="background:#E9E9E9"&gt;#ED0A3F\n&lt;/td&gt;
 [4] &lt;td&gt;1903–present\n&lt;/td&gt;
 [5] &lt;td&gt;\n&lt;/td&gt;
 [6] &lt;td style="background:#9EFF9E;vertical-align:middle;text-align:cente ...
 [7] &lt;td style="background:#9EFF9E;vertical-align:middle;text-align:cente ...
 [8] &lt;td style="background:#9EFF9E;vertical-align:middle;text-align:cente ...
 [9] &lt;td style="background:#9EFF9E;vertical-align:middle;text-align:cente ...
[10] &lt;td style="background: #C32148; color: white"&gt;&nbsp;\n&lt;/td&gt;
[11] &lt;td&gt;Maroon\n&lt;/td&gt;
[12] &lt;td align="center" style="background:#E9E9E9"&gt;#C32148\n&lt;/td&gt;
[13] &lt;td&gt;\n&lt;a href="/wiki/1949" title="1949"&gt;1949&lt;/a&gt;–present\n&lt;/td&gt;
[14] &lt;td&gt;Known as "Dark Red", 1949–1958.&lt;sup id="cite_ref-WelterColorName ...
[15] &lt;td style="background:#FFC7C7;vertical-align:middle;text-align:cente ...
[16] &lt;td style="background:#FFC7C7;vertical-align:middle;text-align:cente ...
[17] &lt;td style="background:#FFC7C7;vertical-align:middle;text-align:cente ...
[18] &lt;td style="background:#FFC7C7;vertical-align:middle;text-align:cente ...
[19] &lt;td style="background: #FD0E35; color: white"&gt;&nbsp;\n&lt;/td&gt;
[20] &lt;td&gt;Scarlet\n&lt;/td&gt;
...</code></pre>
</div>
</div>
<p>Okay yeah. You can see the problem looking at the 1st and 10th line of the output here. The piece of information we need is embedded in the css style attribute, and it’s <em>only</em> in the style metadata attribute. There’s no data in the actual “td” element for <code>html_table()</code> to capture. I’m going to have to fix that myself I guess. Sigh.</p>
<p>The first part of my process was to find the relevant subset of cells. There’s probably a better way to do it, but my approach was based on noting that (a) it’s really easy to find the cells containing the colour names (“Red”, “Maroon”, etc), and (b) the cell to the left of it is always the one that has the background colour that I’m looking for. So, my first step was to manually pull out the text in each cell. That’s easy to do with rvest thanks to the <code>html_text()</code> function, and just to make my life a little easier I used <a href="https://stringr.tidyverse.org/">stringr</a> to remove all the <code>\n</code> characters at the end of each cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">cell_text <span class="ot" style="color: #003B4F;">&lt;-</span> cells <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-2">  rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_text</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-3">  stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">$"</span>)</span></code></pre></div>
</div>
<p>And here’s the text in the first 20 cells:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">cell_text[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">20</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "&nbsp;"                                   
 [2] "Red"                                 
 [3] "#ED0A3F"                             
 [4] "1903–present"                        
 [5] ""                                    
 [6] "Yes"                                 
 [7] "Yes"                                 
 [8] "Yes"                                 
 [9] "Yes"                                 
[10] "&nbsp;"                                   
[11] "Maroon"                              
[12] "#C32148"                             
[13] "1949–present"                        
[14] "Known as \"Dark Red\", 1949–1958.[2]"
[15] "No"                                  
[16] "No"                                  
[17] "No"                                  
[18] "No"                                  
[19] "&nbsp;"                                   
[20] "Scarlet"                             </code></pre>
</div>
</div>
<p>So when I now match this text against the colour names stored in <code>crayola$name</code>, I’ll detect “Red” in cell 2, “Maroon” in cell 11, and so on. If I subtract 1 from each of these values, I now have the indices of the table cells that contain the style information I need.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">ind <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(cell_text <span class="sc" style="color: #5E5E5E;">%in%</span> crayola<span class="sc" style="color: #5E5E5E;">$</span>name) <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<p>Here’s what those cells look like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">cells[ind]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{xml_nodeset (168)}
 [1] &lt;td style="background: #ED0A3F; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [2] &lt;td style="background: #C32148; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [3] &lt;td style="background: #FD0E35; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [4] &lt;td style="background: #C62D42; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [5] &lt;td style="background: #CC474B; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [6] &lt;td style="background: #CC3336; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [7] &lt;td style="background: #E12C2C; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [8] &lt;td style="background: #D92121; color: white"&gt;&nbsp;\n&lt;/td&gt;
 [9] &lt;td style="background: #B94E48; color: white"&gt;&nbsp;\n&lt;/td&gt;
[10] &lt;td style="background: #FF5349; color: white"&gt;&nbsp;\n&lt;/td&gt;
[11] &lt;td style="background: #FE4C40; color: white"&gt;&nbsp;\n&lt;/td&gt;
[12] &lt;td style="background: #FE6F5E; color: white"&gt;&nbsp;\n&lt;/td&gt;
[13] &lt;td style="background: #B33B24; color: white"&gt;&nbsp;\n&lt;/td&gt;
[14] &lt;td style="background: #CC553D; color: white"&gt;&nbsp;\n&lt;/td&gt;
[15] &lt;td style="background: #E6735C; color: white"&gt;&nbsp;\n&lt;/td&gt;
[16] &lt;td style="background: #FF9980; color: white"&gt;&nbsp;\n&lt;/td&gt;
[17] &lt;td style="background: #E58E73; color: white"&gt;&nbsp;\n&lt;/td&gt;
[18] &lt;td style="background: #FF7034; color: white"&gt;&nbsp;\n&lt;/td&gt;
[19] &lt;td style="background: #FF681F; color: white"&gt;&nbsp;\n&lt;/td&gt;
[20] &lt;td style="background: #FF8833; color: white"&gt;&nbsp;\n&lt;/td&gt;
...</code></pre>
</div>
</div>
<p>That’s much nicer. Now I have something with a consistent format that I can process without too much pain. The rvest package has a <code>html_attr()</code> function which I can use to pull out the contents of the style attribute as a string. So, after spending a few minutes trying to remember how regular expressions work, I used <code>str_extract()</code> to pull out the hexadecimal codes like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">background <span class="ot" style="color: #003B4F;">&lt;-</span> cells[ind] <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb18-2">  rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_attr</span>(<span class="st" style="color: #20794D;">"style"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb18-3">  stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(<span class="st" style="color: #20794D;">"#[0-9ABCDEF]{6}"</span>)</span></code></pre></div>
</div>
<p>Let’s take a look:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">background</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "#ED0A3F" "#C32148" "#FD0E35" "#C62D42" "#CC474B" "#CC3336" "#E12C2C" "#D92121" "#B94E48" "#FF5349" "#FE4C40" "#FE6F5E" "#B33B24"
 [14] "#CC553D" "#E6735C" "#FF9980" "#E58E73" "#FF7034" "#FF681F" "#FF8833" "#FFB97B" "#ECAC76" "#E77200" "#FFAE42" "#F2BA49" "#FBE7B2"
 [27] "#F2C649" "#F8D568" "#FCD667" "#FED85D" "#FBE870" "#F1E788" "#FFEB00" "#B5B35C" "#ECEBBD" "#FAFA37" "#FFFF99" "#FFFF9F" "#D9E650"
 [40] "#ACBF60" "#AFE313" "#BEE64B" "#C5E17A" "#5E8C31" "#7BA05B" "#9DE093" "#63B76C" "#4D8C57" "#01A638" "#6CA67C" "#5FA777" "#93DFB8"
 [53] "#33CC99" "#1AB385" "#29AB87" "#00CC99" "#00755E" "#8DD9CC" "#01796F" "#30BFBF" "#00CCCC" "#008080" "#8FD8D8" "#95E0E8" "#6CDAE7"
 [66] "#2D383A" "#76D7EA" "#7ED4E6" "#0095B7" "#009DC4" "#02A4D3" "#47ABCC" "#2EB4E6" "#339ACC" "#93CCEA" "#2887C8" "#003366" "#0066CC"
 [79] "#1560BD" "#0066FF" "#A9B2C3" "#C3CDE6" "#4570E6" "#3C69E7" "#7A89B8" "#4F69C6" "#8D90A1" "#8C90C8" "#7070CC" "#9999CC" "#ACACE6"
 [92] "#766EC8" "#6456B7" "#3F26BF" "#8B72BE" "#652DC1" "#6B3FA0" "#8359A3" "#8F47B3" "#C9A0DC" "#BF8FCC" "#803790" "#733380" "#D6AEDD"
[105] "#C154C1" "#FC74FD" "#732E6C" "#E667CE" "#E29CD2" "#8E3179" "#D96CBE" "#D8BFD8" "#C8509B" "#BB3385" "#D982B5" "#A63A79" "#A50B5E"
[118] "#614051" "#F653A6" "#DA3287" "#FF3399" "#FBAED2" "#FFB7D5" "#FFA6C9" "#F7468A" "#E30B5C" "#FDD7E4" "#E62E6B" "#DB5079" "#FC80A5"
[131] "#F091A9" "#FF91A4" "#A55353" "#CA3435" "#FEBAAD" "#F7A38E" "#E97451" "#AF593E" "#9E5B40" "#87421F" "#926F5B" "#DEA681" "#D27D46"
[144] "#664228" "#FA9D5A" "#EDC9AF" "#FFCBA4" "#805533" "#FDD5B1" "#EED9C4" "#665233" "#837050" "#E6BC5C" "#92926E" "#E6BE8A" "#C9C0BB"
[157] "#DA8A67" "#C88A65" "#000000" "#736A62" "#8B8680" "#C8C8CD" "#D9D6CF" "#FFFFFF" "#F1D651" "#DDEBEC" "#D9DAD2" "#C0D5F0"</code></pre>
</div>
</div>
<p>Yay, those look like hex colours. Better yet, because I’ve been careful to ensure that I’ve matched everything to the correct colours and in the correct order, I can insert them into the <code>crayola</code> tibble where they should have been in the first place:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">crayola<span class="sc" style="color: #5E5E5E;">$</span>color <span class="ot" style="color: #003B4F;">&lt;-</span> background</span>
<span id="cb21-2">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 168 × 9
   color   name                    listed    years           notes                                     x16_box x24_box x32_box x64_box
   &lt;chr&gt;   &lt;chr&gt;                   &lt;chr&gt;     &lt;chr&gt;           &lt;chr&gt;                                     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  
 1 #ED0A3F Red                     "#ED0A3F" 1903–present    ""                                        "Yes"   "Yes"   "Yes"   "Yes"  
 2 #C32148 Maroon                  "#C32148" 1949–present    "Known as \"Dark Red\", 1949–1958.[2]"    "No"    "No"    "No"    "No"   
 3 #FD0E35 Scarlet                 "#FD0E35" 1998–present    "Known as \"Torch Red\", 1998.[2]"        "No"    "Yes"   "Yes"   "Yes"  
 4 #C62D42 Brick Red               "#C62D42" 1958–present    ""                                        "No"    "No"    "No"    "Yes"  
 5 #CC474B English Vermilion       ""        1903–1935       "Also spelled \"Vermillion\".[2]"         ""      ""      ""      ""     
 6 #CC3336 Madder Lake             ""        1903–1935       ""                                        ""      ""      ""      ""     
 7 #E12C2C Permanent Geranium Lake ""        1903–circa 1910 ""                                        ""      ""      ""      ""     
 8 #D92121 Maximum Red             ""        1926–1944       "Part of the Munsell line.[2]"            ""      ""      ""      ""     
 9 #B94E48 Chestnut                "#B94E48" 1903–present    "Known as \"Indian Red\" before 1999.[2]" "No"    "No"    "Yes"   "Yes"  
10 #FF5349 Orange-Red              "#FF5349" 1958–1990       ""                                        ""      ""      ""      ""     
# … with 158 more rows</code></pre>
</div>
</div>
<p>Finally!</p>
</section>
<section id="act-ii-one-hundred-years-of-tidyr" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="act-ii-one-hundred-years-of-tidyr">Act II: One hundred years of tidyr</h2>
<p>If life were at all fair my data wrangling woes would now be over, but of course they are not. If I’m going to analyse the Crayola data by year it will be useful to me if the <code>year</code> column has nicely formatted data, and of course it does not:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">crayola<span class="sc" style="color: #5E5E5E;">$</span>years</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "1903–present"               "1949–present"               "1998–present"               "1958–present"              
  [5] "1903–1935"                  "1903–1935"                  "1903–circa 1910"            "1926–1944"                 
  [9] "1903–present"               "1958–1990"                  "1997–present"               "1958–present"              
 [13] "1903–circa 1910"            "1903–1944"                  "1903–circa 1910"            "1990–present"              
 [17] "1926–1944"                  "1958–present"               "1930–present"               "1903–present"              
 [21] "1993–present"               "1926–1944, 1949–1958"       "2003–present"               "1930–present"              
 [25] "1926–1944"                  "1998–present"               "1903–1990"                  "1958–1990"                 
 [29] "1903–present"               "1990–2017[2][3][4]"         "1903–present"               "1958–present"              
 [33] "1926–1944"                  "1903–present"               "1958–present"               "1926–1944"                 
 [37] "1998–present"               "1903–1990"                  "1926–1944"                  "1926–1944"                 
 [41] "2003–present"               "1903–1935"                  "1930–present"               "1926–1944"                 
 [45] "1993–present"               "1993–present"               "1998–present"               "1926–1944"                 
 [49] "1903–present"               "1903–1939"                  "1949–present"               "1949–present"              
 [53] "1993–present"               "1998–present"               "1990–present"               "1997–present"              
 [57] "1993–present"               "1926–1944"                  "1903–1949, 1958–present"    "1926–1944"                 
 [61] "1993–present"               "1990–2003"                  "1958"                       "1949–present"              
 [65] "1935–present"               "1998–present"               "1958–present"               "1926–1944"                 
 [69] "1949–present"               "1993–present"               "1990–present"               "1926–1958"                 
 [73] "1903–1958"                  "1949–1958"                  "1958–present"               "1958–1990"                 
 [77] "1903–present"               "1958–present"               "1993–present"               "1949–present"              
 [81] "1958–present"               "1958–present"               "1935–1958"                  "2017–present[5]"           
 [85] "2003–present"               "1999–present"               "1998–present"               "1903–1958"                 
 [89] "1903–circa 1910"            "1998–present"               "1926–1944"                  "1903–circa 1910, 1930–1990"
 [93] "1949–present"               "1903–1944"                  "1926–1944"                  "1998–present"              
 [97] "1990–present"               "1930–1949, 1958–present"    "1949–1958"                  "1993–present"              
[101] "1949–1958"                  "1997–present"               "1926–1944"                  "1993–present"              
[105] "1990–present"               "1997–present"               "1903–1930"                  "1949–1958"                 
[109] "1949–present"               "1958–present"               "1949–1958"                  "1949–1999"                 
[113] "1958–2003"                  "1930–present"               "1926–1944"                  "1926–1944"                 
[117] "2003–present"               "1998–present"               "1903–present"               "1993–present"              
[121] "1990–present"               "1958–present"               "1998–present"               "1903–present"              
[125] "1958–present"               "1993–present"               "1998–present"               "1935–1958"                 
[129] "1998–present"               "1993–present"               "1993–present"               "1949–present"              
[133] "1926–1944"                  "1949–present"               "1958–present"               "1998–present"              
[137] "1903–present"               "1903–present"               "1935–1944, 1958–present"    "1998–present"              
[141] "1998–present"               "1993–present"               "1958–present"               "1903–1910"                 
[145] "1958–present"               "1998–present"               "1903–present"               "1903–1944"                 
[149] "1958–present"               "1998–present"               "1903–1990"                  "1998–present"              
[153] "1903–circa 1910"            "1903–1944"                  "1953–present"               "1903–present"              
[157] "1903–1915, 1958–present"    "1998–present"               "1903–present"               "1903–1910"                 
[161] "1926–present"               "1958–1990"                  "1993–present"               "1903–present"              
[165] "2021, 2022"                 "2021, 2022"                 "2021, 2022"                 "2021, 2022"                </code></pre>
</div>
</div>
<p>There are several problems I’m going to need to solve to get this into a regular form:</p>
<ul>
<li>The “circa” text will have to be removed</li>
<li>White spaces will need to be removed</li>
<li>Footnote text will need to be removed</li>
<li>The word “present” will have to be replaced by “2022”</li>
<li>The single year “1958” will need to be replaced by an interval “1958-1958”</li>
<li>The comma separated list “2021,2022” will need to be an interval “2021-2022”</li>
</ul>
<p>Here’s a little bit of stringr code that does that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">crayola <span class="ot" style="color: #003B4F;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb25-3">    <span class="at" style="color: #657422;">years =</span> years <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-4">      stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">" "</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-5">      stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">[.</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">]"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-6">      stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">"circa"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-7">      stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">"present"</span>, <span class="st" style="color: #20794D;">"2022"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-8">      stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">"^1958$"</span>, <span class="st" style="color: #20794D;">"1958-1958"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-9">      stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">"2021,2022"</span>, <span class="st" style="color: #20794D;">"2021-2022"</span>),</span>
<span id="cb25-10">  ) </span></code></pre></div>
</div>
<p>The <code>years</code> column now has a regular form. Each entry is either a contiguous interval like <code>"1903-2022"</code>, or a comma separated list of two such intervals like <code>"1903–1910,1930–1990"</code>:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">crayola<span class="sc" style="color: #5E5E5E;">$</span>years</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] "1903–2022"           "1949–2022"           "1998–2022"           "1958–2022"           "1903–1935"          
  [6] "1903–1935"           "1903–1910"           "1926–1944"           "1903–2022"           "1958–1990"          
 [11] "1997–2022"           "1958–2022"           "1903–1910"           "1903–1944"           "1903–1910"          
 [16] "1990–2022"           "1926–1944"           "1958–2022"           "1930–2022"           "1903–2022"          
 [21] "1993–2022"           "1926–1944,1949–1958" "2003–2022"           "1930–2022"           "1926–1944"          
 [26] "1998–2022"           "1903–1990"           "1958–1990"           "1903–2022"           "1990–2017"          
 [31] "1903–2022"           "1958–2022"           "1926–1944"           "1903–2022"           "1958–2022"          
 [36] "1926–1944"           "1998–2022"           "1903–1990"           "1926–1944"           "1926–1944"          
 [41] "2003–2022"           "1903–1935"           "1930–2022"           "1926–1944"           "1993–2022"          
 [46] "1993–2022"           "1998–2022"           "1926–1944"           "1903–2022"           "1903–1939"          
 [51] "1949–2022"           "1949–2022"           "1993–2022"           "1998–2022"           "1990–2022"          
 [56] "1997–2022"           "1993–2022"           "1926–1944"           "1903–1949,1958–2022" "1926–1944"          
 [61] "1993–2022"           "1990–2003"           "1958-1958"           "1949–2022"           "1935–2022"          
 [66] "1998–2022"           "1958–2022"           "1926–1944"           "1949–2022"           "1993–2022"          
 [71] "1990–2022"           "1926–1958"           "1903–1958"           "1949–1958"           "1958–2022"          
 [76] "1958–1990"           "1903–2022"           "1958–2022"           "1993–2022"           "1949–2022"          
 [81] "1958–2022"           "1958–2022"           "1935–1958"           "2017–2022"           "2003–2022"          
 [86] "1999–2022"           "1998–2022"           "1903–1958"           "1903–1910"           "1998–2022"          
 [91] "1926–1944"           "1903–1910,1930–1990" "1949–2022"           "1903–1944"           "1926–1944"          
 [96] "1998–2022"           "1990–2022"           "1930–1949,1958–2022" "1949–1958"           "1993–2022"          
[101] "1949–1958"           "1997–2022"           "1926–1944"           "1993–2022"           "1990–2022"          
[106] "1997–2022"           "1903–1930"           "1949–1958"           "1949–2022"           "1958–2022"          
[111] "1949–1958"           "1949–1999"           "1958–2003"           "1930–2022"           "1926–1944"          
[116] "1926–1944"           "2003–2022"           "1998–2022"           "1903–2022"           "1993–2022"          
[121] "1990–2022"           "1958–2022"           "1998–2022"           "1903–2022"           "1958–2022"          
[126] "1993–2022"           "1998–2022"           "1935–1958"           "1998–2022"           "1993–2022"          
[131] "1993–2022"           "1949–2022"           "1926–1944"           "1949–2022"           "1958–2022"          
[136] "1998–2022"           "1903–2022"           "1903–2022"           "1935–1944,1958–2022" "1998–2022"          
[141] "1998–2022"           "1993–2022"           "1958–2022"           "1903–1910"           "1958–2022"          
[146] "1998–2022"           "1903–2022"           "1903–1944"           "1958–2022"           "1998–2022"          
[151] "1903–1990"           "1998–2022"           "1903–1910"           "1903–1944"           "1953–2022"          
[156] "1903–2022"           "1903–1915,1958–2022" "1998–2022"           "1903–2022"           "1903–1910"          
[161] "1926–2022"           "1958–1990"           "1993–2022"           "1903–2022"           "2021-2022"          
[166] "2021-2022"           "2021-2022"           "2021-2022"          </code></pre>
</div>
</div>
<p>That’s better because the data format is now consistent, but it’s not tidy. In the long run, what I really want is a nice tidy tibble: each row should correspond to a single observation. If “Red” was a colour in 1935, then there should be a row in my table for which <code>name = "Red"</code> and <code>year = 1935</code>. That’s not quite what I have here, so I have more data wrangling to do and this time <a href="https://tidyr.tidyverse.org/">tidyr</a> will be my best friend.</p>
<p>The first thing I’m going to do is use <code>tidyr::separate()</code> to split the <code>years</code> variable into two variables, <code>years_1</code> and <code>years_2</code>. The <code>years_1</code> variable will contain the first time interval for which a particular crayon colour was in production, and the <code>years_2</code> variable will contain the second interval in which it was in production. For almost all colours, <code>years_2</code> will be <code>NA</code>. It’s only those special cases like <code>"1903–1910,1930–1990"</code> that will have values in both.</p>
<p>Then, because I don’t really see a need to have two variables that both represent a period of time, I’ll use <code>tidyr::pivot_longer()</code> to give myself a data set in which there is one row for every continuous time interval:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">crayola <span class="ot" style="color: #003B4F;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb28-2">  tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">separate</span>(</span>
<span id="cb28-3">    <span class="at" style="color: #657422;">col =</span> years,</span>
<span id="cb28-4">    <span class="at" style="color: #657422;">into =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"years_1"</span>, <span class="st" style="color: #20794D;">"years_2"</span>),</span>
<span id="cb28-5">    <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>,</span>
<span id="cb28-6">    <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"right"</span></span>
<span id="cb28-7">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb28-8">  tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb28-9">    <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"years_"</span>),</span>
<span id="cb28-10">    <span class="at" style="color: #657422;">names_prefix =</span> <span class="st" style="color: #20794D;">"years_"</span>,</span>
<span id="cb28-11">    <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"interval"</span>,</span>
<span id="cb28-12">    <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"years"</span></span>
<span id="cb28-13">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb28-14">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(years))</span></code></pre></div>
</div>
<p>To give you a sense of what the data looks like in this form, I’ll pull out the rows corresponding to two different crayon colours, “Maroon” and “Violet-Blue”:</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb29-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Maroon"</span> <span class="sc" style="color: #5E5E5E;">|</span> name <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Violet-Blue"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 10
  color   name        listed  notes                                     x16_box x24_box x32_box x64_box interval years    
  &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;                                     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;    
1 #C32148 Maroon      #C32148 "Known as \"Dark Red\", 1949–1958.[2]"    "No"    "No"    "No"    "No"    1        1949–2022
2 #766EC8 Violet-Blue #766EC8 "Known as \"Blue-Violet\", 1930–1958.[2]" ""      ""      ""      ""      1        1903–1910
3 #766EC8 Violet-Blue #766EC8 "Known as \"Blue-Violet\", 1930–1958.[2]" ""      ""      ""      ""      2        1930–1990</code></pre>
</div>
</div>
<p>The “Maroon” crayon has been in production continuously since 1949, so there is only one row in the table for that one. The “Violet-Blue” crayon was in production from 1903 to 1910, and again from 1930 to 1990. These two production periods are each represented as a row.</p>
<p>Excellent. Next, I’ll use <code>separate()</code> again to split the <code>years</code> interval into two columns, one for the <code>year_started</code> and another for the <code>year_ended</code>. Having done so, the year information is finally in a numeric format, so I can coerce it from character to integer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">crayola <span class="ot" style="color: #003B4F;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb31-2">  tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">separate</span>(</span>
<span id="cb31-3">    <span class="at" style="color: #657422;">col =</span> years,</span>
<span id="cb31-4">    <span class="at" style="color: #657422;">into =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"year_started"</span>, <span class="st" style="color: #20794D;">"year_ended"</span>)</span>
<span id="cb31-5">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb31-6">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb31-7">    <span class="at" style="color: #657422;">interval =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(interval),</span>
<span id="cb31-8">    <span class="at" style="color: #657422;">year_started =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(year_started),</span>
<span id="cb31-9">    <span class="at" style="color: #657422;">year_ended =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(year_ended)</span>
<span id="cb31-10">  )</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 174 × 11
   color   name                    listed    notes                               x16_box x24_box x32_box x64_box inter…¹ year_…² year_…³
   &lt;chr&gt;   &lt;chr&gt;                   &lt;chr&gt;     &lt;chr&gt;                               &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;int&gt;   &lt;int&gt;   &lt;int&gt;
 1 #ED0A3F Red                     "#ED0A3F" ""                                  "Yes"   "Yes"   "Yes"   "Yes"         1    1903    2022
 2 #C32148 Maroon                  "#C32148" "Known as \"Dark Red\", 1949–1958.… "No"    "No"    "No"    "No"          1    1949    2022
 3 #FD0E35 Scarlet                 "#FD0E35" "Known as \"Torch Red\", 1998.[2]"  "No"    "Yes"   "Yes"   "Yes"         1    1998    2022
 4 #C62D42 Brick Red               "#C62D42" ""                                  "No"    "No"    "No"    "Yes"         1    1958    2022
 5 #CC474B English Vermilion       ""        "Also spelled \"Vermillion\".[2]"   ""      ""      ""      ""            1    1903    1935
 6 #CC3336 Madder Lake             ""        ""                                  ""      ""      ""      ""            1    1903    1935
 7 #E12C2C Permanent Geranium Lake ""        ""                                  ""      ""      ""      ""            1    1903    1910
 8 #D92121 Maximum Red             ""        "Part of the Munsell line.[2]"      ""      ""      ""      ""            1    1926    1944
 9 #B94E48 Chestnut                "#B94E48" "Known as \"Indian Red\" before 19… "No"    "No"    "Yes"   "Yes"         1    1903    2022
10 #FF5349 Orange-Red              "#FF5349" ""                                  ""      ""      ""      ""            1    1958    1990
# … with 164 more rows, and abbreviated variable names ¹​interval, ²​year_started, ³​year_ended</code></pre>
</div>
</div>
<p>We’re getting close. At this point the last bit of work I have to do to fix the year data is unpack it. Instead of representing the data for Maroon crayons with one row with a <code>year_started</code> value of 1949 and <code>year_ended</code> value of 2022, I want to have a single column called <code>year</code>, and the data should contain one row for every year in which Maroon was in production. Somewhere in the back of my head there is the thought that there must be an easy way to do this with tidyr, but my ingenuity failed me this time and I fell back on my usual solution… <a href="https://purrr.tidyverse.org/">purrr</a>.</p>
<p>It’s a two-step process. Step one: write a little function that expects to receive the values stored in one row of the existing data frame, and returns a new data frame in the format I want. In this case, I want a tibble that has one row for each <code>year</code> in range starting <code>year_started</code> and ending <code>year_ended</code>, but otherwise has the same structure as the existing data. The <code>unpack_row()</code> function below does that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">unpack_row <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(color, name, year_started, year_ended, ...) {</span>
<span id="cb34-2">  tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb34-3">    <span class="at" style="color: #657422;">name =</span> name,</span>
<span id="cb34-4">    <span class="at" style="color: #657422;">color =</span> color,</span>
<span id="cb34-5">    <span class="at" style="color: #657422;">year =</span> year_started<span class="sc" style="color: #5E5E5E;">:</span>year_ended,</span>
<span id="cb34-6">    ...</span>
<span id="cb34-7">  )</span>
<span id="cb34-8">}</span></code></pre></div>
</div>
<p>So now I’ll do the unpacking with <code>purrr::pmap_dfr()</code>, sort the rows into a nice order using <code>dplyr::arrange()</code>, and add an <code>id</code> column to ensure that every row in the table has a unique identifier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">crayola <span class="ot" style="color: #003B4F;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb35-2">  purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pmap_dfr</span>(unpack_row) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb35-3">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">arrange</span>(year, color) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb35-4">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">id =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">row_number</span>())</span></code></pre></div>
</div>
<p>Voilà!</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7,749 × 11
   name                color    year listed    notes                                       x16_box x24_box x32_box x64_box inter…¹    id
   &lt;chr&gt;               &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;                                       &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;int&gt; &lt;int&gt;
 1 Black               #000000  1903 "#000000" ""                                          "Yes"   "Yes"   "Yes"   "Yes"         1     1
 2 Midnight Blue       #003366  1903 "#003366" "Known as \"Prussian Blue\", 1903–1958.[2]" "No"    "No"    "No"    "No"          1     2
 3 Pine Green          #01796F  1903 "#01796F" "Known as \"Dark Chrome Green\" (\"Chrome … "No"    "No"    "No"    "No"          1     3
 4 Green               #01A638  1903 "#01A638" ""                                          "Yes"   "Yes"   "Yes"   "Yes"         1     4
 5 Blue (I)            #2EB4E6  1903 ""        "Known as \"Celestial Blue\", 1935–1949, a… ""      ""      ""      ""            1     5
 6 Ultramarine Blue    #3F26BF  1903 ""        ""                                          ""      ""      ""      ""            1     6
 7 Van Dyke Brown      #664228  1903 ""        "Same color as \"Brown\" (1903–1910).[2]"   ""      ""      ""      ""            1     7
 8 Raw Umber           #665233  1903 "#665233" ""                                          ""      ""      ""      ""            1     8
 9 Medium Chrome Green #6CA67C  1903 ""        "\"Chrome Green, Medium\" on labels. Produ… ""      ""      ""      ""            1     9
10 Celestial Blue      #7070CC  1903 ""        ""                                          ""      ""      ""      ""            1    10
# … with 7,739 more rows, and abbreviated variable name ¹​interval</code></pre>
</div>
</div>
</section>
<section id="act-iii-i-said-pet-i-said-luv-i-said-pet" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="act-iii-i-said-pet-i-said-luv-i-said-pet">Act III: I said pet, I said LUV, I said pet…</h2>
<p>Okay I have one last thing to do before I’m done with the data wrangling. Having hex strings associated with each crayon colour is nice and is exactly what I need for plotting, but you can’t construct a nice ordering of colours since colour space is three dimensional, more or less. I’m trying my very best to forget everything I ever learned about the psychophysics of human colour perception, but even so I’m not silly enough to try to work with raw RGB values. Instead I’ll use the <a href="http://colorspace.r-forge.r-project.org/">colorspace</a> package to convert extract hue/saturation/value coordinates, as well as my slightly-preferred method, <a href="https://en.wikipedia.org/wiki/CIELUV">CIELUV color coordinates</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">HSV <span class="ot" style="color: #003B4F;">&lt;-</span> colorspace<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">coords</span>(<span class="fu" style="color: #4758AB;">as</span>(colorspace<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hex2RGB</span>(crayola<span class="sc" style="color: #5E5E5E;">$</span>color), <span class="st" style="color: #20794D;">"HSV"</span>))</span>
<span id="cb38-2">LUV <span class="ot" style="color: #003B4F;">&lt;-</span> colorspace<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">coords</span>(<span class="fu" style="color: #4758AB;">as</span>(colorspace<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hex2RGB</span>(crayola<span class="sc" style="color: #5E5E5E;">$</span>color), <span class="st" style="color: #20794D;">"LUV"</span>))</span></code></pre></div>
</div>
<p>Each of these commands returns a matrix with three columns and the same number of rows as the <code>crayola</code> data frame. The first few rows of the <code>HSV</code> matrix look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">HSV[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              H         S         V
 [1,]   0.00000 0.0000000 0.0000000
 [2,] 210.00000 1.0000000 0.4000000
 [3,] 175.00000 0.9917355 0.4745098
 [4,] 140.00000 0.9939759 0.6509804
 [5,] 196.30435 0.8000000 0.9019608
 [6,] 249.80392 0.8010471 0.7490196
 [7,]  25.16129 0.6078431 0.4000000
 [8,]  36.47059 0.5000000 0.4000000
 [9,] 136.55172 0.3493976 0.6509804
[10,] 240.00000 0.4509804 0.8000000</code></pre>
</div>
</div>
<p>So now I can store all six coordinates in the <code>crayola</code> dataframe, along with the LUV-space version of “hue” which I compute in the last line here:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">crayola <span class="ot" style="color: #003B4F;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb41-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb41-3">    <span class="at" style="color: #657422;">hue =</span> HSV[, <span class="st" style="color: #20794D;">"H"</span>],</span>
<span id="cb41-4">    <span class="at" style="color: #657422;">sat =</span> HSV[, <span class="st" style="color: #20794D;">"S"</span>],</span>
<span id="cb41-5">    <span class="at" style="color: #657422;">val =</span> HSV[, <span class="st" style="color: #20794D;">"V"</span>],</span>
<span id="cb41-6">    <span class="at" style="color: #657422;">L =</span> LUV[, <span class="st" style="color: #20794D;">"L"</span>],</span>
<span id="cb41-7">    <span class="at" style="color: #657422;">U =</span> LUV[, <span class="st" style="color: #20794D;">"U"</span>],</span>
<span id="cb41-8">    <span class="at" style="color: #657422;">V =</span> LUV[, <span class="st" style="color: #20794D;">"V"</span>],</span>
<span id="cb41-9">    <span class="at" style="color: #657422;">hue2 =</span> <span class="fu" style="color: #4758AB;">atan2</span>(V, U)</span>
<span id="cb41-10">  )</span></code></pre></div>
</div>
<p>The Wikipedia page on CIELUV has a little more information on this, but really the thing that matters is that the <code>hue2</code> column is the variable I’m going to use to arrange the crayon colours when plotting them later. And so the moment arrives that, at long last, I have the data…</p>
<div class="cell column-page">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">crayola</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7,749 × 18
   name             color  year listed notes x16_box x24_box x32_box x64_box inter…¹    id   hue   sat   val     L      U       V   hue2
   &lt;chr&gt;            &lt;chr&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;     &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;
 1 Black            #000…  1903 "#000… ""    "Yes"   "Yes"   "Yes"   "Yes"         1     1   0   0     0       0     0      0     -3.14 
 2 Midnight Blue    #003…  1903 "#003… "Kno… "No"    "No"    "No"    "No"          1     2 210   1     0.4    21.3 -11.9  -40.1   -1.86 
 3 Pine Green       #017…  1903 "#017… "Kno… "No"    "No"    "No"    "No"          1     3 175   0.992 0.475  45.4 -36.1    0.638  3.12 
 4 Green            #01A…  1903 "#01A… ""    "Yes"   "Yes"   "Yes"   "Yes"         1     4 140   0.994 0.651  59.5 -54.9   61.6    2.30 
 5 Blue (I)         #2EB…  1903 ""     "Kno… ""      ""      ""      ""            1     5 196.  0.8   0.902  68.7 -44.6  -53.4   -2.27 
 6 Ultramarine Blue #3F2…  1903 ""     ""    ""      ""      ""      ""            1     6 250.  0.801 0.749  29.9  -2.77 -96.9   -1.60 
 7 Van Dyke Brown   #664…  1903 ""     "Sam… ""      ""      ""      ""            1     7  25.2 0.608 0.4    31.5  25.9   19.9    0.655
 8 Raw Umber        #665…  1903 "#665… ""    ""      ""      ""      ""            1     8  36.5 0.5   0.4    36.2  14.7   22.3    0.987
 9 Medium Chrome G… #6CA…  1903 ""     "\"C… ""      ""      ""      ""            1     9 137.  0.349 0.651  63.3 -28.3   26.3    2.39 
10 Celestial Blue   #707…  1903 ""     ""    ""      ""      ""      ""            1    10 240   0.451 0.8    51.1  -5.49 -76.1   -1.64 
# … with 7,739 more rows, and abbreviated variable name ¹​interval</code></pre>
</div>
</div>
</section>
<section id="the-intermission-is-late-so-what" class="level2">
<h2 class="anchored" data-anchor-id="the-intermission-is-late-so-what">The intermission is late, so what?</h2>
<p>As a rule I make it a habit to assume that, while the internet never forgets anything at all in the general sense, it doesn’t remember anything <em>specific</em> for any interval longer than I’d trust a man not to have conveniently lost my phone number. Moreover, while I also make it a habit not to care greatly about the archival properties of What Went Down In The Stalls At The Duke On Friday, I’m slightly more invested in, um … crayons, I guess. Or data science practices in R. Whatever.</p>
<p>My point here is that the table on wikipedia isn’t an archival source so there’s no guarantee that anything I’ve done up to this point is reproducible unless I do a bit of extra work myself and save a copy of the data…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">folder <span class="ot" style="color: #003B4F;">&lt;-</span> here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"posts"</span>, <span class="st" style="color: #20794D;">"2022-12-18_crayola-crayon-colours"</span>)</span>
<span id="cb44-2">readr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">write_csv</span>(crayola, fs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">path</span>(folder, <span class="st" style="color: #20794D;">"crayola.csv"</span>))</span></code></pre></div>
</div>
<p>As a convenient side benefit, you can download a copy of <a href="https://github.com/djnavarro/quarto-blog/blob/main/posts/2022-12-18_crayola-crayon-colours/crayola.csv">the crayola colours</a> data as a csv file from github should you feel so inclined. There’s even a script containing most of the <a href="https://github.com/djnavarro/quarto-blog/blob/main/posts/2022-12-18_crayola-crayon-colours/crayola.R">code for this post</a> too :-)</p>
</section>
<section id="act-iv-not-even-chekhov-expects-it-to-go-off" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="act-iv-not-even-chekhov-expects-it-to-go-off">Act IV: Not even Chekhov expects it to go off</h2>
<p>In any case, the final act of our little drama has arrived at last. Time to make a plot. The drums roll and the audience holds their breath in antici–</p>
<p>Oh let’s just get on with it and load <a href="https://ggplot2.tidyverse.org/">ggplot2</a> already. Here’s a stacked bar chart showing the number of distinct crayon colours in the Crayola standard set every year from 1903 to 2022. It has grown over time but the growth looks linear, not exponential:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb45-2">base <span class="ot" style="color: #003B4F;">&lt;-</span> crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb45-3">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb45-4">    <span class="at" style="color: #657422;">color =</span> forcats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(color, hue2)</span>
<span id="cb45-5">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb45-6">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb45-7">    <span class="at" style="color: #657422;">x =</span> year,</span>
<span id="cb45-8">    <span class="at" style="color: #657422;">group =</span> color,</span>
<span id="cb45-9">    <span class="at" style="color: #657422;">fill =</span> color</span>
<span id="cb45-10">  )) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb45-11">  <span class="fu" style="color: #4758AB;">scale_fill_identity</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb45-12">  <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb45-13"></span>
<span id="cb45-14">base <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">geom_bar</span>(<span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) </span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/first-plot-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>But let’s be honest, shall we? No-one at all (least of all me) is interested in determining whether the rate of growth of Crayola crayon colours in the standard set is exponential or linear. It’s just fun. The real reason we all love the Crayola post was that the image was so terribly pretty, so let’s start making something pretty, yes?</p>
<p>We can start getting something a little closer to the original if we set <code>position = "fill"</code>, and I’m going to use <code>theme_void()</code> because honestly it’s just prettier without the words and numbers getting in the way…</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">base <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>(</span>
<span id="cb46-4">    <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"fill"</span>,</span>
<span id="cb46-5">    <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"blank"</span>,</span>
<span id="cb46-6">    <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb46-7">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb46-8">  ) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>It’s pretty, but it’s noticeably different from the original one. In my version, there are 39 separate colours depicted on the left hand side, whereas the version that was going around on mastodon (and appears in the original blog posts) has only 8. Out of paranoia, I decided to check the counts in my data…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb47-2">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">count</span>(year) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb47-3">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(year <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1903</span>, <span class="dv" style="color: #AD0000;">2003</span>, <span class="at" style="color: #657422;">by =</span> <span class="dv" style="color: #AD0000;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 2
    year     n
   &lt;int&gt; &lt;int&gt;
 1  1903    40
 2  1913    32
 3  1923    31
 4  1933    57
 5  1943    57
 6  1953    49
 7  1963    64
 8  1973    64
 9  1983    64
10  1993    80
11  2003   108</code></pre>
</div>
</div>
<p>…which does seem consistent with what the <a href="https://en.wikipedia.org/wiki/History_of_Crayola_crayons">history of Crayola crayons</a> wikipedia article has to say on the topic too:</p>
<blockquote class="blockquote">
<p>Early Crayola advertising mentions thirty different colors, although there is no official list; in fact thirty-eight different crayons are known from Crayola boxes of this period. The largest labeled assortment was box No.&nbsp;51, titled Crayola Young Artists’ Drawing Crayons, which included twenty-eight different crayons. Other colors were found in different boxes, including the “Rubens” No.&nbsp;500, a twenty-four crayon assortment.</p>
</blockquote>
<p>Okay, so if I haven’t made a mistake, what is going on? It turns out that although Steven Von Worley’s blog post still manages to point to the “same” Wikipedia page 12 years later, the contents of the page have changed considerably. The original post was published January 15th 2010. Conveniently the wayback machine has a <a href="http://web.archive.org/web/20100209002742/https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors">snapshot of that page</a> from only a few weeks later, on February 9th. I have a very different version of the Crayola colours data than Steven’s friend Velociraptor had.</p>
<p>There are 133 colours listed in the 2010 version, and it’s missing all the colours that had gone out of production earlier than 1990. “English Vermillion”, for example, was in production from 1903 to 1935. It appears in the 2022 version of the Wikipedia data (and so it’s represented in my plots above), but it was omitted in the 2010 version of the Wikipedia data and so doesn’t appear in the version of the image that went around on Mastodon yesterday.</p>
<p>Hm. So what happens to my data if I crudely simulate a censoring process a little bit like the one that applied to the 2010 version of the Wikipedia page? Let’s simply ignore all crayon colours that were out of production earlier than 1990, shall we?</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">base <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;">geom_bar</span>(</span>
<span id="cb49-4">    <span class="at" style="color: #657422;">data =</span>  crayola <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb49-5">      dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">group_by</span>(name) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb49-6">      dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(<span class="fu" style="color: #4758AB;">max</span>(year) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1990</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb49-7">      dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb49-8">      dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">color =</span> forcats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fct_reorder</span>(color, hue2)),</span>
<span id="cb49-9">    <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"fill"</span>,</span>
<span id="cb49-10">    <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"blank"</span>,</span>
<span id="cb49-11">    <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb49-12">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb49-13">  ) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/second-plot-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>Still not exactly equivalent, but it’s closer.</p>
<p>More to the point however, I think we all have to admit that this is really the kind of data set that desperately needs to be plotted with the aid of <code>coord_polar()</code>, no?</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">base <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb50-3">  <span class="fu" style="color: #4758AB;">coord_polar</span>(<span class="at" style="color: #657422;">theta =</span> <span class="st" style="color: #20794D;">"y"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb50-4">  <span class="fu" style="color: #4758AB;">geom_bar</span>(</span>
<span id="cb50-5">    <span class="at" style="color: #657422;">position =</span> <span class="st" style="color: #20794D;">"fill"</span>,</span>
<span id="cb50-6">    <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"blank"</span>,</span>
<span id="cb50-7">    <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb50-8">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb50-9">  ) </span></code></pre></div>
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/third-plot-1.png" class="img-fluid figure-img" width="1152"></p>
</figure>
</div>
</div>
</div>
<p>I mean… not that anyone really cares what this represents, but each concentric ring represents a year of data: 1903 is in the middle, and 2022 is on the outside. Within each annual ring there is an equal-angle segment for every crayon colour in the data for that year. Whenever the crayons changed, the rings shift a bit. The colours are arranged around the circle by hue. Well, the hue-like quantity computed from the chromaticity components of the LUV coordinates. Whatever.</p>
<p>Alternatively, we could turn this into a racetrack plot, where each individual colour fills an angular section of constant size, and so only the year with the most crayon colours (2022) wraps the full way round the circle. That gives us this:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">base <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;">coord_polar</span>(<span class="at" style="color: #657422;">theta =</span> <span class="st" style="color: #20794D;">"y"</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;">geom_bar</span>(</span>
<span id="cb51-5">    <span class="at" style="color: #657422;">linetype =</span> <span class="st" style="color: #20794D;">"blank"</span>,</span>
<span id="cb51-6">    <span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb51-7">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb51-8">  ) </span></code></pre></div>
<div class="cell-output-display column-screen-inset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index_files/figure-html/fourth-plot-1.png" class="img-fluid figure-img" width="1152"></p>
</figure>
</div>
</div>
</div>
<p>I’m not sure it has a lot of value as a data visualisation but it is so very pretty!</p>
<!--------------- appendices go here ----------------->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Crayola Crayon Colours},
  date = {2022-12-18},
  url = {https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Crayola Crayon Colours.”</span> December
18, 2022. <a href="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours">https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Data Cleaning</category>
  <category>Data Visualisation</category>
  <guid>https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/index.html</guid>
  <pubDate>Sat, 17 Dec 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-12-18_crayola-crayon-colours/crayola.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Unpacking Arrow Datasets</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Hello again lovely people. I am, once again, blogging about Apache Arrow and I’m not even sorry. Oh well.</p>
<p>In an earlier post I wrote about <a href="../../posts/2022-05-25_arrays-and-tables-in-arrow/index.html">Tables and other in-memory data structures</a> that Arrow uses to represent data objects. That meant the bulk of the post was focused on Record Batch and Table objects and the constituent objects used to define columns in one of these things (Arrays and Chunked Arrays).</p>
<p>What I didn’t <em>really</em> talk about in that post was Datasets, which are used to represent data (typically larger-than-memory data) that are stored on-disk rather than in-memory. Okay, fine, yeah. Technically I did include a <a href="../../posts/2022-05-25_arrays-and-tables-in-arrow/index.html#datasets">section on Datasets</a> at the end of the post, but I was a bit evasive. I gave an example showing how to use Datasets, but I really didn’t talk much about what they are.</p>
<p>I had a very good reason for this, dear reader, and that reason is this: when I wrote that post I had no f**king idea whatsoever how Datasets worked. I knew how to use them, but if you’d asked me questions about how the magic works I couldn’t have told you.<sup>1</sup></p>
<p>Since that time I’ve learned a few things, and because I’m an annoying person I’m going to tell you about them.<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(arrow, <span class="at" style="color: #657422;">warn.conflicts =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr, <span class="at" style="color: #657422;">warn.conflicts =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p><br></p>
<div class="column-screen">
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/subdivision_08_1731.png" class="img-fluid"></p>
</div>
<section id="quick-recap-record-batches-and-tables" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="quick-recap-record-batches-and-tables">Quick recap: Record Batches and Tables</h2>
<p>At this point I’ve written <a href="https://blog.djnavarro.net/category/apache-arrow">quite a few posts about Arrow</a>, and it’s not necessarily a good idea for me to assume that you’ve had the misfortune to read all<sup>3</sup> of them. So here’s a quick recap of some of the key Arrow data structures that I’ve talked about in other posts…</p>
<p>Let’s start with Record Batches. A Record Batch is tabular data structure comprised of named Arrays,<sup>4</sup> and an accompanying Schema<sup>5</sup> that specifies the name and data type associated with each Array. We can create one manually using <code>record_batch()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">rb <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">record_batch</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;">strs =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"hello"</span>, <span class="st" style="color: #20794D;">"amazing"</span>, <span class="st" style="color: #20794D;">"and"</span>, <span class="st" style="color: #20794D;">"cruel"</span>, <span class="st" style="color: #20794D;">"world"</span>), </span>
<span id="cb2-3">  <span class="at" style="color: #657422;">ints =</span> <span class="fu" style="color: #4758AB;">c</span>(1L, <span class="cn" style="color: #8f5902;">NA</span>, 2L, 4L, 8L),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;">dbls =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">1.1</span>, <span class="fl" style="color: #AD0000;">3.2</span>, <span class="fl" style="color: #AD0000;">0.2</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="dv" style="color: #AD0000;">11</span>)</span>
<span id="cb2-5">)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">glimpse</span>(rb)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RecordBatch
5 rows x 3 columns
$ strs &lt;string&gt; "hello", "amazing", "and", "cruel", "world"
$ ints  &lt;int32&gt; 1, NA, 2, 4, 8
$ dbls &lt;double&gt; 1.1, 3.2, 0.2, NA, 11.0</code></pre>
</div>
</div>
<p>This is a Record Batch containing 5 rows and 3 columns. The command <code>rb[1:3, 1:2]</code> extracts the first three rows and the first two columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">glimpse</span>(rb[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RecordBatch
3 rows x 2 columns
$ strs &lt;string&gt; "hello", "amazing", "and"
$ ints  &lt;int32&gt; 1, NA, 2</code></pre>
</div>
</div>
<p>The structure of a Record Batch is shown below. In addition to the three Arrays specifying the columns, it includes an explicit Schema object containing relevant metadata:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/record_batch.png" class="img-fluid"></p>
<p>Record Batches are a fundamental unit for data interchange in Arrow, but are not typically used for data analysis. The reason for this is that the constituent Arrays that store columns in a Record Batch are immutable: they cannot be modified or extended without creating a new object.<sup>6</sup> When data arrive sequentially Record Batches can be inconvenient, because you can’t concatenate them. For that reason Tables are usually more practical…</p>
<p>So let’s turn to Tables next. From the user perspective a Table is very similar to a Record Batch but the constituent parts are Chunked Arrays. Chunked Arrays are flexible wrappers enclosing one or more Arrays.<sup>7</sup> This makes it possible to concatenate tables. To quickly illustrate this, let’s first convert the <code>rb</code> Record Batch to a Table using <code>arrow_table()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(rb)</span></code></pre></div>
</div>
<p>Now we create a second Table with the same column names and types, again using <code>arrow_table()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">df2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;">strs =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"love"</span>, <span class="st" style="color: #20794D;">"you"</span>), </span>
<span id="cb7-3">  <span class="at" style="color: #657422;">ints =</span> <span class="fu" style="color: #4758AB;">c</span>(5L, 0L, 0L),</span>
<span id="cb7-4">  <span class="at" style="color: #657422;">dbls =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">7.1</span>, <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb7-5">)</span></code></pre></div>
</div>
<p>We can concatenate these using <code>concat_tables()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">concat_tables</span>(df1, df2)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">glimpse</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
8 rows x 3 columns
$ strs &lt;string&gt; "hello", "amazing", "and", "cruel", "world", "I", "love", "you"
$ ints  &lt;int32&gt; 1, NA, 2, 4, 8, 5, 0, 0
$ dbls &lt;double&gt; 1.1, 3.2, 0.2, NA, 11.0, 7.1, -0.1, 2.0</code></pre>
</div>
</div>
<p>The structure of this Table object is similar to the structure of the Record Batch object I showed earlier, but the columns are Chunked Arrays rather than simple Arrays:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/table.png" class="img-fluid"> You can see this if we print out a single column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">df<span class="sc" style="color: #5E5E5E;">$</span>strs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
&lt;string&gt;
[
  [
    "hello",
    "amazing",
    "and",
    "cruel",
    "world"
  ],
  [
    "I",
    "love",
    "you"
  ]
]</code></pre>
</div>
</div>
<p>There’s a visual separation there between the different chunks, used to indicated where the boundaries between individual Arrays are. In practice though you actually don’t have to care about this because it’s not semantically meaningful. It’s there for purely technical reasons.</p>
<p>But all this is background. So let’s move on, shall we?</p>
<p><br></p>
<div class="column-screen">
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/subdivision_08_1708.png" class="img-fluid"></p>
</div>
</section>
<section id="so-datasets" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="so-datasets">So… Datasets?</h2>
<p>Okay, what about Datasets? Like Record Batch and Table objects, a Dataset is used to represent tabular data. At an abstract level, a Dataset can be viewed as an object comprised of rows and columns, and just like Record Batches and Tables, it contains an explicit Schema that specifies the name and data type associated with each column.</p>
<p>However, where Tables and Record Batches are data explicitly represented in-memory, a Dataset is not. Instead, a Dataset is an abstraction that refers to data stored on-disk in one or more files. Reading the data takes place only as needed, and only when a query is executed against the data. In this respect Arrow Datasets are a very different kind of object to Arrow Tables, but the arrow package is written in a way that the dplyr commands used to analyze Tables can also be applied to Datasets.</p>
<p><br></p>
<div class="column-screen">
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/subdivision_08_1715.png" class="img-fluid"></p>
</div>
</section>
<section id="what-is-a-dataset-on-disk" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-is-a-dataset-on-disk">What is a Dataset on-disk?</h2>
<p>Reduced to its simplest form, the on-disk structure of a Dataset is simply a collection of data files, each storing one subset of the data. These subsets are sometimes referred to as “fragments”, and the partitioning process is sometimes referred to as “sharding”. To illustrate how this works, I’ll write a multi-file dataset to disk manually, without using any of the Arrow Dataset functionality to do the work. I’ll keep it deliberately simple and use three small data frames, each containing one subset of the data we want to store:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">df_a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">5</span>), <span class="at" style="color: #657422;">subset =</span> <span class="st" style="color: #20794D;">"a"</span>)</span>
<span id="cb12-2">df_b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">6</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">5</span>), <span class="at" style="color: #657422;">subset =</span> <span class="st" style="color: #20794D;">"b"</span>)</span>
<span id="cb12-3">df_c <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">id =</span> <span class="dv" style="color: #AD0000;">11</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">5</span>), <span class="at" style="color: #657422;">subset =</span> <span class="st" style="color: #20794D;">"c"</span>)</span></code></pre></div>
</div>
<p>Our intention is that each of the data frames should be stored in a separate data file. As you can see, this is a quite structured partitioning: all data where <code>subset = "a"</code> belong to one file, all data where <code>subset = "b"</code> belong to another file, and all data where <code>subset = "c"</code> belong to the third file.<sup>8</sup></p>
<p>The first step is to define and create a folder that will hold all the files:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">ds_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"mini-dataset"</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">dir.create</span>(ds_dir)</span></code></pre></div>
</div>
<p>The next step is to manually create a “Hive-style”<sup>9</sup> folder structure:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">ds_dir_a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(ds_dir, <span class="st" style="color: #20794D;">"subset=a"</span>)</span>
<span id="cb14-2">ds_dir_b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(ds_dir, <span class="st" style="color: #20794D;">"subset=b"</span>)</span>
<span id="cb14-3">ds_dir_c <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(ds_dir, <span class="st" style="color: #20794D;">"subset=c"</span>)</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="fu" style="color: #4758AB;">dir.create</span>(ds_dir_a)</span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;">dir.create</span>(ds_dir_b)</span>
<span id="cb14-7"><span class="fu" style="color: #4758AB;">dir.create</span>(ds_dir_c)</span></code></pre></div>
</div>
<p>Notice that we have named each folder in a “key=value” format that exactly describes the subset of data that will be written into that folder. This naming structure is the essence of Hive-style partitions.</p>
<p>Now that we have the folders, we’ll use <code>write_parquet()</code> to create a single <a href="https://parquet.apache.org">parquet file</a><sup>10</sup> for each of the three subsets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">write_parquet</span>(df_a, <span class="fu" style="color: #4758AB;">file.path</span>(ds_dir_a, <span class="st" style="color: #20794D;">"part-0.parquet"</span>))</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">write_parquet</span>(df_b, <span class="fu" style="color: #4758AB;">file.path</span>(ds_dir_b, <span class="st" style="color: #20794D;">"part-0.parquet"</span>))</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;">write_parquet</span>(df_c, <span class="fu" style="color: #4758AB;">file.path</span>(ds_dir_c, <span class="st" style="color: #20794D;">"part-0.parquet"</span>))</span></code></pre></div>
</div>
<p>If I’d wanted to, I could have further subdivided the dataset. A folder can contain multiple files (<code>part-0.parquet</code>, <code>part-1.parquet</code>, etc) if we would like it to, though there’s no point whatsoever in doing that with such a tiny dataset. Similarly, there is no requirement to name the files <code>part-0.parquet</code> this way at all: it would have been fine to call these files <code>subset-a.parquet</code>, <code>subset-b.parquet</code>, and <code>subset-c.parquet</code> if I’d wanted to do that. I only chose <code>part-0.parquet</code> because that’s the default filename that the <code>write_dataset()</code> function in the arrow package generates!</p>
<p>Along the same lines, it isn’t <em>necessary</em> to use Hive-style partitions to use Arrow Datasets. The default behaviour of <code>write_dataset()</code> is to construct Hive-style partitions, and the default in <code>open_dataset()</code> is to look for Hive-style partitions, but it isn’t required.</p>
<p>In any case, I’ve created an on-disk parquet Dataset using Hive-style partitioning. My Dataset is defined by these files:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">list.files</span>(ds_dir, <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "subset=a/part-0.parquet" "subset=b/part-0.parquet"
[3] "subset=c/part-0.parquet"</code></pre>
</div>
</div>
<p>This is exciting, right? I mean, I’m excited. How could anyone not be completely enthralled by this thrilling exposition?</p>
<p>Aaaaanyway…. to verify that everything has worked, I’ll now try to open the data with <code>open_dataset()</code> and call <code>glimpse()</code> to inspect its contents:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">ds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_dataset</span>(ds_dir)</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">glimpse</span>(ds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FileSystemDataset with 3 Parquet files
15 rows x 3 columns
$ id      &lt;int32&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
$ value  &lt;double&gt; -0.08458607, 0.84040013, -0.46348277, -0.55083500, 0.73604043,…
$ subset &lt;string&gt; "a", "a", "a", "a", "a", "b", "b", "b", "b", "b", "c", "c", "c…
Call `print()` for full schema details</code></pre>
</div>
</div>
<p>As you can see, the <code>ds</code> Dataset object aggregates the three separate data files. In fact, in this particular case the Dataset is so small that values from all three files appear in the output of <code>glimpse()</code>.</p>
<p>Now, it’s pretty obvious that I wouldn’t use this workflow in my everyday life. Manually writing individual files like this is tiresome, especially when the exact same dataset can be created with the following command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">ds <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;">group_by</span>(subset) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">write_dataset</span>(<span class="st" style="color: #20794D;">"mini-dataset"</span>)</span></code></pre></div>
</div>
<p>As an aside, even if <code>ds</code> happens to refer to an on-disk Dataset that is larger than memory, and you’re just wanting to rewrite it with a different file structure, this pipeline should still work without any risk of an out-of-memory error. This is thanks to the Dataset backpressure functionality<sup>11</sup> in which the reader will back off and slow down if the writer has fallen too far behind and the memory cache is filling up. Or something like that. Look, I almost managed to make myself care about the details, okay?</p>
<p><br></p>
<div class="column-screen">
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/subdivision_08_1730.png" class="img-fluid"></p>
</div>
</section>
<section id="whats-stored-in-memory-by-the-dataset" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="whats-stored-in-memory-by-the-dataset">What’s stored in-memory by the Dataset?</h2>
<p>Assuming I have any readers left at this point in the post, I know what you’re all thinking:</p>
<blockquote class="blockquote">
<p>Yes okay Danielle that’s fine, I get it, a Dataset is just a bunch of files on disk. But actually I already knew that. There has to be <em>something</em> in-memory though right? What’s that thing? Tell me about that.</p>
</blockquote>
<p>First off, rude. I was getting to it! Second, yes you are totally right. Sorry. So okay, in the last section I created this the <code>ds</code> object. Like most objects created by the arrow package, it’s an R6 object with a bunch of fields and methods that are used to wrap bindings to the corresponding Arrow C++ dark magic… sorry, um, methods. Anyway, for our purposes there are two things of importance: the <code>ds</code> object has an active binding specifying the Schema of the Dataset, and another one specifying the paths to all the files. That’s pretty much it. Paths to these files are stored in an active binding <code>ds$files</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">ds<span class="sc" style="color: #5E5E5E;">$</span>files </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/danielle/GitHub/sites/quarto-blog/posts/2022-11-30_unpacking-arrow-datasets/mini-dataset/subset=a/part-0.parquet"
[2] "/home/danielle/GitHub/sites/quarto-blog/posts/2022-11-30_unpacking-arrow-datasets/mini-dataset/subset=b/part-0.parquet"
[3] "/home/danielle/GitHub/sites/quarto-blog/posts/2022-11-30_unpacking-arrow-datasets/mini-dataset/subset=c/part-0.parquet"</code></pre>
</div>
</div>
<p>The Schema is stored as <code>ds$schema</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">ds<span class="sc" style="color: #5E5E5E;">$</span>schema</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Schema
id: int32
value: double
subset: string

See $metadata for additional Schema metadata</code></pre>
</div>
</div>
<p>By default this Schema is inferred by <code>open_dataset()</code> by inspecting the first file only, though it is possible to construct a unified schema after inspecting all files. To do this, set <code>unify_schemas = TRUE</code> when calling <code>open_dataset()</code>. It is also possible to use the <code>schema</code> argument to <code>open_dataset()</code> to specify the Schema explicitly (see the <code>schema()</code> function for details).</p>
<p>In any case, in most situations I think it’s reasonable to use this as the mental model of what the <code>ds</code> object contains:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/dataset.png" class="img-fluid"></p>
<p><br></p>
<div class="column-screen">
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/subdivision_08_1707.png" class="img-fluid"></p>
</div>
</section>
<section id="how-does-a-dataset-query-work" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how-does-a-dataset-query-work">How does a Dataset query work?</h2>
<p>Hm. So if the Dataset object<sup>12</sup> is essentially nothing more than a Schema and a list of files, what happens at the time a query has to be evaluated? At some point the data (or at least some of it) do have to be read into memory in order to perform the compute operations! I mean, consider the following dplyr pipeline:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">ds <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;">filter</span>(value <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">new_value =</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">*</span> value)) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;">select</span>(id, subset, new_value) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;">collect</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id subset new_value
1  2      a        84
2  5      a        74
3 12      c        29
4 13      c        42
5 15      c         7</code></pre>
</div>
</div>
<p>At some point in making this happen, data are loaded and computations are performed. At the user level we don’t really think about it much: the dplyr bindings supplied by the arrow package provide us with an abstraction layer for Datasets that completely mask this aspect of the process. That’s super cool because honestly I don’t care enough to spend my time on that sort of thing, but I also find myself curious… what happens when we strip the abstraction away? How would we do this analysis without these abstractions?</p>
<p>When querying a Dataset, we need a strategy for reading data: this is coordinated by a <a href="https://arrow.apache.org/docs/r/reference/Scanner.html">Scanner</a> object constructed for the specific Dataset and the specific query. When analyzing a Dataset using the dplyr interface you never need to construct a Scanner manually, but for explanatory purposes I’ll create one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">scan <span class="ot" style="color: #003B4F;">&lt;-</span> Scanner<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="at" style="color: #657422;">dataset =</span> ds)</span></code></pre></div>
</div>
<p>Calling the <code>ToTable()</code> method will materialise the Dataset (on-disk) as a Table (in-memory):<sup>13</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">scan<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">ToTable</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
15 rows x 3 columns
$id &lt;int32&gt;
$value &lt;double&gt;
$subset &lt;string&gt;

See $metadata for additional Schema metadata</code></pre>
</div>
</div>
<p>You can see that this has returned 15 rows (i.e., the whole dataset). If we want to reproduce the behaviour of the dplyr pipeline using the low-level Dataset interface by creating a new scan by specifying the <code>filter</code> and <code>projection</code> arguments to <code>Scanner$create()</code>. The <code>filter</code> argument is used to modify the rows that are returned by the Scanner, and the <code>projection</code> argument is used to modify the columns. These arguments take <a href="https://arrow.apache.org/docs/r/reference/Expression.html">Arrow Expressions</a> as inputs, which is yet another topic I’ll try to write more about one of these days.</p>
<p>Anyway, the scanner defined below mimics the dplyr pipeline shown above,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">scan <span class="ot" style="color: #003B4F;">&lt;-</span> Scanner<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(</span>
<span id="cb30-2">  <span class="at" style="color: #657422;">dataset =</span> ds, </span>
<span id="cb30-3">  <span class="at" style="color: #657422;">filter =</span> Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">field_ref</span>(<span class="st" style="color: #20794D;">"value"</span>) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb30-4">  <span class="at" style="color: #657422;">projection =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb30-5">    <span class="at" style="color: #657422;">id =</span> Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">field_ref</span>(<span class="st" style="color: #20794D;">"id"</span>),</span>
<span id="cb30-6">    <span class="at" style="color: #657422;">subset =</span> Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">field_ref</span>(<span class="st" style="color: #20794D;">"subset"</span>),</span>
<span id="cb30-7">    <span class="at" style="color: #657422;">new_value =</span> Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="st" style="color: #20794D;">"round"</span>, <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">*</span> Expression<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">field_ref</span>(<span class="st" style="color: #20794D;">"value"</span>))</span>
<span id="cb30-8">  )</span>
<span id="cb30-9">)</span></code></pre></div>
</div>
<p>We can check this by calling <code>scan$ToTable()</code> and then converting the result to a data frame so that we get a pretty print out:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">scan<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">ToTable</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id subset new_value
1  2      a        84
2  5      a        74
3 12      c        29
4 13      c        42
5 15      c         7</code></pre>
</div>
</div>
<p>Yep, that looks about right.</p>
<p>We can dig a little deeper though. To get a better sense of what happens when the query executes, what I’ll call <code>scan$ScanBatches()</code>. Much like the <code>ToTable()</code> method, the <code>ScanBatches()</code> method executes the query separately against each of the files, but it returns a list of Record Batches, one for each file. If we convert each one of those Record Batches to a data frame individually, we get this as a result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">scan<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">ScanBatches</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">lapply</span>(as.data.frame)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
  id subset new_value
1  2      a        84
2  5      a        74

[[2]]
[1] id        subset    new_value
&lt;0 rows&gt; (or 0-length row.names)

[[3]]
  id subset new_value
1 12      c        29
2 13      c        42
3 15      c         7</code></pre>
</div>
</div>
<p>This version of the result helps you see each part of the Dataset at work in the query. When you pass a query to a Dataset, each file is processed in a separate thread<sup>14</sup> and Record Batches will be added as they are returned. The key point here is that Datasets have no notion of row order: if you want the results returned in a particular order you must sort them explicitly.</p>
<p>A second point to make about the the scanning process is that under the hood, Arrow keeps track of memory usage and doesn’t try to read too many files at once. It will also make use of whatever information it has about the file contents to avoid reading files that it doesn’t have to read: if I filter on <code>subset != "a"</code> then the Scanner will ensure that the files in the corresponding folder are never even read.<sup>15</sup></p>
<p>Okay, so now let’s go back to the dplyr query we made earlier, but use <code>compute()</code> to return a Table rather use <code>collect()</code> to return a data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">tbl <span class="ot" style="color: #003B4F;">&lt;-</span> ds <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;">filter</span>(value <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">new_value =</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">*</span> value)) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;">select</span>(id, subset, new_value) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb35-5">  <span class="fu" style="color: #4758AB;">compute</span>()</span></code></pre></div>
</div>
<p>This Table object has been created by concatenating three Record Batches, one for each of the three data files. As a consequence of this, the Chunked Array that defines a column of the Table has the same partitioning structure present in the data files:<sup>16</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">tbl<span class="sc" style="color: #5E5E5E;">$</span>subset</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
&lt;string&gt;
[
  [],
  [
    "a",
    "a"
  ],
  [
    "c",
    "c",
    "c"
  ]
]</code></pre>
</div>
</div>
<p><br></p>
<div class="column-screen">
<p><img src="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/subdivision_08_1797.png" class="img-fluid"></p>
</div>
</section>
<section id="what-was-the-point" class="level2">
<h2 class="anchored" data-anchor-id="what-was-the-point">What was the point?</h2>
<p>Does any of this matter? Well. That depends, I suppose. If you’re looking to analyse a Dataset using R, you don’t really need to know much of this. Frankly you probably don’t need to know any of it. But also there’s something uncomfortable about using tools when you don’t quite know what they’re doing. It makes me happier when I know just a little bit more than I actually need to know. More importantly, it matters in the sense that it <em>works</em>. Using Datasets leads to shockingly fast performance on data that would not normally be amenable to analysis with R. Which… yeah, that does matter quite a bit!</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Unbelievably, there are people out there who will start talking about predicate pushdown and not even give a girl a heads up? Rude. You don’t see me starting conversations at the pub about metric axiom violations in human similarity judgment do you? Well, okay, you might. But that’s not the point!↩︎</p></li>
<li id="fn2"><p>Okay, <em>now</em> I’m a bit sorry.↩︎</p></li>
<li id="fn3"><p>Or indeed, “any”.↩︎</p></li>
<li id="fn4"><p>For the purposes of this post we are going to pretend that Arrays behave like R vectors, which… they sort of do as long as you don’t try to push at the analogy too hard.↩︎</p></li>
<li id="fn5"><p>The Schema is the way Arrow formalises the metadata for rectangular data structures. I’m not going to dive into the details here: it’s enough for our purposes to recognise that it’s basically a list of variable names and their data types.↩︎</p></li>
<li id="fn6"><p>I mean, this is where you start asking all sort of questions about what objects are mutable in R anyway, since we’re almost never doing modify-in-place operations. But whatever. This is not the post for that, and if you try to make me talk about that here I will cry.↩︎</p></li>
<li id="fn7"><p>Again, let’s just pretend that a Chunked Array behaves just like an R vector, except for the fact that it has these weird stitches from where we’ve sewn the individual Arrays together. It’s all a bit vivisectionist in nature, sure, but this is the mechanism that allows Chunked Arrays to behave more like R vectors than simple Arrays do. Dr Frankenstein may not have been entirely wrong on all counts, I guess.↩︎</p></li>
<li id="fn8"><p>It’s probably worth doing a tiny bit of foreshadowing here: there’s really no sense in which the files are “ordered”, right? So, logically it follows there’s no sense in which the Dataset as a whole has a total ordering of rows either, right? That’s worth keeping in mind because results don’t always come back in the same order unless you explicitly sort them. I’ll talk about this a little more later.↩︎</p></li>
<li id="fn9"><p>The name comes from Apache Hive: <a href="https://hive.apache.org">hive.apache.org</a>.↩︎</p></li>
<li id="fn10"><p>One of these days I am going to write a proper blog post on parquet files for R users, I promise. I just don’t seem to have found the time yet. Not sure where all the time goes…↩︎</p></li>
<li id="fn11"><p>As usual there is esoteric knowledge buried in the C++ documentation, in this case describing <a href="https://arrow.apache.org/docs/cpp/api/compute.html#_CPPv4N5arrow7compute19BackpressureControlE">backpressure control</a>. It’s probably ancient forbidden lore and Dumbledore is going to turn me into a hobbit or something but whatever.↩︎</p></li>
<li id="fn12"><p>Strictly speaking I am assuming a FileSystemDataset and not a more esoteric kind of Dataset like an InMemoryDataset or a UnionDataset, and I am assuming that there is a one to one mapping between files and Fragments, but honestly those assumptions are usually true in everyday data analysis and if you know these distinctions already you certainly shouldn’t be using this post to learn about Datasets now should you? So the only reason you’d be bringing this up would be to correct me on the internet to show off how smart you are and that really would be just a dick move. Just saying.↩︎</p></li>
<li id="fn13"><p>The scanning process is multi-threaded by default, but if necessary threading can be disabled by setting <code>use_threads = FALSE</code> when calling <code>Scanner$create()</code>.↩︎</p></li>
<li id="fn14"><p>Okay fine, yes you can set <code>use_threads = FALSE</code> like I said above to disable this, hush.↩︎</p></li>
<li id="fn15"><p>For files formats like Parquet that include metadata for row groups and organise data column-wise, there are additional optimisations ensuring that you don’t have to read the whole file.↩︎</p></li>
<li id="fn16"><p>Notice that there is an empty chunk in there corresponding to the file that didn’t return any hits – that’s a deliberate act of seed hacking on my part! I rigged it so that one of the data subsets just happened to have all negative numbers. I wanted to highlight the fact that a scanned file that doesn’t return any rows will still return a Record Batch with zero rows, and this will still be reflected in any Table object that gets constructed. This doesn’t really matter for any practical purpose, but I think it helps get a feel for the mechanisms involved.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Unpacking {Arrow} {Datasets}},
  date = {2022-11-30},
  url = {https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Unpacking Arrow Datasets.”</span>
November 30, 2022. <a href="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets">https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/index.html</guid>
  <pubDate>Tue, 29 Nov 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-11-30_unpacking-arrow-datasets/img/subdivision_07_1650.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Everything I know about Mastodon</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/index.html</link>
  <description><![CDATA[ 




<!-- 
cover image: https://pixabay.com/photos/woolly-mammoth-animal-prehistoric-2722882/
credit: ????
licence: free via pixabay licence
-->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Hello there fellow data science person. Have you heard rumours that a lot of folks from our community are moving to use mastodon for social networking? Are you curious, but maybe not quite sure about how to get started? Have you been thinking “twitter is a hellsite and I need to escape” a lot lately?</p>
<p>If yes, this post is for you!</p>
<p>It’s written from the time-tested pedagogical perspective of “the writer who is only one chapter ahead of her audience in the textbook”. I’ve been on mastodon for a few days, but this isn’t my first rodeo over there: I signed up for it very early on several years ago, and tried again a few years after that. This time I’m a lot more enthusiastic about it than the last two, so I’m writing a quick introductory post to help my fellow data science folks test out the waters. I sort of know what I’m doing there but not completely!</p>
<p>If you want a more detailed guide on navigating Mastodon and the fediverse, I recommend <a href="https://fedi.tips/">fedi.tips</a>. There’s a lot of answers to common questions over there, from someone who actually does know what they are doing! Alternatively you can read <a href="https://mastodon.nz/@explorergrace/109272759764872091">this thread</a> which covers a lot of the same things I’m saying here!</p>
<p>Okay, let’s dive in…</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>A mastodon, I suppose. Image freely available via <a href="https://pixabay.com/photos/woolly-mammoth-animal-prehistoric-2722882/">Pixabay</a></p>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/mammoth.jpg" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<section id="what-is-mastodon-what-is-the-fediverse" class="level2">
<h2 class="anchored" data-anchor-id="what-is-mastodon-what-is-the-fediverse">What is Mastodon? What is the fediverse?</h2>
<p>If you’re entirely new to this, your mental model of mastodon is probably something like “mastodon is an open source twitter clone”. To a first approximation that’s right, but if you want to really feel at home there you’re going to want to refine that mental model in a few ways. Mastodon is very similar to twitter in design, but there are some important differences</p>
<p>First off, mastodon is not a single application: it’s a distributed network of servers that all talk to each other using a shared protocol.<sup>1</sup> If two servers talk to each other they are said to be “federated” with one another, and the network as a whole is referred to as the “fediverse”.</p>
<p>There are many different servers out there that are independently running mastodon: these are called <strong>mastodon instances</strong>. You can sign up for an account at one or more of these servers. The most popular instance is <a href="https://mastodon.social/">mastodon.social</a>, but for reasons I’ll talk about in a moment this might not be the best choice for you! For example, my primary account is on <a href="https://fosstodon.org/">fosstodon.org</a> and my art-only account is on an instance for generative artists, <a href="https://genart.social/">genart.social</a>.</p>
<p>Fortunately, it usually doesn’t matter too much which instance you pick: the servers all communicate with each other so you can follow people on different servers, talk with them, etc, and it’s entirely possible to migrate your account from one server to another (I’ll talk about that later in the post). It’s only when you get into the details that it starts to matter!</p>
</section>
<section id="terminology-toots-and-boosts" class="level2">
<h2 class="anchored" data-anchor-id="terminology-toots-and-boosts">Terminology: Toots and boosts</h2>
<p>Posts on twitter are called “tweets” and have a 280 character limit. Posts on mastodon are called “toots” and have a 500 character limit. If you’re thinking of making a joke about “haha it’s called tooting” well fine, but there’s a pretty good chance that everyone has already heard it. Very few of us are actually that original :-)</p>
<p>Sharing someone else’s post on twitter is called a “retweet”. The mastodon equivalent is called “boosting”. One deliberate design choice on mastodon is that there is no analog of “quote retweeting”: you can either boost someone else’s toot and you can post your own. You can’t share someone else’s post to your own followers with your commentary added. This is a <a href="https://fedi.tips/how-to-use-mastodon-and-the-fediverse-basic-tips/#WhyCantIQuoteOtherPostsInMastodon">deliberate design choice to prevent people from “dunking” on each other</a>.</p>
</section>
<section id="mastodon-handles-and-tags-look-like-email-addresses" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="mastodon-handles-and-tags-look-like-email-addresses">Mastodon handles and tags look like email addresses</h2>
<p>On twitter, you simply have a username: I’m <a href="https://twitter.com/djnavarro">djnavarro</a> there, and people would tag me into a conversation by typing <strong><span class="citation" data-cites="djnavarro">@djnavarro</span></strong>.</p>
<p>On mastodon, you have to specify both your username and the server. It’s more like an email address. My primary handle on mastodon is <a href="[djnavarro@fosstodon.org](https://fosstodon.org/@djnavarro)">djnavarro@fosstodon.org</a> and people can tag me into a conversation by typing <strong><span class="citation" data-cites="djnavarro">@djnavarro</span><span class="citation" data-cites="fosstodon.org">@fosstodon.org</span></strong>.</p>
<p>It looks a little odd when you’re used to twitter, but it gets easier.</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/arawark-chen-tId6clbHnD4-unsplash.jpg" class="img-fluid"></p>

<div class="no-row-height column-margin column-container"><div class="">
<p>A handle. Image credit: <a href="https://unsplash.com/photos/tId6clbHnD4">Arawark chen</a>. Freely available via unsplash</p>
</div></div></section>
<section id="is-there-a-data-science-community-there" class="level2">
<h2 class="anchored" data-anchor-id="is-there-a-data-science-community-there">Is there a data science community there?</h2>
<p>Yes! There’s definitely a data science community there. It’s much smaller than the one on twitter and things tend to move at a slightly slower pace, but there are some advantages.</p>
<p>You can find your data science friends by searching for hashtags. R folks will quickly find other R users posting with the <strong>#rstats</strong> hashtag, but you can also find <strong>#TidyTuesday</strong> and other familiar hashtags. I’ll talk about this more later, but hashtags are much more useful (and more important) on mastodon than they are on twitter. The interface for hashtags is basically the same as twitter: you can search for them in the search box (see interface section below), hashtags are clickable links, etc.</p>
<p>Once you’ve found some people, you can find more by taking a look at who they follow and who follows them. Again, the interface for that is essentially the same as twitter: click on someone’s profile, and you’ll be able to find a list of people they follow and the people who follow them. However, what you will often finds is that these lists are incomplete: generally, the <em>follower counts</em> are accurate, but servers only publish the list of account names for accounts on that server.<sup>2</sup></p>
<p>Finally, when you’re ready to get started you can make an introduction post: all you have to do is send out a post tagged with <strong>#introduction</strong>. With any luck that will be picked up and shared with others!</p>
</section>
<section id="which-server-should-i-sign-up-on" class="level2">
<h2 class="anchored" data-anchor-id="which-server-should-i-sign-up-on">Which server should I sign up on?</h2>
<p>There’s a nicely <a href="https://fediscience.org/server-list.html">server list at fediscience.org</a> that has some commentaries. Here’s a few possibilities you might consider:</p>
<ul>
<li><p><a href="https://mastodon.social">mastodon.social</a>: The largest instance. It’s general interest, so you get a reasonably diverse audience. However it’s also the focal point so any time there’s a wave of migrations from twitter it will probably be the first one to show performance hits.</p></li>
<li><p><a href="https://fosstodon.org">fosstodon.org</a>: An instance with a focus on open source software. There are a lot of tech people on this one, which means you can watch the local timeline scroll by (more on that coming!) and see lots of random techy posts.</p></li>
<li><p><a href="https://fediscience.org">fediscience.org</a>: A science focused instance, including natural and social sciences.</p></li>
<li><p><a href="https://vis.social">vis.social</a>: Lots of cool data visualisation folks here.</p></li>
<li><p><a href="https://tech.lgbt">tech.lgbt</a>: An instance for folks who work in tech, science, academia, etc who are LGBTIQ or allies.</p></li>
</ul>
<p>For any server, you should look carefully at the server rules that will be posted on the “About” page. Each server has different policies that will affect moderation. Don’t sign up for vis.social if you want to post about NFTs (I’ll talk about NFTs later actually), and don’t join fosstodon.org if you want to post in languages other than English. Don’t join any of these servers if you want to post anti-trans content.<sup>3</sup></p>
<p>Take a little time to look around but don’t worry about the choice too much. You can move your account across servers without too much difficulty if you need to, and I’ll show you how later in the post.</p>
</section>
<section id="can-you-tell-me-about-the-web-interface" class="level2">
<h2 class="anchored" data-anchor-id="can-you-tell-me-about-the-web-interface">Can you tell me about the web interface?</h2>
<p>Okay so you’ve decided on a server, signed up for an account, and are ready to get started. Let’s take a look at the interface!</p>
<p>For the purposes of this post I’ll assume you’re looking to get started by using the web interface. There are, unsurprisingly, apps you can download onto your phone (e.g., I’m using the standard mastodon app on iOS), but I’m trying not to complicate things in this post so let’s assume you’re using your laptop and are browsing through the web interface!</p>
<p>My main account is <a href="https://fosstodon.org/@djnavarro">djnavarro@fosstodon.org</a>. In my browser I’m logged in already, so when I navigate to <a href="https://fosstodon.org">fosstodon.org</a> I’m automatically shown the logged in view. There are two versions you can choose between, the “standard view” and the “advanced view”.</p>
<p>The “standard view” interface looks pretty similar to what you’d expect from twitter. On the left you can write posts, in the middle there’s a column where your feed is shown (I’ve edited these screenshots to remove the actual posts, just so we can focus on interface), and on the right sidebar there’s a menu with various options you can click on:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/standard_view.png" class="img-fluid"></p>
<p>In a lot of cases this view will work well for you, but if you want to track hashtags – more on that later because hashtags are important! – you might find it useful to switch to the “advanced view”. To switch, click on the “Preferences” option on the right hand side, which brings up a preferences screen that looks like this:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/appearance_settings.png" class="img-fluid"></p>
<p>Click on the “Enable advanced web interface” option, like I’ve done here, and click save changes. When you then go back to mastodon, the interface will have changed to one that looks very similar to the Tweetdeck interface that a lot of folks on Twitter use:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/advanced_view.png" class="img-fluid"></p>
<p>There are more columns. As before, the left column shows an area where you can compose posts, and on the right column a menu with options is shown. Posts will appear in the “Home” column. Mentions, favourites (similar to Twitter “likes”), and boosts (similar to Twitter retweets), will be shown in the “Notifications” column.</p>
</section>
<section id="how-do-i-make-a-post" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how-do-i-make-a-post">How do I make a post?</h2>
<p>Writing a post on mastodon is similar to how you would write a post on twitter. The compose window looks like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/compose.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>You type the text you want into the box, adding hashtags, and then click the “Toot!” button (it may look different on your instance – I’ve seen the same button labelled “Post” sometimes). As you type, you’ll see the character count in the bottom right corner change to let you know how many characters you have left: you’re allowed 500 characters for a post on mastodon.</p>
<p>The nuances are important though. Those other buttons on the bottom left… those are all useful features. From left to right:</p>
<ul>
<li><p>The paperclip button: clicking this will let you attach an image. When you do, there will be an option to edit the image and (especially important!) to add alt text for accessibility purposes. Mastodon has a stronger norm about alt text than twitter: <em>always</em> add alt text. I have a section on alt text later in this post.</p></li>
<li><p>The barchart button: this will let you add a poll. Polls on mastodon work similarly to twitter, but are a bit more flexible. You can add more options and let users select multiple options.</p></li>
<li><p>The world button: this will let you set the visibility for the post. If you click on it you will see four options: “public” means everyone can view it, “unlisted” means everyone can view it but it doesn’t get indexed by discovery features (very handy in replies and threads where you don’t want everyone to be automatically shown your comment), “followers only” means only your followers can see it, and “mentioned people only” means only the people mentioned can see it. This last one is effectively how direct messages work on mastodon, which is important to note because posts aren’t end-to-end encrypted. Do not treat your mastodon direct messages as private (see later).</p></li>
<li><p>The “CW” button: This is used to attach content warnings to your post. Use this button! It’s important. I cannot stress this enough: the content warning button is right there, and it is considered extremely poor form in the fediverse to force your followers to look at content they might not want to see. There is a whole section on this later, but remember that mastodon is not twitter – people will mute you or choose not to share your post if you don’t use content warnings appropriately. In fact, if you consistently boost posts that don’t have content warnings when they should, people may unfollow you also.</p></li>
<li><p>The “EN” button: This is used to specify the language in which the post is written. Clicking on it will show you a dropdown list you can use to select the language.</p></li>
</ul>
<p>Try to use these features: it makes a difference!</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Posts. Image credit: <a href="https://unsplash.com/photos/8Zs5H6CnYJo">Kristina Tripkovic</a>. Freely available via unsplash</p>
</div></div><p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/kristina-tripkovic-8Zs5H6CnYJo-unsplash.jpg" class="img-fluid"></p>
</section>
<section id="why-are-hashtags-so-important" class="level2">
<h2 class="anchored" data-anchor-id="why-are-hashtags-so-important">Why are hashtags so important?</h2>
<p>Hashtags play a much more important role on mastodon than they do on twitter. There’s no analog of the twitter algorithm scanning post content to determine what to show people. If you want your post to be discovered by people who aren’t following you (which, admittedly, isn’t always the case), make sure to choose the appropriate hashtags. As on twitter <strong>#rstats</strong> is used to specify that this is a post about R, there’s a <strong>#TidyTuesday</strong> tag used for Tidy Tuesday, etc. I post my generative art using <strong>#GenerativeArt</strong>, a general purpose generative art hashtag, and also <strong>#rtistry</strong> to specify that it’s art made with R. It’s generally considered fine – good, even! – to use several hashtags on mastodon. Tagging is your way of categorising posts for others to find…</p>
</section>
<section id="tracking-hashtags" class="level2">
<h2 class="anchored" data-anchor-id="tracking-hashtags">Tracking hashtags</h2>
<p>Speaking of which, perhaps you want to monitor a hashtag. Maybe you even want to follow the hashtag, so that every post that has that hashtag will appear in your mastodon feed. Good news, you can!</p>
<p>From what I can tell, this is something where your options might be a little different on each server. For instance, on mastodon.social you can follow a hashtag directly in the standard view: when you search for a hashtag there will be a little “follow” icon that appears that you can click on (see <a href="https://fedi.tips/how-to-use-mastodon-and-the-fediverse-advanced-tips/#FollowingHashtags">this comment on fedi.tips</a>). When you do that, posts with that hashtag will appear in your feed. However, not every server implements this: fosstodon.org doesn’t do that right now.</p>
<p>So let’s go with a method that seems to work everywhere I’ve looked. This <a href="https://mastodon.nz/@thoughtfulnz/109278289508807509">post by David Hood</a> summarises it in a single image, but I’ll go through it more slowly here…</p>
<p>First off, you’ll need to be in “advanced view” to do this. That’s the one with lots of columns that I showed earlier in the post. You can customise this view by adding columns that correspond to the hashtags you want to follow. For example, let’s say I want to follow the <strong>#rstats</strong> hashtag. The first thing I’d do is type <strong>#rstats</strong> into the search bar (in the top left corner). The results will be shown directly below the search bar, like this:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/searching_hashtag.png" class="img-fluid"></p>
<p>These are clickable links. When I click on the <strong>#rstats</strong> hashtag in the results, a new column appears… containing a chronological feed that consists of posts tagged with <strong>#rstats</strong>:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/rstats_column.png" class="img-fluid"></p>
<p>Again, in real life this won’t be empty: you’ll actually see the posts! You are now tracking <strong>#rstats</strong> on mastodon, albeit temporarily.</p>
<p>Suppose you want to make sure the column sticks around every time you open mastodon. We can “pin” the column in place. To do that, I click on the little “settings” icon at the top right of the <strong>#rstats</strong> column. It’s the one on the far right here:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/rstats_column_menu.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>When you do that, you will see a small menu that gives you the option to pin! Easy.</p>
<p>We can make our <strong>#rstats</strong> column more useful. For example, there are several hashtags I want to bundle together when following R content: <strong>#TidyTuesday</strong>, <strong>#TidyModels</strong>, and <strong>#ggplot2</strong>. I don’t want a separate column for each one, I want to group them into a single feed. Click on that little settings button again. Now you’ll see a richer menu:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/add_hashtags.png" class="img-fluid"></p>
<p>One of the options there is “include additional tags”. When I click on that, I can type in the other hashtags to track:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/multitag.png" class="img-fluid"> And now we are done! I have a feed that tracks R related content on mastodon.</p>
</section>
<section id="why-are-content-warnings-everywhere" class="level2">
<h2 class="anchored" data-anchor-id="why-are-content-warnings-everywhere">Why are content warnings everywhere?</h2>
<p>One huge – and hugely important – difference between twitter and mastodon is that mastodon has a system that allows users to mask their posts behind content warnings. Now… if you’re coming from twitter you might be thinking “oh that doesn’t apply to me I don’t post offensive content”.</p>
<p>If that’s what you’re thinking, allow me to disabuse you of that notion quickly. Content warnings are not about “hiding offensive content”, they are about being kind to your audience. This <a href="https://robot.rodeo/@mike/109270985467672999">thread by Mike McHargue</a> is a very good summary. The whole thread is good, but I’ll quote the first part here:</p>
<blockquote class="blockquote">
<p>If you’re part of the <strong>#twittermigration</strong>, it may seem strange the people use CWs so much here. But, CWs are really helpful. So much of our world is overwhelming, and feed presentation can bombard our nervous systems with triggers. CWs give people time and space to engage with that they have the resources to engage with. It gives them agency. I follow news and politics AND it’s helpful for my PTSD to have the chance to take a deep breath <em>before</em> I see a post.</p>
</blockquote>
<p>If you’re posting about politics, that should be hidden behind a content warning. If you’re posting about sexual assault, definitely use a content warning. If you’re posting about trans rights, again put it behind a content warning.</p>
<p>You should use the content warning even – or perhaps especially – when you think your post is this is an important social justice issue that other people <em>need</em> to see, because there is a really good chance that people whose lives are affected by it will be part of the audience… and yes, some of us have PTSD.</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Content warning: trans rights, sexual assault
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>I’ll give examples relevant to my own experience.</p>
<p>I get really, really angry when people post about trans rights without a content warning. Same with sexual assault. Why? Well, because I am transgender and I am frightened about the general direction the world is headed for people like me. I am not an activist and I don’t have the kind of resilience needed to constantly hear all the worst stories in the world about attacks against people like me. It’s one of the big reasons I left twitter: twitter algorithms prioritise engagement, and I cannot help but engage with this content because I am afraid. My experience on twitter is one of emotional abuse: twitter keeps showing me my worst fears and I click on them because the threats are real. I don’t appreciate it when my friends try to support me by <em>forcing me to see even more of that content</em>. For that reason, if you want to be supportive of people like me, use a content warning when posting about trans rights.</p>
<p>An even more extreme example relevant to my personal experience is sexual assault. I am a rape survivor. Every time there is a highly visible discussion about sexual assault (e.g., the Brett Kavanaugh hearings in the US, the Brittney Higgins discussions in Australia), I would get bombarded with content about rape. Over and over again. Sometimes it would trigger panic attacks and rape flashbacks.</p>
<p>When you post those things without providing me a content warning to help me make an informed choice, what you’re really telling me is that you simply don’t care if you’re forcing me to relive the experience of being raped.</p>
</div>
</div>
</div>
<p>So if you’re thinking about posting about these topics, the question of “should I attach a content warning?” isn’t a matter of “is this important?” it’s a matter of “could I be causing distress to people?” When you answer that question, don’t think about the typical case, think about that 1% of people who might be most severely affected and the reasons why.</p>
<p>Please, please, please… take content warnings seriously. Even if you’re “just posting about politics” or “venting some feelings”. It’s a kindness and courtesy to your audience.</p>
<p>Mastodon isn’t twitter.</p>
</section>
<section id="how-do-i-add-a-content-warning" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how-do-i-add-a-content-warning">How do I add a content warning?</h2>
<p>Hopefully the previous section has convinced you that you should use content warnings and err on the side of caution when deciding when to use them. Your next question is probably: how do I add a content warning?</p>
<p>Luckily, it is super easy. It’s so simple that it fits into a single toot, like <a href="https://infosec.exchange/@Em0nM4stodon/109282181601490676">this post by Em on infosec.exchange</a>. Here’s how.</p>
<ol type="1">
<li><p>In the composer box, click on the little “CW” button. This will reveal an extra title field that says “Write your warning here”.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/content_warning.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div></li>
<li><p>Write a brief but informative message in that title field. This could be something very serious like “Sexual assault discussion”, but it could also be something mild like “Spoiler alert: The Good Wife season 5” or something like “Photo with direct eye contact”. Even things like “US politics” or “Australian politics” can be helpful.</p></li>
<li><p>Write your post. (Okay you could write the post first and the content warning text after. Whatever)</p></li>
<li><p>When you post it, other users will only be shown the title field at first. If they decide they want to read, they can click on the post, and then the full text will be revealed.</p></li>
<li><p>Profit! Everybody is happy.</p></li>
</ol>
<p>Content warnings are good for everybody.</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/fleur-Ahs_MHU8y1s-unsplash.jpg" class="img-fluid"></p>

<div class="no-row-height column-margin column-container"><div class="">
<p>A warning. Image credit: <a href="https://unsplash.com/photos/Ahs_MHU8y1s">Fleur</a>. Freely available via unsplash</p>
</div></div></section>
<section id="how-can-i-make-threads" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-make-threads">How can I make threads?</h2>
<p>Making threads on mastodon is pretty similar to twitter. Just post each new toot as a reply to the previous one. Problem solved!</p>
<p>There is one subtlety to be aware of though, which is described in this <a href="https://scicomm.xyz/@quokka/109274732847484553">thread by Quokka on scicomm.xyz</a>. Remember earlier I mentioned that you can set the visibility of each post? The polite way to do a thread is set the <em>first</em> post to “public”, and then all the later ones to <em>unlisted</em>. The reason for that is that all public posts (including replies) will show up in various timelines. Usually, that’s not what you want. What you want is something where the first post reads “I have this important and exciting thing to to talk about: A thread…”, and only that first post shows up on people’s timelines. Then if they’re interested they can click on the first post and the rest of the thread will be revealed. That’s why people on mastodon usually set the first post to public and the later ones to unlisted.</p>
</section>
<section id="mastodon-favourites-vs-twitter-likes" class="level2">
<h2 class="anchored" data-anchor-id="mastodon-favourites-vs-twitter-likes">Mastodon favourites vs twitter likes</h2>
<p>Mastodon favourites (the little star under each toot) are very similar to twitter likes (the loveheart under each tweet). They aren’t identical though. The big difference is that mastodon implementation is far, far better and not deceptive.<sup>4</sup></p>
<p>On twitter, we’ve all become accustomed to the obnoxious fact that “likes” do two different things: they send a signal to the person that you liked what they said (i.e., what they’re supposed to do!), but whenever you do that it will trigger a “stochastic retweet”: some proportion of people who follow you will also see that tweet because you liked it. This is annoying because very often you actually enjoy a thing but don’t think it is appropriate to retweet.</p>
<p>This bothers me because it seems to me that twitter doesn’t respect your boundaries. The fact that I like something is not an act in which I give twitter permission to share that fact to other people. I think it’s abusive behaviour by twitter.</p>
<p>Happily, mastodon doesn’t do anything like that. Favourites don’t trigger anything. They do <em>exactly</em> the thing they claim to do: they are a mechanism by which you can communicate to the other person “hey I liked this!” So you should use favourites a lot! Show people you appreciate them!</p>
<p>Quite separate from that, if you think this is something your followers would appreciate seeing, then boost it too! The key thing is that on mastodon the two functions are separated cleanly… do both when both are appropriate, do one when one is appropriate. You are in control of your sharing behaviour here.</p>
</section>
<section id="what-are-the-local-and-federated-timelines" class="level2">
<h2 class="anchored" data-anchor-id="what-are-the-local-and-federated-timelines">What are the local and federated timelines?</h2>
<p>At some point on mastodon you will find yourself discovering the local timeline and the federated timeline. There are links to these on the right hand side of the interface. The local timeline is every public-visibility post on your server, shown chronologically. This timeline has a very different feel on different servers. On <a href="https://fosstodon.org/">fosstodon.org</a> my local timeline has a lot of people posting about tech; on <a href="https://genart.social/">genart.social</a> it shows a lot of generative art.</p>
<p>The federated timeline is slightly different: it shows all public posts from all users who are “known” to your instance. That is, it includes every user on your instance, but it also includes everyone that users on your instance follow – even if those users are on other servers. It’s not the same thing as “every user on mastodon” though. People on <a href="https://genart.social/">genart.social</a> tend to follow other artists, so there is still a local “flavour” to the posts from outside the instance: they reflect people and topics that the users on your instance are interested in.</p>
<p>These timelines are useful for discovery purposes, and they’re also a reason to think carefully about the instance you’re on. It’s easier to find tech content on a tech-focused server!</p>
</section>
<section id="how-do-i-move-my-account-to-a-new-server" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how-do-i-move-my-account-to-a-new-server">How do I move my account to a new server?</h2>
<p>So that brings me naturally to a question… what if you realise you’ve made a mistake and you want to change instances? This happens to many of us at one point or another. For instance, I initially signed up as <strong>djnavarro@mastodon.social</strong>. That wasn’t ideal for me: the server is a bit too big, it was being very slow at the time, and the content isn’t focused on things I wanted to see. So I decided I wanted to move, and become <strong>djnavarro@fosstodon.org</strong>.</p>
<p>A very nice feature of mastodon is that you can “migrate” your account, so that when you switch accounts all your followers will come along for the ride! Here’s how you do it:</p>
<p><strong>Step 1: Prepare the way</strong></p>
<ol type="1">
<li>It’s probably a good idea to post from your old account that you’re about to initiate a move. That way people will not be surprised when they find themselves following a new account (I didn’t do this… I should have. Oops!)</li>
<li>Set up your account, with the avatar, bio, etc on the new account using the same (or similar) images and descriptions on the old account: anyone who clicks through on the new account will see that it’s you!</li>
</ol>
<p><strong>Step 2: Export your follows from the old account</strong></p>
<p>When you migrate, it takes your followers across automatically. It doesn’t automatically make your new account follow everyone you were following on the old account. Luckily you don’t have to manually re-follow everyone. Instead, you export a csv file with the list of everyone you’re following at the old account, and later on you can import it as a follow list on the new one. Here’s how we export the csv at the old account:</p>
<ol type="1">
<li>Click on the “preferences” option</li>
<li>Within preferences, select “import and export”</li>
<li>On the data export page, you’ll see a list of possible csv files you can download. Download the ones you want, especially the “follows” csv.</li>
</ol>
<p><strong>Step 3: Set up alias on the new account</strong></p>
<p>Mastodon requires both accounts to authorise the move in some fashion, to prevent anyone from trying to steal other people’s accounts. First, your new account needs to signal that yes, it does wish to be an “alias” for your old account. From the new account – <strong>djnavarro@fosstodon.org</strong> for me – we need to set that up:</p>
<ol type="1">
<li>Click on the “preferences” options</li>
<li>Within preferences, select “account”</li>
<li>On the account settings page, scroll down to the bottom to the section called “moving from a different account” and click on the link “create an account alias”</li>
<li>On the account aliases page, specify the handle of your old account – e.g., <strong>djnavarro@mastodon.social</strong> in my case – and click “create alias”</li>
</ol>
<p>You’re done: the alias is set up. You may have to wait a while for this to propagate to the old account. When I moved I had to wait overnight because mastodon.social was running very slowly due to the massive spike of new users from twitter. Hopefully it won’t be that long for most people now.</p>
<p><strong>Step 4: Initiate the move from the old account</strong></p>
<p>With the new account now signalling that it is ready to be an alias for the old one, we can authorise the move from the old account. On the old account (i.e., <strong>djnavarro@mastodon.social</strong> for me) do the following:</p>
<ol type="1">
<li>Click on the “preferences” options</li>
<li>Within preferences, select “account”</li>
<li>On the account settings page, scroll down to the bottom to the section called “moving to a different account” and click on the link “configure it here”</li>
<li>On the moving accounts page, type the handle of the new account – in my case <strong>djnavarro@fosstodon.org</strong> – and enter the password for your old account to confirm. Click “move followers”.</li>
</ol>
<p>This will initiate the move. All your followers at the old account will automatically unfollow the old account and then follow the new one. It’ll take a little while and it might happen in bursts.</p>
<p><strong>Step 5: Import your follows at the new account</strong></p>
<p>The last step (optionally) is to have your new account re-follow everyone from that you were following at the old account. We can do that using the csv that you downloaded in step 2. So, again from your new account:</p>
<ol type="1">
<li>Click on the “preferences” options</li>
<li>Within preferences, select “import and export”</li>
<li>On the menu on the left, click the “import” submenu</li>
<li>On the import screen, select the import type (e.g., “following list”), click on “browse” to select the csv file you exported earlier, and then click “upload”.</li>
</ol>
<p>Your new account will now automatically follow all the accounts your old account followed.</p>
<p>With any luck, you are now successfully moved into your new account!</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/michal-balog-66NaCdBrkCs-unsplash.jpg" class="img-fluid"></p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Moving. Image credit: <a href="https://unsplash.com/photos/66NaCdBrkCs">Michal Balog</a>. Freely available via unsplash</p>
</div></div></section>
<section id="etiquette-on-alt-text" class="level2">
<h2 class="anchored" data-anchor-id="etiquette-on-alt-text">Etiquette on alt-text?</h2>
<p>On twitter, you’ve probably found that there’s some pressure and expectation to supply alt-text for your images. The norm is <a href="https://mastodon.art/@Curator/109279035107793247">much stronger on mastodon</a>: people will expect that images have alt-text, and that the alt-text be informative. Here’s a walkthrough. First I might start writing a post, and after clicking on the paperclip icon to attach an image, I have a screen that looks like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/image_post_started.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>As usual I’d write the content of my post in the composer box, but I would also click on the “edit” link in the top-right hand corner of my image. That brings up the image editing screen that looks like this:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/image_editing.png" class="img-fluid"></p>
<p>There are two things I usually do with this. On the right hand side I can drag and drop the focus circle around to help improve the image preview that gets shown to users. More importantly, on the left hand side I can write my alt-text. For some images it’s easy to come up with a good description, for others it is hard. For something like this one I’d usually aim to write a short paragraph that captures this information:</p>
<ul>
<li>this is generative art made with R</li>
<li>the title of the piece is “Gods of Salt, Stone, and Storm”</li>
<li>the palette is blue/green with a hint of white against a very dark background</li>
<li>the image is comprised of swirling patterns throughout</li>
<li>the overall impression is something akin to dark storm clouds overhead or maybe unsettled seas</li>
</ul>
<p>It’s not a perfect description, but it does capture what I think is important about the artwork.</p>
</section>
<section id="etiquette-on-nfts" class="level2">
<h2 class="anchored" data-anchor-id="etiquette-on-nfts">Etiquette on NFTs?</h2>
<p>A lot of artists on twitter, especially generative artists, like to post NFTs. It’s understandable: for generative artists, it’s the one reliable income stream they have for their art. However, you need to be very, very careful. NFTs are not well liked on the fediverse, and a lot of servers have outright bans on any form of NFT posting. For instance, you cannot post about NFTs at all on <a href="https://vis.social">vis.social</a> or <a href="https://mastodon.art">mastodon.art</a>. It is written into the server rules, so you should not sign up on those servers if that’s something you’re interested in. However, even on servers that do permit NFTs, there is often a strong suggestion that you should be polite and respect the preferences that folks outside the instance will have. For example, the generative art instance I’m on <a href="https://genart.social">genart.social</a> does not impose an outright ban on NFTs but it is discouraged, and in the rare instance that you do post NFT content, it must be behind a content warning.</p>
<p>Personally I’ve stopped even trying to make money from my art, so it doesn’t affect me: I’ve given up. I’m only bothering to mention it here because I don’t want to see generative art folks run afoul of the local norms.</p>
</section>
<section id="etiquette-on-cross-posting-from-twitter" class="level2">
<h2 class="anchored" data-anchor-id="etiquette-on-cross-posting-from-twitter">Etiquette on cross-posting from twitter?</h2>
<p>Cross-posting from twitter is another one where you have to be careful. There are tools that will let you automatically repost from one to the other, but it’s worth thinking about this from a social perspective rather than a technical one. What will people on mastodon start thinking when your mastodon feed is just a long series of posts where you’re responding to something on twitter, or retweeting something on twitter? What will they conclude when they try to reply to you and you don’t respond because you were on twitter, not mastodon? Probably what will happen is people will realise you’re not actually on mastodon at all and unfollow you. I’ve done this a few times already. I’m trying to leave twitter for a reason, and it irritates me when people who are ostensibly (but not really) on mastodon keep trying to direct me to content on there.</p>
</section>
<section id="etiquette-on-bots-and-automated-accounts" class="level2">
<h2 class="anchored" data-anchor-id="etiquette-on-bots-and-automated-accounts">Etiquette on bots and automated accounts?</h2>
<p>Bots are allowed on mastodon, but you should check the local server rules and you should make certain that the bot is marked as an automated account in the account preferences.</p>
</section>
<section id="direct-messages-and-privacy" class="level2">
<h2 class="anchored" data-anchor-id="direct-messages-and-privacy">Direct messages and privacy</h2>
<p>As a final point, a note on direct messages. Direct messages on mastodon are just regular posts whose visibility is set to include only those people tagged in that post. That’s all. This is important to recognise because – at present – posts are not transmitted with end-to-end encryption: they are “private” only in the sense that a postcard is private or an unencrypted email is private. They won’t be broadcast to anyone else, but they aren’t secured while in transit.</p>
<p>You should never send any sensitive information via mastodon.</p>
<!--------------- appendices go here ----------------->


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The most widely used protocol is called <a href="https://en.wikipedia.org/wiki/ActivityPub">ActivityPub</a>, but we don’t have to care about that here. Similarly, while mastodon is the most widely used application built on top of ActivityPub, there are others: <a href="https://pixelfed.org/">pixelfed</a> is an instagram-like application built on ActivityPub, and pixelfed servers are also considered part of the fediverse.↩︎</p></li>
<li id="fn2"><p>I’m guessing that happens to optimise bandwidth usage?↩︎</p></li>
<li id="fn3"><p>Yes there are servers where transphobia is permitted, but they aren’t common and are typically blocked at the server level because server admins just don’t want to deal with bigotry directed at their users. Weird huh?↩︎</p></li>
<li id="fn4"><p>Yes, this is something I feel very strongly about! I hate how twitter likes work.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Everything {I} Know about {Mastodon}},
  date = {2022-11-03},
  url = {https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Everything I Know about Mastodon.”</span>
November 3, 2022. <a href="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon">https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon</a>.
</div></div></section></div> ]]></description>
  <category>Mastodon</category>
  <category>Social Media</category>
  <guid>https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/index.html</guid>
  <pubDate>Wed, 02 Nov 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/img/mammoth.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Building an Arrow Flight server</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/index.html</link>
  <description><![CDATA[ 




<!-- 
cover image: https://unsplash.com/photos/aWwFbn0ZW6A
credit: Hennie Stander
licence: open via unsplash licence
-->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>This is a post about Arrow Flight. I will probably tell a whimsical anecdote to open this post. Or not. Who knows. Maybe I’ll leave the introductory paragraph like this. That would be pretty on-brand for me actually.</p>
<p><br></p>
<section id="the-what-and-why-of-arrow-flight" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-what-and-why-of-arrow-flight">The what and why of Arrow Flight</h2>
<p>The central idea behind flight is deceptively simple: it provides a standard protocol for transferring Arrow data over a network. But to understand why this is a Big Deal, you need to have a good sense of what the Arrow ecosystem is all about. For that, I found it helpful to go all the way back<sup>1</sup> to the <a href="https://arrow.apache.org/blog/2019/10/13/introducing-arrow-flight/">original announcement of flight by Wes McKinney</a>. Here’s how he explained the motivation:</p>
<blockquote class="blockquote">
<p>Our design goal for Flight is to create a new protocol for data services that uses the Arrow columnar format as both the over-the-wire data representation as well as the public API presented to developers. In doing so, we reduce or remove the serialization costs associated with data transport and increase the overall efficiency of distributed data systems. Additionally, two systems that are already using Apache Arrow for other purposes can communicate data to each other with extreme efficiency.</p>
</blockquote>
<p>To put this in context, it helps to have a little recap of how the project has grown: Arrow was originally introduced to provide an efficient and language-agnostic <a href="https://arrow.apache.org/docs/format/Columnar.html">standard for representing tabular data in-memory</a>, but as the project has grown it has necessarily expanded in scope. For example, storing data in-memory is not entirely useful if you can’t manipulate it, so Arrow now supplies a powerful <a href="https://arrow.apache.org/docs/cpp/compute.html">compute engine</a> that underpins both the <a href="https://arrow.apache.org/docs/r/index.html">arrow package in R</a> and the <a href="https://arrow.apache.org/docs/python/index.html">pyarrow library in Python</a>, and several others besides. In other words, the compute engine has been developed to solve a practical data science problem.</p>
<p>Arrow Flight evolved from a similar practical concern. It’s pretty trivial to point out that we live in a networked world now, and as consequence it is hard to avoid situations where the data to be analysed are stored on a different machine than the one that does the analysis. In my earlier posts on <a href="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/">reticulate</a> and <a href="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/">rpy2</a> I talked about how to efficiently share an Arrow data set between <em>languages</em>, but I implicitly assumed in those posts that the R process and the Python process were running on the same <em>machine</em>. The moment we have processes running on different machines, those tricks don’t work anymore!</p>
<p>Flight is designed to solve this problem. It’s not a fancypants protocol with lots of different parts. It exists for one purpose: it makes it super easy to transfer Arrow-formatted data. That’s it. It’s pretty flexible though, and you can build other stuff on top of flight, but the design of flight is deliberately simple. It’s <em>meant</em> to be pretty minimal, so you can “just use it” without having to think too hard or do any of the obnoxious implementation work yourself.</p>
<p><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/biplane.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A biplane in flight. <a href="https://pixabay.com/photos/aircraft-flight-sunset-clouds-1756149/">Image by Gerhard from Pixabay</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br></p>
<section id="prerequisites" class="level3">
<h3 class="anchored" data-anchor-id="prerequisites">Prerequisites</h3>
<p>There are a couple of prerequisites for this post. Specifically I’ll assume you have the <a href="https://arrow.apache.org/docs/r/">arrow</a> and <a href="https://rstudio.github.io/reticulate/">reticulate</a> packages installed in your R environment, and similarly that your Python environment has <a href="https://arrow.apache.org/docs/python/index.html">pyarrow</a> installed. If you’re only interested in the Python side, you probably don’t need either of the R packages, but R users will need to have the pyarrow installation because the R flight implementation builds on pyarrow.</p>
<p><br></p>
</section>
</section>
<section id="an-r-example" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="an-r-example">An R example</h2>
<p>The implementation of Arrow Flight varies a little across languages. In this post I’m going to focus on the two languages I use most – R and Python – but there’s nothing stopping you from using other languages. For example, the book <a href="https://www.packtpub.com/product/in-memory-analytics-with-apache-arrow/9781801071031">In-Memory Analytics with Apache Arrow</a> by <a href="https://twitter.com/zeroshade">Matt Topol</a> has worked examples using C++ and Go, in addition to Python.</p>
<p>For the purposes of this post I’m going to start with R because the arrow package in R exposes a “high-level” interface that will allow us to start using a flight server without having to dive deeply into how it all works. However, as we’ll see, there are some limitations to this approach – not least of which is the fact that the R implementation turns out to secretly be a Python implementation under the hood – and as the post progresses I’ll pivot to Python in order to unpack some of the lower-level functionality.</p>
<p>To do this I’ll need access to the arrow and reticulate packages, and I’ll need to make certain that the Python environment is one that has pyarrow installed. For my machine, the commands to do this look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(reticulate)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">use_miniconda</span>(<span class="st" style="color: #20794D;">"base"</span>)</span></code></pre></div>
</div>
<p>It may be a little different for you depending on your configuration. For more information on this, take a look at the <a href="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/">reticulate post</a> I wrote recently.</p>
<p><br></p>
<section id="the-flight-server" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-flight-server">The flight server</h3>
<p>Okay, so let’s get started by thinking about the simplest possible scenario for using a flight server. In this set up all we want the server to do is to act as a “cache” for Arrow tables. Clients can upload tables to the server, download tables from the server, and so on. That’s all we’re really trying to accomplish, and happily for us this use case is supported out of the box in R.</p>
<p>Here’s how it works. As I mentioned earlier, R doesn’t actually implement the flight protocol itself: it’s just a wrapper around the Python tools. What that means is the underlying flight server is actually written in Python, and if we want to start that server running from R we have to call the <a href="https://arrow.apache.org/docs/r/reference/load_flight_server.html"><code>load_flight_server()</code></a> function that will allow us access to this server from R. Conveniently, the arrow R package comes bundled with a “demo” server that already provides the server side functionality that we want, and I can import it like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">server_class <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">load_flight_server</span>(<span class="st" style="color: #20794D;">"demo_flight_server"</span>)</span></code></pre></div>
</div>
<p>When I do this, all I’ve done is obtain access to the relevant Python code. I haven’t created a server yet and I haven’t started it running either. Create an instance of the “demo server”, I call the <code>DemoFlightServer()</code> method attached to the <code>server_class</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> server_class<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">DemoFlightServer</span>(<span class="at" style="color: #657422;">port =</span> <span class="dv" style="color: #AD0000;">8089</span>)</span></code></pre></div>
</div>
<p>We have now defined a server that, once started, will run on port 8089. The <code>server</code> object has a <code>serve()</code> method that I can call to start it running:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">server<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">serve</span>()</span></code></pre></div>
</div>
<p>I’ve written a short script called <a href="./start_demo_server.R">start_demo_server.R</a> that bundles all these operations together:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>start_demo_server.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb5" data-startfrom="3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r numberLines number-lines code-with-copy"><code class="sourceCode r" style="counter-reset: source-line 2;"><span id="cb5-3"><span class="co" style="color: #5E5E5E;"># load R packages and specify the Python environment</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;">library</span>(reticulate)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;">use_miniconda</span>(<span class="st" style="color: #20794D;">"base"</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;"># load server class, create instance, start serving</span></span>
<span id="cb5-9">server_class <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">load_flight_server</span>(<span class="st" style="color: #20794D;">"demo_flight_server"</span>)</span>
<span id="cb5-10">server <span class="ot" style="color: #003B4F;">&lt;-</span> server_class<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">DemoFlightServer</span>(<span class="at" style="color: #657422;">port =</span> <span class="dv" style="color: #AD0000;">8089</span>)</span>
<span id="cb5-11">server<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">serve</span>()</span></code></pre></div>
</div>
</div>
<p>The easiest way to start a server running in its very own R process would be to execute this script – or a suitably modified version that refers to an appropriate Python environment and server port – at the terminal, which I could do like this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">Rscript</span> start_demo_server.R <span class="kw" style="color: #003B4F;">&amp;</span></span></code></pre></div>
<p>This would start an R process as a background job that creates a server and start it running. As an alternative, if you’re comfortable with using the <a href="https://callr.r-lib.org/">callr</a> package, you can use <code>callr::r_bg()</code> to create a child R process from your current one. The child process will run in the background, and we can start start the server within that R session without blocking the current one. This code will do exactly that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">r_process <span class="ot" style="color: #003B4F;">&lt;-</span> callr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">r_bg</span>(<span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb7-2">  reticulate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use_miniconda</span>(<span class="st" style="color: #20794D;">"base"</span>)  </span>
<span id="cb7-3">  demo <span class="ot" style="color: #003B4F;">&lt;-</span> arrow<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">load_flight_server</span>(<span class="st" style="color: #20794D;">"demo_flight_server"</span>)</span>
<span id="cb7-4">  server <span class="ot" style="color: #003B4F;">&lt;-</span> demo<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">DemoFlightServer</span>(<span class="at" style="color: #657422;">port =</span> <span class="dv" style="color: #AD0000;">8089</span>)</span>
<span id="cb7-5">  server<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">serve</span>()</span>
<span id="cb7-6">})</span></code></pre></div>
</div>
<p>Regardless of what method you’ve chosen, I’ll assume that the demo server is now running quietly in the background on port 8089.</p>
<p><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/hummingbird.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A hummingbird in flight. <a href="https://pixabay.com/photos/hummingbird-bird-flight-avian-1854225/">Image by Pexels from Pixabay</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br></p>
</section>
<section id="the-flight-client" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-flight-client">The flight client</h3>
<p>Now that I have this server running, I’ll define a flight client in my current R session that can interact with it. To do that, I call <a href="https://arrow.apache.org/docs/r/reference/flight_connect.html"><code>flight_connect()</code></a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">client <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">flight_connect</span>(<span class="at" style="color: #657422;">port =</span> <span class="dv" style="color: #AD0000;">8089</span>)</span></code></pre></div>
</div>
<p>Perhaps unsurprisingly, the R object <code>client</code> is a wrapper around a Python flight client. It comes with various methods that implement low-level flight operations, but I’m going to hold off talking about those for a moment because we won’t need to use the low-level interface in this initial example.</p>
<p>Let’s start by using the client to ask a simple question: what is stored on the server? The way that data sources are conceptualised in Arrow Flight is as a set of “flights”. Each individual “flight” is a data stream from which the client can download data. The precise implementation of this idea (e.g., what data structures are stored in a single flight) varies from server to server, but in both examples in this post one flight corresponds to one Arrow table.</p>
<p>To find out what flights are currently available on our server, we can call the <a href="https://arrow.apache.org/docs/r/reference/list_flights.html"><code>list_flights()</code></a> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">list_flights</span>(client)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>list()</code></pre>
</div>
</div>
<p>Hm, okay, there’s nothing there. That makes sense because I haven’t actually uploaded anything to the server yet! Okay, well, let’s suppose I want to store a copy of the <code>airquality</code> data as an Arrow table on my server. As R users are probably aware, this is a data set that comes bundled with R, but just so we’re all on the same page here’s the first few rows of the data set:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">head</span>(airquality)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Ozone Solar.R Wind Temp Month Day
1    41     190  7.4   67     5   1
2    36     118  8.0   72     5   2
3    12     149 12.6   74     5   3
4    18     313 11.5   62     5   4
5    NA      NA 14.3   56     5   5
6    28      NA 14.9   66     5   6</code></pre>
</div>
</div>
<p>This object is a regular data frame in R: it’s not an Arrow table. Strictly speaking what we want our client to do is send the Arrow table version of this data set to the server, so it will need to be converted. Happily for us, the <a href="https://arrow.apache.org/docs/r/reference/flight_put.html"><code>flight_put()</code></a> function supplied by the arrow package takes care of that conversion for us. As a result, we can cache an Arrow table copy of the data on the server with one line of code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">flight_put</span>(client, <span class="at" style="color: #657422;">data =</span> airquality, <span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"pollution_data"</span>)</span></code></pre></div>
</div>
<p>In this code, the <code>flight_put()</code> function uses the <code>client</code> object to communicate with the server. The <code>data</code> argument specifies the local copy of the data set, and the <code>path</code> argument provides the name for the data on the server. Having uploaded the data we can once again call <code>list_flights()</code>, and we get this as the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">list_flights</span>(client)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "pollution_data"</code></pre>
</div>
</div>
<p>Yay!</p>
<p>Now, just to prove to you that I’m not cheating, let’s check to make sure that there is no object called <code>pollution_data</code> stored locally within my R session:<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">pollution_data</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in eval(expr, envir, enclos): object 'pollution_data' not found</code></pre>
</div>
</div>
<p>Unsurprisingly, there is no object called <code>pollution_data</code> available in my current R session. The <code>pollution_data</code> object is stored on the server, not the client. To access that data from the client I can use the <a href="https://arrow.apache.org/docs/r/reference/flight_get.html"><code>flight_get()</code></a> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">flight_get</span>(client, <span class="st" style="color: #20794D;">"pollution_data"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
153 rows x 6 columns
$Ozone &lt;int32&gt;
$Solar.R &lt;int32&gt;
$Wind &lt;double&gt;
$Temp &lt;int32&gt;
$Month &lt;int32&gt;
$Day &lt;int32&gt;

See $metadata for additional Schema metadata</code></pre>
</div>
</div>
<p>It works!</p>
<p><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/staircase.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A flight of stairs. <a href="https://pixabay.com/photos/staircase-upwards-rails-railings-274614/">Image by Francis from Pixabay</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="unpacking-the-data-exchange-process" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="unpacking-the-data-exchange-process">Unpacking the data exchange process</h2>
<p>The example in the last section is a nice proof-of-concept. It shows that we can use R to start a flight server and use it to upload and download data. But there’s a lot that hasn’t really been explained properly here. The time has come to start digging a little deeper, so we can really get a sense of what’s going on under the hood and how this simple example can be extended. That’s our goal in this section.</p>
<p>One thing that I like about the flight functionality exposed through <code>flight_connect()</code>, <code>flight_put()</code>, <code>flight_get()</code>, etc is that it operates at a high level of abstraction. In my day-to-day data analysis work I really don’t want to spend my time thinking about low-level operations. When I tell R to “put” a data set onto the server I want this to happen with one line of code. This high level API is super useful to me on an everyday basis, but it also masks some of the details about how flight works.</p>
<p>To give you a sense of what’s being hidden, we can take a closer look at the <code>client</code> object. Here’s a list of some of the methods that are available through the object itself:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">client<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">do_put</span>()</span>
<span id="cb20-2">client<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">do_get</span>()</span>
<span id="cb20-3">client<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">do_action</span>()</span>
<span id="cb20-4">client<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">list_action</span>()</span>
<span id="cb20-5">client<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">list_flights</span>()</span>
<span id="cb20-6">client<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">get_flight_info</span>()</span></code></pre></div>
<p>Each of these methods describes a low level operation available to the flight client. More precisely, these are the actual methods prescribed by the <a href="https://arrow.apache.org/docs/format/Flight.html">Arrow Flight protocol</a>. Moreover, although I’m showing you this as an R object, in truth these are all Python methods: the R implementation of Arrow Flight is essentially a wrapper around the Python implementation. We can access these methods from R thanks to the magic of <a href="https://rstudio.github.io/reticulate/">reticulate</a>, but – to foreshadow the pivot coming in the next section – eventually we will need to start working with the underlying Python code.</p>
<p>When we look at the names of flight methods, we can see there’s (unsurprisingly) a relationship between those names and the names of the functions exposed in the high-level R interface. As you might expect, the <code>do_put()</code> method for the client is very closely related to the <code>flight_put()</code> function. However, they aren’t the same. The <code>do_put()</code> method doesn’t stream any data to the server: it merely opens a connection to the server, from which we can then stream data with subsequent commands. If calling the <code>do_put()</code> method directly, you would have to take care of the streaming yourself.<sup>3</sup> But from the user perspective it’s tiresome to write that code over and over, so the <code>flight_put()</code> function in the R interface provides a convenient high-level wrapper that abstracts over all that.</p>
<p>If you’re the analyst working with the data, this is fabulous. But if you’re looking to implement your very own flight server, you probably need to understand what these low level operations are. So that’s where we’re headed next…</p>
<p><br></p>
<section id="unpacking-flight_put" class="level3">
<h3 class="anchored" data-anchor-id="unpacking-flight_put">Unpacking flight_put()</h3>
<p>Let’s start by taking a look at what happens when we call the R function <code>flight_put()</code>. For now, we won’t write any actual code (don’t worry, that will come later!). All we want to do is think about the sequence of operations that takes place. Our goal is to transmit the data to the server, and there’s an Arrow Flight method called <code>do_put()</code> that can do this for us. However, the structure of the interaction is a little more complicated than simply calling <code>do_put()</code>. It’s a multi-step operation that unfolds as shown below:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/do_put.png" class="img-fluid"></p>
<p>The first step in the process occurs when the client calls <code>do_put()</code>, a flight method that takes two arguments: a <strong>flight descriptor</strong> object that is used to identify the specific data stream that the client wants to be sent – and later on I’ll talk what the descriptor actually looks like – and the <a href="https://arrow.apache.org/docs/r/reference/Schema.html">schema</a> for the flight data.<sup>4</sup> Setting aside the particulars of the syntax – which might be different in every language – here’s what the <code>do_put()</code> function call looks like on the client side:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">do_put(descriptor, schema)</span></code></pre></div>
<p>Passing the schema on the client side serves a particular purpose: it allows the client to create <strong>stream writer</strong> and <strong>stream reader</strong> objects that are returned to the client-side user, and are also passed along to the server. The writer object is the thing that will take care of streaming data to the server, and the reader object is responsible for reading any metadata response that the server happens to send.<sup>5</sup></p>
<p>Now let’s have a look at the server side, where the <code>do_put()</code> method expects three inputs: the flight descriptor, the writer, and the reader. So here’s the signature on the server side:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">do_put(descriptor, reader, writer)</span></code></pre></div>
<p>As long as these methods are written appropriately for both the client and the server, we now have a situation where both machines agree on the description of the data and have objects that can take care of the streaming process.</p>
<p>We now move to step two in the communication, in which the client streams the data to the server. Once the data arrive on the server side, the <code>do_put()</code> method for the server stores the data along with an appropriate descriptor, so that it can be found later. Optionally, this is followed by a third stage in which the server sends a response containing metadata to the client. In the example server I’ll build in the next section, I won’t bother with that step!</p>
<p><br></p>
</section>
<section id="unpacking-flight_get" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="unpacking-flight_get">Unpacking flight_get()</h3>
<p>Next let’s look at <code>flight_get()</code>. When I called this function earlier, it triggered two separate interactions between the client and server. First, the client calls the <code>get_flight_info()</code> method, and the server responds with some information about the data source that includes – among other things – a <strong>ticket</strong>. Again, the ticket is a particular data structure that I’ll talk more about later, but for now it’s enough to note that it’s a token that uniquely specifies which flight is requested.</p>
<p>Once in possession of this ticket, the client can call <code>do_get()</code> to request that the server send the data that matches the ticket, which the server then streams. So the whole exchange looks like this:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/do_get.png" class="img-fluid"></p>
<p>So, in the previous example when I called <code>flight_get()</code>, the process looked like this. On the client side, we used the <code>"pollution_data"</code> path to construct a descriptor object and the client used <code>get_flight_info()</code> to request that information about this “flight” from the server:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">get_flight_info(descriptor)</span></code></pre></div>
<p>On the server side, once the descriptor is received, a <strong>flight info</strong> object is constructed. The flight info object is comprised of five parts:</p>
<ul>
<li>The schema for the data stored by the flight,</li>
<li>The flight descriptor object</li>
<li>A list of one or more endpoints that specify where the data are available for streaming. Each end point includes a location from which to stream, and the associated ticket for that location</li>
<li>The total number of records (i.e.&nbsp;rows) stored</li>
<li>The total number of bytes to be streamed (i.e., the size of the data)</li>
</ul>
<p>This flight info is then returned to the client.</p>
<p>It may seem like this arrangement is overly elaborate: why does the client need this much information if only the ticket is needed to request the data? To be honest, for the simple server-client examples I’ve used in this post, this level of complexity is not really needed. However, it’s extremely useful that it’s structured like this when we want to start adopting a more sophisticated setup. One thing it allows, for example, is an arrangement where both the server and client can be distributed across multiple machines, with different endpoints streaming different subsets of the data. Matt Topol discusses some examples where this architecture is employed in <a href="https://www.packtpub.com/product/in-memory-analytics-with-apache-arrow/9781801071031">In-Memory Analytics with Apache Arrow</a>.</p>
<p>Once this flight information has been received by the client, we can extract the ticket from the relevant endpoint (there will be only one endpoint in the server I build in the next section). The client now calls:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">do_get</span>(ticket)</span></code></pre></div>
<p>The server then sends a <strong>stream reader</strong> object that the client can use to receive the stream of data from the server.</p>
<p><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/balloons.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Balloons in flight. <a href="https://pixabay.com/photos/hot-air-balloons-adventure-balloons-1867279/">Image by Pexels from Pixabay</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="a-python-example" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="a-python-example">A Python example</h2>
<p>Now that we have a basic understanding of what is happening at a lower level, we can build a flight server of our very own. To do this I’ll switch over to Python. There’s two reasons for doing this. The first reason is that R doesn’t currently have a low level implementation of flight: at the moment it relies on the Python implementation, so it’s easiest to switch completely to Python for the rest of this post.<sup>6</sup> The second reason is that Python doesn’t supply a high level API analogous to <code>flight_put()</code>, <code>flight_get()</code> etc, and instead adheres tightly to the Arrow Flight specification. That’s super helpful if you need to design a custom flight server because you get access to the all Arrow Flight functionality, but it also means you need to write a lot more code. To help make that process a little easier, I’ll walk you through how that works in Python now!</p>
<p><br></p>
<section id="a-tiny-flight-server" class="level3">
<h3 class="anchored" data-anchor-id="a-tiny-flight-server">A tiny flight server</h3>
<p>Our goal in this section is to write our own flight server in Python that does the same job as the one we saw earlier in the R example: it’s a server that allows you to cache copies of Arrow tables. To do so, we’ll start our Python script the way one usually does, with some imports:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb25" data-startfrom="3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 2;"><span id="cb25-3"><span class="im" style="color: #00769E;">import</span> pyarrow <span class="im" style="color: #00769E;">as</span> pa</span>
<span id="cb25-4"><span class="im" style="color: #00769E;">import</span> pyarrow.flight <span class="im" style="color: #00769E;">as</span> flight</span></code></pre></div>
</div>
</div>
<p>What I’ll do now is define a Python class called <code>TinyServer</code>. The job of this class is to provide server side flight methods for <code>do_get()</code>, <code>do_put()</code>, and others. We’ll be able to use this class to create specific server instances and set them running, in more or less the exact same fashion that we did previously in the R example.</p>
<p>I’ll explain the code in more detail in a moment after I’ve shown you both the server and the client, but let’s start just by looking at the code. You can find all the code in the <a href="tiny_flight.py">tiny_flight.py</a> script that accompanies this post. Here’s the complete code used to define the <code>TinyServer</code> class:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [server]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb26" data-startfrom="7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 6;"><span id="cb26-7"><span class="kw" style="color: #003B4F;">class</span> TinyServer(flight.FlightServerBase):</span>
<span id="cb26-8">  </span>
<span id="cb26-9">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, </span>
<span id="cb26-10">                 host <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'localhost'</span>, </span>
<span id="cb26-11">                 port <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5678</span>):</span>
<span id="cb26-12">        <span class="va" style="color: #111111;">self</span>.tables <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb26-13">        <span class="va" style="color: #111111;">self</span>.location <span class="op" style="color: #5E5E5E;">=</span> flight                  <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb26-14">                        .Location               <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb26-15">                        .for_grpc_tcp(host, port)</span>
<span id="cb26-16">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>.location)</span>
<span id="cb26-17">    </span>
<span id="cb26-18">    <span class="at" style="color: #657422;">@staticmethod</span>    </span>
<span id="cb26-19">    <span class="kw" style="color: #003B4F;">def</span> server_message(method, name):</span>
<span id="cb26-20">        msg <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'(server) '</span>                       \</span>
<span id="cb26-21">              <span class="op" style="color: #5E5E5E;">+</span> method                          <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb26-22">              <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">' '</span>                             \</span>
<span id="cb26-23">              <span class="op" style="color: #5E5E5E;">+</span> name.decode(<span class="st" style="color: #20794D;">'utf-8'</span>)</span>
<span id="cb26-24">        <span class="bu" style="color: null;">print</span>(msg)</span>
<span id="cb26-25">      </span>
<span id="cb26-26">    <span class="kw" style="color: #003B4F;">def</span> do_put(<span class="va" style="color: #111111;">self</span>, context, descriptor, reader, </span>
<span id="cb26-27">               writer):</span>
<span id="cb26-28">        table_name <span class="op" style="color: #5E5E5E;">=</span> descriptor.command</span>
<span id="cb26-29">        <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'do_put'</span>, table_name)</span>
<span id="cb26-30">        <span class="va" style="color: #111111;">self</span>.tables[table_name] <span class="op" style="color: #5E5E5E;">=</span> reader.read_all()</span>
<span id="cb26-31"></span>
<span id="cb26-32">    <span class="kw" style="color: #003B4F;">def</span> do_get(<span class="va" style="color: #111111;">self</span>, context, ticket):</span>
<span id="cb26-33">        table_name <span class="op" style="color: #5E5E5E;">=</span> ticket.ticket</span>
<span id="cb26-34">        <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'do_get'</span>, table_name)</span>
<span id="cb26-35">        table <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.tables[table_name]</span>
<span id="cb26-36">        <span class="cf" style="color: #003B4F;">return</span> flight.RecordBatchStream(table)</span>
<span id="cb26-37">  </span>
<span id="cb26-38">    <span class="kw" style="color: #003B4F;">def</span> flight_info(<span class="va" style="color: #111111;">self</span>, descriptor):</span>
<span id="cb26-39">        table_name <span class="op" style="color: #5E5E5E;">=</span> descriptor.command</span>
<span id="cb26-40">        table <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.tables[table_name]</span>
<span id="cb26-41"></span>
<span id="cb26-42">        ticket <span class="op" style="color: #5E5E5E;">=</span> flight.Ticket(table_name)</span>
<span id="cb26-43">        location <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.location.uri.decode(<span class="st" style="color: #20794D;">'utf-8'</span>)</span>
<span id="cb26-44">        endpoint <span class="op" style="color: #5E5E5E;">=</span> flight.FlightEndpoint(ticket,</span>
<span id="cb26-45">                                         [location])</span>
<span id="cb26-46">        </span>
<span id="cb26-47">        <span class="cf" style="color: #003B4F;">return</span> flight.FlightInfo(table.schema, </span>
<span id="cb26-48">                                 descriptor, </span>
<span id="cb26-49">                                 [endpoint], </span>
<span id="cb26-50">                                 table.num_rows,</span>
<span id="cb26-51">                                 table.nbytes)</span>
<span id="cb26-52">    </span>
<span id="cb26-53">    <span class="kw" style="color: #003B4F;">def</span> get_flight_info(<span class="va" style="color: #111111;">self</span>, context, descriptor):</span>
<span id="cb26-54">        table_name <span class="op" style="color: #5E5E5E;">=</span> descriptor.command</span>
<span id="cb26-55">        <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'get_flight_info'</span>,</span>
<span id="cb26-56">                            table_name)</span>
<span id="cb26-57">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.flight_info(descriptor)        </span>
<span id="cb26-58">        </span>
<span id="cb26-59">    <span class="kw" style="color: #003B4F;">def</span> list_flights(<span class="va" style="color: #111111;">self</span>, context, criteria):</span>
<span id="cb26-60">        <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'list_flights'</span>, <span class="st" style="color: #20794D;">b' '</span>)</span>
<span id="cb26-61">        <span class="cf" style="color: #003B4F;">for</span> table_name <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.tables.keys():</span>
<span id="cb26-62">            descriptor <span class="op" style="color: #5E5E5E;">=</span> flight                  <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb26-63">                         .FlightDescriptor       <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb26-64">                         .for_command(table_name)</span>
<span id="cb26-65">            <span class="cf" style="color: #003B4F;">yield</span> <span class="va" style="color: #111111;">self</span>.flight_info(descriptor)</span>
<span id="cb26-66"></span>
<span id="cb26-67">    <span class="kw" style="color: #003B4F;">def</span> do_action(<span class="va" style="color: #111111;">self</span>, context, action):</span>
<span id="cb26-68">        <span class="cf" style="color: #003B4F;">if</span> action.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'drop_table'</span>:</span>
<span id="cb26-69">            table_name <span class="op" style="color: #5E5E5E;">=</span> action.body.to_pybytes()</span>
<span id="cb26-70">            <span class="kw" style="color: #003B4F;">del</span> <span class="va" style="color: #111111;">self</span>.tables[table_name]</span>
<span id="cb26-71">            <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'drop_table'</span>,</span>
<span id="cb26-72">                                table_name)</span>
<span id="cb26-73"></span>
<span id="cb26-74">        <span class="cf" style="color: #003B4F;">elif</span> action.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'shutdown'</span>:</span>
<span id="cb26-75">            <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'shutdown'</span>, <span class="st" style="color: #20794D;">b' '</span>)</span>
<span id="cb26-76">            <span class="va" style="color: #111111;">self</span>.shutdown()</span>
<span id="cb26-77"></span>
<span id="cb26-78">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb26-79">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">KeyError</span>(<span class="st" style="color: #20794D;">'Unknown action </span><span class="sc" style="color: #5E5E5E;">{!r}</span><span class="st" style="color: #20794D;">'</span>.</span>
<span id="cb26-80">                           <span class="bu" style="color: null;">format</span>(action.<span class="bu" style="color: null;">type</span>))</span>
<span id="cb26-81"></span>
<span id="cb26-82">    <span class="kw" style="color: #003B4F;">def</span> list_actions(<span class="va" style="color: #111111;">self</span>, context):</span>
<span id="cb26-83">        <span class="cf" style="color: #003B4F;">return</span> [(<span class="st" style="color: #20794D;">'drop_table'</span>, <span class="st" style="color: #20794D;">'Drop table'</span>),</span>
<span id="cb26-84">                (<span class="st" style="color: #20794D;">'shutdown'</span>, <span class="st" style="color: #20794D;">'Shut down server'</span>)]</span></code></pre></div>
</div>
</div>
<p>Now, if you’re at all like me this code won’t immediately make sense. Probably you’ll skim over it, read bits of it, and <em>some</em> of it will make sense… but not all of it. There’s a couple of reasons for that. The first and most obvious reason is that it’s a big chunk of code that I haven’t explained yet! The second reason is that (in my opinion) server-side code never makes sense on its own: it only really makes sense when you can place it next to the client-side code so that you can see how the two parts fit together.<sup>7</sup> With that in mind, let’s take a quick peek at the client-side code…</p>
<p><br></p>
</section>
<section id="a-tiny-flight-client" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="a-tiny-flight-client">A tiny flight client</h3>
<p>To accompany a <code>TinyServer</code>, we’ll need a <code>TinyClient</code> that knows how to talk to it. Happily for us, it’s easier to define the client than to define the server, so the source code that defines the <code>TinyClient</code> class is considerably shorter:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [client]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb27" data-startfrom="87" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 86;"><span id="cb27-87"><span class="kw" style="color: #003B4F;">class</span> TinyClient:</span>
<span id="cb27-88"></span>
<span id="cb27-89">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, host <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'localhost'</span>, port <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5678</span>):</span>
<span id="cb27-90">        <span class="va" style="color: #111111;">self</span>.location <span class="op" style="color: #5E5E5E;">=</span> flight                      <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb27-91">                        .Location                   <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb27-92">                        .for_grpc_tcp(host, port)</span>
<span id="cb27-93">        <span class="va" style="color: #111111;">self</span>.connection <span class="op" style="color: #5E5E5E;">=</span> flight.<span class="ex" style="color: null;">connect</span>(<span class="va" style="color: #111111;">self</span>.location)</span>
<span id="cb27-94">        <span class="va" style="color: #111111;">self</span>.connection.wait_for_available()</span>
<span id="cb27-95"></span>
<span id="cb27-96">    <span class="kw" style="color: #003B4F;">def</span> put_table(<span class="va" style="color: #111111;">self</span>, name, table):</span>
<span id="cb27-97">        table_name <span class="op" style="color: #5E5E5E;">=</span> name.encode(<span class="st" style="color: #20794D;">'utf8'</span>)</span>
<span id="cb27-98">        descriptor <span class="op" style="color: #5E5E5E;">=</span> flight                         <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb27-99">                     .FlightDescriptor              <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb27-100">                     .for_command(table_name)</span>
<span id="cb27-101">        writer, reader <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>                       <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb27-102">                         .connection                <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb27-103">                         .do_put(descriptor,</span>
<span id="cb27-104">                                 table.schema)</span>
<span id="cb27-105">        writer.write(table)</span>
<span id="cb27-106">        writer.close()</span>
<span id="cb27-107">      </span>
<span id="cb27-108">    <span class="kw" style="color: #003B4F;">def</span> get_table(<span class="va" style="color: #111111;">self</span>, name):</span>
<span id="cb27-109">        table_name <span class="op" style="color: #5E5E5E;">=</span> name.encode(<span class="st" style="color: #20794D;">'utf8'</span>)</span>
<span id="cb27-110">        ticket <span class="op" style="color: #5E5E5E;">=</span> flight.Ticket(table_name)</span>
<span id="cb27-111">        reader <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.connection.do_get(ticket)</span>
<span id="cb27-112">        <span class="cf" style="color: #003B4F;">return</span> reader.read_all()</span>
<span id="cb27-113">    </span>
<span id="cb27-114">    <span class="kw" style="color: #003B4F;">def</span> list_tables(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb27-115">        names <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb27-116">        <span class="cf" style="color: #003B4F;">for</span> flight <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.connection.list_flights():</span>
<span id="cb27-117">            table_name <span class="op" style="color: #5E5E5E;">=</span> flight.descriptor.command</span>
<span id="cb27-118">            names.append(table_name.decode(<span class="st" style="color: #20794D;">'utf-8'</span>))</span>
<span id="cb27-119">        <span class="cf" style="color: #003B4F;">return</span> names</span>
<span id="cb27-120">    </span>
<span id="cb27-121">    <span class="kw" style="color: #003B4F;">def</span> drop_table(<span class="va" style="color: #111111;">self</span>, name):</span>
<span id="cb27-122">        table_name <span class="op" style="color: #5E5E5E;">=</span> name.encode(<span class="st" style="color: #20794D;">'utf8'</span>)</span>
<span id="cb27-123">        drop <span class="op" style="color: #5E5E5E;">=</span> flight.Action(<span class="st" style="color: #20794D;">'drop_table'</span>, table_name) </span>
<span id="cb27-124">        <span class="va" style="color: #111111;">self</span>.connection.do_action(drop)</span></code></pre></div>
</div>
</div>
<p>These two classes are designed to work in concert: the <code>do_put()</code> method for <code>TinyServer</code> is aligned with the <code>do_put()</code> method for <code>TinyClient</code>,<sup>8</sup> and the <code>put_table()</code> function I wrote on the client side is a convenient high-level wrapper that manages the whole “put a table on the server” interaction without requiring the user to do anything other than write a single line of code. That’s the reason I started by showing you all the source code for both parts before explaining any of the specific methods: in the next few sections I’ll walk you through the code, placing the relevant snippets from the server code and the client code next to each other so you can more clearly see how they relate to each other.</p>
<p><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/kite.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A kite in flight. <a href="https://pixabay.com/photos/child-boy-dragon-dragon-flight-2887483/">Image by Anja from Pixabay</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br></p>
</section>
<section id="initialisation" class="level3">
<h3 class="anchored" data-anchor-id="initialisation">Initialisation</h3>
<p>Let’s start by looking at what happens when the server and client are initialised. When a new <code>TinyServer</code> or <code>TinyClient</code> object is created, the <code>__init__</code> function is called:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [server]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb28" data-startfrom="7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 6;"><span id="cb28-7"><span class="kw" style="color: #003B4F;">class</span> TinyServer(flight.FlightServerBase):</span>
<span id="cb28-8">  </span>
<span id="cb28-9">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, </span>
<span id="cb28-10">                 host <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'localhost'</span>, </span>
<span id="cb28-11">                 port <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5678</span>):</span>
<span id="cb28-12">        <span class="va" style="color: #111111;">self</span>.tables <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb28-13">        <span class="va" style="color: #111111;">self</span>.location <span class="op" style="color: #5E5E5E;">=</span> flight                  <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-14">                        .Location               <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb28-15">                        .for_grpc_tcp(host, port)</span>
<span id="cb28-16">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>.location)</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [client]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb29" data-startfrom="87" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 86;"><span id="cb29-87"><span class="kw" style="color: #003B4F;">class</span> TinyClient:</span>
<span id="cb29-88"></span>
<span id="cb29-89">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, host <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'localhost'</span>, port <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5678</span>):</span>
<span id="cb29-90">        <span class="va" style="color: #111111;">self</span>.location <span class="op" style="color: #5E5E5E;">=</span> flight                      <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb29-91">                        .Location                   <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb29-92">                        .for_grpc_tcp(host, port)</span>
<span id="cb29-93">        <span class="va" style="color: #111111;">self</span>.connection <span class="op" style="color: #5E5E5E;">=</span> flight.<span class="ex" style="color: null;">connect</span>(<span class="va" style="color: #111111;">self</span>.location)</span>
<span id="cb29-94">        <span class="va" style="color: #111111;">self</span>.connection.wait_for_available()</span></code></pre></div>
</div>
</div>
<p>Some things to notice here. At start up, the server and client both call the <code>flight.Location.for_grpc_tcp()</code> function to generate a <a href="https://arrow.apache.org/docs/python/generated/pyarrow.flight.Location.html">Location</a> object used to specify the address of the server:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">loc <span class="op" style="color: #5E5E5E;">=</span> flight.Location.for_grpc_tcp(<span class="st" style="color: #20794D;">'localhost'</span>, <span class="dv" style="color: #AD0000;">5678</span>)</span>
<span id="cb30-2"><span class="bu" style="color: null;">print</span>(loc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Location b'grpc+tcp://localhost:5678'&gt;</code></pre>
</div>
</div>
<p>The important thing in this output is the server address. The <code>localhost:5678</code> part indicates that the server is running locally on port 5678, and the <code>grpc+tcp://</code> part tells us what communication protocols are being used. For this server, those protocols are <a href="https://grpc.io/">gRPC</a> and <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</a>. TCP is probably familiar to most data scientists since it’s one of the core protocols of the internet, but gRPC (wonderful as it is) is a little more specialised. I’m not going to talk about how gRPC works in this post, but there are some references at the end. For now, it’s sufficient to recognise that this location object does store the server address. If I’d really wanted to, I could have written code that constructs this string manually<sup>9</sup> but there’s no need to do that when the pyarrow flight module supplies built-in location classes to do this for us!</p>
<p>The rest of the code is used for initialisation. On the server side, we initialise the server object as an instance of the parent class (i.e., <a href="https://arrow.apache.org/docs/python/generated/pyarrow.flight.FlightServerBase.html">FlightServerBase</a>). On the client side, the first action is to call <code>flight.connect()</code>: this is also an initialisation action that returns an instance of the <a href="https://arrow.apache.org/docs/python/generated/pyarrow.flight.FlightClient.html">FlightClient</a> class. In other words there’s a kind of symmetry here: the <code>TinyServer</code> is built on top of the <code>FlightServerBase</code> class, and the <code>TinyClient</code> is built on top of the <code>FlightClient</code> class.<sup>10</sup></p>
<p>The other thing to notice here is the data structures set up in these initialisations. On the server side we create an empty dictionary called <code>tables</code> (referred to as <code>self.tables</code> since it belongs to the instance not the class) that the server uses to store any data sets that it is sent. On the client side, the <code>self.connection</code> object is used to represent our connection to the server: this object is an instance of the <code>FlightClient</code> class, and it comes equipped with client side methods for <code>do_put()</code>, <code>do_get()</code> etc. Finally, notice that the last action that the client takes when it is initialised is to wait for the connection to the server to be established.</p>
<p><br></p>
</section>
<section id="putting-a-table" class="level3">
<h3 class="anchored" data-anchor-id="putting-a-table">Putting a table</h3>
<p>Next, let’s take a look at the code used to place data on the server. On the server side, we have to specify the <code>do_put()</code> method. In this case, all my code does is store a copy of the data in <code>self.tables</code> and prints a little message to the server console using the <code>server_message()</code> function:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [server]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb32" data-startfrom="18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 17;"><span id="cb32-18">    <span class="at" style="color: #657422;">@staticmethod</span>    </span>
<span id="cb32-19">    <span class="kw" style="color: #003B4F;">def</span> server_message(method, name):</span>
<span id="cb32-20">        msg <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'(server) '</span>                       \</span>
<span id="cb32-21">              <span class="op" style="color: #5E5E5E;">+</span> method                          <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb32-22">              <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">' '</span>                             \</span>
<span id="cb32-23">              <span class="op" style="color: #5E5E5E;">+</span> name.decode(<span class="st" style="color: #20794D;">'utf-8'</span>)</span>
<span id="cb32-24">        <span class="bu" style="color: null;">print</span>(msg)</span>
<span id="cb32-25">      </span>
<span id="cb32-26">    <span class="kw" style="color: #003B4F;">def</span> do_put(<span class="va" style="color: #111111;">self</span>, context, descriptor, reader, </span>
<span id="cb32-27">               writer):</span>
<span id="cb32-28">        table_name <span class="op" style="color: #5E5E5E;">=</span> descriptor.command</span>
<span id="cb32-29">        <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'do_put'</span>, table_name)</span>
<span id="cb32-30">        <span class="va" style="color: #111111;">self</span>.tables[table_name] <span class="op" style="color: #5E5E5E;">=</span> reader.read_all()</span></code></pre></div>
</div>
</div>
<p>There’s a few things to comment on here. First, let’s note that the <code>server_message()</code> function isn’t very interesting for our purposes. It exists solely to print out messages,<sup>11</sup> thereby allowing the server to announce what it’s doing, but the server would work just fine without these messages. However, it does give me an opportunity to mention some things about the arguments to the various functions defined in this code:</p>
<ul>
<li><p><code>server_message()</code> is a static method – which is why it doesn’t take a <code>self</code> argument. The arguments listed in the function definition are exactly the same as the arguments that are included in function calls later.</p></li>
<li><p><code>do_put()</code> is a class method, and so it takes <code>self</code> as the first argument. As is typical for object oriented programming systems, the <code>self</code> argument in class methods is passed implicitly. It’s included in the function definition, but not in the function calls. Internally, what’s going on is that a call like <code>object.method(argument)</code> is translated to <code>Class.method(object, argument)</code> and therefore the object itself implicitly becomes the first argument.</p></li>
<li><p><code>do_put()</code> is an Arrow Flight method (as well as a Python class method), and because of that it also takes a <code>context</code> argument that, much like <code>self</code> is passed implicitly. This post isn’t the place to have that discussion – it’s too long already – but for now it suffices to note that Arrow will handle the <code>context</code> argument for us, in an analogous fashion to how Python handles self for us.</p></li>
</ul>
<p>Now that we have that sorted, let’s have a look at the part of the code that actually does the server-side work. Specifically, it’s this line in <code>do_put()</code>:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [server]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb33" data-startfrom="30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 29;"><span id="cb33-30">        <span class="va" style="color: #111111;">self</span>.tables[table_name] <span class="op" style="color: #5E5E5E;">=</span> reader.read_all()</span></code></pre></div>
</div>
</div>
<p>Let’s unpack this line one step at a time.</p>
<p>The <code>reader</code> object has been passed to the server as one of the arguments to <code>do_put()</code>, and it’s a <a href="https://arrow.apache.org/docs/python/generated/pyarrow.ipc.RecordBatchStreamReader.html">RecordBatchStreamReader</a>. That is, it’s an object capable of receiving a stream of Arrow data. When the <code>read_all()</code> method is called, it reads all record batches sent by the client and returns the final result as an Arrow table. This table is then stored in the <code>self.tables</code> dictionary.</p>
<p>Next, notice that the key against which the table is stored as the value is specified by <code>descriptor.command</code>. This part of the code also needs to be explained! What is a “descriptor” object? What is the “command” attribute of a descriptor? That’s not at all obvious from inspection. To resolve our confusion, it helps to realise that this <code>descriptor</code> object is one of the arguments to the the server-side <code>do_put()</code> function, and the code that creates this object is over on the the client side. So let’s look at the code I wrote for the client side:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [client]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb34" data-startfrom="96" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 95;"><span id="cb34-96">    <span class="kw" style="color: #003B4F;">def</span> put_table(<span class="va" style="color: #111111;">self</span>, name, table):</span>
<span id="cb34-97">        table_name <span class="op" style="color: #5E5E5E;">=</span> name.encode(<span class="st" style="color: #20794D;">'utf8'</span>)</span>
<span id="cb34-98">        descriptor <span class="op" style="color: #5E5E5E;">=</span> flight                         <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb34-99">                     .FlightDescriptor              <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb34-100">                     .for_command(table_name)</span>
<span id="cb34-101">        writer, reader <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>                       <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb34-102">                         .connection                <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb34-103">                         .do_put(descriptor,</span>
<span id="cb34-104">                                 table.schema)</span>
<span id="cb34-105">        writer.write(table)</span>
<span id="cb34-106">        writer.close()</span></code></pre></div>
</div>
</div>
<p>Here we have a <code>put_table()</code> function written in Python that does roughly the same job that the <code>flight_put()</code> function was doing for us in the R example I presented earlier. It’s a high-level wrapper function that sends a <code>do_put()</code> call to the server, streams the data across, and then stops. This line of code in this function is the one that makes the <code>do_put()</code> call:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [client]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb35" data-startfrom="101" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 100;"><span id="cb35-101">        writer, reader <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>                       <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb35-102">                         .connection                <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb35-103">                         .do_put(descriptor,</span>
<span id="cb35-104">                                 table.schema)</span></code></pre></div>
</div>
</div>
<p>Okay, so the <code>descriptor</code> on the client side is also the thing that later gets used on the server side to create the key against which the table is stored. If we look at the preceding line of code, we can see that the <code>descriptor</code> object is an instance of the <a href="https://arrow.apache.org/docs/python/generated/pyarrow.flight.FlightDescriptor.html">FlightDescriptor</a> class. So let’s actually step into the Python console and run the commands required to create a flight descriptor object:<sup>12</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">table_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">b'name-of-data'</span></span>
<span id="cb36-2">descriptor <span class="op" style="color: #5E5E5E;">=</span> flight.FlightDescriptor.for_command(table_name)</span>
<span id="cb36-3"><span class="bu" style="color: null;">print</span>(descriptor)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;FlightDescriptor command: b'name-of-data'&gt;</code></pre>
</div>
</div>
<p>Perhaps unsurprisingly, the <code>command</code> attribute is in fact the (byte encoded) string that we used to specify the <code>name</code>. In other words, once we strip back all the layers here it turns out that the server stores the data set using the name that the client gave it!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">descriptor.command</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>b'name-of-data'</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="getting-a-table" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="getting-a-table">Getting a table</h3>
<p>Next, let’s have a look at the code used to get data from the server. Just like last time, I’ll put the relevant sections from the server code and the client side code side by side:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [server]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb40" data-startfrom="32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 31;"><span id="cb40-32">    <span class="kw" style="color: #003B4F;">def</span> do_get(<span class="va" style="color: #111111;">self</span>, context, ticket):</span>
<span id="cb40-33">        table_name <span class="op" style="color: #5E5E5E;">=</span> ticket.ticket</span>
<span id="cb40-34">        <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'do_get'</span>, table_name)</span>
<span id="cb40-35">        table <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.tables[table_name]</span>
<span id="cb40-36">        <span class="cf" style="color: #003B4F;">return</span> flight.RecordBatchStream(table)</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [client]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb41" data-startfrom="108" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 107;"><span id="cb41-108">    <span class="kw" style="color: #003B4F;">def</span> get_table(<span class="va" style="color: #111111;">self</span>, name):</span>
<span id="cb41-109">        table_name <span class="op" style="color: #5E5E5E;">=</span> name.encode(<span class="st" style="color: #20794D;">'utf8'</span>)</span>
<span id="cb41-110">        ticket <span class="op" style="color: #5E5E5E;">=</span> flight.Ticket(table_name)</span>
<span id="cb41-111">        reader <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.connection.do_get(ticket)</span>
<span id="cb41-112">        <span class="cf" style="color: #003B4F;">return</span> reader.read_all()</span></code></pre></div>
</div>
</div>
<p>On the client side, the <code>get_table()</code> helper function that I’ve written does two things. First it creates a <a href="https://arrow.apache.org/docs/python/generated/pyarrow.flight.Ticket.html">Ticket</a> object from the <code>name</code> of the data table to be retrieved. It then calls the <code>do_get()</code> flight method to communicate with the server. Then, using the <code>reader</code> object returned by <code>do_get()</code>, it streams the data from the server. The server side code is the mirror image: when the ticket is received, it uses this ticket to retrieve the specific <code>table</code> from <code>self.tables</code>, and returns a stream.</p>
<p>Looking at these two code extracts side by side we can see that the ticket object returned client-side by <code>flight.Ticket()</code> gets used server-side to retrieve the requested table. So we should take a look at what happens here. What we hope to see is that this ticket produces the same key used to store the data originally: that is, when the server specifies a storage key with <code>table_name = ticket.ticket</code> in the <code>do_get()</code> method, it should match the key created by <code>do_put()</code> when <code>table_name = descriptor.command</code> was executed.</p>
<p>Let’s verify that this is true!</p>
<p>Since I already have a <code>table_name</code> object lying around from earlier, let’s run that line of code shall we?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">ticket <span class="op" style="color: #5E5E5E;">=</span> flight.Ticket(table_name)</span>
<span id="cb42-2"><span class="bu" style="color: null;">print</span>(ticket)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Ticket b'name-of-data'&gt;</code></pre>
</div>
</div>
<p>That looks promising. If we take a peek at <code>ticket.ticket</code>, we see that – yet again – under the hood the ticket is just an alias for the name of the data set:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">ticket.ticket</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>b'name-of-data'</code></pre>
</div>
</div>
<p>Well that’s a relief. In the server-side code, the <code>descriptor.command</code> object and the <code>ticket.ticket</code> object both produce the correct key used to index a table.</p>
<p><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/boarding-pass.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Boarding a flight. <a href="https://pixabay.com/photos/travel-airport-boarding-pass-5219496/">Image by Joshua Woroniecki from Pixabay</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br></p>
</section>
<section id="getting-information" class="level3">
<h3 class="anchored" data-anchor-id="getting-information">Getting information</h3>
<p>Our journey through the source code continues. On the client side I’ve written a function called <code>list_tables()</code> that returns the names of all tables stored on the server. Here’s what that looks like:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [client]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb46" data-startfrom="114" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 113;"><span id="cb46-114">    <span class="kw" style="color: #003B4F;">def</span> list_tables(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb46-115">        names <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb46-116">        <span class="cf" style="color: #003B4F;">for</span> flight <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.connection.list_flights():</span>
<span id="cb46-117">            table_name <span class="op" style="color: #5E5E5E;">=</span> flight.descriptor.command</span>
<span id="cb46-118">            names.append(table_name.decode(<span class="st" style="color: #20794D;">'utf-8'</span>))</span>
<span id="cb46-119">        <span class="cf" style="color: #003B4F;">return</span> names</span></code></pre></div>
</div>
</div>
<p>The key part of this function is the call to <code>self.connection.list_flights()</code>. That’s where the client contacts the server and requests information. Everything else in the function is there to extract the one piece of information (the name of the table) that we’re interested in and return it to the user.</p>
<p>Pivoting over to the server code, there are two flight methods that are relevant here. The <code>get_flight_info()</code> function is a flight method that returns information about a single flight – where, in this case, there’s a one-to-one mapping between flights and tables – and the <code>list_flights()</code> method can be used to retrieve information about all flights stored on the server:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [server]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb47" data-startfrom="53" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 52;"><span id="cb47-53">    <span class="kw" style="color: #003B4F;">def</span> get_flight_info(<span class="va" style="color: #111111;">self</span>, context, descriptor):</span>
<span id="cb47-54">        table_name <span class="op" style="color: #5E5E5E;">=</span> descriptor.command</span>
<span id="cb47-55">        <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'get_flight_info'</span>,</span>
<span id="cb47-56">                            table_name)</span>
<span id="cb47-57">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.flight_info(descriptor)        </span>
<span id="cb47-58">        </span>
<span id="cb47-59">    <span class="kw" style="color: #003B4F;">def</span> list_flights(<span class="va" style="color: #111111;">self</span>, context, criteria):</span>
<span id="cb47-60">        <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'list_flights'</span>, <span class="st" style="color: #20794D;">b' '</span>)</span>
<span id="cb47-61">        <span class="cf" style="color: #003B4F;">for</span> table_name <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.tables.keys():</span>
<span id="cb47-62">            descriptor <span class="op" style="color: #5E5E5E;">=</span> flight                  <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb47-63">                         .FlightDescriptor       <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb47-64">                         .for_command(table_name)</span>
<span id="cb47-65">            <span class="cf" style="color: #003B4F;">yield</span> <span class="va" style="color: #111111;">self</span>.flight_info(descriptor)</span></code></pre></div>
</div>
</div>
<p>There’s two things to comment on here. First, note that the <code>list_flight()</code> method iterates<sup>13</sup> over all the stored keys in the <code>tables</code> dictionary, uses the key to construct a flight descriptor, and then calls the <code>flight_info()</code> helper function that I’ll explain in a moment. In contrast, the <code>get_flight_info()</code> function receives a flight descriptor directly from the client, so it’s much simpler: it just calls <code>flight_info()</code> directly.</p>
<p>Okay, so now let’s have a look at the <code>flight_info()</code> helper method. Here’s the code for that one:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [server]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb48" data-startfrom="38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 37;"><span id="cb48-38">    <span class="kw" style="color: #003B4F;">def</span> flight_info(<span class="va" style="color: #111111;">self</span>, descriptor):</span>
<span id="cb48-39">        table_name <span class="op" style="color: #5E5E5E;">=</span> descriptor.command</span>
<span id="cb48-40">        table <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.tables[table_name]</span>
<span id="cb48-41"></span>
<span id="cb48-42">        ticket <span class="op" style="color: #5E5E5E;">=</span> flight.Ticket(table_name)</span>
<span id="cb48-43">        location <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.location.uri.decode(<span class="st" style="color: #20794D;">'utf-8'</span>)</span>
<span id="cb48-44">        endpoint <span class="op" style="color: #5E5E5E;">=</span> flight.FlightEndpoint(ticket,</span>
<span id="cb48-45">                                         [location])</span>
<span id="cb48-46">        </span>
<span id="cb48-47">        <span class="cf" style="color: #003B4F;">return</span> flight.FlightInfo(table.schema, </span>
<span id="cb48-48">                                 descriptor, </span>
<span id="cb48-49">                                 [endpoint], </span>
<span id="cb48-50">                                 table.num_rows,</span>
<span id="cb48-51">                                 table.nbytes)</span></code></pre></div>
</div>
</div>
<p>Let’s start by looking at the return value. It’s a <a href="https://arrow.apache.org/docs/python/generated/pyarrow.flight.FlightInfo.html">FlightInfo</a> object and as I mentioned earlier there are five things needed to create it:</p>
<ul>
<li><code>table.schema</code> is the <a href="https://arrow.apache.org/docs/python/generated/pyarrow.Schema.html">Schema</a> for the data stored by the flight</li>
<li>The flight <code>descriptor</code> object, which was passed as input</li>
<li>A list of one or more <a href="https://arrow.apache.org/docs/python/generated/pyarrow.flight.FlightEndpoint.html">FlightEndpoint</a> objects – in this cases, <code>[endpoint]</code> is a list containing a single endpoint – that specifies where the data are available for streaming. Each endpoint includes a <code>location</code> from which to stream, and the associated <code>ticket</code> for that location</li>
<li>The total number of records can be accessed from <code>table.num_rows</code></li>
<li>The total number of bytes can be accessed from <code>table.nbytes</code></li>
</ul>
<p>Looking at the rest of the function, you can see that the list of endpoints requires a little work to construct. We need to call <code>flight.Ticket()</code> to construct a ticket object, we need to extract the server <code>location</code> that we stored when the server was initialised, and then we need to call <code>flight.Endpoint()</code> to put these things together. There’s a little more code involved, but thankfully it’s not conceptually difficult.</p>
<p><br></p>
</section>
<section id="custom-actions" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="custom-actions">Custom actions</h3>
<p>We’ve encountered (and implemented) four of the methods defined by the Arrow Flight protocol, and as we’ve seen they server different purposes. The <code>do_put()</code> and <code>do_get()</code> methods are used to stream data to and from the server.<sup>14</sup> In contrast, the <code>get_flight_info()</code> and <code>list_flights()</code> methods are used to retrieve metadata about the data stored on the server. In this example, these four methods are sufficient to provide all the core functionality. I could stop here if I absolutely wanted to. But there’s one more method I want to draw your attention to: <code>do_action()</code>. In recognition of the fact that real world applications will always need to perform custom operations that weren’t originally built into the protocol, the <code>do_action()</code> method exists to allow the client to request (and the server to perform) custom actions that you can define however you like.</p>
<p>To give you a sense of how this works, we’ll add two custom actions to our server: when the client requests a <code>'drop_table'</code> action, the corresponding table will be deleted from the server, and when the client requests a <code>'shutdown'</code> action the server will shut itself down.<sup>15</sup> Let’s take a look at the server-side code implementing this:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [server]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb49" data-startfrom="67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 66;"><span id="cb49-67">    <span class="kw" style="color: #003B4F;">def</span> do_action(<span class="va" style="color: #111111;">self</span>, context, action):</span>
<span id="cb49-68">        <span class="cf" style="color: #003B4F;">if</span> action.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'drop_table'</span>:</span>
<span id="cb49-69">            table_name <span class="op" style="color: #5E5E5E;">=</span> action.body.to_pybytes()</span>
<span id="cb49-70">            <span class="kw" style="color: #003B4F;">del</span> <span class="va" style="color: #111111;">self</span>.tables[table_name]</span>
<span id="cb49-71">            <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'drop_table'</span>,</span>
<span id="cb49-72">                                table_name)</span>
<span id="cb49-73"></span>
<span id="cb49-74">        <span class="cf" style="color: #003B4F;">elif</span> action.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'shutdown'</span>:</span>
<span id="cb49-75">            <span class="va" style="color: #111111;">self</span>.server_message(<span class="st" style="color: #20794D;">'shutdown'</span>, <span class="st" style="color: #20794D;">b' '</span>)</span>
<span id="cb49-76">            <span class="va" style="color: #111111;">self</span>.shutdown()</span>
<span id="cb49-77"></span>
<span id="cb49-78">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb49-79">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">KeyError</span>(<span class="st" style="color: #20794D;">'Unknown action </span><span class="sc" style="color: #5E5E5E;">{!r}</span><span class="st" style="color: #20794D;">'</span>.</span>
<span id="cb49-80">                           <span class="bu" style="color: null;">format</span>(action.<span class="bu" style="color: null;">type</span>))</span></code></pre></div>
</div>
</div>
<p>The <code>do_action()</code> method expects to receive an <a href="https://arrow.apache.org/docs/python/generated/pyarrow.flight.Action.html">Action</a> object as input to the <code>action</code> argument. The <code>action.type</code> attribute is where the name of the action is stored, so the code here uses if-else to decide which action to perform, or raise an error if the action type is not recognised. The code implementing the actions is pretty minimal. On a shutdown action, the server calls the <code>self.shutdown()</code> method: this is inherited from FlightServerBase, I didn’t have to implement it myself. For a drop table action, the server inspects the <code>action.body</code> argument to determine the name of the table to be dropped, and then deletes it from <code>self.tables</code>.<sup>16</sup></p>
<p>How does the client call this method? To see an example of this, let’s flip over to the client side of the code and look at the <code>drop_table()</code> function:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tiny_flight.py [client]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb50" data-startfrom="121" style="background: #f1f3f5;"><pre class="sourceCode numberSource python numberLines number-lines code-with-copy"><code class="sourceCode python" style="counter-reset: source-line 120;"><span id="cb50-121">    <span class="kw" style="color: #003B4F;">def</span> drop_table(<span class="va" style="color: #111111;">self</span>, name):</span>
<span id="cb50-122">        table_name <span class="op" style="color: #5E5E5E;">=</span> name.encode(<span class="st" style="color: #20794D;">'utf8'</span>)</span>
<span id="cb50-123">        drop <span class="op" style="color: #5E5E5E;">=</span> flight.Action(<span class="st" style="color: #20794D;">'drop_table'</span>, table_name) </span>
<span id="cb50-124">        <span class="va" style="color: #111111;">self</span>.connection.do_action(drop)</span></code></pre></div>
</div>
</div>
<p>Happily, it turns out to be simple: first we call <code>flight.Action()</code> to construct the action object itself, passing the action type and action body as arguments. Then we call the built-in <code>do_action()</code> client-side method, which as usual we can access from the <code>self.connection</code> object.</p>
<p>Voilà! We are done. The server and client are both ready to go. Let’s take them for a spin, shall we?</p>
<p><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/bumblebee.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Bee flight. <a href="https://pixabay.com/photos/bumblebee-hovering-nectar-insect-6326653/">Image by Gary Stearman from Pixabay</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br></p>
</section>
<section id="using-our-server" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="using-our-server">Using our server</h3>
<p>Let’s start with a few imports. In this demonstration I’m going to read data from csv files, so I’ll import the csv submodule from pyarrow. Obviously, I’ll also need access to the server classes, and since the <a href="tiny_flight.py">tiny_flight.py</a> script is bundled with this post I can import that too. Finally, I’m going to start the server running in its own thread, so I’ll import threading too:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="im" style="color: #00769E;">import</span> threading</span>
<span id="cb51-2"><span class="im" style="color: #00769E;">import</span> tiny_flight <span class="im" style="color: #00769E;">as</span> tiny</span>
<span id="cb51-3"><span class="im" style="color: #00769E;">from</span> pyarrow <span class="im" style="color: #00769E;">import</span> csv</span></code></pre></div>
</div>
<p>Next, I’ll initialise a server running on port 9001 and start it running in its own thread. This will turn out to be handy because when the client starts interacting with the server, we’ll see the server messages as well as the client output!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">server <span class="op" style="color: #5E5E5E;">=</span> tiny.TinyServer(port <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">9001</span>)</span>
<span id="cb52-2">thread <span class="op" style="color: #5E5E5E;">=</span> threading.Thread(target <span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">lambda</span>: server.serve(), </span>
<span id="cb52-3">                          daemon <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb52-4">thread.start()</span></code></pre></div>
</div>
<p>Now that the server is up and running, let’s instantiate a client and have it connect to the server:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">client <span class="op" style="color: #5E5E5E;">=</span> tiny.TinyClient(port <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">9001</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(server) list_flights  </code></pre>
</div>
</div>
<p>Notice the message prefixed with <code>(server)</code> here: that part of the output is generated by the server running in the thread. It’s not client-side output. We’re only seeing it here because when the client is initialised by the call to <code>flight.connect()</code>, it calls the <code>list_flights()</code> flight method, and the server prints a message using its internal <code>server_message()</code> function.</p>
<p>Okay. So far so good. Our next step is to create some Arrow tables client side. To make this simpler I have csv files containing copies of the freely-available <a href="https://rdrr.io/cran/bestglm/man/AirQuality.html">1973 New York city air quality</a> and <a href="https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/quakes">earthquakes near Fiji since 1964</a> data sets that are both bundled by the datasets R package. I’ll import them both as pyarrow tables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">fijiquakes <span class="op" style="color: #5E5E5E;">=</span> csv.read_csv(<span class="st" style="color: #20794D;">"fijiquakes.csv"</span>)</span>
<span id="cb55-2">airquality <span class="op" style="color: #5E5E5E;">=</span> csv.read_csv(<span class="st" style="color: #20794D;">"airquality.csv"</span>)</span></code></pre></div>
</div>
<p>At the moment both tables exist on the client, and we’d like to cache them on the server. We can do this by calling the <code>put_table()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">client.put_table(<span class="st" style="color: #20794D;">"fijiquakes"</span>, fijiquakes)</span>
<span id="cb56-2">client.put_table(<span class="st" style="color: #20794D;">"airquality"</span>, airquality)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(server) do_put fijiquakes
(server) do_put airquality</code></pre>
</div>
</div>
<p>Again, notice that the server prints messages which make clear that the data have arrived on the server side. Of course, the client doesn’t actually know this because my server-side code for <code>do_put()</code> doesn’t implement a server response for the client. But no matter: the client can check manually by calling <code>list_tables()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">client.list_tables()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(server) list_flights  
['fijiquakes', 'airquality']</code></pre>
</div>
</div>
<p>Here we see two lines of output: the first one is the server-side log, and the second is the output returned client-side showing that both tables exist on the server.</p>
<p>We can take this a step further, of course, by retrieving the data from the server cache. We can do that straightforwardly by calling <code>get_table()</code>, and again see that a server-side message is printed, while the table itself is returned to the client:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">client.get_table(<span class="st" style="color: #20794D;">"fijiquakes"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(server) do_get fijiquakes
pyarrow.Table
lat: double
long: double
depth: int64
mag: double
stations: int64
----
lat: [[-20.42,-20.62,-26,-17.97,-20.42,...,-25.93,-12.28,-20.13,-17.4,-21.59]]
long: [[181.62,181.03,184.1,181.66,181.96,...,179.54,167.06,184.2,187.8,170.56]]
depth: [[562,650,42,626,649,...,470,248,244,40,165]]
mag: [[4.8,4.2,5.4,4.1,4,...,4.4,4.7,4.5,4.5,6]]
stations: [[41,15,43,19,11,...,22,35,34,14,119]]</code></pre>
</div>
</div>
<p>Now, perhaps we decided that we don’t need a cached copy of the airquality table any longer. We can ask the server to remove it by calling <code>drop_table()</code>, and we can confirm the result by calling <code>list_tables()</code> again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">client.drop_table(<span class="st" style="color: #20794D;">"airquality"</span>)</span>
<span id="cb62-2">client.list_tables()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(server) drop_table airquality
(server) list_flights  
['fijiquakes']</code></pre>
</div>
</div>
<p>Yep, that all looks right!</p>
<p><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/birds.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Birds in flight. <a href="https://pixabay.com/photos/nature-animals-bird-migratory-bird-2746726/">Image by Gerhard from Pixabay</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="where-to-next" class="level2">
<h2 class="anchored" data-anchor-id="where-to-next">Where to next?</h2>
<p>Compared to the rest of the Apache Arrow project, it’s not so easy to find tutorials and documentation about flight. It’s still a little piecemeal. With that in mind, here’s an annotated reading list that will be helpful if you want to explore flight further:</p>
<ul>
<li><p><a href="https://arrow.apache.org/blog/2019/10/13/introducing-arrow-flight/">The original announcement of flight</a> by Wes McKinney on the Apache Arrow blog gives a very good overview of the motivation for why flight was introduced.</p></li>
<li><p><a href="https://voltrondata.com/news/data-transfer-at-the-speed-of-flight/">Data transfer at the speed of flight</a> by Tom Drabas, Fernanda Foertter, and David Li. This is a blog post on the Voltron Data blog that provides a concrete example of a working flight server written in Python. The Python code I’ve discussed in this post is an elaboration of the content in that post. It’s a good starting point.</p></li>
<li><p><a href="https://voltrondata.com/news/apache-arrow-flight-primer/">Apache Arrow Flight: A Primer</a> by David Li and Tom Drabas. This is another blog post on the Voltron Data website. This one doesn’t have any working code for you to look at, but it provides a good summary of the technologies that Arrow Flight is built upon. It’s a little intense for novices but is pretty handy for intermediate level users who want to take a peek under the hood.</p></li>
<li><p><a href="https://arrow.apache.org/docs/python/flight.html">The Python documentation flight vignette</a> is pretty readable and goes into a moderate amount of detail, but be aware it implicitly assumes some familiarity with remote procedure calls.</p></li>
<li><p><a href="https://arrow.apache.org/cookbook/py/flight.html">The Python cookbook for Arrow</a> contains the most thorough worked example I’ve seen anywhere. It’s a little dense for novice users, but it’s still the one of the most comprehensive resources I’ve seen, and the only one that talks about issues like authentication (which I have not discussed at all here!)</p></li>
<li><p><a href="https://arrow.apache.org/docs/r/articles/flight.html">The R documentation flight vignette</a> has a succinct overview of how you can use the high-level interface provided by <code>flight_put()</code>, <code>flight_get()</code>, etc. What it doesn’t do (yet?) is discuss the low-level features. At the moment you won’t find a discussion of say <code>client$do_get()</code> and how it relates to <code>flight_get()</code>.</p></li>
<li><p>Along similar lines there are some examples in the <a href="https://arrow.apache.org/cookbook/r/flight.html">R cookbook</a>, but they are also quite minimal.</p></li>
<li><p>Should you be interested in writing an Arrow Flight service in C++, the <a href="https://arrow.apache.org/docs/dev/cpp/flight.html">documentation pages for the C++ Flight implementation</a> may come in handy!</p></li>
<li><p>If you’re willing to spend some money I thoroughly recommend the chapter on Arrow flight in Matt Topol’s book <a href="https://www.packtpub.com/product/in-memory-analytics-with-apache-arrow/9781801071031">In-Memory Analytics with Apache Arrow</a>. I found it really helpful for cementing my own understanding. In addition to the worked examples in Python, C++, and Go, the chapter provides some historical context for understanding the difference between RPC frameworks and REST frameworks, and is also the only resource I’m aware of that goes into detail about how more sophisticated network architectures are supported by flight.</p></li>
<li><p>If you’re keen to understand what is happening under the hood, at some point you’re going to want to read about gRPC. The flight protocol is built on top of gRPC, and a lot of the advanced content you’ll encounter on flight doesn’t make a lot of sense until you’ve started to wrap your head around it. To that end, I found the <a href="https://grpc.io/docs/what-is-grpc/introduction/">introduction to gRPC</a> documentation really helpful. You may also want to take a look at the documentation for <a href="https://developers.google.com/protocol-buffers">protocol buffers</a> because in practice that’s doing a lot of the work for us here!</p></li>
<li><p>If you want to understand the backdrop against which all this sits, it’s also pretty handy to do a bit of digging around and reading the history around <a href="https://en.wikipedia.org/wiki/Remote_procedure_call">remote procedure call (RPC) approaches to distributed computing</a> and <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">representational state transfer (REST) approaches</a>. Even skimming the two linked Wikipedia articles was helpful for me.</p></li>
<li><p>When digging around in source code, I found it handy to take a look at these parts of the code base: source code for the <a href="https://github.com/apache/arrow/blob/master/r/inst/demo_flight_server.py">R demo server</a>, a <a href="https://github.com/apache/arrow/blob/master/python/examples/flight/server.py">Python example server</a>, and the <a href="https://github.com/apache/arrow/blob/master/python/pyarrow/_flight.pyx">pyarrow flight implementation</a>.</p></li>
<li><p>Finally, while neither one is ideal as a place to start, once I started getting the hang of what I was doing, I have found it handy to browse through the <a href="https://arrow.apache.org/docs/python/api/flight.html">Python flight API reference pages</a>, and to occasionally dip into the official <a href="https://arrow.apache.org/docs/format/Flight.html">Arrow flight RPC specification</a>. Regarding the latter, my experience was that the images showing how each of the flight methods operates were handy, and the <a href="https://arrow.apache.org/docs/format/Flight.html#protocol-buffer-definitions">comments</a> shown in the in the “protocol buffer definitions” are nice because they’re maybe the clearest verbal description of what each of the flight methods expects as input and what objects they will return.</p></li>
</ul>
<p>Happy hunting!</p>
<div class="cell">

</div>
<!--------------- appendices go here ----------------->
</section>



<div id="quarto-appendix" class="default"><section id="acknowledgements" class="level2 appendix"><h2 class="quarto-appendix-heading">Acknowledgements</h2><div class="quarto-appendix-contents">

<p>My sincere thanks to Rok Mihevc, David Li, Kae Suarez, and François Michonneau for reviewing earlier versions of this post.</p>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>All the way back to October 2019, which is like ancient history by Arrow standards. Sigh. This project moves too damned fast to keep pace with it all.↩︎</p></li>
<li id="fn2"><p>One of my favourite things about having a quarto blog is that every post is a notebook. It’s technically possible to “cheat” by including hidden code chunks that execute different code than that shown in the post, but it’s something I do very sparingly and only when there’s some weirdness involved. I’m not doing that here. When this post is rendered, it does start a new instance of the demo server in a different R session: every flight server demonstrated here is in fact running in the background so that the post renders, and server side data are all stored by those other processes. There really is no copy of the <code>pollution_data</code> object in the R session used to render this post. It’s somewhere else, as it bloody well should be.↩︎</p></li>
<li id="fn3"><p>Specifically, when the client calls the <code>do_put()</code> method, a <a href="https://arrow.apache.org/docs/r/reference/RecordBatchWriter.html">RecordBatchStreamWriter</a> object is returned. This object in turn has <code>write_batch()</code> and <code>write_table()</code> methods that can be used to stream data. It’s a bit beyond the scope of the post to talk about the details here, but if you ever find yourself needing to use this capability this is where to start!↩︎</p></li>
<li id="fn4"><p>Optionally, you can also pass a third “options” argument.↩︎</p></li>
<li id="fn5"><p>The examples in this post are simple ones where the server doesn’t actually send a response, so the reader object isn’t used for anything↩︎</p></li>
<li id="fn6"><p>As an aside, it’s not clear to me that this will remain true in the long run. There are a lot of advantages to having access to all the features of the Arrow Flight RPC specification, and if my dev skills are up to the task I may attempt to update the R bindings. No promises though :-)↩︎</p></li>
<li id="fn7"><p>If I were so inclined I’d probably point out this is the maybe the clearest illustration that we’re adopting an RPC approach to distributed computing – this is not a REST API. After all, if the server code doesn’t make sense without looking at the client code, there’s a pretty good chance you don’t meet the “uniform interface” REST criterion. This isn’t a criticism of flight, of course: there are good reasons to adopt a non-RESTful RPC approach sometimes. However, that’s beyond the scope of this post. It’s already too long as it is!↩︎</p></li>
<li id="fn8"><p>Okay fine, I’m oversimplifying a little here. Technically, the <code>TinyClient</code> object does not have a <code>do_put()</code> method: that’s actually a property of the <code>connection</code> object attached to every <code>TinyClient</code> object.↩︎</p></li>
<li id="fn9"><p>People with more experience in Python (well, more than me) would notice the importance of the <code>b''</code> notation. One thing I didn’t know about Python until recently is that it is quite explicit in specifying how strings are encoded. The <code>b''</code> notation is used to indicate that this is a “byte literal” string. To convert it to utf-8 text, it needs to be explicitly decoded. I mention this here because later on in the post I’m going to call <code>.encode()</code> and <code>.decode()</code> string methods to switch back and forth between byte literals and utf-8 strings. I’m assuming this is common knowledge among Python users, but coming from R this was a little surprising!↩︎</p></li>
<li id="fn10"><p>That said, the symmetry isn’t exact: the <code>TinyServer</code> object explicitly subclasses <code>FlightServerBase</code> and overrides several of its methods in order to provide server functionality. In contrast, <code>TinyClient</code> is not a subclass. Rather, every <code>TinyClient</code> object contains a <code>connection</code> object that is a <code>FlightClient</code> instance. The explicitly-defined methods for the <code>TinyClient</code> class internally call the methods of the <code>connection</code> object whenever the client needs to call a flight method.↩︎</p></li>
<li id="fn11"><p>As an aside, note that all the “strings” that the client and server are using to represent tickets, locations, etc are represented as byte literals. That means that the <code>name</code> argument that gets passed to <code>server_message()</code> will always be a byte literal, not utf-8 encoded. In order to print a message to the console, we need to decode the bytes into utf-8 format, which is why the code for <code>server_message()</code> uses <code>name.decode("utf-8")</code>.↩︎</p></li>
<li id="fn12"><p>In this example I’ve used the <code>for_command()</code> method to construct the flight descriptor. This isn’t the only way to do it: you can use the <code>for_path()</code> method also. I’m only mentioning this because when you look at the code used in other flight servers, you’ll sometimes see the <code>for_path()</code> method used in a similar fashion to the way I’m using <code>for_command()</code> here.↩︎</p></li>
<li id="fn13"><p>For fellow Python newbies: if you’re unsure about why <code>list_flights()</code> generates return values with <code>yield</code> rather than <code>return</code>, it’s worth taking a little time to read up on Python iterables and generators. There’s an excellent explanation on <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do">this stackoverflow question</a>↩︎</p></li>
<li id="fn14"><p>There is also a <code>do_exchange()</code> method that allows bidirectional streaming, but I’m not going to talk about it in this post↩︎</p></li>
<li id="fn15"><p>I mean yeah, in real life you might want to have some… um… authentication in place before letting an arbitrary client take these kinds of actions, but I’m not going to talk about that here!↩︎</p></li>
<li id="fn16"><p>If I were being more rigorous I’d include some input checking here, but let’s be realistic: that’s not even close to the most unsafe thing about my simple example. I cannot stress enough that this code is for explanatory purposes, it’s not production code!↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Building an {Arrow} {Flight} Server},
  date = {2022-10-18},
  url = {https://blog.djnavarro.net/posts/2022-10-18_arrow-flight},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Building an Arrow Flight Server.”</span>
October 18, 2022. <a href="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight">https://blog.djnavarro.net/posts/2022-10-18_arrow-flight</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>Networking</category>
  <category>R</category>
  <category>Python</category>
  <guid>https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/index.html</guid>
  <pubDate>Mon, 17 Oct 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-10-18_arrow-flight/img/biplane.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data transfer between Python and R with rpy2 and Apache Arrow</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/index.html</link>
  <description><![CDATA[ 




<!-- 
cover img: https://unsplash.com/photos/C4sxVxcXEQg
artist: Reuben Juarez
licence: unsplash free-to-use 
-->
<!-- 
# bash commands to build this post
conda activate continuation
export LD_LIBRARY_PATH="$(python -m rpy2.situation LD_LIBRARY_PATH)":${LD_LIBRARY_PATH}
cd ~/GitHub/sites/quarto-blog/posts/2022-09-16_arrow-and-rpy2
quarto render index.qmd --execute-daemon-restart
-->
<p>In the <a href="../../posts/2022-09-09_reticulated-arrow/">last post on this blog</a> I showed how <a href="https://arrow.apache.org/">Apache Arrow</a> makes it possible to hand over data sets from R to Python (and vice versa) without making wasteful copies of the data.</p>
<p>The solution I outlined there was to use the <a href="https://rstudio.github.io/reticulate/">reticulate</a> package to conduct the handover, and rely on Arrow tools both sides to manage the data. In one sense it’s a perfectly good solution to the problem… but it’s a solution tailor made for R users who need access to Python. When viewed from the perspective of a Python user who needs access to R, it’s a little awkward to have an R package (reticulate) governing the handover.<sup>1</sup> Perhaps we can find a more Pythonic way to approach this?</p>
<p>A solution to our problem is provided by the <a href="https://rpy2.github.io/">rpy2 library</a> that provides an interface to R from Python, and the <a href="https://rpy2.github.io/rpy2-arrow/version/main/html/index.html">rpy2-arrow extension</a> that allows it to support Arrow objects. Let’s take a look, shall we?</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/cover.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">This was the masthead image displayed atop the front page of <a href="https://en.wikipedia.org/wiki/The_Arrow_(newspaper)">The Arrow</a>, a newspaper published in Sydney between 1896 and 1936. It seems an appropriate way to start this post given that I’m talking about Apache Arrow, and I’m using a data set that lists works of fiction published in Australian newspapers in the 19th and early 20th centuries.<sup>2</sup></figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
<section id="setting-up-the-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-python-environment">Setting up the Python environment</h2>
<p>For the purposes of this post I’ll create a fresh conda environment that I’ll call “continuation”, partly because this post is a continuation of the previous one and partly because the data set I’ll use later is taken from a database of serialised fiction called <a href="https://cdhrdatasys.anu.edu.au/tobecontinued/">To Be Continued…</a>.</p>
<p>I was able install most packages I need through conda-forge, but for rpy2 and rpy2-arrow I was only able to do so from pypi so I had to use pip for that. So the code for setting up my Python environment, executed at the terminal, was as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">-n</span> continuation</span>
<span id="cb1-2"><span class="ex" style="color: null;">conda</span> install <span class="at" style="color: #657422;">-n</span> continuation pip pyarrow pandas jupyter</span>
<span id="cb1-3"><span class="ex" style="color: null;">conda</span> activate continuation</span>
<span id="cb1-4"><span class="ex" style="color: null;">pip</span> install rpy2 rpy2-arrow</span></code></pre></div>
<p>As long as I render this post with the “continuation” environment active everything works smoothly.<sup>3</sup></p>
<p><br><br></p>
</section>
<section id="introducing-rpy2" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introducing-rpy2">Introducing rpy2</h2>
<p>The purpose of the rpy2 library is to allow users to call R from Python, typically with the goal of allowing access to statistical packages distributed through <a href="https://cran.r-project.org/">CRAN</a>. I’m currently using version 3.5.4, and while this blog post won’t even come close to documenting the full power of the library, the <a href="https://rpy2.github.io/doc/v3.5.x/html/index.html#">rpy2 documentation</a> is quite extensive. To give you a bit of a flavour of it, let’s import the library:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> rpy2</span>
<span id="cb2-2">rpy2.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>'3.5.4'</code></pre>
</div>
</div>
<p>This does not in itself give us access to R. That doesn’t happen until we explicitly import either the <code>robjects</code> module (a high level interface to R) or import the <code>rinterface</code> model (a low level interface) and call <code>rinterface.initr()</code>. This post won’t cover <code>rinterface</code> at all; we can accomplish everything we need to using only the high level interface provided by <code>robjects</code>. So let’s import the module and, in doing so, start R running as a child process:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> rpy2.robjects <span class="im" style="color: #00769E;">as</span> robjects</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.2.1 (2022-06-23) 🌈</code></pre>
</div>
</div>
<p>You’ll notice that this prints a little startup message. If you’re following along at home you’ll probably see something different on your own machine: most likely you’ll see the standard R startup message here. It’s shorter in this output because I modified my <code>.Rprofile</code> to make R less chatty on start up.<sup>4</sup></p>
<p>Anyway, our next step is to load some packages. In native R code we’d use the <code>library()</code> function for this, but rpy2 provides a more Pythonic approach. Importing the packages submodule gives us access to <code>importr()</code>, which is allows us to load packages. The code below illustrates how you can expose the base R package and the utils R package (both of which come bundled with any minimal R installation) to Python:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> rpy2.robjects.packages <span class="im" style="color: #00769E;">as</span> pkgs</span>
<span id="cb7-2"></span>
<span id="cb7-3">base <span class="op" style="color: #5E5E5E;">=</span> pkgs.importr(<span class="st" style="color: #20794D;">"base"</span>)</span>
<span id="cb7-4">utils <span class="op" style="color: #5E5E5E;">=</span> pkgs.importr(<span class="st" style="color: #20794D;">"utils"</span>)</span></code></pre></div>
</div>
<p>Once we have access to utils we can call the R function <code>install.packages()</code> to install additional packages from CRAN. However, at this point we need to talk a little about how names are translated by rpy2. As every Python user would immediately notice, <code>install.packages()</code> is not a valid function name in Python: the dot is a special character and not permitted within the name of a function. In contrast, although not generally recommended in R except in special circumstances,<sup>5</sup> function names containing dots are syntactically valid in R and there are functions that use them. So how do we resolve this?</p>
<p>In most cases, the solution is straightforward: rpy2 will automatically convert dots in R to underscores in Python, and so in this instance the function name becomes <code>install_packages()</code>. For example, if I want to install the <a href="https://cran.r-project.org/package=fortunes">fortunes</a> package using rpy2, I would use the following command:<sup>6</sup></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">utils.install_packages(<span class="st" style="color: #20794D;">"fortunes"</span>)</span></code></pre></div>
<p>There are some subtleties around function name translation, however. I won’t talk about them in this post, other to mention that the documentation discusses this in the section on <a href="https://rpy2.github.io/doc/v2.9.x/html/robjects_functions.html">calling functions</a>.</p>
<p>In any case, now that I have successfully installed the fortunes package I can import it, allowing me to call the <code>fortune()</code> function:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">ftns <span class="op" style="color: #5E5E5E;">=</span> pkgs.importr(<span class="st" style="color: #20794D;">"fortunes"</span>)</span>
<span id="cb9-2">ftn7 <span class="op" style="color: #5E5E5E;">=</span> ftns.fortune(<span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb9-3"><span class="bu" style="color: null;">print</span>(ftn7)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
What we have is nice, but we need something very different.
   -- Robert Gentleman
      Statistical Computing 2003, Reisensburg (June 2003)

</code></pre>
</div>
</div>
<p>I’m rather fond of this quote, and it seems very appropriate to the spirit of what polyglot data science is all about. Whatever language or tools we’re working in, we’ve usually chosen them for good reason. But there is no tool that works all the time, nor any language that is ideal for every situation. Sometimes we need something very different, and when we do it is very helpful if our tools able to talk fluently to each other.</p>
<p>We’re now at the point that we can tackle the problem of transferring data from Python to R, but in order to do that we’ll need some data…</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/serpent.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">This was the header illustration to a story entitled “The Trail of the Serpent” by M. E. Braddon. It was published in the <em>Molong Express and Western District Advertiser</em> on 4 August 1906. The moment I saw it I knew I had to include it here. I can hardly omit a serpent reference in a Python post, now can I? That would be grossly irresponsible of me as a tech blogger. <a href="https://trove.nla.gov.au/newspaper/article/139469044">Trove article 139469044</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
<section id="about-the-data" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="about-the-data">About the data</h2>
<p>I’ve given you so many teasers about the data set for this post that it almost feels a shame to spoil it by revealing the data, but all good things must come to an end I suppose. The data I’m using are taken from the <a href="https://cdhrdatasys.anu.edu.au/tobecontinued/">To Be Continued…</a> database of fiction published in Australian newspapers during the 19th and early 20th century. Originally collected using the incredibly cool <a href="https://trove.nla.gov.au/">Trove</a> resource run by the National Library of Australia, the <em>To Be Continued…</em> data are released under a CC-BY-4.0 licence and maintained by Katherine Bode and Carol Hetherington. I’m not using the full data set here, only the metadata. In the complete database you can find full text of published pieces, and in the Trove links you can find the digitised resources from which they were sourced, but I don’t need that level of detail here. All I need is an interesting data table that I can pass around between languages. For that, the metadata alone will suffice!</p>
<p>To give you a sense of what the data set (that is, the restricted version I’m using here) looks like, let’s fire up <a href="https://pandas.pydata.org/">pandas</a> and take a peek at the structure of the table. It’s stored as a CSV file, so I’ll call <code>read_csv()</code> to import the data:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">import</span> pandas</span>
<span id="cb11-2"></span>
<span id="cb11-3">fiction <span class="op" style="color: #5E5E5E;">=</span> pandas.read_csv(<span class="st" style="color: #20794D;">"fiction.csv"</span>, low_memory <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>)</span>
<span id="cb11-4">fiction.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Trove ID</th>
      <th>Common Title</th>
      <th>Publication Title</th>
      <th>Start Date</th>
      <th>End Date</th>
      <th>Additional Info</th>
      <th>Length</th>
      <th>Curated Dataset</th>
      <th>Identified Sources</th>
      <th>Publication Source</th>
      <th>...</th>
      <th>Other Names</th>
      <th>Publication Author</th>
      <th>Gender</th>
      <th>Nationality</th>
      <th>Nationality Details</th>
      <th>Author Details</th>
      <th>Inscribed Gender</th>
      <th>Inscribed Nationality</th>
      <th>Signature</th>
      <th>Name Category</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>The Mystery of Edwin Drood</td>
      <td>The Mystery of Edwin Drood</td>
      <td>1871-03-04</td>
      <td>1871-06-03</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>Y</td>
      <td>LCVF</td>
      <td>NaN</td>
      <td>...</td>
      <td>NaN</td>
      <td>Dickens, Charles</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>LCVF</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>Attributed</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>The Mystery of Edwin Drood</td>
      <td>The Mystery of Edwin Drood</td>
      <td>1871-03-07</td>
      <td>1871-05-16</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>Y</td>
      <td>LCVF</td>
      <td>NaN</td>
      <td>...</td>
      <td>NaN</td>
      <td>Dickens, Charles</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>LCVF</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>Attributed</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Sporting Recollections in Various Countries</td>
      <td>Sporting Recollections in Various Countries</td>
      <td>1847-06-16</td>
      <td>1847-07-07</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>Y</td>
      <td>WPEDIA</td>
      <td>Sunday Times</td>
      <td>...</td>
      <td>NaN</td>
      <td>Viardot, M. Louis</td>
      <td>Male</td>
      <td>French</td>
      <td>NaN</td>
      <td>WPEDIA</td>
      <td>Male</td>
      <td>British</td>
      <td>NaN</td>
      <td>Attributed</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Brownie's Triumph</td>
      <td>The Jewels</td>
      <td>1880-05-08</td>
      <td>1880-08-14</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>Y</td>
      <td>TJW</td>
      <td>NaN</td>
      <td>...</td>
      <td>Sarah Elizabeth Forbush Downs; Downs, Mrs Geor...</td>
      <td>Unattributed</td>
      <td>Female</td>
      <td>American</td>
      <td>NaN</td>
      <td>WPEDIA</td>
      <td>Uninscribed</td>
      <td>British</td>
      <td>NaN</td>
      <td>Unattributed</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>The Forsaken Bride</td>
      <td>Abandoned</td>
      <td>1880-08-21</td>
      <td>1880-12-18</td>
      <td>Fiction. From English, American and Other Peri...</td>
      <td>0.0</td>
      <td>Y</td>
      <td>TJW</td>
      <td>NaN</td>
      <td>...</td>
      <td>Sarah Elizabeth Forbush Downs; Downs, Mrs Geor...</td>
      <td>Unattributed</td>
      <td>Female</td>
      <td>American</td>
      <td>NaN</td>
      <td>WPEDIA</td>
      <td>Uninscribed</td>
      <td>British</td>
      <td>NaN</td>
      <td>Unattributed</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 28 columns</p>
</div>
</div>
</div>
<p>Okay, that’s helpful. We can see what all the columns are and what kind of data they contain. I’m still pretty new to data science workflows in Python, but it’s not too difficult to do a little bit of data wrangling with Pandas. For instance, we can take a look at the distribution of nationalities among published authors. The table shown below counts the number of distinct publications (Trove IDs) and authors for each nationality represented in the data:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fiction[[<span class="st" style="color: #20794D;">"Nationality"</span>, <span class="st" style="color: #20794D;">"Trove ID"</span>, <span class="st" style="color: #20794D;">"Publication Author"</span>]]. <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb12-2">  groupby(<span class="st" style="color: #20794D;">"Nationality"</span>). <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb12-3">  nunique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Trove ID</th>
      <th>Publication Author</th>
    </tr>
    <tr>
      <th>Nationality</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>American</th>
      <td>3399</td>
      <td>618</td>
    </tr>
    <tr>
      <th>Australian</th>
      <td>4295</td>
      <td>757</td>
    </tr>
    <tr>
      <th>Australian/British</th>
      <td>95</td>
      <td>12</td>
    </tr>
    <tr>
      <th>Austrian</th>
      <td>3</td>
      <td>2</td>
    </tr>
    <tr>
      <th>British</th>
      <td>10182</td>
      <td>1351</td>
    </tr>
    <tr>
      <th>British/American</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>Canadian</th>
      <td>185</td>
      <td>29</td>
    </tr>
    <tr>
      <th>Dutch</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>English</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>French</th>
      <td>187</td>
      <td>64</td>
    </tr>
    <tr>
      <th>German</th>
      <td>39</td>
      <td>15</td>
    </tr>
    <tr>
      <th>Hungarian</th>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Irish</th>
      <td>63</td>
      <td>33</td>
    </tr>
    <tr>
      <th>Italian</th>
      <td>12</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Japanese</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Multiple</th>
      <td>3</td>
      <td>2</td>
    </tr>
    <tr>
      <th>New Zealand</th>
      <td>67</td>
      <td>23</td>
    </tr>
    <tr>
      <th>Polish</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Russian</th>
      <td>18</td>
      <td>13</td>
    </tr>
    <tr>
      <th>Scottish</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>South African</th>
      <td>14</td>
      <td>5</td>
    </tr>
    <tr>
      <th>Swedish</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>Swiss</th>
      <td>2</td>
      <td>1</td>
    </tr>
    <tr>
      <th>United States</th>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>Unknown</th>
      <td>13133</td>
      <td>2692</td>
    </tr>
    <tr>
      <th>Unknown, not Australian</th>
      <td>882</td>
      <td>88</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>It would not come as any surprise, at least not to anyone with a sense of Australian history, that there were far more British authors than Australian authors published in Australian newspapers during that period. I was mildly surprised to see so many American authors represented though, and I have nothing but love for the lone Italian who published 12 pieces.</p>
<p>Now that we have a sense of the data, let’s add Arrow to the mix!</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/darlington.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">An illustration from “The Lass That Loved a Miner” by J. Monk Foster. Published in <em>Australian Town and Country Journal</em>, 14 April 1894. The story features such fabulous quotes as “Presently the two dark figures slid slowly, noiselessly, along the floor towards the scattered gold dust and he canisters filled with similar precious stuff. Inch by inch, foot by foot the two thieves crept like snakes nearer and nearer to the to the treasure they coveted”. Admit it, you’re hooked already, right? <a href="https://trove.nla.gov.au/newspaper/article/71212612">Trove article 71212612</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
<section id="pandas-to-arrow-tables" class="level2">
<h2 class="anchored" data-anchor-id="pandas-to-arrow-tables">Pandas to Arrow Tables</h2>
<p>To give ourselves access to Apache Arrow from Python we’ll use the <a href="https://arrow.apache.org/docs/python/index.html">PyArrow</a> library. Our immediate goal is to convert the <code>fiction</code> data from a Pandas DataFrame to an Arrow Table. To that end, pyarrow supplies a <code>Table</code> object with a <code>from_pandas()</code> method that we can call:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">import</span> pyarrow</span>
<span id="cb13-2"></span>
<span id="cb13-3">fiction2 <span class="op" style="color: #5E5E5E;">=</span> pyarrow.Table.from_pandas(fiction)</span>
<span id="cb13-4">fiction2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>pyarrow.Table
Trove ID: int64
Common Title: string
Publication Title: string
Start Date: string
End Date: string
Additional Info: string
Length: double
Curated Dataset: string
Identified Sources: string
Publication Source: string
Newspaper ID: int64
Newspaper: string
Newspaper Common Title: string
Newspaper Location: string
Newspaper Type: string
Colony/State: string
Author ID: int64
Author: string
Other Names: string
Publication Author: string
Gender: string
Nationality: string
Nationality Details: string
Author Details: string
Inscribed Gender: string
Inscribed Nationality: string
Signature: string
Name Category : string
----
Trove ID: [[1,2,3,4,5,...,35491,35492,35493,35494,35495]]
Common Title: [["The Mystery of Edwin Drood","The Mystery of Edwin Drood","Sporting Recollections in Various Countries","Brownie's Triumph","The Forsaken Bride",...,"The Heart of Maureen","His Lawful Wife","Love's Reward","Only a Flirt","The Doctor's Protegee"]]
Publication Title: [["The Mystery of Edwin Drood","The Mystery of Edwin Drood","Sporting Recollections in Various Countries","The Jewels","Abandoned",...,"The Heart of Maureen","His Lawful Wife","Love's Reward","Only a Flirt","The Doctor's Protegee"]]
Start Date: [["1871-03-04","1871-03-07","1847-06-16","1880-05-08","1880-08-21",...,"1914-01-06","1912-10-26","1911-02-04","1916-05-06","1911-11-25"]]
End Date: [["1871-06-03","1871-05-16","1847-07-07","1880-08-14","1880-12-18",...,"1914-01-06","1912-10-26","1911-02-04","1916-05-06","1911-11-25"]]
Additional Info: [[null,null,null,null,"Fiction. From English, American and Other Periodicals",...,"Published by special arrangement. All rights reserved.","Published by special arrangement. All rights reserved.","Published by special arrangement. All rights reserved.","All  Rights Reserved","Published by special arrangement. All rights reserved."]]
Length: [[0,0,0,0,0,...,0,0,0,0,0]]
Curated Dataset: [["Y","Y","Y","Y","Y",...,"N","N","N","N","N"]]
Identified Sources: [["LCVF","LCVF","WPEDIA","TJW","TJW",...,null,null,null,null,null]]
Publication Source: [[null,null,"Sunday Times",null,null,...,null,null,null,null,null]]
...</code></pre>
</div>
</div>
<p><br></p>
<p>The <code>fiction2</code> object contains the same data as <code>fiction</code> but it is structured as an Arrow Table, and the data is stored in memory allocated by Arrow. Python itself only stores some metadata and the C++ pointer that refers to the Arrow Table. This isn’t exciting, but it will be important (and powerful!) later in a moment we transfer the data to R.</p>
<p>Speaking of which, we have arrived at the point where we get to do the fun part… seamlessly handing the reins back and forth between Python and R without needing to copy the Arrow Table itself.</p>
<p><br><br></p>
</section>
<section id="passing-tables-from-python-to-r" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="passing-tables-from-python-to-r">Passing Tables from Python to R</h2>
<p>To pass Arrow objects between Python and R, rpy2 needs a little help because it doesn’t know how to handle Arrow data structures. That’s where the <a href="https://rpy2.github.io/rpy2-arrow/version/main/html/index.html">rpy2-arrow module</a> comes in. As the documentation states:</p>
<blockquote class="blockquote">
<p>The package allows the sharing of Apache Arrow data structures (Array, ChunkedArray, Field, RecordBatch, RecordBatchReader, Table, Schema) between Python and R within the same process. The underlying C/C++ pointer is shared, meaning potentially large gain in performance compared to regular arrays or data frames shared between Python and R through the conversion rules included in rpy2.</p>
</blockquote>
<p>I won’t attempt to give a full tutorial on rpy2-arrow in this post. Instead, I’ll just show you how to use it to solve the problem at hand. Our first step is to import the conversion tools from rpy_arrow:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;">import</span> rpy2_arrow.pyarrow_rarrow <span class="im" style="color: #00769E;">as</span> pyra</span></code></pre></div>
</div>
<p>Having done that, the <code>pyarrow_table_to_r_table()</code> function allows us to pass an Arrow Table from Python to R:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">fiction3 <span class="op" style="color: #5E5E5E;">=</span> pyra.pyarrow_table_to_r_table(fiction2)</span>
<span id="cb16-2">fiction3</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>&lt;rpy2.rinterface_lib.sexp.SexpEnvironment object at 0x7f71bfb8a6c0&gt; [RTYPES.ENVSXP]</code></pre>
</div>
</div>
<p>The printed output isn’t the prettiest thing in the world, but nevertheless it does represent the object of interest. On the Python side we have <code>fiction2</code>, a data structure that points to an Arrow Table and enables various compute operations supplied through pyarrow. On the R side we have now created <code>fiction3</code>, a data structure that points to the <em>same</em> Arrow Table and enables compute operations supplied by the R arrow package. In the same way that <code>fiction2</code> only stores a small amount of metadata in Python, <code>fiction3</code> stores a small amount of metadata in R. Only this metadata has been copied from Python to R: the data itself remains untouched in Arrow.</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/flowers.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Header illustration to “Where flowers are Rare” by Val Jameson. Published in <em>The Sydney Mail</em>, 8 December 1909. I honestly have no logical reason for including this one. But I was listening to Kylie Minogue at the time I was browsing the database and the title made me think of <a href="https://www.youtube.com/watch?v=lDpnjE1LUvE">Where the Wild Roses Grow</a>, and anyway both the song and the story have death in them. So then I simply had to include the image because… it’s <em>Kylie</em>. Obviously. Sheesh. <a href="https://trove.nla.gov.au/newspaper/article/165736425">Trove article 165736425</a></figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
<section id="accessing-the-table-from-the-r-side" class="level2">
<h2 class="anchored" data-anchor-id="accessing-the-table-from-the-r-side">Accessing the Table from the R side</h2>
<p>We’re almost done, but the tour isn’t really complete until we’ve stepped out of Python entirely, manipulated the object on the R side, and then passed something back to Python. So let’s do that next.</p>
<p>In order to pull off that trick within this <a href="https://quarto.org/">quarto</a> document – which is running <a href="https://jupyter.org/">jupyter</a> under the hood – we’ll need to employ a little notebook magic, again relying on rpy2 to supply all the sparkly bits. To help us out in this situation, the rpy2 library supplies an <a href="https://rpy2.github.io/doc/latest/html/interactive.html">interface for interactive work</a> that we can invoke in a notebook context like this:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">%</span>load_ext rpy2.ipython</span></code></pre></div>
</div>
<p>Now that we’ve included this line, all I have to do is preface each cell with <code>%%R</code> and the subsequent “Python” code will be passed to R and interpreted there.<sup>7</sup> To start with I’ll load the dplyr and arrow packages, using the <code>suppressMessages()</code> function to prevent them being chatty:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;">%%</span>R</span>
<span id="cb19-2"></span>
<span id="cb19-3">suppressMessages({</span>
<span id="cb19-4">  library(dplyr)</span>
<span id="cb19-5">  library(arrow)</span>
<span id="cb19-6">})</span></code></pre></div>
</div>
<p>Having loaded the relevant packages, I’ll use the dplyr/arrow toolkit to do a little data wrangling on the <code>fiction3</code> Table. I’m not doing anything fancy, just a little cross-tabulation counting the joint distribution of genders and nationalities represented in the data using the <code>count()</code> function, and using <code>arrange()</code> to sort the results:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;">%%</span>R <span class="op" style="color: #5E5E5E;">-</span>i fiction3</span>
<span id="cb20-2"></span>
<span id="cb20-3">gender <span class="op" style="color: #5E5E5E;">&lt;-</span> fiction3 <span class="op" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb20-4">  count(Gender, Nationality) <span class="op" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb20-5">  arrange(desc(n)) <span class="op" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb20-6">  compute()</span>
<span id="cb20-7">  </span>
<span id="cb20-8">gender</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>63 rows x 3 columns
$Gender &lt;string&gt;
$Nationality &lt;string&gt;
$n &lt;int64&gt;

See $metadata for additional Schema metadata</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code></code></pre>
</div>
</div>
<p>The output isn’t very informative, but don’t worry, by the end of the post there will be a gender reveal I promise.<sup>8</sup> Besides, the actual values of <code>gender</code> aren’t important right now. In truth, the part that we’re most interested in here is the first line of code. By using <code>%%R -i fiction3</code> to specify the cell magic, we’re able to access the <code>fiction3</code> object from R within this cell and perform the required computations.</p>
<p>Oh, and also we now have a new <code>gender</code> object in our R session that we probably want to pull back into Python!</p>
<p><br><br></p>
</section>
<section id="the-journey-home-a-tale-of-four-genders" class="level2">
<h2 class="anchored" data-anchor-id="the-journey-home-a-tale-of-four-genders">The journey home: A tale of four genders</h2>
<p>Okay. So we now have an object in the embedded R session that we might wish to access from the Python session and convert to a Python object. First we’ll pass the Arrow Table from R to Python and then convert to a Pandas DataFrame. Here’s how that process works. If you recall from earlier in the post, we imported <code>robjects</code> to start the embedded R session. When we did so, we also exposed <code>robjects.r</code>, which provides access to all objects within that R session. To create a Python object <code>gender2</code> that refers to the R data structure we created in the last section, here’s what we do:</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">gender2 <span class="op" style="color: #5E5E5E;">=</span> robjects.r(<span class="st" style="color: #20794D;">'gender'</span>)</span>
<span id="cb25-2">gender2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>&lt;rpy2.robjects.environments.Environment object at 0x7f71b6784bc0&gt; [RTYPES.ENVSXP]
R classes: ('Table', 'ArrowTabular', 'ArrowObject', 'R6')
n items: 36</code></pre>
</div>
</div>
<p>Importantly, notice that this is the same object. The <code>gender2</code> variable still refers to the Arrow Table in R: it’s <em>not</em> a pyarrow table. If we want to convert it to a data structure that pyarrow understands, we can again use the rpy-arrow conversion tools. In this case, we can use the <code>rarrow_to_py_table()</code> function:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">gender3 <span class="op" style="color: #5E5E5E;">=</span> pyra.rarrow_to_py_table(gender2)</span>
<span id="cb27-2">gender3</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>pyarrow.Table
Gender: string
Nationality: string
n: int64
----
Gender: [["Unknown","Male","Female","Male","Female",...,"Both","Female","Female","Female",null]]
Nationality: [["Unknown","British","British","Australian","Australian",...,"Australian/British","British/American","South African","Polish","Australian"]]
n: [[12832,6420,3346,2537,1687,...,1,1,1,1,1]]</code></pre>
</div>
</div>
<p>Just like that, we’ve handed over the Arrow Table from R back to Python. Again, it helps to remember that <code>gender2</code> is an R object and <code>gender3</code> is a Python object, but both of them point to the same underlying Arrow Table.</p>
<p>In any case, now that we have <code>gender3</code> on the Python side, we can use the <code>to_pandas()</code> method from <code>pyarrow.Table</code> to convert it to a pandas data frame:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">gender4 <span class="op" style="color: #5E5E5E;">=</span> pyarrow.Table.to_pandas(gender3)</span>
<span id="cb29-2">gender4</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Gender</th>
      <th>Nationality</th>
      <th>n</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Unknown</td>
      <td>Unknown</td>
      <td>12832</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Male</td>
      <td>British</td>
      <td>6420</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Female</td>
      <td>British</td>
      <td>3346</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Male</td>
      <td>Australian</td>
      <td>2537</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Female</td>
      <td>Australian</td>
      <td>1687</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>58</th>
      <td>Both</td>
      <td>Australian/British</td>
      <td>1</td>
    </tr>
    <tr>
      <th>59</th>
      <td>Female</td>
      <td>British/American</td>
      <td>1</td>
    </tr>
    <tr>
      <th>60</th>
      <td>Female</td>
      <td>South African</td>
      <td>1</td>
    </tr>
    <tr>
      <th>61</th>
      <td>Female</td>
      <td>Polish</td>
      <td>1</td>
    </tr>
    <tr>
      <th>62</th>
      <td>None</td>
      <td>Australian</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>63 rows × 3 columns</p>
</div>
</div>
</div>
<p>And with that our transition home is complete!</p>
<p><br><br></p>
</section>
<section id="summary" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post has wandered over a few topics, which is perhaps to be expected given the nature of polyglot data science. To make it all work smoothly I needed to think a little about how my Python and R environments are set up: the little asides I buried in footnotes mention the frictions I encountered in getting rpy2 to work smoothly for me, for instance. As someone who primarily uses R it took me a little while to work out how to get quarto to switch cleanly from a knitr engine to a jupyter engine. The R and Python libraries implementing Apache Arrow make it look seamless when we handover data from one language to another – and in some ways they actually do make it seamless in spite of the many little frictions that exist with Arrow, no less than any other powerful and rapidly-growing tool – but a <em>lot</em> of work has gone into making that transition smooth. Whether you’re an R focused developer using reticulate or a Python focused developer who prefers rpy2, the toolkit is there. I’m obviously biased in this because so much of my work revolves around Arrow these days, but at some level I’m still actually shocked that it (and other polyglot tools) works as well as it does. Plus, I’m having a surprising amount of fun teaching myself “Pythonic” ways of thinking and coding, so that’s kind of cool too.</p>
<p>Hopefully this post will help a few other folks get started in this area!</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/motorcar.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Header illustration to “The Black Motor Car” by J. B. Harris Burland. Published in – just to bring us full circle – <em>The Arrow</em>, 25 November 1905. I cannot properly do justice to this work of art so I will merely quote: “Again he took her in his arms, and this time she did not try to free herself from his embrace. But she looked up at him with pleading eyes. He bent down his face and kissed her tenderly on the forehead. His whole nature cried out for the touch of her lips, but he was man enough to subdue the passion that burnt within him.” <a href="https://trove.nla.gov.au/newspaper/article/103450814">Trove article 103450814</a></figcaption><p></p>
</figure>
</div>
</div>
</section>



<div id="quarto-appendix" class="default"><section id="acknowledgements" class="level2 appendix"><h2 class="quarto-appendix-heading">Acknowledgements</h2><div class="quarto-appendix-contents">

<p>In writing this post I am heavily indebted to Isabella Velásquez, whose fabulous post on <a href="https://rviews.rstudio.com/2022/05/25/calling-r-from-python-with-rpy2/">calling R from Python with rpy2</a> helped me immensely. The <a href="https://arrow.apache.org/docs/python/integration/python_r.html">documentation on integrating PyArrow with R</a> was extremely helpful too! Thank you to <a href="https://twitter.com/kae_suarez">Kae Suarez</a> for reviewing this post.</p>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Relatedly, if you’re a Python user blogging in quarto, you are very unlikely to be using the <a href="https://quarto.org/docs/reference/cells/cells-knitr.html">knitr engine</a> to execute code like I did in the last blog post. Instead you’re almost certainly using the <a href="https://quarto.org/docs/reference/cells/cells-jupyter.html">jupyter engine</a>. With that in mind, and with the goal of making this post a little more Pythonic, I’m using Jupyter this time.↩︎</p></li>
<li id="fn2"><p>A note on image copyright. As far as I can tell all images in this post are public domain. They’re all sourced from Trove and are all over a century old, meaning that they are all covered by the “plus 50 years” rule in Australian copyright law (the current “plus 70” rule does not apply retroactively). The original illustrator is difficult to determine, and given the age of the images so too is any potential copyright holder, but it seems extremely unlikely that any are still covered by any copyright. As always, I will remove any image if I discover that I am incorrect in this.↩︎</p></li>
<li id="fn3"><p>Ha ha. Just kidding. Aaaaaaaaactualllllllly, it will <em>probably</em> work smoothly for most people. But there are exceptions, and because I am a foolish tinkerer and have a nonstandard R configuration I am one of them. I have recently made the decision to use the <a href="https://github.com/r-lib/rig">rig manager</a> to configure multiple concurrent R installations on my laptop. This introduces a some complexity, because rig necessarily installs R to non standard locations. Now, rig does the right thing and correctly sets the PATH environment variable so that rpy2 (and bash) can find R, but it does lead to some peculiar behaviour where rpy2 doesn’t find some of the C libraries need. In the rpy2 readme there’s a discussion of this issue. In such cases you need to tweak the LD_LIBRARY_PATH environment variable before starting Python: <code>export LD_LIBRARY_PATH="$(python -m rpy2.situation LD_LIBRARY_PATH)":${LD_LIBRARY_PATH}</code>↩︎</p></li>
<li id="fn4"><p>As an aside, it’s worth noting that rpy2 has run R with my default configuration (notwithstanding the fact that my defaults are configured using rig). It hasn’t loaded any specific R environment. It did occur to me that a complete discussion of this topic would also describe how a Python user could use rpy2 to configure the R environment using the <a href="https://rstudio.github.io/renv/index.html">renv</a> package for instance, but to be honest that started to feel a little beyond the scope of the post. About the only thing I <em>will</em> mention here is that in this particular use case (namely, passing Arrow objects between R and Python) I would not recommend trying to configure the Python environment and the R environment within the same conda environment. Because that thought occurred to me too. I tried it and oh my… the number of unsolvable conflicts was truly impressive.↩︎</p></li>
<li id="fn5"><p>The dot is typically used to denote an <a href="https://adv-r.hadley.nz/s3.html">S3</a> method in R, but because R embraces chaos this is not universally adhered to and in any case S3 is… look, I love S3 but as Hadley Wickham once observed it’s an object oriented programming system that absolutely allows you to shoot yourself in the foot if you want to. Anyway. This is not the post for ramblings about the chaotic splendour of R.↩︎</p></li>
<li id="fn6"><p>Depending on how blank your R configuration is, you may need to specify which CRAN mirror you want to download the package from before attempting the installation. To do that, include a command like <code>utils.chooseCRANmirror(ind=1)</code> to select the first mirror on the list of known servers.↩︎</p></li>
<li id="fn7"><p>Okay, that brings me to something I didn’t really cover in my last post. Some R users might be wondering about what was going on in the last post where I was flipping back and forth between R and Python without apparently doing anything like this. The answer is that when using <a href="https://yihui.org/knitr/">knitr</a> as the engine rather than jupyter, python code is automatically interpreted with the help of reticulate. However, that feature is exposed by default in the knitr engine so I didn’t need to invoke it explicitly the way I’m doing here in jupyter.↩︎</p></li>
<li id="fn8"><p>I’m sorry. The joke was too obvious, yet too hard to resist.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Data Transfer Between {Python} and {R} with Rpy2 and {Apache}
    {Arrow}},
  date = {2022-09-16},
  url = {https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Data Transfer Between Python and R with
Rpy2 and Apache Arrow.”</span> September 16, 2022. <a href="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2">https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>R</category>
  <category>Python</category>
  <guid>https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/index.html</guid>
  <pubDate>Thu, 15 Sep 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-09-16_arrow-and-rpy2/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Passing Arrow data between R and Python with reticulate</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/index.html</link>
  <description><![CDATA[ 




<!-- 
cover img: https://unsplash.com/photos/yrcaXCWe0VY
artist: David Clode
licence: unsplash free-to-use 
-->
<!--------------- my typical setup ----------------->
<p>As the 21st century gears up for its quarter-life crisis, the trend in data science is toward multi-language tools. I use <a href="https://quarto.org/">quarto</a> to write this blog, a document preparation system that supports code evaluation in R, Python, Julia, and more. My work revolves around <a href="https://arrow.apache.org/">Apache Arrow</a>, a toolbox for data analysis and interchange with implementations in multiple languages. You get the idea. In one sense this new development is fantastic – your language of choice is much more likely to be supported in the future than it ever was in the past. In another sense it is daunting – it sometimes feels like we need to learn <em>all the things</em> in order to get by in this brave new world. Meanwhile we all have our actual jobs to do and we don’t have the time. In the <a href="https://www.youtube.com/watch?v=1i739SyCu9I">immortal words of Bob Katter</a> commenting on same sex marriage legislation in Australia,</p>
<blockquote class="blockquote">
<p>I mean, you know, people are entitled to their sexual proclivities. Let there be a thousand blossoms bloom as far as I’m concerned, you know…</p>
<p>&nbsp; &nbsp; &nbsp; [<em>pauses, expression turns dark</em>]</p>
<p>…but I ain’t spending any time on it because, in the meantime, every three months a person is torn to pieces by a crocodile in North Queensland</p>
</blockquote>
<p>I mean, he makes a good point? Or at least, it’s a good point about data science: I’m not convinced it was a stellar contribution to the discussion of LGBT rights in the antipodes.<sup>1</sup> There’s a lot going on in the data science world, none of us can keep pace with all of it, and we’re all trying our best not to be eaten by crocodiles.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tictoc)</span></code></pre></div>
</div>
</div>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/img/cover.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Much of this post relates to the “reticulate” R package, named for the reticulated python, whose name in turn comes from the pattern of markings on the scales shown in the image above: to “reticulate” is to arrange or mark something like a network. It is deeply important me to me to stress that this animal is not – strictly speaking or even informally speaking – a crocodile. My sincerest apologies to Bob Katter, but this post is not in fact about crocodile-related deaths in northern Queensland. I also promise that this is the only snake picture in the post, and all subsequent reptile photos will only of the adorable kind, even the crocodile one. <a href="https://unsplash.com/photos/yrcaXCWe0VY">Original image</a> freely available courtesy of David Clode via Unsplash.</figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
<section id="data-interchange-in-a-polyglot-world" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-interchange-in-a-polyglot-world">Data interchange in a polyglot world</h2>
<p>In the spirit of saving you from at least one reptilian threat, this post is a primer on how to efficiently pass control of a large data set between R and Python <em>without</em> making any wasteful copies of the data.</p>
<p>The idea to write this post emerged from a recent discussion on Twitter started by <a href="https://twitter.com/mxcatnap/status/1559991199494279169">Cass Wilkinson Saldaña</a> about passing control of a data set from R to Python, and a comment in that discussion by <a href="https://twitter.com/jonkeane/status/1560016227824721920">Jon Keane</a> mentioning that with the assistance of Apache Arrow this handover can be made very smooth, and incredibly efficient too. Unfortunately, to be able to do this you need to know the trick, and as they regretfully mentioned in the thread, the trick isn’t well documented yet.</p>
<p>In time the documentation will of course improve, but in the here-and-now it seems like a good idea to explain how the magic trick works…</p>
<p><br><br></p>
<section id="the-reticulate-trick" class="level3">
<h3 class="anchored" data-anchor-id="the-reticulate-trick">The reticulate trick</h3>
<p>The “trick” is simple: if your data are stored as an Arrow Table, and you use the <a href="https://rstudio.github.io/reticulate/">reticulate</a> package to pass it from R to Python (or vice versa), only the metadata changes hands. Because an Arrow Table has the <em>same</em> structure in-memory when accessed from Python as it does in R, the data set itself does not need to be touched at all. The only thing that needs to happen is the language on the receiving end needs to be told <em>where</em> the data are stored. Or, to put it another way, we just pass a pointer across. This all happens invisibly, so if you know how to use reticulate,<sup>2</sup> you already know almost everything you need to know and can skip straight to the section on passing Arrow objects. If you’re like Danielle-From-Last-Month and have absolutely no idea how reticulate works, read on…</p>
<p><br><br></p>
</section>
<section id="managing-the-python-environment-from-r" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="managing-the-python-environment-from-r">Managing the Python environment from R</h3>
<p>If reticulate is not already on your system, you can install it from CRAN with <code>install.packages("reticulate")</code>. Once installed, you can load it in the usual fashion:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(reticulate)</span></code></pre></div>
</div>
</div>
<p>What happens next depends a little on whether you already have a Python set up. If you don’t have a preferred Python configuration on your machine and would like to let reticulate manage everything for you, then you can do something like this:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">install_python</span>()</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">install_miniconda</span>()</span></code></pre></div>
</div>
</div>
<p>This will set you up with a default Python build, managed by a copy of <a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda</a> that it installs in an OS-specific location that you can discover by calling <code>miniconda_path()</code>.</p>
<p>The previous approach is a perfectly sensible way to use reticulate, but in the end I took a slightly different path. If you’re like me and already have Python and Miniconda configured on your local machine, you probably <em>don’t</em> want reticulate potentially installing new versions and possibly making a mess of things.<sup>3</sup> You probably want to use your existing set up and ensure that reticulate knows where to find everything. If that’s the case, what you want to do is edit your <code>.Renviron</code> file<sup>4</sup> and set the RETICULATE_MINICONDA_PATH variable. Add a line like this one,</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[within .Renviron]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;">RETICULATE_MINICONDA_PATH</span><span class="op" style="color: #5E5E5E;">=</span>/home/danielle/miniconda3/</span></code></pre></div>
</div>
</div>
<p>where you should specify the path to your Miniconda installation, not mine 😁</p>
<p>Regardless of which method you’ve followed, you can use <code>conda_list()</code> to display a summary of all your Python environments.<sup>5</sup> Somehow, despite the fact that I went to the effort of setting everything up, I haven’t used Python much on this machine, so my list of environments is short:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">conda_list</span>()</span></code></pre></div>
</div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>          name                                                 python
1         base                   /home/danielle/miniconda3/bin/python
2 continuation /home/danielle/miniconda3/envs/continuation/bin/python
3 r-reticulate /home/danielle/miniconda3/envs/r-reticulate/bin/python</code></pre>
</div>
</div>
<p>For the purposes of this post I’ll create a new environment that – in honour of Bob Katter and the reptilian terror in the north – I will call “reptilia”. To keep things neat I’ll install<sup>6</sup> the pandas and pyarrow packages that this post will be using at the same time:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">conda_create</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;">envname =</span> <span class="st" style="color: #20794D;">"reptilia"</span>,</span>
<span id="cb7-3">  <span class="at" style="color: #657422;">packages =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"pandas"</span>, <span class="st" style="color: #20794D;">"pyarrow"</span>)</span>
<span id="cb7-4">)</span></code></pre></div>
</div>
</div>
<p>When I list my conda environments I see that the reptilia environment exists:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">conda_list</span>()</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>          name                                                 python
1         base                   /home/danielle/miniconda3/bin/python
2 continuation /home/danielle/miniconda3/envs/continuation/bin/python
3 r-reticulate /home/danielle/miniconda3/envs/r-reticulate/bin/python
4     reptilia     /home/danielle/miniconda3/envs/reptilia/bin/python</code></pre>
</div>
</div>
<p>To ensure that reticulate uses the reptilia environment throughout this post,<sup>7</sup> I call the <code>use_miniconda()</code> function and specify the environment name:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">use_miniconda</span>(<span class="st" style="color: #20794D;">"reptilia"</span>)</span></code></pre></div>
</div>
</div>
<p>Our set up is now complete!</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/img/david-clode-UBN5a4IA3bk-unsplash.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A tree frog photographed near Cairns, because some reptiles are cute and adorable – even in Queensland. <a href="https://unsplash.com/photos/UBN5a4IA3bk">Original image</a> freely available courtesy of David Clode via Unsplash.</figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
<section id="using-reticulate-to-call-python-from-r" class="level3">
<h3 class="anchored" data-anchor-id="using-reticulate-to-call-python-from-r">Using reticulate to call Python from R</h3>
<p>Now that my environment is set up I’m ready to use Python. When calling Python code from within R, some code translation is necessary due to the differences in syntax across languages. As a simple example, let’s say I have my regular Python session open and I want to check my Python version and executable. To do this I’d import the sys library:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[python code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb11-2"><span class="bu" style="color: null;">print</span>(sys.version)</span>
<span id="cb11-3"><span class="bu" style="color: null;">print</span>(sys.executable)</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 06:15:10) 
[GCC 10.3.0]
/home/danielle/miniconda3/envs/reptilia/bin/python</code></pre>
</div>
</div>
<p>To execute these commands from R, the code needs some minor changes. The <code>import()</code> function replaces the <code>import</code> keyword, and <code>$</code> replaces <code>.</code> as the accessor:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">sys <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">import</span>(<span class="st" style="color: #20794D;">"sys"</span>)</span>
<span id="cb13-2">sys<span class="sc" style="color: #5E5E5E;">$</span>version</span>
<span id="cb13-3">sys<span class="sc" style="color: #5E5E5E;">$</span>executable</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "3.8.13 | packaged by conda-forge | (default, Mar 25 2022, 06:15:10) \n[GCC 10.3.0]"
[1] "/home/danielle/miniconda3/envs/reptilia/bin/python"</code></pre>
</div>
</div>
<p>The code looks more R-like, but Python is doing the work.<sup>8</sup></p>
<p><br><br></p>
</section>
<section id="copying-data-frames-between-languages" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="copying-data-frames-between-languages">Copying data frames between languages</h3>
<p>Okay, now that we understand the basics of reticulate, it’s time to tackle the problem of transferring data sets between R and Python. For now, let’s leave Arrow out of this. All we’re going to do is take an ordinary R data frame and transfer it to Python.</p>
<p>First, let’s load some data into R. Sticking to the reptilian theme we’ve got going here, the data are taken from <a href="http://www.reptile-database.org/">The Reptile Database</a> (accessed August 31 2022), an open and freely available catalog of reptile species and their scientific classifications.<sup>9</sup></p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">taxa <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv2</span>(<span class="st" style="color: #20794D;">"taxa.csv"</span>)</span>
<span id="cb15-2">taxa</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 14,930 × 10
   taxon_id family subfa…¹ genus subge…² speci…³ autho…⁴ infra…⁵ infra…⁶ infra…⁷
   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;lgl&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;  
 1 Ablepha… Scinc… Eugong… Able… NA      alaicus ELPATJ… &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   
 2 Ablepha… Scinc… Eugong… Able… NA      alaicus ELPATJ… subsp.  alaicus ELPATJ…
 3 Ablepha… Scinc… Eugong… Able… NA      alaicus ELPATJ… subsp.  kucenk… NIKOLS…
 4 Ablepha… Scinc… Eugong… Able… NA      alaicus ELPATJ… subsp.  yakovl… (EREMC…
 5 Ablepha… Scinc… Eugong… Able… NA      anatol… SCHMID… &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   
 6 Ablepha… Scinc… Eugong… Able… NA      bivitt… (MENET… &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   
 7 Ablepha… Scinc… Eugong… Able… NA      budaki  GÖCMEN… &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   
 8 Ablepha… Scinc… Eugong… Able… NA      cherno… DAREVS… &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   
 9 Ablepha… Scinc… Eugong… Able… NA      cherno… DAREVS… subsp.  cherno… DAREVS…
10 Ablepha… Scinc… Eugong… Able… NA      cherno… DAREVS… subsp.  eiselti SCHMID…
# … with 14,920 more rows, and abbreviated variable names ¹​subfamily,
#   ²​subgenus, ³​specific_epithet, ⁴​authority, ⁵​infraspecific_marker,
#   ⁶​infraspecific_epithet, ⁷​infraspecific_authority</code></pre>
</div>
</div>
<p>Currently this object is stored in-memory as an R data frame and we want to move it to Python. However, because Python data structures are different from R data structures, what this actually requires us to do is make a copy of the whole data set inside Python, using a Python-native data structure (in this case a Pandas DataFrame). Thankfully, reticulate does this seamlessly with the <code>r_to_py()</code> function:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">py_taxa <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">r_to_py</span>(taxa)</span>
<span id="cb17-2">py_taxa</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>                            taxon_id  ...    infraspecific_authority
0                 Ablepharus_alaicus  ...                         NA
1         Ablepharus_alaicus_alaicus  ...          ELPATJEVSKY, 1901
2        Ablepharus_alaicus_kucenkoi  ...             NIKOLSKY, 1902
3      Ablepharus_alaicus_yakovlevae  ...         (EREMCHENKO, 1983)
4              Ablepharus_anatolicus  ...                         NA
...                              ...  ...                        ...
14925           Zygaspis_quadrifrons  ...                         NA
14926               Zygaspis_vandami  ...                         NA
14927     Zygaspis_vandami_arenicola  ...  BROADLEY &amp; BROADLEY, 1997
14928       Zygaspis_vandami_vandami  ...         (FITZSIMONS, 1930)
14929              Zygaspis_violacea  ...                         NA

[14930 rows x 10 columns]</code></pre>
</div>
</div>
<p>Within the Python session, an object called <code>r</code> has been created: the Pandas DataFrame object is stored as <code>r.py_taxa</code>, and we can manipulate it using Python code in whatever fashion we normally might.</p>
<p>It helps to see a concrete example. To keep things simple, let’s pop over to our Python session and give ourselves a simple data wrangling task. Our goal is to count the number of entries in the data set for each reptilian family using Pandas syntax:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[python code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">counts <span class="op" style="color: #5E5E5E;">=</span> r. <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb19-2">  py_taxa[[<span class="st" style="color: #20794D;">"family"</span>, <span class="st" style="color: #20794D;">"taxon_id"</span>]]. <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb19-3">  groupby(<span class="st" style="color: #20794D;">"family"</span>). <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb19-4">  agg(<span class="bu" style="color: null;">len</span>)</span>
<span id="cb19-5">  </span>
<span id="cb19-6">counts</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>                 taxon_id
family                   
Acrochordidae           3
Agamidae              677
Alligatoridae          16
Alopoglossidae         32
Amphisbaenidae        206
...                   ...
Xenodermidae           30
Xenopeltidae            2
Xenophidiidae           2
Xenosauridae           15
Xenotyphlopidae         1

[93 rows x 1 columns]</code></pre>
</div>
</div>
<p>Naturally I could have done this in R using dplyr functions, but that’s not the point of the post. What matters for our purposes is that <code>counts</code> is a Pandas DataFrame that now exists in the Python session, which we would like to pull back into our R session.</p>
<p>This turns out to be easier than I was expecting. The reticulate package exposes an object named <code>py</code> to the user, and any objects I created in my Python session can be accessed that way:</p>
<div class="cell" data-out.lines="10">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">py<span class="sc" style="color: #5E5E5E;">$</span>counts</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>                   taxon_id
Acrochordidae             3
Agamidae                677
Alligatoridae            16
Alopoglossidae           32
Amphisbaenidae          206
Anguidae                113
Aniliidae                 3
Anomalepididae           23
Anomochilidae             3
...</code></pre>
</div>
</div>
<p>What’s especially neat is that the data structure has been automatically translated for us: the <code>counts</code> object in Python is a Pandas DataFrame, but when accessed from R it is automatically translated into a native R data structure: <code>py$counts</code> is a regular data frame:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">class</span>(py<span class="sc" style="color: #5E5E5E;">$</span>counts)</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.frame"</code></pre>
</div>
</div>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/img/david-clode-GU2DpW-H89M-unsplash.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A chameleon. I suppose there is some logic for this image, at least insofar as reticulate allows R to mimic Python and as for arrow Arrow – while it does a lot of the work in the next section — it blends seamlessly into the background. Like a chameleon. Get it? I’m so clever. <a href="https://unsplash.com/photos/GU2DpW-H89M">Original image</a> freely available courtesy of David Clode via Unsplash.</figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="data-interchange-with-arrow-in-the-polyglot-world" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-interchange-with-arrow-in-the-polyglot-world">Data interchange with Arrow in the polyglot world</h2>
<p>So far we have not touched Arrow, and you might be wondering if it’s even necessary to do so given that reticulate seems so smooth and seamless. Appearances can be a little deceiving however. The example from the last section only looks smooth and seamless because the data set is small. As I’ll show later in the post, cracks in the facade start to appear when you have to pass large data sets across languages. This happens for the very simple reason that a Pandas DataFrame is a different <em>thing</em> to an R data frame. It’s not possible for the two languages to share a single copy of the same data object because they don’t agree on what constitutes “a data object”. The only way we can do the handover is to make a copy of the data set and convert it to a format more suitable to the destination language. When the data set is small, this is not a problem. But as your data set grows, this becomes ever more burdensome. These copy-and-convert operations are not cheap.</p>
<p>Wouldn’t it be nice if R and Python could both agree to represent the data as, oh let’s say…. an Arrow Table? On the R side we could interact with it using the arrow R package, and on the Python side we could interact with it using the pyarrow module. But regardless of which language we’re using, the thing in memory would be <em>exactly</em> the same… handing over the data set from one language to the other would no longer require any copying. A little metadata would change hands, and that’s all.</p>
<p>That sounds much nicer.</p>
<p><br><br></p>
<section id="setting-up-arrow" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-arrow">Setting up arrow</h3>
<p>I’m not going to talk much about setting up arrow for R in this post, because I’ve written about it before! In addition to the <a href="https://arrow.apache.org/docs/r/">installation instructions on the arrow documentation</a> there’s a <a href="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/">getting started with arrow</a> post on this blog. But in any case, it’s usually pretty straightfoward: you can install the arrow R package from CRAN in the usual way using <code>install.packages("arrow")</code> and then load it in the usual fashion:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span></code></pre></div>
</div>
</div>
<p>On the Python side, I’ve already installed pyarrow earlier when setting up the “reptilia” environment. But had I not done so, I could redress this now using <code>conda_install()</code> with a command such as this:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">conda_install</span>(</span>
<span id="cb26-2">  <span class="at" style="color: #657422;">packages =</span> <span class="st" style="color: #20794D;">"pyarrow"</span>, </span>
<span id="cb26-3">  <span class="at" style="color: #657422;">envname =</span> <span class="st" style="color: #20794D;">"reptilia"</span></span>
<span id="cb26-4">)</span></code></pre></div>
</div>
</div>
<p>From there we’re good to go. On the R side, let’s start by reading the reptiles data directly from file into an Arrow Table:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">taxa_arrow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_delim_arrow</span>(</span>
<span id="cb27-2">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"taxa.csv"</span>, </span>
<span id="cb27-3">  <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">";"</span>, </span>
<span id="cb27-4">  <span class="at" style="color: #657422;">as_data_frame =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb27-5">)</span>
<span id="cb27-6">taxa_arrow</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
14930 rows x 10 columns
$taxon_id &lt;string&gt;
$family &lt;string&gt;
$subfamily &lt;string&gt;
$genus &lt;string&gt;
$subgenus &lt;null&gt;
$specific_epithet &lt;string&gt;
$authority &lt;string&gt;
$infraspecific_marker &lt;string&gt;
$infraspecific_epithet &lt;string&gt;
$infraspecific_authority &lt;string&gt;</code></pre>
</div>
</div>
<p>Next let’s import pyarrow on the Python side and check the version:<sup>10</sup></p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[python code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;">import</span> pyarrow <span class="im" style="color: #00769E;">as</span> pa</span>
<span id="cb29-2">pa.__version__</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>'8.0.0'</code></pre>
</div>
</div>
<p>Everything looks good here too!</p>
<p><br><br></p>
</section>
<section id="handover-to-python" class="level3">
<h3 class="anchored" data-anchor-id="handover-to-python">Handover to Python</h3>
<p>After all that set up, it’s almost comically easy to do the transfer itself. It’s literally the same as last time: we call <code>r_to_py()</code>. The <code>taxa_arrow</code> variable refers to an Arrow Table on the R side, so now all I have to do is use <code>r_to_py()</code> to create <code>py_taxa_arrow</code>, a variable that refers to the same Arrow Table from the Python side:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">py_taxa_arrow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">r_to_py</span>(taxa_arrow)</span></code></pre></div>
</div>
</div>
<p>Since we’re in Python now, let’s just switch languages and take a peek, shall we? Just like last time, objects created by reticulate are accessible on the Python side via the <code>r</code> object, so we access this object in Python with <code>r.py_taxa_arrow</code>:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[python code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">r.py_taxa_arrow</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pyarrow.Table
taxon_id: string
family: string
subfamily: string
genus: string
subgenus: null
specific_epithet: string
authority: string
infraspecific_marker: string
infraspecific_epithet: string
infraspecific_authority: string
----
taxon_id: [["Ablepharus_alaicus","Ablepharus_alaicus_alaicus","Ablepharus_alaicus_kucenkoi","Ablepharus_alaicus_yakovlevae","Ablepharus_anatolicus",...,"Plestiodon_egregius_onocrepis","Plestiodon_egregius_similis","Plestiodon_elegans","Plestiodon_fasciatus","Plestiodon_finitimus"],["Plestiodon_gilberti","Plestiodon_gilberti_cancellosus","Plestiodon_gilberti_gilberti","Plestiodon_gilberti_placerensis","Plestiodon_gilberti_rubricaudatus",...,"Zygaspis_quadrifrons","Zygaspis_vandami","Zygaspis_vandami_arenicola","Zygaspis_vandami_vandami","Zygaspis_violacea"]]
family: [["Scincidae","Scincidae","Scincidae","Scincidae","Scincidae",...,"Scincidae","Scincidae","Scincidae","Scincidae","Scincidae"],["Scincidae","Scincidae","Scincidae","Scincidae","Scincidae",...,"Amphisbaenidae","Amphisbaenidae","Amphisbaenidae","Amphisbaenidae","Amphisbaenidae"]]
subfamily: [["Eugongylinae","Eugongylinae","Eugongylinae","Eugongylinae","Eugongylinae",...,"Scincinae","Scincinae","Scincinae","Scincinae","Scincinae"],["Scincinae","Scincinae","Scincinae","Scincinae","Scincinae",...,null,null,null,null,null]]
genus: [["Ablepharus","Ablepharus","Ablepharus","Ablepharus","Ablepharus",...,"Plestiodon","Plestiodon","Plestiodon","Plestiodon","Plestiodon"],["Plestiodon","Plestiodon","Plestiodon","Plestiodon","Plestiodon",...,"Zygaspis","Zygaspis","Zygaspis","Zygaspis","Zygaspis"]]
subgenus: [11142 nulls,3788 nulls]
specific_epithet: [["alaicus","alaicus","alaicus","alaicus","anatolicus",...,"egregius","egregius","elegans","fasciatus","finitimus"],["gilberti","gilberti","gilberti","gilberti","gilberti",...,"quadrifrons","vandami","vandami","vandami","violacea"]]
authority: [["ELPATJEVSKY, 1901","ELPATJEVSKY, 1901","ELPATJEVSKY, 1901","ELPATJEVSKY, 1901","SCHMIDTLER, 1997",...,"BAIRD, 1858","BAIRD, 1858","(BOULENGER, 1887)","(LINNAEUS, 1758)","OKAMOTO &amp; HIKIDA, 2012"],["(VAN DENBURGH, 1896)","(VAN DENBURGH, 1896)","(VAN DENBURGH, 1896)","(VAN DENBURGH, 1896)","(VAN DENBURGH, 1896)",...,"(PETERS, 1862)","(FITZSIMONS, 1930)","(FITZSIMONS, 1930)","(FITZSIMONS, 1930)","(PETERS, 1854)"]]
infraspecific_marker: [[null,"subsp.","subsp.","subsp.",null,...,"subsp.","subsp.",null,null,null],[null,"subsp.","subsp.","subsp.","subsp.",...,null,null,"subsp.","subsp.",null]]
infraspecific_epithet: [[null,"alaicus","kucenkoi","yakovlevae",null,...,"onocrepis","similis",null,null,null],[null,"cancellosus","gilberti","placerensis","rubricaudatus",...,null,null,"arenicola","vandami",null]]
infraspecific_authority: [[null,"ELPATJEVSKY, 1901","NIKOLSKY, 1902","(EREMCHENKO, 1983)",null,...,"(COPE, 1871)","(MCCONKEY, 1957)",null,null,null],[null,"(RODGERS &amp; FITCH, 1947)","(VAN DENBURGH, 1896)","(RODGERS, 1944)","(TAYLOR, 1936)",...,null,null,"BROADLEY &amp; BROADLEY, 1997","(FITZSIMONS, 1930)",null]]</code></pre>
</div>
</div>
<p>The output is formatted slightly differently because the Python pyarrow library is now doing the work. You can see from the first line that this is a <em>pyarrow</em> Table, but nevertheless when you look at the rest of the output it’s pretty clear that this is the same table.</p>
<p>Easy!</p>
<p><br><br></p>
</section>
<section id="handover-to-r" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="handover-to-r">Handover to R</h3>
<p>Right then, what’s next? Just like last time, let’s do a little bit of data wrangling on the Python side. In the code below I’m using pyarrow to do the same thing I did with Pandas earlier: counting the number of entries for each reptile family.</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[python code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">counts_arrow <span class="op" style="color: #5E5E5E;">=</span> r.py_taxa_arrow. <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb34-2">  group_by(<span class="st" style="color: #20794D;">"family"</span>). <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb34-3">  aggregate([(<span class="st" style="color: #20794D;">"taxon_id"</span>, <span class="st" style="color: #20794D;">"count"</span>)]). <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb34-4">  sort_by([(<span class="st" style="color: #20794D;">"family"</span>, <span class="st" style="color: #20794D;">"ascending"</span>)])</span>
<span id="cb34-5">  </span>
<span id="cb34-6">counts_arrow</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>pyarrow.Table
taxon_id_count: int64
family: string
----
taxon_id_count: [[3,677,16,32,206,...,2,2,15,1,5]]
family: [["Acrochordidae","Agamidae","Alligatoridae","Alopoglossidae","Amphisbaenidae",...,"Xenopeltidae","Xenophidiidae","Xenosauridae","Xenotyphlopidae",null]]</code></pre>
</div>
</div>
<p>Flipping back to R, the <code>counts_arrow</code> object is accessible via the <code>py</code> object. Let’s take a look:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">py<span class="sc" style="color: #5E5E5E;">$</span>counts_arrow</span></code></pre></div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
93 rows x 2 columns
$taxon_id_count &lt;int64&gt;
$family &lt;string&gt;</code></pre>
</div>
</div>
<p>The output is formatted a little differently because now it’s the R arrow package tasked with printing the output, but it is the same Table.</p>
<p>Mission accomplished!</p>
<p>But… was it all worthwhile?</p>
<p><br><br></p>
<div class="column-body-outset">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/img/david-clode-0W8PfUdXqhk-unsplash.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A baby crocodile, just so that Bob Katter doesn’t feel like I completely forgot about his worries. It doesn’t look like it’s about to tear anyone to pieces but what would I know? I’m not an expert on such matters. <a href="https://unsplash.com/photos/0W8PfUdXqhk">Original image</a> freely available courtesy of David Clode via Unsplash.</figcaption><p></p>
</figure>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="does-arrow-really-make-a-big-difference" class="level2">
<h2 class="anchored" data-anchor-id="does-arrow-really-make-a-big-difference">Does Arrow really make a big difference?</h2>
<p>At the end of all this, you might want to know if using Arrow makes much of a difference. As much as I love learning new things for the sheer joy of learning new things, I prefer to learn useful things when I can! So let’s do a little comparison. First, I’ll define a <code>handover_time()</code> function that takes two arguments. The first argument <code>n</code> specifies the number of rows in the to-be-transferred data set. The second argument <code>arrow</code> is a logical value: setting <code>arrow = FALSE</code> means that an R data frame will be passed to Python as a Panda DataFrame, wheras <code>arrow = TRUE</code> means that an Arrow Table in R will be passed to Python and remain an Arrow Table. The actual data set is constructed by randomly sampling <code>n</code> rows from the <code>taxa</code> data set (with replacement):</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">handover_time <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(n, <span class="at" style="color: #657422;">arrow =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) {</span>
<span id="cb38-2">  data_in_r <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">slice_sample</span>(taxa, <span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb38-3">  <span class="cf" style="color: #003B4F;">if</span>(arrow) {</span>
<span id="cb38-4">    data_in_r <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(data_in_r)</span>
<span id="cb38-5">  }</span>
<span id="cb38-6">  <span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb38-7">  data_in_python <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">r_to_py</span>(data_in_r)</span>
<span id="cb38-8">  t <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">toc</span>(<span class="at" style="color: #657422;">quiet =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb38-9">  <span class="fu" style="color: #4758AB;">return</span>(t<span class="sc" style="color: #5E5E5E;">$</span>toc <span class="sc" style="color: #5E5E5E;">-</span> t<span class="sc" style="color: #5E5E5E;">$</span>tic)</span>
<span id="cb38-10">}</span></code></pre></div>
</div>
</div>
<p>Now that I’ve defined the test function, let’s see what happens. I’ll vary the number of rows from 10000 to 1000000 for both the native data frame version and the Arrow Table version, and store the result as <code>times</code>:</p>
<div class="cell" data-hash="index_cache/html/speed-test-2_5b7dfe08b589ec827e86b19cd57ec596">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">times <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb39-2">  <span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">1000000</span>, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">100</span>),</span>
<span id="cb39-3">  <span class="at" style="color: #657422;">data_frame =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(n, handover_time),</span>
<span id="cb39-4">  <span class="at" style="color: #657422;">arrow_table =</span> <span class="fu" style="color: #4758AB;">map_dbl</span>(n, handover_time, <span class="at" style="color: #657422;">arrow =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb39-5">)</span></code></pre></div>
</div>
</div>
<p>Now let’s plot the data:</p>
<div class="cell">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>[R code]</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">times <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb40-3">    <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"data_frame"</span>, <span class="st" style="color: #20794D;">"arrow_table"</span>), </span>
<span id="cb40-4">    <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"type"</span>, </span>
<span id="cb40-5">    <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"time"</span></span>
<span id="cb40-6">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb40-7">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb40-8">    <span class="at" style="color: #657422;">type =</span> type <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb40-9">      <span class="fu" style="color: #4758AB;">factor</span>(</span>
<span id="cb40-10">        <span class="at" style="color: #657422;">levels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"data_frame"</span>, <span class="st" style="color: #20794D;">"arrow_table"</span>),</span>
<span id="cb40-11">        <span class="at" style="color: #657422;">labels =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Data Frames"</span>, <span class="st" style="color: #20794D;">"Arrow Tables"</span>)</span>
<span id="cb40-12">      )</span>
<span id="cb40-13">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb40-14">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(n, time)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb40-15">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb40-16">  <span class="fu" style="color: #4758AB;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;">~</span>type) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb40-17">  <span class="fu" style="color: #4758AB;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb40-18">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb40-19">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"Number of Rows"</span>,</span>
<span id="cb40-20">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Handover Time (Seconds)"</span>, </span>
<span id="cb40-21">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"How long does it take to pass data from R to Python?"</span></span>
<span id="cb40-22">  )</span></code></pre></div>
</div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/index_files/figure-html/plot-speed-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Okay yeah. I’ll be the first to admit that this isn’t a very sophisticated way to do benchmarking, but when the difference is this stark you really don’t have to be sophisticated. Without Arrow, the only way to hand data from R to Python is to copy and convert the data, and that’s time consuming. The time cost gets worse the larger your data set becomes. With Arrow, the problem goes away because you’re not copying the data at all. The time cost is tiny and it stays tiny even as the data set gets bigger.</p>
<p>Seems handy to me?</p>
<p><br><br></p>
<!--------------- appendices go here ----------------->
</section>



<div id="quarto-appendix" class="default"><section id="acknowledgments" class="level2 appendix"><h2 class="quarto-appendix-heading">Acknowledgments</h2><div class="quarto-appendix-contents">

<p>Thank you to <a href="https://twitter.com/marlene_zw">Marlene Mhangami</a> and <a href="https://twitter.com/hpcprogrammer">Fernanda Foertter</a> for reviewing this post.</p>
<div class="cell">

</div>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>That being said, it wasn’t the worst comment on same sex marriage I saw an Australian politician make at the time, not by a long margin.↩︎</p></li>
<li id="fn2"><p>Something to note here is that the reticulate solution implicitly assumes R is your “primary” language and Python is the “secondary” language. That is, reticulate is an R package that calls Python, not a Python module that calls R. Simularly, this quarto document uses the <a href="https://quarto.org/docs/computations/r.html">knitr engine</a> (also an R package) to integrate code from the two languages. Yes the tools are multi-language, but the setup is pretty R-centric. Arguably this is typical for how an R user would set up a multi-language project, and since R is my primary language it’s my preferred solution. However, it’s not a particularly Pythonic way of approaching the problem. But fear not, Python fans. In the next post I’m going to describe an approach that solves the same problem in a Python-centric way.↩︎</p></li>
<li id="fn3"><p>Okay, in the spirit of total honesty… when I first started using reticulate I actually did let reticulate install its own version of Miniconda and everything was a total mess there for a while. My bash profile was set to find my original version of Miniconda, but reticulate was configured to look for the version it had installed. Hijinx ensued. As amusing as that little episode was, I’m much happier now that reticulate and bash are in agreement as to where Miniconda lives.↩︎</p></li>
<li id="fn4"><p>The easiest way to edit this file, if you don’t already know how, is to call <code>usethis::edit_r_environ()</code> at the R console.↩︎</p></li>
<li id="fn5"><p>Well, all the Conda environments anyway↩︎</p></li>
<li id="fn6"><p>You can also use <code>conda_install()</code> to install into an existing conda environment.↩︎</p></li>
<li id="fn7"><p>Okay, I should unpack a little. This blog is written using quarto, and in this post I’m using knitr as the engine to power the evaluation of code chunks. The knitr R package relies on reticulate when it needs to execute Python code. What that means is that code chunks labelled “Python code” in this post are <em>implicitly</em> executed using the same interface (reticulate) as the examples that I am <em>explicitly</em> calling when some of my “R code” chunks use reticulate in a more obvious way. When I call <code>use_miniconda()</code> here it specifies the Python environment used by reticulate in this R session, irrespective of which “path” I use. In other words, the “Python code” chunks and the explicit calls to reticulate functions are all executed with the same Python environment (reptilia) because they occur within the same R session.↩︎</p></li>
<li id="fn8"><p>As an aside it’s worth noting that reticulate exports an object called <code>py</code>, from which Python objects can be accessed: the <code>sys</code> object can also be referred to as <code>py$sys</code>.↩︎</p></li>
<li id="fn9"><p>Note that the website does not explicitly specify a particular licence, but <a href="https://www.researchgate.net/publication/352462027_A_Quarter_Century_of_Reptile_and_Amphibian_Databases">journal articles documenting the database</a> written by the maintainers do refer to it as “open and freely available”. With that in mind I take it that the use of the data in this post is permitted. Naturally, should I discover that it is not I’ll immediately remove it!↩︎</p></li>
<li id="fn10"><p>As an aside – because I’m on on linux and life on linux is dark and full of terrors – this didn’t actually work for me the first time I tried it, and naturally I was filled with despair. Instead, I received this: <code>libstdc++.so.6: version 'GLIBCXX_3.4.22' not found</code>. As usual, googling the error message solved the problem. I updated with <code>sudo apt-get install libstdc++6</code>, and another catastrophe was thereby averted by copy/pasting into a search engine 🙃↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Passing {Arrow} Data Between {R} and {Python} with
    Reticulate},
  date = {2022-09-09},
  url = {https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Passing Arrow Data Between R and Python
with Reticulate.”</span> September 9, 2022. <a href="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow">https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>R</category>
  <category>Python</category>
  <guid>https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/index.html</guid>
  <pubDate>Thu, 08 Sep 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-09-09_reticulated-arrow/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sudo ask me a password</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass/index.html</link>
  <description><![CDATA[ 




<!--
cover image:
author: Ola Mishchenko
url: https://unsplash.com/photos/VRB1LJoTZ6w
licence: Free to use under the Unsplash License

-->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>One peculiar feature of earning one’s keep in society by writing a data science blog is that it provides the opportunity to be unabashedly weird. Personality is important. Other developers will read your strange content – no matter how weird and unprofessional it is – because professional corporate style is very nearly as dull as academic writing, and it is a relief to learn a new thing from an actual human being who write with a certain level of human character.</p>
<p>Even if she is an irredeemably catty bitch.</p>
<p>All of which is by way of preamble, and a way to acknowlege that when the topic is package dependencies in R, the queer double entendres kind of write themselves.<sup>1</sup> And so without further ado, today’s unhinged rambling…</p>
<section id="managing-package-dependencies-in-r" class="level2">
<h2 class="anchored" data-anchor-id="managing-package-dependencies-in-r">Managing package dependencies in R</h2>
<p>Okay so you’ve done your due diligence. You’ve read his pkgdown site, checked out his repo, and you still like him. You really, <em>really</em> want to install his package. You’ve inspected the documentation and it is a very impressive package. I mean, I get it babe.</p>
<p>I. have. been. there.</p>
<p>There’s a thing with packages though. When you’re installing them into wherever you like to put packages (the precise location doesn’t matter for this post<sup>2</sup>), what you see isn’t necessarily all you get.</p>
<p>I’ll give a concrete example. For reasons unknown even to me I woke up this morning and decided today was the day I’d explore the <a href="https://github.com/r-lib/rig">rig installation manager</a> for R that lets you manage multiple R installations on the one machine. It’s very nice, and possibly the topic for a future post. However, one side consequence to adopting rig is that I ended up with adorably fresh copies of R that had no installed packages and needed to be properly set up. In the process, I started thinking a little about the tools I use to install packages. When I first started using R my go to method was to use the <code>install.packages()</code> function supplied by the utils package: after all, it comes bundled with R, which makes it an easy place to start. As I matured as an R user I found myself switching to the <a href="https://remotes.r-lib.org/">remotes package</a> because it provides a coherent set of functions for installing packages from CRAN, Bioconductor, GitHub, and more. I’m a huge fan of remotes, but for reasons I’ll explain in a moment I’m starting to prefer the <a href="https://pak.r-lib.org/">pak package</a> developed by Gábor Csárdi and Jim Hester. When using pak, the function you use to install packages is called <code>pkg_install()</code>. I’ll walk you through it. Here’s what happens when I try to install the <a href="https://quarto-dev.github.io/quarto-r/">quarto R package</a> without properly configuring my setup. First I call the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">pak<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pkg_install</span>(<span class="st" style="color: #20794D;">"quarto"</span>)</span></code></pre></div>
</div>
<p>When I hit enter, pak starts doing its job, resolving the R dependencies and then asking if I want to continue:</p>
<pre><code>✓ Loading metadata database ... done
                                                                            
→ Will install 2 packages.
→ Will update 1 package.
→ Will download 3 packages with unknown size.
+ packrat         0.8.1  [bld][dl]
+ quarto    1.1 → 1.2    [bld][dl]
+ rsconnect       0.8.27 [bld][dl]
? Do you want to continue (Y/n) </code></pre>
<p>I really like this approach. The interface is very clear about precisely what is happening, and pak doesn’t download any more packages than is absolutely necessary to give you what you asked for (unless you specify <code>upgrade = TRUE</code> in the install command).</p>
<p>I agree to continue, so off pak goes, fetching the appropriate R packages:</p>
<pre><code>ℹ Getting 3 pkgs with unknown sizes
✓ Got quarto 1.2 (source) (67.58 kB)                                             
✓ Got rsconnect 0.8.27 (source) (685.57 kB)                                      
✓ Got packrat 0.8.1 (source) (681.50 kB)                                         
✓ Downloaded 3 packages (1.43 MB)in 6.7s</code></pre>
<p>So far, so good. The output is informative and succinct at the same time. It appeals to my aesthetic sensibilities. But then pak – which is very diligent about managing all dependencies including system dependencies – attempts to install the external libraries upon which quarto depends,<sup>3</sup> and this happens:</p>
<pre><code>ℹ Installing system requirements
ℹ Executing `sudo sh -c apt-get install -y make`
Error: System command 'sudo' failed, exit status: 1, stdout + stderr:
E&gt; sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper</code></pre>
<p>Ah.</p>
<p><br><br></p>
</section>
<section id="what-went-wrong-here" class="level2">
<h2 class="anchored" data-anchor-id="what-went-wrong-here">What went wrong here?</h2>
<p>An important thing to understand here is that neither pak nor <a href="https://www.sudo.ws/">sudo</a> are to blame for the installation failure.<sup>4</sup> On the pak side, it’s a <em>good</em> thing that it tries to uncover and install system dependencies: the package isn’t going to work if you don’t have those dependencies installed, and it can be a nightmare trying to track them all down when the package manager doesn’t help identify them for you.<sup>5</sup> On the sudo side, it is extremely reasonable to expect the user to authenticate <em>before</em> enabling superuser privileges. Speaking for myself, I have a very strong expectation that I will be explicitly asked for my consent before packages are installed on my system.<sup>6</sup></p>
<p>The breakdown happens because pak has invoked sudo outside of the terminal context. If you haven’t configured sudo to handle this situation, there’s no opportunity for the user to authenticate, and sudo throws an error.</p>
<p>How can we resolve this?</p>
<p><br><br></p>
</section>
<section id="configuring-sudo" class="level2">
<h2 class="anchored" data-anchor-id="configuring-sudo">Configuring sudo</h2>
<p>A little bit of digging revealed that sudo is a lot more configurable than I had preciously realised, and you can deal with this issue in a few different ways. One possibility would be to <a href="https://www.simplified.guide/linux/enable-passwordless-sudo">enable passwordless sudo</a>, in which case the system dependencies would be installed without requiring a password at all. That would certainly minimise the amount of hassle at my end, but it’s also a hell of a security risk. Even if I personally felt willing to take that risk with my own property, this is a work laptop and I think a little risk-aversion is a good idea in this case.<sup>7</sup></p>
<p>Fortunately, the error message itself contains some hints that there is an alternative fix that doesn’t require you to weaken your security settings (or not by very much, at any rate). Specifically, the error message refers to an “askpass helper”: a program, usually with a GUI, that sudo will invoke whenever it needs authentication from the user but is not running in a terminal. However, in order to get sudo to invoke one of these helpers, you have to explicitly configure it within the sudo configuration file, <code>sudo.conf</code>. This configuration file is located at <code>/etc/sudo.conf</code> is discussed pretty thoroughly in the sudo help documentation. Here’s the relevant part of the output when I type <code>man sudo.conf</code>:<sup>8</sup></p>
<div class="pre">
<pre><code> askpass   The fully qualified path to a helper program used to read the
           user's password when no terminal is available.  This may be
           the case when sudo is executed from a graphical (as opposed to
           text-based) application.  The program specified by askpass
           should display the argument passed to it as the prompt and
           write the user's password to the standard output.  The value
           of askpass may be overridden by the SUDO_ASKPASS environment
           variable.</code></pre>
</div>
<p>Okay, so I need to do two things. I need to edit <code>sudo.conf</code> to configure sudo to use the askpass helper, and I also need the askpass helper itself. So where do I find one of these askpass helper programs? The one I chose to go with is <a href="https://man.openbsd.org/ssh-askpass.1">ssh-askpass</a>, which I installed on my system using the following:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">sudo</span> apt-get install ssh-askpass ssh-askpass-gnome</span></code></pre></div>
<p>Notice that I installed both ssh-askpass and <a href="https://manpages.debian.org/testing/ssh-askpass-gnome/gnome-ssh-askpass.1.en.html">ssh-askpass-gnome</a>. The latter isn’t the askpass helper itself, and isn’t intended to be invoked separately from ssh-askpass. Rather it’s there because ssh-askpass on its own uses <a href="https://x.org/wiki/">X11</a> to do the graphical user interface part and it’s not very pretty on my Ubuntu installation. By installing ssh-askpass-gnome as well, the dialog box that comes up when ssh-askpass is invoked is much nicer.</p>
<p>At the terminal, I can invoke ssh-askpass manually if I want to. It doesn’t do much by itself: all it does is create the dialog box and return the text input by the user.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">ssh-askpass</span></span></code></pre></div>
<p>In practice you don’t actually call this directly. Instead, you configure sudo to that whenever it needs authentication but doesn’t have access to a terminal. In order to accomplish this, here’s the lines I added to my sudo.conf file:<sup>9</sup></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># specify ssh-askpass as my helper</span></span>
<span id="cb8-2"><span class="ex" style="color: null;">Path</span> askpass /usr/bin/ssh-askpass</span></code></pre></div>
<p>So I did this and then<sup>10</sup> tried to install quarto using <code>pkg_install()</code>. This time around sudo no longer errored when pak tried to install system dependencies. Instead it brought up the askpass dialog box:</p>
<p><img src="https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass/img/askpass-screen.png" class="img-fluid"></p>
<p>When I typed in my password, pak and sudo were able to play nicely together and the installation worked just fine. Well, mostly..</p>
</section>
<section id="can-we-relax-just-a-little-sweetie" class="level2">
<h2 class="anchored" data-anchor-id="can-we-relax-just-a-little-sweetie">Can we relax just a little sweetie?</h2>
<p>The only problem is that quarto installation requires <em>five</em> system dependencies to be installed, and as the output below shows, pak starts a new shell process every single time…</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> make<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb9-2"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libcurl4-openssl-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb9-3"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libicu-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb9-4"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libssl-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb9-5"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> pandoc<span class="kw" style="color: #003B4F;">`</span></span></code></pre></div>
<p>…and as a consequence of this I had to enter my password five times.</p>
<p>That’s mildly irritating, and I was not expecting it. My original assumption would be that entering the password the first time would invoke the sudo password cache: that is, after entering my password once, the elevated permissions<sup>11</sup> would persist for about 15 minutes. That’s what happens by default at the terminal, and I had presumed the same would apply when the call to sudo occurs within an R session. However, that’s not <em>quite</em> accurate. This little gem in <code>man sudo</code> explains the relevant security policy issue:</p>
<pre><code>     Security policies may support credential caching to allow the
     user to run sudo again for a period of time without requiring
     authentication.  By default, the sudoers policy caches creden‐
     tials on a per-terminal basis for 15 minutes.  See the
     timestamp_type and timestamp_timeout options in sudoers(5) for
     more information.  By running sudo with the -v option, a user
     can update the cached credentials without running a command.
</code></pre>
<p>The reason why the “15 minutes” rule doesn’t apply here is that the credentials are cached on a “per-terminal” basis. Each <code>sudo sh</code> command invoked by pak effectively runs a new instance of the shell and the password caching doesn’t transfer. Gr.</p>
</section>
<section id="editing-the-sudoers-file" class="level2">
<h2 class="anchored" data-anchor-id="editing-the-sudoers-file">Editing the sudoers file</h2>
<p>As a general rule I can understand why sudo is conservative and does not permit the credential cache to transfer across processes. Who knows what other processes are running and what they might be doing? But in this instance I’m willing to slightly relax the security policy to ensure that the pak/sudo combination doesn’t drive me crazy by relentlessly asking for permission on every little thing.</p>
<p>The security policies in sudo are managed by plugins<sup>12</sup> configured using the “sudoers” file(s) located at <code>/etc/sudoers</code>. I’ll talk about this file momentarily, but first here’s the relevant extract from <code>man sudoers</code> that tells us what setting we need to modify:</p>
<pre><code>     timestamp_type    sudoers uses per-user time stamp files for
                       credential caching.  The timestamp_type op‐
                       tion can be used to specify the type of time
                       stamp record used.  It has the following
                       possible values:

                       global  A single time stamp record is used
                               for all of a user's login sessions,
                               regardless of the terminal or parent
                               process ID.  An additional record is
                               used to serialize password prompts
                               when sudo is used multiple times in
                               a pipeline, but this does not affect
                               authentication.

                       ppid    A single time stamp record is used
                               for all processes with the same par‐
                               ent process ID (usually the shell).
                               Commands run from the same shell (or
                               other common parent process) will
                               not require a password for
                               timestamp_timeout minutes (15 by
                               default).  Commands run via sudo
                               with a different parent process ID,
                               for example from a shell script,
                               will be authenticated separately.

                       tty     One time stamp record is used for
                               each terminal, which means that a
                               user's login sessions are authenti‐
                               cated separately.  If no terminal is
                               present, the behavior is the same as
                               ppid.  Commands run from the same
                               terminal will not require a password
                               for timestamp_timeout minutes (15 by
                               default).

                       kernel  The time stamp is stored in the ker‐
                               nel as an attribute of the terminal
                               device.  If no terminal is present,
                               the behavior is the same as ppid.
                               Negative timestamp_timeout values
                               are not supported and positive val‐
                               ues are limited to a maximum of 60
                               minutes.  This is currently only
                               supported on OpenBSD.

                       The default value is tty.

                       This setting is only supported by version
                       1.8.21 or higher.
</code></pre>
<p>This documentation makes clear where the problem lies. When pak invokes sudo, a new process is spawned and unless the value of <code>timestamp_type</code> is set to <code>global</code>, the sudo credential cache doesn’t get shared across processes.</p>
<p>It’s possible to modify this setting, and I’ll show you how to do that below, but first I strongly recommend that you read this article on <a href="https://www.digitalocean.com/community/tutorials/how-to-edit-the-sudoers-file">how to edit the sudoers file</a> carefully. <em>For realsies, my dears, read it</em>. Editing policies for sudo needs to be done with a lot of care. You don’t want to mess it up and lose the ability to invoke sudo because it’s been incorrectly configured. So please, please read the linked page.</p>
<p>You read it, right?</p>
<p>Good.</p>
<p>After reading through the linked article, I made the decision that instead of editing the main sudoers file, I would instead add a small file to the <code>/etc/sudoers.d/</code> directory. By default, files in this folder are automatically included when the sudoers plugin is loaded, so it’s a convenient place to add your customisations rather than editing the main file. I created one that exists solely to manage the timestamp settings for my primary user:</p>
<pre><code>sudo visudo -f /etc/sudoers.d/timestamp_type</code></pre>
<p>Notice that I’ve used <a href="https://www.sudo.ws/docs/man/1.8.13/visudo.man/">visudo</a>, and not some other editor. If you read the linked article you know why I did that, and why it is astonishingly important to do it this way in order to practice safe sudo<sup>13</sup> policy editing. If you didn’t read the linked article… well, you would be <em>extremely</em> ill-advised to try the next step without actually reading it.</p>
<p>Okay, that feels like enough warning. Let’s look at what I included in my new <code>/etc/sudoers.d/timestamp_type</code> file:</p>
<pre><code># specify the timeout type (usual default=tty)
Defaults:danielle timestamp_type=global

# specify the timeout interval (usual default=15)
Defaults:danielle timestamp_timeout=2</code></pre>
<p>I’ve done two things. First, in order to allow the sudo password cache to work everywhere regardless of which process invokes it, I set <code>timestamp_type=global</code>. Second, because this makes me a tiny bit nervous (it’s a very mild softening of security policies), I shortened the cache expiry time from 15 minutes to 2 minutes by setting <code>timestamp_timeout=2</code>. In practice, I very rarely do anything requiring superuser privileges that requires more than two minutes, and it seems best to let those privileges expire quickly.</p>
</section>
<section id="youre-a-star" class="level2">
<h2 class="anchored" data-anchor-id="youre-a-star">You’re a star</h2>
<p>At this point I have a set up that lets me use pak without needing to weaken my security policies (well, not by much) and won’t cause me to lose my mind by typing in my password over and over until I beg for the sweet release<sup>14</sup> of death. Was it all worth it?</p>
<p>Well, let me just say this: out of curiosity I decided to try installing the stars package, which necessarily entails installing a lot of geospatial dependencies. Back when I first tried installing these tools on linux a couple of years ago it was a nightmare. I had to track down the dependencies myself and manually install them, which was pretty daunting at the time because I was very new to the whole business.<sup>15</sup> Here’s what happened when I tried it with pak after configuring sudo to ask for my password only the once:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">pak<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pkg_install</span>(<span class="st" style="color: #20794D;">"stars"</span>)</span></code></pre></div>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;">→</span> Will install 1 package.</span>
<span id="cb15-2"><span class="ex" style="color: null;">→</span> Will download 1 package with unknown size.</span>
<span id="cb15-3"><span class="ex" style="color: null;">+</span> stars   0.5-6 [bld][dl]</span>
<span id="cb15-4"><span class="ex" style="color: null;">ℹ</span> Getting 1 pkg with unknown size</span>
<span id="cb15-5"><span class="ex" style="color: null;">✓</span> Got stars 0.5-6 <span class="er" style="color: #AD0000;">(</span><span class="bu" style="color: null;">source</span><span class="kw" style="color: #003B4F;">)</span> <span class="kw" style="color: #003B4F;">(</span><span class="ex" style="color: null;">3.42</span> MB<span class="kw" style="color: #003B4F;">)</span>                                  </span>
<span id="cb15-6"><span class="ex" style="color: null;">✓</span> Downloaded 1 package <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">3.42</span> MB<span class="kw" style="color: #003B4F;">)</span><span class="er" style="color: #AD0000;">in</span> <span class="ex" style="color: null;">4.2s</span>                               </span>
<span id="cb15-7"><span class="ex" style="color: null;">ℹ</span> Installing system requirements</span>
<span id="cb15-8"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libgdal-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-9"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> gdal-bin<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-10"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libgeos-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-11"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libssl-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-12"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libproj-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-13"><span class="ex" style="color: null;">ℹ</span> Executing <span class="kw" style="color: #003B4F;">`</span><span class="fu" style="color: #4758AB;">sudo</span> sh <span class="at" style="color: #657422;">-c</span> apt-get install <span class="at" style="color: #657422;">-y</span> libudunits2-dev<span class="kw" style="color: #003B4F;">`</span></span>
<span id="cb15-14"><span class="ex" style="color: null;">ℹ</span> Building stars 0.5-6</span>
<span id="cb15-15"><span class="ex" style="color: null;">✓</span> Built stars 0.5-6 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">1.4s</span><span class="kw" style="color: #003B4F;">)</span>                                       </span>
<span id="cb15-16"><span class="ex" style="color: null;">✓</span> Installed stars 0.5-6  <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">98ms</span><span class="kw" style="color: #003B4F;">)</span>                                    </span>
<span id="cb15-17"><span class="ex" style="color: null;">✓</span> 1 pkg + 16 deps: kept 12, added 1, dld 1 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">3.42</span> MB<span class="kw" style="color: #003B4F;">)</span> <span class="ex" style="color: null;">[20.7s]</span>    </span></code></pre></div>
<p>One line of code. One line of code, that worked the first time. One line of code that worked the first time and installed everything quickly. It’s a true Christmas miracle.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Like so many moments in life when I get this way, <a href="https://twitter.com/dan_p_simpson/status/1565948834542669826">Dan Simpson</a> is at least partially to blame.↩︎</p></li>
<li id="fn2"><p>Per <em>Lawrence v Texas</em>.↩︎</p></li>
<li id="fn3"><p>It took all the self-restraint I possess not to refer to this as “the undisclosed viagra problem” in the title. Footnotes are the place for such things Danielle. Footnotes.↩︎</p></li>
<li id="fn4"><p>These things happen to everyone sometimes honey, it’s no big deal, etc.↩︎</p></li>
<li id="fn5"><p>Conveniently, pak also allows you to identify these dependencies separately from the R package installation. To do this, use the <code>pkg_system_requirements()</code> function.↩︎</p></li>
<li id="fn6"><p>There’s an unpleasant name for people who break that convention, and I can’t think of a joke for this one because it’s astonishingly horrible. If you don’t know from personal experience what it feels like, well, consider yourself fortunate. Sigh.↩︎</p></li>
<li id="fn7"><p>Okay sure, I haven’t <em>technically</em> asked DevOps for their opinion about the possibility of me dumping the authentication requirements on superuser privileges on a work machine. Nevertheless I do have a suspicion I know what their answer would be. So, in the interests of not causing unnecessary distress, perhaps a different approach is in order…↩︎</p></li>
<li id="fn8"><p>The <a href="https://www.sudo.ws/docs/man/1.9.9/sudo.conf.man/">manual page</a> is online at the linked URL.↩︎</p></li>
<li id="fn9"><p>In the interests of strict accuracy, I should add that had to create this file myself because it didn’t already exist on my system: prior to making this edit, sudo was using all the default settings. Relatedly, I had to use <code>whereis ssh-askpass</code> in order to find the path to ssh-askpass because the advice I’d seen online listed a different path and, shockingly, it doesn’t work if you don’t provide the correct path.↩︎</p></li>
<li id="fn10"><p>After restarting R, just in case.↩︎</p></li>
<li id="fn11"><p>Negotiations are vital and CNC isn’t for newbies.↩︎</p></li>
<li id="fn12"><p>With flared bases one hopes.↩︎</p></li>
<li id="fn13"><p>Surely you cannot have expected me to pass up the opportunity to make a safe sudo joke?↩︎</p></li>
<li id="fn14"><p>Nah, too obvious. Feel free to come up with your own joke here, you don’t need my help.↩︎</p></li>
<li id="fn15"><p>We all were at one time.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Sudo Ask Me a Password},
  date = {2022-09-04},
  url = {https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Sudo Ask Me a Password.”</span> September
4, 2022. <a href="https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass">https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>Credentials</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass/index.html</guid>
  <pubDate>Sat, 03 Sep 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-09-04_sudo-askpass/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to visualise a billion rows of data in R with Apache Arrow</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>It’s been a couple of months since I published anything on this blog. In my defence, I’ve been busy: I spent the month of June developing a workshop and website on <a href="https://arrow-user2022.netlify.app/">larger than memory workflows in R with Apache Arrow</a> for the useR! conference, and I spent July doing the same thing for my <a href="https://art-from-code.netlify.app/">art from code</a> workshop at rstudio::conf. But I am back to blogging now and I’m going to ease myself into it with a post that mixes some ideas from both of those workshops: how to use Arrow to assist in visualising large data sets. Specifically, I’m going to construct a map showing the geographic distribution of pickup locations for a billion or so taxi rides in New York.<sup>1</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tictoc)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span></code></pre></div>
</div>
<section id="the-nyc-taxi-data" class="level2">
<h2 class="anchored" data-anchor-id="the-nyc-taxi-data">The NYC taxi data</h2>
<p>At this point in my life I have used the “NYC Taxi Data” for so many illustrative examples I feel like I don’t need to explain it: doesn’t “everyone” know about this data by now? Yeah, no dice sweetie. That’s a terrible intuition. Most people don’t know the data, and those that do can just skip to the next section! :-)</p>
<p>Here’s a quick summary of the data set. In its full form, the data set takes the form of one very large table with about 1.7 billion rows and 24 columns. Each row corresponds to a single taxi ride sometime between 2009 and 2022. There’s a complete <a href="https://arrow-user2022.netlify.app/packages-and-data.html#data">data dictionary for the NYC taxi data</a> on the useR workshop site, but the columns that will be relevant for us are as follows:</p>
<ul>
<li><code>pickup_longitude</code> (double): Longitude data for the pickup location</li>
<li><code>pickup_latitude</code> (double): Latitude data for the pickup location</li>
<li><code>dropoff_longitude</code> (double): Longitude data for the dropoff location</li>
<li><code>dropoff_latitude</code> (double): Latitude data for the dropoff location</li>
</ul>
<p>On my laptop I have a copy of both the full data set, located at <code>"~/Datasets/nyc-taxi"</code> on my machine, and a much smaller “tiny” data set that contains 1 out of every 1000 records from the original, located at <code>"~/Datasets/nyc-taxi-tiny/"</code>. This tiny version has a mere 1.7 million rows of data, and as such is small enough that it will fit in memory. <a href="https://arrow-user2022.netlify.app/packages-and-data.html#data">Instructions for downloading both data sets</a> are available at the same location as the data dictionary.</p>
</section>
<section id="loading-the-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-data">Loading the data</h2>
<p>Since I have local copies of the data, I’ll use the <code>open_dataset()</code> function from the {arrow} package to connect to both versions of the NYC taxi data:<sup>2</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">nyc_taxi <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_dataset</span>(<span class="st" style="color: #20794D;">"~/Datasets/nyc-taxi/"</span>)</span>
<span id="cb2-2">nyc_taxi_tiny <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_dataset</span>(<span class="st" style="color: #20794D;">"~/Datasets/nyc-taxi-tiny/"</span>)</span></code></pre></div>
</div>
<p>Starting with <a href="https://arrow.apache.org/docs/r/news/index.html#arrow-900">Arrow 9.0.0</a> it’s been possible to use the {dplyr} <code>glimpse()</code> function to take a look at the data sets, so let’s do that:</p>
<div class="cell" data-hash="index_cache/html/glimpse-data_9a1e42d8540622b23300148ccf5b5bca">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">glimpse</span>(nyc_taxi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FileSystemDataset with 158 Parquet files
1,672,590,319 rows x 24 columns
$ vendor_name             &lt;string&gt; "VTS", "VTS", "VTS", "DDS", "DDS", "DDS", "DD…
$ pickup_datetime  &lt;timestamp[ms]&gt; 2009-01-04 13:52:00, 2009-01-04 14:31:00, 200…
$ dropoff_datetime &lt;timestamp[ms]&gt; 2009-01-04 14:02:00, 2009-01-04 14:38:00, 200…
$ passenger_count          &lt;int64&gt; 1, 3, 5, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, …
$ trip_distance           &lt;double&gt; 2.63, 4.55, 10.35, 5.00, 0.40, 1.20, 0.40, 1.…
$ pickup_longitude        &lt;double&gt; -73.99196, -73.98210, -74.00259, -73.97427, -…
$ pickup_latitude         &lt;double&gt; 40.72157, 40.73629, 40.73975, 40.79095, 40.71…
$ rate_code               &lt;string&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
$ store_and_fwd           &lt;string&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
$ dropoff_longitude       &lt;double&gt; -73.99380, -73.95585, -73.86998, -73.99656, -…
$ dropoff_latitude        &lt;double&gt; 40.69592, 40.76803, 40.77023, 40.73185, 40.72…
$ payment_type            &lt;string&gt; "Cash", "Credit card", "Credit card", "Credit…
$ fare_amount             &lt;double&gt; 8.9, 12.1, 23.7, 14.9, 3.7, 6.1, 5.7, 6.1, 8.…
$ extra                   &lt;double&gt; 0.5, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, …
$ mta_tax                 &lt;double&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
$ tip_amount              &lt;double&gt; 0.00, 2.00, 4.74, 3.05, 0.00, 0.00, 1.00, 0.0…
$ tolls_amount            &lt;double&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …
$ total_amount            &lt;double&gt; 9.40, 14.60, 28.44, 18.45, 3.70, 6.60, 6.70, …
$ improvement_surcharge   &lt;double&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
$ congestion_surcharge    &lt;double&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
$ pickup_location_id       &lt;int64&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
$ dropoff_location_id      &lt;int64&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…
$ year                     &lt;int32&gt; 2009, 2009, 2009, 2009, 2009, 2009, 2009, 200…
$ month                    &lt;int32&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …</code></pre>
</div>
</div>
<p>If you’ve used <code>glimpse()</code> before this output will look very familiar. Each line in the output show the name of one column in the data, followed by the first few entries in that column.<sup>3</sup> However, when you look at the size of the data set, you might begin to suspect that some magic is going on. Behind the scenes there are 1.7 billion rows of data in one huge table, and this is just too big to load into memory. Fortunately, the {arrow} package allows us to work with it anyway!</p>
</section>
<section id="plotting-a-million-rows" class="level2">
<h2 class="anchored" data-anchor-id="plotting-a-million-rows">Plotting a million rows</h2>
<p>Okay, let’s start with a data visualisation problem that wouldn’t be too difficult to manage on a small data set. I want to draw an image that plots the pickup location for every taxi ride in the data set. Here’s how I might go about that. First, I’ll do a minimal amount of data wrangling in {arrow}. Specifically, I’ll use the {dplyr} <code>select()</code> and <code>filter()</code> functions to limit the amount of data I have to <code>collect()</code> into R:</p>
<div class="cell" data-hash="index_cache/html/filtering_105a395a3b69129b1deb402371e596aa">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb5-2">nyc_pickups <span class="ot" style="color: #003B4F;">&lt;-</span> nyc_taxi_tiny <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">select</span>(pickup_longitude, pickup_latitude) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">filter</span>(</span>
<span id="cb5-5">    <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(pickup_longitude),</span>
<span id="cb5-6">    <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(pickup_latitude)</span>
<span id="cb5-7">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">collect</span>()</span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.16 sec elapsed</code></pre>
</div>
</div>
<p>At this point I have a regular R data frame, <code>nyc_pickups</code>, that contains only the data I need: the pickup locations for all those taxi rides (in the <em>tiny</em> taxi data set) that actually contain longitude and latitude data. Let’s use <code>glimpse()</code> again:</p>
<div class="cell" data-hash="index_cache/html/glimpse-pickups_777a2e321317d21e8bd17c1d8b4b682e">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">glimpse</span>(nyc_pickups)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1,249,107
Columns: 2
$ pickup_longitude &lt;dbl&gt; -73.95557, -73.97467, -73.78190, -73.97872, -73.97400…
$ pickup_latitude  &lt;dbl&gt; 40.76416, 40.76222, 40.64478, 40.75371, 40.77901, 0.0…</code></pre>
</div>
</div>
<p>Compared to the full NYC taxi data, this is a relatively small data set. Drawing a scatter plot from 1.2 million observations isn’t a trivial task, to be sure, but it is achievable. In fact the {ggplot2} package handles this task surprisingly well:</p>
<div class="cell" data-hash="index_cache/html/ggplot2-image_72f14eb74a16f2be7164916ef14192b5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">x0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">74.05</span> <span class="co" style="color: #5E5E5E;"># minimum longitude to plot</span></span>
<span id="cb9-2">y0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">40.6</span>   <span class="co" style="color: #5E5E5E;"># minimum latitude to plot</span></span>
<span id="cb9-3">span <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.3</span>  <span class="co" style="color: #5E5E5E;"># size of the lat/long window to plot</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb9-6">pic <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(nyc_pickups) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;">aes</span>(pickup_longitude, pickup_latitude), </span>
<span id="cb9-9">    <span class="at" style="color: #657422;">size =</span> .<span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb9-10">    <span class="at" style="color: #657422;">stroke =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb9-11">    <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">"#800020"</span></span>
<span id="cb9-12">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-14">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-16">  <span class="fu" style="color: #4758AB;">coord_equal</span>(</span>
<span id="cb9-17">    <span class="at" style="color: #657422;">xlim =</span> x0 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, span), </span>
<span id="cb9-18">    <span class="at" style="color: #657422;">ylim =</span> y0 <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, span)</span>
<span id="cb9-19">  )</span>
<span id="cb9-20">pic</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/ggplot2-image-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3.365 sec elapsed</code></pre>
</div>
</div>
<p>It’s not lightning fast or anything, but it’s still pretty quick!</p>
<p>As neat as this visualisation is there are limitations.<sup>4</sup> In some parts of the plot – notably midtown in Manhattan – the data are so dense that you can’t make out any fine detail. In other parts – Brooklyn and Queens, for instance – there are so few data points that you can’t see much at all:</p>
<div class="cell" data-hash="index_cache/html/annotated-ggplot_75189ae42604d08a128a4c5c2067bf46">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/annotated-ggplot-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>How do we improve this image?</p>
</section>
<section id="scaling-to-a-billion-rows" class="level2">
<h2 class="anchored" data-anchor-id="scaling-to-a-billion-rows">Scaling to a billion rows</h2>
<p>To make a better version of this plot, we’re going to have to do two things at once:</p>
<ul>
<li>Use a lot more data. If we use the full NYC taxi data set, the visualisation will be a lot more detailed in areas where it is currently too sparse.</li>
<li>Show gradation at each location. In the dense areas there are too many points plotted atop one another. Instead of overplotting, we’ll use shading to represent the number of pickups at each location.</li>
</ul>
<p>How do we do this? Let’s say I want to create a 4000 x 4000 pixel image, and I want the “intensity” at each pixel to represent the number of pickups that fall in the geographic region spanned by that pixel. There are a total of 16 million pixels, so our task is to assign each of observation one of those those 16 million bins, and then count the number of observations in each bin. We’ll have to rely on Arrow to do all the heavy lifting here. This binning cannot be done natively in R: the data set is just too big. Even after filtering out missing and out-of-bounds data points, there are still 1.2 billion rows, and R can’t do that without assistance.</p>
<p>Here’s what the solution looks like:</p>
<div class="cell" data-hash="index_cache/html/compute-pixels_47854146bcf35cbd0a57c1d3a15eb7da">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb12-2">pixels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">4000</span></span>
<span id="cb12-3">pickup <span class="ot" style="color: #003B4F;">&lt;-</span> nyc_taxi <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">filter</span>(</span>
<span id="cb12-5">    <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(pickup_longitude),</span>
<span id="cb12-6">    <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(pickup_latitude),</span>
<span id="cb12-7">    pickup_longitude <span class="sc" style="color: #5E5E5E;">&gt;</span> x0,</span>
<span id="cb12-8">    pickup_longitude <span class="sc" style="color: #5E5E5E;">&lt;</span> x0 <span class="sc" style="color: #5E5E5E;">+</span> span,</span>
<span id="cb12-9">    pickup_latitude <span class="sc" style="color: #5E5E5E;">&gt;</span> y0,</span>
<span id="cb12-10">    pickup_latitude <span class="sc" style="color: #5E5E5E;">&lt;</span> y0 <span class="sc" style="color: #5E5E5E;">+</span> span</span>
<span id="cb12-11">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb12-13">    <span class="at" style="color: #657422;">unit_scaled_x =</span> (pickup_longitude <span class="sc" style="color: #5E5E5E;">-</span> x0) <span class="sc" style="color: #5E5E5E;">/</span> span,</span>
<span id="cb12-14">    <span class="at" style="color: #657422;">unit_scaled_y =</span> (pickup_latitude <span class="sc" style="color: #5E5E5E;">-</span> y0) <span class="sc" style="color: #5E5E5E;">/</span> span,</span>
<span id="cb12-15">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">round</span>(pixels <span class="sc" style="color: #5E5E5E;">*</span> unit_scaled_x)), </span>
<span id="cb12-16">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">round</span>(pixels <span class="sc" style="color: #5E5E5E;">*</span> unit_scaled_y))</span>
<span id="cb12-17">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-18">  <span class="fu" style="color: #4758AB;">count</span>(x, y, <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"pickup"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb12-19">  <span class="fu" style="color: #4758AB;">collect</span>()</span>
<span id="cb12-20"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>31.101 sec elapsed</code></pre>
</div>
</div>
<p>My laptop solves this binning problem in about 30 seconds. As before, I’ll use <code>glimpse()</code> to take a peek at the results:</p>
<div class="cell" data-hash="index_cache/html/glimpse-pickup_fae4536072ae01f505509c9d4d61bb91">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">glimpse</span>(pickup)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 4,677,864
Columns: 3
$ x      &lt;int&gt; 1058, 1024, 1162, 3525, 865, 794, 856, 705, 647, 762, 802, 1207…
$ y      &lt;int&gt; 2189, 2040, 2265, 552, 1983, 1646, 2018, 1590, 1723, 2010, 1645…
$ pickup &lt;int&gt; 6514, 5030, 3818, 67, 2408, 2415, 932, 3607, 2664, 1024, 2207, …</code></pre>
</div>
</div>
<p>This is a data frame where <code>x</code> and <code>y</code> specify the pixel, and and a <code>pickup</code> counts the number of pickups associated with that pixel. Note that the pixels aren’t arranged in a meaningful order, and only those pixels with at least one pickup (a little under 30% of all pixels) are included in data.</p>
<p>We can visualise this in a number of ways. One possibility is to create a scatter plot, using the <code>pickup</code> value to specify the shading of each plot marker:</p>
<div class="cell" data-hash="index_cache/html/ggplot2-image-2_b70a8ab656a5717a6cb46fb50a9f0cb9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;">ggplot</span>(pickup) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb16-4">    <span class="fu" style="color: #4758AB;">aes</span>(x, y, <span class="at" style="color: #657422;">colour =</span> <span class="fu" style="color: #4758AB;">log10</span>(pickup)), </span>
<span id="cb16-5">    <span class="at" style="color: #657422;">size =</span> .<span class="dv" style="color: #AD0000;">01</span>, </span>
<span id="cb16-6">    <span class="at" style="color: #657422;">stroke =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb16-7">    <span class="at" style="color: #657422;">show.legend =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb16-8">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-9">  <span class="fu" style="color: #4758AB;">scale_colour_gradient</span>(<span class="at" style="color: #657422;">low =</span> <span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">high =</span> <span class="st" style="color: #20794D;">"#800020"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-10">  <span class="fu" style="color: #4758AB;">scale_x_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;">scale_y_continuous</span>(<span class="at" style="color: #657422;">expand =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;">theme_void</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb16-13">  <span class="fu" style="color: #4758AB;">coord_equal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/ggplot2-image-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>12.159 sec elapsed</code></pre>
</div>
</div>
<p>As you can see, {ggplot2} has no problems drawing a scatter plot from a few million observations, and it’s an improvement on our first attempt. However, we can do better. Instead of trying to draw a scatter plot of all the points listed in the <code>pickup</code> data frame, let’s use it to populate a bitmap. We’ll create a 4000x4000 matrix, and fill in the cells with the pickup counts at the corresponding pixel.</p>
<p>The computation is a two part process. First, we use <code>expand_grid()</code> to initialise a “grid like” tibble containing all combination of <code>x</code> and <code>y</code> values, and use <code>left_join()</code> to populate a column containing the <code>pickup</code> counts:</p>
<div class="cell" data-hash="index_cache/html/expand-to-grid_c877d4bfda046b19d7ac429d8f1aef87">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb19-2">grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">expand_grid</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>pixels, <span class="at" style="color: #657422;">y =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>pixels) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;">left_join</span>(pickup, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">pickup =</span> <span class="fu" style="color: #4758AB;">replace_na</span>(pickup,  <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>8.228 sec elapsed</code></pre>
</div>
</div>
<p>Note that the elements of <code>grid</code> are complete (all 16 million pixels are there), and meaningfully ordered. We can check this by calling <code>glimpse()</code> again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">glimpse</span>(grid)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 16,000,000
Columns: 3
$ x      &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …
$ y      &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …
$ pickup &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …</code></pre>
</div>
</div>
<p>Because the elements of <code>grid$pickup</code> are arranged in this fashion, it is easy to construct the required 4000x4000 matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb23-2">pickup_grid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(</span>
<span id="cb23-3">  <span class="at" style="color: #657422;">data =</span> grid<span class="sc" style="color: #5E5E5E;">$</span>pickup,</span>
<span id="cb23-4">  <span class="at" style="color: #657422;">nrow =</span> pixels,</span>
<span id="cb23-5">  <span class="at" style="color: #657422;">ncol =</span> pixels</span>
<span id="cb23-6">)</span>
<span id="cb23-7"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.02 sec elapsed</code></pre>
</div>
</div>
<p>This is our bitmap. It’s a matrix whose values correspond to the pixel intensities to be plotted. Just so you can see what it looks like, here’s a tiny 10x10 pixel section from that matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">pickup_grid[<span class="dv" style="color: #AD0000;">2000</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2009</span>, <span class="dv" style="color: #AD0000;">2000</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2009</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]   11    2    2    4    6    3    7   15   54    96
 [2,]    5    3    3    1    5   27   47   55   74   100
 [3,]    5    6    7   38   39   48   60   99   95    75
 [4,]   16   37   51   45   35   61   64   67   51    18
 [5,]   67   50   97  141   55   24   26   26   40    29
 [6,]   65  133   56   18   11   10  659    6    4     9
 [7,]   35   78   13    3   82  105   68    2    2     4
 [8,]    7    7    4    3    7   25    4    2    2     3
 [9,]    8   10    3    3   17    5   98    2    4     3
[10,]    8    6    8    2   19    6    1    2    3    23</code></pre>
</div>
</div>
<p>Now that the data are in an image-like format, all we have to do is write the image file. We don’t even need {ggplot2}: we can use <code>image()</code> to draw the bitmap directly. Here’s a little helper function I wrote to do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">render_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(mat, <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"white"</span>, <span class="st" style="color: #20794D;">"#800020"</span>)) {</span>
<span id="cb27-2">  op <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mar =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb27-3">  shades <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">colorRampPalette</span>(cols)</span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;">image</span>(</span>
<span id="cb27-5">    <span class="at" style="color: #657422;">z =</span> <span class="fu" style="color: #4758AB;">log10</span>(<span class="fu" style="color: #4758AB;">t</span>(mat <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)),</span>
<span id="cb27-6">    <span class="at" style="color: #657422;">axes =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb27-7">    <span class="at" style="color: #657422;">asp =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb27-8">    <span class="at" style="color: #657422;">col =</span> <span class="fu" style="color: #4758AB;">shades</span>(<span class="dv" style="color: #AD0000;">256</span>),</span>
<span id="cb27-9">    <span class="at" style="color: #657422;">useRaster =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb27-10">  )</span>
<span id="cb27-11">  <span class="fu" style="color: #4758AB;">par</span>(op)</span>
<span id="cb27-12">}</span></code></pre></div>
</div>
<p>Here’s what happens when I call it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">tic</span>()</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;">render_image</span>(pickup_grid)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/taxi-scatter-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.149 sec elapsed</code></pre>
</div>
</div>
<p>This method is slightly faster the previous version, but the real advantage isn’t speed – it’s clarity. There’s less blurring in the denser parts of the plot (midtown Manhattan), and there’s also more clarity in the sparser areas (e.g., the Brooklyn streets are sharper).</p>
<p>We can push it slightly further by tweaking the colour palette. Plotting the logarithm of the number of pickups ensures that all the streets are visible (not just the extremely common ones), but it does have the downside that it’s hard to tell the difference between moderately popular pickup locations and extremely popular ones. A well-chosen diverging palette helps rectify this a little:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">render_image</span>(pickup_grid, <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#002222"</span>, <span class="st" style="color: #20794D;">"white"</span>, <span class="st" style="color: #20794D;">"#800020"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index_files/figure-html/taxi-scatter-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>At long last we have a visualisation that shows all the billion rows of data, crisply delineates all the streets on which taxi pickups are at least moderately frequent, <em>and</em> does a reasonable job of highlighting those locations where taxi pickups are extremely common. Yay! 🎉</p>
</section>
<section id="lessons-learned" class="level2">
<h2 class="anchored" data-anchor-id="lessons-learned">Lessons learned?</h2>
<p>To wrap this post up, I think it’s useful to reflect on the process I went through in constructing this image. In one sense, the process I’ve gone through here isn’t actually much different to what we do when creating any other data visualisation in R. For example, if you’re working in {tidyverse}, a typical work flow is to use {dplyr} to wrangle the data into an appropriate format and then use {ggplot2} to plot the data. What I’ve done here isn’t that different: okay yes, my {dplyr} code only works because it’s backed by the {arrow} engine, and in the end I decided to use base graphics rather than {ggplot2} to draw the final image, but I don’t think those differences constitute a major departure from my usual approach.</p>
<p>That being said, I think there are two key principles I’ve taken away from this. When trying to visualise very large data sets in R, the things I’m going to try to keep in mind are:</p>
<ul>
<li><p>Push as much of the computational work onto {arrow} as possible. The {arrow} package is designed specifically to handle these kinds of data manipulation problems, and things go much more smoothly when I don’t make {ggplot2} do the computational heavy lifting.</p></li>
<li><p>Think carefully about the data representation. The reason why the final plot drawn with <code>image()</code> is nicer than the earlier ones drawn with {ggplot2} has nothing at all to do with the “base R vs tidyverse” issue. Instead, it’s because the data structure I created (i.e., <code>pickup_grid</code>) is the exact bitmap that needed to be rendered, and that’s exactly what <code>image()</code> is good for.</p></li>
</ul>
<p><br><br></p>
<!--------------- appendices go here ----------------->
</section>



<div id="quarto-appendix" class="default"><section id="acknowledgments" class="level2 appendix"><h2 class="quarto-appendix-heading">Acknowledgments</h2><div class="quarto-appendix-contents">

<p>Thank you to <a href="https://twitter.com/kae_suarez">Kae Suarez</a>, <a href="https://twitter.com/keithadambritt">Keith Britt</a>, and <a href="https://twitter.com/fmic_">François Michonneau</a> for reviewing this post.</p>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This post is adapted from the <a href="https://github.com/djnavarro/arrow-nyc-taxi-scatter">NYC taxi scatter GitHub repository</a> that I put together to chat about on <a href="https://www.youtube.com/c/TheDataThread/about">The Data Thread</a> live interviews series, <em>Pulling the Thread</em>↩︎</p></li>
<li id="fn2"><p>It’s worth noting that you can connect to remote data sets as well as local ones, but that’s a bit beyond the scope of this post.↩︎</p></li>
<li id="fn3"><p>There are a few small hints that the underlying data structure is different though. For instance, the data types associated with each column refer to Arrow data types (e.g., timestamp, int32, int64, etc) rather than R data types. I’m not going to talk about those here, but if you’re looking for information about this topic, there’s a short <a href="https://arrow-user2022.netlify.app/advanced.html#how-are-scalar-types-mapped">summary of Arrow data types</a> on the workshop website, and a <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/">longer blog post on Arrow data types</a> on this blog.↩︎</p></li>
<li id="fn4"><p>I’m not talking about the fact that there’s no legend or explanatory text: although those are real failures of data visualisation, they’re easily fixable. {ggplot2} has lots of tools for annotating plots appropriately.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {How to Visualise a Billion Rows of Data in {R} with {Apache}
    {Arrow}},
  date = {2022-08-23},
  url = {https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“How to Visualise a Billion Rows of Data
in R with Apache Arrow.”</span> August 23, 2022. <a href="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows">https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>Data Visualisation</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/index.html</guid>
  <pubDate>Mon, 22 Aug 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-08-23_visualising-a-billion-rows/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Arrays and tables in Arrow</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/index.html</link>
  <description><![CDATA[ 




<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<blockquote class="blockquote">
<p>My catholic taste in the devil<br>
All gilded and golden, yes, I’m your girl<br>
Hell, if it glitters, I’m going<br>
&nbsp;&nbsp;– <em>Heaven is Here</em>, Florence + The Machine</p>
</blockquote>
<p>If you’ve made the life choice to become a developer advocate with a focus on <a href="https://arrow.apache.org/">Apache Arrow</a>, you’re probably not unfamiliar with masochism.</p>
<p>Don’t believe me? Let’s consider my past choices:</p>
<ul>
<li>My first attempt to write about the topic didn’t even talk about Arrow: the post was a descent into the madness of <a href="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/">data serialisation in R</a> and the RDS format. I don’t think I need to explain the pain that one involved.</li>
<li>My second attempt went a little better, and I managed to write a few thousand words on <a href="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/">getting started with Apache Arrow</a> for the R user. Much of that post was spent on answering very technical questions like “what is this?” and “why do I care?” These are excellent questions to answer, but nevertheless it was a learning experience for me, shall we say? There were headaches.</li>
<li>My third attempt talked about how <a href="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/">the <strong>arrow</strong> package supplies <strong>dplyr</strong> bindings</a>, allowing R to perform data manipulation on Arrow data using familiar <strong>dplyr</strong> syntax. It wasn’t a bad post to be honest, but I did go down a very strange path with all the <em>Magicians</em> gifs and as anyone familiar with the series knows, the magic comes from pain.</li>
<li>As for my fourth attempt, the <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/">data types in Arrow and R</a> post… look, if you’ve ever had a secret desire to see what happens when I am reduced to tears and wailing at the horrors of the world and of IEEE 754, then oh my yes, this is the extremely long blog post for you.</li>
</ul>
<p>I don’t regret any of these choices, particularly the fact that they have helped keep me gainfully employed, but there’s no denying the fact that a lot of blood and tears have been spilled in the endeavour.</p>
<p>In any case, what I am trying to convey to you, dear reader, is that – setting aside the superficial trappings of whips and chains and the various other devices that propelled E. L. James to great fortune – I am intimately acquainted with pain. It is important to me that you understand this, and that when I mention the pain I encountered when trying to learn how the <strong>arrow</strong> R package works, I am not using the term lightly.</p>
<p>So let talk about my latest pain point, shall we?</p>
<p><br><br></p>
<section id="data-objects" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-objects">Data objects</h2>
<p>Here’s the thing that has been giving me grief. Suppose you are an R user who is new to this whole Apache Arrow business. You’ve installed the <strong>arrow</strong> package, and you’re now reading the <a href="https://arrow.apache.org/docs/r/articles/arrow.html">Get Started</a> page in the hopes that you too will be able to, well, get started. When you visit this page, one of the very first things you encounter is a table listing a variety of data structures used by Arrow. Specifically, the table tells you that Arrow has classes for zero-dimensional data (scalars), one-dimensional data (arrays and other vector-like data), and two-dimensional data (tabular or data frame-like data). It shows you that…</p>
<p>…actually, you know what? Instead of describing it, let’s take a look at the actual table. Here’s what it tells you about the hierarchy of data structures in <strong>arrow</strong>:</p>
<p><br></p>
<table class="table">
<colgroup>
<col style="width: 1%">
<col style="width: 8%">
<col style="width: 25%">
<col style="width: 63%">
</colgroup>
<thead>
<tr class="header">
<th>Dim</th>
<th>Class</th>
<th>Description</th>
<th>How to create an instance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td><code>Scalar</code></td>
<td>single value and its <code>DataType</code></td>
<td><code>Scalar$create(value, type)</code></td>
</tr>
<tr class="even">
<td>1</td>
<td><code>Array</code></td>
<td>vector of values and its <code>DataType</code></td>
<td><code>Array$create(vector, type)</code></td>
</tr>
<tr class="odd">
<td>1</td>
<td><code>ChunkedArray</code></td>
<td>vectors of values and their <code>DataType</code></td>
<td><code>ChunkedArray$create(..., type)</code> or alias <code>chunked_array(..., type)</code></td>
</tr>
<tr class="even">
<td>2</td>
<td><code>RecordBatch</code></td>
<td>list of <code>Array</code>s with a <code>Schema</code></td>
<td><code>RecordBatch$create(...)</code> or alias <code>record_batch(...)</code></td>
</tr>
<tr class="odd">
<td>2</td>
<td><code>Table</code></td>
<td>list of <code>ChunkedArray</code> with a <code>Schema</code></td>
<td><code>Table$create(...)</code>, alias <code>arrow_table(...)</code>, or <code>arrow::read_*(file, as_data_frame = FALSE)</code></td>
</tr>
<tr class="even">
<td>2</td>
<td><code>Dataset</code></td>
<td>list of <code>Table</code>s with the same <code>Schema</code></td>
<td><code>Dataset$create(sources, schema)</code> or alias <code>open_dataset(sources, schema)</code></td>
</tr>
</tbody>
</table>
<p><br></p>
<p>Now, perhaps there are some devilishly clever R users who can look at this table and immediately decode all its mysteries. But I will be honest with you, and confess that I am not one of these people. When I first started learning Arrow, I had no idea what any of this meant. This whole table was completely intimidating. I looked at it and thoughts roughly along the following lines went through my head:</p>
<blockquote class="blockquote">
<p>Oh… f**k me. I’m completely out of my depth, I am too stupid to understand any of this. I should quit now and find a new job before everyone realises I’m a total fraud. They made a terrible mistake hiring me and… blah blah blah</p>
</blockquote>
<p>The self-pity went on for a while and the names I called myself became quite inappropriate for a family restaurant, but I’ll be kind and spare you the tiresome details.</p>
<p>Eventually I remembered that this is my impostor syndrome talking and that I am in fact quite good at learning technical concepts. The problem I’m encountering here is that this table isn’t self-explanatory, and isn’t accompanied by the explanatory scaffolding that helps new users orient themselves. That’s a documentation issue, not a user problem. At a later point someone<sup>1</sup> might need to add a few explanatory paragraphs and probably a vignette to ensure that new Arrow users don’t get confused at this point, but for now let’s see if we can’t unpack it here?</p>
<p>Looking at this table, a new user might have some very reasonable questions. What exactly is a <code>ChunkedArray</code> and how is it different from an <code>Array</code>? Why are these necessary as distinct concepts? While we are at it, what is a <code>RecordBatch</code>, a <code>Table</code> and a <code>Dataset</code>, and what makes them different from one another? Unless someone takes the time to explain it all to you, it does look like Arrow is unnecessarily complicated, doesn’t it? These are core concepts in Arrow, but new users don’t know what they are yet!</p>
<p>In short, the time has come to tell the story behind this table. With that in mind, I’ll go through this table row by row and talk about what each line actually means.<sup>2</sup></p>
<p>Adventure!</p>
<p>Romance!</p>
<p>Drama!</p>
<p>Joy!</p>
<p>I am absolutely not going to deliver any of those things, but hopefully this will be useful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(spotifyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">scipen =</span> <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
</div>
<div class="cell">

</div>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=Q4Ez9pitRJ0"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/heaven_is_here.png" class="img-fluid figure-img" width="1281"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="scalars" class="level2">
<h2 class="anchored" data-anchor-id="scalars">Scalars</h2>
<p>Let’s start with scalars. A scalar object is simply a single value, that can be of any type. It might be an integer, a string, a timestamp, or any of the different data types that Arrow supports. I won’t talk about the different types in this post because I already wrote <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/">an extremely long post on that topic</a>. For the current purposes, what matters is that a scalar is <em>one</em> value. It is “zero dimensional”. All higher order data structures are built on top of scalars, so they are in some sense fundamental, but there is not much I need to say about them for this post. For the record though, you can create a scalar using <code>Scalar$create()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="st" style="color: #20794D;">"hi"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
hi</code></pre>
</div>
</div>
<p>Oh the excitement. I can barely contain myself.</p>
<p><br><br></p>
</section>
<section id="arrays" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="arrays">Arrays</h2>
<blockquote class="blockquote">
<p>All the gods have been domesticated<br>
And heaven is now overrated<br>
&nbsp;&nbsp;– <em>Cassandra</em>, Florence + The Machine</p>
</blockquote>
<p>Okay, so scalars aren’t very interesting for the purposes of this post. Let’s turn our attention to arrays next. An array is roughly analogous to a vector in R, and the <strong>arrow</strong> package is written in a way that allows you to interact with Arrow arrays in ways that feel familiar to R users.</p>
<p>I can create an array using <code>Array$create()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">arr <span class="ot" style="color: #003B4F;">&lt;-</span> Array<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"hello"</span>, <span class="st" style="color: #20794D;">"cruel"</span>, <span class="st" style="color: #20794D;">"world"</span>))</span>
<span id="cb4-2">arr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "hello",
  "cruel",
  "world"
]</code></pre>
</div>
</div>
<p>I can create a subset of an array using square brackets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">arr[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "cruel",
  "world"
]</code></pre>
</div>
</div>
<p>Notice that I used <code>2:3</code> here to extract the 2nd and 3rd elements of the array. Unlike R, Arrow uses <a href="https://en.wikipedia.org/wiki/Zero-based_numbering">zero-based indexing</a>, so if I were writing this using “Arrow native” code, the relevant subset would be <code>1:2</code>. However, as a general principle, <strong>arrow</strong> tries to make Arrow data structures behave like R native objects. The design principle here is that you should be able to use your usual R code to manipulate Arrow data objects, without needing to think too much about the Arrow implementation.</p>
<p>I’m stressing the principle now because later in this post I am going to violate it!</p>
<p>Because one of the other things <strong>arrow</strong> does is expose a low-level interface to Arrow. You don’t need to use this (and in general you don’t really need to), but it’s there if you want it, and because this post explores the R/Arrow interface I am going to use it sometimes. When that happens, you’ll start to see zero-based indexing appear! I promise I will signpost this every time it happens so you aren’t caught unawares.</p>
<p><br></p>
<section id="structure-of-arrays" class="level3">
<h3 class="anchored" data-anchor-id="structure-of-arrays">Structure of arrays</h3>
<p>Anyway, as I was saying, an array in Arrow is analogous to a vector in R: it is a sequence of values with known length, all of which have the same type. When you’re using the <strong>arrow</strong> package on a day-to-day basis, you really don’t need to know much more than that. But if you want to understand data objects in Arrow properly, it helps to do a slightly deeper dive. All the low level details are described on the <a href="https://arrow.apache.org/docs/format/Columnar.html">Arrow specification</a> page, but the full specification is a little overwhelming when you’re first starting out. I’ll start by introducing two key concepts:</p>
<ul>
<li>The data in an array are stored in one or more <strong>buffers</strong>. A buffer is a sequential virtual address space (i.e., block of memory) with a given length. As long as you have a pointer specifting the memory address for the buffer (i.e., where it starts), you can reach any byte in the buffer using an “offset” value that tells you the location of that byte relative to the start of the buffer.</li>
<li>The <strong>physical layout</strong> of an array is a term used to describe how data in an array is laid out in memory, without taking into account of how that information is interpreted. For example, a 32-bit signed integer and 32-bit floating point number have the same layout: they are both 32 bits, represented as 4 contiguous bytes in memory. The meaning is different, but the layout is the same. However, unlike simple scalars, an array can have a relatively complex layout, storing data and metadata in a structured arrangement.</li>
</ul>
<p><br></p>
<section id="layouts-and-buffers" class="level4">
<h4 class="anchored" data-anchor-id="layouts-and-buffers">Layouts and buffers</h4>
<p>Let’s unpack some of these ideas using a simple array of integer values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">arr <span class="ot" style="color: #003B4F;">&lt;-</span> Array<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="fu" style="color: #4758AB;">c</span>(1L, <span class="cn" style="color: #8f5902;">NA</span>, 2L, 4L, 8L))</span>
<span id="cb8-2">arr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;int32&gt;
[
  1,
  null,
  2,
  4,
  8
]</code></pre>
</div>
</div>
<p>What precisely is this thing? Well that’s a mess of different questions. In one sense, the answer is straightforward. It’s an Arrow array, and the values contained within the array are all stored as signed 32 bit integers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">arr<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Int32
int32</code></pre>
</div>
</div>
<p>But that’s not a very satisfying answer at some level. What does this thing look like in memory? How is the information structured? In other words, what is the <strong>physical layout</strong> of this object?</p>
<p>The Arrow documentation page helps us answer that. Our array contains two pieces of metadata, namely the length of the array (i.e.&nbsp;5) and a count of the number of null values (i.e., 1), both of which are stored as 64-bit integers. The <strong>arrow</strong> package makes it easy to extract these values, because the Array object has fields and methods that will return them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">arr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">length</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">arr<span class="sc" style="color: #5E5E5E;">$</span>null_count</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>Okay, that seems reasonable. What about the data itself? Where is that stored? In Arrow, these are stored within buffers, a contiguous block of memory assigned to the array. The number of buffers associated with an array depends on the exact type of data being stored. For an integer array such as <code>arr</code>, there are two buffers, a <strong>validity bitmap buffer</strong> and a <strong>data value buffer</strong>. So we have a data structure that could be depicted like this:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/array_layout.svg" class="img-fluid"></p>
</div>
</div>
<p>In this figure I’ve shown the array as a grey rectangle subdivided into two parts, one for the metadata and the other for the buffers. Underneath I’ve unpacked this it a little, showing the contents of the two buffers in the area enclosed in a dotted line. At the lowest level of the figure, you can see the contents of specific bytes. Notice that the numbering of the bytes starts at zero: I’m referring to Arrow data structures here, and Arrow is zero-indexed. Later in the post I’ll talk about how you can access the raw content of these buffers, but for now let’s talk about what each of these buffers contains.</p>
<p><br></p>
</section>
<section id="the-validity-bitmap-buffer" class="level4">
<h4 class="anchored" data-anchor-id="the-validity-bitmap-buffer">The validity bitmap buffer</h4>
<p>The validity bitmap is binary-valued, and contains a 1 whenever the corresponding slot in the array contains a valid, non-null value. Setting aside some very tiresome technicalities we can imagine that the validity bitmap is a buffer that contains the following five bits:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="dv" style="color: #AD0000;">10111</span></span></code></pre></div>
<p>Except… this isn’t really true, for three reasons. First, memory is allocated in byte-size units, so we have to pad it out to the full 8 bits. That gives us the bitmap <code>10111000</code>. Second, that’s still a little inaccurate because – assuming you read left to right – you’re looking it with the “most significant bit” first (i.e., <a href="https://en.wikipedia.org/wiki/Endianness">big endian format</a>), and the bits are actually organised with the least significant bit first (i.e., little endian format) so the bits in this byte should be shown in the reverse order, <code>00011101</code>. Third, this is still misleading because I’ve not padded it enough. For reasons that make a lot of sense if you start diving into the Arrow specifications at a low level, you have to imagine another 503 trailing zeros.<sup>3</sup> So that the nice and neat <code>10111</code> I’ve shown above actually looks like this in memory:</p>
<div class="grid">
<div class="g-col-6">
<table class="table">
<thead>
<tr class="header">
<th>Byte 0 (validity bitmap)</th>
<th>Bytes 1-63</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>00011101</code></td>
<td><code>0</code> (padding)</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>I probably wouldn’t have gone into quite this much detail, except for the fact that you can find this exact example when reading about <a href="https://arrow.apache.org/docs/format/Columnar.html#fixed-size-primitive-layout">physical layouts</a> in the Arrow documentation, and I think it’s helpful to have a clear point of contact between this post and the documentation.</p>
<p>Anyway, I realise I’m being boring. So let’s move on.</p>
<p><br></p>
</section>
<section id="the-data-value-buffer" class="level4">
<h4 class="anchored" data-anchor-id="the-data-value-buffer">The data value buffer</h4>
<p>Okay, now let’s have a look at the value buffer. It’s essentially the same logic. Again notice that its padded out to a length of 64 bytes to preserve natural alignment, but for our purposes those details don’t matter too much. Here’s the diagram showing the physical layout, again lifted straight from the Arrow specification page:</p>
<div class="grid">
<div class="g-col-12">
<table class="table">
<colgroup>
<col style="width: 14%">
<col style="width: 17%">
<col style="width: 16%">
<col style="width: 17%">
<col style="width: 17%">
<col style="width: 17%">
</colgroup>
<thead>
<tr class="header">
<th>Bytes 0-3</th>
<th>Bytes 4-7</th>
<th>Bytes 8-11</th>
<th>Bytes 12-15</th>
<th>Bytes 16-19</th>
<th>Bytes 20-63</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>1</code></td>
<td>unspecified</td>
<td><code>2</code></td>
<td><code>4</code></td>
<td><code>8</code></td>
<td>unspecified</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Each integer occupies 4 bytes, as required by the int32 data type. (If you want to know more about how Arrow represents integers, it’s discussed in the <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/#integer-types">data types</a> post).</p>

<!--
Just to give you a sense of what that looks like, I'll take a peek at the bits that make up the integer `8` (i.e., the contents of Bytes 16-19). I could do this using base R with a command like `intToBits(8L)` but the `bits()` function from the **pryr** package produces a more compact output so I'll do this:


::: {.cell}

```{.r .cell-code}
pryr::bits(8L)
```

::: {.cell-output .cell-output-stdout}
```
[1] "00000000 00000000 00000000 00001000"
```
:::
:::


Or, to condense it even further, we can express each byte as a hexadecimal value. That's what the `pryr::bytes()` function does, so this is an equivalent way of writing out the content of those four bytes:


::: {.cell}

```{.r .cell-code}
pryr::bytes(8L)
```

::: {.cell-output .cell-output-stdout}
```
[1] "00 00 00 08"
```
:::
:::


Putting all this together you can imagine -- roughly speaking -- what the contents of the data buffer should look like. Ignoring all the trailing bytes used for padding, and not worrying too much about what's going on with the command I've used to extract them, the 20 bytes worth of actual data in the data buffer look like this:


::: {.cell}

```{.r .cell-code}
arr$data()$buffers[[2]]$data()
```

::: {.cell-output .cell-output-stdout}
```
 [1] 01 00 00 00 00 00 00 80 02 00 00 00 04 00 00 00 08 00 00 00
```
:::
:::


Notice that the last four bytes shown are written `08 00 00 00` (little endian), whereas the bytes produced by `pryr::bytes()` are shown in the other direction. It's the same thing, just a different display convention! 

<br>

#### Um... summary please?

Okay, let's be honest. This section went down into the weeds a bit. I personally find it helpful to understand how all these concepts play out in terms of actual bits in memory, but it does get a bit much. So let's pull back and ask ourselves what matters here. For me, the big picture is this: an Arrow array is an immutable object with an "metadata + buffers" structure that is designed to be efficient, and each buffer is a contiguous bloc of memory on your machine. 

-->
<p><br></p>
</section>
</section>
<section id="peeking-inside-arrays" class="level3">
<h3 class="anchored" data-anchor-id="peeking-inside-arrays">Peeking inside arrays</h3>
<p>I mentioned earlier that <strong>arrow</strong> exposes some “low level” tools that allow you to interact with Arrow data objects in more of a bare bones fashion than a data analyst normally would. For example, you wouldn’t normally have a need to extract the raw bytes that comprise the buffers in an array. There’s no “high level” interface that lets you do this. But if you really want to see what’s going on under the hood you absolutely can, and <strong>arrow</strong> lets you do this. To show you how it works, I’ll uses a small data set containing the track listing for the new Florence + The Machine album, <a href="https://en.wikipedia.org/wiki/Dance_Fever_(album)">Dance Fever</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">dance_fever <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv_arrow</span>(<span class="st" style="color: #20794D;">"dance_fever_tracks.csv"</span>)</span>
<span id="cb17-2">dance_fever</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 14 × 3
   track_number title             duration
          &lt;int&gt; &lt;chr&gt;                &lt;int&gt;
 1            1 King                   280
 2            2 Free                   234
 3            3 Choreomania            213
 4            4 Back in Town           236
 5            5 Girls Against God      280
 6            6 Dream Girl Evil        227
 7            7 Prayer Factory          73
 8            8 Cassandra              258
 9            9 Heaven Is Here         111
10           10 Daffodil               214
11           11 My Love                231
12           12 Restraint               48
13           13 The Bomb               165
14           14 Morning Elvis          262</code></pre>
</div>
</div>
<p>I’ll start by taking the <code>duration</code> variable and creating an Arrow array from it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">duration <span class="ot" style="color: #003B4F;">&lt;-</span> Array<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(dance_fever<span class="sc" style="color: #5E5E5E;">$</span>duration)</span>
<span id="cb19-2">duration</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;int32&gt;
[
  280,
  234,
  213,
  236,
  280,
  227,
  73,
  258,
  111,
  214,
  231,
  48,
  165,
  262
]</code></pre>
</div>
</div>
<p>As a reminder, here’s a crude schematic diagram showing how that object is laid out. It has some metadata that you’ve already learned how to extract (e.g., using <code>duration$null_count</code>), and it has two data buffers that I talked about at tedious length but haven’t actually <em>shown</em> you yet:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/array_layout_with_nulls.svg" class="img-fluid"></p>
</div>
</div>
<p>To take a more detailed look at the data stored in the <code>duration</code> object, we can call its <code>data()</code> method to return an <code>ArrayData</code> object. Admittedly, the results are not immediately very exciting:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">duration<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ArrayData</code></pre>
</div>
</div>
<p>This output is a little underwhelming because at the moment the print method for an <code>ArrayData</code> object doesn’t do anything except print the class name. Boring! However, because an <code>ArrayData</code> object is stored as an R6 object, all the information is tucked away in an environment. We can find out the names of objects contained in that environment easily enough:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">names</span>(duration<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] ".__enclos_env__" "buffers"         "offset"          "null_count"     
 [5] "length"          "type"            ".:xp:."          "clone"          
 [9] "print"           "set_pointer"     "pointer"         "initialize"     </code></pre>
</div>
</div>
<p>Hm. There’s a <code>buffers</code> variable in there. I wonder what that is…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">duration<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>()<span class="sc" style="color: #5E5E5E;">$</span>buffers</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
NULL

[[2]]
Buffer</code></pre>
</div>
</div>
<p>Oh look, there are two buffers here! What’s the chance that the first one is the validity bitmap and the second one is the data buffer? (Answer: 100% chance). It turns out that this is another situation where a <code>Buffer</code> object belongs to an R6 class with a boring print method. I could bore you by going through the same process I did last time, but I’d rather not waste your time. It turns out that <code>Buffer</code> objects have a <code>data()</code> method of their own. When we call the <code>data()</code> method returns the bytes stored in the relevant buffer as a raw vector. At long last, we can pull out the raw bytes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">data_buffer <span class="ot" style="color: #003B4F;">&lt;-</span> duration<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>()<span class="sc" style="color: #5E5E5E;">$</span>buffers[[<span class="dv" style="color: #AD0000;">2</span>]]<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb27-2">data_buffer</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 18 01 00 00 ea 00 00 00 d5 00 00 00 ec 00 00 00 18 01 00 00 e3 00 00 00 49
[26] 00 00 00 02 01 00 00 6f 00 00 00 d6 00 00 00 e7 00 00 00 30 00 00 00 a5 00
[51] 00 00 06 01 00 00</code></pre>
</div>
</div>
<p>Shockingly, I personally cannot read binary, but as it turns out the <code>readBin()</code> function from base R is perfectly well equipped to do that. Let’s see what happens when we interpret these 56 bytes as a sequence of 14 integers:<sup>4</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">readBin</span>(data_buffer, <span class="at" style="color: #657422;">what =</span> <span class="st" style="color: #20794D;">"integer"</span>, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">14</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 280 234 213 236 280 227  73 258 111 214 231  48 165 262</code></pre>
</div>
</div>
<p>Those are the values stored in the <code>duration</code> array. Yay!</p>
<p><br></p>
</section>
<section id="prettier-arraydata" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="prettier-arraydata">Prettier ArrayData</h3>
<p>A little digression before we move on to talking about chunked arrays. Later in this post I’ll occasionally want to show you the internal structure of an array, just so you can see that the buffers and metadata have the values you’d expect them to. The information I need for this is stored in the <code>ArrayData</code> object returned by a command like <code>duration$data()</code> but as we saw in the last section there’s no convenient way to display these objects. To make this a little simpler, I wrote my own <code>array_layout()</code> function that shows you the metadata and buffer contents associated with an Arrow array – the source code is <a href="display_array_layout.R">here</a>) — that doesn’t work for all array types, but can handle the ones I’m using in this post. When applied to the <code>duration</code> array it produces this output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">duration <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">array_layout</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
── Metadata 
• length : 14
• null count : 0

── Buffers 
• validity : null
• data : 280 234 213 236 280 227 73 258 111 214 231 48 165 262</code></pre>
</div>
</div>
<p>The output here is divided into two sections, structured to mirror how the Arrow columnar specification is described on the website (and also to mirrot the diagrams in the post). There is one section showing the metadata variables stored: array length, and a count of the number of null values. Underneath that we have a section listing all the buffers associated with an array. For an integer array like <code>duration</code> there are two buffers, the validity bitmap buffer and the data values buffer.</p>
<p>The <code>array_layout()</code> function also works for string arrays and produces similar output. However, character data in Arrow are stored using three buffers rather than two. As before the first buffer stores the validity bitmap. The second buffer is a vector of offsets specifying the locations for each of the substrings. The third buffer contains the character data itself. Here’s an example of that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">dance_fever<span class="sc" style="color: #5E5E5E;">$</span>title <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb33-2">  Array<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;">array_layout</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
── Metadata 
• length : 14
• null count : 0

── Buffers 
• validity : null
• offset : 0 4 8 19 31 48 63 77 86 100 108 115 124 132 145
• data : KingFreeChoreomaniaBack in TownGirls Against GodDream Girl EvilPrayer
FactoryCassandraHeaven Is HereDaffodilMy LoveRestraintThe BombMorning Elvis</code></pre>
</div>
</div>
<p>If you want more information about how character data are stored in Arrow and how the offset buffer and data buffer are used to define the array as a whole, I wrote about it in tiresome detail in my <a href="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/#character-types">data types post</a>. For the purposes of this post, it’s enough to understand that string arrays are organised using these three buffers.</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=5GHXEGz3PJg"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/hunger.png" class="img-fluid figure-img" width="945"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="chunked-arrays" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="chunked-arrays">Chunked arrays</h2>
<blockquote class="blockquote">
<p>I need my golden crown of sorrow, my bloody sword to swing<br>
I need my empty halls to echo with grand self-mythology<br>
’Cause I am no mother, I am no bride<br>
I am king<br>
&nbsp;&nbsp;– <em>King</em>, Florence + The Machine</p>
</blockquote>
<p>The next entry in the table of data objects refers to “chunked arrays”. In most respects a chunked array behaves just like a regular array. It is a one-dimensional data structure. It requires every value stored to be of the same type: all integers, or all strings, or whatever. From the perspective of a <em>data scientist</em> who just wants to analyse the data, an array and a chunked array are essentially identical. Under the hood, however, they are quite different – and the reason for this is fundamentally a <em>data engineering</em> issue. In this section I’ll unpack this.</p>
<p>Recall at the beginning I emphasised that an array is an <a href="https://en.wikipedia.org/wiki/Immutable_object">immutable object</a>. Once an array has been created by Arrow, the values it stores cannot be altered. The decision to make arrays immutable reduces the need to create copies: many other objects can all safely refer to the array (via pointers) without making copies of the data, safe in the knowledge that it is impossible<sup>5</sup> for anyone else to change the data values. For large data sets that’s a huge advantage: you really don’t want to be making copies of data if you can avoid doing so. Immutable arrays are good.</p>
<p>Well, mostly good.</p>
<p>There are some limitations to immutable arrays, and one of the big ones is prompted by the very simple question: what happens when a new batch of data arrives? An array is immutable, so you can’t add the new information to an existing array. The only thing you can do if you don’t want to disturb or copy your existing array is create a new array that contains the new data. Doing that preserves the immutability of arrays and doesn’t lead to any unnecessary copying – which keeps us happy(ish) from a data engineering perspective – but now we have a new problem: the data are now split across two arrays. Each array contains only one “chunk” of the data. We need some way of “pretending” that these two arrays are in fact a single array-like object.</p>
<p>This is the problem that chunked arrays solve. A chunked array is a wrapper around a list of arrays, and allows you to index their contents “as if” they were a single array. Physically, the data are still stored in separate places – each array is one chunk, and these chunks don’t have to be adjacent to each other in memory – but the chunked array provides us will a layer of abstraction that allows us to pretend that they are all one thing.</p>
<p><br></p>
<section id="list-like-aspects" class="level3">
<h3 class="anchored" data-anchor-id="list-like-aspects">List-like aspects</h3>
<p>Here’s an example. I’ll take some lyrics to <em>King</em> by Florence + The Machine, and use the <code>chunked_array()</code> function from <strong>arrow</strong> to store them as a chunked array that is comprised of three smaller arrays:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">king <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(</span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"am"</span>, <span class="st" style="color: #20794D;">"no"</span>, <span class="st" style="color: #20794D;">"mother"</span>), <span class="co" style="color: #5E5E5E;"># chunk 0</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"am"</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="st" style="color: #20794D;">"bride"</span>),    <span class="co" style="color: #5E5E5E;"># chunk 1</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"am"</span>, <span class="st" style="color: #20794D;">"king"</span>)          <span class="co" style="color: #5E5E5E;"># chunk 2</span></span>
<span id="cb35-5">)</span></code></pre></div>
</div>
<p>An alternative way to do the same thing would be to use the <code>create()</code> method of the <a href="https://r6.r-lib.org/">R6 object</a> <code>ChunkedArray</code>. In fact, the <code>chunked_array()</code> function is just a slightly nicer wrapper around the same functionality that <code>ChunkedArray$create()</code> provides. But that’s a bit of a digression. Let’s take a look at the object I just created:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">king</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "I",
    "am",
    "no",
    "mother"
  ],
  [
    "I",
    "am",
    null,
    "bride"
  ],
  [
    "I",
    "am",
    "king"
  ]
]</code></pre>
</div>
</div>
<p>The double bracketing in this output is intended to highlight the “list-like” nature of chunked arrays. There are three separate arrays that I have created here, wrapped in a handly little container object that is secretly a list of arrays, but allows that list to behave just like a regular one-dimensional data structure. Schematically, this is what I’ve just created:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/chunked_array_layout.svg" class="img-fluid"></p>
</div>
</div>
<p>As this figure illustrates, there really are three arrays here. I can pull them out individually by referring to their position in the array list by using the <code>chunk()</code> method that all chunked array objects possess. This is another one of those situations where I’m using a low-level feature, and the zero-based indexing in Arrow reappears. To extract the second chunk, here’s what I do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">king<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">chunk</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "I",
  "am",
  null,
  "bride"
]</code></pre>
</div>
</div>
<p>Notice from the output that this chunk is a vanilla <code>Array</code> object, and I can take a peek at the underlying metadata and buffers associated with that object by using the <code>array_layout()</code> function I wrote earlier. Here’s what that chunk looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">king<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">chunk</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">array_layout</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
── Metadata 
• length : 4
• null count : 1

── Buffers 
• validity : 1 1 0 1
• offset : 0 1 3 3 8
• data : Iambride</code></pre>
</div>
</div>
<p>Hopefully by now this all looks quite familiar to you! The <code>Array</code> object here has length 4, contains 1 missing value (referred to as null values in Arrow), and because it is a string array, it contains three buffers: a validity bitmap, an offset buffer, and a data buffer.</p>
<p><br></p>
</section>
<section id="vector-like-aspects" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="vector-like-aspects">Vector-like aspects</h3>
<p>In the previous section I highlighted the fact that internally a chunked array is “just” a list of arrays and showed you how you can interact with a chunked array in a “list-like” way. Most of the time though, when you’re working with a chunked array as a data analyst you aren’t really interested in its list-like properties, what you actually care about is the abstraction layer that provides it with vector-like properties. Specifically, what you actually care about is the fact that a chunked array is a one-dimensional object with a single indexing scheme. Let’s go back to the <code>king</code> data to illustrate this. Suppose I want to extract a subset of the elements. Specifically I want to grab the 3rd through 6th elements. These slots actually belong to different arrays, and it would be a pain to extract the 3rd and 4th slots from the first array, and the 1st and 2nd slots from the second array. No data analyst wants that headache. Fortunately, I don’t have to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">king[<span class="dv" style="color: #AD0000;">3</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "no",
    "mother"
  ],
  [
    "I",
    "am"
  ]
]</code></pre>
</div>
</div>
<p>As an R user you are probably breathing a sigh of relief to see the return of one-based indexing! Again I should stress that this is the norm: as a general rule, the <strong>arrow</strong> package tries to mimic R conventions whenever you are “just trying to do normal R things”. If you’re trying to manipulate and analyse data, the intention is that your regular <strong>dplyr</strong> functions should work the same way they always did, and the same goes for subsetting data. In R, the first element of a vector is element 1, not element 0, and that convention is preserved here. The only time you’re going to see <strong>arrow</strong> adopt zero-based indexing is when you are interacting with Arrow at a low level.</p>
<p>Another thing to highlight about chunked arrays is that the “chunking” is not considered semantically meaningful. It is an internal implementation detail only: you should never treat the chunk as a meaningful unit! Writing the data to disk, for example, often results in the data being organised into different chunks. Two arrays that have the same values in different chunking arrangements are deemed equivalent. For example, here’s the same four values as <code>king[3:6]</code> all grouped into a single chunk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">no_mother <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"no"</span>, <span class="st" style="color: #20794D;">"mother"</span>, <span class="st" style="color: #20794D;">"I"</span>, <span class="st" style="color: #20794D;">"am"</span>))</span>
<span id="cb44-2">no_mother</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "no",
    "mother",
    "I",
    "am"
  ]
]</code></pre>
</div>
</div>
<p>When I test for equality using <code>==</code>, you can see that the results are shown element-wise. All four elements are the same, so the result is a (chunked) array of four <code>true</code> values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">no_mother <span class="sc" style="color: #5E5E5E;">==</span> king[<span class="dv" style="color: #AD0000;">3</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    true,
    true,
    true,
    true
  ]
]</code></pre>
</div>
</div>
<p>The intention, ultimately, is that users should be able to interact with chunked arrays as if they were ordinary one-dimensional data structures without ever having to think much about their list-like nature. Chunked arrays exist as an abstraction to help bridge the gap between the needs of the data engineer and the needs of the data scientist. So except in those special cases where you have to think carefully about the engineering aspect, a data analyst should be able to treat them just like regular vectors!</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=L62LtChAwww"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/king.png" class="img-fluid figure-img" width="1276"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="record-batches" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="record-batches">Record batches</h2>
<p>Now that we have a good understanding of zero dimensional data objects (scalars), and one dimensional data objects (arrays and chunked arrays), the time has come to make the jump into the second dimension and talk about tabular data structures in <strong>arrow</strong>. In the data objects table I presented at the start of the post there are three of these listed: record batches, tables, and datasets. Record batches are the simplest of the three so I’m going to start there, but in everyday data analysis you’re not likely to be using them very much: in practice tables and datasets are the things you’re likely to care about most. Even so, from a learning standpoint it really helps to have a good understanding of record batches because the other concepts are built on top of them.</p>
<p>A record batch is table-like data structure comprised of a sequence of arrays. The arrays can be of different types but they must all be the same length. Each array is referred to as one of the “fields” or “columns” of the record batch. This probably sounds terribly familiar to you as an R user, because – apart from a few differences in terminology – what I’ve just described to you is essentially the same kind of thing as a data frame. The parallels between record batches and data frames run deeper too:</p>
<ul>
<li>In R, the columns in a data frame must be named.<sup>6</sup> Record batches have the same property: each field must have a (UTF8-encoded) name, and these names form part of the metadata for the record batch.</li>
<li>A data frame in R is secretly just a list of vectors, and like any other list it does not really “contain” those vectors: rather it consists of a set of pointers that link to those vector objects. There’s a good discussion of list references in <a href="https://adv-r.hadley.nz/names-values.html#list-references">chapter 2 of Advanced R</a>. Record batches in Arrow are much the same. When stored in memory, the record batch does not include physical storage for the values stored in each field, it simply contains pointers to the relevant array objects. It does, however, contain its own validity bitmap.</li>
</ul>
<p>To illustrate, let’s return to our <code>dance_fever</code> data set. Here it is as a data frame (well, tibble technically, but whatever):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">dance_fever</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 14 × 3
   track_number title             duration
          &lt;int&gt; &lt;chr&gt;                &lt;int&gt;
 1            1 King                   280
 2            2 Free                   234
 3            3 Choreomania            213
 4            4 Back in Town           236
 5            5 Girls Against God      280
 6            6 Dream Girl Evil        227
 7            7 Prayer Factory          73
 8            8 Cassandra              258
 9            9 Heaven Is Here         111
10           10 Daffodil               214
11           11 My Love                231
12           12 Restraint               48
13           13 The Bomb               165
14           14 Morning Elvis          262</code></pre>
</div>
</div>
<p>The <strong>arrow</strong> package provides two different ways to create a record batch. I can either use <code>RecordBatch$create()</code> or I can use the <code>record_batch()</code> function. The latter is simpler, so I’ll do that. The <code>record_batch()</code> function is pretty flexible, and can accept inputs in several formats. I can pass it a data frame, one or more named vectors, an input stream, or even a raw vector containing appropriate binary data. But I don’t need all that fancy complexity here so I’ll just give it a data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">record_batch</span>(dance_fever)</span>
<span id="cb50-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RecordBatch
14 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>The output is amusingly terse. It doesn’t give a preview of the data, but it kindly confirms that this is a record batch containing 14 rows and 3 columns. It also tells me the column names and the type of data stored in each column. The <strong>arrow</strong> package supplies a <code>$</code> method for record batch objects, and it behaves the same way you’d expect for a data frame. If I want to look at a particular column in my record batch, I can refer to it by name like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">df<span class="sc" style="color: #5E5E5E;">$</span>title</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "King",
  "Free",
  "Choreomania",
  "Back in Town",
  "Girls Against God",
  "Dream Girl Evil",
  "Prayer Factory",
  "Cassandra",
  "Heaven Is Here",
  "Daffodil",
  "My Love",
  "Restraint",
  "The Bomb",
  "Morning Elvis"
]</code></pre>
</div>
</div>
<p>At an abstract level the <code>df</code> object behaves like a two dimensional structure with rows and columns, but in terms of how it is represented in memory it is fundamentally a list of arrays, and so schematically I’ve drawn it like this:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/record_batch_layout.svg" class="img-fluid"></p>
</div>
</div>
<p>In some respects it’s structurally similar to a chunked array, insofar record batches and chunked arrays are both lists of arrays, but in other ways they are quite different. The arrays indexed in a record batch can be different types, but they must be the same length: this is required to ensure that at a high level we can treat a record batch like a two dimensional table. In contrast, the arrays indexed by a chunked array can be different lengths, but must all be the same type: this is required to ensure that at a high level we can treat a chunked array like a one dimensional vector.</p>
<p>Returning to the practical details, it’s worth noting that in addition to the <code>$</code> operator that refers to columns by name, you can use double brackets <code>[[</code> to refer to columns by position. Just like we saw with chunked array, these positions follow the R convention of using 1 to refer to the first element. The <code>df$title</code> array is the 2nd column in our record batch so I can extract it with this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">df[[<span class="dv" style="color: #AD0000;">2</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "King",
  "Free",
  "Choreomania",
  "Back in Town",
  "Girls Against God",
  "Dream Girl Evil",
  "Prayer Factory",
  "Cassandra",
  "Heaven Is Here",
  "Daffodil",
  "My Love",
  "Restraint",
  "The Bomb",
  "Morning Elvis"
]</code></pre>
</div>
</div>
<p>Finally there is a <code>[</code> method that allows you to extract subsets of a record batch in the same way you would for a data frame. The command <code>df[1:10, 1:2]</code> extracts the first 10 rows and the first 2 columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">df[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RecordBatch
10 rows x 2 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;</code></pre>
</div>
</div>
<p>If you are wondering what <code>df[1:2]</code> returns, try it out for yourself. Hopefully you will not be surprised!</p>
<p><br></p>
<section id="serialisation" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="serialisation">Serialisation</h3>
<p>Before I move on to talk about Arrow tables, I want to make a small digression. At the beginning of this post I mentioned that my very first attempt to write about Arrow ended up becoming a post about <a href="https://blog.djnavarro.net/posts/2021-11-15_serialisation-with-rds/">data serialisation in R</a> that had nothing to do with Arrow. That didn’t happen entirely by accident, and I’ll try to explain some of that now.</p>
<p>When we talk about data serialisation, what we’re talking about is taking a data structure stored in memory and organising it into a format that is suitable for writing to disk (serialising to file format) or transmitting over some other communication channel (serialising to a stream). From the beginning, data structures in Arrow were designed <em>together</em> with file formats and streaming formats, with the intention that – to the extent that it is practical and doesn’t mess with other important design considerations – the thing you send across the communication channel (or write to disk) has the same structure as the thing you need to store in memory. That way, when the data arrive at the other end, you don’t have to do a lot of work reorganising the data.</p>
<p>That… makes sense, right?</p>
<p>If I want to tell you to meet me under the bridge, the message I should send you should be “meet me under the bridge”. It makes no sense whatsoever for me to say “meet me [the title of that really annoying Red Hot Chilli Peppers song]” and expect you to decode it. There is no point in me expending effort deliberately obscuring what I’m trying to say, and then forcing you to expend effort trying to interpret my message.</p>
<p>Yet, surprisingly, that’s what happens a lot of the time when we send data across communication channels. For example, suppose you and I are both R users. We both work with data frames. Because a data frame is fundamentally a list of variables (each of which is a vector), we use data that are organised <em>column-wise</em>: the first thing in a data frame is column 1, then column 2, then column 3, and so on. Okay, cool. So now let’s say you want to send me a data set, and what you do is send me a CSV file. A CSV file is written row by row: the first thing in a CSV file is row 1, then row 2, then row 3. It is a <em>row-wise</em> data structure. In order for you to send data to me, what has to happen is you take your column-wise data frame, invert it so that it is now a row-wise structure, write that to a CSV and then send it to me. At the other end, I have to invert the whole process, transforming the row-wise structure into a column-wise organisation that I can now load into memory as a data frame.<sup>7</sup></p>
<p>Um… that <em>doesn’t</em> make sense.</p>
<p>This particular problem arises quite a lot, largely because serialisation formats and in-memory data structures aren’t always designed in tandem. To get around this, Arrow specifies the <a href="https://arrow.apache.org/docs/format/Columnar.html#serialization-and-interprocess-communication-ipc">Interprocess Communication</a> (IPC) serialisation format that is designed specifically to ensure that Arrow data objects can be transmitted (and saved) efficiently. Because data sets are typically organised into tabular structures, the primitive unit for communication is the record batch. I’m not going to dive into the very low level details of how IPC messages are structured, but the key thing for our purposes is that IPC is designed to ensure that the structure of the serialised record batch is essentially identical to the physical layout of an in-memory record batch.</p>
<p>I’ll give a very simple example. Let’s take the first few rows of the <code>dance_fever</code> data set and convert them into a small record batch:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">df_batch_0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">record_batch</span>(dance_fever[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>,])</span>
<span id="cb58-2">df_batch_0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RecordBatch
4 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>Suppose I want to share this. Currently this is an object in memory that consists of three arrays (which are contiguous in memory) but as we’ve seen earlier, these arrays are themselves comprised of multiple buffers. What the IPC format does is collect the relevant metadata into a “data header”,<sup>8</sup> and then lay out the buffers one after the other. Glossing a few minor details<sup>9</sup>, this is essentially what the IPC message would look like for this record batch:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/record_batch_serialised.svg" class="img-fluid"></p>
</div>
</div>
<p>At this point you’re probably thinking okay that’s nice Danielle, but how do I do this? There are three functions you can use:</p>
<ul>
<li>To send the data directly to an output stream use <code>write_ipc_stream()</code>.</li>
<li>To write data in IPC format to a static file on disk it is referred to as a “feather” formatted file,<sup>10</sup> and you use <code>write_feather()</code>.</li>
<li>To construct the same sequence of bytes but return them in R as raw vectors, you can use <code>write_to_raw()</code>.</li>
</ul>
<p>In order to show you what the byte stream actually looks like, I’ll use the <code>write_to_raw()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">df_ipc_0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">write_to_raw</span>(df_batch_0)</span>
<span id="cb60-2">df_ipc_0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] ff ff ff ff f0 00 00 00 10 00 00 00 00 00 0a 00 0c 00 06 00 05 00 08 00 0a
 [26] 00 00 00 00 01 04 00 0c 00 00 00 08 00 08 00 00 00 04 00 08 00 00 00 04 00
 [51] 00 00 03 00 00 00 7c 00 00 00 3c 00 00 00 04 00 00 00 a0 ff ff ff 00 00 01
 [76] 02 10 00 00 00 1c 00 00 00 04 00 00 00 00 00 00 00 08 00 00 00 64 75 72 61
[101] 74 69 6f 6e 00 00 00 00 8c ff ff ff 00 00 00 01 20 00 00 00 d4 ff ff ff 00
[126] 00 01 05 10 00 00 00 1c 00 00 00 04 00 00 00 00 00 00 00 05 00 00 00 74 69
[151] 74 6c 65 00 00 00 04 00 04 00 04 00 00 00 10 00 14 00 08 00 06 00 07 00 0c
[176] 00 00 00 10 00 10 00 00 00 00 00 01 02 10 00 00 00 28 00 00 00 04 00 00 00
[201] 00 00 00 00 0c 00 00 00 74 72 61 63 6b 5f 6e 75 6d 62 65 72 00 00 00 00 08
[226] 00 0c 00 08 00 07 00 08 00 00 00 00 00 00 01 20 00 00 00 00 00 00 00 ff ff
[251] ff ff f8 00 00 00 14 00 00 00 00 00 00 00 0c 00 16 00 06 00 05 00 08 00 0c
[276] 00 0c 00 00 00 00 03 04 00 18 00 00 00 58 00 00 00 00 00 00 00 00 00 0a 00
[301] 18 00 0c 00 04 00 08 00 0a 00 00 00 8c 00 00 00 10 00 00 00 04 00 00 00 00
[326] 00 00 00 00 00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[351] 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00
[376] 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00
[401] 28 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 48 00 00 00 00 00 00 00 00
[426] 00 00 00 00 00 00 00 48 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00
[451] 00 00 03 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00
[476] 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00
[501] 00 00 00 00 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 00 00 00 00 04
[526] 00 00 00 08 00 00 00 13 00 00 00 1f 00 00 00 00 00 00 00 4b 69 6e 67 46 72
[551] 65 65 43 68 6f 72 65 6f 6d 61 6e 69 61 42 61 63 6b 20 69 6e 20 54 6f 77 6e
[576] 00 18 01 00 00 ea 00 00 00 d5 00 00 00 ec 00 00 00 ff ff ff ff 00 00 00 00</code></pre>
</div>
</div>
<p>To reassure you that this byte stream does indeed contain the relevant information, I’ll use the <code>read_ipc_stream()</code> function to decode it. By default this function returns data to R natively as a tibble, which is fine for my purposes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;">read_ipc_stream</span>(df_ipc_0)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  track_number title        duration
         &lt;int&gt; &lt;chr&gt;           &lt;int&gt;
1            1 King              280
2            2 Free              234
3            3 Choreomania       213
4            4 Back in Town      236</code></pre>
</div>
</div>
<p>We can use the same logic to write data to disk. As mentioned above, when writing data in IPC format to file, the result is called a “feather” file. So okay, let’s take the rest of the <code>dance_fever</code> data, and write it to a feather file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">dance_fever[<span class="dv" style="color: #AD0000;">5</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">14</span>,] <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb64-2">  <span class="fu" style="color: #4758AB;">record_batch</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb64-3">  <span class="fu" style="color: #4758AB;">write_feather</span>(<span class="st" style="color: #20794D;">"df_ipc_1.feather"</span>)</span></code></pre></div>
</div>
<p>Now we can read this feather file from disk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fu" style="color: #4758AB;">read_feather</span>(<span class="st" style="color: #20794D;">"df_ipc_1.feather"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 3
   track_number title             duration
          &lt;int&gt; &lt;chr&gt;                &lt;int&gt;
 1            5 Girls Against God      280
 2            6 Dream Girl Evil        227
 3            7 Prayer Factory          73
 4            8 Cassandra              258
 5            9 Heaven Is Here         111
 6           10 Daffodil               214
 7           11 My Love                231
 8           12 Restraint               48
 9           13 The Bomb               165
10           14 Morning Elvis          262</code></pre>
</div>
</div>
<p>Yay! It’s always nice when things do what you expect them to do.</p>
<p>Before moving on, there’s one last thing I should mention. The feather file format is a handy thing to know about, and can be very convenient in some instances, but it’s not really optimised to be the best “big data file format”. It’s intended to be the file format analog of IPC messages, and those in turn are designed for optimal streaming of Arrow data. Because of this, in practice you will probably not find yourself using the feather format all that much. Instead, you’re more likely to use something like <a href="https://parquet.apache.org/">Apache Parquet</a>, which is explicitly designed for this purpose. Arrow and parquet play nicely with one another, and <strong>arrow</strong> supports reading and parquet files using the <code>read_parquet()</code> and <code>write_parquet()</code> functions. However, parquet is a topic for a future post, so that’s all I’ll say about this today!</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=zZr5Tid3Qw4"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/delilah.png" class="img-fluid figure-img" width="1274"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="tables" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="tables">Tables</h2>
<blockquote class="blockquote">
<p>Tell me where to put my love<br>
Do I wait for time to do what it does?<br>
I don’t know where to put my love<br>
&nbsp;&nbsp;– <em>My Love</em>, Florence + The Machine</p>
</blockquote>
<p>Earlier when I introduced the concept of chunked arrays, I explained that Arrow needs these structures because arrays are immutable objects, and Arrow is designed to avoid copying data whenever possible: when a new block of data arrive, it is stored as its own array without disturbing the existing ones, and we use the chunked array as a wrapper that lets us pretend that all these chunks are laid out end to end in a single vector. The previous section shows you exactly how that can happen. If I have a data set that arrives sequentially as a sequence of record batches, I have this problem for every column in the data set! Quite by accident<sup>11</sup> that’s what happened in the last section – the <code>dance_fever</code> data set has been serialised in two parts. In that example it happened because I wanted to show you what an IPC stream looked like (creating one record batch for that) as well as what a feather file looks like (creating another record batch), but in real life it’s more likely to happen every time you receive an update on an ongoing data collection process (e.g., today’s data arrive).</p>
<p>To deal with this situation, we need a tabular data structure that is similar to a record batch with one exception: instead of storing each column as an array, we now want to store it as a chunked array. This is what the <code>Table</code> class in <strong>arrow</strong> does. Schematically, here’s what the data structure for a table looks like:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/table_layout.svg" class="img-fluid"></p>
</div>
</div>
<p>Tables have a huge advantage over record batches: they can be concatenated. You can’t append one record batch to another because arrays are immutable: you can’t append one array to the end of another array. You would have to create a new array with all new data – and do this for <em>every</em> column in the data – which is a thing we really don’t want to do. But because tables are built from chunked arrays, concatenation is easy: all you have to do is update the chunked arrays so that they include pointers to the newly-arrived arrays as well as the previously-existing arrays.</p>
<p>Because tables are so much more flexible than record batches, functions in <strong>arrow</strong> tend to return tables rather than record batches. Unless you do what I did in the previous section and deliberately call <code>record_batch()</code> you’re not likely to encounter them as the output of normal data analysis code.<sup>12</sup> For instance, in the previous section I serialised two record batches, one to a file and one to a raw vector. Let’s look at what happens when I try to deserialise (a.k.a. “read”) them. First the IPC stream:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1">df_table_0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_ipc_stream</span>(</span>
<span id="cb67-2">  <span class="at" style="color: #657422;">file =</span> df_ipc_0, </span>
<span id="cb67-3">  <span class="at" style="color: #657422;">as_data_frame =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb67-4">)</span>
<span id="cb67-5">df_table_0</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
4 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>That’s the same data as before, but it’s a table not a record batch. Each column is a chunked array, not an array. The same happens when I read from the feather file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">df_table_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_feather</span>(</span>
<span id="cb69-2">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"df_ipc_1.feather"</span>, </span>
<span id="cb69-3">  <span class="at" style="color: #657422;">as_data_frame =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb69-4">)</span>
<span id="cb69-5">df_table_1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
10 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>Again, this is a table. In general, you won’t get a record batch in <strong>arrow</strong> unless you explicitly ask for one. Tables are the default tabular data structure, which is usually what you want anyway.</p>
<p>Okay, so now I have the two fragments of my data set represented as tables. The difference between the table version and the record batch version is that the columns are all represented as chunked arrays. Each array from the original record batch is now one chunk in the corresponding chunked array in the table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">df_batch_0<span class="sc" style="color: #5E5E5E;">$</span>title</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Array
&lt;string&gt;
[
  "King",
  "Free",
  "Choreomania",
  "Back in Town"
]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">df_table_0<span class="sc" style="color: #5E5E5E;">$</span>title</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "King",
    "Free",
    "Choreomania",
    "Back in Town"
  ]
]</code></pre>
</div>
</div>
<p>It’s the same underlying data (and indeed the same immutable array is referenced by both), just enclosed by a new, flexible chunked array wrapper. However, it is this wrapper that allows us to concatenate tables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">concat_tables</span>(</span>
<span id="cb75-2">  df_table_0,</span>
<span id="cb75-3">  df_table_1</span>
<span id="cb75-4">)</span>
<span id="cb75-5">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
14 rows x 3 columns
$track_number &lt;int32&gt;
$title &lt;string&gt;
$duration &lt;int32&gt;</code></pre>
</div>
</div>
<p>This is successful (yay!) and the result will behave exactly like a two dimensional object with <code>$</code>, <code>[[</code>, and <code>[</code> operators that behave as you expect them to<sup>13</sup> (yay!), but if you look closely you can still see the “seams” showing where the tables were appended:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">df<span class="sc" style="color: #5E5E5E;">$</span>title</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "King",
    "Free",
    "Choreomania",
    "Back in Town"
  ],
  [
    "Girls Against God",
    "Dream Girl Evil",
    "Prayer Factory",
    "Cassandra",
    "Heaven Is Here",
    "Daffodil",
    "My Love",
    "Restraint",
    "The Bomb",
    "Morning Elvis"
  ]
]</code></pre>
</div>
</div>
<p>When tables are concatenated the chunking is preserved. That’s because those are the original arrays, still located at the same spot in memory. That’s efficient from a memory use perspective, but again, don’t forget that the chunking is not semantically meaningful, and there is no guaranteed that a write-to-file operation (e.g., to parquet format) will preserve those chunks.</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=h9CNGPy11Jc"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/my_love.png" class="img-fluid figure-img" width="1277"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="datasets" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="datasets">Datasets</h2>
<blockquote class="blockquote">
<p>What kind of man loves like this?<br>
To let me dangle at a cruel angle<br>
Oh, my feet don’t touch the floor<br>
Sometimes you’re half in and then you’re half out<br>
Buy you never close the door<br>
&nbsp;&nbsp;– <em>What Kind Of Man</em>, Florence + The Machine</p>
</blockquote>
<p>So what about datasets? They’re the last item on that table, and you might be wondering where they fall in all this. I’m not going to dive into the details on datasets in this post, because they’re a whole separate topic and they deserve their own blog post. However, it’s a little unsatisfying to write all this and not say anything about them, so I’ll give a very quick overview here.</p>
<p>Up to this point I’ve talked about tabular data sets that are contained entirely in memory. When such data are written to disk, they are typically written to a single file. For larger-than-memory data sets, a different strategy is needed. Only a subset of the data can be stored in memory at any point in time, and as a consequence it becomes convenient to write the data to disk by partitioning it into many smaller files. This functionality is supported in Arrow via Datasets.</p>
<p>I’ll give a simple example here, using a small data set. Let’s suppose I’ve downloaded the entire Florence + The Machine discography using the <strong>spotifyr</strong> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">florence <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_discography</span>(<span class="st" style="color: #20794D;">"florence + the machine"</span>)</span>
<span id="cb79-2">florence</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 414 × 41
# Groups:   album_name [18]
   artist_name   artis…¹ album…² album…³ album…⁴ album…⁵ album…⁶ album…⁷ dance…⁸
   &lt;chr&gt;         &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;list&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;
 1 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.73 
 2 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.467
 3 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.635
 4 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.346
 5 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.599
 6 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.565
 7 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.472
 8 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.571
 9 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.542
10 Florence + T… 1moxjb… 0uGwPm… album   &lt;df&gt;    2022-0…    2022 day       0.643
# … with 404 more rows, 32 more variables: energy &lt;dbl&gt;, key &lt;int&gt;,
#   loudness &lt;dbl&gt;, mode &lt;int&gt;, speechiness &lt;dbl&gt;, acousticness &lt;dbl&gt;,
#   instrumentalness &lt;dbl&gt;, liveness &lt;dbl&gt;, valence &lt;dbl&gt;, tempo &lt;dbl&gt;,
#   track_id &lt;chr&gt;, analysis_url &lt;chr&gt;, time_signature &lt;int&gt;, artists &lt;list&gt;,
#   available_markets &lt;list&gt;, disc_number &lt;int&gt;, duration_ms &lt;int&gt;,
#   explicit &lt;lgl&gt;, track_href &lt;chr&gt;, is_local &lt;lgl&gt;, track_name &lt;chr&gt;,
#   track_preview_url &lt;lgl&gt;, track_number &lt;int&gt;, type &lt;chr&gt;, track_uri &lt;chr&gt;, …</code></pre>
</div>
</div>
<p>The <code>florence</code> data frame is of course quite small, and I have no real need to use Arrow Datasets: it’s small enough that I can store it natively in R as a tibble! But it will suffice to illustrate concepts that come in handy when working with large datasets.</p>
<p>Let’s suppose I want to partition this in into many data files, using the album release year as the basis for the partitioning. To do this I’ll use the <code>write_dataset()</code> function, specifying <code>partitioning = "album_release_year"</code> to ensure that files are created after splitting the data set by release year. By default, the <code>write_dataset()</code> function writes individual data files in the parquet format, which is in general a very good default choice for large tabular data sets. However, because I have not talked about <a href="https://parquet.apache.org/">Apache Parquet</a> in this post, I’ll make a different choice and write the data files in the feather format that we’ve seen earlier in this post. I can do that by setting <code>format = "feather"</code>. Finally, I’ll set <code>path = "spotify_florence"</code> to ensure that all the files are stored in a folder by that name. That gives this command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1">florence <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb81-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">where</span>(<span class="sc" style="color: #5E5E5E;">~!</span><span class="fu" style="color: #4758AB;">is.list</span>(.))) <span class="sc" style="color: #5E5E5E;">|&gt;</span>  <span class="co" style="color: #5E5E5E;"># drop list columns</span></span>
<span id="cb81-3">  <span class="fu" style="color: #4758AB;">as_arrow_table</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span>             <span class="co" style="color: #5E5E5E;"># convert to an arrow table</span></span>
<span id="cb81-4">  <span class="fu" style="color: #4758AB;">write_dataset</span>(                  <span class="co" style="color: #5E5E5E;"># write to multi-file storage</span></span>
<span id="cb81-5">    <span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"spotify_florence"</span>,</span>
<span id="cb81-6">    <span class="at" style="color: #657422;">format =</span> <span class="st" style="color: #20794D;">"feather"</span>,</span>
<span id="cb81-7">    <span class="at" style="color: #657422;">partitioning =</span> <span class="st" style="color: #20794D;">"album_release_year"</span></span>
<span id="cb81-8">  )</span></code></pre></div>
</div>
<p>The result is that the following files are written to disk:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="st" style="color: #20794D;">"spotify_florence"</span>, <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "album_release_year=2009/part-0.feather"
[2] "album_release_year=2010/part-0.feather"
[3] "album_release_year=2011/part-0.feather"
[4] "album_release_year=2012/part-0.feather"
[5] "album_release_year=2015/part-0.feather"
[6] "album_release_year=2018/part-0.feather"
[7] "album_release_year=2022/part-0.feather"</code></pre>
</div>
</div>
<p>These file names are written in “Hive partitioning” format. It looks a little weird the first time you encounter it, because <code>=</code> is a character most coders instinctively avoid including in file names because it has such a strong meaning in programming contexts. However, when files are named in Hive partitioning format, the intended interpretation is exactly the one you implicitly expect as a coder: it’s a <code>field_name=value</code> statement, so you will often encounter files with names like</p>
<pre><code>/year=2019/month=2/data.parquet</code></pre>
<p>For more information see the help documentation for the <code>hive_partitioning()</code> function in the <strong>arrow</strong> package.</p>
<p>In any case, the key thing is that I’ve now written the data to disk in a fashion that splits it across multiple files. For the Florence + The Machine discography data this is is really not needed because the entire <code>spotify_florence</code> folder occupies a mere 320kB on my hard drive. However, elsewhere on my laptop I have a copy of the infamous New York City Taxi data set, and that one occupies a rather more awkward 69GB of storage. For that one, it really does matter that I have it written to disk in a sensible format!</p>
<p>Having a data set stored in a distributed multi-file format is nice, but it’s only useful if I can open it and work with it as if it were the same as a regular tabular data set. The <code>open_dataset()</code> function allows me to do exactly this. Here’s what happens when I open the file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">florence_dataset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_dataset</span>(<span class="st" style="color: #20794D;">"spotify_florence"</span>, <span class="at" style="color: #657422;">format =</span> <span class="st" style="color: #20794D;">"feather"</span>)</span>
<span id="cb85-2">florence_dataset</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FileSystemDataset with 7 Feather files
artist_name: string
artist_id: string
album_id: string
album_type: string
album_release_date: string
album_release_date_precision: string
danceability: double
energy: double
key: int32
loudness: double
mode: int32
speechiness: double
acousticness: double
instrumentalness: double
liveness: double
valence: double
tempo: double
track_id: string
analysis_url: string
time_signature: int32
disc_number: int32
duration_ms: int32
explicit: bool
track_href: string
is_local: bool
track_name: string
track_preview_url: bool
track_number: int32
type: string
track_uri: string
external_urls.spotify: string
album_name: string
key_name: string
mode_name: string
key_mode: string
track_n: double
album_release_year: int32

See $metadata for additional Schema metadata</code></pre>
</div>
</div>
<p>Okay yes, the output makes clear that I have loaded <em>something</em> and it has registered the existence of the 7 constituent files that comprise the dataset as a whole. But can I work with it? One of the big selling points to the <strong>arrow</strong> package is that it supplies a <strong>dplyr</strong> backend that lets me work with <code>Tables</code> as if they were R data frames, using familiar syntax. Can I do the same thing with <code>Datasets</code>?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">danceability <span class="ot" style="color: #003B4F;">&lt;-</span> florence_dataset <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb87-2">  <span class="fu" style="color: #4758AB;">select</span>(album_name, track_name, danceability) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb87-3">  <span class="fu" style="color: #4758AB;">distinct</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb87-4">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(danceability)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb87-5">  <span class="fu" style="color: #4758AB;">head</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">10</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb87-6">  <span class="fu" style="color: #4758AB;">compute</span>()</span>
<span id="cb87-7"></span>
<span id="cb87-8">danceability</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
10 rows x 3 columns
$album_name &lt;string&gt;
$track_name &lt;string&gt;
$danceability &lt;double&gt;

See $metadata for additional Schema metadata</code></pre>
</div>
</div>
<p>Yes. Yes I can. Because I called <code>compute()</code> at the end of this pipeline rather than <code>collect()</code>, the results have been returned to me as a <code>Table</code> rather than a data frame. I did that so that I can show that the <code>danceability</code> output is no different to the <code>Table</code> objects we’ve seen earlier, constructed from <code>ChunkedArray</code> objects:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1">danceability<span class="sc" style="color: #5E5E5E;">$</span>track_name</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "Heaven Is Here",
    "King",
    "King",
    "Hunger",
    "My Love - Acoustic",
    "Ghosts - Demo",
    "What The Water Gave Me - Demo",
    "What The Water Gave Me - Demo",
    "South London Forever",
    "What The Water Gave Me - Demo"
  ]
]</code></pre>
</div>
</div>
<p>If I want to I can convert this to a tibble, and discover that “Dance Fever” does indeed contain the most danceable Florence + The Machine tracks, at least according to Spotify:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="fu" style="color: #4758AB;">as.data.frame</span>(danceability)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 3
   album_name                            track_name                    danceab…¹
   &lt;chr&gt;                                 &lt;chr&gt;                             &lt;dbl&gt;
 1 Dance Fever                           Heaven Is Here                    0.852
 2 Dance Fever                           King                              0.731
 3 Dance Fever (Deluxe)                  King                              0.73 
 4 High As Hope                          Hunger                            0.729
 5 Dance Fever (Deluxe)                  My Love - Acoustic                0.719
 6 Lungs (Deluxe Version)                Ghosts - Demo                     0.681
 7 Ceremonials                           What The Water Gave Me - Demo     0.68 
 8 Ceremonials (Deluxe Edition)          What The Water Gave Me - Demo     0.68 
 9 High As Hope                          South London Forever              0.679
10 Ceremonials (Original Deluxe Version) What The Water Gave Me - Demo     0.678
# … with abbreviated variable name ¹​danceability</code></pre>
</div>
</div>
<p><br></p>
<p>I am certain you are as reassured by this as I am.</p>
<p><br></p>
<div class="cell page-columns page-full">
<div class="cell-output-display column-screen">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=_kIrRooQwuk"><img src="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/big_god.png" class="img-fluid figure-img" width="1192"></a></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Me.↩︎</p></li>
<li id="fn2"><p>In the near future, I hope that the documentation itself is going to tell this story but sometimes it’s easier to do the same job in an informal blog post where I have the luxury of going overboard with “authorial voice” and “narrative”, and all those other fancy things that writers love.↩︎</p></li>
<li id="fn3"><p>Quick explanation: As a general rule, if you want things to be efficient you want the beginnings and endings of your data structures to be <a href="https://en.wikipedia.org/wiki/Data_structure_alignment">naturally aligned</a>, in the sense that the memory address is a multiple of the data block sizes. So on a 64-bit machine, you want the memory address for every data structure to start on a multiple of 64 bits. Apparently that makes lookup easier or something. Unfortunately, I’ve only specified 8 bits (i.e.&nbsp;1 byte) so if I wanted to ensure that the validity bitmap is naturally aligned I’m going to need to add another 7 bytes worth of padding in order to make it to the full 64 bits. This method of aligning data structures in memory is referred to as “8 byte alignment”. However, what Arrow does in this situation is <em>64 byte alignment</em>, so each data structure has to be 64 bytes long at a minimum. This design feature exists to allow efficient use of modern hardware, and if you want to know more, it’s discussed in the <a href="https://arrow.apache.org/docs/format/Columnar.html#buffer-alignment-and-padding">Arrow documentation</a>.↩︎</p></li>
<li id="fn4"><p>More precisely, signed 32 bit integers.↩︎</p></li>
<li id="fn5"><p>I know, I know. Nothing is impossible. But you know what I mean.↩︎</p></li>
<li id="fn6"><p>If you don’t specify names when creating a data frame, R will create them for you. For example, when you create an ostensibly unnamed data frame with a command like <code>x &lt;- data.frame(1:2, 3:4)</code>, you’ll find that <code>x</code> still has a <code>names</code> attribute, and <code>names(x)</code> returns X1.2, X3.4↩︎</p></li>
<li id="fn7"><p>On the off chance that you’re one of those extremely sensible people who chose not to read my data serialisation post, I’ll mention that the native RDS format that R uses avoids this trap. Much like Arrow serialisation formats, RDS preserves the column wise organisation to data frames.↩︎</p></li>
<li id="fn8"><p>The data header for contains the length and null count for each flattened field. It also contains the memory offset (i.e., the start point) and length of every buffer that is stored in the message body.↩︎</p></li>
<li id="fn9"><p>For instance, there are padding requirements involved that I am ignoring here.↩︎</p></li>
<li id="fn10"><p>Full disclosure: there are a few minor differences between the IPC streaming format and the feather file format. I’ve glossed over those in this post but you can find the details on the <a href="https://arrow.apache.org/docs/format/Columnar.html#ipc-file-format">Arrow specification page</a>.↩︎</p></li>
<li id="fn11"><p>Okay fine, I’m lying. I did it on purpose.↩︎</p></li>
<li id="fn12"><p>If you ever do need to convert a record batch to a table you can use <code>as_arrow_table()</code>.↩︎</p></li>
<li id="fn13"><p>Because tables are built from chunked arrays, and chunked arrays are an abstraction layer designed to ensure that the distinct arrays can be treated as if they were one contiguous vector, Arrow tables inherit all those features. You can subset tables with <code>$</code>, <code>[[</code>, and <code>[</code> the same way you can for record batches.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Arrays and Tables in {Arrow}},
  date = {2022-05-25},
  url = {https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Arrays and Tables in Arrow.”</span> May
25, 2022. <a href="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow">https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/index.html</guid>
  <pubDate>Tue, 24 May 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-05-25_arrays-and-tables-in-arrow/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Porting a distill blog to quarto</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/index.html</link>
  <description><![CDATA[ 




<!-- cover image: Anete Lūsiņa -->
<!-- https://unsplash.com/photos/zwsHjakE_iI -->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A little over a year ago I decided to <a href="../../welcome">start blogging again</a>, and set up this site. At the time I made the deliberate choice to use <a href="https://rstudio.github.io/distill/">distill</a> as my blogging platform rather than something that would require a static site generator like <a href="https://gohugo.io/">hugo</a> or <a href="https://jekyllrb.com/">jeykll</a>, and I don’t regret that choice. However, along the way I’ve found a few things that have bothered me about using distill. It’s never been worth considering changing to something new though, because distill has so many things that I do like. Until now.</p>
<p>Enter, stage left, <a href="https://quarto.org/">quarto</a>.</p>
<p>Now out of stealth mode and attracting no end of attention, quarto offers the promise of being a cross-platform, cross-format, open source publishing tool based on pandoc. Intrigued, I decided to play around with it for a while, and ended up making the decision to port this blog from distill to quarto. This post outlines my process.</p>
<p>(I am a little nervous: porting a blog often involves recomputing things. Will it work? Will everything turn out to be reproducible? I hope so…)</p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>The very first thing I do is go read Alison Hill’s wonderful <a href="https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/">We don’t talk about quarto</a> blog post. If you’re an R markdown user considering making the jump to quarto and haven’t already read her summary of where things are at, you won’t regret it. It’s a nice high level overview. I’d also suggest <a href="https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/">Nick Tierney’s notes</a> on making the switch, which is very helpful also.</p>
<p>After doing my background reading, I go to the <a href="https://quarto.org/docs/get-started/">get started page</a> on the quarto website to download the installer file. I’m on Ubuntu, so for me that’s a <code>.deb</code> file. I install it in the usual way from the command line:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">sudo</span> dpkg <span class="at" style="color: #657422;">-i</span> quarto-0.9.282-linux-amd64.deb</span></code></pre></div>
<p>Now that I have quarto installed, I’m able to use it to create a blog. My old distill blog exists in a project folder that I’d imaginatively named <code>distill-blog</code>, so I decide to keep to tradition and create the quarto version in an equally boring project folder called <code>quarto-blog</code>.</p>
<p>There is a page on the quarto website that walks you through the process for <a href="https://quarto.org/docs/websites/website-blog.html">creating a blog</a>, which I dutifully follow. From the terminal, I use the <code>quarto create-project</code> command, and a variety of files are created:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">quarto</span> create-project quarto-blog <span class="at" style="color: #657422;">--type</span> website:blog</span></code></pre></div>
<pre><code>Creating project at /home/danielle/GitHub/sites/quarto-blog:
  - Created _quarto.yml
  - Created index.qmd
  - Created posts/welcome/index.qmd
  - Created posts/post-with-code/index.qmd
  - Created about.qmd
  - Created styles.css
  - Created posts/_metadata.yml</code></pre>
<p>Coming from an R markdown background, this is very familiar:</p>
<ul>
<li>The files with a <code>.qmd</code> extension are the quarto markdown documents. These contain source code for the blog posts (the two files in the <code>posts</code> folder), the home page (the <code>index.qmd</code> file in the project root folder) and a standalone “about me” page for the blog (the <code>about.qmd</code> file).</li>
<li>The files with a <code>.yml</code> extension are the YAML files used to configure the blog. I don’t notice this at first, but the fact that there are two of them is important. The <code>_quarto.yml</code> file is used for settings that will apply across the entire site, but you will often want to configure settings that only apply to your blog posts. Those can be set by editing the <code>posts/_metadata.yml</code> file.</li>
<li>The <code>styles.css</code> file can be used to specify custom CSS rules that will apply to the whole site. I’ll talk more about styles later.</li>
</ul>
</section>
<section id="rendering-posts" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="rendering-posts">Rendering posts</h2>
<p>There are several different ways to interact with quarto. For example, later in the post I’ll talk about the quarto command line interface which allows you to work with quarto without going through R or RStudio. However, when getting started I try to keep things simple, and go with the option that was most familiar to me: I use RStudio.</p>
<p>To do this, it’s convenient to have an RStudio project for my blog. Using the RStudio file menu, I create a new project from an existing directory (i.e., my <code>quarto-blog</code> folder), which supplies the <code>quarto-blog.Rproj</code> file and other infrastructure needed to work with my new quarto blog as an RStudio project. Once that’s done, I am able to open up a quarto file in the RStudio editor and see a familiar looking interface:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="cell-output-display page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/img/welcome_post.png" class="img-fluid figure-img" width="805"></p>
<p></p><figcaption class="figure-caption margin-caption">A blog post written in quarto markdown open in the RStudio editor. Notice that in the place where one would normally expect to see the ‘Knit’ button for an R markdown document, there is a ‘Render’ button. It serves the same function and is mapped to the same hot keys as the ‘Knit’ button</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>From here I can click on the “Render” button to render a single page, or alternatively I can go to the RStudio build pane and select the “Render Project” option to build the entire site. By default, the blog builds into the <code>_site</code> folder.</p>
</section>
<section id="playing-around" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="playing-around">Playing around</h2>
<p>Progress! I am making progress. However, before trying to do any other practical things, I have some very important business to attend to: playing around. Aimlessly exploring the functionality of a new tool is always fun, and I find it’s a good way to familiarise myself with something. I’m pretty familiar with R markdown already, and I imagine most readers of this post will be too, so for the most part there are no surprises. Still it is worth asking myself the usual questions:</p>
<ul>
<li>Can I add footnotes?<sup>1</sup></li>
<li>Can they be nested?<sup>2</sup></li>
<li>Can I add comments in the margin?</li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<p>A comment in the margin</p>
</div></div><p>Looking at the <a href="https://quarto.org/docs/authoring/article-layout.html">quarto article layout documentation</a>, I discover some nice features. You can use the <code>:::{.class}</code> notation to apply a CSS class to a section of output, like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb4-1">:::{.column-margin}</span>
<span id="cb4-2">A comment in the margin</span>
<span id="cb4-3">:::</span></code></pre></div>
<p>The <code>.column-margin</code> class is handy for margin asides, but there are several other useful classes that come in handy when adding images to blog posts:</p>
<ul>
<li><code>.column-body</code> spans the usual body width of the post</li>
<li><code>.column-body-outset</code> extends slightly outside the usual width</li>
<li><code>.column-page</code> spans the whole page (including both margins)</li>
<li><code>.column-screen</code> class spans the full width of the screen</li>
<li><code>.column-screen-inset</code> class stops just short of the full screen width</li>
</ul>
<p>You can set these inside a chunk option. For example, setting <code>column: margin</code> as a chunk option will assign the output a <code>.column-margin</code> class, and any resulting figure will appear in the margin rather than below the code. Similarly, setting <code>column: screen</code> as the chunk option will assign the output a <code>.column-screen</code> class, and the output will span the full width. Here’s a simple example based pretty closely on the one used in the quarto documentation:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(leaflet)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">leaflet</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">addTiles</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">addMarkers</span>(</span>
<span id="cb5-5">    <span class="at" style="color: #657422;">lng=</span><span class="fl" style="color: #AD0000;">151.22251</span>, </span>
<span id="cb5-6">    <span class="at" style="color: #657422;">lat=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">33.85943</span>, </span>
<span id="cb5-7">    <span class="at" style="color: #657422;">label=</span><span class="st" style="color: #20794D;">"Mrs Macquarie's Chair"</span></span>
<span id="cb5-8">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;">addProviderTiles</span>(providers<span class="sc" style="color: #5E5E5E;">$</span>CartoDB.Positron)</span></code></pre></div>
<div class="cell-output-display column-screen">
<div id="htmlwidget-640c330a3ece748e2b9d" style="width:100%;height:464px;" class="leaflet html-widget"></div>
<script type="application/json" data-for="htmlwidget-640c330a3ece748e2b9d">{"x":{"options":{"crs":{"crsClass":"L.CRS.EPSG3857","code":null,"proj4def":null,"projectedBounds":null,"options":{}}},"calls":[{"method":"addTiles","args":["https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",null,null,{"minZoom":0,"maxZoom":18,"tileSize":256,"subdomains":"abc","errorTileUrl":"","tms":false,"noWrap":false,"zoomOffset":0,"zoomReverse":false,"opacity":1,"zIndex":1,"detectRetina":false,"attribution":"&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap<\/a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA<\/a>"}]},{"method":"addMarkers","args":[-33.85943,151.22251,null,null,null,{"interactive":true,"draggable":false,"keyboard":true,"title":"","alt":"","zIndexOffset":0,"opacity":1,"riseOnHover":false,"riseOffset":250},null,null,null,null,"Mrs Macquarie's Chair",{"interactive":false,"permanent":false,"direction":"auto","opacity":1,"offset":[0,0],"textsize":"10px","textOnly":false,"className":"","sticky":true},null]},{"method":"addProviderTiles","args":["CartoDB.Positron",null,null,{"errorTileUrl":"","noWrap":false,"detectRetina":false}]}],"limits":{"lat":[-33.85943,-33.85943],"lng":[151.22251,151.22251]}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p><br></p>
<p>I confess. I’m a little bit in love already.</p>
</section>
<section id="notes-on-yaml-headers" class="level2">
<h2 class="anchored" data-anchor-id="notes-on-yaml-headers">Notes on YAML headers</h2>
<p>The YAML headers used for blog posts are a little different in quarto than their equivalents in distill were, and it takes me a moment to work out how to adapt the YAML headers from my old R markdown posts for the new quarto blog. Here’s a quick overview. First, some fields require almost no changes:</p>
<ul>
<li>The <code>title</code> field is unchanged. That was an easy one!</li>
<li>The <code>date</code> field is essentially unchanged, except for the fact there seems to be a tiny bug in date parsing for blogs that I’m sure will vanish soon. If you’re using ISO-8601 date formats like <code>date: "2022-04-20"</code> it will be fine.<sup>3</sup></li>
<li>The <code>categories</code> field takes a list of values, which (I think?) is no different to what it looked like before. To be honest I don’t remember because my old blog didn’t use them. I’ve started now.</li>
</ul>
<p>Other changes are superficial:</p>
<ul>
<li>The <code>description</code> field that I used on my old blog still does what it used to: it provides preview text on the listing page, and a summary at the top of the file. However, there is also a <code>subtitle</code> field that you can use for this purpose, and the output has the same look and field as my old descriptions, so I decide to switch all my old description fields to <code>subtitle</code> entries.</li>
<li>To specify a preview image associated with a blog post, use the <code>image</code> field (e.g., something like <code>image: thumbnail.jpg</code>) instead of the <code>preview</code> field from distill.</li>
<li>There is a new <code>license</code> field that replaces the <code>creative_commons</code> field from distill. At the bottom of this post you’ll see a “Reuse” appendix that links to a license file. To generate this, I’ve included a <code>license: "CC BY"</code> line in the YAML.</li>
</ul>
<p>Other changes are a little deeper:</p>
<ul>
<li>In distill it is possible to specify the <code>author</code> field in a lot of detail, mirroring the academic convention of listing an authors affiliation alongside their employer, orcid record, and contact details. Quarto supports this also, though the tags have changed slightly: <code>orcid_id</code> is now <code>orcid</code>, for example. There’s an example of this shown a little later in the post.</li>
<li>Specifying the table of contents is slightly different. Just like in distill, you can turn on the table of contents by including <code>toc: true</code> as a line in the YAML header, and set the <code>toc-depth</code> field to determine how detailed the table of contents should be. But there are new options. You can customise the text that appears above the table of contents, and the location in which it appears. I decide to be boring and go with some standard options: <code>toc-title: Table of contents</code> and <code>toc-location: left</code>.</li>
<li>One feature in distill that I like is that it generates a citation for each post. You can do that in quarto too, and you’ll see at the bottom of this post that I’ve used that feature here. However, quarto manages this in a different way to distill, and uses a YAML version of <a href="https://citationstyles.org/">citation style language</a> (CSL) formatting to define the citation. To see how it works, you can read through the <a href="https://quarto.org/docs/reference/metadata/citation.html">quarto pages on citations</a> and <a href="https://quarto.org/docs/authoring/create-citeable-articles.html">creating citeable articles</a>. It’s a little more elaborate than the distill version, but much more flexible. For this blog it’s as simple as including <code>citation: true</code> in the YAML, but it can be more elaborate and accommodate any pattern of academic citation you like.</li>
</ul>
</section>
<section id="creating-a-new-post" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-new-post">Creating a new post</h2>
<p>Okay. Time to get to work at transforming the starter blog into a quarto version of my distill blog. My first step is to delete the two posts that came with the starter blog, and then create this one.</p>
<p>A folder with an <code>index.qmd</code> file is the bare minimum I need to get started with a new post. I suppose there are other ways do to this but what I actually do is create the the folder and an empty file from the terminal (for reasons known but to god):</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;">mkdir</span> posts/2022-04-20_porting-to-quarto</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">touch</span> posts/2022-04-20_porting-to-quarto/index.qmd</span></code></pre></div>
<p>To be honest, using the terminal was overkill. What I could have done instead, had I been looking at RStudio rather than the terminal, is use the “New File” option in the file menu and then select the “Quarto Doc” option. That creates a new untitled quarto document that you can save to the appropriate location.</p>
</section>
<section id="inheriting-yaml-settings" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="inheriting-yaml-settings">Inheriting YAML settings</h2>
<p>A handy feature in quarto websites is that YAML fields are inherited. For example, this post has its own YAML header that contains the following – and only the following – fields:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Porting a distill blog to quarto"</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">subtitle</span><span class="kw" style="color: #003B4F;">: </span><span class="ch" style="color: #20794D;">|</span><span class="at" style="color: #657422;"> </span></span>
<span id="cb7-3">  I have moved this blog from distill over to quarto, and </span>
<span id="cb7-4">  taken notes. A year after starting the blog, this promises </span>
<span id="cb7-5">  to be an interesting reproducibility test</span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;">date</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"2022-04-20"</span></span>
<span id="cb7-7"><span class="fu" style="color: #4758AB;">categories</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="at" style="color: #657422;">Quarto</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> Blogging</span><span class="kw" style="color: #003B4F;">,</span><span class="at" style="color: #657422;"> Reproducibility</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">image</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"img/preview.jpg"</span></span></code></pre></div>
<p>That’s a little peculiar, because a lot of the metadata needed to specify this post is missing. The reason it is missing is that I’ve placed some fields in the <code>posts/_metadata.yml</code> file. Those fields are inherited by every blog post. This is the entire contents of my post metadata file:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Freeze computed outputs</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">freeze</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Enable banner style title blocks</span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;">title-block-banner</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Enable CC licence appendix</span></span>
<span id="cb8-8"><span class="fu" style="color: #4758AB;">license</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"CC BY"</span></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;"># Default for table of contents</span></span>
<span id="cb8-11"><span class="fu" style="color: #4758AB;">toc</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;">toc-title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Table of contents</span></span>
<span id="cb8-13"><span class="fu" style="color: #4758AB;">toc-location</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> left</span></span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;"># Default knitr options</span></span>
<span id="cb8-16"><span class="fu" style="color: #4758AB;">execute</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb8-17"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">echo</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-18"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">message</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-19"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">warning</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="co" style="color: #5E5E5E;"># Default author</span></span>
<span id="cb8-22"><span class="fu" style="color: #4758AB;">author</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb8-23"><span class="at" style="color: #657422;">  </span><span class="kw" style="color: #003B4F;">-</span><span class="at" style="color: #657422;"> </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Danielle Navarro</span></span>
<span id="cb8-24"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">url</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://djnavarro.net</span></span>
<span id="cb8-25"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">affiliation</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> Voltron Data</span></span>
<span id="cb8-26"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">affiliation-url</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> https://voltrondata.com</span></span>
<span id="cb8-27"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">orcid</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 0000-0001-7648-6578</span></span>
<span id="cb8-28"></span>
<span id="cb8-29"><span class="co" style="color: #5E5E5E;"># Default fields for citation</span></span>
<span id="cb8-30"><span class="fu" style="color: #4758AB;">citation</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span></code></pre></div>

<div class="no-row-height column-margin column-container"><div class="">
<p>The <a href="https://quarto.org/docs/projects/code-execution.html">freeze option</a> is extremely useful in the blogging context. I’d advise reading the linked documentation page!</p>
</div></div><p>That explains a lot, but if you’re looking closely you’ll realise that there’s nothing in these fields specifying the output format! In R markdown I’d have included an <code>output</code> field for this, but in quarto the relevant field is called <code>format</code>. Because the output applies to the entire site, that part of the YAML header is in the <code>_quarto.yml</code> file. The relevant lines of that file are:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb9-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb9-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">theme</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ember.scss</span></span>
<span id="cb9-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">css</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> styles.css</span></span></code></pre></div>
<p>I’ll come back to this later. For now it’s enough to recognise that this indicates that all pages on this site should be rendered to HTML documents, and using the <code>ember.scss</code> and <code>styles.css</code> files specify the blog style.</p>
</section>
<section id="converting-my-old-posts" class="level2">
<h2 class="anchored" data-anchor-id="converting-my-old-posts">Converting my old posts</h2>
<p>The time has come for a little manual labour. Although quarto is compatible with most existing R markdown and I can probably get away with leaving them untouched, in the longer term I’m expecting that I’ll be moving across languages so it appeals to me to take this opportunity to port everything over to quarto now. Renaming all the <code>index.Rmd</code> files to <code>index.qmd</code> files is easy enough, and can be done programmatically, but most of my edits require a small amount of manual tinkering with each post. Not a lot, because it is mostly a matter of renaming a few YAML fields. Given that there are only 20 or so posts that need to be ported, I decide it is easier to do it manually than to try to write a script to automate the task. I get through it in an afternoon.</p>
</section>
<section id="styling-the-new-blog" class="level2">
<h2 class="anchored" data-anchor-id="styling-the-new-blog">Styling the new blog</h2>
<p>Up to this point, the adoption of quarto has felt very “distill-like”. The structure of the blog feels familiar from distill, the YAML headers are similar in spirit (if different in the particulars), and so on. When it comes to customising the appearance of the blog, it’s not very similar to distill at all, and feels more similar to simple R markdown sites. Quarto websites are bootstrap based, and as discussed on the <a href="https://quarto.org/docs/output-formats/html-themes.html">quarto theming page</a>, they come with the same bootswatch themes that you might be familiar with from R markdown. For example, if you decide like I did that you would like a very plain white theme, you could choose the “litera” theme. To apply this to your blog, all you’d have to do is make sure your <code>_quarto.yml</code> file contains the following lines:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb10-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb10-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">theme</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> litera</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">css</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> styles.css</span></span></code></pre></div>
<p>What this does is assert that output will be rendered as HTML objects using the litera bootswatch theme, and applying any custom CSS rules that you add in the <code>styles.css</code> file.</p>
<p>One very nice feature of quarto, if you’re comfortable using SASS to define styles and know something about how the bootstrap SASS files are organised,<sup>4</sup> is that it allows you to write your own <code>.scss</code> file to define your blog theme more precisely, giving you access to bootstrap parameters and so on. I would strongly recommend reading about the <a href="https://quarto.org/docs/output-formats/html-themes-more.html">quarto theming system</a> before tinkering with this aspect yourself, but if you are more knowledgeable (or more foolish) than I, here’s how I set my blog up. First, instead of referring to the litera theme, the YAML in my <code>_quarto.yml</code> file points at my own custom <code>.scss</code> file:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;">format</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">html</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb11-3"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">theme</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ember.scss</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">css</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> styles.css</span></span></code></pre></div>
<p>The contents of the <code>ember.scss</code> file are as follows:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode scss code-with-copy"><code class="sourceCode scss"><span id="cb12-1"><span class="co" style="color: #5E5E5E;">/*-- scss:defaults --*/</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">// use litera as the base</span></span>
<span id="cb12-4"><span class="va" style="color: #111111;">$theme</span>: <span class="st" style="color: #20794D;">"litera"</span> <span class="at" style="color: #657422;">!default</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;">// import google fonts</span></span>
<span id="cb12-7"><span class="im" style="color: #00769E;">@import</span> <span class="st" style="color: #20794D;">'https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&amp;display=swap'</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-8"><span class="im" style="color: #00769E;">@import</span> <span class="st" style="color: #20794D;">'https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500;600;700&amp;display=swap'</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;">// use Atkinson Hyperlegible font if available</span></span>
<span id="cb12-11"><span class="va" style="color: #111111;">$font-family-sans-serif</span>:  <span class="st" style="color: #20794D;">"Atkinson Hyperlegible"</span><span class="op" style="color: #5E5E5E;">,</span> -apple-system<span class="op" style="color: #5E5E5E;">,</span> BlinkMacSystemFont<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Segoe UI"</span><span class="op" style="color: #5E5E5E;">,</span> Roboto<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Helvetica Neue"</span><span class="op" style="color: #5E5E5E;">,</span> Arial<span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Noto Sans"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="dv" style="color: #AD0000;">sans-serif</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Apple Color Emoji"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Segoe UI Emoji"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Segoe UI Symbol"</span><span class="op" style="color: #5E5E5E;">,</span> <span class="st" style="color: #20794D;">"Noto Color Emoji"</span> <span class="at" style="color: #657422;">!default</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;">/*-- scss:rules --*/</span></span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;">// litera is serif by default: revert to san-serif</span></span>
<span id="cb12-16">p {</span>
<span id="cb12-17">  <span class="kw" style="color: #003B4F;">font-family</span>: <span class="va" style="color: #111111;">$font-family-sans-serif</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb12-18">}</span></code></pre></div>
<p>As you can see, right now my customisation really doesn’t do much other than make some very minor tweaks on the litera theme, but the potential is there to do so much more than I have in setting up this blog. I plan to tinker with this more later on!</p>
</section>
<section id="adding-an-rss-feed" class="level2">
<h2 class="anchored" data-anchor-id="adding-an-rss-feed">Adding an RSS feed</h2>
<p>My old distill blog had an RSS feed, and while I acknowledge that it’s increasingly an esoteric feature that most folks don’t use, I have a fondness for RSS. Quarto supports this, but it’s not enabled by default. What I need to do is edit the YAML in the <code>index.qmd</code> file that corresponds to your homepage, because that’s where I have my primary listing of posts. In it, I see a <code>listing</code> field. All I need to do is add <code>feed: true</code> underneath and there is now an RSS feed for the site:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb13-1"><span class="fu" style="color: #4758AB;">title</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Notes from a data witch"</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">subtitle</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> A data science blog by Danielle Navarro</span></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">listing</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb13-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">feed</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb13-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">contents</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> posts</span></span></code></pre></div>
<p>The <a href="https://quarto.org/docs/websites/website-listings.html#feeds">quarto section on feeds</a> has more information on this.</p>
</section>
<section id="deploying-the-site" class="level2">
<h2 class="anchored" data-anchor-id="deploying-the-site">Deploying the site</h2>
<p>Preparing the site to be deployed is relatively painless. I found it useful to read the <a href="https://quarto.org/docs/reference/projects/websites.html">quarto website options page</a> before doing this, because it mentions a lot of settings to tinker with, mostly in the <code>_quarto.yml</code> file. For example, I choose to customise the navigation bar, the social media preview images, and so on. Eventually, I reach the point where I am happy and move on to deployment.</p>
<p>Happily, as to the deployment process itself, there’s not a lot to say. The <a href="https://quarto.org/docs/websites/publishing-websites.html">quarto deployment page</a> discusses several options for how you can do this. Most of my websites are deployed either through GitHub Pages or through Netlify. This one is a Netlify site, so I follow the instructions there and everything goes smoothly. However, this does bring me to another topic…</p>
</section>
<section id="netlify-redirects" class="level2">
<h2 class="anchored" data-anchor-id="netlify-redirects">Netlify redirects</h2>
<p>I’ve structured my blog in a particular way. Like the default quarto blog, all the posts live in the <code>posts</code> folder, and they’re named in a systematic way: they have an ISO-8601 formatted date first, and then a semantic slug. So the full URL for this blog post is:</p>
<p><a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/">blog.djnavarro.net/posts/2022-04-20_porting-to-quarto</a></p>
<p>That’s convenient for archiving purposes and for keeping everything nicely organised in my project folder, but it’s also a little clunky for sharing links. In practice, the “posts” part is a bit redundant, and I’m never going to use the same slug twice, so it’s handy to set it up so that there’s also a shorter URL for the post,</p>
<p><a href="https://blog.djnavarro.net/porting-to-quarto/">blog.djnavarro.net/porting-to-quarto</a></p>
<p>and that this shorter URL automatically redirects to the longer one.</p>
<p>Since I’m intending to deploy this blog to Netlify, what I need to do is ensure that whenever the site builds, a <code>_redirects</code> file is created within the <code>_site</code> folder. This file needs to have one line per redirect, listing the “redirect from” path first, followed by the “redirect to” path. Here’s what that line looks like for this post:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode default code-with-copy"><code class="sourceCode default"><span id="cb14-1">/porting-to-quarto /posts/2022-04-20_porting-to-quarto</span></code></pre></div>
<p>I have no intention of adding these lines manually, so what I do instead is add an R chunk to the <code>index.qmd</code> file corresponding to the blog home page, with the following code:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># list names of post folders</span></span>
<span id="cb15-2">posts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.dirs</span>(</span>
<span id="cb15-3">  <span class="at" style="color: #657422;">path =</span> here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"posts"</span>),</span>
<span id="cb15-4">  <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb15-5">  <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb15-6">)</span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;"># extract the slugs</span></span>
<span id="cb15-9">slugs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"^.*_"</span>, <span class="st" style="color: #20794D;">""</span>, posts)</span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;"># lines to insert to a netlify _redirect file</span></span>
<span id="cb15-12">redirects <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"/"</span>, slugs, <span class="st" style="color: #20794D;">" "</span>, <span class="st" style="color: #20794D;">"/posts/"</span>, posts)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;"># write the _redirect file</span></span>
<span id="cb15-15"><span class="fu" style="color: #4758AB;">writeLines</span>(redirects, here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"_site"</span>, <span class="st" style="color: #20794D;">"_redirects"</span>))</span></code></pre></div>
<p>Every time this site gets rebuilt – which usually involves rebuilding the home page since that’s the one that contains the post listing – the <code>_redirects</code> file gets refreshed. There might be a cleaner way, but this works.</p>
</section>
<section id="quarto-cli" class="level2">
<h2 class="anchored" data-anchor-id="quarto-cli">The quarto CLI</h2>
<p>Something I forgot to mention earlier. About half way through the process of tinkering with my old posts to be suitable for the quarto blog, I decided to stop using RStudio for the rendering, and spent a little time familiarising myself with the quarto command line interface. I haven’t made any particular decisions about what my long term workflow with quarto is going to look like, but I did find it helpful to get a feel for the concept of quarto as a standalone install. I’m not going to go into detail here, but just briefly: at the terminal I can see that I have some help options,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;">quarto</span> help</span></code></pre></div>
</div>
<pre><code>  Usage:   quarto 
  Version: 0.9.282
                  

  Description:

    Quarto CLI

  Options:

    -h, --help     - Show this help.                            
    -V, --version  - Show the version number for this program.  

  Commands:

    render          [input] [args...]  - Render input file(s) to various document types.                                                
    serve           [input]            - Serve an interactive document.                                                                 
    create-project  [dir]              - Create a project for rendering multiple documents                                              
    preview         [file] [args...]   - Render and preview a Quarto document or website project. Automatically reloads the browser when
    convert         [input]            - Convert documents to alternate representations.                                                
    capabilities                       - Query for current capabilities (output formats, engines, kernels etc.)                         
    check           [target]           - Check and verify correct functioning of Quarto installation and computation engines.           
    inspect         [path]             - Inspect a Quarto project or input path. Inspecting a project returns its config and engines.   
    tools           [command] [tool]   - Manage the installation, update, and uninstallation of useful tools.                           
    help            [command]          - Show this help or the help of a sub-command.
    </code></pre>
<p>From there I can check the help documentation for the <code>quarto render</code> command by typing the following,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;">quarto</span> render help</span></code></pre></div>
</div>
<p>and so on. Browsing this documentation in addition to all the excellent content on the quarto website is a useful way of finding additional options. If I wanted to render the current post, and my terminal was currently at the project root folder (i.e., my <code>quarto-blog</code> folder), I can render it as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;">quarto</span> render posts/2022-04-20_porting-to-quarto/index.qmd</span></code></pre></div>
</div>
<p>The ability to do this cleanly from the terminal seems like a handy feature of quarto, though I’ll admit I am not yet sure how I’ll use it.</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>When I started this process I wasn’t quite sure if I was going to follow through on it and actually switch the blog over to quarto. The distill blog has served me well for the last year, and I don’t like fixing things if they aren’t broken. However, the longer I played with quarto the more I liked it, and the process was far less painful than I feared it would be. I feel like it’s retained the things I like about distill, but integrated those cleanly with other features (e.g., the bootstrap grid!) that I really missed having access to from distill. Every now and then I’ve come across little quirks where some of the rough edges to quarto are still showing – it is a new tool still – but I’m enjoying it a lot.</p>
<!--------------- appendices go here ----------------->
</section>
<div class="cell">
<div class="cell-output-display">


</div>
</div>




<div id="quarto-appendix" class="default"><section id="last-updated" class="level2 appendix"><h2 class="quarto-appendix-heading">Last updated</h2><div class="quarto-appendix-contents">

<p>2022-08-23 13:02:10 AEST</p>
</div></section><section id="details" class="level2 appendix"><h2 class="quarto-appendix-heading">Details</h2><div class="quarto-appendix-contents">

<p><a href="https://github.com/djnavarro/quarto-blog/tree/main/posts/2022-04-20_porting-to-quarto/index.qmd">source code</a>, <a href="https://github.com/djnavarro/quarto-blog/tree/main/posts/2022-04-20_porting-to-quarto/renv.lock">R environment</a></p>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yes↩︎</p></li>
<li id="fn2"><p>No, but they can be recursive<sup>2</sup>↩︎</p></li>
<li id="fn3"><p>In case you’re interested: the “Welcome to My Blog” post in the starter blog lists the date as <code>date: "20/04/2022"</code>, which gets parsed as a string literal when the post gets built (i.e., the post date shows up as “20/04/2022”), sensibly enough. However, when you build the entire site it renders as “May 4, 2023”.↩︎</p></li>
<li id="fn4"><p>Which, frankly I do not, but I am also foolish and will try things anyway↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Porting a Distill Blog to Quarto},
  date = {2022-04-20},
  url = {https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Porting a Distill Blog to Quarto.”</span>
April 20, 2022. <a href="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto">https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto</a>.
</div></div></section></div> ]]></description>
  <category>Quarto</category>
  <category>Blogging</category>
  <category>Reproducibility</category>
  <guid>https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/index.html</guid>
  <pubDate>Tue, 19 Apr 2022 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/img/preview.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Transitioning from academia to industry</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>Leaving academia is rarely a simple or unemotional decision, no matter what career stage you are at, no matter where you’re headed to next, or whether you’re leaving by choice. In ways that are both good and bad, the academic life is quite different to working in industry, so you are necessarily taking a jump into the unknown. I don’t believe anyone can make those kinds of changes without experiencing fear, and I think anyone who attempts a transition of this kind deserves support in their choice.</p>
<p>I made the jump this year, in 2022, effectively ending an academic career that began when I started my PhD in 1999. I’ve been in my new role for almost three months now, long enough to have a few thoughts about my new world. It’s also been long enough that friends and twitter followers have been asking if I could share my experiences. I’ve spoken to a few people privately, but sometimes it helps to put thoughts into writing.</p>
<p>With that in mind, this post is my attempt to provide a little love, support, and maybe even help to others who are in a similar situation to the one I was in. It’s intended as both a personal and practical comment: I’ll mix some practical suggestions with thoughts on the emotional and psychological aspects to the transition.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/annie-spratt-vF2AC6pjIBY-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Annie Spratt. Available by CC0 licence on <a href="https://unsplash.com/photos/vF2AC6pjIBY">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<section id="do-the-reading-but-like-just-one-book" class="level2">
<h2 class="anchored" data-anchor-id="do-the-reading-but-like-just-one-book">Do the reading, but like… just one book?</h2>
<p>I’ll start with some practical advice, which is that it helps to do some background reading about the kind of career you’re looking at (I know, shocking, right?) If you’re reading my blog post specifically, there’s a pretty good chance that you’re thinking about a career in the tech sector, and probably in data science specifically. This makes a lot of sense for you. You already have most of the core skills required to be a data scientist. You can code, you can analyse data, you can communicate well. You can manage projects, you can work in teams and individually, you’ve probably had experience managing and supervising junior scientists and analysts.</p>
<p>What you <em>don’t</em> have is industry experience. You aren’t quite sure what that world is going to be like and exactly how to recast the skills you have in language that folks over in industry land will understand. What you need is a book that helps you understand the lay of the land, and I am <em>absolutely not going to write that book</em>. What I am going to do instead, is mention that <a href="https://twitter.com/robinson_es">Emily Robinson</a> and <a href="https://twitter.com/skyetetra">Jacqueline Nolis</a> already did. Their book is called <a href="https://www.manning.com/books/build-a-career-in-data-science"><em>Build a Career in Data Science</em></a> and it’s very good. It’s the book I used to help me out, and instead of repeating their advice I will simply recommend it to you.</p>
<p>If you really want to I guess you could read more, but the whole concept of “doing <em>all</em> the reading” is one of those things you can let go of. Even if you find a different book, just read one book okay? You’re even allowed to skim. Be honest: that’s what you were doing already, just like everyone else in academia.</p>
<p>The only note of caution I would add, if you’re an established academic looking to make the jump, is that academic folks like us aren’t the primary audience for the book. It’s a more general book and doesn’t talk much (or at all) about the peculiarities associated with the academia-to-industry transition. You’ll need to do a little bit of translation to make it applicable to you. That’s okay though, because you’re very good at this kind of mental athletics: academia has trained you for it! Still, when chatting with Emily and Jacqueline in order to say thanks for their book, I did mention that I wished someone had written a translated version of the book for academics looking to get out.</p>
<p>No, I’m not going to write <em>that</em> book either. As a consolation prize you get this blog post.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/siora-photography-hgFY1mZY-Y0-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Siora Photography. Available by CC0 licence on <a href="https://unsplash.com/photos/hgFY1mZY-Y0">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="abandon-prestige-ye-that-enter-here" class="level2">
<h2 class="anchored" data-anchor-id="abandon-prestige-ye-that-enter-here">Abandon “prestige”, ye that enter here</h2>
<p>Pivoting now from the practical to the psychological, there’s an elephant in the room we have to talk about up front.</p>
<p>If you have been in academia long enough you will have an internalised a core concept that you need to abandon: <em>prestige</em>. Academia runs on prestige, and everyone on the inside understands in our bones how important this particular currency is. Where you publish, where you study, who you work with, what “tier” your institution belongs to… these are all prestige factors. They are of course utterly irrelevant to your value as a human being or your skills as an employee, and yet in many ways they are more important to your career success than oh, say… the actual work you do. Not for nothing do we joke that the fundamental dogma of academia is “Nothing in academia makes sense except in light of prestige”. Prestige is the reason I published a disproportionate number of my papers in <em>Psychological Review</em>. It’s the reason I would accidentally-on-purpose let “slip” that I was on the editorial board at <em>Science</em> when I needed to impress someone quickly. Prestige. It matters.</p>
<p>Except, no-one outside the academy cares. Not even a little bit. The peculiar currency of academia has no meaning in the outside world. That’s sad, but I have good news:</p>
<p>In industry they use <em>money</em> as currency instead.</p>
<p>It’s a frighteningly novel concept for an institutionalised academic, but one you might come to love, so I’ll unpack it a bit further. Because it <em>doesn’t</em> mean you’ll necessarily be paid more (though you might). Rather, what it means is that it is you are performing a service in exchange for money. The company buys your time and your work; it doesn’t buy your soul. Not only that, a <em>good</em> company understands this, and would never dream of trying to take it away from you. You don’t have to personalise the work any more. You don’t have to hold it dear to your heart as if your employment contract were proof of your value as a person. That concept of “prestige” you’re secretly holding onto? That’s one of those mechanisms by which academia ties your sense of self-worth to little “badges” of achievement and doesn’t even pay you for the extra work you put in to earn them. How much work have you given away for free, to third parties who make a profit of your work? For no reason other than “prestige”?</p>
<p>You can let that all go now. It will hurt to let it go, because – so much more than your junior colleagues who got out when they were young – you have become invested in it and the hooks are laid much deeper in your psyche. But you can, and it’s surprisingly liberating when it happens.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/sigmund-Y41w7pyxE18-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Sigmund. Available by CC0 licence on <a href="https://unsplash.com/photos/Y41w7pyxE18">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="your-résumé-is-an-advertisement-for-you" class="level2">
<h2 class="anchored" data-anchor-id="your-résumé-is-an-advertisement-for-you">Your résumé is an advertisement for you</h2>
<p>Let’s return to practicalities. From the moment we enter the system, there is a piece of advice we’re given in academia: keep track of everything. Every talk, every paper, every book, every prize, every award, every compliment from student. All these things must be stored, collated, reused, organised, and <em>used</em>. They are the evidence we use for our promotion applications, our grant applications, our various pleas and supplications to the dark gods of the ivory tower. And so it is that every academic CV becomes a monstrosity, a log file listing every activity from which value can be extracted. It is time to let that all go. Breathe, darling.</p>
<p>The vast, vast majority of your CV is not necessary any longer, because the fundamental purpose of the résumé has changed. It is not a testament to your worth. It is not a log of your achievements. It is not in any meaningful sense <em>documentation</em>, and it is certainly not a store of value. It is an advertisement that you place with a company, to catch their attention: <strong>your résumé is a flyer, not a monograph</strong>.</p>
<p>If you are at all like me this is a very hard concept to get used to. Frantic, I would ask myself how I could possibly reduce all my self-worth and my value to the company to a mere page? It simply cannot be done! … and of course it can’t. That’s <em>not</em> the task at hand. Your CV bears no relationship to your value as a person, and its <em>only</em> function is to convince the right company to give you an interview. Here’s how I did that.</p>
<section id="step-1-reduce-the-size" class="level3">
<h3 class="anchored" data-anchor-id="step-1-reduce-the-size">Step 1: Reduce the size</h3>
<p>In an act of personal catharsis I destroyed most of the evidence that I was ever a fully institutionalised academic, so I no longer own any of my old “proper” academic CVs, but you don’t have to look too hard to discover evidence that I used to have one: Behold the <a href="https://djnavarro.net/papers">list of my publications and despair</a>, tremble before <a href="https://scholar.google.com.au/citations?user=QPH_lRIAAAAJ&amp;hl=en">my h-index</a><sup>1</sup>, and embrace the visual horror of my <a href="https://orcid.org/0000-0001-7648-6578">ORCID profile</a>! As you can probably guess, once upon a time I had a document that included all these things, tracked all the journal impact factors associated with every publication, listed every grant, every research contract, every… oh, you know. You have one of these too. It’s probably 50 pages long or something.</p>
<p>Your first task is to strip that back to <strong>two pages</strong>. You don’t have to reformat it at all. It’s still an academic CV. What I’m asking you to do in this first step is to find a way of condensing the things you actually care about in academia into a manageable format. You don’t have to think like an industry person at all yet. Just imagine a crazy world in which academics didn’t have to write monographs just to get permission to use the bloody bathroom, and choose two pages worth of content that you love. To make it a little easier, this is how I butchered my career and turned it into a <a href="_resume/danielle-navarro-academic-resume.pdf">scandalously brief two page résumé</a>.<sup>2</sup></p>
<p>The point of this initial exercise is prioritisation: you have things you are proud of, things you <em>know</em> are major accomplishments, and things that you feel obligated to list because you “have to”. This is your chance to let go, and keep only those things that you believe are genuinely good. Plus, you can keep this version as a nice summary of your academic accomplishments <em>that someone will actually read</em>. Because no-one is going to read that 50-page horror babe. They won’t.<sup>3</sup></p>
<p>Okay, done? Awesome. You’re doing amazing.</p>
</section>
<section id="step-2-write-a-sales-pitch" class="level3">
<h3 class="anchored" data-anchor-id="step-2-write-a-sales-pitch">Step 2: Write a sales pitch</h3>
<p>A little controversially, I’m gonna suggest that step 2 should be to <strong>write some prose</strong>. An industry résumé absolutely does <em>not</em> contain prose, but the purpose of this step is to try to help you cope with the shift that will have to happen in step 3. What we’re going to do in step 2 is pick and choose some content from the “step 1 résumé” and rewrite it as a verbal argument for why you personally deserve to have an industry job (if it helps, try to find a specific job on linkedin or whatever that you actually want, and write for that job). Again, this is a terrible way to write industry CV, but… you’ve written grant applications before right? Lots of grant applications. You’re depressingly good at writing those. We’re going to repurpose that skill set, and write a <a href="_resume/danielle-navarro-verbose-resume.pdf">verbose résumé</a> that looks like a mini grant application advertising you.<sup>4</sup></p>
<p>Now, anyone who has a good grasp of how industry works knows perfectly well this is no good. An industry résumé should be extremely light on text, it should focus on skills, and it should be structured in a way that makes machine parsing easy. When I wrote this I was still thinking like an academic. It isn’t a good résumé at all. So why am I mentioning it at all?</p>
<p>The reason is that most academics I know really struggle to make sales pitches, except in the specific contexts where we are “expected” to do so, and one of those contexts is writing grant applications. Writing my résumé in a way that felt familiar from the grant writing context helped me shed a lot of my anguish about the résumé, because “it’s like writing a grant, and everyone knows that grant-writing is mostly an exercise in sales…”</p>
</section>
<section id="step-3-now-you-can-write-a-résumé" class="level3">
<h3 class="anchored" data-anchor-id="step-3-now-you-can-write-a-résumé">Step 3: Now you can write a résumé!</h3>
<p>Once I’d finally gotten to that point, and was comfortable viewing the whole job search process this way, it became a lot easier for me to accept that a résumé is not in any way a meaningful representation of my skills, my history, or my ability. It is simply an <strong>advertisement that follows a predictable format</strong>. So for step 3, I discarded all my pretty words and wrote an <a href="_resume/danielle-navarro-industry-resume.pdf">industry-style résumé</a>.<sup>5</sup> As you can see, this is a quite different style of document. It’s written almost entirely as dot point lists, it focuses as much on skills as on accomplishments, and there is a lot of white space. Generally, that’s what you want.</p>
<p>When you get to this point, one thing I’d strongly recommend – not that I am ever to be relied upon for good advice – is that you think not just about the jobs you can get but the kind of work you want to be doing and the person you want to be. I’ve forgotten where I heard this (it’s definitely not an original thought of mine) but because the résumé is the first point of contact with the company in many cases, it’s also an exercise in expectation management. You are implicitly telling a story in this résumé about a particular type of person, and if you get an interview then people will expect that person in the interview. If you get the job from that interview, then they’ll expect the person from the interview to show up on the job.</p>
<p>So, who do you want to be in your new job? Maybe you don’t want to be the same person you’ve been all your academic life. Maybe you want to be someone new. If so, it’s totally fine to emphasise skills and accomplishments that relate to <em>that person</em>. You’re allowed to reinvent yourself a little bit in your résumé. It’s part of the healing process!</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/cristian-escobar-abkEAOjnY0s-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Cristian Escobar. Available by CC0 licence on <a href="https://unsplash.com/photos/abkEAOjnY0s">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="the-tech-sector-job-market-less-like-bridgerton-more-like-grindr" class="level2">
<h2 class="anchored" data-anchor-id="the-tech-sector-job-market-less-like-bridgerton-more-like-grindr">The tech sector job market: less like Bridgerton, more like Grindr</h2>
<p>Going on the job market was incredibly stressful, unfamiliar, and took longer for me to be successful than you’d think if all you’ve seen of my process is what was visible on public twitter (by the time I was openly on the job market I’d already had a number of unsuccessful attempts), so I’ll talk a bit about that too.</p>
<p>Applying to industry jobs is a little different to applying to academic jobs. For junior academics, applying for positions is often a numbers game: finding that first academic appointment involves a lot of applications, a lot of rejections, and a lot of anxiety. For senior academics, however, the process is different. There’s not really a “job market” in the traditional sense, just a loose network of relationships that you can use to “put out feelers” and surreptitiously negotiate a move if a mutually agreeable arrangement is possible. In many ways it is a courtship, involving many trips, back and forths, and evolves over a long time frame, and eventually culminates in a proposal of marriage (or tenured professorship).</p>
<p>Applying for jobs at tech companies wasn’t like that at all for me. I’d search for positions advertised on linkedin, or through twitter, and asked friends if they knew who was hiring. In my case it helped a lot that (a) I have a large twitter following and that (b) by late 2021 I <em>knew</em> I was not prepared to stay in academia for another year, which is what allowed me to publicly announce that I was on the job market. That strategy worked really well for me and generated a lot of leads.</p>
<p>Often people would offer to list me as an “internal recommendation” for a position, which is something I didn’t know anything about, but is quite similar to what you’d expect from academia except slightly more formalised: if someone inside the organisation recommends you for a role it makes you a more visible and more valuable candidate, and helps set you apart from the large number of other candidates. It’s useful, but not required in order to get a position (e.g., I wasn’t an internal recommendation at one of the two companies that were on my final short list).</p>
<p>The process at most companies went like this: I submitted my résumé and I never heard back from them. The end. That seems to be how it goes and it doesn’t mean anything. The best analogy for the whole process I came up with was thinking of it like dating apps. Submitting a résumé isn’t any more meaningful than “swiping right” on the company. They might swipe back, in which case you could end up in a chat with a recruiter. But they probably won’t, and that says absolutely <em>nothing</em> about you. It’s just a really big marketplace filled with incredibly noisy signals.</p>
<p>I have no idea how many jobs I applied for any more than I know how many men I’ve liked on a dating app. Companies, like men, are everywhere, and there is little to be gained by trying to keep track of all of them.</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/lynn-vdbr-xeWTU66tJIo-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Lynn Vdbr. Available by CC0 licence on <a href="https://unsplash.com/photos/xeWTU66tJIo">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<p>What I do know is that I started the “initial conversation” with 11 different companies during my job search. The initial conversation is itself an informal interview (usually with a recruiter) and it goes both ways – you’re screening the company just as much as they’re screening you. You may or may not go to the “real” interview stage after that: for me, I reached the interview stage with 5 of the 11 companies I’d started conversations with. The interview process was different at every company, but most of them weren’t a single interview but rather a series of interviews with different people. Sometimes there were “skills tests” to take (seriously, this is a thing), other times there were not. It was quite different to what I expected from academia, and it took a few failed attempts before I worked out the basics of how to interview.</p>
<p>Eventually I ended up with offers from two different companies, I negotiated briefly,<sup>6</sup> and then chose to accept an offer.</p>
</section>
<section id="learning-to-love-job-mobility" class="level2">
<h2 class="anchored" data-anchor-id="learning-to-love-job-mobility">Learning to love job mobility</h2>
<p>Folks inside academia have asked me about what life is like on the other side, and it’s hard to know how to answer. I know what <em>my</em> position is like, but that doesn’t say a lot about what life is like for anyone else in industry. It’s a big world out there and there’s a lot more variability in industry jobs than there are in academic jobs. Some are wonderful and others are terrible. Luckily for me I landed well and I genuinely love my current job, but not everyone does. In that respect, academia and industry are similar.</p>
<p>However, one thing that everyone who has made the jump notices immediately is that mobility is so much higher in industry. This makes a huge difference to your quality of life. In academia, if you find yourself hired into a bad department you are in a lot of trouble: it’s so hard to move between academic jobs that one toxic department can ruin an entire career. Industry is different: if you have a bad job you can make a plan to leave, and be happily working somewhere new within six months.</p>
<p>Once you’ve been in the sector for a while and are no longer carrying the albatross of “I’m just an academic and falsely believe I have no skills” around your neck, you discover that moving jobs is a thing people do all the time. Sometimes they do it for more money, sometimes they do it to get away from a bad situation (it happens everywhere), but often they move jobs just because they want to do something different. And that’s okay.</p>
</section>
<section id="welcome-we-have-tiny-cakes" class="level2">
<h2 class="anchored" data-anchor-id="welcome-we-have-tiny-cakes">Welcome! We have tiny cakes!</h2>
<p>Yes yes, Danielle, that’s nice and I take your point about variability and job mobility but what’s your job actually like? Are you happy? What do you do all day in industry? Do you have a boss who runs around telling you what to do all the time? Is it like <em>Office Space</em>? You look so much like Jennifer Aniston, do you have to wear 37 pieces of flair?</p>
<p>Like a lot of people with professional roles, my actual job is pretty varied on a day to day basis and I have quite a lot of autonomy in this role. Some days I write code contributing to Apache Arrow. Other days I write blog posts. Sometimes I spend time on twitter talking with R developers, because actually that’s part of what I do these days! Now that I’m wrapping my head around how Arrow works I’m at the point that I can start giving talks and workshops. I sometimes create resources that make it easier for folks inside and outside the company to use Arrow. I contribute where I can, I work with lovely people who help me learn the parts of the job that are foreign to me, and I even get to make use of my visual design skills from time to time. The company pays me fairly for my time, doesn’t subject me to the humiliating rituals of the academy, and I don’t have to deal with academic transphobia anymore. It’s lovely.</p>
<p>So yes, I’m happy here.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/bryam-blanco-nXKWLn8y9qE-unsplash.jpg" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Image by Bryam Blanco. Available by CC0 licence on <a href="https://unsplash.com/photos/nXKWLn8y9qE">unsplash</a>.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yeah, I’m currently dating an obnoxiously competent computational biologist, and her citation count <em>for last year</em> is perilously close to doubling my citation count for my entire career. I’ve given up on any illusion that my citations are even slightly impressive. I am very much the <a href="https://en.wikipedia.org/wiki/Kardashian_Index">Kardashian</a> of this relationship. But that is <em>so</em> not the point!↩︎</p></li>
<li id="fn2"><p>To make it easier still, this is the <a href="_resume/danielle-navarro-academic-resume.Rmd">R markdown file it’s based on</a>, and this is the <a href="_resume/svm-latex-cv.tex">.tex file that you’ll need</a> if you want to use the same template. And yes, there is a delightful appropriateness to the fact that, yes, the academic template is still using LaTeX directly rather than letting pandoc do the work and hiding the horrors from you↩︎</p></li>
<li id="fn3"><p>You didn’t even read it yourself, did you? Yeah, didn’t think so.↩︎</p></li>
<li id="fn4"><p>Again, to make it a little easier if you want to adopt my approach, this is the <a href="_resume/danielle-navarro-verbose-resume.Rmd">R markdown file it’s based on</a>↩︎</p></li>
<li id="fn5"><p>An industry résumé is really only supposed to be one page long, and you can see that I’m <em>still</em> clinging a little to my academic past by making mine two pages, but at least this verion really is an industry style format. This résumé is made using the pagedown package, and it strongly assumes you’re only doing a one-page format. If you want to see how badly I had to hack into it in order to force a two-page output, you can look at my <a href="_resume/danielle-navarro-industry-resume.Rmd">R markdown source</a> if you like. Be warned, it is grim!↩︎</p></li>
<li id="fn6"><p>Any decent guide to a job search will talk to you about how to negotiate and what ought to be negotiated in your kind of job search. But I am an indecent woman, this is not a reliable guide, and I am not the person you should rely upon for advice on this topic.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Transitioning from Academia to Industry},
  date = {2022-04-01},
  url = {https://blog.djnavarro.net/academia-to-industry-transition},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Transitioning from Academia to
Industry.”</span> April 1, 2022. <a href="https://blog.djnavarro.net/academia-to-industry-transition">https://blog.djnavarro.net/academia-to-industry-transition</a>.
</div></div></section></div> ]]></description>
  <category>Career</category>
  <guid>https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/index.html</guid>
  <pubDate>Thu, 31 Mar 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-04-01_academia-to-industry-transition/img/annie-spratt-vF2AC6pjIBY-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using Amazon S3 with R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<p>I have a shameful confession to make, one that may shock and surprise you. Although I am an R user, data scientist, and developer of many years experience, I’ve never used Amazon Web Services.</p>
<p>It’s hard to believe, I know, but I’ve never spun up a virtual machine on “Amazon EC2” (…whatever <em>that</em> is), I don’t know what “AWS Lambda” is, and the only thing I know about “Amazon S3” is that fancy data science people use it to store data. Or something along those lines. Honestly, I really haven’t been paying attention. Every time people start talking about it my eyes glaze over and my impostor syndrome arrives to berate me. A <em>true</em> data scientist is born knowing how to spin up EC2 instances, and if baby doesn’t post her drawings on S3 then she’s already falling behind, etc etc. It’s terribly stressful.</p>
<p>My dark and terrible personal tragedy notwithstanding,<sup>1</sup> I suspect my situation is not entirely uncommon. Back in my academic days, I knew very few people who used Amazon Web Services (a.k.a. AWS) for much of anything. It wasn’t needed, so it wasn’t knowledge that people acquired. Now that I’m working in an industry setting I’m finding that it’s <em>so</em> widely used that it’s almost assumed knowledge. <em>Everyone</em> knows this stuff, so there’s not a lot said about why you might care, or how to get started using these tools if you decide that you do care.</p>
<p>Today I decided to do something about this, starting by teaching myself how to use Amazon’s Simple Storage Service (a.k.a S3). With the help of the <a href="https://github.com/cloudyr/aws.s3"><strong>aws.s3</strong></a> package authored by Thomas Leeper and currently maintained by Simon Urbanek, it’s surprisingly easy to do.</p>
<p>In this post I’ll walk you through the process.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(stringr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(magick)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(aws.s3)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW687458.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
<section id="what-is-s3-and-why-do-i-care" class="level2">
<h2 class="anchored" data-anchor-id="what-is-s3-and-why-do-i-care">What is S3 and why do I care?</h2>
<p>Let’s get started. As with everything else in life, the place to start is asking yourself if you even care. I mean, if we don’t care what S3 is or what it does, why even bother? Just let your eyes glaze over as the nerd keeps talking and wonder if there’s anything good on TV…</p>
<p>Still here? Cool.</p>
<p>From the user perspective, Amazon’s “Simple Storage Service” isn’t particularly complicated. It’s just a remote storage system that you can dump files into, kind of like a programmable Dropbox. Each file (and its accompanying metadata) is stored as an <em>object</em>, and collections of objects are grouped together into a <em>bucket</em>. If you want to store files on S3, all you need to do is open an account, create a new bucket, and upload your files. It’s exactly that boring, and the only reason anyone cares (as far as I know) is that Amazon designed this to work at scale and it’s fairly easy to write scripts that allow you to control the whole thing programmatically. Which is actually a pretty handy service, now that I think about it!</p>
<p><br></p>
</section>
<section id="downloading-public-data-from-s3" class="level2">
<h2 class="anchored" data-anchor-id="downloading-public-data-from-s3">Downloading public data from S3</h2>
<p>The first thing to understand about S3 is that there’s many different ways of using it. Very often, you’re not interested in storing your own data on S3. You might just want to download data that someone else has stored, and if that data has been made publicly accessible, then you don’t even need an Amazon Web Services (AWS) account at all. You can download to your hearts content. For a data scientist it’s a fun way to start, because you get to dive straight into playing with data insted of fiddling about with accounts and credentials and all those dull things.</p>
<p>So let’s find a public data set to play with. While browsing through the registry of open data sets listed on the S3 website I came across the <a href="https://registry.opendata.aws/nsw-herbarium/">National Herbarium of NSW data set</a>. As described on the website:</p>
<blockquote class="blockquote">
<p>The National Herbarium of New South Wales is one of the most significant scientific, cultural and historical botanical resources in the Southern hemisphere. The 1.43 million preserved plant specimens have been captured as high-resolution images and the biodiversity metadata associated with each of the images captured in digital form. Botanical specimens date from year 1770 to today, and form voucher collections that document the distribution and diversity of the world’s flora through time, particularly that of NSW, Austalia and the Pacific. The data is used in biodiversity assessment, systematic botanical research, ecosystem conservation and policy development. The data is used by scientists, students and the public.</p>
</blockquote>
<p>As an example, here’s one of the images stored in the data set, of a plant specimen collected quite close to where I currently live, albeit quite a long time ago:</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW29246.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
<p>So yeah, I love this data set already and I want to play with it. But how do I do that? I’ve never done anything with S3 before and it’s all a bit new to me. Well, on the right hand side of the listing page for the National Herbarium data, there’s a section that contains the following metadata:</p>
<pre><code>Description
Herbarium Collection Image files

Resource type
S3 Bucket

Amazon Resource Name (ARN)
arn:aws:s3:::herbariumnsw-pds

AWS Region
ap-southeast-2</code></pre>
<p>Using this information, I can get started. I know <em>what</em> the data is (an S3 bucket), I know <em>where</em> the data is (in the <code>"ap-southeast-2"</code> region), and on top of that I know the <em>name</em> of the data (<code>"herbariumnsw-pds"</code>). This should be enough for me to find what I’m looking for!</p>
<section id="finding-the-bucket" class="level3">
<h3 class="anchored" data-anchor-id="finding-the-bucket">Finding the bucket</h3>
<p>Okay, so let’s see if we can find this bucket using R code. The <strong>aws.s3</strong> package contains a handy function called <code>bucket_exists()</code>, which returns <code>TRUE</code> when it finds an S3 bucket at the specified location (and using whatever credentials you currently have available), and <code>FALSE</code> when it does not. That seems relatively easy. We know the name of our bucket, specified more precisely as <code>"s3://herbariumnsw-pds/"</code>, and we can verify that it exists. And of course when we do this it turns out that there…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">bucket_exists</span>(<span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>)</span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_e3a69ca1254b73a8dd7425663cec9545">
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>…isn’t? Wait, what????</p>
<p>I’ve made a very common mistake here, and forgotten to specify the region. S3 is very picky about regions and you need to tell it explicitly which one to use. The National Herbarium is an Australian institution and the data are stored in Amazon’s Sydney data center. In Amazon parlance, that’s the <code>"ap-southeast-2"</code> region, but unless you’ve done something to set a different default (more on that later), everything you do will probably default to the <code>"us-east-1"</code> region. To override this default, we can explicitly specify the <code>region</code> that <code>bucket_exists()</code> should look in. So now let’s try that again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">bucket_exists</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb5-3">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span></span>
<span id="cb5-4">)</span></code></pre></div>
</div>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-7_1a73c4405d3c9ae480adf7547d5a3572">
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Much better!</p>
</section>
<section id="okay-okay-i-lied" class="level3">
<h3 class="anchored" data-anchor-id="okay-okay-i-lied">Okay, okay, I lied…</h3>
<p>One more thing. If you’ve been following along at home and trying out these commands, you’ve probably noticed that the output you’re getting is a little more verbose than simply returning <code>TRUE</code> or <code>FALSE</code>. The actual output comes with a lot of additional metadata, stored as attributes. I didn’t really want to clutter the output by showing all that stuff, so the examples above secretly removed the attributes before printing the results. What you’ll <em>actually</em> see is something like this:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-8_c8eaf366e80a13f6dff792ad65ab801d">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">bucket_exists</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb7-3">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span></span>
<span id="cb7-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
attr(,"x-amz-id-2")
[1] "cr7uaPSaKx4B5BJNRCDIU+Cpns0menZBjxjT5OltIViGFUlStJxSqI5rT1lZfN3ASVz+p4XMalE="
attr(,"x-amz-request-id")
[1] "AE47G6MWJA7NRMYJ"
attr(,"date")
[1] "Fri, 22 Apr 2022 09:04:11 GMT"
attr(,"x-amz-bucket-region")
[1] "ap-southeast-2"
attr(,"x-amz-access-point-alias")
[1] "false"
attr(,"content-type")
[1] "application/xml"
attr(,"server")
[1] "AmazonS3"</code></pre>
</div>
</div>
<p>If you stare at this long enough this metadata all starts to make sense, especially after you’ve been playing around with S3 for a while. There’s a timestamp, there’s some information about which region the data came from, and so on. Nothing particularly special or interesting here, so let’s move on to something more fun.</p>
</section>
<section id="listing-bucket-contents" class="level3">
<h3 class="anchored" data-anchor-id="listing-bucket-contents">Listing bucket contents</h3>
<p>At this point in the journey we’ve located the bucket, but we have no idea what it contains. To get a list of the bucket contents, the <code>get_bucket_df()</code> function from <strong>aws.s3</strong> is our friend. The National Herbarium data set contains a lot of objects, so I’ll be “frugal” and restrict myself to merely downloading <code>max = 20000</code> records:</p>
<div class="cell" data-hash="index_cache/html/get-bucket_29edbad137ee1cabf7490a6fdc5a38a5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">herbarium_files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_bucket_df</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb9-3">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>, </span>
<span id="cb9-4">  <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">20000</span></span>
<span id="cb9-5">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">as_tibble</span>()</span></code></pre></div>
</div>
<p>Now that we’ve downloaded a list of the bucket contents, let’s have a look and see what we’ve got:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">herbarium_files</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20,000 × 8
   Key                        LastM…¹ ETag  Size  Owner…² Owner…³ Stora…⁴ Bucket
   &lt;chr&gt;                      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; 
 1 ReadMe.txt                 2020-0… "\"5… 2729  97c09b… herbar… STANDA… herba…
 2 dwca-nsw_avh-v1.0.zip      2019-1… "\"2… 8231… 97c09b… herbar… STANDA… herba…
 3 herbariumnsw-pds/PublicDa… 2021-0… "\"3… 33    &lt;NA&gt;    &lt;NA&gt;    STANDA… herba…
 4 herbariumnsw-pds/PublicDa… 2021-0… "\"5… 433   &lt;NA&gt;    &lt;NA&gt;    STANDA… herba…
 5 herbariumnsw-pds/PublicDa… 2021-0… "\"5… 33    &lt;NA&gt;    &lt;NA&gt;    STANDA… herba…
 6 herbariumnsw-pds/PublicDa… 2021-0… "\"f… 433   &lt;NA&gt;    &lt;NA&gt;    STANDA… herba…
 7 herbariumnsw-pds/PublicDa… 2021-0… "\"b… 33    &lt;NA&gt;    &lt;NA&gt;    STANDA… herba…
 8 herbariumnsw-pds/PublicDa… 2021-0… "\"4… 433   &lt;NA&gt;    &lt;NA&gt;    STANDA… herba…
 9 herbariumnsw-pds/PublicDa… 2021-0… "\"f… 33    &lt;NA&gt;    &lt;NA&gt;    STANDA… herba…
10 herbariumnsw-pds/PublicDa… 2021-0… "\"6… 433   &lt;NA&gt;    &lt;NA&gt;    STANDA… herba…
# … with 19,990 more rows, and abbreviated variable names ¹​LastModified,
#   ²​Owner_ID, ³​Owner_DisplayName, ⁴​StorageClass</code></pre>
</div>
</div>
<p>Wonderful! The very first object in the bucket happens to be a file called <code>ReadMe.txt</code>. Perhaps I should download this marvelous object and perhaps even read it?</p>
</section>
<section id="downloading-files" class="level3">
<h3 class="anchored" data-anchor-id="downloading-files">Downloading files</h3>
<p>Okay then. We are now at the step where we want to download a specific object from the bucket, and save it locally as a file. To do this we use the <code>save_object()</code> function. As before, we specify the <code>bucket</code> and the <code>region</code>, but we’ll also need to specify which <code>object</code> should be downloaded, and the <code>file</code> path to which it should be saved. Here’s how that works for the Read Me file:</p>
<div class="cell" data-hash="index_cache/html/download-readme_81ce5c37bac9d7bb5f34e5324a1e7d65">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">save_object</span>(</span>
<span id="cb12-2">  <span class="at" style="color: #657422;">object =</span> <span class="st" style="color: #20794D;">"ReadMe.txt"</span>,</span>
<span id="cb12-3">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb12-4">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>,</span>
<span id="cb12-5">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"herbarium/ReadMe.txt"</span></span>
<span id="cb12-6">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "herbarium/ReadMe.txt"</code></pre>
</div>
</div>
<p>Once again this works and so off I go, reading the Read Me in search of further clues.</p>
<p>As you might hope, the Read Me file does in fact tell us something about how the National Herbarium dataset is organised. In particular, one line in the Read Me informs me that there’s a file storing all the metadata, encoded as a zipped csv file:</p>
<blockquote class="blockquote">
<p>A zipped csv containing the biocollections metadata for the images is available as a DarwinCore Archive at: https://herbariumnsw-pds.s3-ap-southeast-2.amazonaws.com/dwca-nsw_avh-v1.0.zip</p>
</blockquote>
<p>This sounds like a good place to start, doesn’t it? Once again, I’ll use <code>save_object()</code> and try to download the metadata file <code>dwca-nsw_avh-v1.0.zip</code>:</p>
<div class="cell" data-hash="index_cache/html/download-metadata_4619822fca60c9a956d63567a42bf781">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">save_object</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;">object =</span> <span class="st" style="color: #20794D;">"dwca-nsw_avh-v1.0.zip"</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb14-4">  <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"herbarium/dwca-nsw_avh-v1.0.zip"</span></span>
<span id="cb14-6">) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "herbarium/dwca-nsw_avh-v1.0.zip"</code></pre>
</div>
</div>
<p>Success!</p>
<p>I now have a copy of the 79MB zip file on my laptop, and after decompressing the file it turns out I have a 402MB file called <code>occurrence.txt</code> that contains the metadata. As it turns out, the metadata aren’t stored in comma-separated value format, they’re stored in tab-separated value format. Still, that’s fine: the <code>read_tsv()</code> function from the <strong>readr</strong> package can handle it:</p>
<div class="cell" data-hash="index_cache/html/read-data_1e0738550c63a961802caf74734b1c07">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">herbarium <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_tsv</span>(<span class="st" style="color: #20794D;">"herbarium/dwca-nsw_avh-v1.0/occurrence.txt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: One or more parsing issues, see `problems()` for details</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Rows: 725507 Columns: 74
── Column specification ────────────────────────────────────────────────────────
Delimiter: "\t"
chr  (38): id, type, institutionCode, collectionCode, basisOfRecord, occurre...
dbl   (7): minimumElevationInMeters, maximumElevationInMeters, minimumDepthI...
lgl  (28): lifeStage, associatedSequences, associatedTaxa, previousIdentific...
dttm  (1): modified

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">herbarium</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 725,507 × 74
   id     type  modified            institutionCode collectionCode basisOfRecord
   &lt;chr&gt;  &lt;chr&gt; &lt;dttm&gt;              &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;        
 1 NSW:N… Phys… 2013-11-28 11:56:00 NSW             NSW            PreservedSpe…
 2 NSW:N… Phys… 2012-08-09 15:47:00 NSW             NSW            PreservedSpe…
 3 NSW:N… Phys… 2015-03-13 15:51:00 NSW             NSW            PreservedSpe…
 4 NSW:N… Phys… 2018-07-24 10:06:00 NSW             NSW            PreservedSpe…
 5 NSW:N… Phys… 2015-03-13 15:51:00 NSW             NSW            PreservedSpe…
 6 NSW:N… Phys… 2013-07-24 15:16:00 NSW             NSW            PreservedSpe…
 7 NSW:N… Phys… 2015-03-13 15:51:00 NSW             NSW            PreservedSpe…
 8 NSW:N… Phys… 2010-12-01 14:25:00 NSW             NSW            PreservedSpe…
 9 NSW:N… Phys… 2018-01-24 16:49:00 NSW             NSW            PreservedSpe…
10 NSW:N… Phys… 2018-07-24 10:05:00 NSW             NSW            PreservedSpe…
# … with 725,497 more rows, and 68 more variables: occurrenceID &lt;chr&gt;,
#   catalogNumber &lt;chr&gt;, occurrenceRemarks &lt;chr&gt;, recordNumber &lt;chr&gt;,
#   recordedBy &lt;chr&gt;, lifeStage &lt;lgl&gt;, reproductiveCondition &lt;chr&gt;,
#   establishmentMeans &lt;chr&gt;, occurrenceStatus &lt;chr&gt;, preparations &lt;chr&gt;,
#   associatedSequences &lt;lgl&gt;, associatedTaxa &lt;lgl&gt;,
#   previousIdentifications &lt;lgl&gt;, eventDate &lt;chr&gt;, verbatimEventDate &lt;chr&gt;,
#   habitat &lt;chr&gt;, eventRemarks &lt;lgl&gt;, continent &lt;lgl&gt;, waterBody &lt;lgl&gt;, …</code></pre>
</div>
</div>
<p>There’s quite a lot of interesting information stored in the 74 columns of the <code>herbarium</code> data, but I won’t dive very deep into it in this post. I will mention, however, that if you find yourself following along at home you’ll likely discover that there is a small proportion of the 725507 rows that cause problems for <code>read_tsv()</code>, likely because they contain additional tab characters that mess up the parsing slightly. In real life I’d want to look into this, but this is a blog post. Nothing here is real and nobody is watching, right?</p>
</section>
<section id="wrangling-the-data" class="level3">
<h3 class="anchored" data-anchor-id="wrangling-the-data">Wrangling the data</h3>
<p>Now that I have some data, I can do a little poking around to see what’s in it. Exploring a new data set is always fun, but this isn’t really a post about data wrangling, so I’ll keep this brief. A quick look suggests that (unsurprisingly) there are a lot of records corresponding to samples collected in Australia, and a disproportionate number of those come from New South Wales:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">herbarium <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">filter</span>(country <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Australia"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;">count</span>(stateProvince)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   stateProvince                     n
   &lt;chr&gt;                         &lt;int&gt;
 1 Australian Capital Territory     52
 2 External Territories           1549
 3 New South Wales              394439
 4 Northern Territory            28922
 5 Queensland                    89016
 6 South Australia               20206
 7 Tasmania                      23994
 8 Victoria                      40984
 9 Western Australia             80447
10 &lt;NA&gt;                           4287</code></pre>
</div>
</div>
<p>That’s nice, but doesn’t immediately suggest a fun example for me to continue this post. On a whim, I decide to name search my neighbourhood. I live in Newtown (in Sydney), so I’m going to find the subset of images in the National Herbarium data whose locality matches the string <code>"Newtown"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">newtowners <span class="ot" style="color: #003B4F;">&lt;-</span> herbarium <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;">filter</span>(</span>
<span id="cb23-3">    country <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Australia"</span>, </span>
<span id="cb23-4">    locality <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_detect</span>(<span class="st" style="color: #20794D;">"Newtown"</span>)</span>
<span id="cb23-5">  )</span></code></pre></div>
</div>
<p>Yeah, no. This is misleading.</p>
<p>From a data science point of view I’m being extremely sloppy here. If my intention had been to find only plants from my neighbourhood, I would also be wise to filter by recorded longitude and latitude where available, and I would certainly want to exclude cases listed as coming from another Australian state. “Newtown” is not an uncommon name, and – to the surprise of nobody – it turns out that there are several different locations called “Newtown” in different parts of Australia. Fortunately for me, I really don’t care! All I wanted was a query that would return around 20-30 results, so this is fine for my purposes.</p>
<p>Now that we’ve got a subset of records, let’s pull out the catalog numbers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">newtowners <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;">pull</span>(catalogNumber)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "NSW 395530"  "NSW 461895"  "NSW 650052"  "NSW 1055313" "NSW 1056305"
 [6] "NSW 29246"   "NSW 36860"   "NSW 39618"   "NSW 687458"  "NSW 121207" 
[11] "NSW 214616"  "NSW 306564"  "NSW 307215"  "NSW 389387"  "NSW 395529" 
[16] "NSW 402973"  "NSW 403188"  "NSW 404127"  "NSW 421494"  "NSW 446243" 
[21] "NSW 570557"  "NSW 702035"  "NSW 676197"  "NSW 776212"  "NSW 777249" 
[26] "NSW 739455"  "NSW 751830" </code></pre>
</div>
</div>
<p>The Read Me file had something useful to say about these numbers. Specifically, the catalog numbers are used as the basis of the file naming convention for images stored in the bucket:</p>
<blockquote class="blockquote">
<p>Image data are organized by NSW specimen barcode number. For example, the file for Dodonaea lobulata recorded on 1968-09-07 = NSW 041500 can be accessed via the URI https://herbariumnsw-pds.s3-ap-southeast-2.amazonaws.com/images/NSW041500.jp2</p>
</blockquote>
<p>Hm. I wonder if I can write code to extract these images?</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW307215.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
</section>
<section id="scripting-the-download" class="level3">
<h3 class="anchored" data-anchor-id="scripting-the-download">Scripting the download</h3>
<p>Okay, now I want to pull the images for these records. First, I’m going to construct the paths. I am <em>not</em> going to download the jp2 files because they’re about 100MB each. Multiplying that number by the number of records gives… well, it gives a big enough number that I think I’ve worked out why the National Herbarium dataset is on S3 and not on a laptop in a damp basement somewhere!</p>
<p>In any case, for a lot of the records there’s a jpg file that is considerably smaller in size, so I’m going to try to download those. Based on the barcodes I’ve got, these are the files I’m expecting to find:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">objects <span class="ot" style="color: #003B4F;">&lt;-</span> newtowners <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;">pull</span>(catalogNumber) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;">str_remove_all</span>(<span class="st" style="color: #20794D;">" "</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;">str_c</span>(<span class="st" style="color: #20794D;">"images/"</span>, ., <span class="st" style="color: #20794D;">".jpg"</span>)</span>
<span id="cb26-5"></span>
<span id="cb26-6">objects</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "images/NSW395530.jpg"  "images/NSW461895.jpg"  "images/NSW650052.jpg" 
 [4] "images/NSW1055313.jpg" "images/NSW1056305.jpg" "images/NSW29246.jpg"  
 [7] "images/NSW36860.jpg"   "images/NSW39618.jpg"   "images/NSW687458.jpg" 
[10] "images/NSW121207.jpg"  "images/NSW214616.jpg"  "images/NSW306564.jpg" 
[13] "images/NSW307215.jpg"  "images/NSW389387.jpg"  "images/NSW395529.jpg" 
[16] "images/NSW402973.jpg"  "images/NSW403188.jpg"  "images/NSW404127.jpg" 
[19] "images/NSW421494.jpg"  "images/NSW446243.jpg"  "images/NSW570557.jpg" 
[22] "images/NSW702035.jpg"  "images/NSW676197.jpg"  "images/NSW776212.jpg" 
[25] "images/NSW777249.jpg"  "images/NSW739455.jpg"  "images/NSW751830.jpg" </code></pre>
</div>
</div>
<p>This all seems pretty reasonable, but there’s a nuance here that is worth pointing out. When you look at the output above, it’s tempting to think that <code>"images"</code> must be a subfolder within the S3 bucket. That intuition isn’t correct: each S3 bucket is a flat datastore. It doesn’t contain any subfolders: the <code>"/"</code> is treated as part of the object name, nothing more. It can be convenient to name objects this way, though, because it makes it a little easier to organise them into subfolders later on if you want to move them onto a more traditional hierarchical file system.</p>
<p>Anyway…</p>
<p>Since I’m going to try downloading objects that may or may not actually exist (i.e., I’m not certain if all these records actually have jpg files), I’m going to start out by writing a helper function <code>save_herbarium_image()</code> that does three things:</p>
<ul>
<li>First, it uses the <code>object_exists()</code> function to check if an object with that name exists in this bucket. The <code>object_exists()</code> function works similarly to the <code>bucket_exists()</code> function I used earlier: the only difference is that I also specify the object name.</li>
<li>Second, if the object exists, it downloads the file and stores it locally, in the <code>"herbarium"</code> subfolder in the folder that contains this blog post.</li>
<li>Third, it returns information to the user. If the object exists and was successfully downloaded, it returns a character string specifying the location of the saved file. If the object doesn’t exist, it returns <code>NA</code>.</li>
</ul>
<p>Here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">save_herbarium_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb28-2">  </span>
<span id="cb28-3">  <span class="co" style="color: #5E5E5E;"># if object doesn't exist in bucket, return NA</span></span>
<span id="cb28-4">  ok <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">object_exists</span>(</span>
<span id="cb28-5">    <span class="at" style="color: #657422;">object =</span> file,</span>
<span id="cb28-6">    <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb28-7">    <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span></span>
<span id="cb28-8">  )</span>
<span id="cb28-9">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span>ok) <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NA_character_</span>)</span>
<span id="cb28-10">  </span>
<span id="cb28-11">  <span class="co" style="color: #5E5E5E;"># if object exists, save it and return file path</span></span>
<span id="cb28-12">  <span class="fu" style="color: #4758AB;">save_object</span>(</span>
<span id="cb28-13">      <span class="at" style="color: #657422;">object =</span> file,</span>
<span id="cb28-14">      <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://herbariumnsw-pds/"</span>, </span>
<span id="cb28-15">      <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>,</span>
<span id="cb28-16">      <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"herbarium/"</span>, file)</span>
<span id="cb28-17">  )</span>
<span id="cb28-18">}</span></code></pre></div>
</div>
<p>And here it is applied to the first file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">objects[<span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;">save_herbarium_image</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "herbarium/images/NSW395530.jpg"</code></pre>
</div>
</div>
<p>That seemed to work well when applied to a single file, so I’ll use the functional programming tools from <strong>purrr</strong> to vectorise the operation. More precisely, I’ll use <code>map_chr()</code> to iterate over all of the <code>objects</code>, applying the <code>save_herbarium_image()</code> function to each one, and collecting the return values from all these function calls into a character vector:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-15_3834f1bc9f251eaafda5d7a5284b7f7e">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">objects <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;">map_chr</span>(save_herbarium_image)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Client error: (404) Not Found
Client error: (404) Not Found
Client error: (404) Not Found
Client error: (404) Not Found</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "herbarium/images/NSW395530.jpg"  "herbarium/images/NSW461895.jpg" 
 [3] "herbarium/images/NSW650052.jpg"  "herbarium/images/NSW1055313.jpg"
 [5] NA                                "herbarium/images/NSW29246.jpg"  
 [7] "herbarium/images/NSW36860.jpg"   "herbarium/images/NSW39618.jpg"  
 [9] "herbarium/images/NSW687458.jpg"  "herbarium/images/NSW121207.jpg" 
[11] "herbarium/images/NSW214616.jpg"  "herbarium/images/NSW306564.jpg" 
[13] "herbarium/images/NSW307215.jpg"  "herbarium/images/NSW389387.jpg" 
[15] NA                                "herbarium/images/NSW402973.jpg" 
[17] "herbarium/images/NSW403188.jpg"  "herbarium/images/NSW404127.jpg" 
[19] NA                                "herbarium/images/NSW446243.jpg" 
[21] "herbarium/images/NSW570557.jpg"  "herbarium/images/NSW702035.jpg" 
[23] "herbarium/images/NSW676197.jpg"  "herbarium/images/NSW776212.jpg" 
[25] "herbarium/images/NSW777249.jpg"  "herbarium/images/NSW739455.jpg" 
[27] NA                               </code></pre>
</div>
</div>
<p>Did it work? Well, kind of. Notice there are some missing values in the output. In those cases the object doesn’t exist in this bucket, and when that happens the <code>save_herbarium_image()</code> function bails and doesn’t try to download anything. But in most cases images it worked.</p>
</section>
<section id="a-minor-irritant-appears" class="level3">
<h3 class="anchored" data-anchor-id="a-minor-irritant-appears">A minor irritant appears!</h3>
<p>At this point, I’d like to start displaying the images. It’s nice to have pretty pictures in a blog post, don’t you think? Like, maybe what I could do is include some of those images in this post. One problem though is that the files stored in the National Herbarium dataset are high resolution images and as consequence even the jpg files are usually about 7MB each. That’s a bit excessive, so I think what I’ll do is write a little helper function that reads in each image, resizes it to something smaller, and then saves that smaller file.</p>
<p>If I want to do this within R, the <strong>magick</strong> package is my friend. It’s extremely well suited to this kind of image manipulation task. This post isn’t about the <strong>magick</strong> package, so I’m not going to explain this part of the code,<sup>2</sup> but suffice it to say that this helper function solves the problem:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">shrink_herbarium_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;">on.exit</span>(<span class="fu" style="color: #4758AB;">gc</span>())</span>
<span id="cb34-3">  img_from <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="st" style="color: #20794D;">"herbarium"</span>, <span class="st" style="color: #20794D;">"images"</span>, file)</span>
<span id="cb34-4">  img_to <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="st" style="color: #20794D;">"herbarium"</span>, <span class="st" style="color: #20794D;">"tiny_images"</span>, file)</span>
<span id="cb34-5">  <span class="fu" style="color: #4758AB;">image_read</span>(img_from) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-6">    <span class="fu" style="color: #4758AB;">image_resize</span>(<span class="fu" style="color: #4758AB;">geometry_size_pixels</span>(<span class="at" style="color: #657422;">width =</span> <span class="dv" style="color: #AD0000;">1000</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-7">    <span class="fu" style="color: #4758AB;">image_write</span>(img_to)</span>
<span id="cb34-8">}</span></code></pre></div>
</div>
<p>Now that I have this function, I can iterate over every image stored in my local <code>images</code> folder, shrink it, and save the small version to the <code>tiny_images</code> folder:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-17_8ed24bec88d65d45ecb0f8d2bc6bb9b3">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="st" style="color: #20794D;">"herbarium/images"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;">map_chr</span>(shrink_herbarium_image)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "herbarium/tiny_images/NSW1055313.jpg"
 [2] "herbarium/tiny_images/NSW121207.jpg" 
 [3] "herbarium/tiny_images/NSW214616.jpg" 
 [4] "herbarium/tiny_images/NSW29246.jpg"  
 [5] "herbarium/tiny_images/NSW306564.jpg" 
 [6] "herbarium/tiny_images/NSW307215.jpg" 
 [7] "herbarium/tiny_images/NSW36860.jpg"  
 [8] "herbarium/tiny_images/NSW389387.jpg" 
 [9] "herbarium/tiny_images/NSW395530.jpg" 
[10] "herbarium/tiny_images/NSW39618.jpg"  
[11] "herbarium/tiny_images/NSW402973.jpg" 
[12] "herbarium/tiny_images/NSW403188.jpg" 
[13] "herbarium/tiny_images/NSW404127.jpg" 
[14] "herbarium/tiny_images/NSW446243.jpg" 
[15] "herbarium/tiny_images/NSW461895.jpg" 
[16] "herbarium/tiny_images/NSW570557.jpg" 
[17] "herbarium/tiny_images/NSW650052.jpg" 
[18] "herbarium/tiny_images/NSW676197.jpg" 
[19] "herbarium/tiny_images/NSW687458.jpg" 
[20] "herbarium/tiny_images/NSW702035.jpg" 
[21] "herbarium/tiny_images/NSW739455.jpg" 
[22] "herbarium/tiny_images/NSW776212.jpg" 
[23] "herbarium/tiny_images/NSW777249.jpg" </code></pre>
</div>
</div>
<p>The output here is a character vector containing names for the created files. That’s nice as a way of checking that everything worked, but I want pretty pictures! So here’s the contents of the <code>tiny_images</code> folder, but shown as the actual images rather than file names:<sup>3</sup></p>
<p><br></p>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>using 'image-only' layout</code></pre>
</div>
<div class="cell-output-display">
<div>
<div class="row p-0 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4" style="margin-left: -.2rem; margin-right: -.2rem; margin-top: 1rem; margin-bottom: 1rem; ">
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW1055313.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW1055313.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW121207.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW121207.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW214616.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW214616.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW29246.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW29246.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW306564.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW306564.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW307215.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW307215.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW36860.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW36860.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW389387.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW389387.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW395530.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW395530.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW39618.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW39618.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW402973.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW402973.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW403188.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW403188.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW404127.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW404127.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW446243.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW446243.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW461895.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW461895.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW570557.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW570557.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW650052.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW650052.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW676197.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW676197.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW687458.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW687458.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW702035.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW702035.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW739455.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW739455.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW776212.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW776212.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
<div class="card bg-transparent m-0 border-0 collapse.show bs4cards-blahblahblah " style="padding: .2rem ; border-width: 0; border-radius: 0 0 0 0 ;">
<a href="https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW777249.jpg" style="color: inherit;">
<img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/herbarium/tiny_images/NSW777249.jpg" class="card-img" style="border-style:solid; border-color:inherits; border-width:0; border-radius: 0 0 0 0 ;">
</a>
</div>
</div>
</div>
</div>
</div>
<p><br></p>
<p>Progress!</p>
<p><br></p>
</section>
</section>
<section id="accounts-and-credentials" class="level2">
<h2 class="anchored" data-anchor-id="accounts-and-credentials">Accounts and credentials</h2>
<p>At this point it is starting to dawn on me that it would be kind of neat to create my own S3 bucket and store the tiny images there. I could make the tiny images public and then display them in this post. The National Herbarium data is released under a Creative Commons By-Attribution licence, so I’m allowed to use the images that way as long as I properly acknowledge the source… which I think is fairly well covered in this post already!</p>
<p>The task I’m going to set for myself later in this post is to do exactly that, and use tools from the <strong>aws.s3</strong> package to do everything in R. However, I can’t do any of that unless I have an AWS account of my very own. The time has come for me to do that.</p>
<section id="creating-the-account" class="level3">
<h3 class="anchored" data-anchor-id="creating-the-account">Creating the account</h3>
<p>Signing up for the account turns out to be pretty easy. All I had to do was visit https://aws.amazon.com/s3/ and click on the “Create an AWS Account” button shown in the image below:</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/aws_s3_signup.png" class="img-fluid" width="1221"></p>
</div>
</div>
<p><br></p>
<p>This then led me through a pretty standard sign up process. I had to provide an email address for the “root user” (i.e., me!), specify a password, and so on. I didn’t sign up for anything that cost money. The free tier allows you 5GB of storage for 12 months, which is fairly convenient for “playing around” purposes, and that’s all I’m intending to do here.</p>
</section>
<section id="creating-credentials" class="level3">
<h3 class="anchored" data-anchor-id="creating-credentials">Creating credentials</h3>
<p>The next step is to create an access key, so that R can interact with S3 using my credentials. At this point a little care is needed. It is possible to create access credentials for the root user, but that’s not a good idea. The root user has access to every AWS service, not just S3, and it’s a bad idea to give R access to any credentials that have those permissions. What I’ll do here is create an an “IAM user” – where “IAM” stands for “Identity and Access Management” – that <em>only</em> has access to my S3 storage, and the credentials I supply to R will be associated with that user. Here’s how I did that. First, I went over to the IAM console here:</p>
<p>https://us-east-1.console.aws.amazon.com/iamv2/home#/users</p>
<p>On this screen there’s an “add users” button that I dutifully click…</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_1.png" class="img-fluid" width="1451"></p>
</div>
</div>
<p><br></p>
<p>From here it’s mostly a matter of following prompts. The screenshot below shows me part way through the creation process. The IAM user has its own username, and it will be allowed programmatic access using an access key:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_2.png" class="img-fluid" width="1115"></p>
</div>
</div>
<p><br></p>
<p>When I get to the next screen it asks me to set the permissions associated with this user. I click on “attach existing policies directly”, and then type “S3” into the search box. It comes up with a list of permission policies associated with S3 and I select the one I want:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_3.png" class="img-fluid" width="1055"></p>
</div>
</div>
<p><br></p>
<p>The third screen is boring. It asks for tags. I don’t give it any. I move onto the fourth screen, which turns out to be a review screen:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_4.png" class="img-fluid" width="1087"></p>
</div>
</div>
<p><br></p>
<p>Having decided I am happy with these settings, I click on the “next” button that isn’t actually shown in these screenshots (it’s at the bottom of the page) and it takes me to a final screen that gives me the access key ID and the secret access key:</p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/screenshots/s3_iam_add_user_5.png" class="img-fluid" width="1054"></p>
</div>
</div>
<p>These are the two pieces of information I need to let R access to my S3 storage.</p>
</section>
<section id="storing-your-aws-credentials-in-r" class="level3">
<h3 class="anchored" data-anchor-id="storing-your-aws-credentials-in-r">Storing your AWS credentials in R</h3>
<p>There are several ways of storing these credentials in R. The easiest is to add the credentials to your <code>.Renviron</code> file, which you can conveniently open with the <code>edit_r_environ()</code> function from the <strong>usethis</strong> package. To get access to the account, the following lines need to be added to your <code>.Renviron</code> file:</p>
<pre><code>AWS_ACCESS_KEY_ID=&lt;your access key id&gt;
AWS_SECRET_ACCESS_KEY=&lt;your secret key&gt;</code></pre>
<p>However, if you’re going to be using the same AWS region all the time (e.g., you’re in Sydney so you tend to use <code>"ap-southeast-2"</code> rather than <code>"us-east-1"</code>), you might as well add a third line that sets your default region. That way, you won’t need to bother manually specifying the <code>region</code> argument every time you want to interact with S3: the <strong>aws.s3</strong> package will use your default. So for me, the relevant lines ended up looking like this:</p>
<pre><code>AWS_ACCESS_KEY_ID=&lt;my access key id&gt;
AWS_SECRET_ACCESS_KEY=&lt;my secret key&gt;
AWS_DEFAULT_REGION=ap-southeast-2</code></pre>
<p>After restarting R, these new settings will apply.</p>
<p><br></p>
<div class="cell">
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW650052.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="manipulating-your-s3-storage-from-r" class="level2">
<h2 class="anchored" data-anchor-id="manipulating-your-s3-storage-from-r">Manipulating your S3 storage from R</h2>
<p>Now that I have an AWS account and credentials, I can start using the <strong>aws.s3</strong> package for more than just downloading files. I can create my own buckets, put objects into those buckets, control the access settings for those objects, and a good deal more besides. So let’s give that a go, shall we?</p>
<section id="creating-a-new-bucket" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-new-bucket">Creating a new bucket</h3>
<p>The function to create a new bucket is called <code>put_bucket()</code> and now that my credentials are set up it’s almost comically easy to use. If I want to create a bucket called <code>"tiny-herbs"</code>, this is what I do:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;">put_bucket</span>(<span class="st" style="color: #20794D;">"tiny-herbs"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>That seems too easy? I am skeptical. I’m convinced that something must have gone wrong, so my first impulse is to use <code>bucket_exists()</code> to verify that it worked. Okay, so… does this new bucket exist?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;">bucket_exists</span>(<span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
attr(,"x-amz-id-2")
[1] "4B8L2PauxADAbOSyFra5ra/OHwObxniV89yWTPe44PJ0TRjIOdsNQdHl1El1t0/39aSQOyJS1FE="
attr(,"x-amz-request-id")
[1] "GH35D6V4G9W945BY"
attr(,"date")
[1] "Tue, 23 Aug 2022 03:05:15 GMT"
attr(,"x-amz-bucket-region")
[1] "ap-southeast-2"
attr(,"x-amz-access-point-alias")
[1] "false"
attr(,"content-type")
[1] "application/xml"
attr(,"server")
[1] "AmazonS3"</code></pre>
</div>
</div>
<p>It does, and notice that both <code>put_bucket()</code> and <code>bucket_exists()</code> have respected my default region setting. When I called <code>put_bucket()</code>, the <strong>aws.s3</strong> package supplied the region from my default and so the bucket was created in Sydney (i.e., “ap-southeast-2”), and it did the same again when I used <code>bucket_exists()</code> to look for the buckets.</p>
<p>So what’s in the bucket? Just like I did with the National Herbarium bucket, I can use the <code>get_bucket_df()</code> function to inspect the contents of my bucket:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;">get_bucket_df</span>(<span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;">as_tibble</span>()</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 0 × 8
# … with 8 variables: Key &lt;chr&gt;, LastModified &lt;chr&gt;, ETag &lt;chr&gt;, Size &lt;chr&gt;,
#   Owner_ID &lt;chr&gt;, Owner_DisplayName &lt;chr&gt;, StorageClass &lt;chr&gt;, Bucket &lt;chr&gt;</code></pre>
</div>
</div>
<p>Hm. Well, yes. Of course it’s empty: I haven’t put any objects in it yet. Maybe I should do that? It does seem like a good idea!</p>
<p>But first…</p>
</section>
<section id="managing-access-control" class="level3">
<h3 class="anchored" data-anchor-id="managing-access-control">Managing access control</h3>
<p>One thing though… is this private or public? This is governed by the Access Control List (ACL) settings. By default, S3 buckets are set to private. You can read and write to them, but no-one else has any access at all. Let’s soften that slightly, and allow anyone to read from the “tiny-herbs” bucket. I could have done that from the beginning by setting <code>acl = "public-read"</code> when I called <code>put_bucket()</code>. However, because I “forgot” to do that earlier, I’ll change it now using <code>put_acl()</code></p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-29_1fd59396c2d351c8fdf4633241ef6b52">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;">put_acl</span>(</span>
<span id="cb46-2">  <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>,</span>
<span id="cb46-3">  <span class="at" style="color: #657422;">acl =</span> <span class="st" style="color: #20794D;">"public-read"</span></span>
<span id="cb46-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Now everyone has read access to the bucket.<sup>4</sup></p>
</section>
<section id="adding-objects-to-your-bucket" class="level3">
<h3 class="anchored" data-anchor-id="adding-objects-to-your-bucket">Adding objects to your bucket</h3>
<p>To put an object inside my new bucket, the function I need is <code>put_object()</code>. When calling it, I need to specify the local path to the <code>file</code> that I want to upload, the name that the <code>object</code> will be assigned when it is added to the bucket, and of course the <code>bucket</code> itself. This time around, I’ll also explicitly set <code>acl = "public-read"</code> to ensure that – while only I have write access – everyone has read access and can download the object if they want to. Because I’m going to call this repeatedly, I’ll wrap all this in a helper function called <code>put_tiny_image()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">put_tiny_image <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">put_object</span>(</span>
<span id="cb48-3">    <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">file.path</span>(<span class="st" style="color: #20794D;">"herbarium"</span>, <span class="st" style="color: #20794D;">"tiny_images"</span>, file),</span>
<span id="cb48-4">    <span class="at" style="color: #657422;">object =</span> file, </span>
<span id="cb48-5">    <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>,</span>
<span id="cb48-6">    <span class="at" style="color: #657422;">acl =</span> <span class="st" style="color: #20794D;">"public-read"</span></span>
<span id="cb48-7">  )</span>
<span id="cb48-8">}</span></code></pre></div>
</div>
<p>To see this in action, let’s create a vector that lists the names of all the tiny images, and then apply the <code>put_tiny_image()</code> function to the first one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">tiny_images <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="st" style="color: #20794D;">"herbarium/tiny_images"</span>)</span>
<span id="cb49-2">tiny_images[<span class="dv" style="color: #AD0000;">1</span>] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;">put_tiny_image</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Okay that seems to work, so once again I’ll use <strong>purrr</strong> to iterate over all the <code>tiny_images</code>, uploading them one by one into my newly-created bucket:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-32_091b93ac8aa084d7681aa0638904c615">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">tiny_images <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;">map_lgl</span>(put_tiny_image)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE</code></pre>
</div>
</div>
<p>That looks pretty good! I’m seeing nothing but <code>TRUE</code> values in the output so it looks like I’ve successfully uploaded all the tiny images. Now that I’ve done this, I can try calling <code>get_bucket_df()</code> again to inspect the current contents of the bucket:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;">get_bucket_df</span>(<span class="st" style="color: #20794D;">"s3://tiny-herbs/"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;">as_tibble</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 23 × 8
   Key            LastModified        ETag  Size  Owner…¹ Owner…² Stora…³ Bucket
   &lt;chr&gt;          &lt;chr&gt;               &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; 
 1 NSW1055313.jpg 2022-08-23T03:05:1… "\"c… 1494… b8b231… djnava… STANDA… tiny-…
 2 NSW121207.jpg  2022-04-22T09:08:0… "\"6… 1562… b8b231… djnava… STANDA… tiny-…
 3 NSW214616.jpg  2022-04-22T09:08:0… "\"f… 2041… b8b231… djnava… STANDA… tiny-…
 4 NSW29246.jpg   2022-04-22T09:08:0… "\"e… 1043… b8b231… djnava… STANDA… tiny-…
 5 NSW306564.jpg  2022-04-22T09:08:0… "\"d… 1819… b8b231… djnava… STANDA… tiny-…
 6 NSW307215.jpg  2022-04-22T09:08:0… "\"e… 1684… b8b231… djnava… STANDA… tiny-…
 7 NSW36860.jpg   2022-04-22T09:08:1… "\"f… 1962… b8b231… djnava… STANDA… tiny-…
 8 NSW389387.jpg  2022-04-22T09:08:1… "\"d… 1240… b8b231… djnava… STANDA… tiny-…
 9 NSW395530.jpg  2022-04-22T09:08:1… "\"3… 1435… b8b231… djnava… STANDA… tiny-…
10 NSW39618.jpg   2022-04-22T09:08:1… "\"a… 1028… b8b231… djnava… STANDA… tiny-…
# … with 13 more rows, and abbreviated variable names ¹​Owner_ID,
#   ²​Owner_DisplayName, ³​StorageClass</code></pre>
</div>
</div>
<p>Yay! It’s done!</p>
</section>
<section id="urls-for-objects-in-public-buckets" class="level3">
<h3 class="anchored" data-anchor-id="urls-for-objects-in-public-buckets">URLs for objects in public buckets</h3>
<p>One last thing. Because the <code>"tiny-herbs"</code> bucket is public, the objects it contains each have their own URL. To make my life a little easier, I wrote a helper function that constructs these URL:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">tiny_herb_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(object, </span>
<span id="cb55-2">                          <span class="at" style="color: #657422;">bucket =</span> <span class="st" style="color: #20794D;">"tiny-herbs"</span>,</span>
<span id="cb55-3">                          <span class="at" style="color: #657422;">region =</span> <span class="st" style="color: #20794D;">"ap-southeast-2"</span>) {</span>
<span id="cb55-4">  <span class="fu" style="color: #4758AB;">paste0</span>(</span>
<span id="cb55-5">    <span class="st" style="color: #20794D;">"https://"</span>, bucket, <span class="st" style="color: #20794D;">"."</span>, <span class="st" style="color: #20794D;">"s3-"</span>, </span>
<span id="cb55-6">    region, <span class="st" style="color: #20794D;">".amazonaws.com"</span>, <span class="st" style="color: #20794D;">"/"</span>, object</span>
<span id="cb55-7">  )</span>
<span id="cb55-8">}</span></code></pre></div>
</div>
<p>For example, here’s one of the URLs associated with the <code>"tiny-herbs"</code> bucket:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;">tiny_herb_url</span>(<span class="st" style="color: #20794D;">"NSW121207.jpg"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW121207.jpg"</code></pre>
</div>
</div>
<p>The images I’ve been showing throughout this post aren’t the original ones from the National Herbarium data set. Rather, they’re the smaller files I stored in the <code>"tiny-herbs"</code> bucket, and the code I’ve been using to display the images throughout the post looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;">tiny_herb_url</span>(<span class="st" style="color: #20794D;">"NSW121207.jpg"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb58-2">  knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">include_graphics</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/https:/tiny-herbs.s3-ap-southeast-2.amazonaws.com/NSW121207.jpg" class="img-fluid"></p>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>At the end of all this you might have all kinds of questions. Questions like, “Danielle, what’s wrong with you?” and “Danielle, is this even your job? Aren’t you supposed to be working on Apache Arrow?” While I could write an entire novel trying to answer the first one, I think I’ll skip over it and move straight onto the second on, because that’s more interesting and doesn’t require anyone to get a therapist.</p>
<p>Although this isn’t a post about Apache Arrow – and so is not directly related to the work I do every day – of the reasons I found myself looking into S3 in the first place is that Arrow is a tool designed to let data scientists work with very large data sets, and S3 is a tool designed to make it easy to store very large data sets. These two things go well together, so much so that the <strong>arrow</strong> R package has its own support for S3 data storage, and many of the data sets that new <strong>arrow</strong> users encounter are stored on S3. From an educational perspective (sorry – I used to be an academic and I can’t help myself) it’s really difficult for people when they need to learn lots of things at the same time. Trying to learn how Arrow works is really hard when you’re still confused about S3. When I started learning Arrow I didn’t know anything about S3, and it was extremely frustrating to have to learn Arrow concepts with all this confusing S3 stuff floating around.</p>
<p>Hence… this post. My main goal here was to talk about S3 as a topic in its own right, and how tools like <strong>aws.s3</strong> allow R users to write code that interacts with S3 data storage. But it’s very handy background knowledge to have if you’re planning to use <strong>arrow</strong> later on.</p>
<p>On top of all that, the <strong>aws.s3</strong> package has a lot more functionality that I haven’t talked about here. You can use it to copy objects from one bucket to another, and delete objects and buckets that you control. You can use it to add tagging metadata, you can use it to configure your S3 bucket as a website (yes, even with all that painful cross-origin resource sharing configuration stuff), and a good deal more besides. It’s a really nice package and I’m glad I took the time to learn it!</p>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It’s deeply important to me that you read this knowing that I was singing <a href="https://www.youtube.com/watch?v=OiwDHHcHPh0"><em>Tragedy</em></a> by Steps at the time I wrote this, complete with dramatic hand gestures↩︎</p></li>
<li id="fn2"><p>I will, yet again, sigh in frustration that I have to include the <code>on.exit(gc())</code> line. My limited understanding is as follows. The <strong>magick</strong> package provides wrappers to the C++ ImageMagick library, and none of the image manipulation is actually done in R. The objects that get “loaded” are just pointers, and exiting the <code>shrink_herbarium_image()</code> function doesn’t necessarily cause R to release memory. So whenever I’m iterating over many images, R doesn’t release old images from the magick resource cache unless I trigger the garbage collection with <code>gc()</code>. This feels inelegant but I haven’t had time to find a better solution.↩︎</p></li>
<li id="fn3"><p>I’m using the <strong>bs4cards</strong> package to display the images in this layout. Oh, and if you click on any image you’ll see a higher resolution version of that image.↩︎</p></li>
<li id="fn4"><p>You can specify different ACL settings for each object, if you want to. The <code>put_acl()</code> function also has an <code>object</code> argument that allows you to control the setting for a single object in a bucket.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Using {Amazon} {S3} with {R}},
  date = {2022-03-17},
  url = {https://blog.djnavarro.net/using-aws-s3-in-r},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Using Amazon S3 with R.”</span> March 17,
2022. <a href="https://blog.djnavarro.net/using-aws-s3-in-r">https://blog.djnavarro.net/using-aws-s3-in-r</a>.
</div></div></section></div> ]]></description>
  <category>Amazon S3</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/index.html</guid>
  <pubDate>Wed, 16 Mar 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-03-17_using-aws-s3-in-r/preview-image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data types in Arrow and R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/index.html</link>
  <description><![CDATA[ 




<!--------------- setup post ----------------->
<!--------------- post ----------------->
<blockquote class="blockquote">
<p>Manuals for translating one language into another can be set up in divergent ways, all compatible with the totality of speech dispositions, yet incompatible with one another <br> &nbsp; &nbsp; – William Van Orman Quine, 1960, <a href="https://en.wikipedia.org/wiki/Word_and_Object">Word and Object</a></p>
</blockquote>
<p><br></p>
<p>At the 2018 useR! conference in Brisbane, Roger Peng gave a fabulous keynote talk on <a href="https://www.youtube.com/watch?v=5033jBHFiHE">teaching R to new users</a> in which he provided an overview of the history of the language and how it is used in the broader community. One thing that stood out to me in his talk – and I’ve seen reflected in other data – is that R is unusual as a language because it’s not designed primarily for programmers. Software engineering practices have now become widespread in the R community, and that’s a good thing. Nevertheless, a very large proportion of the R community don’t have a traditional computer science background – and that’s okay! In fact, given the goals of the language that’s a good thing too.</p>
<p>R is a language designed with a practical goal in mind: it is a tool for statistical programming and data analysis. Because of this design focus, R users tend to care most deeply about <em>the tasks that make up their day to day jobs</em>. Few of us care about the <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754</a> standard for encoding floating point numbers. R users are not typically interested in the <a href="https://en.wikipedia.org/wiki/Endianness">big-endian/little-endian</a> distinction. The purpose of R as a high level statistical programming environment is to abstract away from these things, and to allow users to focus on data cleaning, wrangling, and visualisation. R tries to help you get to your data as easily as possible, build models for your data, report those models reliably, and so on. Because that’s the job.</p>
<p>But.</p>
<p>There’s always a “but”, isn’t there?</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_46_4699.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<aside>
<br>All images in this post are my own, including the artwork, and though I haven’t formally released the art as part of series (and hence not specified a licence for the series as a whole), these specific pieces are covered by the same CC-BY licence that applies to the rest of the post
</aside>
<p><br><br></p>
<p>One of the huge changes in the data science ecosystem in recent years is the change in scale of our data sets. Data sets can now easily encompass billions of rows, and surpass the ability of your machine (and R) to hold in memory. Another huge change in the ecosystem is the proliferation of tools. Data sets have to be passed from one system to another, and when those data sets are large, problems follow. <a href="https://arrow.apache.org/">Apache Arrow</a> solves these problems by providing a multi-language toolbox for data exchange and data analysis. It’s a toolbox designed for a big data environment, and a many-language environment. From the perspective of an R user, it supplies the <strong>arrow</strong> package that provides an interface to Apache Arrow, and through that package allows you to have access to all the other magic that Arrow exposes. It’s an extremely powerful toolbox… but to use it effectively you do need to learn more of those low-level concepts that we as R users like to skim over.</p>
<aside>
In this post I use boldfaced text to denote the names of R packages such as <strong>arrow</strong> and <strong>dplyr</strong>, as well as C++ library such as <strong>libarrow</strong>
</aside>
<p>This post is an attempt to fill that gap for you! It’s a long form post, closer to a full length article than a typical blog. My goals in this post are to:</p>
<ul>
<li>Walk you through (some of!) the low level implementation details for basic data types: how R represents an integer or a numeric, or a date/time object, etc</li>
<li>Discuss how and why Arrow and R sometimes make different choices in these details</li>
<li>Show you how the <strong>arrow</strong> package translates between R and Arrow</li>
<li>Include lots of pretty art, because lets face it, this isn’t an exciting topic!</li>
</ul>
<p>This post isn’t intended to be read in isolation. It’s the third part of a series I have been writing on Apache Arrow and R, and it probably works best if you’ve read the previous two. I’ve made every effort to make this post self-contained and self-explanatory, but it does assume you’re comfortable in R and have a little bit of knowledge about what the <strong>arrow</strong> package does. If you’re not at all familiar with <strong>arrow</strong>, you may find it valuable to read the first post in the series, which is a <a href="https://blog.djnavarro.net/posts/2021-11-19_starting-apache-arrow-in-r/">getting started post</a>, and possibly the second one that talks about the <a href="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/">arrow dplyr backend</a>.</p>
<p>Still keen to read? I haven’t scared you off?</p>
<p>No?</p>
<p>Fabulous! Then read on, my loves!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'arrow'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:utils':

    timestamp</code></pre>
</div>
</div>
<div class="cell">

</div>
<p><br></p>
<section id="regarding-magic" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="regarding-magic">Regarding magic</h2>
<p>Consider this piece of magic. I have a csv file storing a data set. I import the data set into R using whatever my favourite csv reader function happens to be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">magicians <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv_arrow</span>(<span class="st" style="color: #20794D;">"magicians.csv"</span>)</span>
<span id="cb8-2">magicians</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 × 6
   season episode title                                air_date   rating viewers
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt;
 1      1       1 Unauthorized Magic                   2015-12-16    0.2    0.92
 2      1       2 The Source of Magic                  2016-01-25    0.4    1.11
 3      1       3 Consequences of Advanced Spellcasti… 2016-02-01    0.4    0.9 
 4      1       4 The World in the Walls               2016-02-08    0.3    0.75
 5      1       5 Mendings, Major and Minor            2016-02-15    0.3    0.75
 6      1       6 Impractical Applications             2016-02-22    0.3    0.65
 7      1       7 The Mayakovsky Circumstance          2016-02-29    0.3    0.7 
 8      1       8 The Strangled Heart                  2016-03-07    0.3    0.67
 9      1       9 The Writing Room                     2016-03-14    0.3    0.71
10      1      10 Homecoming                           2016-03-21    0.3    0.78
# … with 55 more rows</code></pre>
</div>
</div>
<p>Then I decide to “copy the data into Arrow”.<sup>1</sup> I do that in a very predictable way using the <code>arrow_table()</code> function supplied by the <strong>arrow</strong> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">arrowmagicks <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(magicians)</span>
<span id="cb10-2">arrowmagicks</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
65 rows x 6 columns
$season &lt;int32&gt;
$episode &lt;int32&gt;
$title &lt;string&gt;
$air_date &lt;date32[day]&gt;
$rating &lt;double&gt;
$viewers &lt;double&gt;</code></pre>
</div>
</div>
<p>This is exactly the output I should expect, but the longer I think about it the more it seems to me that something quite remarkable is going on. Some magic is in play here, and I want to know how it works.</p>
<p>To understand why I’m so curious, consider the two objects I now have. The <code>magicians</code> data set is a <em>data frame</em> (a <em>tibble</em>, technically) stored in R. The <code>arrowmagicks</code> data set, however, is a pointer to a data structure stored in Arrow. That data structure is a <em>Table</em> object. <em>Table</em> objects in Arrow are roughly analogous to <em>data frames</em> – both represent tabular data with columns that may be of different types – but they are not the same. The columns of a <em>Table</em> are built from objects called <em>ChunkedArrays</em> that are in turn constructed from <em>Arrays</em>, and those <em>Arrays</em> can contain <em>Scalar</em> objects. In other words, to move data from one language to another an act of translation is required, illustrated below:</p>
<aside>
It’s not standard, but since this is a post about data types, I’ll italicise the names of data types in both R and Arrow (e.g., <i>data.frame</i>, <i>Table</i>). It gets a bit tiresome, but I think it’s helpful
</aside>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/data-types-overview.png" class="img-fluid figure-img" width="2135"></p>
<p></p><figcaption class="figure-caption">A miniature translation guide. On the left a data frame in R is shown: it is comprised of three columns. Each columns is an R vector. We use the term ‘element’ to refer to any length-1 constituent of a vector, even though it isn’t really a distinct object in its own right. On the right is a Table in Arrow: it too is comprised of three columns, encoded as ChunkedArrays. Each ChunkedArray is comprised of one or more Arrays, and each Array contains one or more Scalars, which (unlike elements of R vectors) are distinct objects. The data structure that translates one into the other is called a Schema.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>In this post I’m not going to talk much about the difference between <em>Arrays</em> and <em>ChunkedArrays</em>, or why Arrow organises <em>Tables</em> this way (that will be the topic of a later post). For now it’s enough to recognise that Arrow does have this additional structure: the <em>Table</em> data type in Arrow is not equivalent to the <em>data frame</em> class in R, so a little work is required to map one to the other.</p>
<p>A similar story applies when we look at the contents of the data set. The translation process doesn’t just apply to the “container” object (i.e., the <em>data frame</em> in R and the <em>Table</em> in Arrow), it also applies to the values that the object contains. If we look at the how the columns of <code>magicians</code> and <code>arrowmagicks</code> are labelled, we see evidence of this translation. The <em>integer</em> columns in R have been mapped to <em>int32</em> columns in Arrow, <em>Date</em> columns in R become <em>date32</em> columns in Arrow, and so on.</p>
<aside>
Variable names like <code>arrowmagicks</code> and function calls like <code>arrow_table()</code> are shown in monospace typewriter font
</aside>
<p>There’s quite a lot of complexity to the translation process, yet it all seems to work seamlessly, and it works both ways. I can pull the <code>arrowmagicks</code> data back into R and recover the original data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">collect</span>(arrowmagicks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 65 × 6
   season episode title                                air_date   rating viewers
    &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                &lt;date&gt;      &lt;dbl&gt;   &lt;dbl&gt;
 1      1       1 Unauthorized Magic                   2015-12-16    0.2    0.92
 2      1       2 The Source of Magic                  2016-01-25    0.4    1.11
 3      1       3 Consequences of Advanced Spellcasti… 2016-02-01    0.4    0.9 
 4      1       4 The World in the Walls               2016-02-08    0.3    0.75
 5      1       5 Mendings, Major and Minor            2016-02-15    0.3    0.75
 6      1       6 Impractical Applications             2016-02-22    0.3    0.65
 7      1       7 The Mayakovsky Circumstance          2016-02-29    0.3    0.7 
 8      1       8 The Strangled Heart                  2016-03-07    0.3    0.67
 9      1       9 The Writing Room                     2016-03-14    0.3    0.71
10      1      10 Homecoming                           2016-03-21    0.3    0.78
# … with 55 more rows</code></pre>
</div>
</div>
<p>In this example the translation back and forth “just works”. You really don’t have to think too much about the subtle differences in how Arrow and R “think about the world” and how their data structures are organised. And in general that’s what we want in a multi-language toolbox: we want the data analyst to be thinking about the data, not the cross-linguistic subtleties of the data structures!</p>
<p>That being said, it’s also valuable to give the data analyst flexibility. And that means we’re going to need to talk about <em>Schemas</em>. As shown in the “translation diagram” above, <em>Schemas</em> are the data structure <strong>arrow</strong> uses to govern the translation between R and Arrow, and since I’m going to be talking about data “on the R side” and data “on the Arrow side” a lot, it will be helpful to have some visual conventions to make it a little clearer. Throughout the post you’ll see diagrams showing the default mappings that the <strong>arrow</strong> package uses when converting data columns from R to Arrow and vice versa. In each case I’ll show R data types on the left hand side (against a blue background) and Arrow data types on the right hand side (against an orange background), like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/visual-convention.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Illustration of the graphical convention used in the later diagrams, showing R on the left side (against a blue background) and Arrow on the right side (against an orange background).</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="defining-schemas" class="level2">
<h2 class="anchored" data-anchor-id="defining-schemas">Defining Schemas</h2>
<p>The <strong>arrow</strong> package makes very sensible default choices about how to translate an R data structure into an Arrow data structure, but those choices can never be more than defaults because of the fundamental fact that the languages are inherently different. The quote about the <a href="https://en.wikipedia.org/wiki/Indeterminacy_of_translation">indeterminacy of translation</a> at the top of this post was originally written about natural languages, but I think it applies in programming too. There’s no single rulebook that tells you how to translate between R and Arrow: there can’t be.<sup>2</sup></p>
<p>Suppose that I knew that there would in fact be a “Season 5.1648” coming, consisting of a single episode that would air not only on a specific date, but at a specific time that would – for some bizarre reason<sup>3</sup> – be important to encode in the data. Knowing that this new data point is coming, I’d perhaps want my Arrow data to encode <code>season</code> as a numeric variable, and I’d need to encode the <code>air_date</code> field using a date type that implicitly encodes time of day. I can do this with the <code>schema()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">translation <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">schema</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;">season =</span> <span class="fu" style="color: #4758AB;">float64</span>(), <span class="co" style="color: #5E5E5E;"># not the default</span></span>
<span id="cb14-3">  <span class="at" style="color: #657422;">episode =</span> <span class="fu" style="color: #4758AB;">int32</span>(),</span>
<span id="cb14-4">  <span class="at" style="color: #657422;">title =</span> <span class="fu" style="color: #4758AB;">utf8</span>(), </span>
<span id="cb14-5">  <span class="at" style="color: #657422;">air_date =</span> <span class="fu" style="color: #4758AB;">date64</span>(), <span class="co" style="color: #5E5E5E;"># not the default</span></span>
<span id="cb14-6">  <span class="at" style="color: #657422;">rating =</span> <span class="fu" style="color: #4758AB;">float64</span>(),</span>
<span id="cb14-7">  <span class="at" style="color: #657422;">viewers =</span> <span class="fu" style="color: #4758AB;">float64</span>()</span>
<span id="cb14-8">)</span></code></pre></div>
</div>
<p>Now I can use my schema to govern the translation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">arrowmagicks2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(magicians, <span class="at" style="color: #657422;">schema =</span> translation)</span>
<span id="cb15-2">arrowmagicks2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
65 rows x 6 columns
$season &lt;double&gt;
$episode &lt;int32&gt;
$title &lt;string&gt;
$air_date &lt;date64[ms]&gt;
$rating &lt;double&gt;
$viewers &lt;double&gt;</code></pre>
</div>
</div>
<p>The output may not make complete sense at this point, but hopefully the gist of what I’ve done should be clear. The <code>season</code> is no longer stored as an integer (it’s now a numeric type), and the <code>air_date</code> no longer uses “day” as the unit of encoding, it uses “ms” (i.e., millisecond). I’ve accomplished my goals. Yay!</p>
<p>This is of course a toy example, as are all the other examples you’ll encounter in this post. But the underlying issues are important ones!</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_49_4937.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="why-mapping-languages-is-hard" class="level2">
<h2 class="anchored" data-anchor-id="why-mapping-languages-is-hard">Why mapping languages is hard</h2>
<!--

> BEASTS, may be distinguished by their several shapes, properties, uses, food, their tameness or wildness, etc. into such as are either
> 
> - VIVIPAROUS; producing living young.
> 
>     - WHOLE FOOTED, the *soles* of whose *feet* is are undivided, being used chiefly for *Carriage*. I.
>     - CLOVEN FOOTED. II. <br>
>       *Clawed*, or *multifidous*; the end of whose *feet* is branched out into *toes*; whether
>       
>         - NOT RAPACIOUS. III.
>         - RAPACIOUS; living upon the prey of other *Animals*; having generally *six short pointed* incisors, or *cutting teeth*, and *two long fangs* to hold their prey; whether the
>         
>             - CAT-KIND; having a *roundish head*. IV.
>             - DOG-KIND; whose *heads* are *more oblong*. V.
>             
> - OVIPAROUS; breeding *Eggs*. VI.
>
> -- John Wilkins, 1668, [An Essay Towards a Real Character, and a Philosophical Language](https://www.google.com.au/books/edition/_/BCCtZjBtiEYC?hl=en&gbpv=1)

-->
<p>Organising the world into concepts (or data structures) is hard.<sup>4</sup> We define <a href="https://en.wikipedia.org/wiki/Ontology_(information_science)">ontologies</a> that impose order on a chaotic world, but those structures are rarely adequate to describe the world as it is. While doing background research for this post I spent a little time reading various sections from <a href="https://www.google.com.au/books/edition/_/BCCtZjBtiEYC?hl=en&amp;gbpv=1">An Essay Towards a Real Character, and a Philosophical Language</a>, a monograph written by John Wilkins in 1668 that makes a valiant (but doomed… oh so doomed) attempt to organise all the categories of things and propose a mechanism by which we could describe them within a single universal language. The classification systems he came up with were… not great. For example, he divided BEASTS into two categories: VIVIPAROUS beasts are those that bear live young, whereas OVIPAROUS beasts are those that lay eggs. The viviparous ones could be subdivided into WHOLE-FOOTED ones and CLOVEN-FOOTED ones. The cloven-footed beasts could be subdivided into those that were RAPACIOUS and those that were not. RAPACIOUS types could be of the CAT-KIND or the DOG-KIND.</p>
<p>Suffice it to say the poor man had never encountered a kangaroo.</p>
<p>The problem with trying to construct universal ontologies is that these things are made by humans, and humans have a perspective that is tied to their own experience and history. As a 17th century English gentleman, Wilkins saw the world in a particular way, and the structure of the language he tried to construct reflected that fact.</p>
<p>I am of course hardly the first person to notice this. In 1952 the Argentinian author Jorge Luis Borges published a wonderful essay called <a href="https://ccrma.stanford.edu/courses/155/assignment/ex1/Borges.pdf">The Analytical Language of John Wilkins</a> that both praises Wilkins’ ambition and then carefully illustrates why it is necessarily doomed to fail. Borges’ essay describes a classification system from an fictitious “Celestial Emporium of Benevolent Knowledge” which carves up the beasts as follows:</p>
<blockquote class="blockquote">
<p>In its remote pages it is written that the animals are divided into: (a) belonging to the emperor, (b) embalmed, (c) tame, (d) sucking pigs, (e) sirens, (f) fabulous, (g) stray dogs, (h) included in the present classification, (i) frenzied, (j) innumerable, (k) drawn with a very fine camelhair brush, (l) et cetera, (m) having just broken the water pitcher, (n) that from a long way off look like flies</p>
</blockquote>
<p>Now, it’s pretty unlikely that any human language would produce a classification system quite as chaotic as Borges’ fictional example, but the point is well made. Actual classification systems used in different languages and cultures are very different to one another and often feel very alien when translated. It’s a pretty fundamental point, and I think it applies to programming languages too.<sup>5</sup> Every language carries with it a set of assumptions and structures that it considers “natural”, and translation across the boundaries between languages is necessarily a tricky business.<sup>6</sup></p>
<p><br></p>
</section>
<section id="a-little-bit-of-big-picture" class="level2">
<h2 class="anchored" data-anchor-id="a-little-bit-of-big-picture">A little bit of big picture</h2>
<p>Before we get to “moving data around” part it’s helpful to step back a little and recognise that R and Arrow are designed quite differently. For starters, the <strong>libarrow</strong> library to which the <strong>arrow</strong> package provides bindings is written in C++, and C++ is itself a different kind of language than R. And in a sense, that’s actually the natural place to start because it influences a lot of things in the design of <strong>arrow</strong>.</p>
<p><br></p>
<section id="object-oriented-programming-in-arrow" class="level3">
<h3 class="anchored" data-anchor-id="object-oriented-programming-in-arrow">Object oriented programming in <strong>arrow</strong></h3>
<p>One of ways in which C++ and R differ is in how each language approaches object oriented programming (OOP). The approach taken in C++ is an <a href="https://adv-r.hadley.nz/oo.html">encapsulated OOP</a> model that is common to many programming languages: methods belong to objects. Anyone coming from outside R is probably most familiar with this style of OOP.</p>
<p>The approach taken in R is… chaotic. R has several different OOP systems that have different philosophies, and each system has its own strengths and weaknesses.<sup>7</sup> The most commonly used system is S3, which is a <a href="https://adv-r.hadley.nz/oo.html">functional OOP</a> model: methods belong to generic functions like <code>print()</code>. Most R users will be comfortable with S3 because it’s what we see most often. That being said, there are several other systems out there, some of which adopt the more conventional encapsulated OOP paradigm. One of the most popular ones is <a href="https://r6.r-lib.org/">R6</a>, and it works more like the OOP systems seen in other languages.</p>
<p>The <strong>arrow</strong> package uses both S3 and R6, but it uses them for quite different things. Whenever <strong>arrow</strong> does something in an “R-native” way, S3 methods get used a lot. For example, in my earlier post on <a href="https://blog.djnavarro.net/posts/2022-01-18_binding-arrow-to-r/">dplyr bindings for Arrow</a> I talked about how <strong>arrow</strong> supplies a <strong>dplyr</strong> engine: this works in part by supplying S3 methods for various <strong>dplyr</strong> functions that are called whenever a suitable Arrow object gets passed to <strong>dplyr</strong>. The interface between <strong>arrow</strong> and <strong>dplyr</strong> uses S3 because this context is “R like”. However, this isn’t a post about that aspect of <strong>arrow</strong>, so we won’t need to talk about S3 again in this post.</p>
<p>However, <strong>arrow</strong> has a second task, which is to interact with <strong>libarrow</strong>, the Arrow C++ library. Because the data structures there all use encapsulated OOP as is conventional in C++, it is convenient to adhere to those conventions within the <strong>arrow</strong> package. Whenever <strong>arrow</strong> has to interact with <strong>libarrow</strong>, it’s useful to be as “C++ like” as possible, and this in turn means that the interface between <strong>arrow</strong> and <strong>libarrow</strong> is accomplished using R6. So we will be seeing <em>R6</em> objects appear quite often in this post.<sup>8</sup></p>
<p><br></p>
</section>
<section id="table-chunkedarray-and-scalar" class="level3">
<h3 class="anchored" data-anchor-id="table-chunkedarray-and-scalar">Table, ChunkedArray, and Scalar</h3>
<p>You may be wondering what I mean when I say that <em>R6</em> objects are used to supply the interface between R and Arrow. I’ll try to give some concrete examples. Let’s think about the <code>arrow_table()</code> function. At the start of the post I used this function to translate an R data frame into an Arrow <em>Table</em>, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">arrow_table</span>(magicians)</span></code></pre></div>
</div>
<p>This is a natural way of thinking about things in R, but the <code>arrow_table()</code> function doesn’t actually do the work. It’s actually just a wrapper function. Within the <strong>arrow</strong> package is an R6 class generator object called <code>Table</code>,<sup>9</sup> and its job is to create tables, modify tables, and so on. You can create a table by using the <code>create()</code> method for <code>Table</code>. In other words, instead of calling <code>arrow_table()</code> I could have done this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">Table<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(magicians)</span></code></pre></div>
</div>
<p>and I would have ended up with the same result.</p>
<p>The same pattern appears throughout the <strong>arrow</strong> package. When I used the <code>schema()</code> function earlier, the same pattern was in play. There is an R6 class generator called <code>Schema</code>, and it too has a <code>create()</code> method. I could have accomplished the same thing by calling <code>Schema$create()</code>.</p>
<p>I could go on like this for some time. Though I won’t talk about all of them in this post, there are R6 objects for <code>Dataset</code>, <code>RecordBatch</code>, <code>Array</code>, <code>ChunkedArray</code>, <code>Scalar</code>, and more. Each of these provides an interface to a data structure in Arrow, and while you can often solve all your problems without ever interacting with these objects, it’s very handy to know about them and feel comfortable using them. As the post goes on, you’ll see me doing that from time to time.</p>
<p>But enough of that! It’s time to start moving data around…</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4893.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="logical-types" class="level2">
<h2 class="anchored" data-anchor-id="logical-types">Logical types</h2>
<p>At long last we arrive at the point where I’m talking about the data values themselves, and the simplest kind of data to talk about are those used to represent truth values. In R, these are called <em>logical</em> data and can take on three possible values: <code>TRUE</code> and <code>FALSE</code> are the two truth values, and <code>NA</code> is used to denote missing data.<sup>10</sup> In a moment I’ll show you how to directly pass individual values from R to Arrow, but for the moment let’s stick to what we know and pass the data across as part of a tabular data structure. Here’s a tiny <em>tibble</em>, with one column of <em>logical</em> values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="cn" style="color: #8f5902;">NA</span>))</span>
<span id="cb19-2">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 1
  values
  &lt;lgl&gt; 
1 TRUE  
2 FALSE 
3 NA    </code></pre>
</div>
</div>
<p>We’re going to pass this across to Arrow using <code>arrow_table()</code> but before we do let’s talk about what we expect to happen when the data arrive at the other side.</p>
<p>In this case, it’s quite straightforward. Arrow has a <em>boolean</em> type that has truth values <code>true</code> and <code>false</code> that behave the same way as their cousins in R. Just like R, Arrow allows missing values, though they’re called <code>null</code> values in Arrow. Unlike basically every other example we’re going to see in this post, this one is straightforward because the mapping is perfect. Unless you do something to override it, the <strong>arrow</strong> package will map an R <em>logical</em> to an Arrow <em>boolean</em> and vice versa. Here’s the diagram I use to describe it:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/logical-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for logical types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Seems to make sense, right? So let’s stop talking about it and create the corresponding <em>Table</em> in Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">arrow_table</span>(dat)</span>
<span id="cb21-2">tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Table
3 rows x 1 columns
$values &lt;bool&gt;</code></pre>
</div>
</div>
<p>Hm. Okay that’s a little underwhelming as output goes? I’d like to see the actual values please. Happily the <strong>arrow</strong> package supplies a <code>$</code> operator for <em>Table</em> objects so we can extract an individual column from <code>tbl</code> the same way we can from the original R object <code>dat</code>. Let’s try that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">tbl<span class="sc" style="color: #5E5E5E;">$</span>values</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    true,
    false,
    null
  ]
]</code></pre>
</div>
</div>
<p>The output looks a little different to what we’d get when printing out a single column of a <em>tibble</em> (or <em>data frame</em>), but it’s pretty clear that we’ve extracted the right thing. A single column inside an Arrow <em>Table</em> is stored as a <em>ChunkedArray</em>, so this looks right.</p>
<p>Yay us!</p>
<p>At this point, it’s handy to remember that the <code>arrow_table()</code> function that I used to move the data into Arrow is really just a wrapper that allows you to access some of the <code>Table</code> functionality without having to think about R6 too much. I also mentioned there’s a class generator called <code>ChunkedArray</code> object and a <code>chunked_array()</code> wrapper function. In hindsight, I probably didn’t need to bother creating the <em>tibble</em> and porting that over as a <em>Table</em>. I could have created a <em>logical vector</em> in R and port that over as a <em>ChunkedArray</em> directly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">values <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;">chunked_array</span>(values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    true,
    false,
    null
  ]
]</code></pre>
</div>
</div>
<p>That’s a cleaner way of doing things. If you want a <em>Table</em>, use <code>Table</code> and its wrappers. If you want a <em>ChunkedArray</em>, use <code>ChunkedArray</code> and its wrappers. There’s no need to over-complicate things.</p>
<p>Speaking of which… later in the post, I’ll often want to send single values to Arrow. In those cases I don’t want to create a <em>ChunkedArray</em>, or even the simpler unchunked <em>Array</em> type. What I want to pass is a <em>Scalar</em>.</p>
<p>It’s worth unpacking this a little. Unlike some languages, R doesn’t really make a strong distinction between “vectors” and “scalars”: an R “scalar” is just a vector of length one. Arrow is stricter, however. A <em>ChunkedArray</em> is a container object with one or more <em>Arrays</em>, and an <em>Array</em> is also a container object with one or more <em>Scalars</em>. If it helps, you can think of it a little bit like working with <em>lists</em> in R: if I have a list <code>lst</code>, then <code>lst[1]</code> is still a list. It doesn’t return the contents of the list. If I want to extract the contents I have to use <code>lst[[1]]</code> to pull them out. Arrow <em>Arrays</em> contain <em>Scalars</em> in a fashion that we would call “list-like” in R.</p>
<p>In any case, the important thing to recognise is that <strong>arrow</strong> contains a class generator object called <code>Scalar</code>, and it works the same way as the other ones. The one difference is that there aren’t any wrapper functions for <code>Scalar</code>, so I’ll have to use <code>Scalar$create()</code> directly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(<span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">boolean</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
true</code></pre>
</div>
</div>
<p>In this example I didn’t really need to explicitly specify that I wanted to import the data as <code>type = boolean()</code>. The value <code>TRUE</code> is an R <em>logical</em>, and the <strong>arrow</strong> default is to map <em>logicals</em> onto <em>booleans</em>. I only included it here because I wanted to call attention to the <code>type</code> argument. Any time that you want to import data as a non-default type, you need to specify the <code>type</code> argument. If you look at the list of <a href="https://arrow.apache.org/docs/dev/r/reference/data-type.html">Apache Arrow data types</a> on the <strong>arrow</strong> documentation page, you’ll see quite a lot of options. For now, the key thing to note is that the <code>type</code> argument expects you to call one of these functions.</p>
<p>Anyway, that’s everything I had to say about <em>logicals</em>. Before moving on though, I’m going to write my own wrapper function, and define <code>scalar()</code> as an alias for <code>Scalar$create()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">scalar <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, <span class="at" style="color: #657422;">type =</span> <span class="cn" style="color: #8f5902;">NULL</span>) {</span>
<span id="cb29-2">  Scalar<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">create</span>(x, type)</span>
<span id="cb29-3">}</span></code></pre></div>
</div>
<p>The main reason I’m doing that is for convenience, because in this post I’m actually going to need this wrapper function a lot. So I should probably check… does it work?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;">scalar</span>(<span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
true</code></pre>
</div>
</div>
<p>Awesome!</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4897.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="integer-types" class="level2">
<h2 class="anchored" data-anchor-id="integer-types">Integer types</h2>
<p>When translating R logicals to Arrow booleans, there aren’t a lot of conceptual difficulties. R has one data structure and Arrow has one data structure, and they’re basically identical. This is easy. Integers, however, are a little trickier because there’s no longer an exact mapping between the two languages. Base R provides one <em>integer</em> type, but Arrow provides eight distinct integer types that it inherits from C++. As a consequence it will no longer be possible to provide one-to-one mappings between R and Arrow, and some choices have to be made. As we’ll see in this section, the <strong>arrow</strong> package tries very hard to set sensible default choices, and in most cases these will work seamlessly. It’s not something you actually have to think about much. But, as my dear friend Dan Simpson<sup>11</sup> reminds me over and over with all things technical, <a href="https://statmodeling.stat.columbia.edu/2022/03/02/god-is-present-in-the-sweeping-gestures-but-the-devil-is-in-the-details/">“God is present in the sweeping gestures but the Devil is in the details”</a>.</p>
<p>It is wise to look carefully at the details, so let’s do that.</p>
<p><br></p>
<section id="arrow-eight-types-of-integer" class="level3">
<h3 class="anchored" data-anchor-id="arrow-eight-types-of-integer">[Arrow] Eight types of integer</h3>
<p>To make sense of the different types, it helps to take a moment to think about how integers are represented in a binary format. Let’s suppose we allocate 8 bits to specify an integer. If we do that, then there are <img src="https://latex.codecogs.com/png.latex?2%5E8%20=%20256"> unique binary patterns we can create with these bits. Because of this, there is a fundamental constraint: no matter how we choose to set it up, 8-bit integers can only represent 256 distinct numbers. Technically, we could choose any 256 numbers we like, but in practice there are only two schemes used for 8-bit integers: “unsigned” 8-bit integers (<em>uint8</em>) use those bits to represent integers from 0 to 255, whereas “signed” 8-bit integers (<em>int8</em>) can represent integers from -128 to 127.</p>
<p>More generally, an unsigned n-bit integer can represent integers from 0 to <img src="https://latex.codecogs.com/png.latex?2%5En%20-%201">, whereas a signed n-bit integer can represent integers from <img src="https://latex.codecogs.com/png.latex?-2%5E%7Bn-1%7D"> to <img src="https://latex.codecogs.com/png.latex?2%5E%7Bn-1%7D%20-%201">. Here’s what that looks like for all the integer types supported by Arrow:</p>
<table class="table">
<colgroup>
<col style="width: 23%">
<col style="width: 12%">
<col style="width: 31%">
<col style="width: 31%">
</colgroup>
<thead>
<tr class="header">
<th>Description</th>
<th style="text-align: right;">Name</th>
<th style="text-align: right;">Smallest Value</th>
<th style="text-align: right;">Largest Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>8 bit unsigned</td>
<td style="text-align: right;"><em>uint8</em></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">255</td>
</tr>
<tr class="even">
<td>16 bit unsigned</td>
<td style="text-align: right;"><em>uint16</em></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">65535</td>
</tr>
<tr class="odd">
<td>32 bit unsigned</td>
<td style="text-align: right;"><em>uint32</em></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">4294967295</td>
</tr>
<tr class="even">
<td>64 bit unsigned</td>
<td style="text-align: right;"><em>uint64</em></td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">18446744073709551615</td>
</tr>
<tr class="odd">
<td>8 bit signed</td>
<td style="text-align: right;"><em>int8</em></td>
<td style="text-align: right;">-128</td>
<td style="text-align: right;">127</td>
</tr>
<tr class="even">
<td>16 bit signed</td>
<td style="text-align: right;"><em>int16</em></td>
<td style="text-align: right;">-32768</td>
<td style="text-align: right;">32767</td>
</tr>
<tr class="odd">
<td>32 bit signed</td>
<td style="text-align: right;"><em>int32</em></td>
<td style="text-align: right;">-2147483648</td>
<td style="text-align: right;">2147483647</td>
</tr>
<tr class="even">
<td>64 bit signed</td>
<td style="text-align: right;"><em>int64</em></td>
<td style="text-align: right;">-9223372036854775808</td>
<td style="text-align: right;">9223372036854775807</td>
</tr>
</tbody>
</table>
<p><br></p>
</section>
<section id="r-one-integer-class" class="level3">
<h3 class="anchored" data-anchor-id="r-one-integer-class">[R] One integer class</h3>
<p>On the R side, the <em>integer</em> type supplied by base R is a 32 bit signed integer, and has a natural one-to-one mapping to the Arrow <em>int32</em> type. Because of this, the <strong>arrow</strong> default is to convert an R <em>integer</em> to an Arrow <em>int32</em> and vice versa. Here’s an example. I’ve been watching <a href="https://en.wikipedia.org/wiki/Snowpiercer_(TV_series)"><em>Snowpiercer</em></a> lately, and the train is currently 1029 cars long so let’s pass the integer <code>1029L</code> from R over to Arrow</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">snowpiercer <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(1029L)</span>
<span id="cb32-2">snowpiercer</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
1029</code></pre>
</div>
</div>
<p>Let’s inspect the <code>type</code> field of the <code>snowpiercer</code> object in order to determine what type of object has arrived in Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">snowpiercer<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Int32
int32</code></pre>
</div>
</div>
<p>We can apply the S3 generic function <code>as.vector()</code> to <code>snowpiercer</code> to pull the data back into R,<sup>12</sup> and hopefully it comes as no surprise to see that we get the same number back:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">as.vector</span>(snowpiercer)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1029</code></pre>
</div>
</div>
<p>We can take this one step further to check that the returned object is actually an R <em>integer</em> by checking its <code>class()</code>, and again there are no surprises:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">snowpiercer <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;">as.vector</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;">class</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "integer"</code></pre>
</div>
</div>
<p>As you can see, the default behaviour in <strong>arrow</strong> is to translate an R <em>integer</em> into an Arrow <em>int32</em>, and vice versa. That part, at least, is not too complicated.</p>
<p>That being said, it’s worth unpacking some of the mechanics of what I’m doing with the code here. Everything I’ve shown above is R code, so it’s important to keep it firmly in mind that when I create the <code>snowpiercer</code> object there are two different things happening: a data object is created inside Arrow, and a pointer to that object is created inside R. The <code>snowpiercer</code> object is that pointer (it’s actually an <em>R6</em> object). When I called <code>snowpiercer$type</code> in R, the output is telling me that the data object in Arrow has type <em>int32</em>. There’s a division of responsibility between R and Arrow that always needs to be kept in mind.</p>
<p>Now, in this particular example there’s an element of silliness because my data object is so tiny. There was never a good reason to put the data in Arrow, and the only reason I’m doing it here is for explanatory purposes. But in real life (like in the TV shoe), <code>snowpiercer</code> might in fact be a gargantuan monstrosity over which you have perilously little control due to it’s staggering size. In that case it makes a big difference where the data object is stored. Placing the data object in Arrow is a little bit like powering your 1029-car long train using the fictitious perpetual motion engine from the show: it is a really, really good idea when you have gargantuan data.<sup>13</sup></p>
<p><br></p>
</section>
<section id="when-integer-translation-is-easy" class="level3">
<h3 class="anchored" data-anchor-id="when-integer-translation-is-easy">When integer translation is easy</h3>
<p>What about the other seven C++ integer types? This is where it gets a little trickier. The table above illustrates that some integer types are fully contained within others: unsurprisingly, every number representable by <em>int16</em> can also be represented by <em>int32</em>, so we can say that the <em>int16</em> numbers are fully “contained” by (i.e.&nbsp;are a proper subset of) the <em>int32</em> numbers. Similarly, <em>uint16</em> is contained by <em>uint32</em>. There are many cases where an unsigned type is contained by a signed type: for instance, <em>int32</em> contains all the <em>uint16</em> numbers. However, because the unsigned integers cannot represent negative numbers, the reverse is never true. So we can map out the relationships between the different types like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/integer-types-03.png" class="img-fluid figure-img" width="274"></p>
<p></p><figcaption class="figure-caption">Containment relationships between the integer types.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Whenever type A contains type B, it’s possible to transform an object of type B into an object of type A without losing information or requiring any special handling. R <em>integers</em> are 32 bit signed integers, which means it’s possible to convert Arrow data of types <em>int32</em>, <em>int16</em>, <em>int8</em>, <em>uint16</em>, and <em>uint8</em> to R <em>integers</em> completely painlessly. So for these data types the <strong>arrow</strong> defaults give us this relationship:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/integer-types-01.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for some integer types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>These are the cases where it is easy.</p>
<p><br></p>
</section>
<section id="when-integer-translation-is-hard" class="level3">
<h3 class="anchored" data-anchor-id="when-integer-translation-is-hard">When integer translation is hard</h3>
<p>Other integer types are messier. To keep things nice and simple, what we’d like to do is to map the Arrow <em>uint32</em>, <em>uint64</em>, and <em>int64</em> types onto the R <em>integer</em> type. Sometimes that’s possible: if all the stored values fall within the range of values representable by R <em>integers</em> (i.e., are between -2147483648 and 2147483647) then we can do this, and that’s what <strong>arrow</strong> does by default. However, if there are values that “overflow” this range, then <strong>arrow</strong> will import the data as a different type. That leads to a rather messy diagram, I’m afraid:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/integer-types-02.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for other integer types. The asterisk notation here is intended to indicate that the path <strong>arrow</strong> follows can depend on the data values and other settings.</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Translations become messy when the boxes in one language don’t quite match up to the content expressed in another. Sometimes it’s just easier to see the system in action, so let’s write a little helper function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">translate_integer <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(value, type) {</span>
<span id="cb40-2">  fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(value, type) {</span>
<span id="cb40-3">    <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb40-4">      <span class="at" style="color: #657422;">value =</span> value,</span>
<span id="cb40-5">      <span class="at" style="color: #657422;">arrow_type =</span> <span class="fu" style="color: #4758AB;">scalar</span>(value, type)<span class="sc" style="color: #5E5E5E;">$</span>type<span class="sc" style="color: #5E5E5E;">$</span>name,</span>
<span id="cb40-6">      <span class="at" style="color: #657422;">r_class =</span> <span class="fu" style="color: #4758AB;">scalar</span>(value, type) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.vector</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">class</span>()</span>
<span id="cb40-7">    )</span>
<span id="cb40-8">  }</span>
<span id="cb40-9">  purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map2_dfr</span>(value, type, fn)</span>
<span id="cb40-10">}</span></code></pre></div>
</div>
<p>The <code>translate_integer()</code> function takes a <code>value</code> vector and a <code>type</code> list as input, and it returns a tibble that tells you what Arrow type was created from each input, and what R class gets returned when we import that Arrow object back into R. I’ll pass the inputs in as <em>doubles</em> originally, but as you’ll see they always get imported to Arrow as integer types because that’s what I’m telling <strong>arrow</strong> to do. So let’s start with an easy case. The number 10 is unproblematic because it’s very small, and <strong>arrow</strong> never encounters any problem trying to pull it back as an R <em>integer</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;">translate_integer</span>(</span>
<span id="cb41-2">  <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>), </span>
<span id="cb41-3">  <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">uint8</span>(), <span class="fu" style="color: #4758AB;">uint32</span>(), <span class="fu" style="color: #4758AB;">uint64</span>(), <span class="fu" style="color: #4758AB;">int64</span>())</span>
<span id="cb41-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  value arrow_type r_class
  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;  
1    10 uint8      integer
2    10 uint32     integer
3    10 uint64     integer
4    10 int64      integer</code></pre>
</div>
</div>
<p>Okay, that makes sense. If the numbers <em>can</em> be represented using the R <em>integer</em> class then that’s what <strong>arrow</strong> will do. Why make life unnecessarily difficult for the user?</p>
<p>Now let’s increase the number to a value that is too big to store as a signed 32-bit integer. This is a value that R cannot represent as an <em>integer</em>, but Arrow can store as a <em>uint32</em>, <em>uint64</em> or <em>int64</em>. What happens when we try to pull that object back into R?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;">translate_integer</span>(</span>
<span id="cb43-2">  <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3000000000</span>, <span class="dv" style="color: #AD0000;">3000000000</span>, <span class="dv" style="color: #AD0000;">3000000000</span>), </span>
<span id="cb43-3">  <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">uint32</span>(), <span class="fu" style="color: #4758AB;">uint64</span>(), <span class="fu" style="color: #4758AB;">int64</span>())</span>
<span id="cb43-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
       value arrow_type r_class  
       &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    
1 3000000000 uint32     numeric  
2 3000000000 uint64     numeric  
3 3000000000 int64      integer64</code></pre>
</div>
</div>
<p>The first two rows seem intuitive. In base R, whenever an <em>integer</em> overflows and becomes too large to store, R will coerce it to a <em>double</em>. This is exactly the same behaviour we’d observe if the data had never left R at all. The third row, however, might come as a bit of a surprise. It certainly surprised me the first time I encountered it. Until very recently I did not know that R even <em>had</em> an <em>integer64</em> class. This class is supplied by the <strong>bit64</strong> package, and although I’m not going to talk about it in any detail here, it provides a mechanism to represent signed 64-bit integers in R. However, the one thing I will mention is the fact that the existence of the <em>integer64</em> class opens up the possibility of forcing <strong>arrow</strong> to always map the <em>integer64</em> class to the <em>int64</em> type and vice versa. If you set</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">arrow.int64_downcast =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p>it will change the <strong>arrow</strong> default so that <em>int64</em> types are always returned as <em>integer64</em> classes, even when the values are small enough that the data could have been mapped to a regular R <em>integer</em>. This can be helpful in situations where you need to guarantee type stability when working with <em>int64</em> data. Now that I’ve altered the global options, I can repeat my earlier command with the number 10.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;">translate_integer</span>(</span>
<span id="cb46-2">  <span class="at" style="color: #657422;">value =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>), </span>
<span id="cb46-3">  <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">uint8</span>(), <span class="fu" style="color: #4758AB;">uint32</span>(), <span class="fu" style="color: #4758AB;">uint64</span>(), <span class="fu" style="color: #4758AB;">int64</span>())</span>
<span id="cb46-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  value arrow_type r_class  
  &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    
1    10 uint8      integer  
2    10 uint32     integer  
3    10 uint64     integer  
4    10 int64      integer64</code></pre>
</div>
</div>
<p>Notice that the results change for the <em>int64</em> type only. The “int64_downcast” option pertains only to the <em>int64</em> type, and does not affect the other integer types.</p>
<p>And that’s it for integers. Next up we’ll talk about numeric types, but first I’ll be a good girl and restore my options to their previous state:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">arrow.int64_downcast =</span> <span class="cn" style="color: #8f5902;">NULL</span>)</span></code></pre></div>
</div>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_46_4628.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="numeric-types" class="level2">
<h2 class="anchored" data-anchor-id="numeric-types">Numeric types</h2>
<p>In the last section I talked about the rather extensive range of data types that Arrow has to represent integers. Sure, there’s a practical benefit to having all these different data types, but at the same time its wild that we even need so many different data structures to represent something so simple. Integers aren’t complicated things. We learn them as kids even before we go to school, and we get taught the arithmetic rules to operate on them very early in childhood.</p>
<p>The problem, though, is that there are A LOT of integers. It’s a tad inconvenient sometimes, but the set of integers is infinite in size,<sup>14</sup> so it doesn’t matter how many bits you allocate to your “int” type, there will always be integers that your machine cannot represent. But this is obvious, so why am I saying it? Mostly to foreshadow that things get worse when we encounter…</p>
<p><br></p>
<section id="floating-point-numbers-and-the-desert-of-the-reals" class="level3">
<h3 class="anchored" data-anchor-id="floating-point-numbers-and-the-desert-of-the-reals">Floating point numbers and the desert of the reals</h3>
<blockquote class="blockquote">
<p>To dissimulate is to pretend not to have what one has. To simulate is to feign to have what one doesn’t have. One implies a presence, the other an absence. But it is more complicated than that because simulating is not pretending: “Whoever fakes an illness can simply stay in bed and make everyone believe he is ill.&nbsp;Whoever simulates an illness produces in himself some of the symptoms” (Littré). Therefore, pretending, or dissimulating, leaves the principle of reality intact: the difference is always clear, it is simply masked, whereas simulation threatens the difference between the “true” and the “false,” the “real” and the “imaginary.” <br> &nbsp; &nbsp; – Jean Baudrillard, 1981, <a href="https://en.wikipedia.org/wiki/Simulacra_and_Simulation">Simulacra and Simulation</a><sup>15</sup></p>
</blockquote>
<p>The real numbers correspond to our intuitive concept of the continuous number line. Just like the integers, the real line extends infinitely far in both directions, but unlike the integers the reals are continuous: for any two real numbers – no matter how close they are to each other – there is always another real number in between. This, quite frankly, sucks. Because the moment you accept that this is true, something ugly happens. If I accept that there must exist a number between 1.01 and 1.02, which I’ll call 1.015, then I have to accept that there is a number between 1.01 and 1.015, which I’ll call 1.0075, and then I have to accept that… oh shit this is going to go on forever. In other words, the reals have the obnoxious property that there between any two real numbers there are an infinity of other real numbers.<sup>16</sup></p>
<p>Try shoving all that into your finite-precision machine.</p>
<p>Stepping away from the mathematics for a moment, most of us already know how programming languages attempt to solve the problem. They use <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic">floating point numbers</a> as a crude tool to approximate the real numbers using a finite-precision machine, and it… sort of works, as long as you never forget that floating point numbers don’t always obey the normal rules of arithmetic. I imagine most people reading this post already know this but for those that don’t, I’ll show you the most famous example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>This is not a bug in R. It happens because <code>0.1</code>, <code>0.2</code>, and <code>0.3</code> are not real numbers in the mathematical sense. Rather, they are encoded in R as objects of type <em>double</em>, and a <em>double</em> is a 64-bit floating point number that adheres to the <a href="https://en.wikipedia.org/wiki/IEEE_754">IEEE 754</a> standard. It’s a bit beyond the scope of this post to dig all the way into the IEEE standard, but it does help a lot to have a general sense of how a floating point number (approximately) encodes a real number, so in the next section I’m going to take a look under the hood of R <em>doubles</em>. I’ll show you how they’re represented as binary objects, and why they misbehave sometimes. I’m doing this for two reasons: firstly it’s just a handy thing to know, but secondly, understanding the misbehaviour of the “standard” binary floating point number representation used in R helps motivate why Arrow and some other platforms expose other options to the user.</p>
<p><br></p>
</section>
<section id="r-the-numeric-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-numeric-class">[R] The numeric class</h3>
<p>To give you a better feel for what a <em>double</em> looks like when represented as a set of bits, I’ve written a little extractor function called <code>unpack_double()</code> that decomposes the object into its constituent bits and prints it out in a visually helpful way (<a href="https://github.com/djnavarro/distill-blog/blob/master/_posts/2022-03-04_data-types-in-arrow-and-r/unpack_double.R">source code here</a>). In truth, it’s just a wrapper around the <code>numTobits()</code> function provided by base R, but one that gives slightly prettier output. Armed with this, let’s take a look at the format. To start out, I’ll do the most boring thing possible and show you the binary representation of <code>0</code> as a floating point number. You will, I imagine, be entirely unshocked to discover that it is in fact a sequence of 64 zeros:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1"><span class="fu" style="color: #4758AB;">unpack_double</span>(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 00000000000 0000000000000000000000000000000000000000000000000000 </code></pre>
</div>
</div>
<p>Truly amazing.</p>
<p>Really, the only thing that matters here is to notice the spacing. The sequence of 64 bits are divided into three meaningful chunks. The “first” bit<sup>17</sup> represents the “sign”: is this a positive number (first bit equals 0) or a negative number (first bit equals 1), where zero is treated as if it were a positive number. The next 11 bits are used to specify an “exponent”: you can think of these bits as if they describe a signed “int11” type, and can be used to store any number between -1022 and 1023.<sup>18</sup> The remaining 53 bits are used to represent the “mantissa”.<sup>19</sup></p>
<p>These three components carve up a real number by using this this decomposition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(%5Cmbox%7Breal%20number%7D)%20=%20(%5Cmbox%7Bsign%7D)%20%5Ctimes%20(%5Cmbox%7Bmantissa%7D)%20%5Ctimes%202%20%5E%20%7B%5Cmbox%7B(exponent)%7D%7D%0A"></p>
<p>Any real number can be decomposed in this way, so long as you have enough digits to express your mantissa and your exponent. Of course, on a finite precision machine we won’t always have enough digits, and this representation doesn’t allow us to fit “more” numbers into the machine: there’s a fundamental limit on what you can accomplish with 64 bits. What it can do for you, however, is let you use your limited resources wisely. The neat thing about adopting the decomposed format that floating-point relies on is that we can describe very large magnitudes and very small magnitudes with a fixed-length mantissa.</p>
<p>To give a concrete example of how floating point works, let’s take a look at the internal representation of <code>-9.832</code>, which I am told is the approximate rate of acceleration experienced by a falling object in the Earth’s polar regions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">polar_g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unpack_double</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">9.832</span>)</span>
<span id="cb53-2">polar_g</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 10000000010 0011101010011111101111100111011011001000101101000100 </code></pre>
</div>
</div>
<p>I wrote some extractor functions that convert those binary components to the sign, exponent, and mantissa values that they represent, so let’s take a look at those:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;">extract_sign</span>(polar_g)</span>
<span id="cb55-2"><span class="fu" style="color: #4758AB;">extract_exponent</span>(polar_g)</span>
<span id="cb55-3"><span class="fu" style="color: #4758AB;">extract_mantissa</span>(polar_g)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1
[1] 3
[1] 1.229</code></pre>
</div>
</div>
<p>Notice that the sign is always represented exactly: it can only be -1 or 1. The exponent is also represented exactly, as long as it’s not too large or too small: the number is always an integer value between -1022 and 1023. The mantissa, however, is a fractional value. When you encounter floating point errors it’s generally going to be because the stored mantissa doesn’t represent the true mantissa with sufficient precision.<sup>20</sup> In any case, let’s check that the formula works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">sign <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract_sign</span>(polar_g)</span>
<span id="cb57-2">exponent <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract_exponent</span>(polar_g)</span>
<span id="cb57-3">mantissa <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract_mantissa</span>(polar_g)</span>
<span id="cb57-4"></span>
<span id="cb57-5">sign <span class="sc" style="color: #5E5E5E;">*</span> mantissa <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">^</span> exponent</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -9.832</code></pre>
</div>
</div>
<p>Yay!</p>
<p>Just to prove to you that this isn’t a fluke, I also included a <code>repack_double()</code> function that automates this calculation. It takes the deconstructed representation of an R <em>double</em> and packs it up again, so <code>repack_double(unpack_double(x))</code> should return <code>x</code>. Here are a few examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">sanity_check <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb59-2">  x <span class="sc" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;">repack_double</span>(<span class="fu" style="color: #4758AB;">unpack_double</span>(x))</span>
<span id="cb59-3">}</span>
<span id="cb59-4"><span class="fu" style="color: #4758AB;">sanity_check</span>(<span class="dv" style="color: #AD0000;">12</span>)</span>
<span id="cb59-5"><span class="fu" style="color: #4758AB;">sanity_check</span>(<span class="dv" style="color: #AD0000;">1345234623462342</span>)</span>
<span id="cb59-6"><span class="fu" style="color: #4758AB;">sanity_check</span>(<span class="fl" style="color: #AD0000;">0.000000002345345234523</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
[1] TRUE
[1] TRUE</code></pre>
</div>
</div>
<p>Now that we have some deeper knowledge of how R <em>doubles</em> are represented internally, let’s return to the numbers in the famous example of floating point numbers misbehaving:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb61-2"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb61-3"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 01111111011 1001100110011001100110011001100110011001100110011010 
0 01111111100 1001100110011001100110011001100110011001100110011010 
0 01111111101 0011001100110011001100110011001100110011001100110011 </code></pre>
</div>
</div>
<p>Although these are clean numbers with a very simple decimal expansion, they are not at all simple when written in a binary floating point representation. In particular, notice that <code>0.1</code> and <code>0.2</code> share the same mantissa but <code>0.3</code> has a different mantissa, and that’s where the truncation errors occur. Let’s take a peek at <code>0.6</code> and <code>0.9</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb63-2"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb63-3"><span class="fu" style="color: #4758AB;">unpack_double</span>(.<span class="dv" style="color: #AD0000;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 01111111110 0011001100110011001100110011001100110011001100110011 
0 01111111110 1001100110011001100110011001100110011001100110011010 
0 01111111110 1100110011001100110011001100110011001100110011001101 </code></pre>
</div>
</div>
<p>So it turns out that <code>0.6</code> has the same mantissa as <code>0.3</code>, and <code>0.8</code> has the same mantissa as <code>0.1</code> and <code>0.2</code>, but <code>0.9</code> has a different mantissa from all of them. So what we might expect is that floating point errors can happen for these cases:<sup>21</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.3</span></span>
<span id="cb65-2"><span class="fl" style="color: #AD0000;">0.3</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.6</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.9</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE
[1] FALSE</code></pre>
</div>
</div>
<p>but not these ones:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.2</span></span>
<span id="cb67-2"><span class="fl" style="color: #AD0000;">0.3</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.3</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.6</span></span>
<span id="cb67-3"><span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.6</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0.8</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE
[1] TRUE
[1] TRUE</code></pre>
</div>
</div>
<p>Okay that checks out! Now, it’s important to recognise that these errors are very small. So when I say that floating point arithmetic doesn’t actually “work”, a little care is needed. It does am impressively good job of approximating something very complicated using a quite limited tool:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5.551115e-17</code></pre>
</div>
</div>
<p>Ultimately, floating point numbers are a simulation in the sense described by Baudrillard at the start of this section. They are a pretense, an attempt to act as if we can encode a thing (the reals) that we cannot encode. Floating point numbers are a fiction, but they are an extraordinarily useful one because they allow us to “cover” a very wide span of numbers across the real line, at a pretty high level of precision, without using too much memory.</p>
<p>We pretend that machines can do arithmetic on the reals. They can’t, but it’s a very powerful lie.</p>
<p><br></p>
</section>
<section id="arrow-the-float64-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-float64-type">[Arrow] The float64 type</h3>
<p>Okay. That was terribly long-winded, and I do apologise. Nevertheless, I promise there is a point to this story and it’s time we switched back over to the Arrow side of things to think about what happens there.</p>
<p>By now you’re probably getting used to the fact that Arrow tends to have more primitive types than R in most situations. Floating point numbers are no exception. R has only a single class, usually referred to as <em>numeric</em> but sometimes called <em>double</em>. In contrast, Arrow has three: <em>float64</em>, <em>float32</em> and <em>float16</em>.<sup>22</sup> It also has another numeric type called <em>decimal</em> that I’ll discuss later.</p>
<p>The easiest of these to discuss is <em>float64</em>, because it adopts the same conventions as the R <em>double</em> class. Just like R, it uses 64 bits to represent a floating point number.<sup>23</sup> Because the data structures are so similar, the default behaviour in <strong>arrow</strong> is to translate an R <em>double</em> into an Arrow <em>float64</em> and vice versa.</p>
<p>As always, I’ve got a little diagram summarising all the default mappings:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/numeric-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for numeric types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Let’s have a look at the Arrow <em>float64</em> type. It’s a little anticlimactic in a sense, because it’s the same data structure as the R <em>double</em> type, so all we’re going to “learn” is that it behaves the same way! First, let’s create one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">float_01 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(<span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb71-2">float_01</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0.1</code></pre>
</div>
</div>
<p>As always, we’ll verify that the created object has the type we’re expecting…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">float_01<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Float64
double</code></pre>
</div>
</div>
<p>… and it does, but you might be slightly puzzled by the output this time. What’s going on with the top line and the bottom line? Why does one say “Float64” and the other say “double”?</p>
<p>We’ve seen the “two lines of output” pattern earlier in the post when printing out an <em>int32</em>, but last time the two lines both said the same thing so I didn’t bother to comment on it. This time, however, there’s something to unpack. The distinction here refers to the name of the object type at the R level and and the C++ level. The first line of the output reads “Float64” because that’s what this data structure is called at the R level (i.e., according to <strong>arrow</strong>). The second line reads “double” because that’s what this data structure is called at the C++ level (i.e., in <strong>libarrow</strong>). There are a few cases where the <strong>arrow</strong> package adopts a slightly different naming scheme to <strong>libarrow</strong>, and so you’ll see this happen from time to time later in the post. There are some good reasons for this difference in nomenclature, and it’s nothing to be concerned about!</p>
<p>Anyway, getting back to the main thread… since we’ve created the value <code>0.1</code> as a <em>float64</em> in Arrow, let’s go through the same exercise we did in R and show that Arrow floats produce the same floating point errors. We’ll create new variables for <code>0.2</code> and <code>0.3</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">float_02 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(<span class="fl" style="color: #AD0000;">0.2</span>)</span>
<span id="cb75-2">float_03 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(<span class="fl" style="color: #AD0000;">0.3</span>)</span></code></pre></div>
</div>
<p>Just like we saw in R, the logical test of equality gives a counterintuitive answer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1">float_01 <span class="sc" style="color: #5E5E5E;">+</span> float_02 <span class="sc" style="color: #5E5E5E;">==</span> float_03</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
false</code></pre>
</div>
</div>
<p>… and just like we saw in R, the reason for it is that there’s a very small rounding error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1">float_01 <span class="sc" style="color: #5E5E5E;">+</span> float_02 <span class="sc" style="color: #5E5E5E;">-</span> float_03</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
5.551115123125783e-17</code></pre>
</div>
</div>
<p>Just so you don’t have to scroll up to check, yes, the rounding error is the same as the one that R produces:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1"><span class="fl" style="color: #AD0000;">0.1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span> <span class="sc" style="color: #5E5E5E;">-</span> <span class="fl" style="color: #AD0000;">0.3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5.551115e-17</code></pre>
</div>
</div>
<p>R and Arrow implement the same standard for floating point arithmetic, and so they “fail” in the same way because the failure occurs at the level of the standard. But we don’t blame IEEE 754 for that, because it’s literally impossible to define any standard that will encode the real numbers in an error-free way on a finite-precision machine.</p>
<p><br></p>
</section>
<section id="arrow-the-float32-and-float16-types" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-float32-and-float16-types">[Arrow] The float32 and float16 types</h3>
<p>The <em>float64</em> type provides an excellent, high precision floating point representation of numeric data. As data types go it is a good type. However, it is a 64-bit type, and sometimes you don’t need to store your data at a high degree of precision. With that in mind, because Arrow places a strong emphasis on both scalability and efficiency, it also provides the <em>float32</em> type and the <em>float16</em> type (though <em>float16</em> hasn’t really been implemented yet, as far as I know). Encoding numeric data in these formats will save space, but will come at a cost of precision. As always, the decision of what encoding works best for your application will depend on what your needs are.</p>
<p>As far as the <strong>arrow</strong> package is concerned, there are no difficulties in passing data back and forth between R <em>doubles</em> and Arrow <em>float32</em> types, but at present it’s not really possible to do this with <em>float16</em> because this isn’t implemented. Still, we can briefly take a look at how it works for <em>float32</em>. Here’s an example of me passing an R <em>double</em> to Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb82-1">float32_01 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(.<span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">float32</span>())</span>
<span id="cb82-2">float32_01</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0.1</code></pre>
</div>
</div>
<p>Let’s quickly verify that it is in fact a 32-bit float:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1">float32_01<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Float32
float</code></pre>
</div>
</div>
<p>And now let’s pull it back into R where it will be, once again, encoded as a <em>double</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1"><span class="fu" style="color: #4758AB;">as.vector</span>(float32_01)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.1</code></pre>
</div>
</div>
<p>Yay! It works!</p>
<p><br></p>
</section>
<section id="decimal-floating-point-numbers" class="level3">
<h3 class="anchored" data-anchor-id="decimal-floating-point-numbers">Decimal floating point numbers?</h3>
<p>It’s time to talk about decimals. This is a fun topic, but I need to start with a warning: I mentioned that Arrow has a <em>decimal</em> type, and your first instinct as an R programmer might be to assume that this is another variation of floating point numbers. Fight this instinct: it’s not quite right.</p>
<p>Okay, ready?</p>
<p>Earlier in this section I promised that the Baudrillard quote from <em>Simulacra and Simulation</em> was going to be relevant? Well, that time has arrived. It’s also the moment at which the quote from <em>Word and Object</em> by Quine that opened this blog post becomes painfully relevant. Stripped of their fancy language, here’s what the two authors are telling us in these passages:</p>
<ul>
<li>The Baudrillard quote emphasises that floating point numbers are a simulation. They are the mechanism by which we pretend to encode real numbers on computers. It’s a lie, but it’s a powerful lie that almost works.</li>
<li>The Quine quote emphasises that translation (and, I would argue, simulation also) is underdetermined. For any complicated thing there are many ways to simulate, or translate, or approximate it. These approximations can be extremely accurate and still be inconsistent with each other.</li>
</ul>
<p>Quine’s truism applies to floating point numbers, and it is the reason why “decimal floating point” numbers exist in addition “binary floating point” numbers. All floating point systems are simulations in the Baudrillard sense of the term: lies, strictly speaking, but close enough to true that the distinction between lies and truth gets a little blurry.</p>
<p>Let’s see how that plays out with floating point numbers. When discussing doubles in R, I mentioned that they represent the real numbers using a decomposition that looks like this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(%5Cmbox%7Breal%20number%7D)%20=%20(%5Cmbox%7Bsign%7D)%20%5Ctimes%20(%5Cmbox%7Bmantissa%7D)%20%5Ctimes%202%20%5E%20%7B%5Cmbox%7B(exponent)%7D%7D%0A"></p>
<p>The number “2” pops out here, doesn’t it? Is there any reason to think that “2” is a pre-ordained necessity when approximating the real numbers on a finite-precision machine? Programmers have a tendency to like using “2” as the base unit for everything because it lines up nicely with binary representations, and that’s often a good instinct when dealing with machines.</p>
<p>Unfortunately, life consists of more than machines.</p>
<p>In particular, binary representations create problems for floating point arithmetic because the world contains entities known as “humans”, who have a habit of writing numbers in decimal notation<sup>24</sup>. Numbers that look simple in decimal notation often look complicated in binary notation and vice versa. As we saw earlier, a “simple” decimal number like 0.1 doesn’t have a short binary expansion and so cannot be represented cleanly in a finite-precision binary floating point number system. Rounding errors are introduced every time a machine uses (base 2) floating point to encode data that were originally stored as a (base 10) number in human text.</p>
<p>A natural solution to this is to design floating point data types that use other bases. It is entirely possible to adopt <a href="https://en.wikipedia.org/wiki/Decimal_floating_point">decimal floating point</a> types that are essentially equivalent to the more familiar binary floating point numbers, but they rely on a base 10 decomposition:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A(%5Cmbox%7Breal%20number%7D)%20=%20(%5Cmbox%7Bsign%7D)%20%5Ctimes%20(%5Cmbox%7Bmantissa%7D)%20%5Ctimes%2010%20%5E%20%7B%5Cmbox%7B(exponent)%7D%7D%0A"></p>
<p>The virtues of decimal floating point seem enticing, and it’s tempting to think that this must be what Arrow implements. However, as we’ll see in the next section, that’s not true.</p>
<p>Instead of using floating-point decimals, it supplies “fixed-point” decimal types. In a floating-point representation, the exponent is chosen automatically, and it is a property of the value itself. The number <code>-9.832</code> will always have an exponent of 3 when encoded as a binary floating-point number (as we saw in the <code>polar_g</code> example earlier), and that exponent will never be influenced by the values of other numbers stored in the same data set.</p>
<p>A fixed-point representation is different. The exponent – and in a decimal representation, remember that the exponent is just “the location of the decimal point” – is chosen by the user. You have to specify where the decimal point is located manually, and this location will be applied to each value stored in the object. In other words, the exponent – which is now called the “scale”, and is parameterised slightly differently – becomes a property of the type, not the value.</p>
<p>Sigh. Nothing in life is simple, is it? It’ll become a little clearer in the next section, I promise!</p>
<p><br></p>
</section>
<section id="arrow-the-decimal-fixed-point-types" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-decimal-fixed-point-types">[Arrow] The decimal fixed-point types</h3>
<p>Arrow has two decimal types, a <em>decimal128</em> type that (shockingly) uses 128 bits to store a floating point decimal number, and a <em>decimal256</em> type that uses 256 bits. As usual <strong>arrow</strong> package supplies type functions <code>decimal128()</code> and <code>decimal256()</code> that allow you to specify decimal types. Both functions have two arguments that you must supply:</p>
<ul>
<li><p><code>precision</code> specifies the number of significant digits to store, similar to setting the length of the mantissa in a floating-point representation.</p></li>
<li><p><code>scale</code> specifies the number of digits that should be stored after the decimal point. If you set <code>scale = 2</code>, exactly two digits will be stored after the decimal point. If you set <code>scale = 0</code>, values will be rounded to the nearest whole number. Negative scales are also permitted (handy when dealing with extremely large numbers), so <code>scale = -2</code> stores the value to the nearest 100.</p></li>
</ul>
<p>One convenience that exists both in the <strong>arrow</strong> R package and within <strong>libarrow</strong> itself is that it can automatically decide whether you need a <em>decimal128</em> or a <em>decimal256</em> simply by looking at the value of the <code>precision</code> argument. If the <code>precision</code> is 38 or less, you can encode the data with a <em>decimal128</em> type. Larger values require a <em>decimal256</em>. If you would like to take advantage of this – as I will do in this post – you can use the <code>decimal()</code> type function which will automatically create the appropriate type based on the specified precision.</p>
<p>One inconvenience that I have in this post, however, is that R doesn’t have any analog of a fixed-point <em>decimal</em>, and consequently I don’t have any way to create an “R decimal” that I can then import into Arrow. What I’ll do instead is create a floating point array in Arrow, and then explicitly cast it to a <em>decimal</em> type. Step one, create the floating point numbers in Arrow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">floats <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(<span class="fu" style="color: #4758AB;">c</span>(.<span class="dv" style="color: #AD0000;">01</span>, .<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">100</span>), <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">float32</span>())</span>
<span id="cb88-2">floats</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    0.01,
    0.1,
    1,
    10,
    100
  ]
]</code></pre>
</div>
</div>
<p>Step two, cast the <em>float32</em> numbers to <em>decimals</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1">decimals <span class="ot" style="color: #003B4F;">&lt;-</span> floats<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">decimal</span>(<span class="at" style="color: #657422;">precision =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">scale =</span> <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb90-2">decimals</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    0.01,
    0.10,
    1.00,
    10.00,
    100.00
  ]
]</code></pre>
</div>
</div>
<p>These two arrays look almost the same (especially because I chose the <code>scale</code> judiciously!), but the underlying encoding is different. The original <code>floats</code> array is a familiar <em>float32</em> type, but if we have a look at the <code>decimals</code> object we see that it adopts a quite different encoding:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1">decimals<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Decimal128Type
decimal128(5, 2)</code></pre>
</div>
</div>
<p>To illustrate that these do behave differently, let’s have fun making floating point numbers misbehave again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1">sad_floats <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(<span class="fu" style="color: #4758AB;">c</span>(.<span class="dv" style="color: #AD0000;">1</span>, .<span class="dv" style="color: #AD0000;">2</span>, .<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb94-2"><span class="fu" style="color: #4758AB;">sum</span>(sad_floats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0.6000000000000001</code></pre>
</div>
</div>
<p>Oh noes. Okay, let’s take a sad <em>float32</em> and turn it into a happy <em>decimal</em>. I’ll store it as a high precision decimal to make it a little easier to compare the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1">happy_decimals <span class="ot" style="color: #003B4F;">&lt;-</span> sad_floats<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">decimal</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">16</span>))</span></code></pre></div>
</div>
<p>Now let’s look at the two sums side by side:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="fu" style="color: #4758AB;">sum</span>(sad_floats)</span>
<span id="cb97-2"><span class="fu" style="color: #4758AB;">sum</span>(happy_decimals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0.6000000000000001
Scalar
0.6000000000000000</code></pre>
</div>
</div>
<p>Yay!</p>
<p>As a final note before moving on, it is (of course!!!) the case that fixed-point decimals aren’t a universal solution to the problems of binary floating-point numbers. They have limitations of their own and there are good reasons why floats remain the default numeric type in most languages. But they have their uses: binary and decimal systems provide different ways to simulate the reals, as do fixed and floating point systems. Each such system is a lie, of course: the reals are too big to be captured in any finite system we create. They are, however, useful.</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4857.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="character-types" class="level2">
<h2 class="anchored" data-anchor-id="character-types">Character types</h2>
<p>Our journey continues. We now leave behind the world of number and enter the domain of text. Such times we shall have! What sights we shall see! (And what terrors lie within?)</p>
<p>Strings are an interesting case. R uses a single data type to represent strings (<em>character</em> vectors) but Arrow has two types, known as <em>strings</em> and <em>large_strings</em>. When using the <strong>arrow</strong> package, Arrow strings are specified using the <code>utf8()</code> function, and large strings correspond to the <code>large_utf8()</code> type. The default mapping is to assume that an R character vector maps onto the Arrow <code>utf8()</code> type, as shown below:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/character-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for character types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>There’s a little more than meets the eye here though, and you might be wondering about the difference between <em>strings</em> and <em>large_strings</em> in Arrow, and when you might prefer one to the other. As you might expect, the large string type is suitable when you’re storing large amounts of text, but to understand it properly I need to talk in more depth about how R and Arrow store strings, and I’ll use this partial list of people that – according to the lyrics of <a href="https://genius.com/Tism-jung-talent-time-lyrics">Jung Talent Time</a> by TISM – were perhaps granted slightly more fame than they had earned on merit:</p>
<pre><code>Bert Newton
Billy Ray Cyrus
Warwick Capper
Uri Geller
Samantha Fox</code></pre>
<p><br></p>
<section id="r-the-character-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-character-class">[R] The character class</h3>
<p>Suppose I want to store this as a <em>character</em> vector in R, storing only the family names for the sake of brevity and visual clarity.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1">jung_talent <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Newton"</span>, <span class="st" style="color: #20794D;">"Cyrus"</span>, <span class="st" style="color: #20794D;">"Capper"</span>, <span class="st" style="color: #20794D;">"Geller"</span>, <span class="st" style="color: #20794D;">"Fox"</span>)</span></code></pre></div>
</div>
<p>Each element of the <code>jung_talent</code> vector is a variable-length string, and is stored internally by R as an array of individual characters<sup>25</sup> So, to a first approximation, your mental model of how R stores the <code>jung_talent</code> variable might look something like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/character-types-02.png" class="img-fluid figure-img" width="2400"></p>
<p></p><figcaption class="figure-caption">Simplified representation of how character vectors are represented in R</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>Here, the <code>jung_talent</code> variable is an object<sup>26</sup> that contains five elements shown as the orange boxes. Internally, each of those orange boxes is itself an array of individual characters shown as the purple boxes. As a description of what R actually does this is a bit of an oversimplification because it ignores the <a href="https://adv-r.hadley.nz/names-values.html#character-vectors">global string pool</a>, but it will be sufficient for the current purposes.</p>
<p>The key thing to understand conceptually is that R treats the elements of a <em>character</em> vector as the fundamental unit. The <code>jung_talent</code> vector is constructed from five distinct strings, <code>"Newton"</code>, <code>"Cyrus"</code>, etc. The <code>"Newton"</code> string is assigned to position 1, the <code>"Cyrus"</code> string is assigned to position 2, and so on.</p>
<p><br></p>
</section>
<section id="arrow-the-utf8-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-utf8-type">[Arrow] The utf8 type</h3>
<p>The approach taken in Arrow is rather different. Instead of carving up the character vector into strings (and internally treating the strings as character arrays), it concatenates everything into one long buffer. The text itself is dumped into one long string, like this:</p>
<pre><code>NewtonCyrusCapperGellerFox</code></pre>
<p>The first element of this buffer – the letter <code>"N"</code> – is stored at “offset 0” (indexing in Arrow starts at 0), the second element is stored at offset 1, and so on. This long array of text is referred to as the “data buffer”, and it does not specify where the boundaries between array elements are. Those are stored separately. If I were to create an Arrow string array called <code>jung_talent_arrow</code>, it would be comprised of a data buffer, and an “offset buffer” that specifies the positions at which each element of the string array begins. In other words, we’d have a mental model that looks a bit like this:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/character-types-03.png" class="img-fluid figure-img" width="1331"></p>
<p></p><figcaption class="figure-caption">Simplified representation of how character vectors are represented in Arrow</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>How are each of these buffers encoded?</p>
<ul>
<li><p>The contents of the data buffer are stored as UTF-8 text, which is itself a variable length encoding: some characters are encoded using only 8 bits while others require 32 bits. This <a href="https://deliciousbrains.com/how-unicode-works/">blog post on unicode</a> is a nice explainer.</p></li>
<li><p>The contents of the offset buffer are stored as unsigned integers, either 32 bit or 64 bit, depending on which of the two Arrow string array types you’re using. I’ll unpack this in the next section.</p></li>
</ul>
<p>Sheesh. That was long. Let’s give ourselves a small round of applause for surviving, and now actually DO something. We’ll port the <code>jung_talent</code> vector over to Arrow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1">jung_talent_arrow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(jung_talent)</span>
<span id="cb102-2">jung_talent_arrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>ChunkedArray
[
  [
    "Newton",
    "Cyrus",
    "Capper",
    "Geller",
    "Fox"
  ]
]</code></pre>
</div>
</div>
<p>That certainly looks like text to me! Let’s take a look at the data type:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb104-1">jung_talent_arrow<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Utf8
string</code></pre>
</div>
</div>
<p>Yep. Definitely text!</p>
<p><br></p>
</section>
<section id="arrow-the-large_utf8-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-large_utf8-type">[Arrow] The large_utf8 type</h3>
<p>Okay, so as I mentioned, Arrow has two different string types: it has <em>strings</em> (also called <em>utf8</em>) and <em>large_strings</em> (also called <em>large_utf8</em>).<sup>27</sup> The default in <strong>arrow</strong> is to translate <em>character</em> data in R to the <em>utf8</em> data type in Arrow, but we can override this if we want to. In order to help you make an informed choice, I’ll dig a little deeper into the difference between the two types.</p>
<p>The first thing to recognise is that the nature of the data buffer is the same for <em>utf8</em> and <em>large_utf8</em>: the difference between the two lies in how the offset buffers are encoded. When character data are encoded as <em>utf8</em> type, every offset value is stored as an unsigned 32-bit integer. That means that – as shown in the table of integer types earlier in the post – you cannot store an offset value larger than 4294967295. This constrain places a practical cap on the total length of the data buffer: if total amount of text stored in the data buffer is greater than about 2GiB, the offset buffer can’t encode the locations within it! Switching to <em>large_utf8</em> means that the offset buffer will store every offset value as an unsigned 64-bit integer. This means that the offset buffer now takes up twice as much space, but it allows you to encode offset values up to… um… 18446744073709551615. And if you’ve got so much text that your data buffer is going to exceed that limit, well, frankly you have bigger problems.</p>
<p>In short, if you’re not going to exceed 2GiB of text in your array, you don’t need <em>large_utf8</em>. Once you start getting near that limit, you might want to think about switching:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb106-1">jung_talent_arrow_big <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">chunked_array</span>(jung_talent, <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">large_utf8</span>())</span>
<span id="cb106-2">jung_talent_arrow_big<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>LargeUtf8
large_string</code></pre>
</div>
</div>
<p>Before moving on, I’ll mention one additional complexity. This is a situation where the distinction between <em>Arrays</em> and <em>ChunkedArrays</em> begins to matter. Strictly speaking, I lied earlier when I said there’s only one data buffer. A more precise statement would be to say that there is one data buffer per chunk (where each chunk in a <em>ChunkedArray</em> is an <em>Array</em>). <em>ChunkedArrays</em> are designed to allow a block (or “chunk”) of contiguous rows in a table to be stored together in a single location (or file). There are good reasons for doing that<sup>28</sup>, but they aren’t immediately relevant. What matters is to recognise that in a <em>ChunkedArray</em>, the 2GiB limit on <em>utf8</em> type data applies on a per-chunk basis. The net result of this is that you probably don’t need <em>large_utf8</em> except in very specific cases.</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4828.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="datetime-types" class="level2">
<h2 class="anchored" data-anchor-id="datetime-types">Date/time types</h2>
<p>Next up on our tour of data types are dates and times. Internally, R and Arrow both adopt the convention of measuring time in terms of the time elapsed since a specific moment in time known as the <a href="https://en.wikipedia.org/wiki/Unix_time">unix epoch</a>. The unix epoch is the time 00:00:00 UTC on 1 January 1970. It was a Thursday.</p>
<p>Despite agreeing on fundamentals, there are some oddities in the particulars. Base R has three date/time classes (<em>Date</em>, <em>POSIXct</em>, and <em>POSIXlt</em>), and while Arrow also has three date/time classes (<em>date32</em>, <em>date64</em>, and <em>timestamp</em>), the default mappings between them are a little puzzling unless you are deeply familiar with what all these data types are and what they represent. I’ll do the deep dive in a moment, but to give you the big picture here’s how the mapping works:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/date-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for date/time types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<section id="r-the-date-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-date-class">[R] The Date class</h3>
<p>On the R side of things, a <em>Date</em> object is represented internally as a numeric value, counting the number of days since the unix epoch. Here is today as a <em>Date</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb108-1">today <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.Date</span>()</span>
<span id="cb108-2">today</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23"</code></pre>
</div>
</div>
<p>If I use <code>unclass()</code> to see what it looks like under the hood:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb110-1"><span class="fu" style="color: #4758AB;">unclass</span>(today)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 19227</code></pre>
</div>
</div>
<p>Fundamentally, a <em>Date</em> object is a number:<sup>29</sup> it counts the number of days that have elapsed since a fixed date. It does not care what the year is, what the month is, or what day of the month it is. It does not care how the date is displayed to the user. All those things are supplied by the <code>print()</code> method, and are not part of the <em>Date</em> itself.</p>
<p><br></p>
</section>
<section id="r-the-posixct-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-posixct-class">[R] The POSIXct class</h3>
<p>A date is a comparatively simple thing. When we want to represent dates and time together, we need to know the time of day, and we might need to store information about the timezone as well (more on that later). Base R has two different classes for representing this, <em>POSIXct</em> and <em>POSIXlt</em>. These names used to confuse me a lot. <a href="https://en.wikipedia.org/wiki/POSIX">POSIX</a> stands for “portable operating system interface”, and it’s a set of standards used to help operating systems remain compatible with each other. In this context though, it’s not very meaningful: all it says “yup we use unix time.”</p>
<p>The more important part of the name is actually the <a href="https://stackoverflow.com/questions/44778721/what-do-ct-and-lt-in-posixct-and-posixlt-mean">“ct” versus “lt”</a> part. Let’s start with <em>POSIXct</em>. The “ct” in <em>POSIXct</em> stands for “calendar time”: internally, R stores the number of seconds<sup>30</sup> that have elapsed since 1970-01-01 00:00 UTC.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb112-1">now <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb112-2">now</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 13:05:52 AEST"</code></pre>
</div>
</div>
<p>If I peek under the hood using <code>unclass()</code> here’s what I see:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb114-1"><span class="fu" style="color: #4758AB;">unclass</span>(now)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1661223953</code></pre>
</div>
</div>
<p>There are no attributes attached to this object, it is simply a count of the number of seconds since that particular moment in time. However, it doesn’t necessarily have to be this way: a <em>POSIXct</em> object is permitted to have a “tzone” attribute, a <em>character</em> string that specifies the timezone that is used when printing the object will be preserved when it is converted to a <em>POSIXlt</em>.</p>
<p>Nevertheless, when I created the <code>now</code> object by calling <code>Sys.time()</code>, no timezone information was stored in the object. The fact that it appears when I print out <code>now</code> occurs because the <code>print()</code> method for <em>POSIXct</em> objects prints the time with respect to a particular timezone. The default is to use the system timezone, which you can check by calling <code>Sys.timezone()</code>, but you can override this behaviour by specifying the timezone explicitly (for a list of timezone names, see <code>OlsonNames()</code>). So if I wanted to print the time in Berlin, I could do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb116-1"><span class="fu" style="color: #4758AB;">print</span>(now, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"Europe/Berlin"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 05:05:52 CEST"</code></pre>
</div>
</div>
<p>If you want to record the timezone as part of your <em>POSIXct</em> object rather than relying on the print method to do the work, you can do so by setting the <code>tzone</code> attribute. To illustrate this, let’s pretend I’m in Tokyo:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb118-1"><span class="fu" style="color: #4758AB;">attr</span>(now, <span class="st" style="color: #20794D;">"tzone"</span>) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Asia/Tokyo"</span></span>
<span id="cb118-2">now</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 12:05:52 JST"</code></pre>
</div>
</div>
<p>The important thing here is that the timezone is metadata used to change the how the time is displayed. Changing the timezone does not alter the number of seconds stored in the <code>now</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb120-1"><span class="fu" style="color: #4758AB;">unclass</span>(now)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1661223953
attr(,"tzone")
[1] "Asia/Tokyo"</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="r-the-posixlt-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-posixlt-class">[R] The POSIXlt class</h3>
<p>What about <em>POSIXlt</em>? It turns out that this is a quite different kind of data structure, and it “thinks” about time in a very different way. The “lt” in <em>POSIXlt</em> stands for “local time”, and internally a <em>POSIXlt</em> object is a list that stores information about the time in a way that more closely mirrors how humans think about it. Here’s what <code>now</code> looks like when I coerce it to a <em>POSIXlt</em> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb122-1">now_lt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXlt</span>(now)</span>
<span id="cb122-2">now_lt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 12:05:52 JST"</code></pre>
</div>
</div>
<p>It looks exactly the same, but this is an illusion produced by the <code>print()</code> method. Internally, the <code>now_lt</code> object is a very different kind of thing. To see this, let’s see what happens if we print it as if it were a regular <em>list</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb124-1"><span class="fu" style="color: #4758AB;">unclass</span>(now_lt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$sec
[1] 52.72954

$min
[1] 5

$hour
[1] 12

$mday
[1] 23

$mon
[1] 7

$year
[1] 122

$wday
[1] 2

$yday
[1] 234

$isdst
[1] 0

$zone
[1] "JST"

$gmtoff
[1] 32400

attr(,"tzone")
[1] "Asia/Tokyo" "JST"        "JDT"       </code></pre>
</div>
</div>
<p>As you can see, this object separately stores the year (counted from 1900), the month (where January is month 0 and December is month 11), the day of the month (starting at day 1), etc.<sup>31</sup> The timezone is stored, as is the day of the week (Sunday is day 0), it specifies whether daylight savings time is in effect, and so on. Time, as represented in the <em>POSIXlt</em> class, uses a collection of categories that are approximately the same as those that humans use when we talk about time.</p>
<p>It is not a compact representation, and it’s useful for quite different things than <em>POSIXct</em>. What matters for the current purposes is that <em>POSIXlt</em> is, fundamentally, a <em>list</em> structure, and is not in any sense a “timestamp”.</p>
<p><br></p>
</section>
<section id="arrow-the-date32-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-date32-type">[Arrow] The date32 type</h3>
<p>Okay, now let’s pivot over to the Arrow side and see what we have to work with. The <em>date32</em> type is similar – but not identical – to the R <em>Date</em> class. Just like the R <em>Date</em> class, it counts the number of days since 1970-01-01. To see this, let’s create an analog of the <code>today</code> <em>Date</em> object inside Arrow, and represent it as a <em>date32</em> type:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb126-1">today_date32 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(today, <span class="at" style="color: #657422;">type =</span> <span class="fu" style="color: #4758AB;">date32</span>())</span>
<span id="cb126-2">today_date32</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23</code></pre>
</div>
</div>
<p>We can expose the internal structure of this object by casting it to an <em>int32</em>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb128-1">today_date32<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">int32</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
19227</code></pre>
</div>
</div>
<p>This is the same answer we got earlier when I used <code>unclass()</code> to take a peek at the internals of the <code>today</code> object. That being said, there is a subtle difference: in Arrow, the <em>date32</em> type is explicitly a 32-bit integer. If you read through the help documentation for date/time classes in R you’ll see that R has something a little more complicated going on. The details don’t matter for this post, but you should be aware that <em>Dates</em> (and <em>POSIXct</em> objects) are stored as <em>doubles</em>. They aren’t stored as integers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb130-1"><span class="fu" style="color: #4758AB;">typeof</span>(today)</span>
<span id="cb130-2"><span class="fu" style="color: #4758AB;">typeof</span>(now)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "double"
[1] "double"</code></pre>
</div>
</div>
<p>In any case, given that the Arrow <em>date32</em> type and the R <em>Date</em> class are so similar to each other in structure and intended usage, it is natural to map R <em>Dates</em> to Arrow <em>date32</em> types and vice versa, and that’s what the <strong>arrow</strong> package does by default.</p>
<p><br></p>
</section>
<section id="arrow-the-date64-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-date64-type">[Arrow] The date64 type</h3>
<p>The <em>date64</em> type is similar to the <em>date32</em> type, but instead of storing the number of days since 1970-01-01 as a 32-bit integer, it stores the number of milliseconds since 1970-01-01 00:00:00 UTC as a 64-bit integer. It’s similar to the <em>POSIXct</em> class in R, except that (1) it uses milliseconds instead of seconds; (2) the internal storage is an <em>int64</em>, not a <em>double</em>; and (3) it does not have metadata and cannot represent timezones.</p>
<p>As you might have guessed, the <em>date64</em> type in Arrow isn’t very similar to the <em>Date</em> class in R. Because it represents time at the millisecond level, the intended use of the <em>date64</em> class is in situations where you want to keep track of units of time smaller than one day. Sure, I CAN create <em>date64</em> objects from R <em>Date</em> objects if I want to…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb132-1"><span class="fu" style="color: #4758AB;">scalar</span>(today, <span class="fu" style="color: #4758AB;">date64</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23</code></pre>
</div>
</div>
<p>…but this is quite wasteful. Why use a 64-bit representation that tracks time at the millisecond level when all I’m doing is storing the date? Although <em>POSIXct</em> and <em>date64</em> aren’t exact matches, they’re more closely related to each other than <em>Date</em> and <em>date64</em>. So let’s create an Arrow analog of <code>now</code> as a <em>date64</em> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb134-1">now_date64 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">date64</span>())</span>
<span id="cb134-2">now_date64</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23</code></pre>
</div>
</div>
<p>The output is printed as a date, but this is a little bit misleading because it doesn’t give you a good sense of the level of precision in the data. Again we can peek under the hood by explicitly casting this to a 64-bit integer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb136-1">now_date64<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">int64</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
1661223952729</code></pre>
</div>
</div>
<p>This isn’t a count of the number of days since the unix epoch, it’s a count of the number of milliseconds. It is essentially the same number, divided by 1000, as the one we obtained when I typed <code>unclass(now)</code>.</p>
<p>However, there’s a puzzle here that we need to solve. Let’s take another look at <code>unclass(now)</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb138-1"><span class="fu" style="color: #4758AB;">unclass</span>(now)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1661223953
attr(,"tzone")
[1] "Asia/Tokyo"</code></pre>
</div>
</div>
<p>This might strike you as very weird. On the face of it, what has happened is that I have taken <code>now</code> (which ostensibly represents time at “second-level” precision), ported it over to Arrow, and created an object <code>now_date64</code> that apparently knows what millisecond it is???? How is that possible? Does Arrow have magic powers?</p>
<p>Not really. R is playing tricks here. Remember how I said that <em>POSIXct</em> objects are secretly <em>doubles</em> and not <em>integers</em>? Well, this is where that becomes relevant. It’s quite hard to get R to confess that a <em>POSIXct</em> object actually knows the time at a more precise level than “to the nearest second” but you can get it do to so by coercing it to a <em>POSIXlt</em> object and then taking a peek at the <code>sec</code> variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb140-1"><span class="fu" style="color: #4758AB;">as.POSIXlt</span>(now)<span class="sc" style="color: #5E5E5E;">$</span>sec</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 52.72954</code></pre>
</div>
</div>
<p>Aha! The first few digits of the decimal expansion are the same ones stored as the least significant digits in <code>now_date64</code>. The data was there all along. Even though <code>unclass(now)</code> produces an output that has been rounded to the nearest second, the original <code>now</code> variable is indeed a <em>double</em>, and it does store the time a higher precision! Ultimately, the accuracy of the time depends on the system clock itself, but the key thing to know here is that even though <em>POSIXct</em> times are almost always displayed to the nearest second, they do have the ability to represent more precise times.</p>
<p>Because of this, the default behaviour in <strong>arrow</strong> is to convert <em>date64</em> types (64-bit integers interpreted as counts of milliseconds) to <em>POSIXct</em> classes (which are secretly 64-bit <em>doubles</em> interpreted as counts of seconds).</p>
<p>Right. Moving on.</p>
<p><br></p>
</section>
<section id="arrow-the-timestamp-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-timestamp-type">[Arrow] The timestamp type</h3>
<p>The last of the Arrow date/time types is the <em>timestamp</em>. The core data structure is a 64-bit integer used to count the number of time units that have passed since the unix epoch, and this is associated with two additional pieces of metadata: the time unit used (e.g., “seconds”, “milliseconds,”microseconds”, “nanoseconds”), and the timezone. As with the <em>POSIXct</em> class in R, the timezone metadata is optional, but the time unit is necessary. The default is to use microseconds (i.e., <code>unit = "us"</code>):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb142-1"><span class="fu" style="color: #4758AB;">scalar</span>(now)</span>
<span id="cb142-2"><span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">timestamp</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"us"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23 03:05:52.729535
Scalar
2022-08-23 03:05:52.729535</code></pre>
</div>
</div>
<p>Alternatively, we could use seconds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb144-1"><span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">timestamp</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"s"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
2022-08-23 03:05:52</code></pre>
</div>
</div>
<p>It’s important to recognise that changing the unit does more than change the precision at which the <em>timestamp</em> is printed. It changes “the thing that is counted”, so the numbers that get stored in the <em>timestamp</em> are quite different depending on the unit. Compare the numbers that are stored when the units are seconds versus when the units are nanoseconds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb146-1"><span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">timestamp</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"s"</span>))<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">int64</span>())</span>
<span id="cb146-2"><span class="fu" style="color: #4758AB;">scalar</span>(now, <span class="fu" style="color: #4758AB;">timestamp</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"ns"</span>))<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">cast</span>(<span class="fu" style="color: #4758AB;">int64</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
1661223952
Scalar
1661223952729535744</code></pre>
</div>
</div>
<p>Okay, what about timezone?</p>
<p>Recall that <code>now</code> has a timezone attached to it, because I explicitly recorded the <code>tzone</code> attribute earlier. Admittedly I lied and I said I was in Tokyo and not in Sydney, but still, that information is in the <code>now</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb148-1">now</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 12:05:52 JST"</code></pre>
</div>
</div>
<p>When I print the R object it displays the time in the relevant time zone. The output for the Arrow object doesn’t do that: the time as displayed is shown in UTC. However, that doesn’t mean that the metadata isn’t there:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb150-1">now_timestamp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(now)</span>
<span id="cb150-2">now_timestamp<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Timestamp
timestamp[us, tz=Asia/Tokyo]</code></pre>
</div>
</div>
<p>I mention this because this caused me a considerable amount of panic at one point when I thought my timezone information had been lost when importing data from <em>POSIXct</em> into Arrow. Nothing was lost, it is simply that the <strong>arrow</strong> R package prints all timestamps in the corresponding UTC time regardless of what timezone is specified in the metadata.</p>
<p>There is, however, a catch. This worked last time because I was diligent and ensured that my <code>now</code> variable encoded the timezone. By default, a <em>POSIXct</em> object created by <code>Sys.time()</code> will not include the timezone. It’s easy to forget this because the <code>print()</code> method for <em>POSIXct</em> objects will inspect the system timezone if the <em>POSIXct</em> object doesn’t contain any timezone information, so it can often look like you have a timezone stored in your <em>POSIXct</em> object when actually you don’t. When that happens, Arrow can’t help you. Because the <em>POSIXct</em> object does not have a timezone (all appearances to the contrary), the object that arrives in Arrow won’t have a timezone either. Here’s what I mean:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb152-1"><span class="co" style="color: #5E5E5E;"># a POSIXct object with no timezone</span></span>
<span id="cb152-2">new_now <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>() <span class="co" style="color: #5E5E5E;"># has no time zone...</span></span>
<span id="cb152-3">new_now               <span class="co" style="color: #5E5E5E;"># ... but appears to!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 13:05:52 AEST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb154-1"><span class="co" style="color: #5E5E5E;"># an Arrow timestamp with no timezone</span></span>
<span id="cb154-2">new_now_timestamp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(new_now)</span>
<span id="cb154-3">new_now_timestamp<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Timestamp
timestamp[us, tz=Australia/Sydney]</code></pre>
</div>
</div>
<p>The take-home message in all this is that if you’re going to be working in both Arrow and R, and using the <strong>arrow</strong> package for data interchange, you’d be well advised to be careful with your <em>POSIXct</em> objects and timezones. They are trickier than they look, and can lead to subtle translation errors if you are not careful!</p>
<p><br></p>
</section>
<section id="um-but-what-about-posixlt" class="level3">
<h3 class="anchored" data-anchor-id="um-but-what-about-posixlt">Um, but what about POSIXlt?</h3>
<p>At long last we come to <em>POSIXlt</em>, which has no clear analog in Arrow. The key idea behind <em>POSIXlt</em> is to represent temporal information in terms of multiple different units: days, weeks, years, seconds, timezones, and so on. It’s a very different kind of thing to a <em>POSIXct</em> object in R or a <em>timestamp</em> in Arrow. In R terms, it’s essentially a <em>list</em>, and as a consequence the default behaviour in <strong>arrow</strong> is to import it as a <em>struct</em> (which serves essentially the same purpose). Here’s how that looks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb156-1"><span class="fu" style="color: #4758AB;">scalar</span>(now_lt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
...</code></pre>
</div>
</div>
<p>The <em>struct</em> object contains named fields that are identical to their <em>POSIXlt</em> equivalents, and whose types have been translated according to the default mappings: <code>sec</code> is a <em>double</em>, <code>min</code> is an <em>int32</em>, <code>hour</code> is an <em>int32</em>, <code>zone</code> is a <em>string</em>, and so on.</p>
<p>This arrangement, where <em>POSIXct</em> maps to <em>timestamp</em> and <em>POSIXlt</em> maps to <em>struct</em>, makes perfect sense when you think about the underlying data structures that <em>POSIXct</em> and <em>POSIXlt</em> encode. Where things can be tricky for the R user is in the “mental account keeping”. In order to be helpful, R displays <em>POSIXct</em> and <em>POSIXlt</em> objects in exactly the same way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb158-1">now</span>
<span id="cb158-2">now_lt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-08-23 12:05:52 JST"
[1] "2022-08-23 12:05:52 JST"</code></pre>
</div>
</div>
<p>Not only that, because <em>POSIXct</em> and <em>POSIXlt</em> are both subclasses of the <em>POSIXt</em> class, R allows you to perform temporal arithmetic on objects of different types:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb160-1">now <span class="sc" style="color: #5E5E5E;">-</span> now_lt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 0 secs</code></pre>
</div>
</div>
<p>This is very convenient from a data analysis perspective, since calculations performed with date/time classes “just work” even though <em>POSIXct</em> objects are secretly <em>doubles</em> and <em>POSIXlt</em> objects are secretly <em>lists</em>. However, all this happens invisibly. In much the same way that it’s easy to forget that <em>POSIXct</em> objects may not encode a timezone even though they look like they do, it can be easy to forget that <em>POSIXct</em> and <em>POSIXlt</em> are fundamentally different objects, and they map onto quite different data structures in Arrow.</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4836.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="duration-types" class="level2">
<h2 class="anchored" data-anchor-id="duration-types">Duration types</h2>
<p>Any discussion of temporal data is incomplete without a discussion of duration types, which are used to describe a length of time without reference to any fixed origin. The figure below shows the default mappings used by <strong>arrow</strong>:</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/duration-types.png" class="img-fluid figure-img" width="960"></p>
<p></p><figcaption class="figure-caption">Default mappings for duration types</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br></p>
<section id="r-the-difftime-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-difftime-class">[R] The difftime class</h3>
<p>In base R, the difference between two date/time objects is stored as a <em>difftime</em> object. To give a better illustration of a <em>difftime</em> object, let’s create <code>diff</code>, a variable that stores the amount of time elapsed between executing the R markdown chunk that first computed the <code>now</code> variable, and executing the R markdown chunk below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb162-1">new_now <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb162-2">rmd_time <span class="ot" style="color: #003B4F;">&lt;-</span> new_now <span class="sc" style="color: #5E5E5E;">-</span> now</span>
<span id="cb162-3">rmd_time</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 0.5508101 secs</code></pre>
</div>
</div>
<p>Now let’s take a look at how it’s actually stored:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb164-1"><span class="fu" style="color: #4758AB;">unclass</span>(rmd_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.5508101
attr(,"units")
[1] "secs"</code></pre>
</div>
</div>
<p>The duration is represented as a <em>double</em> variable, and the <code>"units"</code> attribute is used to specify the time unit that it represents: “secs”, “mins”, “hours”, “days” or “weeks”. Unless the user specifies exactly which unit is to be used, R will attempt to make a sensible choice. For instance, if I were to do this,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb166-1">hedy_lamarr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXct</span>(<span class="st" style="color: #20794D;">"1914-11-09 19:30:00"</span>, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"Europe/Vienna"</span>)</span>
<span id="cb166-2">hedy_age <span class="ot" style="color: #003B4F;">&lt;-</span> now <span class="sc" style="color: #5E5E5E;">-</span> hedy_lamarr</span>
<span id="cb166-3">hedy_age</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time difference of 39368.36 days</code></pre>
</div>
</div>
<p>I would learn that it has been 39368 days since <a href="https://en.wikipedia.org/wiki/Hedy_Lamarr">Hedy Lamarr</a> was born.<sup>32</sup> More to the point, R has guessed that the length of time is sufficiently long that “seconds” aren’t the appropriate encoding unit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb168-1"><span class="fu" style="color: #4758AB;">unclass</span>(hedy_age)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 39368.36
attr(,"units")
[1] "days"</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="arrow-the-duration-type" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-duration-type">[Arrow] The duration type</h3>
<p>The <em>difftime</em> class in R has a natural analog in Arrow, the <em>duration</em> type. As usual though, they are not exactly equivalent to one another. An R <em>difftime</em> object stores the value as a <em>double</em>, so it has no problems storing 0.55 as the value and setting the units to be seconds. This doesn’t work very well in Arrow because the value is stored as a signed 64 bit integer (<em>int64</em>), and a value of 0.55 seconds will simply round down to a duration of zero seconds. When importing my duration data into Arrow, then, I should be careful to ensure I choose a higher precision unit. If I don’t, things can go a little awry:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb170-1">rmd_time_arrow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(rmd_time)</span>
<span id="cb170-2">rmd_time_arrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
0</code></pre>
</div>
</div>
<p>Hm. Zero seconds was not exactly the answer I was looking for. It helps a little to take a peek at the data type and see what precisely it is that I have just created:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb172-1">rmd_time_arrow<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DurationType
duration[s]</code></pre>
</div>
</div>
<p>This reveals my mistake. I’ve encoded the time rounded to the nearest second, which is not very useful in this instance. What I really should have done is specify a higher level of precision. To import a <em>duration</em> into Arrow rounded to the nearest microsecond, I can do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb174-1">rmd_time_arrow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(rmd_time, <span class="fu" style="color: #4758AB;">duration</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"us"</span>))</span>
<span id="cb174-2">rmd_time_arrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
550810</code></pre>
</div>
</div>
<p>That’s a little better! Again, I can inspect the data type and see that the unit of encoding is now set to microseconds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb176" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb176-1">rmd_time_arrow<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DurationType
duration[us]</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="r-the-hmshms-class" class="level3">
<h3 class="anchored" data-anchor-id="r-the-hmshms-class">[R] The hms::hms class</h3>
<p>So where are we up to in our voyage through the world of dates, times, and durations in the R world? We’ve talked about situations where you can specify a fixed date (with the <em>Date</em> class) and situations where you can specify a fixed moment in time (with <em>POSIXct</em> and <em>POSIXlt</em> classes). We’ve also talked about situations where you can specify an amount of time without fixing it to a specific date or time (with the <em>difftime</em> class). What we haven’t talked about is how to store the time of day. In base R you can talk about a date without needing to specify a time, or you can talk about times and dates together, but what you can’t do is specify a time on its own without a date.</p>
<p>The <strong>hms</strong> package fixes this by supplying the <em>hms</em> class. Internally, it’s just a <em>difftime</em> object that counts the number of seconds elapsed since midnight. As I type these words the current time is 14:05:25, and I could create an <em>hms</em> object representing this like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb178" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb178-1">hms_time <span class="ot" style="color: #003B4F;">&lt;-</span> hms<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hms</span>(<span class="at" style="color: #657422;">seconds =</span> <span class="dv" style="color: #AD0000;">25</span>, <span class="at" style="color: #657422;">minutes =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">hours =</span> <span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb178-2">hms_time</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>14:05:25</code></pre>
</div>
</div>
<p>The nice thing about <em>hms</em> times is that they inherit from <em>difftime</em>, which we can see by checking the class vector for our <code>hms_time</code> object</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb180" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb180-1"><span class="fu" style="color: #4758AB;">class</span>(hms_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "hms"      "difftime"</code></pre>
</div>
</div>
<p>Just to show that there really isn’t anything fancy going on, let’s strip the class attribute away and let R print out the raw object. As the output here shows, an <em>hms</em> object has the same underlying structure as a regular <em>difftime</em> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb182" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb182-1"><span class="fu" style="color: #4758AB;">unclass</span>(hms_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 50725
attr(,"units")
[1] "secs"</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="arrow-the-time32-and-time64-types" class="level3">
<h3 class="anchored" data-anchor-id="arrow-the-time32-and-time64-types">[Arrow] The time32 and time64 types</h3>
<p>What about Arrow?</p>
<p>At a technical level, it would be perfectly possible to translate an <em>hms</em> object in R into an Arrow <em>duration</em> object, but that feels slightly unnatural. The entire reason why the <em>hms</em> class exists in R is that we – the human users – attach special meaning to the “duration of time that has elapsed since midnight on an arbitrary day”. We call it the time of day, and while technically it is possible to represent the time of day as a duration (or an <em>hms</em> as a <em>difftime</em>), human beings like to treat special things as special for a reason.</p>
<p>Because of this, Arrow supplies two data types that are roughly analogous to the <em>hms</em> class in R, called <em>time32</em> and <em>time64</em>. The <em>time32</em> type stores the time of day as a signed 32-bit integer, which represents the number of seconds (or alternatively, milliseconds) since midnight. By default, the <strong>arrow</strong> package will translate an <em>hms</em> object to a <em>time32</em> type, using seconds as the unit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb184-1">hms_time32_s <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(hms_time)</span>
<span id="cb184-2">hms_time32_s</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
14:05:25</code></pre>
</div>
</div>
<p>As usual, let’s just verify that the encoding unit is as expected:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb186-1">hms_time32_s<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time32
time32[s]</code></pre>
</div>
</div>
<p>Yep, we’re all good! To switch to milliseconds, I would use a command like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb188-1">hms_time32_ms <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(hms_time, <span class="fu" style="color: #4758AB;">time32</span>(<span class="at" style="color: #657422;">unit =</span> <span class="st" style="color: #20794D;">"ms"</span>))</span>
<span id="cb188-2">hms_time32_ms</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
14:05:25.000</code></pre>
</div>
</div>
<p>Notice that the output shows the time in a little more resolution. I find this a helpful touch, since it provides a visual cue letting me know what the unit is. But just to confirm, let’s inspect the type explicitly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb190-1">hms_time32_ms<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time32
time32[ms]</code></pre>
</div>
</div>
<p>If you need to represent the time of day at a higher degree of precision, you’ll want to use the <em>time64</em> type, which (shockingly!) represents the time of day as a signed 64-bit integer. When using the <em>time64</em> class you can choose microseconds (<code>unit = "us"</code>) or nanoseconds (the default, <code>unit = "ns"</code>) as the unit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb192" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb192-1">hms_time64_us <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">scalar</span>(hms_time, <span class="fu" style="color: #4758AB;">time64</span>())</span>
<span id="cb192-2">hms_time64_us</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Scalar
14:05:25.000000000</code></pre>
</div>
</div>
<p>The display is showing more trailing zeros, so you can already be sure that the encoding unit has changed. So the only real question you might have pertains to the author. Will she be tediously predictable and check the data type yet again to verify that the encoding unit is nanoseconds, just like she has done every time before? Yes. Yes she will:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb194" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb194-1">hms_time64_us<span class="sc" style="color: #5E5E5E;">$</span>type</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time64
time64[ns]</code></pre>
</div>
</div>
<p>She is quite tiresome at times.</p>
<p>In essence, the <strong>arrow</strong> defaults are set up such that if you choose <code>time32()</code> when going from R to Arrow without specifying a unit, you will end up with the lowest precision representation of time (rounded to the nearest second), whereas if you do the same with <code>time64()</code> you end up with the highest precision (nanosecond level) representation. When going the other way, <strong>arrow</strong> will map <em>time32</em> types and <em>time64</em> types to hms objects, and the end result is that the time of day will be stored as a <em>double</em>.</p>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4783.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
</section>
<section id="other-types" class="level2">
<h2 class="anchored" data-anchor-id="other-types">Other types</h2>
<p>As with any story told by humans, this one is incomplete. When I started writing this post I had the ambition to cover every single line in the <a href="https://arrow.apache.org/docs/r/articles/arrow.html#mapping-of-r-arrow-types">Table of R/Arrow mappings</a> shown in the <strong>arrow</strong> documentation. I didn’t quite get there in the end, and there are a few missing cases. I’ll briefly mention them here:</p>
<ul>
<li><p>Arrow possesses a “null” value used to represent missing data, and behaves similarly to <code>NA</code> in R. In base R there are several different <code>NA</code> values, corresponding to the different atomic types: <code>NA_logical</code>, <code>NA_character</code>. The way this is handled in <strong>arrow</strong> is to rely on the <strong>vctrs</strong> package. Specifically, in <strong>vctrs</strong> there is a <em>vctrs_unspecified</em> class that works very well here, so Arrow <em>nulls</em> map to <em>vctrs_unspecified</em> and vice versa. In practice, this is where <code>NA</code> values enter into the picture.</p></li>
<li><p>In R there is the concept of the <em>raw</em> type used to represent bytes. Arrow doesn’t have a natural equivalent of this, but the closest is an unsigned 8-bit integer, so the default is to map <em>raw</em> to <em>uint8</em>.</p></li>
<li><p>I haven’t talked about <em>factors</em> at all, and frankly I probably should have. My only excuse is exhaustion. The post was getting very long and I ran out of energy. The analog of <em>factors</em> in Arrow is the <em>dictionary</em> type. They’re not exact mirrors of each other so it’s worth reading the documentation, but it’s close enough that <em>factors</em> are mapped to <em>dictionaries</em> and vice versa.</p></li>
<li><p>R and Arrow both allow more complicated data structures to be included as columns within a <em>data frame</em> (or <em>Table</em>). For example, in R each element of a column can itself be a <em>data frame</em>. In such cases, the default in <strong>arrow</strong> is to map each R <em>data frame</em> onto an Arrow <em>struct</em>. Again, this is one where it’s worth reading the documentation, because there are some subtleties with how things like <em>list</em> columns are handled.</p></li>
</ul>
<p><br><br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/art/pollen_47_4784.jpg" class="img-fluid figure-img" width="2880"></p>
<p></p><figcaption class="figure-caption">Art</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p><br><br></p>
</section>
<section id="the-magic-goes-away" class="level2">
<h2 class="anchored" data-anchor-id="the-magic-goes-away">The magic goes away</h2>
<blockquote class="blockquote">
<p>“Being in love ruins my judgement. It takes my mind off what I’m doing, and I ruin spells” <br> &nbsp;&nbsp; – Mirandee, from <a href="https://en.wikipedia.org/wiki/The_Magic_Goes_Away">The Magic Goes Away</a> by Larry Niven</p>
</blockquote>
<p>When I first started using <strong>arrow</strong>, it was the magic I loved most. Everything just worked. I could move data between R and Arrow without having to think, I could manipulate enormous data sets using <strong>dplyr</strong> syntax that I’d never even be able to load into R, and I never had to look under the hood. Magic is always compelling. It is delightful. It makes the user feel joy, and it’s the experience the developer wants to provide.</p>
<p>But as any teacher will tell you, the magic always goes away. There comes a time when you have to sit down and read the manuals. You have to understand how the magic works, and when you do understand you realise there is no magic. At best, there is design. A system can work using all the default settings because it has been thoughtfully designed, but you will eventually encounter situations when the defaults don’t apply to you. It’s taken me some time to piece all this together, and at the end of the process I feel a lot more confident in my judgment. Having a deeper understanding of data types in Arrow and R is useful to me, even if I’m only using the default schemas.</p>
<p>I hope the post is helpful for anyone else following a similar path.<sup>33</sup> <!--
- https://arrow.apache.org/docs/r/articles/arrow.html
- https://arrow.apache.org/docs/cpp/api/datatype.html
--></p>
<div class="cell">

</div>
<!--------------- appendices go here ----------------->
<div class="cell">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>To be honest, if my goal had been to read the data into Arrow, there was never a need to read it into R in the first place. The code <code>read_csv_arrow("magicians.csv", as_data_frame = FALSE)</code> would create the <em>Table</em> object directly with no need for an intermediary in R. However, for the purposes of this post I’m pretending that I have data in R that I want to transfer to Arrow in order to talk about the translation process, so I’m doing things in a rather inefficient way. On top of that, there’s a whole extra layer of complexity I’m hiding here that relates to ALTREP vectors backed by Arrow. However, that’s a topic for a future post. We can only unravel the magical cloak one thread at a time!↩︎</p></li>
<li id="fn2"><p>Early in the writing process for this post I talked to the very lovely Jon Keane about this, and they pointed out that there’s a big difference in the “read” functions in <strong>arrow</strong> and the “translate” functions. The code in the <code>read_*()</code> functions is complicated: it handles everything for you because “reading the data” is a constrained task and the developers can optimise almost everything for you, including the strange edge cases. Translation is harder, and there’s less the developers can do to support it. As a consequence, the code underpinning <code>schema()</code> is much simpler. It takes care of choices for you when those choices are “obvious”, but it leaves all the edge cases for you to deal with. There are a lot of weird edge cases because “translating between languages” is under-determined. Edge cases are left to the user because only the user knows the context.↩︎</p></li>
<li id="fn3"><p>If you have never watched <em>The Magicians</em> I really need to emphasise that it was a really, really weird show and this is nowhere near as implausible as it might sound. I have literally scared off men who had previously been quite keen on me by making them watch this show. Not kidding.↩︎</p></li>
<li id="fn4"><p>Back my former life as an mathematical psychologist I studied this stuff for a living, and wrote an <a href="https://djnavarro.net/papers/">absurd number of academic papers</a> on how people learn and represent categories. What I <em>wanted</em> to understand was the relationship between human and machine learning, between natural and artificial intelligence, and so on. What I <em>actually</em> learned is that humans and machines are both super weird.↩︎</p></li>
<li id="fn5"><p>At this point I feel compelled to point out that while I may <em>appear</em> to be a bright young thing with little experience of the world, I am in fact a 44 year old woman and former academic who has read quite a few papers on algorithmic information theory and related fields. So, if you happen to be thinking thoughts along the lines of “aha, she doesn’t know about Turing equivalence!” and are considering explaining it to me… please don’t. This is one of those situations where that pesky little “finite length” prefix code required to allow machine P to simulate machine Q actually matters, and sometimes “finite” includes values like “staggeringly, painfully large”. As I used to wearily tell my students, in real life you can’t ignore the <img src="https://latex.codecogs.com/png.latex?O(1)"> terms.↩︎</p></li>
<li id="fn6"><p>As an aside, Michel Foucault actually refers to this Borges passage in the preface to his famous work <a href="https://en.wikipedia.org/wiki/The_Order_of_Things"><em>The Order of Things: An Archaeology of the Human Sciences</em></a> on how different cultures and historical periods viewed the world from fundamentally different perspectives. According to Foucault, Borges essay “shattered … all the familiar landmarks of thought — our thought, the thought that bears the stamp of our age and our geography — breaking up all the ordered surfaces and all the planes with which we are accustomed to tame the wild profusion of existing things”. Seems fair to say that Borges’ essay was not without its admirers.↩︎</p></li>
<li id="fn7"><p>Much like the Honourable Member for Kennedy, this <a href="https://www.youtube.com/watch?v=1i739SyCu9I">“let a thousand OOP systems bloom”</a> philosophy has made me cry many times: sometimes from joy, often from frustration.↩︎</p></li>
<li id="fn8"><p>The typographical notation for R6 varies because the term can be used to refer to the OOP system itself (which I denote as R6), but could also refer to the <strong>R6</strong> package or the <em>R6</em> object type.↩︎</p></li>
<li id="fn9"><p>Note that the <code>Table</code> object is not a <em>Table</em>: it is the class prototype for <em>Table</em> objects, and is therefore classed <em>R6ClassGenerator</em>. The same is true for <code>Scalar</code>, <code>Schema</code>, <code>ChunkedArray</code>, etc.↩︎</p></li>
<li id="fn10"><p>Should I take this opportunity to discuss the fact that this means that what R actually implements is a <a href="https://en.wikipedia.org/wiki/Three-valued_logic">three valued logic</a>? No.&nbsp;No I should not. I am going to think it very loudly though.↩︎</p></li>
<li id="fn11"><p>Lest anyone think I am too wanton in my use of footnotes in tech blogging, I will simply mention that Dan has a 77-footnote <a href="https://dansblog.netlify.app/posts/2021-11-24-getting-into-the-subspace/">blog post on Gaussian Processes</a>. I am the <em>nice</em> queer in the room.↩︎</p></li>
<li id="fn12"><p>There is also an R6 method you could use here. <code>snowpiercer$as_vector()</code> would produce exactly the same answer.↩︎</p></li>
<li id="fn13"><p>Okay that was a tortured metaphor and one that I probably don’t want to push too far given that <em>Snowpiercer</em> is a terrifyingly dark show filled with horrible, horrible people. But I’m nice though. Honest! Would I lie to you?↩︎</p></li>
<li id="fn14"><p>Rest assured, dear reader, while I am entirely aware of the distinction between countably and uncountably infinite sets, and have been forced to learn more about the cardinality of transfinite numbers than any human deserves to endure, I will not be discussing any of that in this post. The word “infinite” is perfectly serviceable for our purposes, and if anyone even TRIES to discuss this with me further on twitter I will be forced to engage the services of a very unpleasant lawyer…↩︎</p></li>
<li id="fn15"><p>The “desert of the real” phrase in the title of the section refers to the real numbers, but it’s also a quote from <em>Simulacra and Simulation</em> and <a href="https://en.wikipedia.org/wiki/The_Matrix"><em>The Matrix</em></a>. Obviously I encountered it in <em>The Matrix</em> first because, all appearances to the contrary, I am uncultured swine.↩︎</p></li>
<li id="fn16"><p>At this point it is traditional to make a joke about Zeno’s paradox of <a href="https://en.wikipedia.org/wiki/Zeno%27s_paradoxes#Achilles_and_the_tortoise">Achilles and the Tortoise</a> and honestly I did try, but to come up with a good joke I first had to get half an idea, and then I had to refine it half way to being a better idea, and then I had to refine that half way and… I guess I never quite got there in the end. Sorry.↩︎</p></li>
<li id="fn17"><p>Sigh. Technically, this is the last bit. R uses a <a href="https://en.wikipedia.org/wiki/Endianness">little-endian</a> representation here which I have flipped to a big-endian format so that it can be read from left to right, but for the love of all that is good and precious in this world please let me simplify a few things okay?↩︎</p></li>
<li id="fn18"><p>Okay, if you were reading closely earlier you might be thinking this is wrong and the range should be -1023 to 1024. The reason it’s not is that those to values are reserved for “special” numbers.↩︎</p></li>
<li id="fn19"><p>I still think “Man Tissa” would make a good drag king name, though I’ve been unreliably informed that it may sound odd to Norwegians.↩︎</p></li>
<li id="fn20"><p>In fact, one of the obnoxious things about the reals (which are uncountably infinite) is that almost all reals have infinitely long mantissas. Even if you had a infinite number of digits to work with (a countably infinite set) you’re still in trouble. Everything sucks, real numbers are almost surely uncomputable (yes that’s an actual result), and I don’t want to think about it any more and I need a lie down.↩︎</p></li>
<li id="fn21"><p>Okay, so contrary to my stated intentions we’ve actually ended up quite a long way down into the IEEE 754 standard, so I might as well make an extra observation while we’re down here. Tests of floating point equality aren’t tests of mathematical equality. They’re really just checks that the absolute difference between two numbers is smaller than the <a href="https://en.wikipedia.org/wiki/Machine_epsilon">machine precision</a>. The value of the machine precision is stored in R as <code>.Machine$double.eps</code>.↩︎</p></li>
<li id="fn22"><p>Some precision is needed here: in this post I am using the names that appear in the <a href="https://arrow.apache.org/docs/r/reference/data-type.html">documentation to the <strong>arrow</strong> R package</a>. I’m doing this because the intended audience is an R user who wants to use the <strong>arrow</strong> package to interact with Arrow. However, you should be aware that these types are given slightly different names in the C++ <a href="https://arrow.apache.org/docs/cpp/api/datatype.html">documentation to <strong>libarrow</strong></a> to which <strong>arrow</strong> provides bindings. In that documentation the terminology is as follows: <em>float64</em> is called <em>double</em>, <em>float32</em> is called <em>float</em>, and <em>float16</em> is called <em>half-float</em>.↩︎</p></li>
<li id="fn23"><p>They are both little-endian too.↩︎</p></li>
<li id="fn24"><p>That’s assuming we’re writing numbers in Arabic number system. I suppose it would be different if our orthographic representations adopted the <a href="http://www.mathematicsmagazine.com/Articles/TheSumerianMathematicalSystem.php">Sumerian sexagesimal notation</a>. Admittedly, neither R nor Arrow existed at the time, so it’s a moot point. All I’m really saying is that decimal systems are no less arbitrary than binary ones. The problem arises because of the mismatch, not because one encoding is inherently better than the other.↩︎</p></li>
<li id="fn25"><p>As noted in the R internals manual, the specific data structure is referred to as a <a href="https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Encodings-for-CHARSXPs">CHARSXP</a>. For the purposes of the current post I’m pretending that character strings are always encoded as UTF-8 because there’s no need to complicate matters by talking about things like Latin-1, but be aware that R does support those things. If you’re looking for a good overview of what UTF-8 encoding is all about, this blog post on <a href="https://deliciousbrains.com/how-unicode-works/">how unicode works</a> is helpful.↩︎</p></li>
<li id="fn26"><p>More strictly, it is a symbol that points to an object. R makes a distinction between the symbol and the object to which it links, and allows multiple labels to point at the same object. There’s an excellent discussion of this in <a href="https://adv-r.hadley.nz/names-values.html">Chapter 3 of <em>Advanced R</em></a>↩︎</p></li>
<li id="fn27"><p>Once again, there’s a little terminology to explain because there’s some inconsistency in how the types are referred to in the Arrow C++ documentation and the <strong>arrow</strong> R package documentation. In the <a href="https://arrow.apache.org/docs/cpp/api/datatype.html">list of data types</a> for <strong>libarrow</strong> you’ll find references to <em>string</em> types and <em>large_string</em> types. However, in <a href="https://arrow.apache.org/docs/r/reference/data-type.html">list of data types</a> documentation for the <strong>arrow</strong> R package you’ll see the same data types referred to as <em>utf8</em> and <em>large_utf8</em>.↩︎</p></li>
<li id="fn28"><p>No I am not going to talk about them in this post. Masochist though I may be, nobody loves that much pain. If you are curious you will simply have to wait for a later post!↩︎</p></li>
<li id="fn29"><p>Perhaps surprisingly, this number is encoded as a <em>double</em> and not an <em>integer</em>.↩︎</p></li>
<li id="fn30"><p>Again, this is stored as a <em>double</em> and not an integer. You can verify this with the command <code>typeof(Sys.time())</code>↩︎</p></li>
<li id="fn31"><p>A little counterintuitively, the value of <code>sec</code> ranges from 0 to 61, presumably because <a href="https://en.wikipedia.org/wiki/Leap_second">leap seconds</a> are a thing. I am NOT going to torture myself with that one today. My life has quite enough torture in it already.↩︎</p></li>
<li id="fn32"><p>Yes, I looked up her <a href="https://www.astro.com/astro-databank/Lamarr,_Hedy">time and location of birth</a> on an astrology website. I am, after all, a queer. I feel that I have been quite clear on this, and being weird about astrology it is one of the fine traditions of our people.↩︎</p></li>
<li id="fn33"><p>A thank you to Jon Keane, Steph Hazlitt, and Neal Richardson for helpful conversations, encouragement, and feedback that have greatly improved the post.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2022,
  author = {Danielle Navarro},
  title = {Data Types in {Arrow} and {R}},
  date = {2022-03-04},
  url = {https://blog.djnavarro.net/data-types-in-arrow-and-r},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2022" class="csl-entry quarto-appendix-citeas">
Danielle Navarro. 2022. <span>“Data Types in Arrow and R.”</span> March
4, 2022. <a href="https://blog.djnavarro.net/data-types-in-arrow-and-r">https://blog.djnavarro.net/data-types-in-arrow-and-r</a>.
</div></div></section></div> ]]></description>
  <category>Apache Arrow</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/index.html</guid>
  <pubDate>Thu, 03 Mar 2022 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2022-03-04_data-types-in-arrow-and-r/img/cover.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
