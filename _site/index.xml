<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/</link>
<atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
<description>A data science blog by Danielle Navarro</description>
<image>
<url>https://blog.djnavarro.net/profile_hex.jpg</url>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/</link>
</image>
<generator>quarto-1.4.550</generator>
<lastBuildDate>Sat, 02 Mar 2024 13:00:00 GMT</lastBuildDate>
<item>
  <title>Plotting data in Julia</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-03-03_julia-plots/</link>
  <description><![CDATA[ 





<!--------------- post begins here ----------------->
<p>And so we come to the third post in my extremely ill-considered foray into learning Julia. In the <a href="../../posts/2024-03-01_julia-foundation/">first part</a> of the series I taught myself some of the foundations for writing Julia code, in the <a href="../../posts/2024-03-02_julia-data-frames/">second part</a> I discussed data wrangling in Julia, and so in the third and – dear god in heaven please – last of them, I’ll take a look at data visualisation using the <a href="https://docs.juliaplots.org/latest/">Plots</a> package, and using <a href="https://juliapackages.com/p/palmerpenguins">PalmerPenguins</a> as my data set.</p>
<p>It will be brief this time, right? Right????</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-03_julia-plots/olaf-stapledon.jpg" class="img-fluid figure-img" alt="Cover of 'Olaf Stapledon'"></p>
<figcaption>Olaf Stapledon. See, it’s a Penguin science fiction book so it keeps to the penguins theme of this post and the sci-fi theme of the series. I’m soooooo clever</figcaption>
</figure>
</div>
</div></div><section id="penguins-data" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="penguins-data">Penguins data</h2>
<p>It is hardly a deep insight to say this, but if you’re going to play around with data visualisation tools it does help somewhat to have some data that you can plot. In the last post I pretty much exhausted my ability to look at the <em>Star Wars</em> data set that comes bundled in with the dplyr R package, so I’m picked something different this time. For no particular reason I decided to go with the <em>Palmer Penguins</em> data set that also exists in R, and has a Julia package in <a href="https://juliapackages.com/p/palmerpenguins">PalmerPenguins</a>. However, due to a painful little episode part way through writing all these posts I mistakenly decided that the PalmerPenguins package was causing me problems in the context of this quarto blog post (it wasn’t… the actual problem was that I had my Julia environment configured incorrectly), so instead I ended up writing a copy of the data to a CSV file and used that instead. Sigh.</p>
<p>Okay, let’s start by loading the packages I’ll need for this post:</p>
<div id="a0bbc3a6" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">CSV</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">DataFrames</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Plots</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">StatsPlots</span></span></code></pre></div>
</div>
<p>Amazing. Thrilling. Et cetera. Now that we’re all overwhelmed by the feeling of rising anticipation, let’s load the data set from the CSV file:</p>
<div id="c3d81d63" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1">penguins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DataFrame</span>(CSV.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">File</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguins.csv"</span>; missingstring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>)) </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<div><div style="float: left;"><span>344×8 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">319 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">island</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">bill_length_mm</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">bill_depth_mm</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">flipper_length_mm</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">body_mass_g</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">year</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String7}">String7?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">39.1</td>
<td style="text-align: right;">18.7</td>
<td style="text-align: right;">181</td>
<td style="text-align: right;">3750</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">39.5</td>
<td style="text-align: right;">17.4</td>
<td style="text-align: right;">186</td>
<td style="text-align: right;">3800</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">40.3</td>
<td style="text-align: right;">18.0</td>
<td style="text-align: right;">195</td>
<td style="text-align: right;">3250</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">36.7</td>
<td style="text-align: right;">19.3</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">3450</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">39.3</td>
<td style="text-align: right;">20.6</td>
<td style="text-align: right;">190</td>
<td style="text-align: right;">3650</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">38.9</td>
<td style="text-align: right;">17.8</td>
<td style="text-align: right;">181</td>
<td style="text-align: right;">3625</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">39.2</td>
<td style="text-align: right;">19.6</td>
<td style="text-align: right;">195</td>
<td style="text-align: right;">4675</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">34.1</td>
<td style="text-align: right;">18.1</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">3475</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">42.0</td>
<td style="text-align: right;">20.2</td>
<td style="text-align: right;">190</td>
<td style="text-align: right;">4250</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">37.8</td>
<td style="text-align: right;">17.1</td>
<td style="text-align: right;">186</td>
<td style="text-align: right;">3300</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">37.8</td>
<td style="text-align: right;">17.3</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">3700</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Adelie</td>
<td style="text-align: left;">Torgersen</td>
<td style="text-align: right;">41.1</td>
<td style="text-align: right;">17.6</td>
<td style="text-align: right;">182</td>
<td style="text-align: right;">3200</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2007</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">333</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">45.2</td>
<td style="text-align: right;">16.6</td>
<td style="text-align: right;">191</td>
<td style="text-align: right;">3250</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">334</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">49.3</td>
<td style="text-align: right;">19.9</td>
<td style="text-align: right;">203</td>
<td style="text-align: right;">4050</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">335</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">50.2</td>
<td style="text-align: right;">18.8</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">3800</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">336</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">45.6</td>
<td style="text-align: right;">19.4</td>
<td style="text-align: right;">194</td>
<td style="text-align: right;">3525</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">337</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">51.9</td>
<td style="text-align: right;">19.5</td>
<td style="text-align: right;">206</td>
<td style="text-align: right;">3950</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">338</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">46.8</td>
<td style="text-align: right;">16.5</td>
<td style="text-align: right;">189</td>
<td style="text-align: right;">3650</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">339</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">45.7</td>
<td style="text-align: right;">17.0</td>
<td style="text-align: right;">195</td>
<td style="text-align: right;">3650</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">340</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">55.8</td>
<td style="text-align: right;">19.8</td>
<td style="text-align: right;">207</td>
<td style="text-align: right;">4000</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">341</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">43.5</td>
<td style="text-align: right;">18.1</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">3400</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">342</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">49.6</td>
<td style="text-align: right;">18.2</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">3775</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">343</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">50.8</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: right;">210</td>
<td style="text-align: right;">4100</td>
<td style="text-align: left;">male</td>
<td style="text-align: right;">2009</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">344</td>
<td style="text-align: left;">Chinstrap</td>
<td style="text-align: left;">Dream</td>
<td style="text-align: right;">50.2</td>
<td style="text-align: right;">18.7</td>
<td style="text-align: right;">198</td>
<td style="text-align: right;">3775</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">2009</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Indeed, that is a lot of penguins. Precisely what I was looking for. I have some data, now I can start drawing some plots.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-03_julia-plots/handmaids-tale.jpg" class="img-fluid figure-img" alt="Cover of 'The Handmaids Tale'"></p>
<figcaption>The Handmaids Tale, because obviously what every queer person and woman wants to be thinking about in 2024 is what’s probably going to happen to us in the near future</figcaption>
</figure>
</div>
</div></div></section>
<section id="scatter-plots" class="level2">
<h2 class="anchored" data-anchor-id="scatter-plots">Scatter plots</h2>
<p>As you might imagine, there’s more than one way you can go about constructing a data visualisation in Julia. For example, there’s the <a href="https://aog.makie.org/stable/">AlgebraOfGraphics</a> system that appears share some design philosophy with the ggplot2 package in R. That might have been a better choice for me to explore, but for whatever reason<sup>1</sup> I chose instead to explore the <a href="https://docs.juliaplots.org/latest/">Plots</a> package and its extension package <a href="https://docs.juliaplots.org/dev/generated/statsplots/">StatsPlots</a>.</p>
<p>The impression I get from playing around with Plots/StatsPlots is that its design has more in common with the base graphics system in R than with ggplot2. There’s a generic function <code>plot()</code> that you can use to construct plots, and lots of more specific functions that are essentially wrappers to <code>plot()</code>. For example, I’m going to start by drawing a scatter plot. I could use the wrapper function <code>scatter()</code> for this purposes, but you don’t actually need to do this because it’s effectively the same thing as calling <code>plot()</code> with different defaults. For learning purposes I find it helpful to understand what the different arguments to <code>plot()</code> actually do, so I’ll avoid using the convenience functions here.</p>
<p>Okay, so here’s a simple scatter plot that plots the bill length of each penguin against the bill depth:</p>
<div id="0f9e24ca" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb3-2">  penguins.bill_length_mm, </span>
<span id="cb3-3">  penguins.bill_depth_mm, </span>
<span id="cb3-4">  seriestype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>scatter,</span>
<span id="cb3-5">  size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb3-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="500" height="500" viewbox="0 0 2000 2000">
<defs>
  <clippath id="clip030">
    <rect x="0" y="0" width="2000" height="2000"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip030)" d="M0 2000 L2000 2000 L2000 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip031">
    <rect x="400" y="200" width="1401" height="1401"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip030)" d="M136.696 1865.17 L1952.76 1865.17 L1952.76 47.2441 L136.696 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip032">
    <rect x="136" y="47" width="1817" height="1819"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="368.765,1865.17 368.765,47.2441 "></polyline>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="680.268,1865.17 680.268,47.2441 "></polyline>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="991.77,1865.17 991.77,47.2441 "></polyline>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1303.27,1865.17 1303.27,47.2441 "></polyline>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1614.78,1865.17 1614.78,47.2441 "></polyline>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1926.28,1865.17 1926.28,47.2441 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,1865.17 1952.76,1865.17 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="368.765,1865.17 368.765,1846.27 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="680.268,1865.17 680.268,1846.27 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="991.77,1865.17 991.77,1846.27 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1303.27,1865.17 1303.27,1846.27 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1614.78,1865.17 1614.78,1846.27 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1926.28,1865.17 1926.28,1846.27 "></polyline>
<path clip-path="url(#clip030)" d="M358.105 1905.73 Q361.462 1906.45 363.337 1908.72 Q365.235 1910.99 365.235 1914.32 Q365.235 1919.44 361.716 1922.24 Q358.198 1925.04 351.716 1925.04 Q349.541 1925.04 347.226 1924.6 Q344.934 1924.18 342.48 1923.33 L342.48 1918.81 Q344.425 1919.95 346.74 1920.53 Q349.054 1921.1 351.578 1921.1 Q355.976 1921.1 358.267 1919.37 Q360.582 1917.63 360.582 1914.32 Q360.582 1911.27 358.429 1909.55 Q356.3 1907.82 352.48 1907.82 L348.453 1907.82 L348.453 1903.97 L352.666 1903.97 Q356.115 1903.97 357.943 1902.61 Q359.772 1901.22 359.772 1898.63 Q359.772 1895.97 357.874 1894.55 Q355.999 1893.12 352.48 1893.12 Q350.559 1893.12 348.36 1893.53 Q346.161 1893.95 343.522 1894.83 L343.522 1890.66 Q346.184 1889.92 348.499 1889.55 Q350.837 1889.18 352.897 1889.18 Q358.221 1889.18 361.323 1891.61 Q364.425 1894.02 364.425 1898.14 Q364.425 1901.01 362.781 1903 Q361.138 1904.97 358.105 1905.73 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M374.147 1889.81 L392.503 1889.81 L392.503 1893.74 L378.429 1893.74 L378.429 1902.22 Q379.448 1901.87 380.466 1901.71 Q381.485 1901.52 382.503 1901.52 Q388.29 1901.52 391.67 1904.69 Q395.05 1907.86 395.05 1913.28 Q395.05 1918.86 391.577 1921.96 Q388.105 1925.04 381.786 1925.04 Q379.61 1925.04 377.341 1924.67 Q375.096 1924.3 372.689 1923.56 L372.689 1918.86 Q374.772 1919.99 376.994 1920.55 Q379.216 1921.1 381.693 1921.1 Q385.698 1921.1 388.036 1919 Q390.374 1916.89 390.374 1913.28 Q390.374 1909.67 388.036 1907.56 Q385.698 1905.46 381.693 1905.46 Q379.818 1905.46 377.943 1905.87 Q376.091 1906.29 374.147 1907.17 L374.147 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M668.439 1893.88 L656.634 1912.33 L668.439 1912.33 L668.439 1893.88 M667.212 1889.81 L673.092 1889.81 L673.092 1912.33 L678.022 1912.33 L678.022 1916.22 L673.092 1916.22 L673.092 1924.37 L668.439 1924.37 L668.439 1916.22 L652.837 1916.22 L652.837 1911.71 L667.212 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M695.754 1892.89 Q692.143 1892.89 690.314 1896.45 Q688.508 1899.99 688.508 1907.12 Q688.508 1914.23 690.314 1917.79 Q692.143 1921.34 695.754 1921.34 Q699.388 1921.34 701.193 1917.79 Q703.022 1914.23 703.022 1907.12 Q703.022 1899.99 701.193 1896.45 Q699.388 1892.89 695.754 1892.89 M695.754 1889.18 Q701.564 1889.18 704.619 1893.79 Q707.698 1898.37 707.698 1907.12 Q707.698 1915.85 704.619 1920.46 Q701.564 1925.04 695.754 1925.04 Q689.944 1925.04 686.865 1920.46 Q683.809 1915.85 683.809 1907.12 Q683.809 1898.37 686.865 1893.79 Q689.944 1889.18 695.754 1889.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M980.439 1893.88 L968.634 1912.33 L980.439 1912.33 L980.439 1893.88 M979.212 1889.81 L985.092 1889.81 L985.092 1912.33 L990.023 1912.33 L990.023 1916.22 L985.092 1916.22 L985.092 1924.37 L980.439 1924.37 L980.439 1916.22 L964.838 1916.22 L964.838 1911.71 L979.212 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M997.8 1889.81 L1016.16 1889.81 L1016.16 1893.74 L1002.08 1893.74 L1002.08 1902.22 Q1003.1 1901.87 1004.12 1901.71 Q1005.14 1901.52 1006.16 1901.52 Q1011.94 1901.52 1015.32 1904.69 Q1018.7 1907.86 1018.7 1913.28 Q1018.7 1918.86 1015.23 1921.96 Q1011.76 1925.04 1005.44 1925.04 Q1003.26 1925.04 1000.99 1924.67 Q998.749 1924.3 996.342 1923.56 L996.342 1918.86 Q998.425 1919.99 1000.65 1920.55 Q1002.87 1921.1 1005.35 1921.1 Q1009.35 1921.1 1011.69 1919 Q1014.03 1916.89 1014.03 1913.28 Q1014.03 1909.67 1011.69 1907.56 Q1009.35 1905.46 1005.35 1905.46 Q1003.47 1905.46 1001.6 1905.87 Q999.745 1906.29 997.8 1907.17 L997.8 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M1277.97 1889.81 L1296.33 1889.81 L1296.33 1893.74 L1282.25 1893.74 L1282.25 1902.22 Q1283.27 1901.87 1284.29 1901.71 Q1285.31 1901.52 1286.33 1901.52 Q1292.12 1901.52 1295.5 1904.69 Q1298.87 1907.86 1298.87 1913.28 Q1298.87 1918.86 1295.4 1921.96 Q1291.93 1925.04 1285.61 1925.04 Q1283.44 1925.04 1281.17 1924.67 Q1278.92 1924.3 1276.51 1923.56 L1276.51 1918.86 Q1278.6 1919.99 1280.82 1920.55 Q1283.04 1921.1 1285.52 1921.1 Q1289.52 1921.1 1291.86 1919 Q1294.2 1916.89 1294.2 1913.28 Q1294.2 1909.67 1291.86 1907.56 Q1289.52 1905.46 1285.52 1905.46 Q1283.64 1905.46 1281.77 1905.87 Q1279.92 1906.29 1277.97 1907.17 L1277.97 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M1318.09 1892.89 Q1314.48 1892.89 1312.65 1896.45 Q1310.84 1899.99 1310.84 1907.12 Q1310.84 1914.23 1312.65 1917.79 Q1314.48 1921.34 1318.09 1921.34 Q1321.72 1921.34 1323.53 1917.79 Q1325.36 1914.23 1325.36 1907.12 Q1325.36 1899.99 1323.53 1896.45 Q1321.72 1892.89 1318.09 1892.89 M1318.09 1889.18 Q1323.9 1889.18 1326.95 1893.79 Q1330.03 1898.37 1330.03 1907.12 Q1330.03 1915.85 1326.95 1920.46 Q1323.9 1925.04 1318.09 1925.04 Q1312.28 1925.04 1309.2 1920.46 Q1306.14 1915.85 1306.14 1907.12 Q1306.14 1898.37 1309.2 1893.79 Q1312.28 1889.18 1318.09 1889.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M1589.97 1889.81 L1608.33 1889.81 L1608.33 1893.74 L1594.25 1893.74 L1594.25 1902.22 Q1595.27 1901.87 1596.29 1901.71 Q1597.31 1901.52 1598.33 1901.52 Q1604.12 1901.52 1607.5 1904.69 Q1610.88 1907.86 1610.88 1913.28 Q1610.88 1918.86 1607.4 1921.96 Q1603.93 1925.04 1597.61 1925.04 Q1595.44 1925.04 1593.17 1924.67 Q1590.92 1924.3 1588.51 1923.56 L1588.51 1918.86 Q1590.6 1919.99 1592.82 1920.55 Q1595.04 1921.1 1597.52 1921.1 Q1601.52 1921.1 1603.86 1919 Q1606.2 1916.89 1606.2 1913.28 Q1606.2 1909.67 1603.86 1907.56 Q1601.52 1905.46 1597.52 1905.46 Q1595.64 1905.46 1593.77 1905.87 Q1591.92 1906.29 1589.97 1907.17 L1589.97 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M1620.13 1889.81 L1638.49 1889.81 L1638.49 1893.74 L1624.42 1893.74 L1624.42 1902.22 Q1625.44 1901.87 1626.45 1901.71 Q1627.47 1901.52 1628.49 1901.52 Q1634.28 1901.52 1637.66 1904.69 Q1641.04 1907.86 1641.04 1913.28 Q1641.04 1918.86 1637.56 1921.96 Q1634.09 1925.04 1627.77 1925.04 Q1625.6 1925.04 1623.33 1924.67 Q1621.08 1924.3 1618.68 1923.56 L1618.68 1918.86 Q1620.76 1919.99 1622.98 1920.55 Q1625.2 1921.1 1627.68 1921.1 Q1631.69 1921.1 1634.02 1919 Q1636.36 1916.89 1636.36 1913.28 Q1636.36 1909.67 1634.02 1907.56 Q1631.69 1905.46 1627.68 1905.46 Q1625.81 1905.46 1623.93 1905.87 Q1622.08 1906.29 1620.13 1907.17 L1620.13 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M1911.68 1905.22 Q1908.54 1905.22 1906.68 1907.38 Q1904.85 1909.53 1904.85 1913.28 Q1904.85 1917.01 1906.68 1919.18 Q1908.54 1921.34 1911.68 1921.34 Q1914.83 1921.34 1916.66 1919.18 Q1918.51 1917.01 1918.51 1913.28 Q1918.51 1909.53 1916.66 1907.38 Q1914.83 1905.22 1911.68 1905.22 M1920.97 1890.57 L1920.97 1894.83 Q1919.21 1894 1917.4 1893.56 Q1915.62 1893.12 1913.86 1893.12 Q1909.23 1893.12 1906.78 1896.24 Q1904.35 1899.37 1904 1905.69 Q1905.36 1903.67 1907.42 1902.61 Q1909.48 1901.52 1911.96 1901.52 Q1917.17 1901.52 1920.18 1904.69 Q1923.21 1907.84 1923.21 1913.28 Q1923.21 1918.6 1920.06 1921.82 Q1916.91 1925.04 1911.68 1925.04 Q1905.69 1925.04 1902.52 1920.46 Q1899.35 1915.85 1899.35 1907.12 Q1899.35 1898.93 1903.23 1894.07 Q1907.12 1889.18 1913.67 1889.18 Q1915.43 1889.18 1917.22 1889.53 Q1919.02 1889.88 1920.97 1890.57 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M1941.27 1892.89 Q1937.66 1892.89 1935.83 1896.45 Q1934.02 1899.99 1934.02 1907.12 Q1934.02 1914.23 1935.83 1917.79 Q1937.66 1921.34 1941.27 1921.34 Q1944.9 1921.34 1946.71 1917.79 Q1948.54 1914.23 1948.54 1907.12 Q1948.54 1899.99 1946.71 1896.45 Q1944.9 1892.89 1941.27 1892.89 M1941.27 1889.18 Q1947.08 1889.18 1950.13 1893.79 Q1953.21 1898.37 1953.21 1907.12 Q1953.21 1915.85 1950.13 1920.46 Q1947.08 1925.04 1941.27 1925.04 Q1935.46 1925.04 1932.38 1920.46 Q1929.32 1915.85 1929.32 1907.12 Q1929.32 1898.37 1932.38 1893.79 Q1935.46 1889.18 1941.27 1889.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="136.696,1629.96 1952.76,1629.96 "></polyline>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="136.696,1221.63 1952.76,1221.63 "></polyline>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="136.696,813.287 1952.76,813.287 "></polyline>
<polyline clip-path="url(#clip032)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="136.696,404.949 1952.76,404.949 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,1865.17 136.696,47.2441 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,1629.96 155.593,1629.96 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,1221.63 155.593,1221.63 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,813.287 155.593,813.287 "></polyline>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,404.949 155.593,404.949 "></polyline>
<path clip-path="url(#clip030)" d="M54.9134 1643.31 L62.5523 1643.31 L62.5523 1616.94 L54.2421 1618.61 L54.2421 1614.35 L62.506 1612.68 L67.1819 1612.68 L67.1819 1643.31 L74.8207 1643.31 L74.8207 1647.24 L54.9134 1647.24 L54.9134 1643.31 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M97.1123 1616.76 L85.3068 1635.21 L97.1123 1635.21 L97.1123 1616.76 M95.8854 1612.68 L101.765 1612.68 L101.765 1635.21 L106.696 1635.21 L106.696 1639.1 L101.765 1639.1 L101.765 1647.24 L97.1123 1647.24 L97.1123 1639.1 L81.5105 1639.1 L81.5105 1634.58 L95.8854 1612.68 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M55.2375 1234.97 L62.8763 1234.97 L62.8763 1208.61 L54.5662 1210.27 L54.5662 1206.01 L62.83 1204.35 L67.5059 1204.35 L67.5059 1234.97 L75.1448 1234.97 L75.1448 1238.91 L55.2375 1238.91 L55.2375 1234.97 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M95.1678 1219.76 Q92.0197 1219.76 90.1679 1221.92 Q88.3392 1224.07 88.3392 1227.82 Q88.3392 1231.55 90.1679 1233.72 Q92.0197 1235.87 95.1678 1235.87 Q98.316 1235.87 100.145 1233.72 Q101.996 1231.55 101.996 1227.82 Q101.996 1224.07 100.145 1221.92 Q98.316 1219.76 95.1678 1219.76 M104.45 1205.11 L104.45 1209.37 Q102.691 1208.54 100.885 1208.1 Q99.103 1207.66 97.3437 1207.66 Q92.7141 1207.66 90.2604 1210.78 Q87.8299 1213.91 87.4827 1220.23 Q88.8484 1218.21 90.9086 1217.15 Q92.9688 1216.06 95.4456 1216.06 Q100.654 1216.06 103.663 1219.23 Q106.696 1222.38 106.696 1227.82 Q106.696 1233.14 103.547 1236.36 Q100.399 1239.58 95.1678 1239.58 Q89.1725 1239.58 86.0012 1234.99 Q82.8299 1230.39 82.8299 1221.66 Q82.8299 1213.47 86.7188 1208.61 Q90.6077 1203.72 97.1586 1203.72 Q98.9178 1203.72 100.7 1204.07 Q102.506 1204.42 104.45 1205.11 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M55.4921 826.632 L63.131 826.632 L63.131 800.267 L54.8208 801.933 L54.8208 797.674 L63.0847 796.007 L67.7606 796.007 L67.7606 826.632 L75.3994 826.632 L75.3994 830.567 L55.4921 830.567 L55.4921 826.632 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M94.8438 814.155 Q91.5104 814.155 89.5892 815.938 Q87.691 817.72 87.691 820.845 Q87.691 823.97 89.5892 825.753 Q91.5104 827.535 94.8438 827.535 Q98.1771 827.535 100.098 825.753 Q102.02 823.947 102.02 820.845 Q102.02 817.72 100.098 815.938 Q98.2002 814.155 94.8438 814.155 M90.1679 812.165 Q87.1586 811.424 85.4688 809.364 Q83.8021 807.304 83.8021 804.341 Q83.8021 800.197 86.7419 797.79 Q89.7049 795.382 94.8438 795.382 Q100.006 795.382 102.946 797.79 Q105.885 800.197 105.885 804.341 Q105.885 807.304 104.196 809.364 Q102.529 811.424 99.5428 812.165 Q102.922 812.952 104.797 815.243 Q106.696 817.535 106.696 820.845 Q106.696 825.868 103.617 828.554 Q100.561 831.239 94.8438 831.239 Q89.1262 831.239 86.0475 828.554 Q82.992 825.868 82.992 820.845 Q82.992 817.535 84.8901 815.243 Q86.7882 812.952 90.1679 812.165 M88.4549 804.781 Q88.4549 807.466 90.1216 808.97 Q91.8114 810.475 94.8438 810.475 Q97.853 810.475 99.5428 808.97 Q101.256 807.466 101.256 804.781 Q101.256 802.095 99.5428 800.591 Q97.853 799.086 94.8438 799.086 Q91.8114 799.086 90.1216 800.591 Q88.4549 802.095 88.4549 804.781 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M58.6171 418.294 L74.9365 418.294 L74.9365 422.229 L52.9921 422.229 L52.9921 418.294 Q55.6541 415.539 60.2375 410.909 Q64.8439 406.257 66.0245 404.914 Q68.2698 402.391 69.1494 400.655 Q70.0522 398.896 70.0522 397.206 Q70.0522 394.451 68.1078 392.715 Q66.1865 390.979 63.0847 390.979 Q60.8856 390.979 58.4319 391.743 Q56.0014 392.507 53.2236 394.058 L53.2236 389.335 Q56.0477 388.201 58.5014 387.622 Q60.955 387.044 62.9921 387.044 Q68.3624 387.044 71.5568 389.729 Q74.7513 392.414 74.7513 396.905 Q74.7513 399.034 73.9411 400.956 Q73.1541 402.854 71.0476 405.446 Q70.4689 406.118 67.367 409.335 Q64.2652 412.53 58.6171 418.294 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M94.7512 390.747 Q91.1401 390.747 89.3114 394.312 Q87.5058 397.854 87.5058 404.983 Q87.5058 412.09 89.3114 415.655 Q91.1401 419.196 94.7512 419.196 Q98.3854 419.196 100.191 415.655 Q102.02 412.09 102.02 404.983 Q102.02 397.854 100.191 394.312 Q98.3854 390.747 94.7512 390.747 M94.7512 387.044 Q100.561 387.044 103.617 391.65 Q106.696 396.234 106.696 404.983 Q106.696 413.71 103.617 418.317 Q100.561 422.9 94.7512 422.9 Q88.941 422.9 85.8623 418.317 Q82.8068 413.71 82.8068 404.983 Q82.8068 396.234 85.8623 391.65 Q88.941 387.044 94.7512 387.044 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip032)" cx="624.197" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="649.117" cy="935.789" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="698.958" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="474.676" cy="547.867" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="636.657" cy="282.447" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="611.737" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="630.427" cy="486.617" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="312.695" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="804.869" cy="364.115" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="543.206" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="543.206" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="748.798" cy="894.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="593.047" cy="159.946" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="343.845" cy="180.363" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="468.446" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="599.277" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="836.019" cy="262.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="331.385" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1054.07" cy="98.6948" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="543.206" cy="752.037" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="536.976" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="424.835" cy="568.284" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="568.127" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="605.507" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="387.455" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="717.648" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="711.418" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="549.437" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="711.418" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="649.117" cy="1078.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="505.826" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="649.117" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="736.338" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="455.986" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="630.427" cy="180.363" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="605.507" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="817.329" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="530.746" cy="547.867" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="667.808" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="462.216" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="730.108" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="431.066" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="935.7" cy="466.2" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="493.366" cy="1037.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="655.347" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="748.798" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="524.516" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="431.066" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="823.559" cy="159.946" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="655.347" cy="874.538" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="686.498" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="368.765" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="804.869" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="337.615" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="767.488" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="617.967" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="717.648" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="462.216" cy="1099.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="530.746" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="412.375" cy="1037.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="761.258" cy="180.363" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="530.746" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="748.798" cy="772.454" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="455.986" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="779.948" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="399.915" cy="1180.79" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="748.798" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="424.835" cy="1099.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="792.409" cy="527.45" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="275.314" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="661.577" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="655.347" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1041.61" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="399.915" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="854.709" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="736.338" cy="1058.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="505.826" cy="527.45" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="443.526" cy="1201.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="811.099" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="343.845" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="860.939" cy="894.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="474.676" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="374.995" cy="527.45" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="512.056" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="761.258" cy="343.698" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="449.756" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="487.136" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="574.357" cy="568.284" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="611.737" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="412.375" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="748.798" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="306.464" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="655.347" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="443.526" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="730.108" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="561.897" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="698.958" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="250.394" cy="1201.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="879.629" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="368.765" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="742.568" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="536.976" cy="1221.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="543.206" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="549.437" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="661.577" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="593.047" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="568.127" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="561.897" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="879.629" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="561.897" cy="1119.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1029.15" cy="343.698" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="661.577" cy="874.538" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="817.329" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="655.347" cy="262.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="848.479" cy="752.037" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="593.047" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="512.056" cy="302.864" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="412.375" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="748.798" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="443.526" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="536.976" cy="445.783" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="692.728" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="767.488" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="381.225" cy="1242.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="717.648" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="605.507" cy="894.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="773.718" cy="752.037" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="617.967" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="935.7" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="586.817" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="873.399" cy="568.284" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="480.906" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="524.516" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="561.897" cy="894.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="748.798" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="406.145" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="692.728" cy="384.532" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="493.366" cy="1119.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="661.577" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="692.728" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="717.648" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="188.093" cy="1323.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="723.878" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="512.056" cy="1058.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="617.967" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="630.427" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="468.446" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="431.066" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="543.206" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="431.066" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="773.718" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1060.3" cy="1793.3" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1303.27" cy="1160.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1222.28" cy="1609.55" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1303.27" cy="1384.96" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1153.75" cy="1527.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1085.22" cy="1732.05" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1016.69" cy="1507.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1097.68" cy="1364.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="885.859" cy="1752.47" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1103.91" cy="1344.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="736.338" cy="1691.22" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1240.97" cy="1201.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1022.92" cy="1691.22" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1203.59" cy="1507.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1041.61" cy="1507.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1259.66" cy="1282.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="804.869" cy="1732.05" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1253.43" cy="1384.96" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1066.53" cy="1527.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1222.28" cy="1405.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1315.73" cy="1568.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="998" cy="1527.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1085.22" cy="1527.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1072.76" cy="1262.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="860.939" cy="1813.72" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1060.3" cy="1405.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="960.62" cy="1568.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1166.21" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1191.13" cy="1568.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1303.27" cy="1364.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1135.06" cy="1364.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="854.709" cy="1589.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="998" cy="1527.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1901.36" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1247.2" cy="1466.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1203.59" cy="1160.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="842.249" cy="1691.22" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="954.39" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="929.47" cy="1711.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1222.28" cy="1282.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="848.479" cy="1691.22" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1278.35" cy="1221.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1010.46" cy="1691.22" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1278.35" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1334.42" cy="1242.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="904.55" cy="1650.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1022.92" cy="1650.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1334.42" cy="1242.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="985.54" cy="1772.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1004.23" cy="1262.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1091.45" cy="1589.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1209.82" cy="1609.55" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="998" cy="1548.3" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1309.5" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1085.22" cy="1548.3" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="991.77" cy="1344.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="917.01" cy="1650.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1022.92" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="879.629" cy="1527.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1328.19" cy="1364.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1010.46" cy="1670.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1066.53" cy="1446.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1035.38" cy="1650.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1571.17" cy="1282.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1041.61" cy="1589.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1290.81" cy="1058.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1066.53" cy="1548.3" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1272.12" cy="1180.79" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="898.319" cy="1589.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1346.88" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1159.98" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1078.99" cy="1303.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1191.13" cy="1303.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1085.22" cy="1466.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1078.99" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1216.05" cy="1221.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1147.52" cy="1589.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1371.8" cy="1160.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1004.23" cy="1670.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1004.23" cy="1139.96" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1247.2" cy="1527.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1459.02" cy="1303.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1141.29" cy="1507.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1303.27" cy="1242.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="985.54" cy="1670.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1353.11" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="892.089" cy="1548.3" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1384.26" cy="1589.13" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1147.52" cy="1629.96" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1434.1" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1147.52" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1440.33" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1022.92" cy="1527.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1272.12" cy="1201.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="960.62" cy="1487.05" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1353.11" cy="1282.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1265.89" cy="1262.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1110.14" cy="1507.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1203.59" cy="1548.3" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1371.8" cy="1119.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1209.82" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1670.85" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1128.83" cy="1323.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1247.2" cy="1425.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1135.06" cy="1670.8" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1103.91" cy="1201.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="786.179" cy="1487.05" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1515.09" cy="1262.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="885.859" cy="1629.96" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1184.9" cy="1405.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1334.42" cy="1384.96" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1290.81" cy="1242.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="898.319" cy="1384.96" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1396.72" cy="1160.38" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1066.53" cy="1609.55" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1621.01" cy="1221.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="960.62" cy="1282.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1228.51" cy="1180.79" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1128.83" cy="1691.22" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1103.91" cy="1568.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1328.19" cy="1282.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1004.23" cy="1466.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1297.04" cy="1201.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1085.22" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1303.27" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1384.26" cy="568.284" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1016.69" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1471.48" cy="445.783" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1004.23" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1060.3" cy="772.454" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1384.26" cy="772.454" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1054.07" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1384.26" cy="425.366" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1091.45" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1409.18" cy="343.698" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1116.37" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1427.87" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1047.84" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1334.42" cy="486.617" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1321.96" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1801.68" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1078.99" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1253.43" cy="772.454" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="829.789" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1209.82" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="879.629" cy="1099.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1340.65" cy="527.45" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1097.68" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1427.87" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1334.42" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1272.12" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1078.99" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1477.71" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="736.338" cy="1099.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1564.94" cy="241.613" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="836.019" cy="1078.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1365.57" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1284.58" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1147.52" cy="1058.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1153.75" cy="752.037" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1427.87" cy="262.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1110.14" cy="1099.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1521.32" cy="425.366" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1240.97" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1066.53" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1359.34" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1022.92" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1359.34" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1353.11" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1309.5" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1240.97" cy="486.617" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1396.72" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1290.81" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1184.9" cy="1139.96" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1390.49" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1035.38" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1346.88" cy="466.2" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="836.019" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1440.33" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1004.23" cy="1099.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1259.66" cy="425.366" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1315.73" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1029.15" cy="527.45" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1421.64" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1103.91" cy="1119.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1035.38" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1664.62" cy="445.783" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="898.319" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1278.35" cy="772.454" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1353.11" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip032)" cx="1315.73" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<path clip-path="url(#clip030)" d="M1658.18 1804.57 L1892.22 1804.57 L1892.22 1700.89 L1658.18 1700.89  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip030)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1658.18,1804.57 1892.22,1804.57 1892.22,1700.89 1658.18,1700.89 1658.18,1804.57 "></polyline>
<circle clip-path="url(#clip030)" cx="1738.9" cy="1752.73" r="20.48" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.68889"></circle>
<path clip-path="url(#clip030)" d="M1833.45 1772.42 Q1831.65 1777.05 1829.94 1778.46 Q1828.22 1779.87 1825.35 1779.87 L1821.95 1779.87 L1821.95 1776.31 L1824.45 1776.31 Q1826.21 1776.31 1827.18 1775.47 Q1828.15 1774.64 1829.33 1771.54 L1830.1 1769.59 L1819.61 1744.08 L1824.13 1744.08 L1832.23 1764.36 L1840.33 1744.08 L1844.84 1744.08 L1833.45 1772.42 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip030)" d="M1852.13 1766.08 L1859.77 1766.08 L1859.77 1739.71 L1851.46 1741.38 L1851.46 1737.12 L1859.73 1735.45 L1864.4 1735.45 L1864.4 1766.08 L1872.04 1766.08 L1872.04 1770.01 L1852.13 1770.01 L1852.13 1766.08 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>
<p>In this code chunk, the first argument specifies the variable to be plotted on the x-axis and the second specifies the variable to be plotted on the y-axis. No surprises there. The key thing to note is that in the later arguments I’ve specified two <a href="https://docs.juliaplots.org/latest/generated/attributes_plot/">plot attributes</a>. The <code>seriestype</code> attribute is what gives me a scatter plot (each observation is plotted with a single discrete plot marker), whereas the <code>size</code> attribute is used to control the size of the image produced in the output (in pixels).</p>
<p>Cool. Well, I can definitely draw something. That feels like a win.</p>
</section>
<section id="using-the-df-macro" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="using-the-df-macro">Using the <code>@df</code> macro</h2>
<p>It’s little awkward to refer to the <code>penguins</code> data frame repeatedly in this code, and so it’s more convenient to use the <code>@df</code> macro:</p>
<div id="7b2e9276" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@df</span> penguins <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb4-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm,</span>
<span id="cb4-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_depth_mm,</span>
<span id="cb4-4">  seriestype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>scatter,</span>
<span id="cb4-5">  group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>species,</span>
<span id="cb4-6">  size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb4-7">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="500" height="500" viewbox="0 0 2000 2000">
<defs>
  <clippath id="clip120">
    <rect x="0" y="0" width="2000" height="2000"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip120)" d="M0 2000 L2000 2000 L2000 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip121">
    <rect x="400" y="200" width="1401" height="1401"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip120)" d="M136.696 1865.17 L1952.76 1865.17 L1952.76 47.2441 L136.696 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip122">
    <rect x="136" y="47" width="1817" height="1819"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="368.765,1865.17 368.765,47.2441 "></polyline>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="680.268,1865.17 680.268,47.2441 "></polyline>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="991.77,1865.17 991.77,47.2441 "></polyline>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1303.27,1865.17 1303.27,47.2441 "></polyline>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1614.78,1865.17 1614.78,47.2441 "></polyline>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1926.28,1865.17 1926.28,47.2441 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,1865.17 1952.76,1865.17 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="368.765,1865.17 368.765,1846.27 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="680.268,1865.17 680.268,1846.27 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="991.77,1865.17 991.77,1846.27 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1303.27,1865.17 1303.27,1846.27 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1614.78,1865.17 1614.78,1846.27 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1926.28,1865.17 1926.28,1846.27 "></polyline>
<path clip-path="url(#clip120)" d="M358.105 1905.73 Q361.462 1906.45 363.337 1908.72 Q365.235 1910.99 365.235 1914.32 Q365.235 1919.44 361.716 1922.24 Q358.198 1925.04 351.716 1925.04 Q349.541 1925.04 347.226 1924.6 Q344.934 1924.18 342.48 1923.33 L342.48 1918.81 Q344.425 1919.95 346.74 1920.53 Q349.054 1921.1 351.578 1921.1 Q355.976 1921.1 358.267 1919.37 Q360.582 1917.63 360.582 1914.32 Q360.582 1911.27 358.429 1909.55 Q356.3 1907.82 352.48 1907.82 L348.453 1907.82 L348.453 1903.97 L352.666 1903.97 Q356.115 1903.97 357.943 1902.61 Q359.772 1901.22 359.772 1898.63 Q359.772 1895.97 357.874 1894.55 Q355.999 1893.12 352.48 1893.12 Q350.559 1893.12 348.36 1893.53 Q346.161 1893.95 343.522 1894.83 L343.522 1890.66 Q346.184 1889.92 348.499 1889.55 Q350.837 1889.18 352.897 1889.18 Q358.221 1889.18 361.323 1891.61 Q364.425 1894.02 364.425 1898.14 Q364.425 1901.01 362.781 1903 Q361.138 1904.97 358.105 1905.73 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M374.147 1889.81 L392.503 1889.81 L392.503 1893.74 L378.429 1893.74 L378.429 1902.22 Q379.448 1901.87 380.466 1901.71 Q381.485 1901.52 382.503 1901.52 Q388.29 1901.52 391.67 1904.69 Q395.05 1907.86 395.05 1913.28 Q395.05 1918.86 391.577 1921.96 Q388.105 1925.04 381.786 1925.04 Q379.61 1925.04 377.341 1924.67 Q375.096 1924.3 372.689 1923.56 L372.689 1918.86 Q374.772 1919.99 376.994 1920.55 Q379.216 1921.1 381.693 1921.1 Q385.698 1921.1 388.036 1919 Q390.374 1916.89 390.374 1913.28 Q390.374 1909.67 388.036 1907.56 Q385.698 1905.46 381.693 1905.46 Q379.818 1905.46 377.943 1905.87 Q376.091 1906.29 374.147 1907.17 L374.147 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M668.439 1893.88 L656.634 1912.33 L668.439 1912.33 L668.439 1893.88 M667.212 1889.81 L673.092 1889.81 L673.092 1912.33 L678.022 1912.33 L678.022 1916.22 L673.092 1916.22 L673.092 1924.37 L668.439 1924.37 L668.439 1916.22 L652.837 1916.22 L652.837 1911.71 L667.212 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M695.754 1892.89 Q692.143 1892.89 690.314 1896.45 Q688.508 1899.99 688.508 1907.12 Q688.508 1914.23 690.314 1917.79 Q692.143 1921.34 695.754 1921.34 Q699.388 1921.34 701.193 1917.79 Q703.022 1914.23 703.022 1907.12 Q703.022 1899.99 701.193 1896.45 Q699.388 1892.89 695.754 1892.89 M695.754 1889.18 Q701.564 1889.18 704.619 1893.79 Q707.698 1898.37 707.698 1907.12 Q707.698 1915.85 704.619 1920.46 Q701.564 1925.04 695.754 1925.04 Q689.944 1925.04 686.865 1920.46 Q683.809 1915.85 683.809 1907.12 Q683.809 1898.37 686.865 1893.79 Q689.944 1889.18 695.754 1889.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M980.439 1893.88 L968.634 1912.33 L980.439 1912.33 L980.439 1893.88 M979.212 1889.81 L985.092 1889.81 L985.092 1912.33 L990.023 1912.33 L990.023 1916.22 L985.092 1916.22 L985.092 1924.37 L980.439 1924.37 L980.439 1916.22 L964.838 1916.22 L964.838 1911.71 L979.212 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M997.8 1889.81 L1016.16 1889.81 L1016.16 1893.74 L1002.08 1893.74 L1002.08 1902.22 Q1003.1 1901.87 1004.12 1901.71 Q1005.14 1901.52 1006.16 1901.52 Q1011.94 1901.52 1015.32 1904.69 Q1018.7 1907.86 1018.7 1913.28 Q1018.7 1918.86 1015.23 1921.96 Q1011.76 1925.04 1005.44 1925.04 Q1003.26 1925.04 1000.99 1924.67 Q998.749 1924.3 996.342 1923.56 L996.342 1918.86 Q998.425 1919.99 1000.65 1920.55 Q1002.87 1921.1 1005.35 1921.1 Q1009.35 1921.1 1011.69 1919 Q1014.03 1916.89 1014.03 1913.28 Q1014.03 1909.67 1011.69 1907.56 Q1009.35 1905.46 1005.35 1905.46 Q1003.47 1905.46 1001.6 1905.87 Q999.745 1906.29 997.8 1907.17 L997.8 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1277.97 1889.81 L1296.33 1889.81 L1296.33 1893.74 L1282.25 1893.74 L1282.25 1902.22 Q1283.27 1901.87 1284.29 1901.71 Q1285.31 1901.52 1286.33 1901.52 Q1292.12 1901.52 1295.5 1904.69 Q1298.87 1907.86 1298.87 1913.28 Q1298.87 1918.86 1295.4 1921.96 Q1291.93 1925.04 1285.61 1925.04 Q1283.44 1925.04 1281.17 1924.67 Q1278.92 1924.3 1276.51 1923.56 L1276.51 1918.86 Q1278.6 1919.99 1280.82 1920.55 Q1283.04 1921.1 1285.52 1921.1 Q1289.52 1921.1 1291.86 1919 Q1294.2 1916.89 1294.2 1913.28 Q1294.2 1909.67 1291.86 1907.56 Q1289.52 1905.46 1285.52 1905.46 Q1283.64 1905.46 1281.77 1905.87 Q1279.92 1906.29 1277.97 1907.17 L1277.97 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1318.09 1892.89 Q1314.48 1892.89 1312.65 1896.45 Q1310.84 1899.99 1310.84 1907.12 Q1310.84 1914.23 1312.65 1917.79 Q1314.48 1921.34 1318.09 1921.34 Q1321.72 1921.34 1323.53 1917.79 Q1325.36 1914.23 1325.36 1907.12 Q1325.36 1899.99 1323.53 1896.45 Q1321.72 1892.89 1318.09 1892.89 M1318.09 1889.18 Q1323.9 1889.18 1326.95 1893.79 Q1330.03 1898.37 1330.03 1907.12 Q1330.03 1915.85 1326.95 1920.46 Q1323.9 1925.04 1318.09 1925.04 Q1312.28 1925.04 1309.2 1920.46 Q1306.14 1915.85 1306.14 1907.12 Q1306.14 1898.37 1309.2 1893.79 Q1312.28 1889.18 1318.09 1889.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1589.97 1889.81 L1608.33 1889.81 L1608.33 1893.74 L1594.25 1893.74 L1594.25 1902.22 Q1595.27 1901.87 1596.29 1901.71 Q1597.31 1901.52 1598.33 1901.52 Q1604.12 1901.52 1607.5 1904.69 Q1610.88 1907.86 1610.88 1913.28 Q1610.88 1918.86 1607.4 1921.96 Q1603.93 1925.04 1597.61 1925.04 Q1595.44 1925.04 1593.17 1924.67 Q1590.92 1924.3 1588.51 1923.56 L1588.51 1918.86 Q1590.6 1919.99 1592.82 1920.55 Q1595.04 1921.1 1597.52 1921.1 Q1601.52 1921.1 1603.86 1919 Q1606.2 1916.89 1606.2 1913.28 Q1606.2 1909.67 1603.86 1907.56 Q1601.52 1905.46 1597.52 1905.46 Q1595.64 1905.46 1593.77 1905.87 Q1591.92 1906.29 1589.97 1907.17 L1589.97 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1620.13 1889.81 L1638.49 1889.81 L1638.49 1893.74 L1624.42 1893.74 L1624.42 1902.22 Q1625.44 1901.87 1626.45 1901.71 Q1627.47 1901.52 1628.49 1901.52 Q1634.28 1901.52 1637.66 1904.69 Q1641.04 1907.86 1641.04 1913.28 Q1641.04 1918.86 1637.56 1921.96 Q1634.09 1925.04 1627.77 1925.04 Q1625.6 1925.04 1623.33 1924.67 Q1621.08 1924.3 1618.68 1923.56 L1618.68 1918.86 Q1620.76 1919.99 1622.98 1920.55 Q1625.2 1921.1 1627.68 1921.1 Q1631.69 1921.1 1634.02 1919 Q1636.36 1916.89 1636.36 1913.28 Q1636.36 1909.67 1634.02 1907.56 Q1631.69 1905.46 1627.68 1905.46 Q1625.81 1905.46 1623.93 1905.87 Q1622.08 1906.29 1620.13 1907.17 L1620.13 1889.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1911.68 1905.22 Q1908.54 1905.22 1906.68 1907.38 Q1904.85 1909.53 1904.85 1913.28 Q1904.85 1917.01 1906.68 1919.18 Q1908.54 1921.34 1911.68 1921.34 Q1914.83 1921.34 1916.66 1919.18 Q1918.51 1917.01 1918.51 1913.28 Q1918.51 1909.53 1916.66 1907.38 Q1914.83 1905.22 1911.68 1905.22 M1920.97 1890.57 L1920.97 1894.83 Q1919.21 1894 1917.4 1893.56 Q1915.62 1893.12 1913.86 1893.12 Q1909.23 1893.12 1906.78 1896.24 Q1904.35 1899.37 1904 1905.69 Q1905.36 1903.67 1907.42 1902.61 Q1909.48 1901.52 1911.96 1901.52 Q1917.17 1901.52 1920.18 1904.69 Q1923.21 1907.84 1923.21 1913.28 Q1923.21 1918.6 1920.06 1921.82 Q1916.91 1925.04 1911.68 1925.04 Q1905.69 1925.04 1902.52 1920.46 Q1899.35 1915.85 1899.35 1907.12 Q1899.35 1898.93 1903.23 1894.07 Q1907.12 1889.18 1913.67 1889.18 Q1915.43 1889.18 1917.22 1889.53 Q1919.02 1889.88 1920.97 1890.57 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1941.27 1892.89 Q1937.66 1892.89 1935.83 1896.45 Q1934.02 1899.99 1934.02 1907.12 Q1934.02 1914.23 1935.83 1917.79 Q1937.66 1921.34 1941.27 1921.34 Q1944.9 1921.34 1946.71 1917.79 Q1948.54 1914.23 1948.54 1907.12 Q1948.54 1899.99 1946.71 1896.45 Q1944.9 1892.89 1941.27 1892.89 M1941.27 1889.18 Q1947.08 1889.18 1950.13 1893.79 Q1953.21 1898.37 1953.21 1907.12 Q1953.21 1915.85 1950.13 1920.46 Q1947.08 1925.04 1941.27 1925.04 Q1935.46 1925.04 1932.38 1920.46 Q1929.32 1915.85 1929.32 1907.12 Q1929.32 1898.37 1932.38 1893.79 Q1935.46 1889.18 1941.27 1889.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="136.696,1629.96 1952.76,1629.96 "></polyline>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="136.696,1221.63 1952.76,1221.63 "></polyline>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="136.696,813.287 1952.76,813.287 "></polyline>
<polyline clip-path="url(#clip122)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="136.696,404.949 1952.76,404.949 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,1865.17 136.696,47.2441 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,1629.96 155.593,1629.96 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,1221.63 155.593,1221.63 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,813.287 155.593,813.287 "></polyline>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="136.696,404.949 155.593,404.949 "></polyline>
<path clip-path="url(#clip120)" d="M54.9134 1643.31 L62.5523 1643.31 L62.5523 1616.94 L54.2421 1618.61 L54.2421 1614.35 L62.506 1612.68 L67.1819 1612.68 L67.1819 1643.31 L74.8207 1643.31 L74.8207 1647.24 L54.9134 1647.24 L54.9134 1643.31 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M97.1123 1616.76 L85.3068 1635.21 L97.1123 1635.21 L97.1123 1616.76 M95.8854 1612.68 L101.765 1612.68 L101.765 1635.21 L106.696 1635.21 L106.696 1639.1 L101.765 1639.1 L101.765 1647.24 L97.1123 1647.24 L97.1123 1639.1 L81.5105 1639.1 L81.5105 1634.58 L95.8854 1612.68 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M55.2375 1234.97 L62.8763 1234.97 L62.8763 1208.61 L54.5662 1210.27 L54.5662 1206.01 L62.83 1204.35 L67.5059 1204.35 L67.5059 1234.97 L75.1448 1234.97 L75.1448 1238.91 L55.2375 1238.91 L55.2375 1234.97 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M95.1678 1219.76 Q92.0197 1219.76 90.1679 1221.92 Q88.3392 1224.07 88.3392 1227.82 Q88.3392 1231.55 90.1679 1233.72 Q92.0197 1235.87 95.1678 1235.87 Q98.316 1235.87 100.145 1233.72 Q101.996 1231.55 101.996 1227.82 Q101.996 1224.07 100.145 1221.92 Q98.316 1219.76 95.1678 1219.76 M104.45 1205.11 L104.45 1209.37 Q102.691 1208.54 100.885 1208.1 Q99.103 1207.66 97.3437 1207.66 Q92.7141 1207.66 90.2604 1210.78 Q87.8299 1213.91 87.4827 1220.23 Q88.8484 1218.21 90.9086 1217.15 Q92.9688 1216.06 95.4456 1216.06 Q100.654 1216.06 103.663 1219.23 Q106.696 1222.38 106.696 1227.82 Q106.696 1233.14 103.547 1236.36 Q100.399 1239.58 95.1678 1239.58 Q89.1725 1239.58 86.0012 1234.99 Q82.8299 1230.39 82.8299 1221.66 Q82.8299 1213.47 86.7188 1208.61 Q90.6077 1203.72 97.1586 1203.72 Q98.9178 1203.72 100.7 1204.07 Q102.506 1204.42 104.45 1205.11 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M55.4921 826.632 L63.131 826.632 L63.131 800.267 L54.8208 801.933 L54.8208 797.674 L63.0847 796.007 L67.7606 796.007 L67.7606 826.632 L75.3994 826.632 L75.3994 830.567 L55.4921 830.567 L55.4921 826.632 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M94.8438 814.155 Q91.5104 814.155 89.5892 815.938 Q87.691 817.72 87.691 820.845 Q87.691 823.97 89.5892 825.753 Q91.5104 827.535 94.8438 827.535 Q98.1771 827.535 100.098 825.753 Q102.02 823.947 102.02 820.845 Q102.02 817.72 100.098 815.938 Q98.2002 814.155 94.8438 814.155 M90.1679 812.165 Q87.1586 811.424 85.4688 809.364 Q83.8021 807.304 83.8021 804.341 Q83.8021 800.197 86.7419 797.79 Q89.7049 795.382 94.8438 795.382 Q100.006 795.382 102.946 797.79 Q105.885 800.197 105.885 804.341 Q105.885 807.304 104.196 809.364 Q102.529 811.424 99.5428 812.165 Q102.922 812.952 104.797 815.243 Q106.696 817.535 106.696 820.845 Q106.696 825.868 103.617 828.554 Q100.561 831.239 94.8438 831.239 Q89.1262 831.239 86.0475 828.554 Q82.992 825.868 82.992 820.845 Q82.992 817.535 84.8901 815.243 Q86.7882 812.952 90.1679 812.165 M88.4549 804.781 Q88.4549 807.466 90.1216 808.97 Q91.8114 810.475 94.8438 810.475 Q97.853 810.475 99.5428 808.97 Q101.256 807.466 101.256 804.781 Q101.256 802.095 99.5428 800.591 Q97.853 799.086 94.8438 799.086 Q91.8114 799.086 90.1216 800.591 Q88.4549 802.095 88.4549 804.781 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M58.6171 418.294 L74.9365 418.294 L74.9365 422.229 L52.9921 422.229 L52.9921 418.294 Q55.6541 415.539 60.2375 410.909 Q64.8439 406.257 66.0245 404.914 Q68.2698 402.391 69.1494 400.655 Q70.0522 398.896 70.0522 397.206 Q70.0522 394.451 68.1078 392.715 Q66.1865 390.979 63.0847 390.979 Q60.8856 390.979 58.4319 391.743 Q56.0014 392.507 53.2236 394.058 L53.2236 389.335 Q56.0477 388.201 58.5014 387.622 Q60.955 387.044 62.9921 387.044 Q68.3624 387.044 71.5568 389.729 Q74.7513 392.414 74.7513 396.905 Q74.7513 399.034 73.9411 400.956 Q73.1541 402.854 71.0476 405.446 Q70.4689 406.118 67.367 409.335 Q64.2652 412.53 58.6171 418.294 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M94.7512 390.747 Q91.1401 390.747 89.3114 394.312 Q87.5058 397.854 87.5058 404.983 Q87.5058 412.09 89.3114 415.655 Q91.1401 419.196 94.7512 419.196 Q98.3854 419.196 100.191 415.655 Q102.02 412.09 102.02 404.983 Q102.02 397.854 100.191 394.312 Q98.3854 390.747 94.7512 390.747 M94.7512 387.044 Q100.561 387.044 103.617 391.65 Q106.696 396.234 106.696 404.983 Q106.696 413.71 103.617 418.317 Q100.561 422.9 94.7512 422.9 Q88.941 422.9 85.8623 418.317 Q82.8068 413.71 82.8068 404.983 Q82.8068 396.234 85.8623 391.65 Q88.941 387.044 94.7512 387.044 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip122)" cx="624.197" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="649.117" cy="935.789" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="698.958" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="474.676" cy="547.867" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="636.657" cy="282.447" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="611.737" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="630.427" cy="486.617" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="312.695" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="804.869" cy="364.115" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="543.206" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="543.206" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="748.798" cy="894.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="593.047" cy="159.946" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="343.845" cy="180.363" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="468.446" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="599.277" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="836.019" cy="262.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="331.385" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1054.07" cy="98.6948" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="543.206" cy="752.037" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="536.976" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="424.835" cy="568.284" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="568.127" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="605.507" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="387.455" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="717.648" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="711.418" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="549.437" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="711.418" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="649.117" cy="1078.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="505.826" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="649.117" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="736.338" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="455.986" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="630.427" cy="180.363" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="605.507" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="817.329" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="530.746" cy="547.867" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="667.808" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="462.216" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="730.108" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="431.066" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="935.7" cy="466.2" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="493.366" cy="1037.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="655.347" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="748.798" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="524.516" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="431.066" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="823.559" cy="159.946" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="655.347" cy="874.538" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="686.498" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="368.765" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="804.869" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="337.615" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="767.488" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="617.967" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="717.648" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="462.216" cy="1099.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="530.746" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="412.375" cy="1037.87" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="761.258" cy="180.363" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="530.746" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="748.798" cy="772.454" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="455.986" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="779.948" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="399.915" cy="1180.79" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="748.798" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="424.835" cy="1099.12" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="792.409" cy="527.45" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="275.314" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="661.577" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="655.347" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1041.61" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="399.915" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="854.709" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="736.338" cy="1058.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="505.826" cy="527.45" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="443.526" cy="1201.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="811.099" cy="588.701" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="343.845" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="860.939" cy="894.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="474.676" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="374.995" cy="527.45" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="512.056" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="761.258" cy="343.698" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="449.756" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="487.136" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="574.357" cy="568.284" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="611.737" cy="649.952" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="412.375" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="748.798" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="306.464" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="655.347" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="443.526" cy="956.206" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="730.108" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="561.897" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="698.958" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="250.394" cy="1201.21" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="879.629" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="368.765" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="742.568" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="536.976" cy="1221.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="543.206" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="549.437" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="661.577" cy="629.535" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="593.047" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="568.127" cy="404.949" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="561.897" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="879.629" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="561.897" cy="1119.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1029.15" cy="343.698" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="661.577" cy="874.538" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="817.329" cy="507.033" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="655.347" cy="262.03" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="848.479" cy="752.037" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="593.047" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="512.056" cy="302.864" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="412.375" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="748.798" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="443.526" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="536.976" cy="445.783" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="692.728" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="767.488" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="381.225" cy="1242.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="717.648" cy="609.118" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="605.507" cy="894.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="773.718" cy="752.037" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="617.967" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="935.7" cy="813.287" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="586.817" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="873.399" cy="568.284" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="480.906" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="524.516" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="561.897" cy="894.955" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="748.798" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="406.145" cy="915.372" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="692.728" cy="384.532" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="493.366" cy="1119.54" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="661.577" cy="833.704" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="692.728" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="717.648" cy="976.623" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="188.093" cy="1323.71" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="723.878" cy="1017.46" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="512.056" cy="1058.29" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="617.967" cy="670.369" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="630.427" cy="690.786" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="468.446" cy="731.62" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="431.066" cy="854.121" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="543.206" cy="792.871" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="431.066" cy="997.04" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="773.718" cy="711.203" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1085.22" cy="833.704" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1303.27" cy="507.033" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1384.26" cy="568.284" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1016.69" cy="670.369" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1471.48" cy="445.783" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1004.23" cy="854.121" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1060.3" cy="772.454" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1384.26" cy="772.454" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1054.07" cy="629.535" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1384.26" cy="425.366" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1091.45" cy="854.121" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1409.18" cy="343.698" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1116.37" cy="956.206" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1427.87" cy="792.871" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1047.84" cy="997.04" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1334.42" cy="486.617" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1321.96" cy="404.949" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1801.68" cy="854.121" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1078.99" cy="690.786" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1253.43" cy="772.454" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="829.789" cy="956.206" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1209.82" cy="915.372" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="879.629" cy="1099.12" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1340.65" cy="527.45" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1097.68" cy="833.704" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1427.87" cy="609.118" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1334.42" cy="731.62" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1272.12" cy="609.118" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1078.99" cy="854.121" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1477.71" cy="404.949" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="736.338" cy="1099.12" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1564.94" cy="241.613" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="836.019" cy="1078.71" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1365.57" cy="649.952" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1284.58" cy="690.786" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1147.52" cy="1058.29" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1153.75" cy="752.037" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1427.87" cy="262.03" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1110.14" cy="1099.12" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1521.32" cy="425.366" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1240.97" cy="507.033" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1066.53" cy="915.372" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1359.34" cy="588.701" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1022.92" cy="1017.46" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1359.34" cy="833.704" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1353.11" cy="711.203" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1309.5" cy="833.704" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1240.97" cy="486.617" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1396.72" cy="670.369" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1290.81" cy="956.206" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1184.9" cy="1139.96" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1390.49" cy="609.118" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1035.38" cy="956.206" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1346.88" cy="466.2" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="836.019" cy="956.206" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1440.33" cy="649.952" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1004.23" cy="1099.12" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1259.66" cy="425.366" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1315.73" cy="649.952" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1029.15" cy="527.45" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1421.64" cy="507.033" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1103.91" cy="1119.54" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1035.38" cy="1017.46" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1664.62" cy="445.783" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="898.319" cy="792.871" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1278.35" cy="772.454" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1353.11" cy="609.118" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1315.73" cy="670.369" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1060.3" cy="1793.3" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1303.27" cy="1160.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1222.28" cy="1609.55" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1303.27" cy="1384.96" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1153.75" cy="1527.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1085.22" cy="1732.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1016.69" cy="1507.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1097.68" cy="1364.54" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="885.859" cy="1752.47" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1103.91" cy="1344.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="736.338" cy="1691.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1240.97" cy="1201.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1022.92" cy="1691.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1203.59" cy="1507.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1041.61" cy="1507.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1259.66" cy="1282.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="804.869" cy="1732.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1253.43" cy="1384.96" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1066.53" cy="1527.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1222.28" cy="1405.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1315.73" cy="1568.71" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="998" cy="1527.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1085.22" cy="1527.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1072.76" cy="1262.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="860.939" cy="1813.72" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1060.3" cy="1405.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="960.62" cy="1568.71" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1166.21" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1191.13" cy="1568.71" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1303.27" cy="1364.54" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1135.06" cy="1364.54" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="854.709" cy="1589.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="998" cy="1527.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1901.36" cy="1017.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1247.2" cy="1466.63" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1203.59" cy="1160.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="842.249" cy="1691.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="954.39" cy="956.206" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="929.47" cy="1711.63" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1222.28" cy="1282.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="848.479" cy="1691.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1278.35" cy="1221.63" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1010.46" cy="1691.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1278.35" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1334.42" cy="1242.04" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="904.55" cy="1650.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1022.92" cy="1650.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1334.42" cy="1242.04" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="985.54" cy="1772.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1004.23" cy="1262.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1091.45" cy="1589.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1209.82" cy="1609.55" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="998" cy="1548.3" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1309.5" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1085.22" cy="1548.3" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="991.77" cy="1344.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="917.01" cy="1650.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1022.92" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="879.629" cy="1527.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1328.19" cy="1364.54" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1010.46" cy="1670.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1066.53" cy="1446.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1035.38" cy="1650.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1571.17" cy="1282.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1041.61" cy="1589.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1290.81" cy="1058.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1066.53" cy="1548.3" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1272.12" cy="1180.79" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="898.319" cy="1589.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1346.88" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1159.98" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1078.99" cy="1303.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1191.13" cy="1303.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1085.22" cy="1466.63" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1078.99" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1216.05" cy="1221.63" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1147.52" cy="1589.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1371.8" cy="1160.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1004.23" cy="1670.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1004.23" cy="1139.96" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1247.2" cy="1527.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1459.02" cy="1303.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1141.29" cy="1507.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1303.27" cy="1242.04" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="985.54" cy="1670.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1353.11" cy="956.206" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="892.089" cy="1548.3" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1384.26" cy="1589.13" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1147.52" cy="1629.96" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1434.1" cy="1017.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1147.52" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1440.33" cy="997.04" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1022.92" cy="1527.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1272.12" cy="1201.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="960.62" cy="1487.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1353.11" cy="1282.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1265.89" cy="1262.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1110.14" cy="1507.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1203.59" cy="1548.3" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1371.8" cy="1119.54" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1209.82" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1670.85" cy="1017.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1128.83" cy="1323.71" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1247.2" cy="1425.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1135.06" cy="1670.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1103.91" cy="1201.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="786.179" cy="1487.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1515.09" cy="1262.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="885.859" cy="1629.96" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1184.9" cy="1405.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1334.42" cy="1384.96" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1290.81" cy="1242.04" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="898.319" cy="1384.96" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1396.72" cy="1160.38" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1066.53" cy="1609.55" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1621.01" cy="1221.63" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="960.62" cy="1282.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1228.51" cy="1180.79" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1128.83" cy="1691.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1103.91" cy="1568.71" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1328.19" cy="1282.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1004.23" cy="1466.63" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip122)" cx="1297.04" cy="1201.21" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<path clip-path="url(#clip120)" d="M1487.58 1804.57 L1892.22 1804.57 L1892.22 1597.21 L1487.58 1597.21  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip120)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1487.58,1804.57 1892.22,1804.57 1892.22,1597.21 1487.58,1597.21 1487.58,1804.57 "></polyline>
<circle clip-path="url(#clip120)" cx="1568.3" cy="1649.05" r="20.48" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.68889"></circle>
<path clip-path="url(#clip120)" d="M1664.84 1636.38 L1658.5 1653.58 L1671.21 1653.58 L1664.84 1636.38 M1662.21 1631.77 L1667.51 1631.77 L1680.68 1666.33 L1675.82 1666.33 L1672.67 1657.46 L1657.09 1657.46 L1653.94 1666.33 L1649.01 1666.33 L1662.21 1631.77 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1701.77 1644.34 L1701.77 1630.31 L1706.02 1630.31 L1706.02 1666.33 L1701.77 1666.33 L1701.77 1662.44 Q1700.42 1664.76 1698.36 1665.89 Q1696.33 1667 1693.46 1667 Q1688.76 1667 1685.79 1663.25 Q1682.85 1659.5 1682.85 1653.39 Q1682.85 1647.28 1685.79 1643.53 Q1688.76 1639.78 1693.46 1639.78 Q1696.33 1639.78 1698.36 1640.91 Q1700.42 1642.02 1701.77 1644.34 M1687.25 1653.39 Q1687.25 1658.09 1689.17 1660.77 Q1691.12 1663.44 1694.5 1663.44 Q1697.88 1663.44 1699.82 1660.77 Q1701.77 1658.09 1701.77 1653.39 Q1701.77 1648.69 1699.82 1646.03 Q1697.88 1643.34 1694.5 1643.34 Q1691.12 1643.34 1689.17 1646.03 Q1687.25 1648.69 1687.25 1653.39 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1736.97 1652.3 L1736.97 1654.39 L1717.39 1654.39 Q1717.67 1658.78 1720.03 1661.1 Q1722.41 1663.39 1726.65 1663.39 Q1729.1 1663.39 1731.39 1662.79 Q1733.71 1662.19 1735.98 1660.98 L1735.98 1665.01 Q1733.69 1665.98 1731.28 1666.49 Q1728.87 1667 1726.39 1667 Q1720.19 1667 1716.56 1663.39 Q1712.95 1659.78 1712.95 1653.62 Q1712.95 1647.26 1716.37 1643.53 Q1719.82 1639.78 1725.65 1639.78 Q1730.89 1639.78 1733.92 1643.16 Q1736.97 1646.52 1736.97 1652.3 M1732.71 1651.05 Q1732.67 1647.56 1730.75 1645.47 Q1728.85 1643.39 1725.7 1643.39 Q1722.14 1643.39 1719.98 1645.4 Q1717.85 1647.42 1717.53 1651.08 L1732.71 1651.05 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1743.96 1630.31 L1748.22 1630.31 L1748.22 1666.33 L1743.96 1666.33 L1743.96 1630.31 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1757.14 1640.4 L1761.39 1640.4 L1761.39 1666.33 L1757.14 1666.33 L1757.14 1640.4 M1757.14 1630.31 L1761.39 1630.31 L1761.39 1635.71 L1757.14 1635.71 L1757.14 1630.31 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1792.48 1652.3 L1792.48 1654.39 L1772.9 1654.39 Q1773.18 1658.78 1775.54 1661.1 Q1777.92 1663.39 1782.16 1663.39 Q1784.61 1663.39 1786.9 1662.79 Q1789.22 1662.19 1791.49 1660.98 L1791.49 1665.01 Q1789.2 1665.98 1786.79 1666.49 Q1784.38 1667 1781.9 1667 Q1775.7 1667 1772.07 1663.39 Q1768.45 1659.78 1768.45 1653.62 Q1768.45 1647.26 1771.88 1643.53 Q1775.33 1639.78 1781.16 1639.78 Q1786.39 1639.78 1789.43 1643.16 Q1792.48 1646.52 1792.48 1652.3 M1788.22 1651.05 Q1788.18 1647.56 1786.26 1645.47 Q1784.36 1643.39 1781.21 1643.39 Q1777.64 1643.39 1775.49 1645.4 Q1773.36 1647.42 1773.04 1651.08 L1788.22 1651.05 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip120)" cx="1568.3" cy="1700.89" r="20.48" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.68889"></circle>
<path clip-path="url(#clip120)" d="M1676.88 1686.27 L1676.88 1691.2 Q1674.52 1689 1671.83 1687.92 Q1669.17 1686.83 1666.16 1686.83 Q1660.24 1686.83 1657.09 1690.46 Q1653.94 1694.07 1653.94 1700.93 Q1653.94 1707.75 1657.09 1711.39 Q1660.24 1715 1666.16 1715 Q1669.17 1715 1671.83 1713.91 Q1674.52 1712.82 1676.88 1710.62 L1676.88 1715.51 Q1674.43 1717.18 1671.67 1718.01 Q1668.94 1718.84 1665.89 1718.84 Q1658.04 1718.84 1653.52 1714.05 Q1649.01 1709.24 1649.01 1700.93 Q1649.01 1692.59 1653.52 1687.8 Q1658.04 1682.99 1665.89 1682.99 Q1668.99 1682.99 1671.72 1683.82 Q1674.47 1684.63 1676.88 1686.27 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1705.47 1702.52 L1705.47 1718.17 L1701.21 1718.17 L1701.21 1702.66 Q1701.21 1698.98 1699.77 1697.15 Q1698.34 1695.32 1695.47 1695.32 Q1692.02 1695.32 1690.03 1697.52 Q1688.04 1699.72 1688.04 1703.52 L1688.04 1718.17 L1683.76 1718.17 L1683.76 1682.15 L1688.04 1682.15 L1688.04 1696.27 Q1689.57 1693.93 1691.63 1692.78 Q1693.71 1691.62 1696.42 1691.62 Q1700.89 1691.62 1703.18 1694.4 Q1705.47 1697.15 1705.47 1702.52 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1713.96 1692.24 L1718.22 1692.24 L1718.22 1718.17 L1713.96 1718.17 L1713.96 1692.24 M1713.96 1682.15 L1718.22 1682.15 L1718.22 1687.55 L1713.96 1687.55 L1713.96 1682.15 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1748.69 1702.52 L1748.69 1718.17 L1744.43 1718.17 L1744.43 1702.66 Q1744.43 1698.98 1742.99 1697.15 Q1741.56 1695.32 1738.69 1695.32 Q1735.24 1695.32 1733.25 1697.52 Q1731.26 1699.72 1731.26 1703.52 L1731.26 1718.17 L1726.97 1718.17 L1726.97 1692.24 L1731.26 1692.24 L1731.26 1696.27 Q1732.78 1693.93 1734.84 1692.78 Q1736.93 1691.62 1739.64 1691.62 Q1744.1 1691.62 1746.39 1694.4 Q1748.69 1697.15 1748.69 1702.52 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1773.71 1693.01 L1773.71 1697.04 Q1771.9 1696.11 1769.96 1695.65 Q1768.01 1695.18 1765.93 1695.18 Q1762.76 1695.18 1761.16 1696.16 Q1759.59 1697.13 1759.59 1699.07 Q1759.59 1700.55 1760.72 1701.41 Q1761.86 1702.24 1765.28 1703.01 L1766.74 1703.33 Q1771.28 1704.3 1773.18 1706.09 Q1775.1 1707.85 1775.1 1711.02 Q1775.1 1714.63 1772.23 1716.74 Q1769.38 1718.84 1764.38 1718.84 Q1762.3 1718.84 1760.03 1718.43 Q1757.78 1718.03 1755.28 1717.22 L1755.28 1712.82 Q1757.64 1714.05 1759.94 1714.68 Q1762.23 1715.28 1764.47 1715.28 Q1767.48 1715.28 1769.1 1714.26 Q1770.72 1713.22 1770.72 1711.34 Q1770.72 1709.61 1769.54 1708.68 Q1768.39 1707.75 1764.43 1706.9 L1762.95 1706.55 Q1758.99 1705.72 1757.23 1704 Q1755.47 1702.27 1755.47 1699.26 Q1755.47 1695.6 1758.06 1693.61 Q1760.65 1691.62 1765.42 1691.62 Q1767.78 1691.62 1769.87 1691.97 Q1771.95 1692.31 1773.71 1693.01 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1786.09 1684.88 L1786.09 1692.24 L1794.87 1692.24 L1794.87 1695.55 L1786.09 1695.55 L1786.09 1709.63 Q1786.09 1712.8 1786.95 1713.7 Q1787.83 1714.61 1790.49 1714.61 L1794.87 1714.61 L1794.87 1718.17 L1790.49 1718.17 Q1785.56 1718.17 1783.69 1716.34 Q1781.81 1714.49 1781.81 1709.63 L1781.81 1695.55 L1778.69 1695.55 L1778.69 1692.24 L1781.81 1692.24 L1781.81 1684.88 L1786.09 1684.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1815.49 1696.23 Q1814.77 1695.81 1813.92 1695.62 Q1813.08 1695.42 1812.07 1695.42 Q1808.45 1695.42 1806.51 1697.78 Q1804.59 1700.11 1804.59 1704.51 L1804.59 1718.17 L1800.31 1718.17 L1800.31 1692.24 L1804.59 1692.24 L1804.59 1696.27 Q1805.93 1693.91 1808.08 1692.78 Q1810.24 1691.62 1813.32 1691.62 Q1813.76 1691.62 1814.29 1691.69 Q1814.82 1691.74 1815.47 1691.85 L1815.49 1696.23 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1831.74 1705.14 Q1826.58 1705.14 1824.59 1706.32 Q1822.6 1707.5 1822.6 1710.35 Q1822.6 1712.61 1824.08 1713.96 Q1825.58 1715.28 1828.15 1715.28 Q1831.7 1715.28 1833.82 1712.78 Q1835.98 1710.25 1835.98 1706.09 L1835.98 1705.14 L1831.74 1705.14 M1840.24 1703.38 L1840.24 1718.17 L1835.98 1718.17 L1835.98 1714.24 Q1834.52 1716.6 1832.34 1717.73 Q1830.17 1718.84 1827.02 1718.84 Q1823.04 1718.84 1820.68 1716.62 Q1818.34 1714.37 1818.34 1710.62 Q1818.34 1706.25 1821.26 1704.03 Q1824.2 1701.8 1830.01 1701.8 L1835.98 1701.8 L1835.98 1701.39 Q1835.98 1698.45 1834.03 1696.85 Q1832.11 1695.23 1828.62 1695.23 Q1826.39 1695.23 1824.29 1695.76 Q1822.18 1696.3 1820.24 1697.36 L1820.24 1693.43 Q1822.57 1692.52 1824.77 1692.08 Q1826.97 1691.62 1829.06 1691.62 Q1834.68 1691.62 1837.46 1694.54 Q1840.24 1697.45 1840.24 1703.38 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1853.13 1714.28 L1853.13 1728.03 L1848.85 1728.03 L1848.85 1692.24 L1853.13 1692.24 L1853.13 1696.18 Q1854.47 1693.86 1856.51 1692.75 Q1858.57 1691.62 1861.42 1691.62 Q1866.14 1691.62 1869.08 1695.37 Q1872.04 1699.12 1872.04 1705.23 Q1872.04 1711.34 1869.08 1715.09 Q1866.14 1718.84 1861.42 1718.84 Q1858.57 1718.84 1856.51 1717.73 Q1854.47 1716.6 1853.13 1714.28 M1867.62 1705.23 Q1867.62 1700.53 1865.68 1697.87 Q1863.76 1695.18 1860.38 1695.18 Q1857 1695.18 1855.05 1697.87 Q1853.13 1700.53 1853.13 1705.23 Q1853.13 1709.93 1855.05 1712.61 Q1857 1715.28 1860.38 1715.28 Q1863.76 1715.28 1865.68 1712.61 Q1867.62 1709.93 1867.62 1705.23 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip120)" cx="1568.3" cy="1752.73" r="20.48" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.68889"></circle>
<path clip-path="url(#clip120)" d="M1674.57 1765.08 L1674.57 1755.8 L1666.93 1755.8 L1666.93 1751.95 L1679.2 1751.95 L1679.2 1766.79 Q1676.49 1768.71 1673.22 1769.71 Q1669.96 1770.68 1666.26 1770.68 Q1658.15 1770.68 1653.57 1765.96 Q1649.01 1761.21 1649.01 1752.77 Q1649.01 1744.29 1653.57 1739.57 Q1658.15 1734.83 1666.26 1734.83 Q1669.64 1734.83 1672.67 1735.66 Q1675.72 1736.49 1678.29 1738.11 L1678.29 1743.09 Q1675.7 1740.89 1672.78 1739.78 Q1669.87 1738.67 1666.65 1738.67 Q1660.31 1738.67 1657.11 1742.21 Q1653.94 1745.75 1653.94 1752.77 Q1653.94 1759.76 1657.11 1763.3 Q1660.31 1766.84 1666.65 1766.84 Q1669.13 1766.84 1671.07 1766.42 Q1673.02 1765.98 1674.57 1765.08 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1709.73 1755.98 L1709.73 1758.07 L1690.14 1758.07 Q1690.42 1762.46 1692.78 1764.78 Q1695.17 1767.07 1699.4 1767.07 Q1701.86 1767.07 1704.15 1766.47 Q1706.46 1765.87 1708.73 1764.66 L1708.73 1768.69 Q1706.44 1769.66 1704.03 1770.17 Q1701.63 1770.68 1699.15 1770.68 Q1692.95 1770.68 1689.31 1767.07 Q1685.7 1763.46 1685.7 1757.3 Q1685.7 1750.94 1689.13 1747.21 Q1692.58 1743.46 1698.41 1743.46 Q1703.64 1743.46 1706.67 1746.84 Q1709.73 1750.2 1709.73 1755.98 M1705.47 1754.73 Q1705.42 1751.24 1703.5 1749.15 Q1701.6 1747.07 1698.46 1747.07 Q1694.89 1747.07 1692.74 1749.08 Q1690.61 1751.1 1690.28 1754.76 L1705.47 1754.73 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1738.27 1754.36 L1738.27 1770.01 L1734.01 1770.01 L1734.01 1754.5 Q1734.01 1750.82 1732.58 1748.99 Q1731.14 1747.16 1728.27 1747.16 Q1724.82 1747.16 1722.83 1749.36 Q1720.84 1751.56 1720.84 1755.36 L1720.84 1770.01 L1716.56 1770.01 L1716.56 1744.08 L1720.84 1744.08 L1720.84 1748.11 Q1722.37 1745.77 1724.43 1744.62 Q1726.51 1743.46 1729.22 1743.46 Q1733.69 1743.46 1735.98 1746.24 Q1738.27 1748.99 1738.27 1754.36 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1750.98 1736.72 L1750.98 1744.08 L1759.75 1744.08 L1759.75 1747.39 L1750.98 1747.39 L1750.98 1761.47 Q1750.98 1764.64 1751.83 1765.54 Q1752.71 1766.45 1755.38 1766.45 L1759.75 1766.45 L1759.75 1770.01 L1755.38 1770.01 Q1750.45 1770.01 1748.57 1768.18 Q1746.7 1766.33 1746.7 1761.47 L1746.7 1747.39 L1743.57 1747.39 L1743.57 1744.08 L1746.7 1744.08 L1746.7 1736.72 L1750.98 1736.72 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1775.4 1747.07 Q1771.97 1747.07 1769.98 1749.76 Q1767.99 1752.42 1767.99 1757.07 Q1767.99 1761.72 1769.96 1764.41 Q1771.95 1767.07 1775.4 1767.07 Q1778.8 1767.07 1780.79 1764.39 Q1782.78 1761.7 1782.78 1757.07 Q1782.78 1752.46 1780.79 1749.78 Q1778.8 1747.07 1775.4 1747.07 M1775.4 1743.46 Q1780.95 1743.46 1784.13 1747.07 Q1787.3 1750.68 1787.3 1757.07 Q1787.3 1763.44 1784.13 1767.07 Q1780.95 1770.68 1775.4 1770.68 Q1769.82 1770.68 1766.65 1767.07 Q1763.5 1763.44 1763.5 1757.07 Q1763.5 1750.68 1766.65 1747.07 Q1769.82 1743.46 1775.4 1743.46 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip120)" d="M1804.4 1747.07 Q1800.98 1747.07 1798.99 1749.76 Q1797 1752.42 1797 1757.07 Q1797 1761.72 1798.96 1764.41 Q1800.95 1767.07 1804.4 1767.07 Q1807.81 1767.07 1809.8 1764.39 Q1811.79 1761.7 1811.79 1757.07 Q1811.79 1752.46 1809.8 1749.78 Q1807.81 1747.07 1804.4 1747.07 M1804.4 1743.46 Q1809.96 1743.46 1813.13 1747.07 Q1816.3 1750.68 1816.3 1757.07 Q1816.3 1763.44 1813.13 1767.07 Q1809.96 1770.68 1804.4 1770.68 Q1798.82 1770.68 1795.65 1767.07 Q1792.51 1763.44 1792.51 1757.07 Q1792.51 1750.68 1795.65 1747.07 Q1798.82 1743.46 1804.4 1743.46 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>
<p>Adding labels is achieved by modifying the relevant attributes:</p>
<div id="656dc95e" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@df</span> penguins <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb5-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm,</span>
<span id="cb5-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_depth_mm,</span>
<span id="cb5-4">  seriestype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>scatter,</span>
<span id="cb5-5">  group<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>species,</span>
<span id="cb5-6">  title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Palmer Penguins"</span>,</span>
<span id="cb5-7">  xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Length (mm)"</span>,</span>
<span id="cb5-8">  ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Depth (mm)"</span>,</span>
<span id="cb5-9">  size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb5-10">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="500" height="500" viewbox="0 0 2000 2000">
<defs>
  <clippath id="clip210">
    <rect x="0" y="0" width="2000" height="2000"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip210)" d="M0 2000 L2000 2000 L2000 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip211">
    <rect x="400" y="200" width="1401" height="1401"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip210)" d="M223.724 1778.14 L1952.76 1778.14 L1952.76 153.712 L223.724 153.712  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip212">
    <rect x="223" y="153" width="1730" height="1625"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="444.672,1778.14 444.672,153.712 "></polyline>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="741.247,1778.14 741.247,153.712 "></polyline>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1037.82,1778.14 1037.82,153.712 "></polyline>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1334.4,1778.14 1334.4,153.712 "></polyline>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1630.97,1778.14 1630.97,153.712 "></polyline>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1927.55,1778.14 1927.55,153.712 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="223.724,1778.14 1952.76,1778.14 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="444.672,1778.14 444.672,1759.24 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="741.247,1778.14 741.247,1759.24 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1037.82,1778.14 1037.82,1759.24 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1334.4,1778.14 1334.4,1759.24 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1630.97,1778.14 1630.97,1759.24 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1927.55,1778.14 1927.55,1759.24 "></polyline>
<path clip-path="url(#clip210)" d="M434.012 1818.71 Q437.369 1819.42 439.244 1821.69 Q441.142 1823.96 441.142 1827.29 Q441.142 1832.41 437.623 1835.21 Q434.105 1838.01 427.623 1838.01 Q425.448 1838.01 423.133 1837.57 Q420.841 1837.15 418.387 1836.3 L418.387 1831.78 Q420.332 1832.92 422.647 1833.5 Q424.961 1834.08 427.485 1834.08 Q431.883 1834.08 434.174 1832.34 Q436.489 1830.6 436.489 1827.29 Q436.489 1824.24 434.336 1822.53 Q432.207 1820.79 428.387 1820.79 L424.36 1820.79 L424.36 1816.95 L428.573 1816.95 Q432.022 1816.95 433.85 1815.58 Q435.679 1814.19 435.679 1811.6 Q435.679 1808.94 433.781 1807.53 Q431.906 1806.09 428.387 1806.09 Q426.466 1806.09 424.267 1806.51 Q422.068 1806.92 419.429 1807.8 L419.429 1803.64 Q422.091 1802.9 424.406 1802.53 Q426.744 1802.15 428.804 1802.15 Q434.128 1802.15 437.23 1804.59 Q440.332 1806.99 440.332 1811.11 Q440.332 1813.98 438.688 1815.97 Q437.045 1817.94 434.012 1818.71 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M450.054 1802.78 L468.41 1802.78 L468.41 1806.72 L454.336 1806.72 L454.336 1815.19 Q455.355 1814.84 456.373 1814.68 Q457.392 1814.49 458.41 1814.49 Q464.197 1814.49 467.577 1817.66 Q470.957 1820.84 470.957 1826.25 Q470.957 1831.83 467.484 1834.93 Q464.012 1838.01 457.693 1838.01 Q455.517 1838.01 453.248 1837.64 Q451.003 1837.27 448.596 1836.53 L448.596 1831.83 Q450.679 1832.96 452.901 1833.52 Q455.123 1834.08 457.6 1834.08 Q461.605 1834.08 463.943 1831.97 Q466.281 1829.86 466.281 1826.25 Q466.281 1822.64 463.943 1820.53 Q461.605 1818.43 457.6 1818.43 Q455.725 1818.43 453.85 1818.84 Q451.998 1819.26 450.054 1820.14 L450.054 1802.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M729.418 1806.85 L717.613 1825.3 L729.418 1825.3 L729.418 1806.85 M728.191 1802.78 L734.071 1802.78 L734.071 1825.3 L739.002 1825.3 L739.002 1829.19 L734.071 1829.19 L734.071 1837.34 L729.418 1837.34 L729.418 1829.19 L713.817 1829.19 L713.817 1824.68 L728.191 1802.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M756.733 1805.86 Q753.122 1805.86 751.293 1809.42 Q749.488 1812.96 749.488 1820.09 Q749.488 1827.2 751.293 1830.77 Q753.122 1834.31 756.733 1834.31 Q760.367 1834.31 762.173 1830.77 Q764.001 1827.2 764.001 1820.09 Q764.001 1812.96 762.173 1809.42 Q760.367 1805.86 756.733 1805.86 M756.733 1802.15 Q762.543 1802.15 765.599 1806.76 Q768.677 1811.34 768.677 1820.09 Q768.677 1828.82 765.599 1833.43 Q762.543 1838.01 756.733 1838.01 Q750.923 1838.01 747.844 1833.43 Q744.789 1828.82 744.789 1820.09 Q744.789 1811.34 747.844 1806.76 Q750.923 1802.15 756.733 1802.15 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1026.49 1806.85 L1014.69 1825.3 L1026.49 1825.3 L1026.49 1806.85 M1025.26 1802.78 L1031.14 1802.78 L1031.14 1825.3 L1036.07 1825.3 L1036.07 1829.19 L1031.14 1829.19 L1031.14 1837.34 L1026.49 1837.34 L1026.49 1829.19 L1010.89 1829.19 L1010.89 1824.68 L1025.26 1802.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1043.85 1802.78 L1062.21 1802.78 L1062.21 1806.72 L1048.13 1806.72 L1048.13 1815.19 Q1049.15 1814.84 1050.17 1814.68 Q1051.19 1814.49 1052.21 1814.49 Q1058 1814.49 1061.38 1817.66 Q1064.75 1820.84 1064.75 1826.25 Q1064.75 1831.83 1061.28 1834.93 Q1057.81 1838.01 1051.49 1838.01 Q1049.31 1838.01 1047.05 1837.64 Q1044.8 1837.27 1042.39 1836.53 L1042.39 1831.83 Q1044.48 1832.96 1046.7 1833.52 Q1048.92 1834.08 1051.4 1834.08 Q1055.4 1834.08 1057.74 1831.97 Q1060.08 1829.86 1060.08 1826.25 Q1060.08 1822.64 1057.74 1820.53 Q1055.4 1818.43 1051.4 1818.43 Q1049.52 1818.43 1047.65 1818.84 Q1045.8 1819.26 1043.85 1820.14 L1043.85 1802.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1309.1 1802.78 L1327.45 1802.78 L1327.45 1806.72 L1313.38 1806.72 L1313.38 1815.19 Q1314.4 1814.84 1315.42 1814.68 Q1316.43 1814.49 1317.45 1814.49 Q1323.24 1814.49 1326.62 1817.66 Q1330 1820.84 1330 1826.25 Q1330 1831.83 1326.53 1834.93 Q1323.05 1838.01 1316.74 1838.01 Q1314.56 1838.01 1312.29 1837.64 Q1310.05 1837.27 1307.64 1836.53 L1307.64 1831.83 Q1309.72 1832.96 1311.94 1833.52 Q1314.17 1834.08 1316.64 1834.08 Q1320.65 1834.08 1322.99 1831.97 Q1325.32 1829.86 1325.32 1826.25 Q1325.32 1822.64 1322.99 1820.53 Q1320.65 1818.43 1316.64 1818.43 Q1314.77 1818.43 1312.89 1818.84 Q1311.04 1819.26 1309.1 1820.14 L1309.1 1802.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1349.21 1805.86 Q1345.6 1805.86 1343.77 1809.42 Q1341.97 1812.96 1341.97 1820.09 Q1341.97 1827.2 1343.77 1830.77 Q1345.6 1834.31 1349.21 1834.31 Q1352.85 1834.31 1354.65 1830.77 Q1356.48 1827.2 1356.48 1820.09 Q1356.48 1812.96 1354.65 1809.42 Q1352.85 1805.86 1349.21 1805.86 M1349.21 1802.15 Q1355.02 1802.15 1358.08 1806.76 Q1361.16 1811.34 1361.16 1820.09 Q1361.16 1828.82 1358.08 1833.43 Q1355.02 1838.01 1349.21 1838.01 Q1343.4 1838.01 1340.32 1833.43 Q1337.27 1828.82 1337.27 1820.09 Q1337.27 1811.34 1340.32 1806.76 Q1343.4 1802.15 1349.21 1802.15 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1606.17 1802.78 L1624.53 1802.78 L1624.53 1806.72 L1610.45 1806.72 L1610.45 1815.19 Q1611.47 1814.84 1612.49 1814.68 Q1613.51 1814.49 1614.53 1814.49 Q1620.31 1814.49 1623.69 1817.66 Q1627.07 1820.84 1627.07 1826.25 Q1627.07 1831.83 1623.6 1834.93 Q1620.13 1838.01 1613.81 1838.01 Q1611.63 1838.01 1609.36 1837.64 Q1607.12 1837.27 1604.71 1836.53 L1604.71 1831.83 Q1606.79 1832.96 1609.02 1833.52 Q1611.24 1834.08 1613.72 1834.08 Q1617.72 1834.08 1620.06 1831.97 Q1622.4 1829.86 1622.4 1826.25 Q1622.4 1822.64 1620.06 1820.53 Q1617.72 1818.43 1613.72 1818.43 Q1611.84 1818.43 1609.97 1818.84 Q1608.11 1819.26 1606.17 1820.14 L1606.17 1802.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1636.33 1802.78 L1654.69 1802.78 L1654.69 1806.72 L1640.61 1806.72 L1640.61 1815.19 Q1641.63 1814.84 1642.65 1814.68 Q1643.67 1814.49 1644.69 1814.49 Q1650.47 1814.49 1653.85 1817.66 Q1657.23 1820.84 1657.23 1826.25 Q1657.23 1831.83 1653.76 1834.93 Q1650.29 1838.01 1643.97 1838.01 Q1641.79 1838.01 1639.53 1837.64 Q1637.28 1837.27 1634.87 1836.53 L1634.87 1831.83 Q1636.96 1832.96 1639.18 1833.52 Q1641.4 1834.08 1643.88 1834.08 Q1647.88 1834.08 1650.22 1831.97 Q1652.56 1829.86 1652.56 1826.25 Q1652.56 1822.64 1650.22 1820.53 Q1647.88 1818.43 1643.88 1818.43 Q1642 1818.43 1640.13 1818.84 Q1638.28 1819.26 1636.33 1820.14 L1636.33 1802.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1912.95 1818.2 Q1909.8 1818.2 1907.95 1820.35 Q1906.12 1822.5 1906.12 1826.25 Q1906.12 1829.98 1907.95 1832.15 Q1909.8 1834.31 1912.95 1834.31 Q1916.1 1834.31 1917.93 1832.15 Q1919.78 1829.98 1919.78 1826.25 Q1919.78 1822.5 1917.93 1820.35 Q1916.1 1818.2 1912.95 1818.2 M1922.23 1803.54 L1922.23 1807.8 Q1920.48 1806.97 1918.67 1806.53 Q1916.89 1806.09 1915.13 1806.09 Q1910.5 1806.09 1908.04 1809.21 Q1905.61 1812.34 1905.27 1818.66 Q1906.63 1816.65 1908.69 1815.58 Q1910.75 1814.49 1913.23 1814.49 Q1918.44 1814.49 1921.45 1817.66 Q1924.48 1820.81 1924.48 1826.25 Q1924.48 1831.58 1921.33 1834.79 Q1918.18 1838.01 1912.95 1838.01 Q1906.96 1838.01 1903.79 1833.43 Q1900.61 1828.82 1900.61 1820.09 Q1900.61 1811.9 1904.5 1807.04 Q1908.39 1802.15 1914.94 1802.15 Q1916.7 1802.15 1918.48 1802.5 Q1920.29 1802.85 1922.23 1803.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1942.54 1805.86 Q1938.92 1805.86 1937.1 1809.42 Q1935.29 1812.96 1935.29 1820.09 Q1935.29 1827.2 1937.1 1830.77 Q1938.92 1834.31 1942.54 1834.31 Q1946.17 1834.31 1947.98 1830.77 Q1949.8 1827.2 1949.8 1820.09 Q1949.8 1812.96 1947.98 1809.42 Q1946.17 1805.86 1942.54 1805.86 M1942.54 1802.15 Q1948.35 1802.15 1951.4 1806.76 Q1954.48 1811.34 1954.48 1820.09 Q1954.48 1828.82 1951.4 1833.43 Q1948.35 1838.01 1942.54 1838.01 Q1936.73 1838.01 1933.65 1833.43 Q1930.59 1828.82 1930.59 1820.09 Q1930.59 1811.34 1933.65 1806.76 Q1936.73 1802.15 1942.54 1802.15 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M829.076 1894.31 L829.076 1911.72 L839.388 1911.72 Q844.576 1911.72 847.059 1909.59 Q849.573 1907.42 849.573 1903 Q849.573 1898.54 847.059 1896.44 Q844.576 1894.31 839.388 1894.31 L829.076 1894.31 M829.076 1874.77 L829.076 1889.09 L838.593 1889.09 Q843.303 1889.09 845.595 1887.34 Q847.918 1885.56 847.918 1881.93 Q847.918 1878.33 845.595 1876.55 Q843.303 1874.77 838.593 1874.77 L829.076 1874.77 M822.647 1869.48 L839.07 1869.48 Q846.422 1869.48 850.401 1872.54 Q854.38 1875.59 854.38 1881.23 Q854.38 1885.59 852.343 1888.17 Q850.306 1890.75 846.359 1891.38 Q851.101 1892.4 853.711 1895.65 Q856.353 1898.86 856.353 1903.7 Q856.353 1910.07 852.024 1913.53 Q847.696 1917 839.707 1917 L822.647 1917 L822.647 1869.48 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M867.111 1881.36 L872.967 1881.36 L872.967 1917 L867.111 1917 L867.111 1881.36 M867.111 1867.48 L872.967 1867.48 L872.967 1874.89 L867.111 1874.89 L867.111 1867.48 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M885.221 1867.48 L891.078 1867.48 L891.078 1917 L885.221 1917 L885.221 1867.48 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M903.332 1867.48 L909.188 1867.48 L909.188 1917 L903.332 1917 L903.332 1867.48 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M942.417 1869.48 L948.847 1869.48 L948.847 1911.59 L971.986 1911.59 L971.986 1917 L942.417 1917 L942.417 1869.48 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1007.82 1897.72 L1007.82 1900.58 L980.898 1900.58 Q981.28 1906.63 984.526 1909.81 Q987.805 1912.96 993.629 1912.96 Q997.003 1912.96 1000.15 1912.13 Q1003.34 1911.31 1006.46 1909.65 L1006.46 1915.19 Q1003.31 1916.53 999.995 1917.23 Q996.685 1917.93 993.279 1917.93 Q984.749 1917.93 979.752 1912.96 Q974.787 1908 974.787 1899.53 Q974.787 1890.78 979.498 1885.65 Q984.24 1880.5 992.261 1880.5 Q999.454 1880.5 1003.62 1885.14 Q1007.82 1889.76 1007.82 1897.72 M1001.97 1896 Q1001.9 1891.19 999.263 1888.33 Q996.653 1885.46 992.324 1885.46 Q987.423 1885.46 984.463 1888.23 Q981.535 1891 981.089 1896.03 L1001.97 1896 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1047.07 1895.49 L1047.07 1917 L1041.21 1917 L1041.21 1895.68 Q1041.21 1890.62 1039.24 1888.1 Q1037.27 1885.59 1033.32 1885.59 Q1028.58 1885.59 1025.84 1888.61 Q1023.1 1891.64 1023.1 1896.86 L1023.1 1917 L1017.21 1917 L1017.21 1881.36 L1023.1 1881.36 L1023.1 1886.89 Q1025.2 1883.68 1028.04 1882.09 Q1030.9 1880.5 1034.62 1880.5 Q1040.77 1880.5 1043.92 1884.32 Q1047.07 1888.1 1047.07 1895.49 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1082.21 1898.77 Q1082.21 1892.4 1079.57 1888.9 Q1076.96 1885.4 1072.21 1885.4 Q1067.5 1885.4 1064.86 1888.9 Q1062.25 1892.4 1062.25 1898.77 Q1062.25 1905.1 1064.86 1908.6 Q1067.5 1912.1 1072.21 1912.1 Q1076.96 1912.1 1079.57 1908.6 Q1082.21 1905.1 1082.21 1898.77 M1088.06 1912.58 Q1088.06 1921.68 1084.02 1926.11 Q1079.98 1930.56 1071.64 1930.56 Q1068.55 1930.56 1065.82 1930.09 Q1063.08 1929.64 1060.5 1928.68 L1060.5 1922.99 Q1063.08 1924.39 1065.59 1925.06 Q1068.11 1925.72 1070.72 1925.72 Q1076.48 1925.72 1079.34 1922.7 Q1082.21 1919.71 1082.21 1913.63 L1082.21 1910.73 Q1080.39 1913.88 1077.56 1915.44 Q1074.73 1917 1070.78 1917 Q1064.23 1917 1060.21 1912.01 Q1056.2 1907.01 1056.2 1898.77 Q1056.2 1890.49 1060.21 1885.49 Q1064.23 1880.5 1070.78 1880.5 Q1074.73 1880.5 1077.56 1882.06 Q1080.39 1883.62 1082.21 1886.77 L1082.21 1881.36 L1088.06 1881.36 L1088.06 1912.58 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1105.92 1871.23 L1105.92 1881.36 L1117.98 1881.36 L1117.98 1885.91 L1105.92 1885.91 L1105.92 1905.26 Q1105.92 1909.62 1107.1 1910.86 Q1108.31 1912.1 1111.97 1912.1 L1117.98 1912.1 L1117.98 1917 L1111.97 1917 Q1105.19 1917 1102.61 1914.49 Q1100.03 1911.94 1100.03 1905.26 L1100.03 1885.91 L1095.74 1885.91 L1095.74 1881.36 L1100.03 1881.36 L1100.03 1871.23 L1105.92 1871.23 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1155.32 1895.49 L1155.32 1917 L1149.46 1917 L1149.46 1895.68 Q1149.46 1890.62 1147.49 1888.1 Q1145.52 1885.59 1141.57 1885.59 Q1136.83 1885.59 1134.09 1888.61 Q1131.35 1891.64 1131.35 1896.86 L1131.35 1917 L1125.46 1917 L1125.46 1867.48 L1131.35 1867.48 L1131.35 1886.89 Q1133.45 1883.68 1136.28 1882.09 Q1139.15 1880.5 1142.87 1880.5 Q1149.02 1880.5 1152.17 1884.32 Q1155.32 1888.1 1155.32 1895.49 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1201.79 1867.54 Q1197.52 1874.86 1195.45 1882.02 Q1193.39 1889.19 1193.39 1896.54 Q1193.39 1903.89 1195.45 1911.12 Q1197.55 1918.31 1201.79 1925.6 L1196.7 1925.6 Q1191.92 1918.12 1189.53 1910.89 Q1187.18 1903.67 1187.18 1896.54 Q1187.18 1889.44 1189.53 1882.25 Q1191.89 1875.05 1196.7 1867.54 L1201.79 1867.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1240.91 1888.2 Q1243.1 1884.25 1246.16 1882.37 Q1249.21 1880.5 1253.35 1880.5 Q1258.92 1880.5 1261.94 1884.41 Q1264.97 1888.29 1264.97 1895.49 L1264.97 1917 L1259.08 1917 L1259.08 1895.68 Q1259.08 1890.55 1257.27 1888.07 Q1255.45 1885.59 1251.73 1885.59 Q1247.18 1885.59 1244.53 1888.61 Q1241.89 1891.64 1241.89 1896.86 L1241.89 1917 L1236 1917 L1236 1895.68 Q1236 1890.52 1234.19 1888.07 Q1232.38 1885.59 1228.59 1885.59 Q1224.1 1885.59 1221.46 1888.64 Q1218.82 1891.67 1218.82 1896.86 L1218.82 1917 L1212.93 1917 L1212.93 1881.36 L1218.82 1881.36 L1218.82 1886.89 Q1220.82 1883.62 1223.62 1882.06 Q1226.42 1880.5 1230.27 1880.5 Q1234.16 1880.5 1236.86 1882.47 Q1239.6 1884.44 1240.91 1888.2 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1304.4 1888.2 Q1306.6 1884.25 1309.65 1882.37 Q1312.71 1880.5 1316.85 1880.5 Q1322.42 1880.5 1325.44 1884.41 Q1328.47 1888.29 1328.47 1895.49 L1328.47 1917 L1322.58 1917 L1322.58 1895.68 Q1322.58 1890.55 1320.76 1888.07 Q1318.95 1885.59 1315.22 1885.59 Q1310.67 1885.59 1308.03 1888.61 Q1305.39 1891.64 1305.39 1896.86 L1305.39 1917 L1299.5 1917 L1299.5 1895.68 Q1299.5 1890.52 1297.69 1888.07 Q1295.87 1885.59 1292.09 1885.59 Q1287.6 1885.59 1284.96 1888.64 Q1282.31 1891.67 1282.31 1896.86 L1282.31 1917 L1276.43 1917 L1276.43 1881.36 L1282.31 1881.36 L1282.31 1886.89 Q1284.32 1883.62 1287.12 1882.06 Q1289.92 1880.5 1293.77 1880.5 Q1297.66 1880.5 1300.36 1882.47 Q1303.1 1884.44 1304.4 1888.2 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1339.22 1867.54 L1344.32 1867.54 Q1349.09 1875.05 1351.45 1882.25 Q1353.83 1889.44 1353.83 1896.54 Q1353.83 1903.67 1351.45 1910.89 Q1349.09 1918.12 1344.32 1925.6 L1339.22 1925.6 Q1343.46 1918.31 1345.53 1911.12 Q1347.63 1903.89 1347.63 1896.54 Q1347.63 1889.19 1345.53 1882.02 Q1343.46 1874.86 1339.22 1867.54 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="223.724,1567.97 1952.76,1567.97 "></polyline>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="223.724,1203.1 1952.76,1203.1 "></polyline>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="223.724,838.219 1952.76,838.219 "></polyline>
<polyline clip-path="url(#clip212)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="223.724,473.343 1952.76,473.343 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="223.724,1778.14 223.724,153.712 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="223.724,1567.97 242.621,1567.97 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="223.724,1203.1 242.621,1203.1 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="223.724,838.219 242.621,838.219 "></polyline>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="223.724,473.343 242.621,473.343 "></polyline>
<path clip-path="url(#clip210)" d="M141.941 1581.32 L149.58 1581.32 L149.58 1554.95 L141.27 1556.62 L141.27 1552.36 L149.534 1550.69 L154.21 1550.69 L154.21 1581.32 L161.849 1581.32 L161.849 1585.25 L141.941 1585.25 L141.941 1581.32 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M184.14 1554.77 L172.335 1573.21 L184.14 1573.21 L184.14 1554.77 M182.913 1550.69 L188.793 1550.69 L188.793 1573.21 L193.724 1573.21 L193.724 1577.1 L188.793 1577.1 L188.793 1585.25 L184.14 1585.25 L184.14 1577.1 L168.539 1577.1 L168.539 1572.59 L182.913 1550.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M142.266 1216.44 L149.904 1216.44 L149.904 1190.07 L141.594 1191.74 L141.594 1187.48 L149.858 1185.82 L154.534 1185.82 L154.534 1216.44 L162.173 1216.44 L162.173 1220.38 L142.266 1220.38 L142.266 1216.44 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M182.196 1201.23 Q179.048 1201.23 177.196 1203.38 Q175.367 1205.54 175.367 1209.29 Q175.367 1213.01 177.196 1215.19 Q179.048 1217.34 182.196 1217.34 Q185.344 1217.34 187.173 1215.19 Q189.025 1213.01 189.025 1209.29 Q189.025 1205.54 187.173 1203.38 Q185.344 1201.23 182.196 1201.23 M191.478 1186.58 L191.478 1190.84 Q189.719 1190.01 187.913 1189.57 Q186.131 1189.13 184.372 1189.13 Q179.742 1189.13 177.288 1192.25 Q174.858 1195.38 174.511 1201.69 Q175.876 1199.68 177.937 1198.62 Q179.997 1197.53 182.474 1197.53 Q187.682 1197.53 190.691 1200.7 Q193.724 1203.85 193.724 1209.29 Q193.724 1214.61 190.575 1217.83 Q187.427 1221.05 182.196 1221.05 Q176.201 1221.05 173.029 1216.46 Q169.858 1211.86 169.858 1203.13 Q169.858 1194.94 173.747 1190.07 Q177.636 1185.19 184.187 1185.19 Q185.946 1185.19 187.728 1185.54 Q189.534 1185.88 191.478 1186.58 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M142.52 851.564 L150.159 851.564 L150.159 825.199 L141.849 826.865 L141.849 822.606 L150.113 820.939 L154.789 820.939 L154.789 851.564 L162.427 851.564 L162.427 855.499 L142.52 855.499 L142.52 851.564 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M181.872 839.087 Q178.538 839.087 176.617 840.87 Q174.719 842.652 174.719 845.777 Q174.719 848.902 176.617 850.685 Q178.538 852.467 181.872 852.467 Q185.205 852.467 187.126 850.685 Q189.048 848.879 189.048 845.777 Q189.048 842.652 187.126 840.87 Q185.228 839.087 181.872 839.087 M177.196 837.097 Q174.187 836.356 172.497 834.296 Q170.83 832.236 170.83 829.273 Q170.83 825.129 173.77 822.722 Q176.733 820.314 181.872 820.314 Q187.034 820.314 189.974 822.722 Q192.913 825.129 192.913 829.273 Q192.913 832.236 191.224 834.296 Q189.557 836.356 186.571 837.097 Q189.95 837.884 191.825 840.175 Q193.724 842.467 193.724 845.777 Q193.724 850.8 190.645 853.486 Q187.589 856.171 181.872 856.171 Q176.154 856.171 173.076 853.486 Q170.02 850.8 170.02 845.777 Q170.02 842.467 171.918 840.175 Q173.816 837.884 177.196 837.097 M175.483 829.713 Q175.483 832.398 177.15 833.902 Q178.839 835.407 181.872 835.407 Q184.881 835.407 186.571 833.902 Q188.284 832.398 188.284 829.713 Q188.284 827.027 186.571 825.523 Q184.881 824.018 181.872 824.018 Q178.839 824.018 177.15 825.523 Q175.483 827.027 175.483 829.713 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M145.645 486.688 L161.964 486.688 L161.964 490.623 L140.02 490.623 L140.02 486.688 Q142.682 483.934 147.265 479.304 Q151.872 474.651 153.052 473.309 Q155.298 470.786 156.177 469.049 Q157.08 467.29 157.08 465.6 Q157.08 462.846 155.136 461.11 Q153.215 459.374 150.113 459.374 Q147.914 459.374 145.46 460.138 Q143.029 460.901 140.252 462.452 L140.252 457.73 Q143.076 456.596 145.529 456.017 Q147.983 455.438 150.02 455.438 Q155.39 455.438 158.585 458.124 Q161.779 460.809 161.779 465.3 Q161.779 467.429 160.969 469.35 Q160.182 471.249 158.076 473.841 Q157.497 474.512 154.395 477.73 Q151.293 480.924 145.645 486.688 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M181.779 459.142 Q178.168 459.142 176.339 462.707 Q174.534 466.249 174.534 473.378 Q174.534 480.485 176.339 484.049 Q178.168 487.591 181.779 487.591 Q185.413 487.591 187.219 484.049 Q189.048 480.485 189.048 473.378 Q189.048 466.249 187.219 462.707 Q185.413 459.142 181.779 459.142 M181.779 455.438 Q187.589 455.438 190.645 460.045 Q193.724 464.628 193.724 473.378 Q193.724 482.105 190.645 486.711 Q187.589 491.295 181.779 491.295 Q175.969 491.295 172.89 486.711 Q169.835 482.105 169.835 473.378 Q169.835 464.628 172.89 460.045 Q175.969 455.438 181.779 455.438 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M73.0704 1211.94 L90.4806 1211.94 L90.4806 1201.63 Q90.4806 1196.44 88.3481 1193.96 Q86.1838 1191.45 81.7596 1191.45 Q77.3036 1191.45 75.2029 1193.96 Q73.0704 1196.44 73.0704 1201.63 L73.0704 1211.94 M53.5277 1211.94 L67.8505 1211.94 L67.8505 1202.43 Q67.8505 1197.72 66.1 1195.43 Q64.3176 1193.1 60.6891 1193.1 Q57.0925 1193.1 55.3101 1195.43 Q53.5277 1197.72 53.5277 1202.43 L53.5277 1211.94 M48.2442 1218.37 L48.2442 1201.95 Q48.2442 1194.6 51.2997 1190.62 Q54.3552 1186.64 59.9889 1186.64 Q64.3494 1186.64 66.9275 1188.68 Q69.5056 1190.71 70.1422 1194.66 Q71.1607 1189.92 74.4072 1187.31 Q77.6219 1184.67 82.4598 1184.67 Q88.8255 1184.67 92.2948 1189 Q95.7642 1193.32 95.7642 1201.31 L95.7642 1218.37 L48.2442 1218.37 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M60.1162 1173.91 L60.1162 1168.05 L95.7642 1168.05 L95.7642 1173.91 L60.1162 1173.91 M46.239 1173.91 L46.239 1168.05 L53.655 1168.05 L53.655 1173.91 L46.239 1173.91 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M46.239 1155.8 L46.239 1149.94 L95.7642 1149.94 L95.7642 1155.8 L46.239 1155.8 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M46.239 1137.69 L46.239 1131.83 L95.7642 1131.83 L95.7642 1137.69 L46.239 1137.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M53.5277 1092.17 L90.4806 1092.17 L90.4806 1084.41 Q90.4806 1074.57 86.0246 1070.02 Q81.5686 1065.44 71.9564 1065.44 Q62.4079 1065.44 57.9837 1070.02 Q53.5277 1074.57 53.5277 1084.41 L53.5277 1092.17 M48.2442 1098.6 L48.2442 1085.39 Q48.2442 1071.58 54.0051 1065.12 Q59.7343 1058.66 71.9564 1058.66 Q84.2422 1058.66 90.0032 1065.15 Q95.7642 1071.64 95.7642 1085.39 L95.7642 1098.6 L48.2442 1098.6 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M76.4761 1018.17 L79.3406 1018.17 L79.3406 1045.1 Q85.3881 1044.72 88.5709 1041.47 Q91.7219 1038.19 91.7219 1032.37 Q91.7219 1028.99 90.8944 1025.84 Q90.0669 1022.66 88.4118 1019.54 L93.9499 1019.54 Q95.2867 1022.69 95.987 1026 Q96.6872 1029.31 96.6872 1032.72 Q96.6872 1041.25 91.7219 1046.25 Q86.7567 1051.21 78.2903 1051.21 Q69.5374 1051.21 64.4131 1046.5 Q59.2568 1041.76 59.2568 1033.74 Q59.2568 1026.54 63.9038 1022.37 Q68.5189 1018.17 76.4761 1018.17 M74.7573 1024.03 Q69.9512 1024.09 67.0866 1026.73 Q64.2221 1029.34 64.2221 1033.67 Q64.2221 1038.57 66.9912 1041.53 Q69.7602 1044.46 74.7892 1044.91 L74.7573 1024.03 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M90.417 1002.89 L109.323 1002.89 L109.323 1008.78 L60.1162 1008.78 L60.1162 1002.89 L65.5271 1002.89 Q62.3442 1001.05 60.8164 998.248 Q59.2568 995.415 59.2568 991.5 Q59.2568 985.007 64.4131 980.965 Q69.5693 976.891 77.972 976.891 Q86.3747 976.891 91.531 980.965 Q96.6872 985.007 96.6872 991.5 Q96.6872 995.415 95.1594 998.248 Q93.5998 1001.05 90.417 1002.89 M77.972 982.97 Q71.5108 982.97 67.8505 985.644 Q64.1584 988.286 64.1584 992.932 Q64.1584 997.579 67.8505 1000.25 Q71.5108 1002.89 77.972 1002.89 Q84.4332 1002.89 88.1253 1000.25 Q91.7856 997.579 91.7856 992.932 Q91.7856 988.286 88.1253 985.644 Q84.4332 982.97 77.972 982.97 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M49.9947 961.39 L60.1162 961.39 L60.1162 949.327 L64.6677 949.327 L64.6677 961.39 L84.0194 961.39 Q88.3799 961.39 89.6213 960.213 Q90.8626 959.003 90.8626 955.343 L90.8626 949.327 L95.7642 949.327 L95.7642 955.343 Q95.7642 962.122 93.2497 964.701 Q90.7034 967.279 84.0194 967.279 L64.6677 967.279 L64.6677 971.576 L60.1162 971.576 L60.1162 967.279 L49.9947 967.279 L49.9947 961.39 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M74.2481 911.993 L95.7642 911.993 L95.7642 917.849 L74.439 917.849 Q69.3783 917.849 66.8638 919.822 Q64.3494 921.796 64.3494 925.742 Q64.3494 930.485 67.3731 933.222 Q70.3968 935.959 75.6167 935.959 L95.7642 935.959 L95.7642 941.848 L46.239 941.848 L46.239 935.959 L65.6544 935.959 Q62.4397 933.859 60.8483 931.026 Q59.2568 928.161 59.2568 924.437 Q59.2568 918.295 63.0763 915.144 Q66.8638 911.993 74.2481 911.993 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M46.3026 865.523 Q53.6232 869.788 60.7846 871.857 Q67.946 873.926 75.2984 873.926 Q82.6508 873.926 89.8759 871.857 Q97.0691 869.756 104.358 865.523 L104.358 870.615 Q96.8782 875.39 89.6531 877.777 Q82.428 880.132 75.2984 880.132 Q68.2006 880.132 61.0074 877.777 Q53.8142 875.422 46.3026 870.615 L46.3026 865.523 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M66.9593 826.406 Q63.0126 824.209 61.1347 821.154 Q59.2568 818.098 59.2568 813.961 Q59.2568 808.391 63.1717 805.367 Q67.0548 802.343 74.2481 802.343 L95.7642 802.343 L95.7642 808.232 L74.439 808.232 Q69.3146 808.232 66.832 810.046 Q64.3494 811.86 64.3494 815.584 Q64.3494 820.135 67.3731 822.777 Q70.3968 825.419 75.6167 825.419 L95.7642 825.419 L95.7642 831.307 L74.439 831.307 Q69.2828 831.307 66.832 833.121 Q64.3494 834.936 64.3494 838.723 Q64.3494 843.211 67.4049 845.853 Q70.4286 848.495 75.6167 848.495 L95.7642 848.495 L95.7642 854.383 L60.1162 854.383 L60.1162 848.495 L65.6544 848.495 Q62.376 846.489 60.8164 843.689 Q59.2568 840.888 59.2568 837.036 Q59.2568 833.153 61.2302 830.448 Q63.2036 827.711 66.9593 826.406 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M66.9593 762.908 Q63.0126 760.712 61.1347 757.656 Q59.2568 754.6 59.2568 750.463 Q59.2568 744.893 63.1717 741.869 Q67.0548 738.845 74.2481 738.845 L95.7642 738.845 L95.7642 744.734 L74.439 744.734 Q69.3146 744.734 66.832 746.548 Q64.3494 748.362 64.3494 752.086 Q64.3494 756.637 67.3731 759.279 Q70.3968 761.921 75.6167 761.921 L95.7642 761.921 L95.7642 767.809 L74.439 767.809 Q69.2828 767.809 66.832 769.624 Q64.3494 771.438 64.3494 775.225 Q64.3494 779.713 67.4049 782.355 Q70.4286 784.997 75.6167 784.997 L95.7642 784.997 L95.7642 790.885 L60.1162 790.885 L60.1162 784.997 L65.6544 784.997 Q62.376 782.991 60.8164 780.191 Q59.2568 777.39 59.2568 773.538 Q59.2568 769.655 61.2302 766.95 Q63.2036 764.213 66.9593 762.908 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M46.3026 728.087 L46.3026 722.995 Q53.8142 718.22 61.0074 715.865 Q68.2006 713.478 75.2984 713.478 Q82.428 713.478 89.6531 715.865 Q96.8782 718.22 104.358 722.995 L104.358 728.087 Q97.0691 723.854 89.8759 721.785 Q82.6508 719.685 75.2984 719.685 Q67.946 719.685 60.7846 721.785 Q53.6232 723.854 46.3026 728.087 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M758.861 18.8205 L758.861 41.5461 L769.15 41.5461 Q774.862 41.5461 777.981 38.5889 Q781.1 35.6318 781.1 30.163 Q781.1 24.7348 777.981 21.7777 Q774.862 18.8205 769.15 18.8205 L758.861 18.8205 M750.678 12.096 L769.15 12.096 Q779.318 12.096 784.503 16.714 Q789.729 21.2916 789.729 30.163 Q789.729 39.1155 784.503 43.6931 Q779.318 48.2706 769.15 48.2706 L758.861 48.2706 L758.861 72.576 L750.678 72.576 L750.678 12.096 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M817.275 49.7694 Q808.241 49.7694 804.757 51.8354 Q801.274 53.9013 801.274 58.8839 Q801.274 62.8538 803.866 65.2034 Q806.499 67.5124 810.996 67.5124 Q817.194 67.5124 820.921 63.1374 Q824.688 58.7219 824.688 51.4303 L824.688 49.7694 L817.275 49.7694 M832.142 46.6907 L832.142 72.576 L824.688 72.576 L824.688 65.6895 Q822.136 69.8214 818.328 71.8063 Q814.52 73.7508 809.011 73.7508 Q802.043 73.7508 797.911 69.8619 Q793.82 65.9325 793.82 59.3701 Q793.82 51.7138 798.924 47.825 Q804.069 43.9361 814.237 43.9361 L824.688 43.9361 L824.688 43.2069 Q824.688 38.0623 821.285 35.2672 Q817.923 32.4315 811.806 32.4315 Q807.917 32.4315 804.231 33.3632 Q800.545 34.295 797.142 36.1584 L797.142 29.2718 Q801.233 27.692 805.082 26.9223 Q808.93 26.1121 812.576 26.1121 Q822.419 26.1121 827.28 31.2163 Q832.142 36.3204 832.142 46.6907 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M847.495 9.54393 L854.948 9.54393 L854.948 72.576 L847.495 72.576 L847.495 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M905.868 35.9153 Q908.663 30.8922 912.552 28.5022 Q916.441 26.1121 921.707 26.1121 Q928.796 26.1121 932.645 31.0947 Q936.493 36.0368 936.493 45.1919 L936.493 72.576 L928.999 72.576 L928.999 45.4349 Q928.999 38.913 926.69 35.7533 Q924.381 32.5936 919.641 32.5936 Q913.848 32.5936 910.486 36.4419 Q907.124 40.2903 907.124 46.9338 L907.124 72.576 L899.63 72.576 L899.63 45.4349 Q899.63 38.8725 897.321 35.7533 Q895.012 32.5936 890.191 32.5936 Q884.479 32.5936 881.117 36.4824 Q877.755 40.3308 877.755 46.9338 L877.755 72.576 L870.261 72.576 L870.261 27.2059 L877.755 27.2059 L877.755 34.2544 Q880.307 30.082 883.872 28.0971 Q887.436 26.1121 892.338 26.1121 Q897.28 26.1121 900.723 28.6237 Q904.207 31.1352 905.868 35.9153 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M990.167 48.0275 L990.167 51.6733 L955.897 51.6733 Q956.383 59.3701 960.515 63.421 Q964.687 67.4314 972.1 67.4314 Q976.394 67.4314 980.405 66.3781 Q984.456 65.3249 988.425 63.2184 L988.425 70.267 Q984.415 71.9684 980.202 72.8596 Q975.989 73.7508 971.655 73.7508 Q960.798 73.7508 954.438 67.4314 Q948.119 61.1119 948.119 50.3365 Q948.119 39.1965 954.114 32.6746 Q960.15 26.1121 970.358 26.1121 Q979.513 26.1121 984.82 32.0264 Q990.167 37.9003 990.167 48.0275 M982.714 45.84 Q982.633 39.7232 979.27 36.0774 Q975.949 32.4315 970.439 32.4315 Q964.201 32.4315 960.434 35.9558 Q956.707 39.4801 956.14 45.8805 L982.714 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1028.69 34.1734 Q1027.44 33.4443 1025.94 33.1202 Q1024.48 32.7556 1022.7 32.7556 Q1016.38 32.7556 1012.97 36.8875 Q1009.61 40.9789 1009.61 48.6757 L1009.61 72.576 L1002.12 72.576 L1002.12 27.2059 L1009.61 27.2059 L1009.61 34.2544 Q1011.96 30.1225 1015.73 28.1376 Q1019.5 26.1121 1024.88 26.1121 Q1025.65 26.1121 1026.58 26.2337 Q1027.52 26.3147 1028.65 26.5172 L1028.69 34.1734 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1071.39 18.8205 L1071.39 41.5461 L1081.68 41.5461 Q1087.39 41.5461 1090.51 38.5889 Q1093.63 35.6318 1093.63 30.163 Q1093.63 24.7348 1090.51 21.7777 Q1087.39 18.8205 1081.68 18.8205 L1071.39 18.8205 M1063.21 12.096 L1081.68 12.096 Q1091.85 12.096 1097.03 16.714 Q1102.26 21.2916 1102.26 30.163 Q1102.26 39.1155 1097.03 43.6931 Q1091.85 48.2706 1081.68 48.2706 L1071.39 48.2706 L1071.39 72.576 L1063.21 72.576 L1063.21 12.096 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1148.76 48.0275 L1148.76 51.6733 L1114.49 51.6733 Q1114.98 59.3701 1119.11 63.421 Q1123.28 67.4314 1130.69 67.4314 Q1134.99 67.4314 1139 66.3781 Q1143.05 65.3249 1147.02 63.2184 L1147.02 70.267 Q1143.01 71.9684 1138.8 72.8596 Q1134.58 73.7508 1130.25 73.7508 Q1119.39 73.7508 1113.03 67.4314 Q1106.71 61.1119 1106.71 50.3365 Q1106.71 39.1965 1112.71 32.6746 Q1118.74 26.1121 1128.95 26.1121 Q1138.11 26.1121 1143.41 32.0264 Q1148.76 37.9003 1148.76 48.0275 M1141.31 45.84 Q1141.23 39.7232 1137.86 36.0774 Q1134.54 32.4315 1129.03 32.4315 Q1122.79 32.4315 1119.03 35.9558 Q1115.3 39.4801 1114.73 45.8805 L1141.31 45.84 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1198.71 45.1919 L1198.71 72.576 L1191.25 72.576 L1191.25 45.4349 Q1191.25 38.994 1188.74 35.7938 Q1186.23 32.5936 1181.21 32.5936 Q1175.17 32.5936 1171.69 36.4419 Q1168.2 40.2903 1168.2 46.9338 L1168.2 72.576 L1160.71 72.576 L1160.71 27.2059 L1168.2 27.2059 L1168.2 34.2544 Q1170.88 30.163 1174.48 28.1376 Q1178.13 26.1121 1182.87 26.1121 Q1190.69 26.1121 1194.7 30.9732 Q1198.71 35.7938 1198.71 45.1919 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1243.43 49.3643 Q1243.43 41.2625 1240.07 36.8065 Q1236.75 32.3505 1230.71 32.3505 Q1224.71 32.3505 1221.35 36.8065 Q1218.03 41.2625 1218.03 49.3643 Q1218.03 57.4256 1221.35 61.8816 Q1224.71 66.3376 1230.71 66.3376 Q1236.75 66.3376 1240.07 61.8816 Q1243.43 57.4256 1243.43 49.3643 M1250.88 66.9452 Q1250.88 78.5308 1245.74 84.1616 Q1240.59 89.8329 1229.98 89.8329 Q1226.05 89.8329 1222.57 89.2252 Q1219.08 88.6581 1215.8 87.4428 L1215.8 80.1917 Q1219.08 81.9741 1222.28 82.8248 Q1225.48 83.6755 1228.81 83.6755 Q1236.14 83.6755 1239.78 79.8271 Q1243.43 76.0193 1243.43 68.282 L1243.43 64.5957 Q1241.12 68.6061 1237.52 70.5911 Q1233.91 72.576 1228.89 72.576 Q1220.54 72.576 1215.44 66.2161 Q1210.33 59.8562 1210.33 49.3643 Q1210.33 38.832 1215.44 32.472 Q1220.54 26.1121 1228.89 26.1121 Q1233.91 26.1121 1237.52 28.0971 Q1241.12 30.082 1243.43 34.0924 L1243.43 27.2059 L1250.88 27.2059 L1250.88 66.9452 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1265.47 54.671 L1265.47 27.2059 L1272.92 27.2059 L1272.92 54.3874 Q1272.92 60.8284 1275.43 64.0691 Q1277.94 67.2693 1282.97 67.2693 Q1289 67.2693 1292.49 63.421 Q1296.01 59.5726 1296.01 52.9291 L1296.01 27.2059 L1303.46 27.2059 L1303.46 72.576 L1296.01 72.576 L1296.01 65.6084 Q1293.3 69.7404 1289.69 71.7658 Q1286.13 73.7508 1281.39 73.7508 Q1273.57 73.7508 1269.52 68.8897 Q1265.47 64.0286 1265.47 54.671 M1284.22 26.1121 L1284.22 26.1121 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1318.82 27.2059 L1326.27 27.2059 L1326.27 72.576 L1318.82 72.576 L1318.82 27.2059 M1318.82 9.54393 L1326.27 9.54393 L1326.27 18.9825 L1318.82 18.9825 L1318.82 9.54393 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1379.58 45.1919 L1379.58 72.576 L1372.13 72.576 L1372.13 45.4349 Q1372.13 38.994 1369.62 35.7938 Q1367.1 32.5936 1362.08 32.5936 Q1356.05 32.5936 1352.56 36.4419 Q1349.08 40.2903 1349.08 46.9338 L1349.08 72.576 L1341.58 72.576 L1341.58 27.2059 L1349.08 27.2059 L1349.08 34.2544 Q1351.75 30.163 1355.36 28.1376 Q1359 26.1121 1363.74 26.1121 Q1371.56 26.1121 1375.57 30.9732 Q1379.58 35.7938 1379.58 45.1919 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1423.37 28.5427 L1423.37 35.5912 Q1420.21 33.9709 1416.81 33.1607 Q1413.41 32.3505 1409.76 32.3505 Q1404.21 32.3505 1401.42 34.0519 Q1398.66 35.7533 1398.66 39.156 Q1398.66 41.7486 1400.65 43.2475 Q1402.63 44.7058 1408.63 46.0426 L1411.18 46.6097 Q1419.12 48.3111 1422.44 51.4303 Q1425.8 54.509 1425.8 60.0587 Q1425.8 66.3781 1420.78 70.0644 Q1415.8 73.7508 1407.05 73.7508 Q1403.4 73.7508 1399.43 73.0216 Q1395.5 72.3329 1391.13 70.9151 L1391.13 63.2184 Q1395.26 65.3654 1399.27 66.4591 Q1403.28 67.5124 1407.21 67.5124 Q1412.47 67.5124 1415.31 65.73 Q1418.15 63.9071 1418.15 60.6258 Q1418.15 57.5877 1416.08 55.9673 Q1414.05 54.3469 1407.13 52.8481 L1404.53 52.2405 Q1397.61 50.7821 1394.53 47.7845 Q1391.45 44.7463 1391.45 39.4801 Q1391.45 33.0797 1395.99 29.5959 Q1400.52 26.1121 1408.87 26.1121 Q1413 26.1121 1416.65 26.7198 Q1420.29 27.3274 1423.37 28.5427 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip212)" cx="687.863" cy="710.513" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="711.589" cy="947.682" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="759.041" cy="838.219" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="545.507" cy="601.05" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="699.726" cy="363.881" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="676" cy="874.707" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="693.795" cy="546.319" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="391.288" cy="819.976" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="859.877" cy="436.856" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="610.754" cy="1002.41" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="610.754" cy="965.926" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="806.493" cy="911.195" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="658.206" cy="254.418" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="420.946" cy="272.662" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="539.576" cy="874.707" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="664.137" cy="655.781" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="889.534" cy="345.637" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="409.083" cy="765.244" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1097.14" cy="199.686" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="610.754" cy="783.488" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="604.822" cy="710.513" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="498.055" cy="619.294" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="634.48" cy="819.976" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="670.069" cy="984.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="462.466" cy="674.025" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="776.836" cy="728.757" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="770.904" cy="856.463" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="616.685" cy="728.757" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="770.904" cy="674.025" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="711.589" cy="1075.39" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="575.165" cy="819.976" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="711.589" cy="874.707" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="794.63" cy="674.025" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="527.713" cy="1020.66" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="693.795" cy="272.662" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="670.069" cy="473.343" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="871.74" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="598.891" cy="601.05" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="729.384" cy="637.538" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="533.644" cy="838.219" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="788.699" cy="765.244" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="503.987" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="984.438" cy="528.075" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="563.302" cy="1038.9" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="717.521" cy="692.269" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="806.493" cy="655.781" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="592.959" cy="674.025" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="503.987" cy="856.463" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="877.671" cy="254.418" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="717.521" cy="892.951" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="747.178" cy="674.025" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="444.672" cy="856.463" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="859.877" cy="564.562" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="415.014" cy="819.976" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="824.288" cy="728.757" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="681.932" cy="929.438" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="776.836" cy="692.269" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="533.644" cy="1093.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="598.891" cy="637.538" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="486.192" cy="1038.9" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="818.356" cy="272.662" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="598.891" cy="1020.66" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="806.493" cy="801.732" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="527.713" cy="1002.41" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="836.151" cy="838.219" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="474.329" cy="1166.61" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="806.493" cy="637.538" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="498.055" cy="1093.63" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="848.014" cy="582.806" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="355.699" cy="655.781" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="723.452" cy="765.244" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="717.521" cy="984.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1085.27" cy="674.025" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="474.329" cy="929.438" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="907.329" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="794.63" cy="1057.14" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="575.165" cy="582.806" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="515.85" cy="1184.85" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="865.808" cy="637.538" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="420.946" cy="984.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="913.26" cy="911.195" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="545.507" cy="692.269" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="450.603" cy="582.806" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="581.096" cy="874.707" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="818.356" cy="418.612" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="521.781" cy="564.562" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="557.37" cy="728.757" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="640.411" cy="619.294" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="676" cy="692.269" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="486.192" cy="838.219" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="806.493" cy="819.976" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="385.357" cy="1002.41" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="717.521" cy="819.976" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="515.85" cy="965.926" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="788.699" cy="674.025" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="628.548" cy="728.757" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="759.041" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="331.973" cy="1184.85" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="931.055" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="444.672" cy="856.463" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="800.562" cy="473.343" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="604.822" cy="1203.1" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="610.754" cy="473.343" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="616.685" cy="728.757" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="723.452" cy="674.025" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="658.206" cy="984.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="634.48" cy="473.343" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="628.548" cy="1020.66" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="931.055" cy="655.781" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="628.548" cy="1111.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1073.41" cy="418.612" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="723.452" cy="892.951" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="871.74" cy="564.562" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="717.521" cy="345.637" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="901.397" cy="783.488" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="658.206" cy="1020.66" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="581.096" cy="382.124" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="486.192" cy="1020.66" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="806.493" cy="728.757" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="515.85" cy="984.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="604.822" cy="509.831" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="753.11" cy="1020.66" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="824.288" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="456.535" cy="1221.34" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="776.836" cy="655.781" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="670.069" cy="911.195" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="830.219" cy="783.488" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="681.932" cy="1002.41" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="984.438" cy="838.219" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="652.274" cy="856.463" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="925.123" cy="619.294" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="551.439" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="592.959" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="628.548" cy="911.195" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="806.493" cy="929.438" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="480.261" cy="929.438" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="753.11" cy="455.1" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="563.302" cy="1111.88" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="723.452" cy="856.463" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="753.11" cy="1002.41" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="776.836" cy="984.17" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="272.658" cy="1294.31" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="782.767" cy="1020.66" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="581.096" cy="1057.14" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="681.932" cy="710.513" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="693.795" cy="728.757" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="539.576" cy="765.244" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="503.987" cy="874.707" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="610.754" cy="819.976" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="503.987" cy="1002.41" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="830.219" cy="747" r="14.4" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1126.79" cy="856.463" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1334.4" cy="564.562" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1411.51" cy="619.294" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1061.55" cy="710.513" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1494.55" cy="509.831" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1049.68" cy="874.707" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1103.07" cy="801.732" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1411.51" cy="801.732" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1097.14" cy="674.025" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1411.51" cy="491.587" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1132.73" cy="874.707" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1435.23" cy="418.612" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1156.45" cy="965.926" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1453.03" cy="819.976" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1091.21" cy="1002.41" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1364.05" cy="546.319" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1352.19" cy="473.343" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1808.92" cy="874.707" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1120.86" cy="728.757" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1286.94" cy="801.732" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="883.603" cy="965.926" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1245.42" cy="929.438" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="931.055" cy="1093.63" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1369.99" cy="582.806" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1138.66" cy="856.463" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1453.03" cy="655.781" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1364.05" cy="765.244" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1304.74" cy="655.781" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1120.86" cy="874.707" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1500.48" cy="473.343" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="794.63" cy="1093.63" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1583.52" cy="327.393" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="889.534" cy="1075.39" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1393.71" cy="692.269" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1316.6" cy="728.757" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1186.11" cy="1057.14" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1192.04" cy="783.488" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1453.03" cy="345.637" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1150.52" cy="1093.63" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1542" cy="491.587" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1275.08" cy="564.562" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1109" cy="929.438" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1387.78" cy="637.538" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1067.48" cy="1020.66" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1387.78" cy="856.463" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1381.85" cy="747" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1340.33" cy="856.463" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1275.08" cy="546.319" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1423.37" cy="710.513" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1322.53" cy="965.926" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1221.7" cy="1130.12" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1417.44" cy="655.781" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1079.34" cy="965.926" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1375.92" cy="528.075" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="889.534" cy="965.926" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1464.89" cy="692.269" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1049.68" cy="1093.63" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1292.88" cy="491.587" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1346.26" cy="692.269" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1073.41" cy="582.806" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1447.1" cy="564.562" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1144.59" cy="1111.88" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1079.34" cy="1020.66" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1678.42" cy="509.831" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="948.849" cy="819.976" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1310.67" cy="801.732" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1381.85" cy="655.781" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1346.26" cy="710.513" r="14.4" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1103.07" cy="1713.92" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1334.4" cy="1148.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1257.29" cy="1549.73" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1334.4" cy="1349.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1192.04" cy="1476.75" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1126.79" cy="1659.19" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1061.55" cy="1458.51" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1138.66" cy="1330.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="936.986" cy="1677.43" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1144.59" cy="1312.56" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="794.63" cy="1622.7" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1275.08" cy="1184.85" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1067.48" cy="1622.7" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1239.49" cy="1458.51" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1085.27" cy="1458.51" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1292.88" cy="1257.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="859.877" cy="1659.19" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1286.94" cy="1349.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1109" cy="1476.75" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1257.29" cy="1367.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1346.26" cy="1513.24" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1043.75" cy="1476.75" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1126.79" cy="1476.75" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1114.93" cy="1239.58" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="913.26" cy="1732.17" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1103.07" cy="1367.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1008.16" cy="1513.24" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1203.9" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1227.63" cy="1513.24" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1334.4" cy="1330.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1174.25" cy="1330.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="907.329" cy="1531.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1043.75" cy="1476.75" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1903.82" cy="1020.66" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1281.01" cy="1422.02" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1239.49" cy="1148.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="895.466" cy="1622.7" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1002.23" cy="965.926" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="978.507" cy="1640.95" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1257.29" cy="1257.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="901.397" cy="1622.7" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1310.67" cy="1203.1" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1055.62" cy="1622.7" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1310.67" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1364.05" cy="1221.34" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="954.781" cy="1586.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1067.48" cy="1586.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1364.05" cy="1221.34" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1031.89" cy="1695.68" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1049.68" cy="1239.58" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1132.73" cy="1531.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1245.42" cy="1549.73" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1043.75" cy="1495" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1340.33" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1126.79" cy="1495" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1037.82" cy="1312.56" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="966.644" cy="1586.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1067.48" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="931.055" cy="1476.75" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1358.12" cy="1330.8" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1055.62" cy="1604.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1109" cy="1403.78" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1079.34" cy="1586.22" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1589.45" cy="1257.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1085.27" cy="1531.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1322.53" cy="1057.14" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1109" cy="1495" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1304.74" cy="1166.61" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="948.849" cy="1531.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1375.92" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1197.97" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1120.86" cy="1276.07" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1227.63" cy="1276.07" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1126.79" cy="1422.02" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1120.86" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1251.36" cy="1203.1" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1186.11" cy="1531.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1399.64" cy="1148.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1049.68" cy="1604.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1049.68" cy="1130.12" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1281.01" cy="1476.75" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1482.68" cy="1276.07" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1180.18" cy="1458.51" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1334.4" cy="1221.34" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1031.89" cy="1604.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1381.85" cy="965.926" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="942.918" cy="1495" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1411.51" cy="1531.48" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1186.11" cy="1567.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1458.96" cy="1020.66" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1186.11" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1464.89" cy="1002.41" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1067.48" cy="1476.75" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1304.74" cy="1184.85" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1008.16" cy="1440.26" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1381.85" cy="1257.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1298.81" cy="1239.58" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1150.52" cy="1458.51" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1239.49" cy="1495" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1399.64" cy="1111.88" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1245.42" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1684.36" cy="1020.66" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1168.31" cy="1294.31" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1281.01" cy="1385.53" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1174.25" cy="1604.46" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1144.59" cy="1184.85" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="842.082" cy="1440.26" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1536.07" cy="1239.58" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="936.986" cy="1567.97" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1221.7" cy="1367.29" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1364.05" cy="1349.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1322.53" cy="1221.34" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="948.849" cy="1349.05" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1423.37" cy="1148.36" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1109" cy="1549.73" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1636.9" cy="1203.1" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1008.16" cy="1257.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1263.22" cy="1166.61" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1168.31" cy="1622.7" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1144.59" cy="1513.24" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1358.12" cy="1257.83" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1049.68" cy="1422.02" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<circle clip-path="url(#clip212)" cx="1328.47" cy="1184.85" r="14.4" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="4"></circle>
<path clip-path="url(#clip210)" d="M1499.19 1723.99 L1895.12 1723.99 L1895.12 1516.63 L1499.19 1516.63  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip210)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1499.19,1723.99 1895.12,1723.99 1895.12,1516.63 1499.19,1516.63 1499.19,1723.99 "></polyline>
<circle clip-path="url(#clip210)" cx="1576.03" cy="1568.47" r="20.48" fill="#009af9" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.68889"></circle>
<path clip-path="url(#clip210)" d="M1668.71 1555.8 L1662.37 1573 L1675.08 1573 L1668.71 1555.8 M1666.07 1551.19 L1671.37 1551.19 L1684.55 1585.75 L1679.68 1585.75 L1676.54 1576.89 L1660.96 1576.89 L1657.81 1585.75 L1652.88 1585.75 L1666.07 1551.19 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1705.63 1563.76 L1705.63 1549.73 L1709.89 1549.73 L1709.89 1585.75 L1705.63 1585.75 L1705.63 1581.86 Q1704.29 1584.18 1702.23 1585.31 Q1700.19 1586.42 1697.32 1586.42 Q1692.62 1586.42 1689.66 1582.67 Q1686.72 1578.92 1686.72 1572.81 Q1686.72 1566.7 1689.66 1562.95 Q1692.62 1559.2 1697.32 1559.2 Q1700.19 1559.2 1702.23 1560.34 Q1704.29 1561.45 1705.63 1563.76 M1691.12 1572.81 Q1691.12 1577.51 1693.04 1580.2 Q1694.99 1582.86 1698.36 1582.86 Q1701.74 1582.86 1703.69 1580.2 Q1705.63 1577.51 1705.63 1572.81 Q1705.63 1568.11 1703.69 1565.45 Q1701.74 1562.77 1698.36 1562.77 Q1694.99 1562.77 1693.04 1565.45 Q1691.12 1568.11 1691.12 1572.81 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1740.84 1571.72 L1740.84 1573.81 L1721.26 1573.81 Q1721.54 1578.21 1723.9 1580.52 Q1726.28 1582.81 1730.52 1582.81 Q1732.97 1582.81 1735.26 1582.21 Q1737.58 1581.61 1739.85 1580.41 L1739.85 1584.43 Q1737.55 1585.41 1735.15 1585.91 Q1732.74 1586.42 1730.26 1586.42 Q1724.06 1586.42 1720.42 1582.81 Q1716.81 1579.2 1716.81 1573.04 Q1716.81 1566.68 1720.24 1562.95 Q1723.69 1559.2 1729.52 1559.2 Q1734.75 1559.2 1737.79 1562.58 Q1740.84 1565.94 1740.84 1571.72 M1736.58 1570.47 Q1736.54 1566.98 1734.61 1564.9 Q1732.72 1562.81 1729.57 1562.81 Q1726 1562.81 1723.85 1564.83 Q1721.72 1566.84 1721.4 1570.5 L1736.58 1570.47 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1747.83 1549.73 L1752.09 1549.73 L1752.09 1585.75 L1747.83 1585.75 L1747.83 1549.73 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1761 1559.83 L1765.26 1559.83 L1765.26 1585.75 L1761 1585.75 L1761 1559.83 M1761 1549.73 L1765.26 1549.73 L1765.26 1555.13 L1761 1555.13 L1761 1549.73 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1796.35 1571.72 L1796.35 1573.81 L1776.77 1573.81 Q1777.04 1578.21 1779.41 1580.52 Q1781.79 1582.81 1786.03 1582.81 Q1788.48 1582.81 1790.77 1582.21 Q1793.09 1581.61 1795.35 1580.41 L1795.35 1584.43 Q1793.06 1585.41 1790.66 1585.91 Q1788.25 1586.42 1785.77 1586.42 Q1779.57 1586.42 1775.93 1582.81 Q1772.32 1579.2 1772.32 1573.04 Q1772.32 1566.68 1775.75 1562.95 Q1779.2 1559.2 1785.03 1559.2 Q1790.26 1559.2 1793.29 1562.58 Q1796.35 1565.94 1796.35 1571.72 M1792.09 1570.47 Q1792.04 1566.98 1790.12 1564.9 Q1788.23 1562.81 1785.08 1562.81 Q1781.51 1562.81 1779.36 1564.83 Q1777.23 1566.84 1776.91 1570.5 L1792.09 1570.47 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip210)" cx="1576.03" cy="1620.31" r="20.48" fill="#e26f46" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.68889"></circle>
<path clip-path="url(#clip210)" d="M1680.75 1605.69 L1680.75 1610.62 Q1678.39 1608.43 1675.7 1607.34 Q1673.04 1606.25 1670.03 1606.25 Q1664.11 1606.25 1660.96 1609.88 Q1657.81 1613.5 1657.81 1620.35 Q1657.81 1627.18 1660.96 1630.81 Q1664.11 1634.42 1670.03 1634.42 Q1673.04 1634.42 1675.7 1633.33 Q1678.39 1632.25 1680.75 1630.05 L1680.75 1634.93 Q1678.3 1636.6 1675.54 1637.43 Q1672.81 1638.26 1669.75 1638.26 Q1661.91 1638.26 1657.39 1633.47 Q1652.88 1628.66 1652.88 1620.35 Q1652.88 1612.01 1657.39 1607.22 Q1661.91 1602.41 1669.75 1602.41 Q1672.86 1602.41 1675.59 1603.24 Q1678.34 1604.05 1680.75 1605.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1709.34 1621.94 L1709.34 1637.59 L1705.08 1637.59 L1705.08 1622.08 Q1705.08 1618.4 1703.64 1616.57 Q1702.21 1614.75 1699.34 1614.75 Q1695.89 1614.75 1693.9 1616.94 Q1691.91 1619.14 1691.91 1622.94 L1691.91 1637.59 L1687.62 1637.59 L1687.62 1601.57 L1691.91 1601.57 L1691.91 1615.69 Q1693.43 1613.36 1695.49 1612.2 Q1697.58 1611.04 1700.29 1611.04 Q1704.75 1611.04 1707.05 1613.82 Q1709.34 1616.57 1709.34 1621.94 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1717.83 1611.67 L1722.09 1611.67 L1722.09 1637.59 L1717.83 1637.59 L1717.83 1611.67 M1717.83 1601.57 L1722.09 1601.57 L1722.09 1606.97 L1717.83 1606.97 L1717.83 1601.57 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1752.55 1621.94 L1752.55 1637.59 L1748.29 1637.59 L1748.29 1622.08 Q1748.29 1618.4 1746.86 1616.57 Q1745.42 1614.75 1742.55 1614.75 Q1739.11 1614.75 1737.11 1616.94 Q1735.12 1619.14 1735.12 1622.94 L1735.12 1637.59 L1730.84 1637.59 L1730.84 1611.67 L1735.12 1611.67 L1735.12 1615.69 Q1736.65 1613.36 1738.71 1612.2 Q1740.8 1611.04 1743.5 1611.04 Q1747.97 1611.04 1750.26 1613.82 Q1752.55 1616.57 1752.55 1621.94 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1777.58 1612.43 L1777.58 1616.46 Q1775.77 1615.53 1773.83 1615.07 Q1771.88 1614.61 1769.8 1614.61 Q1766.63 1614.61 1765.03 1615.58 Q1763.46 1616.55 1763.46 1618.5 Q1763.46 1619.98 1764.59 1620.83 Q1765.73 1621.67 1769.15 1622.43 L1770.61 1622.75 Q1775.15 1623.73 1777.04 1625.51 Q1778.97 1627.27 1778.97 1630.44 Q1778.97 1634.05 1776.1 1636.16 Q1773.25 1638.26 1768.25 1638.26 Q1766.17 1638.26 1763.9 1637.85 Q1761.65 1637.45 1759.15 1636.64 L1759.15 1632.25 Q1761.51 1633.47 1763.8 1634.1 Q1766.1 1634.7 1768.34 1634.7 Q1771.35 1634.7 1772.97 1633.68 Q1774.59 1632.64 1774.59 1630.76 Q1774.59 1629.03 1773.41 1628.1 Q1772.25 1627.18 1768.29 1626.32 L1766.81 1625.97 Q1762.86 1625.14 1761.1 1623.43 Q1759.34 1621.69 1759.34 1618.68 Q1759.34 1615.02 1761.93 1613.03 Q1764.52 1611.04 1769.29 1611.04 Q1771.65 1611.04 1773.73 1611.39 Q1775.82 1611.74 1777.58 1612.43 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1789.96 1604.31 L1789.96 1611.67 L1798.73 1611.67 L1798.73 1614.98 L1789.96 1614.98 L1789.96 1629.05 Q1789.96 1632.22 1790.82 1633.12 Q1791.7 1634.03 1794.36 1634.03 L1798.73 1634.03 L1798.73 1637.59 L1794.36 1637.59 Q1789.43 1637.59 1787.55 1635.76 Q1785.68 1633.91 1785.68 1629.05 L1785.68 1614.98 L1782.55 1614.98 L1782.55 1611.67 L1785.68 1611.67 L1785.68 1604.31 L1789.96 1604.31 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1819.36 1615.65 Q1818.64 1615.23 1817.79 1615.05 Q1816.95 1614.84 1815.93 1614.84 Q1812.32 1614.84 1810.38 1617.2 Q1808.46 1619.54 1808.46 1623.93 L1808.46 1637.59 L1804.17 1637.59 L1804.17 1611.67 L1808.46 1611.67 L1808.46 1615.69 Q1809.8 1613.33 1811.95 1612.2 Q1814.1 1611.04 1817.18 1611.04 Q1817.62 1611.04 1818.16 1611.11 Q1818.69 1611.16 1819.34 1611.27 L1819.36 1615.65 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1835.61 1624.56 Q1830.45 1624.56 1828.46 1625.74 Q1826.47 1626.92 1826.47 1629.77 Q1826.47 1632.04 1827.95 1633.38 Q1829.45 1634.7 1832.02 1634.7 Q1835.56 1634.7 1837.69 1632.2 Q1839.85 1629.68 1839.85 1625.51 L1839.85 1624.56 L1835.61 1624.56 M1844.1 1622.8 L1844.1 1637.59 L1839.85 1637.59 L1839.85 1633.66 Q1838.39 1636.02 1836.21 1637.15 Q1834.04 1638.26 1830.89 1638.26 Q1826.91 1638.26 1824.54 1636.04 Q1822.21 1633.8 1822.21 1630.05 Q1822.21 1625.67 1825.12 1623.45 Q1828.06 1621.23 1833.87 1621.23 L1839.85 1621.23 L1839.85 1620.81 Q1839.85 1617.87 1837.9 1616.27 Q1835.98 1614.65 1832.48 1614.65 Q1830.26 1614.65 1828.16 1615.18 Q1826.05 1615.72 1824.1 1616.78 L1824.1 1612.85 Q1826.44 1611.94 1828.64 1611.5 Q1830.84 1611.04 1832.92 1611.04 Q1838.55 1611.04 1841.33 1613.96 Q1844.1 1616.87 1844.1 1622.8 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1857 1633.7 L1857 1647.45 L1852.72 1647.45 L1852.72 1611.67 L1857 1611.67 L1857 1615.6 Q1858.34 1613.29 1860.38 1612.18 Q1862.44 1611.04 1865.29 1611.04 Q1870.01 1611.04 1872.95 1614.79 Q1875.91 1618.54 1875.91 1624.65 Q1875.91 1630.76 1872.95 1634.51 Q1870.01 1638.26 1865.29 1638.26 Q1862.44 1638.26 1860.38 1637.15 Q1858.34 1636.02 1857 1633.7 M1871.49 1624.65 Q1871.49 1619.95 1869.54 1617.29 Q1867.62 1614.61 1864.24 1614.61 Q1860.86 1614.61 1858.92 1617.29 Q1857 1619.95 1857 1624.65 Q1857 1629.35 1858.92 1632.04 Q1860.86 1634.7 1864.24 1634.7 Q1867.62 1634.7 1869.54 1632.04 Q1871.49 1629.35 1871.49 1624.65 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><circle clip-path="url(#clip210)" cx="1576.03" cy="1672.15" r="20.48" fill="#3da44d" fill-rule="evenodd" fill-opacity="1" stroke="#000000" stroke-opacity="1" stroke-width="5.68889"></circle>
<path clip-path="url(#clip210)" d="M1678.43 1684.5 L1678.43 1675.22 L1670.8 1675.22 L1670.8 1671.38 L1683.06 1671.38 L1683.06 1686.21 Q1680.36 1688.14 1677.09 1689.13 Q1673.83 1690.1 1670.12 1690.1 Q1662.02 1690.1 1657.44 1685.38 Q1652.88 1680.64 1652.88 1672.19 Q1652.88 1663.71 1657.44 1658.99 Q1662.02 1654.25 1670.12 1654.25 Q1673.5 1654.25 1676.54 1655.08 Q1679.59 1655.91 1682.16 1657.53 L1682.16 1662.51 Q1679.57 1660.31 1676.65 1659.2 Q1673.74 1658.09 1670.52 1658.09 Q1664.18 1658.09 1660.98 1661.63 Q1657.81 1665.17 1657.81 1672.19 Q1657.81 1679.18 1660.98 1682.72 Q1664.18 1686.26 1670.52 1686.26 Q1672.99 1686.26 1674.94 1685.84 Q1676.88 1685.4 1678.43 1684.5 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1713.6 1675.4 L1713.6 1677.49 L1694.01 1677.49 Q1694.29 1681.89 1696.65 1684.2 Q1699.04 1686.49 1703.27 1686.49 Q1705.73 1686.49 1708.02 1685.89 Q1710.33 1685.29 1712.6 1684.09 L1712.6 1688.11 Q1710.31 1689.09 1707.9 1689.59 Q1705.49 1690.1 1703.02 1690.1 Q1696.81 1690.1 1693.18 1686.49 Q1689.57 1682.88 1689.57 1676.72 Q1689.57 1670.36 1692.99 1666.63 Q1696.44 1662.88 1702.28 1662.88 Q1707.51 1662.88 1710.54 1666.26 Q1713.6 1669.62 1713.6 1675.4 M1709.34 1674.15 Q1709.29 1670.66 1707.37 1668.58 Q1705.47 1666.49 1702.32 1666.49 Q1698.76 1666.49 1696.61 1668.51 Q1694.48 1670.52 1694.15 1674.18 L1709.34 1674.15 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1742.14 1673.78 L1742.14 1689.43 L1737.88 1689.43 L1737.88 1673.92 Q1737.88 1670.24 1736.44 1668.41 Q1735.01 1666.59 1732.14 1666.59 Q1728.69 1666.59 1726.7 1668.78 Q1724.71 1670.98 1724.71 1674.78 L1724.71 1689.43 L1720.42 1689.43 L1720.42 1663.51 L1724.71 1663.51 L1724.71 1667.53 Q1726.23 1665.2 1728.3 1664.04 Q1730.38 1662.88 1733.09 1662.88 Q1737.55 1662.88 1739.85 1665.66 Q1742.14 1668.41 1742.14 1673.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1754.85 1656.15 L1754.85 1663.51 L1763.62 1663.51 L1763.62 1666.82 L1754.85 1666.82 L1754.85 1680.89 Q1754.85 1684.06 1755.7 1684.96 Q1756.58 1685.87 1759.24 1685.87 L1763.62 1685.87 L1763.62 1689.43 L1759.24 1689.43 Q1754.31 1689.43 1752.44 1687.6 Q1750.56 1685.75 1750.56 1680.89 L1750.56 1666.82 L1747.44 1666.82 L1747.44 1663.51 L1750.56 1663.51 L1750.56 1656.15 L1754.85 1656.15 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1779.27 1666.49 Q1775.84 1666.49 1773.85 1669.18 Q1771.86 1671.84 1771.86 1676.49 Q1771.86 1681.15 1773.83 1683.83 Q1775.82 1686.49 1779.27 1686.49 Q1782.67 1686.49 1784.66 1683.81 Q1786.65 1681.12 1786.65 1676.49 Q1786.65 1671.89 1784.66 1669.2 Q1782.67 1666.49 1779.27 1666.49 M1779.27 1662.88 Q1784.82 1662.88 1787.99 1666.49 Q1791.17 1670.1 1791.17 1676.49 Q1791.17 1682.86 1787.99 1686.49 Q1784.82 1690.1 1779.27 1690.1 Q1773.69 1690.1 1770.52 1686.49 Q1767.37 1682.86 1767.37 1676.49 Q1767.37 1670.1 1770.52 1666.49 Q1773.69 1662.88 1779.27 1662.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip210)" d="M1808.27 1666.49 Q1804.85 1666.49 1802.85 1669.18 Q1800.86 1671.84 1800.86 1676.49 Q1800.86 1681.15 1802.83 1683.83 Q1804.82 1686.49 1808.27 1686.49 Q1811.67 1686.49 1813.66 1683.81 Q1815.66 1681.12 1815.66 1676.49 Q1815.66 1671.89 1813.66 1669.2 Q1811.67 1666.49 1808.27 1666.49 M1808.27 1662.88 Q1813.83 1662.88 1817 1666.49 Q1820.17 1670.1 1820.17 1676.49 Q1820.17 1682.86 1817 1686.49 Q1813.83 1690.1 1808.27 1690.1 Q1802.69 1690.1 1799.52 1686.49 Q1796.37 1682.86 1796.37 1676.49 Q1796.37 1670.1 1799.52 1666.49 Q1802.69 1662.88 1808.27 1662.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path></svg>
</div>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-03_julia-plots/day-of-the-triffids.jpg" class="img-fluid figure-img" alt="Cover of 'The Day of the Triffids'"></p>
<figcaption>The Day of the Triffids. Well, it’s more optimistic than Handmaids Tale I guess</figcaption>
</figure>
</div>
</div></div></section>
<section id="macros" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="macros">Macros</h2>
<p>Siiiiiiigh. Okay, I used a macro. Better take a quick look at how the hell those work, right?</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-03_julia-plots/earthsea.jpg" class="img-fluid figure-img" alt="Cover of 'Earthsea: The First Four Books'"></p>
<figcaption>The Earthsea Quartet. Much better!</figcaption>
</figure>
</div>
</div></div></section>
<section id="violin-plots" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="violin-plots">Violin plots</h2>
<p>Filter rows that have missing bill lengths, because violin series can’t handle missing values. Then we can create a violin plot</p>
<div id="48aad171" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb6-1">bill_lengths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> penguins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb6-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> .!<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ismissing</span>.(b)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>species, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm])</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@df</span> bill_lengths <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(</span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">string</span>.(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>species),</span>
<span id="cb6-7">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>bill_length_mm,</span>
<span id="cb6-8">  seriestype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>violin,</span>
<span id="cb6-9">  legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb6-10">  xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>,</span>
<span id="cb6-11">  ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bill Length (mm)"</span>,</span>
<span id="cb6-12">  size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb6-13">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<!--?xml version="1.0" encoding="utf-8"?-->
<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" width="500" height="500" viewbox="0 0 2000 2000">
<defs>
  <clippath id="clip300">
    <rect x="0" y="0" width="2000" height="2000"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip300)" d="M0 2000 L2000 2000 L2000 0 L0 0  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip301">
    <rect x="400" y="200" width="1401" height="1401"></rect>
  </clippath>
</defs>
<path clip-path="url(#clip300)" d="M224.881 1778.14 L1952.76 1778.14 L1952.76 47.2441 L224.881 47.2441  Z" fill="#ffffff" fill-rule="evenodd" fill-opacity="1"></path>
<defs>
  <clippath id="clip302">
    <rect x="224" y="47" width="1729" height="1732"></rect>
  </clippath>
</defs>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="506.65,1778.14 506.65,47.2441 "></polyline>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1088.82,1778.14 1088.82,47.2441 "></polyline>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="1670.99,1778.14 1670.99,47.2441 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="224.881,1778.14 1952.76,1778.14 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="506.65,1778.14 506.65,1759.24 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1088.82,1778.14 1088.82,1759.24 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1670.99,1778.14 1670.99,1759.24 "></polyline>
<path clip-path="url(#clip300)" d="M450.748 1807.39 L444.405 1824.59 L457.114 1824.59 L450.748 1807.39 M448.109 1802.78 L453.41 1802.78 L466.581 1837.34 L461.72 1837.34 L458.572 1828.47 L442.993 1828.47 L439.845 1837.34 L434.915 1837.34 L448.109 1802.78 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M487.669 1815.35 L487.669 1801.32 L491.928 1801.32 L491.928 1837.34 L487.669 1837.34 L487.669 1833.45 Q486.326 1835.77 484.266 1836.9 Q482.229 1838.01 479.359 1838.01 Q474.66 1838.01 471.697 1834.26 Q468.757 1830.51 468.757 1824.4 Q468.757 1818.29 471.697 1814.54 Q474.66 1810.79 479.359 1810.79 Q482.229 1810.79 484.266 1811.92 Q486.326 1813.03 487.669 1815.35 M473.155 1824.4 Q473.155 1829.1 475.076 1831.78 Q477.021 1834.45 480.4 1834.45 Q483.78 1834.45 485.725 1831.78 Q487.669 1829.1 487.669 1824.4 Q487.669 1819.7 485.725 1817.04 Q483.78 1814.35 480.4 1814.35 Q477.021 1814.35 475.076 1817.04 Q473.155 1819.7 473.155 1824.4 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M522.877 1823.31 L522.877 1825.4 L503.294 1825.4 Q503.572 1829.79 505.933 1832.11 Q508.317 1834.4 512.553 1834.4 Q515.007 1834.4 517.298 1833.8 Q519.613 1833.2 521.882 1831.99 L521.882 1836.02 Q519.59 1836.99 517.183 1837.5 Q514.775 1838.01 512.298 1838.01 Q506.095 1838.01 502.461 1834.4 Q498.849 1830.79 498.849 1824.63 Q498.849 1818.27 502.275 1814.54 Q505.724 1810.79 511.558 1810.79 Q516.789 1810.79 519.822 1814.17 Q522.877 1817.53 522.877 1823.31 M518.618 1822.06 Q518.572 1818.57 516.65 1816.48 Q514.752 1814.4 511.604 1814.4 Q508.039 1814.4 505.886 1816.41 Q503.757 1818.43 503.433 1822.09 L518.618 1822.06 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M529.868 1801.32 L534.127 1801.32 L534.127 1837.34 L529.868 1837.34 L529.868 1801.32 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M543.039 1811.41 L547.298 1811.41 L547.298 1837.34 L543.039 1837.34 L543.039 1811.41 M543.039 1801.32 L547.298 1801.32 L547.298 1806.72 L543.039 1806.72 L543.039 1801.32 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M578.386 1823.31 L578.386 1825.4 L558.803 1825.4 Q559.081 1829.79 561.442 1832.11 Q563.826 1834.4 568.062 1834.4 Q570.516 1834.4 572.807 1833.8 Q575.122 1833.2 577.391 1831.99 L577.391 1836.02 Q575.099 1836.99 572.692 1837.5 Q570.284 1838.01 567.807 1838.01 Q561.604 1838.01 557.97 1834.4 Q554.358 1830.79 554.358 1824.63 Q554.358 1818.27 557.784 1814.54 Q561.233 1810.79 567.067 1810.79 Q572.298 1810.79 575.331 1814.17 Q578.386 1817.53 578.386 1823.31 M574.127 1822.06 Q574.081 1818.57 572.159 1816.48 Q570.261 1814.4 567.113 1814.4 Q563.548 1814.4 561.395 1816.41 Q559.266 1818.43 558.942 1822.09 L574.127 1822.06 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1005.17 1805.44 L1005.17 1810.37 Q1002.81 1808.17 1000.13 1807.09 Q997.465 1806 994.456 1806 Q988.53 1806 985.381 1809.63 Q982.233 1813.24 982.233 1820.09 Q982.233 1826.92 985.381 1830.56 Q988.53 1834.17 994.456 1834.17 Q997.465 1834.17 1000.13 1833.08 Q1002.81 1831.99 1005.17 1829.79 L1005.17 1834.68 Q1002.72 1836.34 999.965 1837.18 Q997.233 1838.01 994.178 1838.01 Q986.331 1838.01 981.817 1833.22 Q977.303 1828.4 977.303 1820.09 Q977.303 1811.76 981.817 1806.97 Q986.331 1802.15 994.178 1802.15 Q997.28 1802.15 1000.01 1802.99 Q1002.77 1803.8 1005.17 1805.44 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1033.76 1821.69 L1033.76 1837.34 L1029.5 1837.34 L1029.5 1821.83 Q1029.5 1818.15 1028.07 1816.32 Q1026.63 1814.49 1023.76 1814.49 Q1020.31 1814.49 1018.32 1816.69 Q1016.33 1818.89 1016.33 1822.69 L1016.33 1837.34 L1012.05 1837.34 L1012.05 1801.32 L1016.33 1801.32 L1016.33 1815.44 Q1017.86 1813.1 1019.92 1811.95 Q1022 1810.79 1024.71 1810.79 Q1029.18 1810.79 1031.47 1813.57 Q1033.76 1816.32 1033.76 1821.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1042.26 1811.41 L1046.52 1811.41 L1046.52 1837.34 L1042.26 1837.34 L1042.26 1811.41 M1042.26 1801.32 L1046.52 1801.32 L1046.52 1806.72 L1042.26 1806.72 L1042.26 1801.32 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1076.98 1821.69 L1076.98 1837.34 L1072.72 1837.34 L1072.72 1821.83 Q1072.72 1818.15 1071.28 1816.32 Q1069.85 1814.49 1066.98 1814.49 Q1063.53 1814.49 1061.54 1816.69 Q1059.55 1818.89 1059.55 1822.69 L1059.55 1837.34 L1055.27 1837.34 L1055.27 1811.41 L1059.55 1811.41 L1059.55 1815.44 Q1061.08 1813.1 1063.14 1811.95 Q1065.22 1810.79 1067.93 1810.79 Q1072.39 1810.79 1074.69 1813.57 Q1076.98 1816.32 1076.98 1821.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1102 1812.18 L1102 1816.21 Q1100.2 1815.28 1098.25 1814.82 Q1096.31 1814.35 1094.22 1814.35 Q1091.05 1814.35 1089.46 1815.33 Q1087.88 1816.3 1087.88 1818.24 Q1087.88 1819.72 1089.02 1820.58 Q1090.15 1821.41 1093.58 1822.18 L1095.03 1822.5 Q1099.57 1823.47 1101.47 1825.26 Q1103.39 1827.02 1103.39 1830.19 Q1103.39 1833.8 1100.52 1835.9 Q1097.67 1838.01 1092.67 1838.01 Q1090.59 1838.01 1088.32 1837.59 Q1086.08 1837.2 1083.58 1836.39 L1083.58 1831.99 Q1085.94 1833.22 1088.23 1833.84 Q1090.52 1834.45 1092.77 1834.45 Q1095.77 1834.45 1097.39 1833.43 Q1099.02 1832.39 1099.02 1830.51 Q1099.02 1828.78 1097.83 1827.85 Q1096.68 1826.92 1092.72 1826.07 L1091.24 1825.72 Q1087.28 1824.89 1085.52 1823.17 Q1083.76 1821.44 1083.76 1818.43 Q1083.76 1814.77 1086.35 1812.78 Q1088.95 1810.79 1093.71 1810.79 Q1096.08 1810.79 1098.16 1811.14 Q1100.24 1811.48 1102 1812.18 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1114.39 1804.05 L1114.39 1811.41 L1123.16 1811.41 L1123.16 1814.72 L1114.39 1814.72 L1114.39 1828.8 Q1114.39 1831.97 1115.24 1832.87 Q1116.12 1833.78 1118.78 1833.78 L1123.16 1833.78 L1123.16 1837.34 L1118.78 1837.34 Q1113.85 1837.34 1111.98 1835.51 Q1110.1 1833.66 1110.1 1828.8 L1110.1 1814.72 L1106.98 1814.72 L1106.98 1811.41 L1110.1 1811.41 L1110.1 1804.05 L1114.39 1804.05 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1143.78 1815.4 Q1143.07 1814.98 1142.21 1814.79 Q1141.38 1814.59 1140.36 1814.59 Q1136.75 1814.59 1134.8 1816.95 Q1132.88 1819.28 1132.88 1823.68 L1132.88 1837.34 L1128.6 1837.34 L1128.6 1811.41 L1132.88 1811.41 L1132.88 1815.44 Q1134.22 1813.08 1136.38 1811.95 Q1138.53 1810.79 1141.61 1810.79 Q1142.05 1810.79 1142.58 1810.86 Q1143.11 1810.9 1143.76 1811.02 L1143.78 1815.4 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1160.03 1824.31 Q1154.87 1824.31 1152.88 1825.49 Q1150.89 1826.67 1150.89 1829.52 Q1150.89 1831.78 1152.37 1833.13 Q1153.88 1834.45 1156.45 1834.45 Q1159.99 1834.45 1162.12 1831.95 Q1164.27 1829.42 1164.27 1825.26 L1164.27 1824.31 L1160.03 1824.31 M1168.53 1822.55 L1168.53 1837.34 L1164.27 1837.34 L1164.27 1833.4 Q1162.81 1835.77 1160.64 1836.9 Q1158.46 1838.01 1155.31 1838.01 Q1151.33 1838.01 1148.97 1835.79 Q1146.63 1833.54 1146.63 1829.79 Q1146.63 1825.42 1149.55 1823.2 Q1152.49 1820.97 1158.3 1820.97 L1164.27 1820.97 L1164.27 1820.56 Q1164.27 1817.62 1162.32 1816.02 Q1160.4 1814.4 1156.91 1814.4 Q1154.69 1814.4 1152.58 1814.93 Q1150.47 1815.46 1148.53 1816.53 L1148.53 1812.59 Q1150.87 1811.69 1153.07 1811.25 Q1155.26 1810.79 1157.35 1810.79 Q1162.97 1810.79 1165.75 1813.71 Q1168.53 1816.62 1168.53 1822.55 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1181.42 1833.45 L1181.42 1847.2 L1177.14 1847.2 L1177.14 1811.41 L1181.42 1811.41 L1181.42 1815.35 Q1182.76 1813.03 1184.8 1811.92 Q1186.86 1810.79 1189.71 1810.79 Q1194.43 1810.79 1197.37 1814.54 Q1200.33 1818.29 1200.33 1824.4 Q1200.33 1830.51 1197.37 1834.26 Q1194.43 1838.01 1189.71 1838.01 Q1186.86 1838.01 1184.8 1836.9 Q1182.76 1835.77 1181.42 1833.45 M1195.91 1824.4 Q1195.91 1819.7 1193.97 1817.04 Q1192.05 1814.35 1188.67 1814.35 Q1185.29 1814.35 1183.34 1817.04 Q1181.42 1819.7 1181.42 1824.4 Q1181.42 1829.1 1183.34 1831.78 Q1185.29 1834.45 1188.67 1834.45 Q1192.05 1834.45 1193.97 1831.78 Q1195.91 1829.1 1195.91 1824.4 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1612.9 1832.41 L1612.9 1823.13 L1605.26 1823.13 L1605.26 1819.28 L1617.53 1819.28 L1617.53 1834.12 Q1614.82 1836.04 1611.55 1837.04 Q1608.29 1838.01 1604.59 1838.01 Q1596.48 1838.01 1591.9 1833.29 Q1587.34 1828.54 1587.34 1820.09 Q1587.34 1811.62 1591.9 1806.9 Q1596.48 1802.15 1604.59 1802.15 Q1607.97 1802.15 1611 1802.99 Q1614.05 1803.82 1616.62 1805.44 L1616.62 1810.42 Q1614.03 1808.22 1611.11 1807.11 Q1608.2 1806 1604.98 1806 Q1598.64 1806 1595.44 1809.54 Q1592.27 1813.08 1592.27 1820.09 Q1592.27 1827.09 1595.44 1830.63 Q1598.64 1834.17 1604.98 1834.17 Q1607.46 1834.17 1609.4 1833.75 Q1611.35 1833.31 1612.9 1832.41 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1648.06 1823.31 L1648.06 1825.4 L1628.48 1825.4 Q1628.75 1829.79 1631.11 1832.11 Q1633.5 1834.4 1637.73 1834.4 Q1640.19 1834.4 1642.48 1833.8 Q1644.79 1833.2 1647.06 1831.99 L1647.06 1836.02 Q1644.77 1836.99 1642.36 1837.5 Q1639.96 1838.01 1637.48 1838.01 Q1631.28 1838.01 1627.64 1834.4 Q1624.03 1830.79 1624.03 1824.63 Q1624.03 1818.27 1627.46 1814.54 Q1630.91 1810.79 1636.74 1810.79 Q1641.97 1810.79 1645 1814.17 Q1648.06 1817.53 1648.06 1823.31 M1643.8 1822.06 Q1643.75 1818.57 1641.83 1816.48 Q1639.93 1814.4 1636.79 1814.4 Q1633.22 1814.4 1631.07 1816.41 Q1628.94 1818.43 1628.61 1822.09 L1643.8 1822.06 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1676.6 1821.69 L1676.6 1837.34 L1672.34 1837.34 L1672.34 1821.83 Q1672.34 1818.15 1670.91 1816.32 Q1669.47 1814.49 1666.6 1814.49 Q1663.15 1814.49 1661.16 1816.69 Q1659.17 1818.89 1659.17 1822.69 L1659.17 1837.34 L1654.89 1837.34 L1654.89 1811.41 L1659.17 1811.41 L1659.17 1815.44 Q1660.7 1813.1 1662.76 1811.95 Q1664.84 1810.79 1667.55 1810.79 Q1672.02 1810.79 1674.31 1813.57 Q1676.6 1816.32 1676.6 1821.69 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1689.31 1804.05 L1689.31 1811.41 L1698.08 1811.41 L1698.08 1814.72 L1689.31 1814.72 L1689.31 1828.8 Q1689.31 1831.97 1690.16 1832.87 Q1691.04 1833.78 1693.71 1833.78 L1698.08 1833.78 L1698.08 1837.34 L1693.71 1837.34 Q1688.78 1837.34 1686.9 1835.51 Q1685.03 1833.66 1685.03 1828.8 L1685.03 1814.72 L1681.9 1814.72 L1681.9 1811.41 L1685.03 1811.41 L1685.03 1804.05 L1689.31 1804.05 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1713.73 1814.4 Q1710.3 1814.4 1708.31 1817.09 Q1706.32 1819.75 1706.32 1824.4 Q1706.32 1829.05 1708.29 1831.74 Q1710.28 1834.4 1713.73 1834.4 Q1717.13 1834.4 1719.12 1831.71 Q1721.11 1829.03 1721.11 1824.4 Q1721.11 1819.79 1719.12 1817.11 Q1717.13 1814.4 1713.73 1814.4 M1713.73 1810.79 Q1719.28 1810.79 1722.46 1814.4 Q1725.63 1818.01 1725.63 1824.4 Q1725.63 1830.77 1722.46 1834.4 Q1719.28 1838.01 1713.73 1838.01 Q1708.15 1838.01 1704.98 1834.4 Q1701.83 1830.77 1701.83 1824.4 Q1701.83 1818.01 1704.98 1814.4 Q1708.15 1810.79 1713.73 1810.79 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1742.73 1814.4 Q1739.31 1814.4 1737.32 1817.09 Q1735.33 1819.75 1735.33 1824.4 Q1735.33 1829.05 1737.29 1831.74 Q1739.28 1834.4 1742.73 1834.4 Q1746.14 1834.4 1748.13 1831.71 Q1750.12 1829.03 1750.12 1824.4 Q1750.12 1819.79 1748.13 1817.11 Q1746.14 1814.4 1742.73 1814.4 M1742.73 1810.79 Q1748.29 1810.79 1751.46 1814.4 Q1754.63 1818.01 1754.63 1824.4 Q1754.63 1830.77 1751.46 1834.4 Q1748.29 1838.01 1742.73 1838.01 Q1737.16 1838.01 1733.98 1834.4 Q1730.84 1830.77 1730.84 1824.4 Q1730.84 1818.01 1733.98 1814.4 Q1737.16 1810.79 1742.73 1810.79 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M997.709 1871.04 L997.709 1877.31 Q994.049 1875.56 990.802 1874.7 Q987.556 1873.84 984.532 1873.84 Q979.281 1873.84 976.416 1875.88 Q973.583 1877.92 973.583 1881.67 Q973.583 1884.83 975.461 1886.45 Q977.371 1888.04 982.654 1889.03 L986.537 1889.82 Q993.731 1891.19 997.136 1894.66 Q1000.57 1898.1 1000.57 1903.89 Q1000.57 1910.8 995.927 1914.36 Q991.312 1917.93 982.368 1917.93 Q978.994 1917.93 975.175 1917.16 Q971.387 1916.4 967.313 1914.9 L967.313 1908.28 Q971.228 1910.48 974.984 1911.59 Q978.739 1912.71 982.368 1912.71 Q987.874 1912.71 990.866 1910.54 Q993.858 1908.38 993.858 1904.37 Q993.858 1900.87 991.694 1898.89 Q989.561 1896.92 984.66 1895.93 L980.745 1895.17 Q973.551 1893.74 970.337 1890.68 Q967.122 1887.63 967.122 1882.18 Q967.122 1875.88 971.546 1872.25 Q976.002 1868.62 983.8 1868.62 Q987.142 1868.62 990.612 1869.23 Q994.081 1869.83 997.709 1871.04 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1016.01 1911.66 L1016.01 1930.56 L1010.12 1930.56 L1010.12 1881.36 L1016.01 1881.36 L1016.01 1886.77 Q1017.86 1883.58 1020.66 1882.06 Q1023.49 1880.5 1027.41 1880.5 Q1033.9 1880.5 1037.94 1885.65 Q1042.01 1890.81 1042.01 1899.21 Q1042.01 1907.61 1037.94 1912.77 Q1033.9 1917.93 1027.41 1917.93 Q1023.49 1917.93 1020.66 1916.4 Q1017.86 1914.84 1016.01 1911.66 M1035.94 1899.21 Q1035.94 1892.75 1033.26 1889.09 Q1030.62 1885.4 1025.97 1885.4 Q1021.33 1885.4 1018.65 1889.09 Q1016.01 1892.75 1016.01 1899.21 Q1016.01 1905.67 1018.65 1909.36 Q1021.33 1913.03 1025.97 1913.03 Q1030.62 1913.03 1033.26 1909.36 Q1035.94 1905.67 1035.94 1899.21 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1082.21 1897.72 L1082.21 1900.58 L1055.29 1900.58 Q1055.67 1906.63 1058.92 1909.81 Q1062.19 1912.96 1068.02 1912.96 Q1071.39 1912.96 1074.54 1912.13 Q1077.73 1911.31 1080.85 1909.65 L1080.85 1915.19 Q1077.69 1916.53 1074.38 1917.23 Q1071.07 1917.93 1067.67 1917.93 Q1059.14 1917.93 1054.14 1912.96 Q1049.18 1908 1049.18 1899.53 Q1049.18 1890.78 1053.89 1885.65 Q1058.63 1880.5 1066.65 1880.5 Q1073.84 1880.5 1078.01 1885.14 Q1082.21 1889.76 1082.21 1897.72 M1076.36 1896 Q1076.29 1891.19 1073.65 1888.33 Q1071.04 1885.46 1066.71 1885.46 Q1061.81 1885.46 1058.85 1888.23 Q1055.92 1891 1055.48 1896.03 L1076.36 1896 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1117.48 1882.72 L1117.48 1888.2 Q1115 1886.83 1112.48 1886.16 Q1110 1885.46 1107.45 1885.46 Q1101.76 1885.46 1098.61 1889.09 Q1095.45 1892.69 1095.45 1899.21 Q1095.45 1905.74 1098.61 1909.36 Q1101.76 1912.96 1107.45 1912.96 Q1110 1912.96 1112.48 1912.29 Q1115 1911.59 1117.48 1910.22 L1117.48 1915.64 Q1115.03 1916.78 1112.39 1917.35 Q1109.78 1917.93 1106.82 1917.93 Q1098.76 1917.93 1094.02 1912.87 Q1089.28 1907.81 1089.28 1899.21 Q1089.28 1890.49 1094.05 1885.49 Q1098.86 1880.5 1107.2 1880.5 Q1109.9 1880.5 1112.48 1881.07 Q1115.06 1881.61 1117.48 1882.72 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1127.67 1881.36 L1133.52 1881.36 L1133.52 1917 L1127.67 1917 L1127.67 1881.36 M1127.67 1867.48 L1133.52 1867.48 L1133.52 1874.89 L1127.67 1874.89 L1127.67 1867.48 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1176.27 1897.72 L1176.27 1900.58 L1149.34 1900.58 Q1149.72 1906.63 1152.97 1909.81 Q1156.25 1912.96 1162.07 1912.96 Q1165.45 1912.96 1168.6 1912.13 Q1171.78 1911.31 1174.9 1909.65 L1174.9 1915.19 Q1171.75 1916.53 1168.44 1917.23 Q1165.13 1917.93 1161.72 1917.93 Q1153.19 1917.93 1148.19 1912.96 Q1143.23 1908 1143.23 1899.53 Q1143.23 1890.78 1147.94 1885.65 Q1152.68 1880.5 1160.7 1880.5 Q1167.9 1880.5 1172.07 1885.14 Q1176.27 1889.76 1176.27 1897.72 M1170.41 1896 Q1170.35 1891.19 1167.71 1888.33 Q1165.1 1885.46 1160.77 1885.46 Q1155.87 1885.46 1152.91 1888.23 Q1149.98 1891 1149.53 1896.03 L1170.41 1896 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M1208.61 1882.41 L1208.61 1887.94 Q1206.12 1886.67 1203.45 1886.03 Q1200.78 1885.4 1197.91 1885.4 Q1193.55 1885.4 1191.35 1886.73 Q1189.19 1888.07 1189.19 1890.75 Q1189.19 1892.78 1190.75 1893.96 Q1192.31 1895.11 1197.02 1896.16 L1199.02 1896.6 Q1205.26 1897.94 1207.87 1900.39 Q1210.51 1902.81 1210.51 1907.17 Q1210.51 1912.13 1206.57 1915.03 Q1202.65 1917.93 1195.78 1917.93 Q1192.91 1917.93 1189.79 1917.35 Q1186.71 1916.81 1183.27 1915.7 L1183.27 1909.65 Q1186.52 1911.34 1189.67 1912.2 Q1192.82 1913.03 1195.91 1913.03 Q1200.04 1913.03 1202.27 1911.62 Q1204.5 1910.19 1204.5 1907.61 Q1204.5 1905.23 1202.88 1903.95 Q1201.28 1902.68 1195.84 1901.5 L1193.8 1901.03 Q1188.36 1899.88 1185.94 1897.52 Q1183.52 1895.14 1183.52 1891 Q1183.52 1885.97 1187.09 1883.23 Q1190.65 1880.5 1197.21 1880.5 Q1200.46 1880.5 1203.32 1880.97 Q1206.19 1881.45 1208.61 1882.41 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="224.881,1559.23 1952.76,1559.23 "></polyline>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="224.881,1260.66 1952.76,1260.66 "></polyline>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="224.881,962.093 1952.76,962.093 "></polyline>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="224.881,663.522 1952.76,663.522 "></polyline>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="224.881,364.952 1952.76,364.952 "></polyline>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none" points="224.881,66.3811 1952.76,66.3811 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="224.881,1778.14 224.881,47.2441 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="224.881,1559.23 243.779,1559.23 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="224.881,1260.66 243.779,1260.66 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="224.881,962.093 243.779,962.093 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="224.881,663.522 243.779,663.522 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="224.881,364.952 243.779,364.952 "></polyline>
<polyline clip-path="url(#clip300)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="224.881,66.3811 243.779,66.3811 "></polyline>
<path clip-path="url(#clip300)" d="M157.937 1557.88 Q161.293 1558.6 163.168 1560.87 Q165.066 1563.13 165.066 1566.47 Q165.066 1571.58 161.548 1574.38 Q158.029 1577.19 151.548 1577.19 Q149.372 1577.19 147.057 1576.75 Q144.766 1576.33 142.312 1575.47 L142.312 1570.96 Q144.256 1572.09 146.571 1572.67 Q148.886 1573.25 151.409 1573.25 Q155.807 1573.25 158.099 1571.51 Q160.414 1569.78 160.414 1566.47 Q160.414 1563.41 158.261 1561.7 Q156.131 1559.96 152.312 1559.96 L148.284 1559.96 L148.284 1556.12 L152.497 1556.12 Q155.946 1556.12 157.775 1554.75 Q159.603 1553.37 159.603 1550.77 Q159.603 1548.11 157.705 1546.7 Q155.83 1545.26 152.312 1545.26 Q150.39 1545.26 148.191 1545.68 Q145.992 1546.1 143.353 1546.98 L143.353 1542.81 Q146.015 1542.07 148.33 1541.7 Q150.668 1541.33 152.728 1541.33 Q158.052 1541.33 161.154 1543.76 Q164.256 1546.17 164.256 1550.29 Q164.256 1553.16 162.613 1555.15 Q160.969 1557.12 157.937 1557.88 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M173.978 1541.95 L192.335 1541.95 L192.335 1545.89 L178.261 1545.89 L178.261 1554.36 Q179.279 1554.01 180.298 1553.85 Q181.316 1553.67 182.335 1553.67 Q188.122 1553.67 191.501 1556.84 Q194.881 1560.01 194.881 1565.43 Q194.881 1571 191.409 1574.11 Q187.937 1577.19 181.617 1577.19 Q179.441 1577.19 177.173 1576.81 Q174.927 1576.44 172.52 1575.7 L172.52 1571 Q174.603 1572.14 176.826 1572.69 Q179.048 1573.25 181.525 1573.25 Q185.529 1573.25 187.867 1571.14 Q190.205 1569.04 190.205 1565.43 Q190.205 1561.82 187.867 1559.71 Q185.529 1557.6 181.525 1557.6 Q179.65 1557.6 177.775 1558.02 Q175.923 1558.44 173.978 1559.32 L173.978 1541.95 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M155.622 1247.46 L143.816 1265.91 L155.622 1265.91 L155.622 1247.46 M154.395 1243.38 L160.275 1243.38 L160.275 1265.91 L165.205 1265.91 L165.205 1269.8 L160.275 1269.8 L160.275 1277.94 L155.622 1277.94 L155.622 1269.8 L140.02 1269.8 L140.02 1265.28 L154.395 1243.38 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M182.937 1246.46 Q179.326 1246.46 177.497 1250.03 Q175.691 1253.57 175.691 1260.7 Q175.691 1267.8 177.497 1271.37 Q179.326 1274.91 182.937 1274.91 Q186.571 1274.91 188.376 1271.37 Q190.205 1267.8 190.205 1260.7 Q190.205 1253.57 188.376 1250.03 Q186.571 1246.46 182.937 1246.46 M182.937 1242.76 Q188.747 1242.76 191.802 1247.36 Q194.881 1251.95 194.881 1260.7 Q194.881 1269.42 191.802 1274.03 Q188.747 1278.61 182.937 1278.61 Q177.126 1278.61 174.048 1274.03 Q170.992 1269.42 170.992 1260.7 Q170.992 1251.95 174.048 1247.36 Q177.126 1242.76 182.937 1242.76 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M156.617 948.887 L144.812 967.336 L156.617 967.336 L156.617 948.887 M155.39 944.813 L161.27 944.813 L161.27 967.336 L166.201 967.336 L166.201 971.225 L161.27 971.225 L161.27 979.373 L156.617 979.373 L156.617 971.225 L141.016 971.225 L141.016 966.711 L155.39 944.813 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M173.978 944.813 L192.335 944.813 L192.335 948.748 L178.261 948.748 L178.261 957.22 Q179.279 956.873 180.298 956.711 Q181.316 956.526 182.335 956.526 Q188.122 956.526 191.501 959.697 Q194.881 962.868 194.881 968.285 Q194.881 973.864 191.409 976.965 Q187.937 980.044 181.617 980.044 Q179.441 980.044 177.173 979.674 Q174.927 979.303 172.52 978.563 L172.52 973.864 Q174.603 974.998 176.826 975.553 Q179.048 976.109 181.525 976.109 Q185.529 976.109 187.867 974.003 Q190.205 971.896 190.205 968.285 Q190.205 964.674 187.867 962.567 Q185.529 960.461 181.525 960.461 Q179.65 960.461 177.775 960.878 Q175.923 961.294 173.978 962.174 L173.978 944.813 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M142.821 646.242 L161.177 646.242 L161.177 650.177 L147.103 650.177 L147.103 658.65 Q148.122 658.302 149.14 658.14 Q150.159 657.955 151.178 657.955 Q156.965 657.955 160.344 661.126 Q163.724 664.298 163.724 669.714 Q163.724 675.293 160.252 678.395 Q156.779 681.474 150.46 681.474 Q148.284 681.474 146.015 681.103 Q143.77 680.733 141.363 679.992 L141.363 675.293 Q143.446 676.427 145.668 676.983 Q147.89 677.538 150.367 677.538 Q154.372 677.538 156.71 675.432 Q159.048 673.325 159.048 669.714 Q159.048 666.103 156.71 663.997 Q154.372 661.89 150.367 661.89 Q148.492 661.89 146.617 662.307 Q144.766 662.724 142.821 663.603 L142.821 646.242 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M182.937 649.321 Q179.326 649.321 177.497 652.886 Q175.691 656.427 175.691 663.557 Q175.691 670.663 177.497 674.228 Q179.326 677.77 182.937 677.77 Q186.571 677.77 188.376 674.228 Q190.205 670.663 190.205 663.557 Q190.205 656.427 188.376 652.886 Q186.571 649.321 182.937 649.321 M182.937 645.617 Q188.747 645.617 191.802 650.224 Q194.881 654.807 194.881 663.557 Q194.881 672.284 191.802 676.89 Q188.747 681.474 182.937 681.474 Q177.126 681.474 174.048 676.89 Q170.992 672.284 170.992 663.557 Q170.992 654.807 174.048 650.224 Q177.126 645.617 182.937 645.617 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M143.816 347.672 L162.173 347.672 L162.173 351.607 L148.099 351.607 L148.099 360.079 Q149.117 359.732 150.136 359.57 Q151.154 359.385 152.173 359.385 Q157.96 359.385 161.339 362.556 Q164.719 365.727 164.719 371.144 Q164.719 376.722 161.247 379.824 Q157.775 382.903 151.455 382.903 Q149.279 382.903 147.011 382.533 Q144.766 382.162 142.358 381.421 L142.358 376.722 Q144.441 377.857 146.664 378.412 Q148.886 378.968 151.363 378.968 Q155.367 378.968 157.705 376.861 Q160.043 374.755 160.043 371.144 Q160.043 367.533 157.705 365.426 Q155.367 363.32 151.363 363.32 Q149.488 363.32 147.613 363.736 Q145.761 364.153 143.816 365.033 L143.816 347.672 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M173.978 347.672 L192.335 347.672 L192.335 351.607 L178.261 351.607 L178.261 360.079 Q179.279 359.732 180.298 359.57 Q181.316 359.385 182.335 359.385 Q188.122 359.385 191.501 362.556 Q194.881 365.727 194.881 371.144 Q194.881 376.722 191.409 379.824 Q187.937 382.903 181.617 382.903 Q179.441 382.903 177.173 382.533 Q174.927 382.162 172.52 381.421 L172.52 376.722 Q174.603 377.857 176.826 378.412 Q179.048 378.968 181.525 378.968 Q185.529 378.968 187.867 376.861 Q190.205 374.755 190.205 371.144 Q190.205 367.533 187.867 365.426 Q185.529 363.32 181.525 363.32 Q179.65 363.32 177.775 363.736 Q175.923 364.153 173.978 365.033 L173.978 347.672 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M153.353 64.5176 Q150.205 64.5176 148.353 66.6704 Q146.525 68.8232 146.525 72.5732 Q146.525 76.3 148.353 78.4759 Q150.205 80.6287 153.353 80.6287 Q156.502 80.6287 158.33 78.4759 Q160.182 76.3 160.182 72.5732 Q160.182 68.8232 158.33 66.6704 Q156.502 64.5176 153.353 64.5176 M162.636 49.8649 L162.636 54.1242 Q160.877 53.2909 159.071 52.851 Q157.289 52.4112 155.529 52.4112 Q150.9 52.4112 148.446 55.5362 Q146.015 58.6612 145.668 64.9806 Q147.034 62.9667 149.094 61.9019 Q151.154 60.814 153.631 60.814 Q158.84 60.814 161.849 63.9852 Q164.881 67.1334 164.881 72.5732 Q164.881 77.8972 161.733 81.1148 Q158.585 84.3324 153.353 84.3324 Q147.358 84.3324 144.187 79.749 Q141.016 75.1426 141.016 66.4158 Q141.016 58.2214 144.904 53.3603 Q148.793 48.4761 155.344 48.4761 Q157.103 48.4761 158.886 48.8233 Q160.691 49.1705 162.636 49.8649 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M182.937 52.1797 Q179.326 52.1797 177.497 55.7445 Q175.691 59.2862 175.691 66.4158 Q175.691 73.5222 177.497 77.087 Q179.326 80.6287 182.937 80.6287 Q186.571 80.6287 188.376 77.087 Q190.205 73.5222 190.205 66.4158 Q190.205 59.2862 188.376 55.7445 Q186.571 52.1797 182.937 52.1797 M182.937 48.4761 Q188.747 48.4761 191.802 53.0825 Q194.881 57.6658 194.881 66.4158 Q194.881 75.1426 191.802 79.749 Q188.747 84.3324 182.937 84.3324 Q177.126 84.3324 174.048 79.749 Q170.992 75.1426 170.992 66.4158 Q170.992 57.6658 174.048 53.0825 Q177.126 48.4761 182.937 48.4761 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M73.0704 1171.86 L90.4806 1171.86 L90.4806 1161.54 Q90.4806 1156.36 88.3481 1153.87 Q86.1838 1151.36 81.7596 1151.36 Q77.3036 1151.36 75.2029 1153.87 Q73.0704 1156.36 73.0704 1161.54 L73.0704 1171.86 M53.5277 1171.86 L67.8505 1171.86 L67.8505 1162.34 Q67.8505 1157.63 66.1 1155.34 Q64.3176 1153.01 60.6891 1153.01 Q57.0925 1153.01 55.3101 1155.34 Q53.5277 1157.63 53.5277 1162.34 L53.5277 1171.86 M48.2442 1178.29 L48.2442 1161.86 Q48.2442 1154.51 51.2997 1150.53 Q54.3552 1146.55 59.9889 1146.55 Q64.3494 1146.55 66.9275 1148.59 Q69.5056 1150.63 70.1422 1154.57 Q71.1607 1149.83 74.4072 1147.22 Q77.6219 1144.58 82.4598 1144.58 Q88.8255 1144.58 92.2948 1148.91 Q95.7642 1153.24 95.7642 1161.23 L95.7642 1178.29 L48.2442 1178.29 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M60.1162 1133.82 L60.1162 1127.96 L95.7642 1127.96 L95.7642 1133.82 L60.1162 1133.82 M46.239 1133.82 L46.239 1127.96 L53.655 1127.96 L53.655 1133.82 L46.239 1133.82 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M46.239 1115.71 L46.239 1109.85 L95.7642 1109.85 L95.7642 1115.71 L46.239 1115.71 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M46.239 1097.6 L46.239 1091.74 L95.7642 1091.74 L95.7642 1097.6 L46.239 1097.6 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M48.2442 1058.51 L48.2442 1052.09 L90.3533 1052.09 L90.3533 1028.95 L95.7642 1028.95 L95.7642 1058.51 L48.2442 1058.51 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M76.4761 993.107 L79.3406 993.107 L79.3406 1020.03 Q85.3881 1019.65 88.5709 1016.41 Q91.7219 1013.13 91.7219 1007.3 Q91.7219 1003.93 90.8944 1000.78 Q90.0669 997.595 88.4118 994.475 L93.9499 994.475 Q95.2867 997.626 95.987 1000.94 Q96.6872 1004.25 96.6872 1007.65 Q96.6872 1016.18 91.7219 1021.18 Q86.7567 1026.14 78.2903 1026.14 Q69.5374 1026.14 64.4131 1021.43 Q59.2568 1016.69 59.2568 1008.67 Q59.2568 1001.48 63.9038 997.308 Q68.5189 993.107 76.4761 993.107 M74.7573 998.963 Q69.9512 999.027 67.0866 1001.67 Q64.2221 1004.28 64.2221 1008.61 Q64.2221 1013.51 66.9912 1016.47 Q69.7602 1019.4 74.7892 1019.84 L74.7573 998.963 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M74.2481 953.862 L95.7642 953.862 L95.7642 959.719 L74.439 959.719 Q69.3783 959.719 66.8638 961.692 Q64.3494 963.665 64.3494 967.612 Q64.3494 972.355 67.3731 975.092 Q70.3968 977.829 75.6167 977.829 L95.7642 977.829 L95.7642 983.717 L60.1162 983.717 L60.1162 977.829 L65.6544 977.829 Q62.4397 975.728 60.8483 972.896 Q59.2568 970.031 59.2568 966.307 Q59.2568 960.164 63.0763 957.013 Q66.8638 953.862 74.2481 953.862 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M77.5264 918.723 Q71.1607 918.723 67.6596 921.365 Q64.1584 923.975 64.1584 928.718 Q64.1584 933.428 67.6596 936.07 Q71.1607 938.68 77.5264 938.68 Q83.8603 938.68 87.3614 936.07 Q90.8626 933.428 90.8626 928.718 Q90.8626 923.975 87.3614 921.365 Q83.8603 918.723 77.5264 918.723 M91.34 912.867 Q100.443 912.867 104.867 916.909 Q109.323 920.951 109.323 929.291 Q109.323 932.378 108.846 935.115 Q108.4 937.852 107.445 940.431 L101.748 940.431 Q103.148 937.852 103.817 935.338 Q104.485 932.824 104.485 930.214 Q104.485 924.453 101.461 921.588 Q98.4696 918.723 92.3903 918.723 L89.4939 918.723 Q92.645 920.538 94.2046 923.37 Q95.7642 926.203 95.7642 930.15 Q95.7642 936.707 90.7671 940.717 Q85.77 944.727 77.5264 944.727 Q69.251 944.727 64.2539 940.717 Q59.2568 936.707 59.2568 930.15 Q59.2568 926.203 60.8164 923.37 Q62.376 920.538 65.5271 918.723 L60.1162 918.723 L60.1162 912.867 L91.34 912.867 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M49.9947 895.011 L60.1162 895.011 L60.1162 882.948 L64.6677 882.948 L64.6677 895.011 L84.0194 895.011 Q88.3799 895.011 89.6213 893.834 Q90.8626 892.624 90.8626 888.964 L90.8626 882.948 L95.7642 882.948 L95.7642 888.964 Q95.7642 895.743 93.2497 898.321 Q90.7034 900.899 84.0194 900.899 L64.6677 900.899 L64.6677 905.196 L60.1162 905.196 L60.1162 900.899 L49.9947 900.899 L49.9947 895.011 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M74.2481 845.613 L95.7642 845.613 L95.7642 851.47 L74.439 851.47 Q69.3783 851.47 66.8638 853.443 Q64.3494 855.417 64.3494 859.363 Q64.3494 864.106 67.3731 866.843 Q70.3968 869.58 75.6167 869.58 L95.7642 869.58 L95.7642 875.468 L46.239 875.468 L46.239 869.58 L65.6544 869.58 Q62.4397 867.48 60.8483 864.647 Q59.2568 861.782 59.2568 858.058 Q59.2568 851.915 63.0763 848.764 Q66.8638 845.613 74.2481 845.613 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M46.3026 799.144 Q53.6232 803.409 60.7846 805.478 Q67.946 807.546 75.2984 807.546 Q82.6508 807.546 89.8759 805.478 Q97.0691 803.377 104.358 799.144 L104.358 804.236 Q96.8782 809.011 89.6531 811.398 Q82.428 813.753 75.2984 813.753 Q68.2006 813.753 61.0074 811.398 Q53.8142 809.042 46.3026 804.236 L46.3026 799.144 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M66.9593 760.026 Q63.0126 757.83 61.1347 754.775 Q59.2568 751.719 59.2568 747.581 Q59.2568 742.011 63.1717 738.988 Q67.0548 735.964 74.2481 735.964 L95.7642 735.964 L95.7642 741.852 L74.439 741.852 Q69.3146 741.852 66.832 743.667 Q64.3494 745.481 64.3494 749.205 Q64.3494 753.756 67.3731 756.398 Q70.3968 759.04 75.6167 759.04 L95.7642 759.04 L95.7642 764.928 L74.439 764.928 Q69.2828 764.928 66.832 766.742 Q64.3494 768.556 64.3494 772.344 Q64.3494 776.832 67.4049 779.474 Q70.4286 782.115 75.6167 782.115 L95.7642 782.115 L95.7642 788.004 L60.1162 788.004 L60.1162 782.115 L65.6544 782.115 Q62.376 780.11 60.8164 777.309 Q59.2568 774.508 59.2568 770.657 Q59.2568 766.774 61.2302 764.069 Q63.2036 761.331 66.9593 760.026 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M66.9593 696.528 Q63.0126 694.332 61.1347 691.277 Q59.2568 688.221 59.2568 684.084 Q59.2568 678.514 63.1717 675.49 Q67.0548 672.466 74.2481 672.466 L95.7642 672.466 L95.7642 678.354 L74.439 678.354 Q69.3146 678.354 66.832 680.169 Q64.3494 681.983 64.3494 685.707 Q64.3494 690.258 67.3731 692.9 Q70.3968 695.542 75.6167 695.542 L95.7642 695.542 L95.7642 701.43 L74.439 701.43 Q69.2828 701.43 66.832 703.244 Q64.3494 705.059 64.3494 708.846 Q64.3494 713.334 67.4049 715.976 Q70.4286 718.617 75.6167 718.617 L95.7642 718.617 L95.7642 724.506 L60.1162 724.506 L60.1162 718.617 L65.6544 718.617 Q62.376 716.612 60.8164 713.811 Q59.2568 711.01 59.2568 707.159 Q59.2568 703.276 61.2302 700.571 Q63.2036 697.833 66.9593 696.528 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip300)" d="M46.3026 661.708 L46.3026 656.616 Q53.8142 651.841 61.0074 649.486 Q68.2006 647.099 75.2984 647.099 Q82.428 647.099 89.6531 649.486 Q96.8782 651.841 104.358 656.616 L104.358 661.708 Q97.0691 657.475 89.8759 655.406 Q82.6508 653.305 75.2984 653.305 Q67.946 653.305 60.7846 655.406 Q53.6232 657.475 46.3026 661.708 Z" fill="#000000" fill-rule="nonzero" fill-opacity="1"></path><path clip-path="url(#clip302)" d="M527.59 1729.15 L529.979 1721.31 L532.579 1713.47 L535.399 1705.62 L538.449 1697.78 L541.738 1689.94 L545.272 1682.09 L549.058 1674.25 L553.099 1666.41 L557.396 1658.56 L561.948 1650.72 L566.752 1642.88 L571.801 1635.04 L577.086 1627.19 L582.594 1619.35 L588.311 1611.51 L594.217 1603.66 L600.293 1595.82 L606.515 1587.98 L612.857 1580.13 L619.291 1572.29 L625.789 1564.45 L632.321 1556.61 L638.855 1548.76 L645.36 1540.92 L651.807 1533.08 L658.164 1525.23 L664.404 1517.39 L670.498 1509.55 L676.421 1501.7 L682.149 1493.86 L687.662 1486.02 L692.94 1478.17 L697.967 1470.33 L702.729 1462.49 L707.215 1454.65 L711.417 1446.8 L715.327 1438.96 L718.941 1431.12 L722.256 1423.27 L725.273 1415.43 L727.991 1407.59 L730.412 1399.74 L732.54 1391.9 L734.378 1384.06 L735.929 1376.21 L737.198 1368.37 L738.188 1360.53 L738.903 1352.69 L739.346 1344.84 L739.518 1337 L739.419 1329.16 L739.05 1321.31 L738.409 1313.47 L737.492 1305.63 L736.296 1297.78 L734.815 1289.94 L733.043 1282.1 L730.974 1274.26 L728.6 1266.41 L725.917 1258.57 L722.917 1250.73 L719.598 1242.88 L715.956 1235.04 L711.991 1227.2 L707.706 1219.35 L703.107 1211.51 L698.202 1203.67 L693.005 1195.82 L687.532 1187.98 L681.802 1180.14 L675.841 1172.3 L669.675 1164.45 L663.335 1156.61 L656.853 1148.77 L650.264 1140.92 L643.605 1133.08 L636.913 1125.24 L630.226 1117.39 L623.579 1109.55 L617.011 1101.71 L610.554 1093.86 L604.241 1086.02 L598.102 1078.18 L592.163 1070.34 L586.447 1062.49 L580.974 1054.65 L575.759 1046.81 L570.815 1038.96 L566.149 1031.12 L561.765 1023.28 L557.665 1015.43 L553.844 1007.59 L550.298 999.748 L547.016 991.905 L543.989 984.062 L541.201 976.219 L538.639 968.376 L536.286 960.533 L534.124 952.69 L532.137 944.847 L530.307 937.004 L528.617 929.161 L527.052 921.318 L525.596 913.475 L524.237 905.631 L489.064 905.631 L487.705 913.475 L486.249 921.318 L484.684 929.161 L482.994 937.004 L481.164 944.847 L479.177 952.69 L477.015 960.533 L474.661 968.376 L472.099 976.219 L469.312 984.062 L466.284 991.905 L463.003 999.748 L459.457 1007.59 L455.636 1015.43 L451.535 1023.28 L447.152 1031.12 L442.486 1038.96 L437.541 1046.81 L432.327 1054.65 L426.853 1062.49 L421.138 1070.34 L415.199 1078.18 L409.059 1086.02 L402.747 1093.86 L396.29 1101.71 L389.721 1109.55 L383.075 1117.39 L376.387 1125.24 L369.695 1133.08 L363.036 1140.92 L356.448 1148.77 L349.966 1156.61 L343.625 1164.45 L337.459 1172.3 L331.498 1180.14 L325.769 1187.98 L320.296 1195.82 L315.098 1203.67 L310.194 1211.51 L305.594 1219.35 L301.31 1227.2 L297.345 1235.04 L293.703 1242.88 L290.383 1250.73 L287.384 1258.57 L284.7 1266.41 L282.327 1274.26 L280.258 1282.1 L278.486 1289.94 L277.005 1297.78 L275.808 1305.63 L274.892 1313.47 L274.25 1321.31 L273.881 1329.16 L273.783 1337 L273.955 1344.84 L274.397 1352.69 L275.113 1360.53 L276.103 1368.37 L277.372 1376.21 L278.923 1384.06 L280.761 1391.9 L282.888 1399.74 L285.31 1407.59 L288.028 1415.43 L291.044 1423.27 L294.36 1431.12 L297.974 1438.96 L301.884 1446.8 L306.085 1454.65 L310.572 1462.49 L315.334 1470.33 L320.361 1478.17 L325.639 1486.02 L331.151 1493.86 L336.88 1501.7 L342.803 1509.55 L348.897 1517.39 L355.136 1525.23 L361.494 1533.08 L367.94 1540.92 L374.446 1548.76 L380.98 1556.61 L387.512 1564.45 L394.01 1572.29 L400.444 1580.13 L406.786 1587.98 L413.007 1595.82 L419.083 1603.66 L424.99 1611.51 L430.706 1619.35 L436.215 1627.19 L441.5 1635.04 L446.549 1642.88 L451.353 1650.72 L455.905 1658.56 L460.202 1666.41 L464.243 1674.25 L468.028 1682.09 L471.563 1689.94 L474.852 1697.78 L477.902 1705.62 L480.722 1713.47 L483.321 1721.31 L485.71 1729.15 L527.59 1729.15  Z" fill="#009af9" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="527.59,1729.15 529.979,1721.31 532.579,1713.47 535.399,1705.62 538.449,1697.78 541.738,1689.94 545.272,1682.09 549.058,1674.25 553.099,1666.41 557.396,1658.56 561.948,1650.72 566.752,1642.88 571.801,1635.04 577.086,1627.19 582.594,1619.35 588.311,1611.51 594.217,1603.66 600.293,1595.82 606.515,1587.98 612.857,1580.13 619.291,1572.29 625.789,1564.45 632.321,1556.61 638.855,1548.76 645.36,1540.92 651.807,1533.08 658.164,1525.23 664.404,1517.39 670.498,1509.55 676.421,1501.7 682.149,1493.86 687.662,1486.02 692.94,1478.17 697.967,1470.33 702.729,1462.49 707.215,1454.65 711.417,1446.8 715.327,1438.96 718.941,1431.12 722.256,1423.27 725.273,1415.43 727.991,1407.59 730.412,1399.74 732.54,1391.9 734.378,1384.06 735.929,1376.21 737.198,1368.37 738.188,1360.53 738.903,1352.69 739.346,1344.84 739.518,1337 739.419,1329.16 739.05,1321.31 738.409,1313.47 737.492,1305.63 736.296,1297.78 734.815,1289.94 733.043,1282.1 730.974,1274.26 728.6,1266.41 725.917,1258.57 722.917,1250.73 719.598,1242.88 715.956,1235.04 711.991,1227.2 707.706,1219.35 703.107,1211.51 698.202,1203.67 693.005,1195.82 687.532,1187.98 681.802,1180.14 675.841,1172.3 669.675,1164.45 663.335,1156.61 656.853,1148.77 650.264,1140.92 643.605,1133.08 636.913,1125.24 630.226,1117.39 623.579,1109.55 617.011,1101.71 610.554,1093.86 604.241,1086.02 598.102,1078.18 592.163,1070.34 586.447,1062.49 580.974,1054.65 575.759,1046.81 570.815,1038.96 566.149,1031.12 561.765,1023.28 557.665,1015.43 553.844,1007.59 550.298,999.748 547.016,991.905 543.989,984.062 541.201,976.219 538.639,968.376 536.286,960.533 534.124,952.69 532.137,944.847 530.307,937.004 528.617,929.161 527.052,921.318 525.596,913.475 524.237,905.631 489.064,905.631 487.705,913.475 486.249,921.318 484.684,929.161 482.994,937.004 481.164,944.847 479.177,952.69 477.015,960.533 474.661,968.376 472.099,976.219 469.312,984.062 466.284,991.905 463.003,999.748 459.457,1007.59 455.636,1015.43 451.535,1023.28 447.152,1031.12 442.486,1038.96 437.541,1046.81 432.327,1054.65 426.853,1062.49 421.138,1070.34 415.199,1078.18 409.059,1086.02 402.747,1093.86 396.29,1101.71 389.721,1109.55 383.075,1117.39 376.387,1125.24 369.695,1133.08 363.036,1140.92 356.448,1148.77 349.966,1156.61 343.625,1164.45 337.459,1172.3 331.498,1180.14 325.769,1187.98 320.296,1195.82 315.098,1203.67 310.194,1211.51 305.594,1219.35 301.31,1227.2 297.345,1235.04 293.703,1242.88 290.383,1250.73 287.384,1258.57 284.7,1266.41 282.327,1274.26 280.258,1282.1 278.486,1289.94 277.005,1297.78 275.808,1305.63 274.892,1313.47 274.25,1321.31 273.881,1329.16 273.783,1337 273.955,1344.84 274.397,1352.69 275.113,1360.53 276.103,1368.37 277.372,1376.21 278.923,1384.06 280.761,1391.9 282.888,1399.74 285.31,1407.59 288.028,1415.43 291.044,1423.27 294.36,1431.12 297.974,1438.96 301.884,1446.8 306.085,1454.65 310.572,1462.49 315.334,1470.33 320.361,1478.17 325.639,1486.02 331.151,1493.86 336.88,1501.7 342.803,1509.55 348.897,1517.39 355.136,1525.23 361.494,1533.08 367.94,1540.92 374.446,1548.76 380.98,1556.61 387.512,1564.45 394.01,1572.29 400.444,1580.13 406.786,1587.98 413.007,1595.82 419.083,1603.66 424.99,1611.51 430.706,1619.35 436.215,1627.19 441.5,1635.04 446.549,1642.88 451.353,1650.72 455.905,1658.56 460.202,1666.41 464.243,1674.25 468.028,1682.09 471.563,1689.94 474.852,1697.78 477.902,1705.62 480.722,1713.47 483.321,1721.31 485.71,1729.15 527.59,1729.15 "></polyline>
<path clip-path="url(#clip302)" d="M1116.48 1202.55 L1118.78 1193.75 L1121.13 1184.95 L1123.5 1176.14 L1125.9 1167.34 L1128.32 1158.54 L1130.75 1149.73 L1133.21 1140.93 L1135.69 1132.13 L1138.21 1123.32 L1140.79 1114.52 L1143.46 1105.72 L1146.25 1096.91 L1149.2 1088.11 L1152.34 1079.31 L1155.7 1070.5 L1159.33 1061.7 L1163.26 1052.9 L1167.5 1044.09 L1172.08 1035.29 L1176.99 1026.49 L1182.22 1017.68 L1187.76 1008.88 L1193.55 1000.08 L1199.54 991.275 L1205.66 982.472 L1211.83 973.668 L1217.96 964.865 L1223.96 956.062 L1229.72 947.259 L1235.16 938.455 L1240.18 929.652 L1244.71 920.849 L1248.7 912.045 L1252.1 903.242 L1254.9 894.439 L1257.09 885.636 L1258.71 876.832 L1259.8 868.029 L1260.44 859.226 L1260.72 850.422 L1260.74 841.619 L1260.62 832.816 L1260.47 824.013 L1260.42 815.209 L1260.57 806.406 L1261.04 797.603 L1261.91 788.799 L1263.25 779.996 L1265.12 771.193 L1267.53 762.39 L1270.48 753.586 L1273.96 744.783 L1277.91 735.98 L1282.26 727.177 L1286.9 718.373 L1291.73 709.57 L1296.63 700.767 L1301.44 691.963 L1306.04 683.16 L1310.29 674.357 L1314.04 665.554 L1317.16 656.75 L1319.54 647.947 L1321.08 639.144 L1321.69 630.34 L1321.31 621.537 L1319.9 612.734 L1317.44 603.931 L1313.95 595.127 L1309.44 586.324 L1303.97 577.521 L1297.61 568.717 L1290.44 559.914 L1282.56 551.111 L1274.08 542.308 L1265.11 533.504 L1255.78 524.701 L1246.21 515.898 L1236.51 507.094 L1226.8 498.291 L1217.19 489.488 L1207.76 480.685 L1198.61 471.881 L1189.8 463.078 L1181.4 454.275 L1173.46 445.471 L1166 436.668 L1159.06 427.865 L1152.63 419.062 L1146.74 410.258 L1141.35 401.455 L1136.47 392.652 L1132.07 383.849 L1128.13 375.045 L1124.61 366.242 L1121.49 357.439 L1118.73 348.635 L1116.3 339.832 L1114.17 331.029 L1112.3 322.226 L1110.68 313.422 L1109.26 304.619 L1108.02 295.816 L1106.94 287.012 L1106 278.209 L1105.16 269.406 L1104.42 260.603 L1103.76 251.799 L1103.15 242.996 L1102.59 234.193 L1102.06 225.389 L1101.55 216.586 L1101.05 207.783 L1100.55 198.98 L1100.04 190.176 L1077.6 190.176 L1077.09 198.98 L1076.59 207.783 L1076.09 216.586 L1075.58 225.389 L1075.04 234.193 L1074.48 242.996 L1073.88 251.799 L1073.21 260.603 L1072.47 269.406 L1071.64 278.209 L1070.7 287.012 L1069.62 295.816 L1068.38 304.619 L1066.96 313.422 L1065.33 322.226 L1063.47 331.029 L1061.34 339.832 L1058.91 348.635 L1056.15 357.439 L1053.03 366.242 L1049.51 375.045 L1045.56 383.849 L1041.16 392.652 L1036.28 401.455 L1030.9 410.258 L1025 419.062 L1018.58 427.865 L1011.64 436.668 L1004.18 445.471 L996.236 454.275 L987.837 463.078 L979.031 471.881 L969.879 480.685 L960.451 489.488 L950.835 498.291 L941.124 507.094 L931.426 515.898 L921.853 524.701 L912.523 533.504 L903.557 542.308 L895.076 551.111 L887.196 559.914 L880.026 568.717 L873.664 577.521 L868.196 586.324 L863.69 595.127 L860.195 603.931 L857.74 612.734 L856.331 621.537 L855.951 630.34 L856.561 639.144 L858.097 647.947 L860.477 656.75 L863.6 665.554 L867.348 674.357 L871.592 683.16 L876.194 691.963 L881.012 700.767 L885.905 709.57 L890.737 718.373 L895.381 727.177 L899.725 735.98 L903.673 744.783 L907.152 753.586 L910.11 762.39 L912.521 771.193 L914.386 779.996 L915.728 788.799 L916.597 797.603 L917.065 806.406 L917.219 815.209 L917.165 824.013 L917.016 832.816 L916.893 841.619 L916.914 850.422 L917.194 859.226 L917.837 868.029 L918.931 876.832 L920.55 885.636 L922.742 894.439 L925.535 903.242 L928.935 912.045 L932.922 920.849 L937.456 929.652 L942.478 938.455 L947.914 947.259 L953.677 956.062 L959.672 964.865 L965.804 973.668 L971.976 982.472 L978.098 991.275 L984.089 1000.08 L989.879 1008.88 L995.412 1017.68 L1000.65 1026.49 L1005.56 1035.29 L1010.13 1044.09 L1014.38 1052.9 L1018.3 1061.7 L1021.93 1070.5 L1025.3 1079.31 L1028.44 1088.11 L1031.38 1096.91 L1034.17 1105.72 L1036.85 1114.52 L1039.43 1123.32 L1041.95 1132.13 L1044.43 1140.93 L1046.88 1149.73 L1049.32 1158.54 L1051.73 1167.34 L1054.13 1176.14 L1056.51 1184.95 L1058.86 1193.75 L1061.16 1202.55 L1116.48 1202.55  Z" fill="#009af9" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1116.48,1202.55 1118.78,1193.75 1121.13,1184.95 1123.5,1176.14 1125.9,1167.34 1128.32,1158.54 1130.75,1149.73 1133.21,1140.93 1135.69,1132.13 1138.21,1123.32 1140.79,1114.52 1143.46,1105.72 1146.25,1096.91 1149.2,1088.11 1152.34,1079.31 1155.7,1070.5 1159.33,1061.7 1163.26,1052.9 1167.5,1044.09 1172.08,1035.29 1176.99,1026.49 1182.22,1017.68 1187.76,1008.88 1193.55,1000.08 1199.54,991.275 1205.66,982.472 1211.83,973.668 1217.96,964.865 1223.96,956.062 1229.72,947.259 1235.16,938.455 1240.18,929.652 1244.71,920.849 1248.7,912.045 1252.1,903.242 1254.9,894.439 1257.09,885.636 1258.71,876.832 1259.8,868.029 1260.44,859.226 1260.72,850.422 1260.74,841.619 1260.62,832.816 1260.47,824.013 1260.42,815.209 1260.57,806.406 1261.04,797.603 1261.91,788.799 1263.25,779.996 1265.12,771.193 1267.53,762.39 1270.48,753.586 1273.96,744.783 1277.91,735.98 1282.26,727.177 1286.9,718.373 1291.73,709.57 1296.63,700.767 1301.44,691.963 1306.04,683.16 1310.29,674.357 1314.04,665.554 1317.16,656.75 1319.54,647.947 1321.08,639.144 1321.69,630.34 1321.31,621.537 1319.9,612.734 1317.44,603.931 1313.95,595.127 1309.44,586.324 1303.97,577.521 1297.61,568.717 1290.44,559.914 1282.56,551.111 1274.08,542.308 1265.11,533.504 1255.78,524.701 1246.21,515.898 1236.51,507.094 1226.8,498.291 1217.19,489.488 1207.76,480.685 1198.61,471.881 1189.8,463.078 1181.4,454.275 1173.46,445.471 1166,436.668 1159.06,427.865 1152.63,419.062 1146.74,410.258 1141.35,401.455 1136.47,392.652 1132.07,383.849 1128.13,375.045 1124.61,366.242 1121.49,357.439 1118.73,348.635 1116.3,339.832 1114.17,331.029 1112.3,322.226 1110.68,313.422 1109.26,304.619 1108.02,295.816 1106.94,287.012 1106,278.209 1105.16,269.406 1104.42,260.603 1103.76,251.799 1103.15,242.996 1102.59,234.193 1102.06,225.389 1101.55,216.586 1101.05,207.783 1100.55,198.98 1100.04,190.176 1077.6,190.176 1077.09,198.98 1076.59,207.783 1076.09,216.586 1075.58,225.389 1075.04,234.193 1074.48,242.996 1073.88,251.799 1073.21,260.603 1072.47,269.406 1071.64,278.209 1070.7,287.012 1069.62,295.816 1068.38,304.619 1066.96,313.422 1065.33,322.226 1063.47,331.029 1061.34,339.832 1058.91,348.635 1056.15,357.439 1053.03,366.242 1049.51,375.045 1045.56,383.849 1041.16,392.652 1036.28,401.455 1030.9,410.258 1025,419.062 1018.58,427.865 1011.64,436.668 1004.18,445.471 996.236,454.275 987.837,463.078 979.031,471.881 969.879,480.685 960.451,489.488 950.835,498.291 941.124,507.094 931.426,515.898 921.853,524.701 912.523,533.504 903.557,542.308 895.076,551.111 887.196,559.914 880.026,568.717 873.664,577.521 868.196,586.324 863.69,595.127 860.195,603.931 857.74,612.734 856.331,621.537 855.951,630.34 856.561,639.144 858.097,647.947 860.477,656.75 863.6,665.554 867.348,674.357 871.592,683.16 876.194,691.963 881.012,700.767 885.905,709.57 890.737,718.373 895.381,727.177 899.725,735.98 903.673,744.783 907.152,753.586 910.11,762.39 912.521,771.193 914.386,779.996 915.728,788.799 916.597,797.603 917.065,806.406 917.219,815.209 917.165,824.013 917.016,832.816 916.893,841.619 916.914,850.422 917.194,859.226 917.837,868.029 918.931,876.832 920.55,885.636 922.742,894.439 925.535,903.242 928.935,912.045 932.922,920.849 937.456,929.652 942.478,938.455 947.914,947.259 953.677,956.062 959.672,964.865 965.804,973.668 971.976,982.472 978.098,991.275 984.089,1000.08 989.879,1008.88 995.412,1017.68 1000.65,1026.49 1005.56,1035.29 1010.13,1044.09 1014.38,1052.9 1018.3,1061.7 1021.93,1070.5 1025.3,1079.31 1028.44,1088.11 1031.38,1096.91 1034.17,1105.72 1036.85,1114.52 1039.43,1123.32 1041.95,1132.13 1044.43,1140.93 1046.88,1149.73 1049.32,1158.54 1051.73,1167.34 1054.13,1176.14 1056.51,1184.95 1058.86,1193.75 1061.16,1202.55 1116.48,1202.55 "></polyline>
<path clip-path="url(#clip302)" d="M1704.86 1200.96 L1708.92 1191.67 L1713.29 1182.39 L1717.94 1173.11 L1722.88 1163.82 L1728.11 1154.54 L1733.61 1145.26 L1739.37 1135.97 L1745.39 1126.69 L1751.64 1117.41 L1758.12 1108.12 L1764.81 1098.84 L1771.7 1089.55 L1778.76 1080.27 L1785.98 1070.99 L1793.33 1061.7 L1800.79 1052.42 L1808.32 1043.14 L1815.89 1033.85 L1823.46 1024.57 L1830.98 1015.29 L1838.4 1006 L1845.67 996.721 L1852.72 987.438 L1859.5 978.154 L1865.94 968.871 L1872 959.587 L1877.6 950.304 L1882.72 941.021 L1887.3 931.737 L1891.32 922.454 L1894.76 913.17 L1897.62 903.887 L1899.91 894.604 L1901.64 885.32 L1902.85 876.037 L1903.57 866.754 L1903.85 857.47 L1903.75 848.187 L1903.31 838.903 L1902.59 829.62 L1901.63 820.337 L1900.47 811.053 L1899.14 801.77 L1897.67 792.486 L1896.06 783.203 L1894.31 773.92 L1892.41 764.636 L1890.33 755.353 L1888.05 746.069 L1885.52 736.786 L1882.7 727.503 L1879.54 718.219 L1876.01 708.936 L1872.08 699.652 L1867.7 690.369 L1862.85 681.086 L1857.54 671.802 L1851.76 662.519 L1845.53 653.235 L1838.88 643.952 L1831.84 634.669 L1824.48 625.385 L1816.85 616.102 L1809.02 606.818 L1801.07 597.535 L1793.07 588.252 L1785.11 578.968 L1777.25 569.685 L1769.56 560.401 L1762.12 551.118 L1754.97 541.835 L1748.18 532.551 L1741.76 523.268 L1735.76 513.984 L1730.19 504.701 L1725.06 495.418 L1720.37 486.134 L1716.11 476.851 L1712.27 467.568 L1708.83 458.284 L1705.75 449.001 L1703.02 439.717 L1700.59 430.434 L1698.44 421.151 L1696.53 411.867 L1694.84 402.584 L1693.31 393.3 L1691.94 384.017 L1690.69 374.734 L1689.53 365.45 L1688.45 356.167 L1687.43 346.883 L1686.46 337.6 L1685.52 328.317 L1684.61 319.033 L1683.73 309.75 L1682.88 300.466 L1682.05 291.183 L1681.26 281.9 L1680.51 272.616 L1679.79 263.333 L1679.13 254.049 L1678.52 244.766 L1677.97 235.483 L1677.49 226.199 L1677.06 216.916 L1676.71 207.632 L1676.42 198.349 L1676.19 189.066 L1676.01 179.782 L1675.89 170.499 L1675.8 161.215 L1675.75 151.932 L1675.72 142.649 L1675.7 133.365 L1675.69 124.082 L1675.67 114.799 L1675.64 105.515 L1675.59 96.2317 L1666.38 96.2317 L1666.33 105.515 L1666.3 114.799 L1666.28 124.082 L1666.27 133.365 L1666.25 142.649 L1666.22 151.932 L1666.17 161.215 L1666.09 170.499 L1665.96 179.782 L1665.79 189.066 L1665.56 198.349 L1665.26 207.632 L1664.91 216.916 L1664.49 226.199 L1664 235.483 L1663.45 244.766 L1662.84 254.049 L1662.18 263.333 L1661.47 272.616 L1660.71 281.9 L1659.92 291.183 L1659.09 300.466 L1658.24 309.75 L1657.36 319.033 L1656.45 328.317 L1655.51 337.6 L1654.54 346.883 L1653.52 356.167 L1652.44 365.45 L1651.28 374.734 L1650.03 384.017 L1648.66 393.3 L1647.14 402.584 L1645.44 411.867 L1643.53 421.151 L1641.38 430.434 L1638.96 439.717 L1636.22 449.001 L1633.15 458.284 L1629.7 467.568 L1625.86 476.851 L1621.6 486.134 L1616.91 495.418 L1611.78 504.701 L1606.21 513.984 L1600.21 523.268 L1593.8 532.551 L1587 541.835 L1579.85 551.118 L1572.41 560.401 L1564.73 569.685 L1556.87 578.968 L1548.9 588.252 L1540.9 597.535 L1532.95 606.818 L1525.12 616.102 L1517.49 625.385 L1510.13 634.669 L1503.09 643.952 L1496.44 653.235 L1490.21 662.519 L1484.43 671.802 L1479.12 681.086 L1474.28 690.369 L1469.9 699.652 L1465.96 708.936 L1462.43 718.219 L1459.28 727.503 L1456.46 736.786 L1453.92 746.069 L1451.64 755.353 L1449.56 764.636 L1447.66 773.92 L1445.91 783.203 L1444.31 792.486 L1442.83 801.77 L1441.51 811.053 L1440.35 820.337 L1439.39 829.62 L1438.66 838.903 L1438.22 848.187 L1438.12 857.47 L1438.4 866.754 L1439.13 876.037 L1440.33 885.32 L1442.06 894.604 L1444.35 903.887 L1447.21 913.17 L1450.65 922.454 L1454.68 931.737 L1459.26 941.021 L1464.37 950.304 L1469.98 959.587 L1476.03 968.871 L1482.47 978.154 L1489.25 987.438 L1496.3 996.721 L1503.57 1006 L1510.99 1015.29 L1518.51 1024.57 L1526.08 1033.85 L1533.65 1043.14 L1541.18 1052.42 L1548.64 1061.7 L1555.99 1070.99 L1563.21 1080.27 L1570.28 1089.55 L1577.16 1098.84 L1583.85 1108.12 L1590.33 1117.41 L1596.59 1126.69 L1602.6 1135.97 L1608.36 1145.26 L1613.86 1154.54 L1619.09 1163.82 L1624.03 1173.11 L1628.69 1182.39 L1633.05 1191.67 L1637.12 1200.96 L1704.86 1200.96  Z" fill="#009af9" fill-rule="evenodd" fill-opacity="1"></path>
<polyline clip-path="url(#clip302)" style="stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none" points="1704.86,1200.96 1708.92,1191.67 1713.29,1182.39 1717.94,1173.11 1722.88,1163.82 1728.11,1154.54 1733.61,1145.26 1739.37,1135.97 1745.39,1126.69 1751.64,1117.41 1758.12,1108.12 1764.81,1098.84 1771.7,1089.55 1778.76,1080.27 1785.98,1070.99 1793.33,1061.7 1800.79,1052.42 1808.32,1043.14 1815.89,1033.85 1823.46,1024.57 1830.98,1015.29 1838.4,1006 1845.67,996.721 1852.72,987.438 1859.5,978.154 1865.94,968.871 1872,959.587 1877.6,950.304 1882.72,941.021 1887.3,931.737 1891.32,922.454 1894.76,913.17 1897.62,903.887 1899.91,894.604 1901.64,885.32 1902.85,876.037 1903.57,866.754 1903.85,857.47 1903.75,848.187 1903.31,838.903 1902.59,829.62 1901.63,820.337 1900.47,811.053 1899.14,801.77 1897.67,792.486 1896.06,783.203 1894.31,773.92 1892.41,764.636 1890.33,755.353 1888.05,746.069 1885.52,736.786 1882.7,727.503 1879.54,718.219 1876.01,708.936 1872.08,699.652 1867.7,690.369 1862.85,681.086 1857.54,671.802 1851.76,662.519 1845.53,653.235 1838.88,643.952 1831.84,634.669 1824.48,625.385 1816.85,616.102 1809.02,606.818 1801.07,597.535 1793.07,588.252 1785.11,578.968 1777.25,569.685 1769.56,560.401 1762.12,551.118 1754.97,541.835 1748.18,532.551 1741.76,523.268 1735.76,513.984 1730.19,504.701 1725.06,495.418 1720.37,486.134 1716.11,476.851 1712.27,467.568 1708.83,458.284 1705.75,449.001 1703.02,439.717 1700.59,430.434 1698.44,421.151 1696.53,411.867 1694.84,402.584 1693.31,393.3 1691.94,384.017 1690.69,374.734 1689.53,365.45 1688.45,356.167 1687.43,346.883 1686.46,337.6 1685.52,328.317 1684.61,319.033 1683.73,309.75 1682.88,300.466 1682.05,291.183 1681.26,281.9 1680.51,272.616 1679.79,263.333 1679.13,254.049 1678.52,244.766 1677.97,235.483 1677.49,226.199 1677.06,216.916 1676.71,207.632 1676.42,198.349 1676.19,189.066 1676.01,179.782 1675.89,170.499 1675.8,161.215 1675.75,151.932 1675.72,142.649 1675.7,133.365 1675.69,124.082 1675.67,114.799 1675.64,105.515 1675.59,96.2317 1666.38,96.2317 1666.33,105.515 1666.3,114.799 1666.28,124.082 1666.27,133.365 1666.25,142.649 1666.22,151.932 1666.17,161.215 1666.09,170.499 1665.96,179.782 1665.79,189.066 1665.56,198.349 1665.26,207.632 1664.91,216.916 1664.49,226.199 1664,235.483 1663.45,244.766 1662.84,254.049 1662.18,263.333 1661.47,272.616 1660.71,281.9 1659.92,291.183 1659.09,300.466 1658.24,309.75 1657.36,319.033 1656.45,328.317 1655.51,337.6 1654.54,346.883 1653.52,356.167 1652.44,365.45 1651.28,374.734 1650.03,384.017 1648.66,393.3 1647.14,402.584 1645.44,411.867 1643.53,421.151 1641.38,430.434 1638.96,439.717 1636.22,449.001 1633.15,458.284 1629.7,467.568 1625.86,476.851 1621.6,486.134 1616.91,495.418 1611.78,504.701 1606.21,513.984 1600.21,523.268 1593.8,532.551 1587,541.835 1579.85,551.118 1572.41,560.401 1564.73,569.685 1556.87,578.968 1548.9,588.252 1540.9,597.535 1532.95,606.818 1525.12,616.102 1517.49,625.385 1510.13,634.669 1503.09,643.952 1496.44,653.235 1490.21,662.519 1484.43,671.802 1479.12,681.086 1474.28,690.369 1469.9,699.652 1465.96,708.936 1462.43,718.219 1459.28,727.503 1456.46,736.786 1453.92,746.069 1451.64,755.353 1449.56,764.636 1447.66,773.92 1445.91,783.203 1444.31,792.486 1442.83,801.77 1441.51,811.053 1440.35,820.337 1439.39,829.62 1438.66,838.903 1438.22,848.187 1438.12,857.47 1438.4,866.754 1439.13,876.037 1440.33,885.32 1442.06,894.604 1444.35,903.887 1447.21,913.17 1450.65,922.454 1454.68,931.737 1459.26,941.021 1464.37,950.304 1469.98,959.587 1476.03,968.871 1482.47,978.154 1489.25,987.438 1496.3,996.721 1503.57,1006 1510.99,1015.29 1518.51,1024.57 1526.08,1033.85 1533.65,1043.14 1541.18,1052.42 1548.64,1061.7 1555.99,1070.99 1563.21,1080.27 1570.28,1089.55 1577.16,1098.84 1583.85,1108.12 1590.33,1117.41 1596.59,1126.69 1602.6,1135.97 1608.36,1145.26 1613.86,1154.54 1619.09,1163.82 1624.03,1173.11 1628.69,1182.39 1633.05,1191.67 1637.12,1200.96 1704.86,1200.96 "></polyline>
</svg>
</div>
</div>



<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-03_julia-plots/omnibus.jpg" class="img-fluid figure-img" alt="Cover of 'Science Fiction Omnibus'"></p>
<figcaption>A science fiction omnibus. Yes I was getting lazy at this point</figcaption>
</figure>
</div>
</div></div></section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Honestly, at this point I don’t even <em>know</em> why I’m making the choices I’m making in this increasingly-unhinged series of posts↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Plotting Data in {Julia}},
  date = {2024-03-03},
  url = {https://blog.djnavarro.net/posts/2024-03-03_julia-plots},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Plotting Data in Julia.”</span> March 3,
2024. <a href="https://blog.djnavarro.net/posts/2024-03-03_julia-plots">https://blog.djnavarro.net/posts/2024-03-03_julia-plots</a>.
</div></div></section></div> ]]></description>
  <category>Julia</category>
  <category>Data Visualisation</category>
  <guid>https://blog.djnavarro.net/posts/2024-03-03_julia-plots/</guid>
  <pubDate>Sat, 02 Mar 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with data in Julia</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/</link>
  <description><![CDATA[ 





<!--------------- post begins here ----------------->
<p>This is the second of an impromptu three-part series in which, in a decision I am rapidly starting to regret as these posts get longer and longer, I decided it was time to teach myself how to use Julia. In the <a href="../../posts/2024-03-01_julia-foundation/">first part</a> of the series I looked at some foundational concepts (types, functions, pipes, etc), though in a completely idiosyncratic way and ignoring concepts that I find boring (loops, conditionals). I mean, this is a blog where I write “notes to self”. It’s not a textbook.</p>
<p>Anyway… my thought for the second part of the series is to shift away from core programming concepts and instead look at a practical task that data analysts have to work with on a daily basis: wrangling rectangular data sets. In other words, I’m going to talk about data frames and tools for manipulating them.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/mass-effect-1.jpg" class="img-fluid figure-img" alt="Reimagined Mass Effect 1 cover showing the Normandy departing the Citadel"></p>
<figcaption><a href="https://www.deviantart.com/lagota/art/Mass-Effect-1-Final-Poster-295106207">Mass Effect 1</a>. By user <a href="https://www.deviantart.com/lagota">lagota</a> on Deviant Art, released under a CC-BY-NC-ND licence. The astute observer will notice that at no point in this post does the main text reference the <em>Mass Effect</em> games. But I don’t care, because they are awesome.</figcaption>
</figure>
</div>
</div></div><section id="creating-data-frames" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="creating-data-frames">Creating data frames</h2>
<p>Unlike R, Julia doesn’t come with a native class to represent data frames. Instead, there is the <a href="https://dataframes.juliadata.org/stable/">DataFrames</a> package which provides the functionality needed to represent tabular data. The <code>DataFrame()</code> function allows you to manually construct a data frame, with a syntax that feels very familiar to an R user. Vectors passed as inputs to <code>DataFrame()</code> must all have one element for every row in the data frame, or else be length one.</p>
<p>Continuing the vague science fiction theme that started in the previous post, I’ll start by constructing a small data frame listing the novels from William Gibson’s <em>Sprawl</em> trilogy, which I enjoyed considerably more than Asimov’s <em>Foundation</em> series that (very very loosely) inspired the TV show of the same name. Anyway, here’s how you do that:</p>
<div id="dd5dc32d" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">DataFrames</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">sprawl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DataFrame</span>(</span>
<span id="cb1-4">  title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Neuromancer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count Zero"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mona Lisa Overdrive"</span>],</span>
<span id="cb1-5">  published <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1984</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1986</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1988</span>], </span>
<span id="cb1-6">  author <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"William Gibson"</span></span>
<span id="cb1-7">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>
<div><div style="float: left;"><span>3×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">title</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">published</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">author</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String">String</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String">String</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Neuromancer</td>
<td style="text-align: right;">1984</td>
<td style="text-align: left;">William Gibson</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Count Zero</td>
<td style="text-align: right;">1986</td>
<td style="text-align: left;">William Gibson</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Mona Lisa Overdrive</td>
<td style="text-align: right;">1988</td>
<td style="text-align: left;">William Gibson</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Data frames have pretty print methods so the output looks quite nice here. But internally it’s essentially a collection of vectors, one for each column. For example, <code>sprawl.title</code> is a vector of three strings:</p>
<div id="b2980dca" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1">sprawl.title</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>3-element Vector{String}:
 "Neuromancer"
 "Count Zero"
 "Mona Lisa Overdrive"</code></pre>
</div>
</div>
<p>In real life though, you don’t usually construct a data frame manually. It’s more typical to import a data frame from a CSV file or similar. To that end, we can take advantage of the CSV package to read data from a data file:</p>
<div id="cfea3b38" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">CSV</span></span>
<span id="cb4-2">starwars_csv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CSV.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">File</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"starwars.csv"</span>; missingstring <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA"</span>);</span></code></pre></div>
</div>
<p>This <code>starwars_csv</code> object isn’t a data frame yet, it’s an object of type CSV.file. Data frames are <em>columnar</em> data structures (i.e., a collection of vectors, one per column), whereas a CSV.file is a <em>rowwise</em> data structure (i.e., a collection of CSV.row objects, one per row). You could test this for yourself by taking a look at the first element <code>starwars_csv[1]</code> to verify that it’s a representation of a single CSV row, but the output isn’t very interesting so I’m going to move on.</p>
<p>To convert this CSV.file object to a DataFrame object, we can simply pass it to <code>DataFrame()</code>, and this time around the data we end up with is a little bit richer than the last one (even if the <em>Star Wars</em> movies are incredibly boring compared to the infinitely superior <em>Sprawl</em> novels…)</p>
<div id="aafb4185" class="cell page-columns page-full" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb5-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DataFrame</span>(starwars_csv)</span></code></pre></div>
<div class="cell-output cell-output-display column-page" data-execution_count="6">
<div>
<div><div style="float: left;"><span>87×11 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">62 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">eye_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">birth_year</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">167</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">gold</td>
<td style="text-align: left;">yellow</td>
<td style="text-align: right;">112.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: right;">96</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">white, blue</td>
<td style="text-align: left;">red</td>
<td style="text-align: right;">33.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Naboo</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">yellow</td>
<td style="text-align: right;">41.9</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: right;">150</td>
<td style="text-align: right;">49.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Alderaan</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">120.0</td>
<td style="text-align: left;">brown, grey</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">52.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Beru Whitesun Lars</td>
<td style="text-align: right;">165</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">47.0</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">R5-D4</td>
<td style="text-align: right;">97</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">white, red</td>
<td style="text-align: left;">red</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Biggs Darklighter</td>
<td style="text-align: right;">183</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
<td style="text-align: right;">24.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Obi-Wan Kenobi</td>
<td style="text-align: right;">182</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">auburn, white</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue-gray</td>
<td style="text-align: right;">57.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Stewjon</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Anakin Skywalker</td>
<td style="text-align: right;">188</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">41.9</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Wilhuff Tarkin</td>
<td style="text-align: right;">180</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">auburn, grey</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">64.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Eriadu</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Chewbacca</td>
<td style="text-align: right;">228</td>
<td style="text-align: right;">112.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">unknown</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right;">200.0</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Kashyyyk</td>
<td style="text-align: left;">Wookiee</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">76</td>
<td style="text-align: left;">San Hill</td>
<td style="text-align: right;">191</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">grey</td>
<td style="text-align: left;">gold</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Muunilinst</td>
<td style="text-align: left;">Muun</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">77</td>
<td style="text-align: left;">Shaak Ti</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">57.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">red, blue, white</td>
<td style="text-align: left;">black</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Shili</td>
<td style="text-align: left;">Togruta</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">78</td>
<td style="text-align: left;">Grievous</td>
<td style="text-align: right;">216</td>
<td style="text-align: right;">159.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">brown, white</td>
<td style="text-align: left;">green, yellow</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Kalee</td>
<td style="text-align: left;">Kaleesh</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">79</td>
<td style="text-align: left;">Tarfful</td>
<td style="text-align: right;">234</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">blue</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Kashyyyk</td>
<td style="text-align: left;">Wookiee</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">80</td>
<td style="text-align: left;">Raymus Antilles</td>
<td style="text-align: right;">188</td>
<td style="text-align: right;">79.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Alderaan</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">81</td>
<td style="text-align: left;">Sly Moore</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">48.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">pale</td>
<td style="text-align: left;">white</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Umbara</td>
<td style="text-align: left; font-style: italic;">missing</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">82</td>
<td style="text-align: left;">Tion Medon</td>
<td style="text-align: right;">206</td>
<td style="text-align: right;">80.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">grey</td>
<td style="text-align: left;">black</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Utapau</td>
<td style="text-align: left;">Pau'an</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">83</td>
<td style="text-align: left;">Finn</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">dark</td>
<td style="text-align: left;">dark</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">84</td>
<td style="text-align: left;">Rey</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">hazel</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">85</td>
<td style="text-align: left;">Poe Dameron</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">86</td>
<td style="text-align: left;">BB8</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">black</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">87</td>
<td style="text-align: left;">Captain Phasma</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">unknown</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">Human</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
<section id="subsetting-data-frames-i" class="level2">
<h2 class="anchored" data-anchor-id="subsetting-data-frames-i">Subsetting data frames I</h2>
<p>The core tools for working with data frames in Julia feel quite familiar coming from either Matlab or R. You can subset a data frame by passing it numeric indices, for instance:</p>
<div id="b9555e67" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb6-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>
<div><div style="float: left;"><span>6×5 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">167</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">gold</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: right;">96</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">white, blue</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">white</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: right;">150</td>
<td style="text-align: right;">49.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">120.0</td>
<td style="text-align: left;">brown, grey</td>
<td style="text-align: left;">light</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>However, there are other methods for subsetting a data frame. You can also filter the rows of a data frame using logical expressions. Again, this is quite similar to how it works in base R. For instance, I can construct a boolean vector <code>fair_skinned</code> which indicates whether the corresponding row in <code>starwars</code> refers to a person with fair skin:<sup>1</sup></p>
<div id="180efcfa" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb7-1">fair_skinned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> starwars.skin_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fair"</span>;</span></code></pre></div>
</div>
<p>Now that I have these indices, I can create a subset of the data frame containing only those rows referring to fair skinned person (or robot, or…)</p>
<div id="cb8f1ba4" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb8-1">starwars[fair_skinned, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>
<div><div style="float: left;"><span>17×5 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Obi-Wan Kenobi</td>
<td style="text-align: right;">182</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">auburn, white</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Anakin Skywalker</td>
<td style="text-align: right;">188</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Wilhuff Tarkin</td>
<td style="text-align: right;">180</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">auburn, grey</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Han Solo</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">80.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Wedge Antilles</td>
<td style="text-align: right;">170</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Jek Tono Porkins</td>
<td style="text-align: right;">180</td>
<td style="text-align: right;">110.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">Boba Fett</td>
<td style="text-align: right;">183</td>
<td style="text-align: right;">78.2</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Mon Mothma</td>
<td style="text-align: right;">150</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">auburn</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Arvel Crynyd</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Qui-Gon Jinn</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">89.0</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Finis Valorum</td>
<td style="text-align: right;">170</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Ric Olié</td>
<td style="text-align: right;">183</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">14</td>
<td style="text-align: left;">Shmi Skywalker</td>
<td style="text-align: right;">163</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">15</td>
<td style="text-align: left;">Cliegg Lars</td>
<td style="text-align: right;">183</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">16</td>
<td style="text-align: left;">Dooku</td>
<td style="text-align: right;">193</td>
<td style="text-align: right;">80.0</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">fair</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">17</td>
<td style="text-align: left;">Jocasta Nu</td>
<td style="text-align: right;">167</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">fair</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>On the columns side, we also have more flexible options for subsetting a data frame. For example, instead of referring to columns using numerical indices, we can select the variables that we want to keep using their names:</p>
<div id="1e28a388" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb9-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>gender, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>
<div><div style="float: left;"><span>6×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Naboo</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Alderaan</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Referring to columns by name is very handy in practice, and there’s some hidden Julia concepts here that I didn’t talk about in the last post. So with that in mind I’ll digress slightly to talk about…</p>
</section>
<section id="symbols" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="symbols">Symbols</h2>
<p>Looking at the syntax in the last code cell, it’s fairly clear that <code>[:name, :gender, :homeworld]</code> is a vector of three… somethings, but it’s not immediately obvious what <code>:name</code> actually is. Much like R (and also inherited from Lisp) Julia has extensive <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/">Metaprogramming</a> capabilities because it has the ability to represent Julia code as data structures within the language itself. In the simplest case, we have <a href="https://docs.julialang.org/en/v1/base/base/#Core.Symbol">Symbols</a> like <code>:name</code>, which are constructed using the quotation operator <code>:</code> and used to represent object names. So as you can see, <code>:name</code> is an object of type Symbol:</p>
<div id="f4913bec" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>Symbol</code></pre>
</div>
</div>
<p>Symbols can be assigned to variables, and those variables can be used as part of expressions to be evaluated. In the code below I create a variable <code>colname</code> that stores the symbolic representation of a column name that I can invoke later:</p>
<div id="e44a9159" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb12-1">colname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>title</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>:title</code></pre>
</div>
</div>
<p>As a simple example of how symbols can be used in practice, here’s a Julia implementation of something like the <code>pull()</code> function in the R package dplyr, which allows the user to extract a single column from a data frame:</p>
<div id="ae4b7f1d" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">DataFrame</span>, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Symbol</span>)</span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getproperty</span>(data, column)</span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span></code></pre></div>
</div>
<p>In this code I’m using the <code>getproperty()</code> function to do the same job that the <code>.</code> operator would do in an expression like <code>sprawl.title</code>. So here it is in action:</p>
<div id="dd750959" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(sprawl, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>title)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>3-element Vector{String}:
 "Neuromancer"
 "Count Zero"
 "Mona Lisa Overdrive"</code></pre>
</div>
</div>
<p>I know, it’s exciting right?</p>
<p>Okay yeah, at the moment this <code>pull()</code> function isn’t very useful at all – <code>pull(sprawl, :title)</code> is really not an improvement on <code>sprawl.title</code> – but a little bit later when I get around to talking about data wrangling pipelines it might turn out to be a little less silly.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/mass-effect-2.jpg" class="img-fluid figure-img" alt="Reimagined Mass Effect 2 cover showing the Normandy attacked by a Collector ship"></p>
<figcaption><a href="https://www.deviantart.com/lagota/art/Mass-Effect-2-Final-Poster-294884760">Mass Effect 2</a>. By user <a href="https://www.deviantart.com/lagota">lagota</a> on Deviant Art, released under a CC-BY-NC-ND licence. Still the strangest of the three games: the main storyline with the Collectors is a hot mess, but it has the best side quests in the series, and the best romance too (Thane, obviously…)</figcaption>
</figure>
</div>
</div></div></section>
<section id="subsetting-data-frames-ii" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="subsetting-data-frames-ii">Subsetting data frames II</h2>
<p>Anyway, getting back on track, the key thing to realise is that when I wrote <code>[:name, :gender, :homeworld]</code> earlier what I was really doing is constructing a vector of symbols, and it’s those symbols that I was using to select the columns that I wanted to retain. The DataFrames package also supplies a various selector functions that can be used to extract a subset of the columns. For example, <code>Not()</code> will select every column except the ones that are passed to <code>Not()</code>. So if I want to drop the hair color, eye color, sex, and homeworld columns, I could do this:</p>
<div id="26533ed2" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb17-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Not</span>([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>hair_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>eye_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sex, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld])]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>
<div><div style="float: left;"><span>6×7 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">birth_year</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Int64}">Int64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">172</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">fair</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">167</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left;">gold</td>
<td style="text-align: right;">112.0</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: right;">96</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left;">white, blue</td>
<td style="text-align: right;">33.0</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Droid</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">202</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">white</td>
<td style="text-align: right;">41.9</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: right;">150</td>
<td style="text-align: right;">49.0</td>
<td style="text-align: left;">light</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Human</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">178</td>
<td style="text-align: right;">120.0</td>
<td style="text-align: left;">light</td>
<td style="text-align: right;">52.0</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Human</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>The <code>Between()</code> selector does what you’d think. It returns all columns in between two named columns:</p>
<div id="4519ff10" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb18-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Between</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sex, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>
<div><div style="float: left;"><span>6×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Naboo</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">female</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">Alderaan</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">male</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">Tatooine</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>There’s also an <code>All()</code> selector that returns all columns, but that’s not super exciting. More interesting, I think, is the <code>Cols()</code> selector which takes a predicate function as input.<sup>2</sup> The column names are passed to the function, and they are included in the output if that function returns <code>true</code>. So, for example, if I want to extract the columns in the data whose name ends in <code>"color"</code> I can do this:</p>
<div id="14faee00" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb19-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Cols</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">endswith</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"color"</span>))]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>
<div><div style="float: left;"><span>6×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">eye_color</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">blond</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blue</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">gold</td>
<td style="text-align: left;">yellow</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left;">white, blue</td>
<td style="text-align: left;">red</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">yellow</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">brown, grey</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">blue</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>I find myself liking these selector functions. Coming from the tidyverse style in R where tidyselect is used to govern column selection it feels… not terribly different. Superficially different, perhaps, but the combination of <code>All()</code>, <code>Not()</code>, <code>Between()</code>, and <code>Cols()</code> seems to provide a fairly powerful and (I think?) user-friendly way to select columns.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/mass-effect-3.jpg" class="img-fluid figure-img" alt="Reimagined Mass Effect 3 cover showing the Normandy facing a fleet fo reapers"></p>
<figcaption><a href="https://www.deviantart.com/lagota/art/Mass-Effect-3-Final-Poster-290367120">Mass Effect 3</a>. By user <a href="https://www.deviantart.com/lagota">lagota</a> on Deviant Art, released under a CC-BY-NC-ND licence. No, I will not be drawn into expressing a comment on the ending. I love ME3, in part because every Shepard I’ve ever played comes into this game already completely broken and makes unhinged choices because of it…</figcaption>
</figure>
</div>
</div></div></section>
<section id="data-wrangling-i-groupby-combine" class="level2">
<h2 class="anchored" data-anchor-id="data-wrangling-i-groupby-combine">Data wrangling I: groupby, combine</h2>
<p>Up to this point I haven’t really done any data wrangling with the <code>starwars</code> data. Okay, yeah, to some extent there’s some data wrangling implied by the discussion of subsetting in the previous sections, but in truth none of that is how you’d normally go about it in a more real-world context. So to that end I’ll talk about some of the data wrangling functions that DataFrames supplies.</p>
<p>Let’s start with something simple, and not very useful. Suppose what I want to do here is group the data by gender <em>and</em> sex, and then for every unique combination of gender and sex that appears in the data set have Julia pick one row at random and report the corresponding mass. To do that is a two step operation. First, I need to use <code>groupby()</code> to describe the groups, and then I need to call <code>combine()</code> to tell Julia what function to apply separately for each group. This does the trick:</p>
<div id="d8b06edf" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">combine</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">groupby</span>(starwars, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>gender, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sex]), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> rand) </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>
<div><div style="float: left;"><span>6×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass_rand</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">male</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">none</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">hermaphroditic</td>
<td style="text-align: right;">1358.0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">none</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">57.0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right;">85.0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>In the call to <code>groupby(starwars, [:gender, :sex])</code> what Julia does is construct a grouped data frame (very similar to what you expect in R, really), and then this grouped data frame is passed to <code>combine()</code>. For each such group, we take the relevant subset of the <code>:mass</code> column and pass it to the <code>rand()</code> function, and by doing so a random mass is returned.</p>
<p>There’s some obvious limitations to note in my code here though. Firstly, I’m not using the pipe <code>|&gt;</code> at all, and while it’s sort of fine in this context because there’s only two steps in my data wrangling exercise, the code is going to get very ugly very quickly if I try to do something fancier.<sup>3</sup> So let’s start by fixing this.</p>
<p>As I mentioned in the first post in this series, one way I could transform this into a pipeline is to use the <a href="https://juliapackages.com/p/pipe">Pipe</a> package, which supplies a pipe that behaves very similarly to the base pipe in R. However, I’m not going to do that. Instead, I’m going to adopt a workflow where I use the Julia base pipe together with anonymous functions. Here’s the same code expressed in this kind of pipeline:</p>
<div id="c1aa1399" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb21-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">groupby</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>gender, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>sex]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">combine</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> rand)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>
<div><div style="float: left;"><span>6×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">gender</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass_rand</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">male</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">none</td>
<td style="text-align: right;">32.0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">masculine</td>
<td style="text-align: left;">hermaphroditic</td>
<td style="text-align: right;">1358.0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">none</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">feminine</td>
<td style="text-align: left;">female</td>
<td style="text-align: right;">55.0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: left; font-style: italic;">missing</td>
<td style="text-align: right; font-style: italic;">missing</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>I genuinely wasn’t expecting this when I first learned about the restrictiveness of the Julia pipe, but I think I really like this syntax. Because you <em>have</em> to define an anonymous function at each step in the pipeline, I find noticing that:</p>
<ul>
<li>It’s only slightly more verbose than the R style, and has the advantage (to my mind) that you can use this workflow without having to think too much about Julia macros</li>
<li>The input argument (in this case <code>d</code>) serves the same role that the placeholder (<code>_</code> for the R base pipe and the Julia “Pipe-package-pipe”, or <code>.</code> for the R magrittr pipe)</li>
<li>You have the ability to subtly remind yourself of the internal workings of your pipeline by naming the input argument cleverly. If the input to this step in the pipeline is a data frame I tend to call the input argument <code>d</code>, but if – as sometimes happens in real life – at some point in the pipeline I pull out a column and do a bit of processing on that before returning the results, I might find it handy to use something else to remind myself that this step is applied to string variables.</li>
</ul>
<p>As regards that third point, here’s an example using the <code>pull()</code> function that I defined earlier that does exactly this:</p>
<div id="deae49be" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb22-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>skin_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fair"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-4">  n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], n)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>17-element Vector{SubString{String31}}:
 "Luke"
 "Obi-Wan"
 "Anakin"
 "Wilhuff"
 "Han"
 "Wedge"
 "Jek"
 "Boba"
 "Mon"
 "Arvel"
 "Qui-Gon"
 "Finis"
 "Ric"
 "Shmi"
 "Cliegg"
 "Dooku"
 "Jocasta"</code></pre>
</div>
</div>
<p>Again, not the most exciting pipeline in the world – all I’m doing is returning the first names of all the fair-skinned characters – but it does highlight the fact that the combination of base pipe and anonymous function syntax in Julia works rather well if you’re inclined to write in this style.</p>
<p>In fact, the ability to name the input argument is especially helpful in the last line of the pipe where there are two separate functions being used, one of which is a call to <code>map()</code> applied to the <code>:name</code> column (and takes <code>n</code> as the input), and another that is used by <code>map()</code> when extracting the first name out of every name (where I’ve unimaginatively used <code>x</code> to name my input).</p>
<p>In any case, though it may not be to everyone’s tastes, I’ve found a pipe-centric style that I can use in Julia that I don’t mind, so it’s time to move on and look at some other functions available in the DataFrames package.</p>
</section>
<section id="data-wrangling-ii-subset-select-sort" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-wrangling-ii-subset-select-sort">Data wrangling II: subset, select, sort</h2>
<p>In the previous section I gave an example of a workflow that uses <code>groupby()</code> and <code>combine()</code> to compute summaries of a data frame. But there are other functions that come in very handy for data wrangling: I can use <code>subset()</code> to choose a subset of rows<sup>4</sup>, <code>select()</code> to choose a subset of columns, and <code>sort()</code> to order the rows according to some criterion. For example, here’s how I could find all the characters from Tattooine and sort them by weight:</p>
<div id="9a203190" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb24-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tatooine"</span>, skipmissing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-4">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>
<div><div style="float: left;"><span>10×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, Float64}">Float64?</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">R5-D4</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Beru Whitesun Lars</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Biggs Darklighter</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Anakin Skywalker</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">120.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Shmi Skywalker</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Cliegg Lars</td>
<td style="text-align: right; font-style: italic;">missing</td>
<td style="text-align: left;">Tatooine</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Notice that this time I’ve been a little smarter about handling missing values. In the call to <code>subset()</code> I specified <code>skipmissing=true</code> to drop all cases where the homeworld is missing. The <code>sort()</code> function doesn’t have a <code>skipmissing</code> argument, so the results include the two cases where someone from Tatooine doesn’t have a stated weight. But hopefully it’s clear that I could easily subset the data again to remove any cases with missing values on the <code>:mass</code> column if I wanted to. In fact, the DataFrames package supplies functions <code>dropmissing()</code>, <code>allowmissing()</code>, and <code>completecases()</code> that could be used for that purpose. For example:</p>
<div id="12b278b9" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb25-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb25-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tatooine"</span>, skipmissing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-4">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass, rev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb25-5">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dropmissing</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>mass)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>
<div><div style="float: left;"><span>8×3 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">mass</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Float64">Float64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">136.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">120.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Biggs Darklighter</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Anakin Skywalker</td>
<td style="text-align: right;">84.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">77.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Beru Whitesun Lars</td>
<td style="text-align: right;">75.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">R5-D4</td>
<td style="text-align: right;">32.0</td>
<td style="text-align: left;">Tatooine</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>The missing <code>:mass</code> rows are now gone, and – just for my own personal amusement – this time I’ve sorted the results in order of descending weight by setting <code>rev=true</code>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/star-wars-1.jpg" class="img-fluid figure-img" alt="Star wars X-wing and tie-fighters in front of the Death Star"></p>
<figcaption><a href="https://www.deviantart.com/lagota/art/Stay-in-attack-position-526775903">Star Wars</a>. By user <a href="https://www.deviantart.com/lagota">lagota</a> on Deviant Art, released under a CC-BY-NC-ND licence. If I had more Mass Effect images to use here I would but alas, I do not.</figcaption>
</figure>
</div>
</div></div></section>
<section id="data-wrangling-iii-stack" class="level2">
<h2 class="anchored" data-anchor-id="data-wrangling-iii-stack">Data wrangling III: stack</h2>
<p>Okay, now it’s time to start thinking about how to reshape a data frame in Julia. Consider this, as the beginnings of a pipeline:</p>
<div id="5b5d9411" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb26-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>eye_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>skin_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>hair_color])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>
<div><div style="float: left;"><span>87×4 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">62 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">eye_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">skin_color</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">hair_color</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String15}">String15?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: left;">blue</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blond</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: left;">yellow</td>
<td style="text-align: left;">gold</td>
<td style="text-align: left; font-style: italic;">missing</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: left;">red</td>
<td style="text-align: left;">white, blue</td>
<td style="text-align: left; font-style: italic;">missing</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: left;">yellow</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: left;">blue</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown, grey</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Beru Whitesun Lars</td>
<td style="text-align: left;">blue</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">R5-D4</td>
<td style="text-align: left;">red</td>
<td style="text-align: left;">white, red</td>
<td style="text-align: left; font-style: italic;">missing</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Biggs Darklighter</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">black</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Obi-Wan Kenobi</td>
<td style="text-align: left;">blue-gray</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">auburn, white</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Anakin Skywalker</td>
<td style="text-align: left;">blue</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">blond</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Wilhuff Tarkin</td>
<td style="text-align: left;">blue</td>
<td style="text-align: left;">fair</td>
<td style="text-align: left;">auburn, grey</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Chewbacca</td>
<td style="text-align: left;">blue</td>
<td style="text-align: left;">unknown</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">76</td>
<td style="text-align: left;">San Hill</td>
<td style="text-align: left;">gold</td>
<td style="text-align: left;">grey</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">77</td>
<td style="text-align: left;">Shaak Ti</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">red, blue, white</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">78</td>
<td style="text-align: left;">Grievous</td>
<td style="text-align: left;">green, yellow</td>
<td style="text-align: left;">brown, white</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">79</td>
<td style="text-align: left;">Tarfful</td>
<td style="text-align: left;">blue</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">80</td>
<td style="text-align: left;">Raymus Antilles</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">81</td>
<td style="text-align: left;">Sly Moore</td>
<td style="text-align: left;">white</td>
<td style="text-align: left;">pale</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">82</td>
<td style="text-align: left;">Tion Medon</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">grey</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">83</td>
<td style="text-align: left;">Finn</td>
<td style="text-align: left;">dark</td>
<td style="text-align: left;">dark</td>
<td style="text-align: left;">black</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">84</td>
<td style="text-align: left;">Rey</td>
<td style="text-align: left;">hazel</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">85</td>
<td style="text-align: left;">Poe Dameron</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">light</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">86</td>
<td style="text-align: left;">BB8</td>
<td style="text-align: left;">black</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">87</td>
<td style="text-align: left;">Captain Phasma</td>
<td style="text-align: left;">unknown</td>
<td style="text-align: left;">none</td>
<td style="text-align: left;">none</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Suppose what I want to do is transform this into a data set that has variables <code>:name</code>, <code>:body_part</code>, and <code>:color</code>. In other words I want to pivot this into a long-form data set where each character is represented by three rows, and has one row that specifies the colour of the relevant body part. We can do this with the <code>stack()</code> function:</p>
<div id="ec70a683" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb27-1">starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>eye_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>skin_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>hair_color]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stack</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>eye_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>skin_color, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>hair_color],</span>
<span id="cb27-4">    variable_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>body_part,</span>
<span id="cb27-5">    value_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=:</span>color</span>
<span id="cb27-6">  )</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>
<div><div style="float: left;"><span>261×3 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">236 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">body_part</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">color</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String">String</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Union{Missing, String31}">String31?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">blue</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">yellow</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">red</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">yellow</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">blue</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Beru Whitesun Lars</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">blue</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">R5-D4</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">red</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Biggs Darklighter</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Obi-Wan Kenobi</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">blue-gray</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Anakin Skywalker</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">blue</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Wilhuff Tarkin</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">blue</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Chewbacca</td>
<td style="text-align: left;">eye_color</td>
<td style="text-align: left;">blue</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">250</td>
<td style="text-align: left;">San Hill</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">251</td>
<td style="text-align: left;">Shaak Ti</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">252</td>
<td style="text-align: left;">Grievous</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">253</td>
<td style="text-align: left;">Tarfful</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">254</td>
<td style="text-align: left;">Raymus Antilles</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">255</td>
<td style="text-align: left;">Sly Moore</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">256</td>
<td style="text-align: left;">Tion Medon</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">257</td>
<td style="text-align: left;">Finn</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">black</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">258</td>
<td style="text-align: left;">Rey</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">259</td>
<td style="text-align: left;">Poe Dameron</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">brown</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">260</td>
<td style="text-align: left;">BB8</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">none</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">261</td>
<td style="text-align: left;">Captain Phasma</td>
<td style="text-align: left;">hair_color</td>
<td style="text-align: left;">none</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</section>
<section id="data-wrangling-iv-unstack" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-wrangling-iv-unstack">Data wrangling IV: unstack</h2>
<p>We can also go the other way. Let’s start with a slightly different data frame called <code>census</code>, one that counts the number of characters of each species on each homeworld</p>
<div id="694ead5a" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb28-1">census <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> starwars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dropmissing</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>species]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">groupby</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>species]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb28-4">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">combine</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(n)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>count)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<div>
<div><div style="float: left;"><span>51×3 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">26 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">count</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: left;">Droid</td>
<td style="text-align: right;">2</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Naboo</td>
<td style="text-align: left;">Droid</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Alderaan</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">3</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Stewjon</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Eriadu</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Kashyyyk</td>
<td style="text-align: left;">Wookiee</td>
<td style="text-align: right;">2</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">Corellia</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">2</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Rodia</td>
<td style="text-align: left;">Rodian</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Nal Hutta</td>
<td style="text-align: left;">Hutt</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Naboo</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">5</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Kamino</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Trandosha</td>
<td style="text-align: left;">Trandoshan</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">40</td>
<td style="text-align: left;">Geonosis</td>
<td style="text-align: left;">Geonosian</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">41</td>
<td style="text-align: left;">Mirial</td>
<td style="text-align: left;">Mirialan</td>
<td style="text-align: right;">2</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">42</td>
<td style="text-align: left;">Serenno</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">43</td>
<td style="text-align: left;">Concord Dawn</td>
<td style="text-align: left;">Human</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">44</td>
<td style="text-align: left;">Zolan</td>
<td style="text-align: left;">Clawdite</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">45</td>
<td style="text-align: left;">Ojom</td>
<td style="text-align: left;">Besalisk</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">46</td>
<td style="text-align: left;">Kamino</td>
<td style="text-align: left;">Kaminoan</td>
<td style="text-align: right;">2</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">47</td>
<td style="text-align: left;">Skako</td>
<td style="text-align: left;">Skakoan</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">48</td>
<td style="text-align: left;">Muunilinst</td>
<td style="text-align: left;">Muun</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">49</td>
<td style="text-align: left;">Shili</td>
<td style="text-align: left;">Togruta</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">50</td>
<td style="text-align: left;">Kalee</td>
<td style="text-align: left;">Kaleesh</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">51</td>
<td style="text-align: left;">Utapau</td>
<td style="text-align: left;">Pau'an</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>So now, if I wanted a version of this data set with one row per <code>:homeworld</code> and a column for each <code>:species</code> that contains the <code>:count</code> of the number of characters of that species on the corresponding world, I could use <code>unstack()</code> to pivot from long-form to wide-form data like this:</p>
<div id="063044a9" class="cell page-columns page-full" data-execution_count="25">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unstack</span>(census, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>species, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>count, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) </span></code></pre></div>
<div class="cell-output cell-output-display column-page" data-execution_count="26">
<div>
<div><div style="float: left;"><span>46×37 DataFrame</span></div><div style="float: right;"><span style="font-style: italic;">21 rows omitted</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Human</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Droid</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Wookiee</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Rodian</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Hutt</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Trandoshan</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Mon Calamari</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Ewok</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Sullustan</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Neimodian</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Gungan</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Toydarian</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Dug</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Zabrak</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Twi'lek</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Aleena</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Vulptereen</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Xexto</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Toong</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Cerean</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Nautolan</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Tholothian</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Iktotchi</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Quermian</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Kel Dor</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Chagrian</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Geonosian</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Mirialan</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Clawdite</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Besalisk</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Kaminoan</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Skakoan</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Muun</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Togruta</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Kaleesh</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Pau'an</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Naboo</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Alderaan</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Stewjon</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Eriadu</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Kashyyyk</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Corellia</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">Rodia</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Nal Hutta</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Kamino</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Trandosha</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Socorro</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Bespin</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
<td style="text-align: right;">⋮</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">35</td>
<td style="text-align: left;">Champala</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">36</td>
<td style="text-align: left;">Geonosis</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">37</td>
<td style="text-align: left;">Mirial</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">38</td>
<td style="text-align: left;">Serenno</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">39</td>
<td style="text-align: left;">Concord Dawn</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">40</td>
<td style="text-align: left;">Zolan</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">41</td>
<td style="text-align: left;">Ojom</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">42</td>
<td style="text-align: left;">Skako</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">43</td>
<td style="text-align: left;">Muunilinst</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">44</td>
<td style="text-align: left;">Shili</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">45</td>
<td style="text-align: left;">Kalee</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">46</td>
<td style="text-align: left;">Utapau</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Here I’ve specified <code>fill=0</code> to indicate missing values should be replaced with zeros, which is very sensible in this case because if there are no characters with a particular species/homeworld combination there wouldn’t be a row in <code>census</code>. Also, because I can, here’s a version that appears in a pipeline where I return only a subset of species, and – in act of appalling xenophobia – consider only planets inhabited by at least one human character:</p>
<div id="ab6f1472" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb30-1">census<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unstack</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>species, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>count, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-3">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(d, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>homeworld, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>Human, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>Droid, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>Ewok, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>Wookiee, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>Hutt]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-4">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>Human <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<div>
<div><div style="float: left;"><span>14×6 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">homeworld</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Human</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Droid</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Ewok</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Wookiee</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">Hutt</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String15">String15</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Int64">Int64</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Tatooine</td>
<td style="text-align: right;">8</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">Naboo</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">Alderaan</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Stewjon</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Eriadu</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Corellia</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">7</td>
<td style="text-align: left;">Kamino</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">8</td>
<td style="text-align: left;">Socorro</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">9</td>
<td style="text-align: left;">Bespin</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">10</td>
<td style="text-align: left;">Chandrila</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">11</td>
<td style="text-align: left;">Coruscant</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">12</td>
<td style="text-align: left;">Haruun Kal</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">13</td>
<td style="text-align: left;">Serenno</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">14</td>
<td style="text-align: left;">Concord Dawn</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>Hm. Not sure what those results say about the willingness of humans to mix with other species in the <em>Star Wars</em> universe but it’s probably not good to reflect on it too much.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/star-wars-2.jpg" class="img-fluid figure-img" alt="Darth Vader, with the slogan 'Don't be like your father'"></p>
<figcaption><a href="https://www.deviantart.com/lagota/art/Dont-be-like-your-father-243841640">Also Star Wars</a>. By user <a href="https://www.deviantart.com/lagota">lagota</a> on Deviant Art, released under a CC-BY-NC-ND licence.</figcaption>
</figure>
</div>
</div></div></section>
<section id="data-wrangling-v-transform" class="level2">
<h2 class="anchored" data-anchor-id="data-wrangling-v-transform">Data wrangling V: transform</h2>
<p>In all honesty I am getting exhausted with this post, and mildly irrited at the fact that I’ve spent so much time in the <em>Star Wars</em> universe rather than in a fictional universe that I actually enjoy. So it’s time to start wrapping this one up. There’s only one more topic I really want to mention and that’s the <code>transform()</code> function which you can use to add new columns to a data frame.</p>
<div id="53e92744" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb31-1">starwars[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb31-2">  d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transform</span>(d, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> (n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Darth Vader"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>lukes_father)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>
<div><div style="float: left;"><span>6×2 DataFrame</span></div><div style="clear: both;"></div></div><div class="data-frame" style="overflow-x: scroll;">
<table class="data-frame table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;">Row</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">name</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">lukes_father</th>
</tr>
<tr class="odd subheader headerLastRow">
<th class="rowNumber" data-quarto-table-cell-role="th" style="text-align: right; font-weight: bold;"></th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="String31">String31</th>
<th style="text-align: left;" data-quarto-table-cell-role="th" title="Bool">Bool</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">1</td>
<td style="text-align: left;">Luke Skywalker</td>
<td style="text-align: right;">false</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">2</td>
<td style="text-align: left;">C-3PO</td>
<td style="text-align: right;">false</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">3</td>
<td style="text-align: left;">R2-D2</td>
<td style="text-align: right;">false</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">4</td>
<td style="text-align: left;">Darth Vader</td>
<td style="text-align: right;">true</td>
</tr>
<tr class="odd">
<td class="rowNumber" style="text-align: right; font-weight: bold;">5</td>
<td style="text-align: left;">Leia Organa</td>
<td style="text-align: right;">false</td>
</tr>
<tr class="even">
<td class="rowNumber" style="text-align: right; font-weight: bold;">6</td>
<td style="text-align: left;">Owen Lars</td>
<td style="text-align: right;">false</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<p>There. It’s done.</p>
</section>
<section id="wrap-up" class="level2">
<h2 class="anchored" data-anchor-id="wrap-up">Wrap up</h2>
<p>No.&nbsp;Just no. There was already a <a href="../../posts/2024-03-01_julia-foundation/">first post</a> and there’s about to be a <a href="../../posts/2024-03-03_julia-plots/">third post</a>. I am not being paid for this and I do not have the energy to think of a witty and erudite way to wrap up the unloved middle child of the trilogy. So let us never speak of this again.</p>
<!-- https://www.deviantart.com/lagota/art/The-illusive-man-306521415 -->
<p><img src="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/illusive-man.png" class="img-fluid"></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>As an aside, notice that I’ve used <code>.==</code> rather than <code>==</code> as the equality test. This is because <code>==</code> is a scalar operator: it doesn’t work for vectors unless you broadcast it using <code>.</code>↩︎</p></li>
<li id="fn2"><p>In this context, a predicate function is just one that returns <code>true</code> or <code>false</code>.↩︎</p></li>
<li id="fn3"><p>The other issue is that my code doesn’t handle missing data gracefully, but that will come up later so I’m ignoring it for now.↩︎</p></li>
<li id="fn4"><p>There is also <code>filter()</code> which has a slightly different syntax.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Working with Data in {Julia}},
  date = {2024-03-02},
  url = {https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Working with Data in Julia.”</span>
March 2, 2024. <a href="https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames">https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames</a>.
</div></div></section></div> ]]></description>
  <category>Julia</category>
  <category>Data Wrangling</category>
  <guid>https://blog.djnavarro.net/posts/2024-03-02_julia-data-frames/</guid>
  <pubDate>Fri, 01 Mar 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>A foundation in Julia</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/</link>
  <description><![CDATA[ 





<!--------------- post begins here ----------------->
<p>After many years of procrastination and telling myself I’ll get around to it later, I’ve finally decided that now is the time for me to start learning <a href="https://julialang.org/">Julia</a>. At this point in my life I am strong in R, passable in Javascript, and can survive in SQL, C++ and Python if I need them for something. But despite my interest-from-afar in Julia, I haven’t had much of an excuse to dive into it before.</p>
<p>Part of the appeal in Julia is that it’s designed to be a high-performance language for scientific computing. Like other scientific languages (e.g., R, Matlab, etc) it has 1-based indexing rather than 0-based indexing (Python, C++, etc). Julia code is automatically compiled giving you performance that is comparable to compiled languages like C++, without the hassle of actually having to deal with the compiler yourself. But we’ve all heard the sales pitch for Julia before, there’s no need for me to repeat it here, and anyway I kinda just want to dive into the code.</p>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation1.png" class="img-fluid"></p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting started</h2>
<p>First things first. In order to get started I had to go through the process of <a href="https://julialang.org/downloads/">installing Julia</a>, which was pretty straightforward. Getting it to work within my quarto blog was a bit trickier, but there’s some fairly decent documentation on <a href="https://quarto.org/docs/computations/julia.html">Julia for Quarto</a> which got me there. After getting it set up it was as simple as including this line in the YAML header for this post,<sup>1</sup></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jupyter</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> julia-1.10</span></span></code></pre></div>
<p>and then creating executable Julia code cells by appending <code>{julia}</code> after the triple-fence used to define a block. So let’s see. Is Julia working in my quarto environment? I’ll start with my usual variant on the traditional “hello world” program using the <code>println()</code> (i.e., “print line”) function:</p>
<div id="626fe2dd" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello cruel world"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>hello cruel world</code></pre>
</div>
</div>
<p>Yes, that seems to be working, as – shockingly – is the ability to do some basic calculations using aritmetic <a href="https://docs.julialang.org/en/v1/manual/mathematical-operations/">operators</a> that seem pretty much the same as most languages I use:</p>
<div id="638f11c2" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>168</code></pre>
</div>
</div>
<p>I can define variables, using <code>=</code> as the assignment operator:</p>
<div id="a3616bb0" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb6-1">hours <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>;</span>
<span id="cb6-2">days <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>;</span></code></pre></div>
</div>
<p>The semicolons here are optional: they’re used as end-of-line delimiters, but the main reason I’ve used them in the code chunk above is to suppress printing the return value of these assignments.</p>
<p>So yes, we are up and running.</p>
</section>
<section id="object-types" class="level2">
<h2 class="anchored" data-anchor-id="object-types">Object types</h2>
<p>Julia is a <a href="https://docs.julialang.org/en/v1/manual/types/">dynamically typed language</a>, so when I defined the <code>hours</code> variable earlier I was able to create an integer without explicitly defining it as such:</p>
<div id="29fc154d" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(hours)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Int64</code></pre>
</div>
</div>
<p>By default Julia creates a 64-bit integer, but – unlike R and more like C++ – there are several integer types. If I’d wanted to create a 128-bit integer to represent the number of minutes in an hour (but why????) I could have done so by declaring the type explicitly:</p>
<div id="4501c083" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb9-1">minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int128 </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>;</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(minutes)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>Int128</code></pre>
</div>
</div>
<p>So while <code>minutes</code> and <code>hours</code> are both integers they are different types, and – as you would expect – are represented differently internally. In an extremely strict language, it would not be possible to multiple <code>minutes</code> by <code>hours</code> without first converting at least one of them to a different type, but thankfully Julia operators will automatically promote to common type and so I can calculate the number of minutes in one day without doing the tedious type conversions myself:</p>
<div id="9ebc7114" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hours)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>Int128</code></pre>
</div>
</div>
<p>You can see the same mechanism in action when I try to calculate the number of minutes in 1.7 days. The <code>minutes</code> variable<sup>2</sup> is a 64-bit integer, the <code>hours</code> variable is a 128-bit integer, but the value of <code>1.7</code> is represented as a 64-bit floating point numbers. So when I compute <code>minutes * hours * 1.7</code>, the return value is a 64-bit float:</p>
<div id="89735bdc" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(minutes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hours <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Float64</code></pre>
</div>
</div>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation2.png" class="img-fluid"></p>
</section>
<section id="vectors" class="level2">
<h2 class="anchored" data-anchor-id="vectors">Vectors</h2>
<p>I find myself liking the syntax Julia uses to create objects. You can create a vector using square brackets like this, which feels very much like Matlab to me:<sup>3</sup></p>
<div id="2b1db07d" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb15-1">words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cruel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>];</span></code></pre></div>
</div>
<p>The <code>words</code> variable I’ve just created is a vector of three strings:</p>
<div id="5f5bb495" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(words)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div class="ansi-escaped-output">
<pre>Vector{String}<span class="ansi-bright-black-fg"> (alias for </span><span class="ansi-bright-black-fg">Array{String, 1}</span><span class="ansi-bright-black-fg">)</span></pre>
</div>
</div>
</div>
<p>Subsetting uses square brackets too, and as I mentioned earlier indexing in Julia starts at 1:</p>
<div id="08beb4f5" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb17-1">words[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>"hello"</code></pre>
</div>
</div>
<p>A couple of other things to note here. In Julia, you need to be more careful about single versus double quotes than you would be in R (where they are interchangeable). In Julia, single quotes are used to define a single character (e.g., <code>'h'</code> is a character), whereas double quotes are used to define a string (e.g.&nbsp;<code>"hello"</code> is a string). Strings are in fact a vector of characters, so <code>"hello"[1]</code> returns the character <code>'h'</code>. But whatevs. Let’s move along.</p>
</section>
<section id="tuples" class="level2">
<h2 class="anchored" data-anchor-id="tuples">Tuples</h2>
<p>I have no intention of diving too deeply into object types in Julia, but there are two more that I feel are worth mentioning at this point: tuples and dictionaries. Let’s start with tuples. A <a href="https://docs.julialang.org/en/v1/manual/functions/#Tuples">tuple</a> is simply an ordered collection of values, and are constructed using parentheses:<sup>4</sup></p>
<div id="0954af77" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb19-1">fruit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>("apple", "banana", "cherry")</code></pre>
</div>
</div>
</section>
<section id="dictionaries" class="level2">
<h2 class="anchored" data-anchor-id="dictionaries">Dictionaries</h2>
<p>In contrast, a <a href="https://docs.julialang.org/en/v1/base/collections/#Dictionaries">dictionary</a><sup>5</sup> is a list of key-value pairs. There’s a few different ways to define a dictionary but I’m partial to this syntax:</p>
<div id="b83d4ab9" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb21-1">danielle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Dict</span>(</span>
<span id="cb21-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"danielle"</span>,</span>
<span id="cb21-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>,</span>
<span id="cb21-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"female"</span>,</span>
<span id="cb21-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boring"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb21-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Dict{String, Any} with 4 entries:
  "name"   =&gt; "danielle"
  "boring" =&gt; true
  "gender" =&gt; "female"
  "age"    =&gt; 47</code></pre>
</div>
</div>
<p>The entries in a dictionary can be indexed using the keys:</p>
<div id="9cafd309" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb23-1">danielle[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>"female"</code></pre>
</div>
</div>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation3.png" class="img-fluid"></p>
</section>
<section id="functions" class="level2">
<h2 class="anchored" data-anchor-id="functions">Functions</h2>
<p>The syntax for defining functions in Julia comes in a couple of forms. The usual way to do it is using the <code>function</code> keyword, and I could define a simple <code>greet()</code> function like this:</p>
<div id="4cbb089f" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">greet</span>(name) </span>
<span id="cb25-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, nice to meet you"</span></span>
<span id="cb25-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span></code></pre></div>
</div>
<p>The <code>end</code> keyword is required here. Note also that I’ve taken advantage of Julia’s <a href="https://www.juliawiki.com/wiki/String_interpolation">string interpolation syntax</a> to substitute the value of <code>name</code> into the string that <code>greet()</code> outputs:</p>
<div id="773a1058" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">greet</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"danielle"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>"hello danielle, nice to meet you"</code></pre>
</div>
</div>
<p>You can also create functions using the anonymous function syntax (e.g., <code>x -&gt; "hello $x"</code> defines an anonymous function), which is handy in the functional programming context if you want to map a vector of values onto another vector using <code>map()</code>:</p>
<div id="71858d60" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"belle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chiara"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>3-element Vector{String}:
 "hello amy"
 "hello belle"
 "hello chiara"</code></pre>
</div>
</div>
<p>In this case though I didn’t really need to resort to using <code>map()</code> because Julia also allows you to vectorise a function, using <code>.</code> to “broadcast” a scalar function to accept vector inputs:</p>
<div id="38ed945f" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">greet</span>.([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amy"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"belle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chiara"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>3-element Vector{String}:
 "hello amy, nice to meet you"
 "hello belle, nice to meet you"
 "hello chiara, nice to meet you"</code></pre>
</div>
</div>
<p>I can see that being handy.</p>
<p>I’ll come back to functions momentarily in order to talk about generic functions and method dispatch in Julia, but first I’ll pivot a little to talk about packages.</p>
</section>
<section id="packages" class="level2">
<h2 class="anchored" data-anchor-id="packages">Packages</h2>
<p>As with any programming language, most of the power comes in Julia comes from the extensive collection of packages that other users have contributed. The usual way to install a package is via the Julia REPL.<sup>6</sup> The Julia REPL is a little unusual in that it has several different “modes”. Normally your command prompt in the Julia REPL looks something like this:</p>
<pre><code>julia&gt;</code></pre>
<p>But if you type <code>]</code> at the REPL you’ll see it transform into something like this:<sup>7</sup></p>
<pre><code>(@v1.10) pkg&gt;</code></pre>
<p>This tells you that you’ve entered “package” mode, and you can type commands that can be used to install Julia packages and various other things.<sup>8</sup> <sup>9</sup> (If you want to get out of package mode and return to the regular REPL press “backspace”.)</p>
<p>So then, if you want to install the <a href="https://juliapackages.com/p/json">JSON</a> package, the command you’d type at the REPL in package mode would simply be <code>add JSON</code>. And having installed the JSON package into my Julia environment, I can load it using the <code>using</code> keyword:</p>
<div id="21799289" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">JSON</span></span></code></pre></div>
</div>
<p>And now I can read the “praise.json” file that I just so happen to have sitting in my working directory by calling <code>JSON.parsefile()</code></p>
<div id="836d7b0a" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb35-1">praise_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JSON.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parsefile</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"praise.json"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>Dict{String, Any} with 3 entries:
  "exclamation" =&gt; Any["ah", "aha", "ahh", "ahhh", "aw", "aww", "awww", "aye", …
  "superlative" =&gt; Any["ace", "amazing", "astonishing", "astounding", "awe-insp…
  "adverb"      =&gt; Any["beautifully", "bravely", "brightly", "calmly", "careful…</code></pre>
</div>
</div>
<p>Most convenient, because now that I have this <code>praise_dict</code> object I’m going to use it in the next section when I return to talking about functions…</p>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation4.png" class="img-fluid"></p>
</section>
<section id="methods" class="level2">
<h2 class="anchored" data-anchor-id="methods">Methods</h2>
<p>One of my favourite little R packages is <a href="https://github.com/rladies/praise">praise</a>, which you can use to create random snippets of positive feedback that can be inserted in various places. Inspired by this, I’m going to define a cute little <code>praise()</code> function that does something similar.</p>
<p>In the last section I defined <code>praise_dict</code>, a handy dictionary that contains some adverbs, superlatives, and exclamations that you can use to construct random praise statements. So let’s define <code>praise()</code> such that it takes the <code>name</code> of a person as a string, and outputs a piece of positive feedback:</p>
<div id="2e04a40e" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">String</span>)</span>
<span id="cb37-2">    hey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exclamation"</span>])</span>
<span id="cb37-3">    sup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"superlative"</span>])</span>
<span id="cb37-4">    adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adverb"</span>])</span>
<span id="cb37-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hey<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> you are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adv<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sup<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb37-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span>
<span id="cb37-7"></span>
<span id="cb37-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"danielle"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>"whee danielle you are fast super-duper"</code></pre>
</div>
</div>
<p>Oh, that’s so sweet of you to say. Notice, however, that I’ve been a little stricter in how I’ve defined the input arguments for <code>praise()</code> than I was earlier when I defined <code>greet()</code>. The <code>praise()</code> function won’t work if the <code>name</code> argument is not a string:</p>
<div id="acfb194a" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre>MethodError: no method matching praise(::Int64)

Closest candidates are:
  praise(<span class="ansi-bright-red-fg">::String</span>)
<span class="ansi-bright-black-fg">   @</span> <span class="ansi-magenta-fg">Main</span> <span style="text-decoration:underline" class="ansi-bright-black-fg">In[22]:1</span>
</pre>
</div>
</div>
</div>
<p>That’s probably a good thing. We don’t typically provide praise to an integer, so it makes sense that the function doesn’t work when you pass it an integer!</p>
<p>On the other hand, we might want our <code>praise()</code> function to work if the user doesn’t pass it a name at all. To accomplish that, we can write another <code>praise()</code> function that doesn’t take any arguments:</p>
<div id="bd5addb1" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>()</span>
<span id="cb40-2">    hey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exclamation"</span>])</span>
<span id="cb40-3">    sup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"superlative"</span>])</span>
<span id="cb40-4">    adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adverb"</span>])</span>
<span id="cb40-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hey<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> you are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adv<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sup<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb40-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span></code></pre></div>
</div>
<p>So now this works:</p>
<div id="71ca0f1c" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>"hmm you are enthusiastically striking"</code></pre>
</div>
</div>
<p>The key thing to notice here is that though I’ve defined <code>praise()</code> twice, what Julia actually does in this situation is construct a single “generic” function that has two <a href="https://docs.julialang.org/en/v1/manual/methods/">methods</a>. In other words, <code>praise()</code> will work if you pass it a single string, and it will also work if you don’t pass it any arguments at all. It won’t work for any other kind of input. On the surface that seems pretty sensible, but in practice we might need a third method. Suppose I have a vector where there are a few people’s names listed, but it has missing values:<sup>10</sup></p>
<div id="3f32c34e" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb43-1">people <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alex"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">missing</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fiona"</span>];</span></code></pre></div>
</div>
<p>My <code>praise()</code> function isn’t inherently vectorised, but of course we can use the <code>.</code> syntax to praise several people at once and call <code>praise.(people)</code>. Unfortunately this work right now because <code>praise()</code> doesn’t know what to do with the missing value. So if we want our <code>praise()</code> function to handle missing data gracefully it needs a third method:</p>
<div id="f65abd0e" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb44-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Missing</span>)</span>
<span id="cb44-2">    hey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exclamation"</span>])</span>
<span id="cb44-3">    sup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"superlative"</span>])</span>
<span id="cb44-4">    adv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand</span>(praise_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adverb"</span>])</span>
<span id="cb44-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hey<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> you are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adv<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sup<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb44-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span>;</span></code></pre></div>
</div>
<p>Now that we have all three methods <code>praise()</code> works just fine:</p>
<div id="94c3ff81" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">praise</span>.(people)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>3-element Vector{String}:
 "whee alex you are smoothly classy"
 "aw you are justly hunky-dory"
 "mmh fiona you are doubtfully awesome"</code></pre>
</div>
</div>
<p>As an aside, if you ever needed to find out what methods have been defined for the <code>praise()</code> function, you can do so by calling <code>methods(praise)</code>.</p>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation5.png" class="img-fluid"></p>
</section>
<section id="piping" class="level2">
<h2 class="anchored" data-anchor-id="piping">Piping</h2>
<p>Much like recent versions of R, Julia comes with a piping operator <code>|&gt;</code> that you can use to pass the output of one function to another one. So let’s say I have some numbers stored as <code>vals</code>, and I want to compute their geometric mean:</p>
<div id="6a3ed302" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb47-1">vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>3-element Vector{Float64}:
 10.2
 12.1
 14.3</code></pre>
</div>
</div>
<p>In Julia <code>mean()</code> is part of the Statistics package, so we’ll load that:</p>
<div id="e10abd0d" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb49-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Statistics</span></span></code></pre></div>
</div>
<p>To compute the geometric mean, we first compute the natural logarithm for each element in <code>vals</code> using <code>log()</code>, compute the arithmetic mean of those log-values with <code>mean()</code>, and then exponentiate the result with <code>exp()</code>. Written as a series of nested function calls, it looks like this:</p>
<div id="b8f0ae00" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>.(vals)))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>12.084829472557535</code></pre>
</div>
</div>
<p>As has been noted many times in the past, one awkward feature of code written in this form is that you have to read it from the inside (innermost parentheses) to the outside in order to understand the sequence of events: first you take <code>vals</code> and pass it to <code>log.()</code>, then you take these logarithms and pass them to <code>mean()</code>, and then you take this mean and pass it to <code>exp()</code>. In this specific case it’s not terrible to read, because it just so happens that “exp mean log value” is pretty much how the formula for the geometric mean is written mathematically, but most data oriented programming isn’t structured to look exactly like an equation, and “inside out” code quickly becomes difficult to read.</p>
<p>This is where the “pipe” operator <code>|&gt;</code> comes in handy. You start with an object on the left hand side, and then pass it to the function named on the right hand side. When you chain a series of piping operations together you end up with code that reads left-to-right rather than inside-out:</p>
<div id="b6d691ed" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb52-1">vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.|&gt;</span> log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> exp</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>12.084829472557535</code></pre>
</div>
</div>
<p>Notice that like other operators, I can use <code>.</code> to broadcast when using the pipe.</p>
<p>Much like R, Julia has multiple versions of the pipe. For the purpose of this post I’m only going to talk about the base pipe, which is much much stricter than the magrittr pipe <code>%&gt;%</code> in R, and indeed considerably stricter than the base pipe <code>|&gt;</code> in R.<sup>11</sup> As you can see from the code above, the right hand side of the pipe is a function, <em>not</em> a call. The object supplied on the left hand side of the pipe is passed as the first argument to the function. No additional arguments can be supplied to the function on the right.</p>
<p>On the surface this seems very restrictive, but the longer I’ve been playing with Julia the more I realise it’s not as restrictive as I first thought. Because Julia makes it very easy to write anonymous functions, and because there’s very little overhead to calling one, you can write a pipeline that consists entirely of calls to anonymous functions. As a very simple example of a “split, apply, combine” style workflow constructed with the Julia pipe, here’s how you could use this to reverse each of the individual words in a string:</p>
<div id="f70a4114" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb54-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello cruel world"</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-2">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-3">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reverse</span>.(x)   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb54-4">  x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>"olleh leurc dlrow"</code></pre>
</div>
</div>
<p>To make this work I really do need to be able to specify additional arguments to <code>split()</code> and <code>join()</code>, which would not be permitted in a simpler application of the Julia pipe, but it works perfectly well here because those additional arguments are specified inside the anonymous functions to which the inputs are piped.</p>
<p>Honestly, as much as I was initially like “ugh this is unwieldy”, I’m starting to appreciate the simplicity of the design and how it really does force you to start thinking about your pipelines in functional programming terms.<sup>12</sup></p>
</section>
<section id="function-composition" class="level2">
<h2 class="anchored" data-anchor-id="function-composition">Function composition</h2>
<p>I should also mention that Julia has the <a href="https://www.juliawiki.com/wiki/Function_composition_(Julia)">function composition operator</a> <code>∘</code> that you can use for this purpose, using much the same notation as in mathematics.<sup>13</sup> So I could define a <code>geomean()</code> function as the following composition:</p>
<div id="1fd6d027" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb56-1">geomean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">∘</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>.(x))</span>
<span id="cb56-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geomean</span>(vals)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>12.084829472557535</code></pre>
</div>
</div>
<p>In this expression I’ve used an anonymous function as the third function to be composed so as to ensure that if the user passes a vector such as <code>vals</code>, the default behaviour of <code>geomean()</code> is to broadcast the call top <code>log()</code> (i.e., compute the log of each input individually), then pass the resulting vector of logarithms to <code>mean()</code> <em>as</em> a vector, and then pass the resulting scalar to <code>exp()</code>.</p>
<p>To be honest, as cute as this is, I’m not sure I see much utility to this right now. So yeah, time to move onto the last “topic” in this foundations post, in which the author will mention but in no way actually explain the extensive capabilities that Julia has for allowing…</p>
<p><img src="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/foundation6.png" class="img-fluid"></p>
</section>
<section id="metaprogramming" class="level2">
<h2 class="anchored" data-anchor-id="metaprogramming">Metaprogramming</h2>
<p>Much like R – and very unlike Matlab, which Julia syntax sometimes resembles – the design choices underpinning Julia have been influnced heavily by <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a>. While I have never actually learned to program in any of the major dialects of Lisp, I’ve always wanted to, and I’m a huge fan of the way that Lisp and its descendants contain programming constructs that directly represent <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax trees</a> and provide tools that let you manipulate user-supplied code.<sup>14</sup></p>
<p>Because <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/">Julia Metaprogramming</a> is such a powerful tool, what I’ve noticed already – even as a novice – is that most practical uses of the language end up relying on it heavily. Julia supports abstract <a href="https://docs.julialang.org/en/v1/base/base/#Core.Symbol">Symbols</a>, <a href="https://docs.julialang.org/en/v1/base/base/#Core.Expr">Expressions</a>, and <a href="https://docs.julialang.org/en/v1/manual/metaprogramming/#man-macros">Macros</a>, all of which start to pop up in your code once you start using it for real world data wrangling and visualisation. So it’s pretty important to understand something about how it all works. That said… it’s an advanced topic rather than a basic one, so what I think I’m going to do for now is issue a promissory note: I’ll talk more about this in later posts as those topics become relevant.</p>
</section>
<section id="where-to-next" class="level2">
<h2 class="anchored" data-anchor-id="where-to-next">Where to next?</h2>
<p>Very obviously, I skipped a <em>lot</em> of foundational topics in this post. This is not in any sense a coherent or complete introduction to Julia programming. I mean, I didn’t even bother to talk about <a href="https://docs.julialang.org/en/v1/manual/control-flow/">control flow</a>, which is one hell of an omission. But my goal here isn’t to provide a complete overview, and perhaps surprisingly I don’t actually use loops or if/then conditionals at all in the next two posts, so I simply haven’t bothered to write anything about those topics here. I focused on the things that popped up as I went about trying to try out a few things.</p>
<p>In any case, if you’re curious about where this is about to go, the <a href="../../posts/2024-03-02_julia-data-frames/">second post</a> in this series will talk about data frames and data wrangling, while the <a href="../../posts/2024-03-03_julia-plots/">third post</a> will take a look at a data visualisation tool. Which, quite frankly, is a <em>lot</em> more than I’d intended to do when I had this idea – which increasingly feels ill-advised – to play around with Julia and write about the experience.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Okay that’s only half true. The other thing I ended up doing was creating a <a href="https://pkgdocs.julialang.org/v1/environments/">project environment</a> for this blog post, and if you look at the source code for this post you can see that I’ve actually used <code>Pkg.activate()</code> to ensure that the Julia code in this post is executed using that environment. There’s a nice blog post on setting up a project environment <a href="https://towardsdatascience.com/how-to-setup-project-environments-in-julia-ec8ae73afe9c">here</a>, but it’s a bit beyond the scope of what I want to cover here.↩︎</p></li>
<li id="fn2"><p>Technically, the value referenced by the <code>minutes</code> variable: values have types, variables are simply labels that point to values. But I shan’t be bothered with that distinction here.↩︎</p></li>
<li id="fn3"><p>Fun fact. Apart from a brief period in undergraduate where I learned a little bit of C, Matlab was my first programming language. But it’s been a very, very long time since I used Matlab – or GNU Octave – for anything. I imagine I could pick it up again if I had to but I honestly don’t see the point.↩︎</p></li>
<li id="fn4"><p>A tuple is an immutable type, so the idea here is that you’re really supposed to use tuples to represent list of values that doesn’t change.↩︎</p></li>
<li id="fn5"><p>Dictionaries are mutable, so you can modify values stored in a dictionary.↩︎</p></li>
<li id="fn6"><p>REPL = “Read-evaluate-print loop”. It’s a fancy way of referring to the command line I guess. In R we’d usually refer to the REPL as the R console, but other languages tend to use the term REPL.↩︎</p></li>
<li id="fn7"><p>There are other modes besides regular and package. For instance if you type <code>?</code> at the REPL it takes you into help mode.↩︎</p></li>
<li id="fn8"><p>You don’t actually have to do it this way. The “package” mode in the REPL exposes various functions from the <a href="https://docs.julialang.org/en/v1/stdlib/Pkg/">Pkg</a> package, so if you have loaded <code>Pkg</code> then you could totally call <code>Pkg.add()</code> to install a package. In practice I find this a bit silly, but I suppose it has more useful applications in activating an environment via <code>Pkg.activate()</code> etc.↩︎</p></li>
<li id="fn9"><p>The syntax here is meaningful. If you are working in the base Julia environment, the bit in parentheses tells you that if you add a package it will be added to the base environment. For this blog post, however I’m using a custom environment called “sandbox” that has the packages I’m using, so the prompt I would see looks like this: <code>(sandbox) pkg&gt;</code>.↩︎</p></li>
<li id="fn10"><p>The <code>missing</code> value is used to define missing data in Julia, analogous to how <code>NA</code> is used to define missing values in R.↩︎</p></li>
<li id="fn11"><p>If you are interested in such things, the <a href="https://juliapackages.com/p/pipe">Pipe</a> package supplies a pipe that is very similar to the R base pipe.↩︎</p></li>
<li id="fn12"><p>So much so, in fact, that while my original plan for these Julia posts was to briefly dispense of the base pipe and spend more time talking about the <a href="https://juliapackages.com/p/pipe">Pipe</a> package, I think I’m going to skip the package entirely and just use base pipe + anonymous functions. ↩︎</p></li>
<li id="fn13"><p>For most editors that are configured to handle Julia syntax can type the <code>∘</code> operator by typing <code>\circ</code> and then hitting tab.↩︎</p></li>
<li id="fn14"><p>Very often I see programmers who have never worked in a Lisp-descended language (e.g., they know Python, C, etc. but not R, Julia, Scheme, etc.) react in horror and outrage at the things that you are permitted to do in languages that rely extensively on metaprogramming, but honestly I love it. I think it’s such a powerful tool for constructing <a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain specific languages</a> <em>within</em> the confines of a more general language.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {A Foundation in {Julia}},
  date = {2024-03-01},
  url = {https://blog.djnavarro.net/posts/2024-03-01_julia-foundation},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“A Foundation in Julia.”</span> March 1,
2024. <a href="https://blog.djnavarro.net/posts/2024-03-01_julia-foundation">https://blog.djnavarro.net/posts/2024-03-01_julia-foundation</a>.
</div></div></section></div> ]]></description>
  <category>Julia</category>
  <guid>https://blog.djnavarro.net/posts/2024-03-01_julia-foundation/</guid>
  <pubDate>Thu, 29 Feb 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating new generative art tools in R with grid, ambient, and S7</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-02-25_s7/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Content note: This post includes mentions of sexual assaults, and other unpleasant topics that relate to LGBT experiences of the world</p>
</div>
</div>
<section id="prelude-i" class="level2">
<h2 class="anchored" data-anchor-id="prelude-i">Prelude I</h2>
<p>It has been a minute since I wrote anything new, but thankfully I have found time for another side project and, by extension, another blog post. This one is going to be a little different though. Like everything on this blog it is in fact a data science post. I’m going to talk about art, object-oriented programming in R, and the grid graphics system. It being the time of the <a href="https://www.mardigras.org.au/">Sydney Gay and Lesbian Mardi Gras</a> – or “Gay Christmas” as it is affectionately known – I’ll do it with a rainbow palette. Nevertheless, pretty palettes notwithstanding this won’t be a particularly upbeat pride-flag-waving kind of post. There will be art, and there will be code. But there will also be little slivers of darker stories, and in a moment I’ll explain why I’ve made the decision to include them. But let’s start with the art.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># colour scheme</span></span>
<span id="cb1-2">palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e50000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff8d00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffee00"</span>, </span>
<span id="cb1-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#028121"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004cff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#770088"</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters defining objects</span></span>
<span id="cb1-8">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)),</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)),</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L,</span>
<span id="cb1-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> palette,</span>
<span id="cb1-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fill</span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of blob objects to add to a sketch</span></span>
<span id="cb1-17">blobs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, blob)</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define and draw a sketch containing the objects</span></span>
<span id="cb1-20">blobs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The piece is very simple, but has a lovely balance to my eye. Each colour of the pride flag is captured in a single “blob”, with the blobs arranged in a circular overlapping pattern that conveys a sense of movement and progress. More subtly, if you look at the blobs closely you can detect a kind of spatial autocorrelation. Notice how the green, yellow, and orange blobs all have a protrusion on their right hand side at approximately the same place. You’d be tempted to think this is coincidental, but it isn’t. Hidden under the hood there is a vector field that induces correlations on the random process that creates the blob shapes. This is by design.</p>
<p>The spatial autocorrelation that provides hidden structure to this artwork becomes a little more obvious if I switch to a different piece constructed with very similar tools:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters defining objects</span></span>
<span id="cb2-2">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x,</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L,</span>
<span id="cb2-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb2-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fill</span>
<span id="cb2-11">)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list of ribbon objects to add to a sketch</span></span>
<span id="cb2-14">ribbons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, ribbon)</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define and draw a sketch containing the objects</span></span>
<span id="cb2-17">ribbons <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In this piece the blobs are more ribbon shaped, and the piece as a whole feels a little like a rainbow coloured lava lamp. The spatial autocorrelation is more obvious. The ribbons tend to be thick in the same regions of the plot, and thin in other regions.</p>
<p>Each of these ribbons is a distinct individual object, yet somehow they all have similar experiences when embedded in the environment that defines the art. There is a <em>pattern</em> to how they flow through this world.<sup>1</sup></p>
<p>An artist looking at this piece might wonder about the trickery used to create this structure. An R programmer looking at it, however, might be wondering something very different. They would likely be asking questions like “what the fuck is this <code>ribbon()</code> function, and what the hell is a <code>sketch()</code>, and how are you rendering this with this <code>draw()</code> function that you piped it to? Absolutely none of this is part of base R, it’s clearly not ggplot2 code, and it’s not even consistent with <em>any</em> well-known data visualisation tool in the R ecosystem. What the hell are you doing here girl?</p>
</section>
<section id="prelude-ii" class="level2">
<h2 class="anchored" data-anchor-id="prelude-ii">Prelude II</h2>
<p>As I was saying. Mardi Gras is in full swing in Sydney at the moment, a multi-week festival and parade sprawling across multiple sites across the city. As I write this I am sitting in the sunshine at a bar on Bondi Beach, while a massive stage is being constructed below for the “Bondi Beach Party” event. The surfers, swimmers, and sunbathers are having a lovely day at the beach. Everyone is partying.</p>
<p>About a kilometer away, above the iconic limestone cliffs that surround almost every Sydney beach, is the <a href="https://www.bondimemorial.com.au/">Marks Park Memorial</a> in Tamarama. The memorial serves as a remembrance for the LGBT victims of hate crimes in Sydney, a stark reminder of the perennial apathy that the NSW police show towards these crimes, and most especially to the gay men who were murdered at these cliffs back in the 1970s and 1980s and whose deaths are to this day the subject of inquests into the appalling behaviour of the police in this city.</p>
<p>The contrast is stark. It is one that few people are willing to face up to, particularly cisgender straight people who fancy themselves to be allies of our community but think that allyship means nothing more than waving a little rainbow flag and reciting empty slogans like “love is love”. It’s these people who – oh so frequently – hasten to inform me that things have changed. It’s different now, they confidently tell me. Everyone is so accepting, they say with a certainty I do not share. You don’t need to hide who you are, they reassure me. It’s a surprisingly predictable narrative.</p>
<p>None of it is true, of course. I could tell the very recent story of <a href="https://www.thepinknews.com/2024/02/23/nex-benedict-hrc-investigation-demand/">Nex Benedict</a>, the non-binary teenager whose death the Oklahoma authorities seem to be trying very hard not to investigate. I could tell the story of <a href="https://en.wikipedia.org/wiki/Murder_of_Brianna_Ghey">Brianna Ghey</a>, a trans girl stabbed to death in the UK. Closer to home, I could tell the story of <a href="https://www.abc.net.au/news/2021-07-02/background-briefing-mhelody-bruno-investigation/100256330">Mhelody Bruno</a>, a Filipina trans woman strangled to death by her boyfriend in regional NSW and whose death was barely even investigated by the NSW police and courts. These events all took place in the US, the UK, and Australia, and all quite recently. They are not stories from a time long past.</p>
<p>I could tell all these stories, but what I have learned is that describing these events has very little impact on the people who keep telling me that actually things are <em>fine</em> now. Those stories are the outliers, they tell me. The bad stories are the exceptions, not the norm.</p>
<p>Again, it is not true. The thing that well-meaning cis and straight people have this massive blindspot about, is the fact that so many LGBT people have dark stories from our own experience that we aren’t telling them about, and so they impute a much happier backstory to us than is even remotely plausible. People who barely even know me will, to my utter bewilderment, confidently tell me to my face that – despite being transgender and bisexual – I could not <em>possibly</em> have had any particularly traumatic experiences. The gall of it is shocking, actually.</p>
</section>
<section id="act-i-learning-to-love-s7" class="level2">
<h2 class="anchored" data-anchor-id="act-i-learning-to-love-s7">Act I: Learning to love S7</h2>
<p>This whole thing started because I wanted to learn how to use the relatively new <a href="https://rconsortium.github.io/S7/">S7 object oriented programming system</a> that is intended to serve as a successor to the informal-but-janky <a href="https://adv-r.hadley.nz/s3.html">S3</a> system and the formal-but-painful <a href="https://adv-r.hadley.nz/s4.html">S4</a> system that already exist within R.<sup>2</sup> It seemed like a very simple exercise when I started, but as with any exercise in learning a new thing I very quickly felt like a dog trying to understand Norway.<sup>3</sup></p>
<p>As is my habit, I’ve taken my learning process and used it to create art. What I want to do with S7 here is create a system for programmatically constructing “drawable shapes” that abide by particular rules, alongside a toolkit that can take these objects and render them within an abstract “sketch” that can later be rendered to an image with the help of the grid graphics system. In that sense, the basic idea underpinning my tool is not that different – though far less sophisticated – to how ggplot2 works, but I’ve designed it with different considerations in mind. My tools are not designed for data visualisation, they are designed for generative art. Spiritually they have more in common with p5.js than ggplot2.</p>
<section id="writing-a-new-s7-class" class="level3">
<h3 class="anchored" data-anchor-id="writing-a-new-s7-class">Writing a new S7 class</h3>
<p>Okay look. It’s kind of like this. While eventually the stated plan is for S7 to become part of base R and be easily available to any R user – no different to S3 and S4 – it’s still in development and there are still quirks. So for now it’s a regular package like any other one and if we want to start building classes with it we’ll have to load the package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(S7)</span></code></pre></div>
</div>
<p>Let’s have a look at how you define classes in S7, and for the moment we’ll keep it simple. All I’m going to do right now is create a new class that represents a circle. The way we do this in S7 is with the <code>new_class()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> class_numeric,</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> class_numeric,</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> class_numeric</span>
<span id="cb4-7">  )</span>
<span id="cb4-8">)</span></code></pre></div>
</div>
<p>By doing so, I create a new function called <code>circle()</code> that has arguments corresponding to the <code>x</code>, <code>y</code> and <code>radius</code> properites. I can call this function to create a new circle object. In the code below I create an object <code>cc</code> that – at least in some very abstract sense of the term – corresponds to the unit circle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 0
 @ y     : num 0
 @ radius: num 1</code></pre>
</div>
</div>
<p>Here we have a circle object that has three “properties” <code>x</code>, <code>y</code>, and <code>radius</code>. We can think of it as something broadly similar to a named list, but it has rules attached. In the class definition above I specified that <code>x</code>, <code>y</code>, and <code>radius</code> must be numeric values: they are allowed to be integers or doubles, but they can’t be characters. Here’s what happens if I try to create a circle with <code>radius = "big"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"big"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: &lt;circle&gt; object properties are invalid:
- @radius must be &lt;integer&gt; or &lt;double&gt;, not &lt;character&gt;</code></pre>
</div>
</div>
<p>So here we see something that we wouldn’t normally have in, say, an S3 class:<sup>4</sup> the class definition explicitly says that the <code>radius</code> property must be numeric, so my <code>circle()</code> function throws an error if I foolishly try to pass it a non-numeric radius.</p>
<p>Okay so what’s going on with these “properties”? Properties are analogous to “slots” in an S4 object<sup>5</sup> and can be accessed using <code>@</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<p>One nice thing about S7 is that you can modify (most) properties of an object directly. So if I want to update my <code>cc</code> object so that it now (nominally) represents a circle with radius 2, I can do this:<sup>6</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 0
 @ y     : num 0
 @ radius: num 2</code></pre>
</div>
</div>
<p>Amazing. Thrilling. The excitement, it cannot be contained.</p>
</section>
<section id="default-values" class="level3">
<h3 class="anchored" data-anchor-id="default-values">Default values</h3>
<blockquote class="blockquote">
<p>The bar has pride flags plastered on the window, and they’re advertising a drag show. These superficial safety signals do not make me feel safe though, because what I remember about this bar is the feel of a strangers hands at my neck as he forced his tongue down my throat in full view of the patrons in the queer themed rainbow bar upstairs. He was so strong.</p>
</blockquote>
<p>One limitation to the <code>circle()</code> function I just created is that it doesn’t supply default values for the <code>x</code>, <code>y</code>, and <code>radius</code> properties, so the user has to explicitly pass values every time it is called. That’s not always ideal, especially as your classes become more complex (we’ll see this later) and have many properties that only rarely need to be modified by the user.</p>
<p>To fix this, it’s helpful to note that when I wrote <code>x = class_numeric</code> in the previous definition for the <code>circle</code> class I was relying on a shorthand notation. If you want to be more explicit in how properties are defined, you can use the <code>new_property()</code> function. One of the arguments to <code>new_property()</code> is <code>default</code> and allows you to provide a default value for that property in case the user doesn’t supply one. So here’s a modified version of our <code>circle</code> class that supplies defaults for all three properties:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb13-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb13-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb13-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-7">  )</span>
<span id="cb13-8">)</span></code></pre></div>
</div>
<p>Now that I’ve done so, it’s possible for the user to construct a new circle by supplying values only for those properties where they want to override the default. So this now works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 2
 @ y     : num 0
 @ radius: num 1</code></pre>
</div>
</div>
<p>As you can see, this object describes a circle with default values <code>y = 0</code> and <code>radius = 1</code>, as well as a user supplied value <code>x = 0</code>.</p>
</section>
<section id="computed-properties" class="level3">
<h3 class="anchored" data-anchor-id="computed-properties">Computed properties</h3>
<p>Let’s be honest. This circle class only represents a circle in the most abstract sense. It’s a list of three numbers that you need to describe a circle, but it doesn’t actually compute any points that lie on the circumference of said circle. If you wanted to <em>draw</em> the circle in question, you’d have to actually compute those points yourself. For a circle this computation is so very straightforward that it seems strange to bother doing it within the <code>circle</code> object, but other kinds of parametrised shapes (notably the <code>blob</code> and <code>ribbon</code> objects that are going to appear later) are more complex and the relationship between the parameters and the vertices of the shape is more complex. In those cases, it seems very sensible to compute the vertices of the shape within the object itself.</p>
<p>One very handy feature of S7 classes is that they support <em>computed properties</em>. A computed property is one that is not supplied by the user, and whose value is constructed (initially at the time of object creation, but we’ll revisit this) on the basis of the regular properties of the object. So, for instance, our <code>circle</code> class already has ordinary properties <code>x</code>, <code>y</code>, and <code>radius</code>, but we could add a computed property called <code>points</code> that contains the coordinates of the vertices of the circle that is defined by the <code>x</code>, <code>y</code>, and <code>radius</code> values. In practice, however, that means we’ll need to add another new property to our class. As a mathematical abstraction, there are an infinite number of points that sit on the perimeter of a circle. In real life, we’ll have to approximate this by choosing <code>n</code> evenly spaced locations on the circle.</p>
<p>To that end, we can update our <code>circle</code> class like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb16-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb16-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_integer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L),</span>
<span id="cb16-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb16-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_data.frame,</span>
<span id="cb16-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb16-11">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb16-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb16-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb16-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb16-15">        )</span>
<span id="cb16-16">      } </span>
<span id="cb16-17">    )    </span>
<span id="cb16-18">  )</span>
<span id="cb16-19">)</span></code></pre></div>
</div>
<p>Even a moments inspection of the code makes clear that the <code>points</code> property is rather different to the others. The data stored within <code>points</code> is structured as a data frame (we’ll improve on this later) that has columns corresponding to the x- and y-coordinates of the points. Critically, however, the user does <em>not</em> supply the value for <code>points</code>. Instead, what I have done here is use the <code>getter</code> argument to <code>new_property()</code> to supply a function that is executed whenever a new circle is created. The getter function always takes a single argument <code>self</code>, referring to the circle object itself, and returns the value that will be assigned to the computed property (in this case <code>points</code>).</p>
<p>The key thing about the getter function is that you can reference the other properties of the object. So, in the code above, you can see that I’ve used <code>self@x</code>, <code>self@radius</code>, etc, to refer to the values of the <code>x</code> and <code>radius</code> values that were supplied by the user. By doing so, it’s pretty easy to write code that programmatically constructs the value of a computed property, using the user-supplied property values to do so.</p>
<p>So let’s have a look at what happens when we use our updated <code>circle</code> class. When I create a new circle, the <code>points</code> property is automatically computed using the user-specified <code>x</code>, <code>y</code>, <code>radius</code>, and <code>n</code> properties:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">cc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>L)</span>
<span id="cb17-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 1
 @ y     : num 2
 @ radius: num 3
 @ n     : int 50
 @ points:'data.frame': 50 obs. of  2 variables:
 .. $ x: num  4 3.98 3.9 3.78 3.61 ...
 .. $ y: num  2 2.38 2.76 3.13 3.47 ...</code></pre>
</div>
</div>
<p>Another nice feature of computed properties in S7 is that they are dynamic. When I update one of the other properties, the computed <code>points</code> property is automatically updated. For example, let’s take the circle object <code>cc</code> that I constructed in the last code snippet, and instruct R to compute it using a mere 5 points along the perimeter:<sup>7</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>L</span>
<span id="cb19-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : num 1
 @ y     : num 2
 @ radius: num 3
 @ n     : int 5
 @ points:'data.frame': 5 obs. of  2 variables:
 .. $ x: num  4 1 -2 1 4
 .. $ y: num  2 5 2 -1 2</code></pre>
</div>
</div>
<p>The same trick could be used dynamically to change the size or location of the circle (I leave it to the reader to imagine the potential here in the generative art context).</p>
<p>A key thing to note about the <code>points</code> property that I just created is that it is read-only. Formally, the way you know that it is read-only is because I have defined a <code>getter</code> function for it but have (deliberately) not defined a <code>setter</code> function that would be executed if the user tries to change <code>points</code> directly. Because of this, <code>points</code> is read-only. The user is permitted to read and extract the property via the <code>@</code> accessor operator…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  4  2
2  1  5
3 -2  2
4  1 -1
5  4  2</code></pre>
</div>
</div>
<p>but they are not allowed to write directly to that property. The only<sup>8</sup> way to modify a computed property is by modifying the other properties from which it is computed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: Can't set read-only property &lt;circle&gt;@points</code></pre>
</div>
</div>
<p>For the purposes of the tool I want to create, the read-only nature of <code>points</code> is a desirable feature. I <em>don’t</em> want users trying to manually create the <code>points</code> that lie on the circumference of a circle. The abstract concept of a circle is defined by <code>x</code>, <code>y</code> and <code>radius</code>, and if I want to create <code>n</code> evenly spaced points on the circle, then these points are automatically computed as a byproduct of specifying these values.</p>
</section>
<section id="validators" class="level3">
<h3 class="anchored" data-anchor-id="validators">Validators</h3>
<blockquote class="blockquote">
<p>Am I a woman? I mean, there are men who seem pretty happy to humiliate me, choke me, and rape me as if I <em>were</em> a woman, but is that the validation I want? It says “female” on all my documents now, and I fought tooth and nail for years to make that happen. Is the fight itself enough for me to earn my place as a valid woman? But if so, then why am I repeatedly having to justify my life to the satisfaction of men who ignore me when I talk about the reality of life as a trans woman, who treat every interaction with me like they’re having an academic debate, and whose only interest in my life is using me as a vehicle to argue that I have an unfair advantage in the sporting contests that I’m too frightened to participate in? This must all count for something, surely. Does there come a point at which I too can make a valid claim to be the victim of misogyny?</p>
</blockquote>
<p>Another limitation to the <code>circle</code> class that I’ve just created is that there is no <em>validator</em> function. The role of a validator is to ensure that the values that the user passes during object construction correspond to a valid object. A circle can’t really have a negative <code>radius</code>. The <code>x</code> and <code>y</code> values that define the center of the circle need to be scalar values. The number of points <code>n</code> can’t be non-negative. The class that I’ve just created doesn’t enforce these constraints. Sometimes this means that you can pass nonsense values and end up with something that <em>looks</em> like a valid circle, but isn’t:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ x     : int [1:2] 1 2
 @ y     : num 1
 @ radius: num 1
 @ n     : int 100
 @ points:'data.frame': 100 obs. of  2 variables:
 .. $ x: num  2 3 1.99 2.98 1.97 ...
 .. $ y: num  1 1.06 1.13 1.19 1.25 ...</code></pre>
</div>
</div>
<p>Other times, you can pass nonsense values and get an error message because one of the internal function calls doesn’t work properly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in seq.default(0, 2 * pi, length.out = self@n): 'length.out' must be a non-negative number</code></pre>
</div>
</div>
<p>Neither of these outcomes is a good thing. What you really need here is a validator function that checks the user inputs and throws an informative error whenever those inputs are invalid. A nice feature of S7 is that it supports validators “out of the box”, and makes the validator part of the class definition itself.</p>
<p>So here is an updated <code>circle</code> class definition that incorporates a validator function. It’s a relatively clean setup, because you can simply have the validator return the string for your error message, or else have a <code>NULL</code> return value if the inputs are good:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb30-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, </span>
<span id="cb30-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb30-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb30-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb30-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb30-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_integer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L),</span>
<span id="cb30-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb30-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_data.frame,</span>
<span id="cb30-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb30-11">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb30-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb30-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb30-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb30-15">        )</span>
<span id="cb30-16">      } </span>
<span id="cb30-17">    )    </span>
<span id="cb30-18">  ),</span>
<span id="cb30-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb30-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb30-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb30-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be length 1"</span>)</span>
<span id="cb30-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb30-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be a non-negative number"</span>)</span>
<span id="cb30-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb30-26">  }</span>
<span id="cb30-27">)</span></code></pre></div>
</div>
<p>This probably isn’t the ideal form for the <code>circle</code> validator (e.g., I could probably think more about what messages should be returned) but it illustrates the basic idea. The key thing is that, for example, if I try to pass a negative <code>radius</code> I get an error:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.234</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: &lt;circle&gt; object is invalid:
- radius must be a non-negative number</code></pre>
</div>
</div>
<p>One thing I’m learning very quickly is that when you’re designing a system that is built from many different classes, it is <em>extremely</em> valuable to have validators for all your classes. Debugging becomes much easier on the one hand, and on the other hand you can always move forward in your code knowing that when class A depend on class B in some fashion, you can always rely on knowing that every class B object that class A works with will be a valid instance of class B. A little bit of extra effort when writing the class definition spares you a lot of pain down the track when you’re trying to make sense of how your classes interact with each other.</p>
</section>
<section id="building-structure" class="level3">
<h3 class="anchored" data-anchor-id="building-structure">Building structure</h3>
<blockquote class="blockquote">
<p>The constituent pieces of an oppressive system are often innocuous on their face, very often the result of thoughtlessness rather than malice. The consequences, however, are cruel. Crying in a hotel lobby at a conference when your documentation doesn’t match your appearance and the staff are arguing with each other over whether you’re really the person pictured on the drivers licence you have not yet been able to change. Crying in a lecture theatre in front of an audience because the programmer who designed the IT system didn’t consider name and gender to be malleable properties so even though you’ve updated your records with HR, the IT system has just outed you to all your students. Trying to work out if you’re allowed to use the bathroom next to your office because nobody bothered to write a policy document, and instead walking a kilometer to go off-campus to pee. Living in dread waiting for the next time you fall into the cracks in the system.</p>
</blockquote>
<p>Up to this point, all I have done when designing my system is define a <code>circle</code> class that creates objects with a specific structure. In order to expand this into a richer tool that can eventually support the artistic goals I have in mind, I’m going to need to broaden my vision and think about a collection of related classes that play nicely with one another.</p>
<p>In order to make this shift, a natural place to start is thinking about what kind of objects should be stored internally within a <code>circle</code> object (and other shapes). For instance, in the code above I stored the computed <code>points</code> as a simple data frame. It would be more sensible to define an actual S7 class for this, with its own validator to make sure that any shape classes I define compute a valid set of points:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb33-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"points"</span>,</span>
<span id="cb33-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb33-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> class_numeric,</span>
<span id="cb33-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> class_numeric</span>
<span id="cb33-6">  ),</span>
<span id="cb33-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb33-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y)) {</span>
<span id="cb33-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x and y must be the same length"</span></span>
<span id="cb33-10">    }</span>
<span id="cb33-11">  }</span>
<span id="cb33-12">)</span></code></pre></div>
</div>
<p>Similarly, when the time comes to start drawing these things, my circles (and other shapes) will need to have a defined visual <code>style</code>. Again, I can create a class for this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">style <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb34-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"style"</span>,</span>
<span id="cb34-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb34-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color     =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_character, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>),</span>
<span id="cb34-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_character, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>),</span>
<span id="cb34-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb34-7">  )</span>
<span id="cb34-8">)</span></code></pre></div>
</div>
<p>You’ll notice that <code>style</code> currently doesn’t have a validator, and it doesn’t support a very wide range of properties. The artistic system I want to consider has the constraint that <em>every</em> drawable shape is a polygon of some kind, and needs to have stylistic properties that one associates with polygons. The <code>color</code>, <code>fill</code>, and <code>linewidth</code> properties that exist within this <code>style</code> class are a beginning, but nothing more than that. Similarly, the absence of a validator is a strong hint that I haven’t finished thinking through what I want this class to be. For the current purposes the <code>style</code> class works, but it’s very far from complete.</p>
<p>Let’s move on, and start thinking about what happens when my system has a richer collection of drawable shapes than just circles. Later on in this post I’m going to define several different kinds of drawable shapes (e.g., the <code>blob</code> and <code>ribbon</code> objects in the initial artwork), and they’ll all have some structural similarities to one another that I want to enforce. To that end I’ll create a class called <code>drawable</code>.<sup>9</sup> The <code>drawable</code> class will later be used as the parent class for all the shape classes that I want to be, well, drawable. But it’s not super interesting in itself. Here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">drawable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb35-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drawable"</span>,</span>
<span id="cb35-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb35-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb35-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> style,</span>
<span id="cb35-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>()</span>
<span id="cb35-7">    ),</span>
<span id="cb35-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb35-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb35-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L))</span>
<span id="cb35-11">    )</span>
<span id="cb35-12">  )</span>
<span id="cb35-13">)</span></code></pre></div>
</div>
<p>The true purpose of the <code>drawable</code> class is that it enforces structure. Every drawable shape class that I later define will necessarily have a computed <code>points</code> property, and a user-defined <code>style</code> property. As an added benefit, because the only information I’ll ever need to draw a shape is captured by <code>style</code> and <code>points</code>, I will be able to define a single drawing method that works for all <code>drawable</code> objects regardless of their specific character.</p>
<p>Okay so now we can define <code>circle</code> as a subclass of <code>drawable</code>. It doesn’t change the code very much. All I’m doing here is adding <code>parent = drawable</code> to the class definition:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb36-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>,</span>
<span id="cb36-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb36-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb36-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb36-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb36-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_numeric, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb36-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(class_integer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L),</span>
<span id="cb36-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb36-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb36-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb36-12">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb36-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(</span>
<span id="cb36-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb36-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb36-16">        )</span>
<span id="cb36-17">      }</span>
<span id="cb36-18">    )</span>
<span id="cb36-19">  ),</span>
<span id="cb36-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb36-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb36-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb36-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be length 1"</span>)</span>
<span id="cb36-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb36-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be a non-negative number"</span>)</span>
<span id="cb36-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb36-27">  }</span>
<span id="cb36-28">)</span></code></pre></div>
</div>
<p>To see that our new <code>circle</code> class is indeed a subclass of <code>drawable</code>, we can create a new circle and check its class attribute:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">cc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>()</span>
<span id="cb37-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(cc)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "circle"    "drawable"  "S7_object"</code></pre>
</div>
</div>
<p>The primary class is <code>circle</code>, as you’d expect, and the parent class is <code>drawable</code>. Notice also that the object has a third class, <code>S7_object</code>: all S7 objects possess this class.</p>
</section>
<section id="constructors" class="level3">
<h3 class="anchored" data-anchor-id="constructors">Constructors</h3>
<p>Imposing this structure on our drawable objects is valuable, and will pay off later because everything that we need to draw the shape is captured by the embedded <code>style</code> and <code>points</code> objects. However, as an unfortunate side effect of this, I’ve accidentally defined a class that makes it very hard for the user to supply the stylistic features: the arguments to our new <code>circle()</code> function are now:</p>
<ul>
<li><code>style</code>, which has to be a call to the <code>style()</code> constructor</li>
<li><code>x</code>, <code>y</code>, <code>radius</code>, and <code>n</code>, as before</li>
</ul>
<p>That means that if I want to define a red circle with radius 2, my poor user (i.e., <em>me</em>) has to do something rather unpleasant:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ style : &lt;style&gt;
 .. @ color    : chr "red"
 .. @ fill     : chr "black"
 .. @ linewidth: num 1
 @ points: &lt;points&gt;
 .. @ x: num [1:100] 2 2 1.98 1.96 1.94 ...
 .. @ y: num [1:100] 0 0.127 0.253 0.379 0.502 ...
 @ x     : num 0
 @ y     : num 0
 @ radius: num 2
 @ n     : int 100</code></pre>
</div>
</div>
<p>The reason this is cumbersome is that my <code>drawable</code> class imposes a structure in which all the stylistic features are captured by the <code>style</code> property (shared by all drawables), whereas all the parameters that are used to construct the <code>points</code> property are specific to the particular drawable class (<code>circle</code>, <code>blob</code>, <code>ribbon</code>, etc). This internal structure is a good thing insofar as it ensures I can always extract the two key properties from any drawable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;style&gt;
 @ color    : chr "black"
 @ fill     : chr "black"
 @ linewidth: num 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">cc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;points&gt;
 @ x: num [1:100] 1 0.998 0.992 0.982 0.968 ...
 @ y: num [1:100] 0 0.0634 0.1266 0.1893 0.2511 ...</code></pre>
</div>
</div>
<p>As you can imagine, this is a handy feature in a generative art tool. Nevertheless it’s a huge pain in the arse from the user perspective when it comes to constructing a new <code>circle</code> object.</p>
<p>Fortunately, S7 makes it possible to fix this by allowing the class definition to include a custom <em>constructor</em> function that allows the developer to customise the arguments that the user supplies.</p>
<p>Here’s what the <code>circle</code> class looks like with a custom constructor:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb45-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>,</span>
<span id="cb45-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb45-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb45-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x      =</span> class_numeric,</span>
<span id="cb45-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y      =</span> class_numeric,</span>
<span id="cb45-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> class_numeric,</span>
<span id="cb45-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n      =</span> class_integer,</span>
<span id="cb45-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb45-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb45-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb45-12">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb45-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(</span>
<span id="cb45-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb45-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb45-16">        )</span>
<span id="cb45-17">      }</span>
<span id="cb45-18">    )</span>
<span id="cb45-19">  ),</span>
<span id="cb45-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb45-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb45-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb45-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be length 1"</span>)</span>
<span id="cb45-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb45-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be a non-negative number"</span>)</span>
<span id="cb45-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb45-27">  },</span>
<span id="cb45-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constructor =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, ...) {</span>
<span id="cb45-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_object</span>(</span>
<span id="cb45-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawable</span>(),</span>
<span id="cb45-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb45-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb45-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> radius,</span>
<span id="cb45-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb45-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(...)</span>
<span id="cb45-36">    )</span>
<span id="cb45-37">  }</span>
<span id="cb45-38">)</span></code></pre></div>
</div>
<p>There’s a few things to note here:</p>
<ul>
<li>The constructor function always ends with a call to <code>new_object()</code>, and the first argument is always the parent class (i.e., in this case the parent of <code>circle</code> is <code>drawable</code>).</li>
<li>The way I’ve cleaned up my arguments is by having four explicitly defined arguments for a circle (<code>x</code>, <code>y</code>, <code>radius</code>, and <code>n</code>), and then included the dots <code>...</code> that are then passed onto <code>style()</code></li>
<li>I’ve surreptitiously changed the way that my default arguments are specified: the constructor function is now responsible for defining defaults.</li>
</ul>
<p>The extra effort that goes into writing a custom constructor is in some ways a pain (especially because it does mean that any subclass of <code>circle</code> will also need a custom constructor), but in this case it’s worth it because I can create a blue circle in a natural way:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">cc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7acbf5"</span>)</span>
<span id="cb46-2">cc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;circle&gt;
 @ style : &lt;style&gt;
 .. @ color    : chr "black"
 .. @ fill     : chr "#7acbf5"
 .. @ linewidth: num 1
 @ points: &lt;points&gt;
 .. @ x: num [1:100] 2 2 1.98 1.96 1.94 ...
 .. @ y: num [1:100] 0 0.127 0.253 0.379 0.502 ...
 @ x     : num 0
 @ y     : num 0
 @ radius: num 2
 @ n     : int 100</code></pre>
</div>
</div>
</section>
<section id="other-drawables" class="level3">
<h3 class="anchored" data-anchor-id="other-drawables">Other drawables</h3>
<p>Later in the post I’ll go on to define the <code>blob</code> and <code>ribbon</code> classes that are so much fun for artistic purposes, but we have a long way to go before we get to that. One thing I will do now, however, is define a general purpose <code>shape</code> class that isn’t very interesting, but handy to have as a fallback. The <code>shape</code> class has no interesting parameters: the user directly supplies the <code>x</code> and <code>y</code> coordinates that define the <code>points</code> property for the shape. This is very handy artistically in situations where you don’t really want to bother defining a shape parametrically, and instead just want to supply the vertices directly:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">shape <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb48-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shape"</span>,</span>
<span id="cb48-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb48-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb48-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> class_numeric,</span>
<span id="cb48-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> class_numeric,</span>
<span id="cb48-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb48-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb48-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb48-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y)</span>
<span id="cb48-11">      }</span>
<span id="cb48-12">    )</span>
<span id="cb48-13">  ),</span>
<span id="cb48-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb48-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y)) {</span>
<span id="cb48-16">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x and y must be the same length"</span></span>
<span id="cb48-17">    }</span>
<span id="cb48-18">  },</span>
<span id="cb48-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constructor =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y, ...) {</span>
<span id="cb48-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_object</span>(</span>
<span id="cb48-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawable</span>(),</span>
<span id="cb48-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb48-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb48-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(...)</span>
<span id="cb48-25">    )</span>
<span id="cb48-26">  }</span>
<span id="cb48-27">)</span></code></pre></div>
</div>
<p>It’s not interesting, but you can use it to manually define a pink triangle like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">tr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shape</span>(</span>
<span id="cb49-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb49-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb49-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eaacb8"</span></span>
<span id="cb49-5">)</span>
<span id="cb49-6">tr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;shape&gt;
 @ style : &lt;style&gt;
 .. @ color    : chr "black"
 .. @ fill     : chr "#eaacb8"
 .. @ linewidth: num 1
 @ points: &lt;points&gt;
 .. @ x: num [1:3] 0 2 1
 .. @ y: num [1:3] 1.73 1.73 0
 @ x     : num [1:3] 0 2 1
 @ y     : num [1:3] 1.73 1.73 0</code></pre>
</div>
</div>
<p>Honestly, I’m only mentioning it now because in a moment I’m going to define drawing functions that I’ll apply to the circle object <code>cc</code> from before, and the <code>tr</code> object I’ve just created.</p>
</section>
</section>
<section id="act-ii-sketching-with-grid" class="level2">
<h2 class="anchored" data-anchor-id="act-ii-sketching-with-grid">Act II: Sketching with grid</h2>
<blockquote class="blockquote">
<p>I am sitting in shock on my couch. That was… that was rape, right? If I were a cisgender woman that would clearly be rape, right? I said no, repeatedly. He forced his way in. Into my apartment. Into me. It happened, right? I mean, I know it happened, because it hurts where he forced me. So I <em>know</em> it happened, my body is telling me exactly what happened. But… that really did just happen, right?</p>
</blockquote>
<p>At this stage in the development process I have a sensible collection of S7 classes that I can use to represent polygons in a systematic way. I have <code>style</code> and <code>points</code> classes that capture the “raw” characteristics of the polygons, and I have <code>drawable</code> and its child classes <code>circle</code> and <code>shape</code> (with <code>blob</code> and <code>ribbon</code> to come shortly) that allows me to construct drawable shapes in a convenient way.</p>
<p>What I <em>don’t</em> have yet is a method for actually drawing these things.</p>
<section id="drawing-drawables" class="level3">
<h3 class="anchored" data-anchor-id="drawing-drawables">Drawing drawables</h3>
<p>There are a lot of ways I could go about creating actual drawings from <code>drawable</code> objects, and I did spend a little time thinking about the pros and cons of different approaches. What I landed on in the end, however, was a strategy where I would define a new generic function called <code>draw()</code> and then supply methods for it that use the grid graphics system in R to do the rendering.</p>
<p>To construct a new generic function in S7, we use the <code>new_generic()</code> function. Here’s is how I’ve done that to create <code>draw()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">draw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_generic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draw"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dispatch_args =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>)</span></code></pre></div>
</div>
<p>In this code, the <code>dispatch_args</code> argument is used to indicate which arguments to the <code>draw()</code> function should be used in method dispatch. I’ve kept it simple in this case: the specific method that S7 will choose for <code>draw()</code> is based on the class of the <code>object</code> argument. For the moment, the only class for which I really need to supply a method is the <code>drawable</code> class (i.e., how should <code>draw()</code> handle the input when it is passed a single <code>drawable</code> object), but very shortly I’m going to define a <code>sketch</code> class that allows many <code>drawable</code> objects to be composed into a single image, so I’ll need a <code>draw()</code> method to handle <code>sketch</code> inputs as well.</p>
<p>But I am getting ahead of myself. To specify a method for an S7 generic function, we call the <code>method()</code> function and specify the generic for which the method is to be defined (i.e., <code>draw()</code>), and the class for which the method is defined (i.e., <code>drawable</code>). Here’s the code that I used:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span>(draw, drawable) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb52-2"></span>
<span id="cb52-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plotting area is a single viewport with equal-axis scaling</span></span>
<span id="cb52-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(xlim)) xlim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x)</span>
<span id="cb52-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(ylim)) ylim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x)</span>
<span id="cb52-6">  x_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb52-7">  y_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ylim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ylim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb52-8">  vp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(</span>
<span id="cb52-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xscale =</span> xlim,</span>
<span id="cb52-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yscale =</span> ylim,</span>
<span id="cb52-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width  =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y_width), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snpc"</span>),</span>
<span id="cb52-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> x_width), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snpc"</span>),</span>
<span id="cb52-13">  )</span>
<span id="cb52-14"></span>
<span id="cb52-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shapes are always polygon grobs</span></span>
<span id="cb52-16">  grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygonGrob</span>(</span>
<span id="cb52-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x,</span>
<span id="cb52-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y,</span>
<span id="cb52-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(</span>
<span id="cb52-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>color,</span>
<span id="cb52-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>fill,</span>
<span id="cb52-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>linewidth</span>
<span id="cb52-23">    ),</span>
<span id="cb52-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp,</span>
<span id="cb52-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default.units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native"</span></span>
<span id="cb52-26">  )</span>
<span id="cb52-27"></span>
<span id="cb52-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw the grob</span></span>
<span id="cb52-29">  grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb52-30">  grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(grob)</span>
<span id="cb52-31">}</span></code></pre></div>
</div>
<p>If you are familiar with the grid package, you can immediately see that this is a very simple use of grid (e.g., compare it to ggplot2, which is very sophisticated in how it uses grid). All I’m doing here is defining a <em>single</em> plotting region (i.e., the viewport) and – because this is art rather than data visualisation – using <code>"snpc"</code> units to enforce a strong constraint that the x and y axes of this plot region will always be on the same scale, similar to how <code>coord_equal()</code> works in ggplot2. Our <code>drawable</code> object is then used to construct a single polygon grob: the internal <code>points</code> object contained within every drawable is used to define the vertices of the polygon, and the internal <code>style</code> object contained within every drawable is used to specify the graphical parameters associated with the polygon. See? I told you that all the effort we went to in imposing structure on the <code>drawable</code> class would come in handy. The <code>draw()</code> method is easy to write because the structure of the objects is aligned with the underlying functions we want those objects to support.</p>
<p>So here we go. At last we can draw simple shapes. Here’s our blue circle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(cc)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-34-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Here is our pink triangle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(tr)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Not exactly high-calibre art, but the foundations are in place for us to start building more interesting tools atop these classes and methods.</p>
</section>
<section id="making-sketches" class="level3">
<h3 class="anchored" data-anchor-id="making-sketches">Making sketches</h3>
<blockquote class="blockquote">
<p>Early in transition, walking into the office in my academic department. “So you’re a woman now? Are you going to get the surgery? Or did you already have it? Are you looking for a husband?” Um, I was hoping to use the photocopier if that’s okay? I have a class handout to prepare. Wasn’t planning to have a conversation about my genital status actually, and I feel like if I were a cis woman you’d realise that your professional colleagues’ genitals are not an appropriate workplace conversation topic.</p>
</blockquote>
<p>At last the time has come to define the <code>sketch</code> class that will allow us to compose multiple drawables into a single drawing. Happily for us this is very simple to do. My first pass at defining a <code>sketch</code> class looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">sketch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb55-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sketch"</span>,</span>
<span id="cb55-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb55-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shapes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> class_list, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>())</span>
<span id="cb55-5">  ),</span>
<span id="cb55-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb55-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(d) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(d, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drawable"</span>)))) {</span>
<span id="cb55-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"shapes must be a list of drawable-classed objects"</span></span>
<span id="cb55-9">    }</span>
<span id="cb55-10">  }</span>
<span id="cb55-11">)</span></code></pre></div>
</div>
<p>Internally it is very simple: it has one property <code>shapes</code>, which is defined to be a list of <code>drawable</code> objects. Notice that we have a validator function for the class that checks to see that every element of the <code>shapes</code> list inherits from the <code>drawable</code> class. Easy.</p>
<p>Defining a <code>draw()</code> method for the <code>sketch</code> class is only slightly more complicated than the corresponding method was for a single <code>drawable</code> object. The only subtlety to it is determining what the “plot limits” should be if the user doesn’t manually specify <code>xlim</code> and <code>ylim</code>. Here, all I’ve done is set the default limits so that the plot includes all the constituent objects in the <code>sketch</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span>(draw, sketch) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb56-2"></span>
<span id="cb56-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set default axis limits</span></span>
<span id="cb56-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(xlim)) {</span>
<span id="cb56-5">    xlim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb56-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(s, id) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x))),</span>
<span id="cb56-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(s, id) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x)))</span>
<span id="cb56-8">    )</span>
<span id="cb56-9">  }</span>
<span id="cb56-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(ylim)) {</span>
<span id="cb56-11">    ylim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb56-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(s) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y))),</span>
<span id="cb56-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes, \(s) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y)))</span>
<span id="cb56-14">    )</span>
<span id="cb56-15">  }</span>
<span id="cb56-16"></span>
<span id="cb56-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plotting area is a single viewport with equal-axis scaling</span></span>
<span id="cb56-18">  x_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xlim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb56-19">  y_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ylim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ylim[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb56-20">  vp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viewport</span>(</span>
<span id="cb56-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xscale =</span> xlim,</span>
<span id="cb56-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yscale =</span> ylim,</span>
<span id="cb56-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width  =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y_width), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snpc"</span>),</span>
<span id="cb56-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, y_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> x_width), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snpc"</span>),</span>
<span id="cb56-25">  )</span>
<span id="cb56-26"></span>
<span id="cb56-27">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw the grobs</span></span>
<span id="cb56-28">  grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.newpage</span>()</span>
<span id="cb56-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(s <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>shapes) {</span>
<span id="cb56-30">    grob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">polygonGrob</span>(</span>
<span id="cb56-31">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x,</span>
<span id="cb56-32">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y,</span>
<span id="cb56-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gp =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpar</span>(</span>
<span id="cb56-34">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>color,</span>
<span id="cb56-35">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>fill,</span>
<span id="cb56-36">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>style<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>linewidth</span>
<span id="cb56-37">      ),</span>
<span id="cb56-38">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vp =</span> vp,</span>
<span id="cb56-39">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default.units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"native"</span></span>
<span id="cb56-40">    )</span>
<span id="cb56-41">    grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid.draw</span>(grob)</span>
<span id="cb56-42">  }</span>
<span id="cb56-43">}</span></code></pre></div>
</div>
<p>You’ll notice that the drawing code isn’t very sophisticated here either: it’s a simple loop that draws the individual shape objects in the same order that they appear in the <code>sketch</code>. I’ve made no effort at all to make the code efficient. For now all I care about is that it works.</p>
<p>You can see it in action here, where I’ve created a very simple sketch called <code>sk</code> that includes the blue circle <code>cc</code> and pink triangle <code>tr</code>, and then drawn it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">sk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(cc, tr))</span>
<span id="cb57-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(sk)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<!-- 
### Fallback methods

The final thing we might want to do with this `draw()` method is provide a default method that S7 will use as a fallback in case it cannot find a more specific method. In the code below I use `class_any` to capture this, and all it does is provide a warning that `draw()` cannot plot the object and invisibly returns `NULL`. 


::: {.cell}

```{.r .cell-code}
method(draw, class_any) <- function(object, ...) {
  rlang::warn("No appropriate draw method found")
  return(invisible(NULL))
}
```
:::

::: {.cell}

```{.r .cell-code}
draw("a string is not drawable")
```

::: {.cell-output .cell-output-stderr}
```
Warning: No appropriate draw method found
```
:::
:::


-->
</section>
<section id="creating-art-programmatically" class="level3">
<h3 class="anchored" data-anchor-id="creating-art-programmatically">Creating art programmatically</h3>
<p>Recall earlier, back when I was talking about constructors, how I said that the primary reason for writing my custom constructor functions was user convenience, so that stylistic properties could be passed to <code>circle()</code> etc as “top level” arguments rather than being bundled within a call to <code>style()</code>? Well, that was true as far as it goes, but the convenience factor is a little bit more substantial than saving myself some keystrokes. By creating an API that exposes the stylistic and structural parameters as top level arguments, I can create a data frame that describes all the desired features of a sketch, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb58-2">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb58-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb58-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill   =</span> color,</span>
<span id="cb58-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb58-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb58-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb58-8">)</span>
<span id="cb58-9">values</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 100 × 5
   color   fill        x     y radius
   &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt; &lt;int&gt;  &lt;dbl&gt;
 1 #e50000 #e50000     3     5  0.162
 2 #028121 #028121     2     5  0.239
 3 #e50000 #e50000     2     1  0.364
 4 #ff8d00 #ff8d00     5     5  0.225
 5 #004cff #004cff     2     4  0.241
 6 #ffee00 #ffee00     5     2  0.159
 7 #770088 #770088     4     6  0.364
 8 #ff8d00 #ff8d00     5     2  0.174
 9 #ffee00 #ffee00     4     1  0.482
10 #ffee00 #ffee00     6     5  0.459
# ℹ 90 more rows</code></pre>
</div>
</div>
<p>Because the column names in <code>values</code> match the corresponding arguments to <code>circle()</code>, including those that are passed down to <code>style()</code>, I can create a list of 100 circles to plot using a single call to <code>purrr::pmap()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">circles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, circle)</span></code></pre></div>
</div>
<p>I’m not going to print this <code>circles</code> object because the output would be quite long, but the key thing is that it is a list of 100 objects that possess the <code>drawable</code> class, so I can pass it straight to <code>sketch()</code>, and then pass the corresponding sketch straight to <code>draw()</code>. So the process of constructing my plot is as simple as this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">circles <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-43-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Finally we are starting to see some artistic payoff here, and some potential benefit to using a system like this rather than ggplot2. As much as I adore using ggplot2 for artistic purposes, it’s often clunky to do so precisely because ggplot2 is an extremely powerful tool that is designed for a different purposes. Art is not data visualisation (though arguably they are related), and the design goals of an artistic system are not always aligned with the design goals of a data visualisation tool.</p>
</section>
</section>
<section id="act-iii-ambient" class="level2">
<h2 class="anchored" data-anchor-id="act-iii-ambient">Act III: Ambient</h2>
<blockquote class="blockquote">
<p>I have become fearful now. Anxiety about travelling too far from home has become severe. I know my neighbourhood. I know where all the exits are. I know which bathrooms are safe. Travel to an unfamiliar part of Sydney makes me anxious. Travel to another city makes me panic. Travel to another country is terrifying.</p>
</blockquote>
<p>To be entirely honest with you, dear reader, everything up to this point in the post has been an exercise in creating the infrastructure for artistic work using S7 and grid. The <code>circle()</code> and <code>shape()</code> functions are both handy little things for illustrating the basic ideas, while <code>sketch()</code> and <code>draw()</code> serve as the core vehicles for turning abstract descriptions into actual art. But there’s a limit to how much artistic work you can pull off using only circles, so the time has come to spread our wings and start writing more interesting <code>drawable</code> subclasses that can be used to create more intricate pieces.</p>
<p>Let’s get to it, shall we?</p>
<section id="blobs" class="level3">
<h3 class="anchored" data-anchor-id="blobs">Blobs</h3>
<p>At this point in the process of exploring my new system I’ve only written two fun classes that I’ve defined so far, the <code>blob</code> and <code>ribbon</code> objects that you saw at the start of the post. Let’s start with blobs.</p>
<p>A blob object is essentially a circle with a non-constant radius, where pointwise variation in the radius is calculated using Perlin noise with the assistance of the ambient package. This is actually a type of object I’ve used in my art before. The <a href="https://art.djnavarro.net/gallery/perlin-blobs/">Perlin Blobs</a> series I created a few years ago uses exactly this trick. In the code below all I’m really doing is defining a <code>blob()</code> function (and corresponding S7 class) that incorporates this idea within the “sketches” framework that I’ve just built. Here’s the entire source code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1">blob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb62-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blob"</span>,</span>
<span id="cb62-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb62-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb62-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x          =</span> class_numeric,</span>
<span id="cb62-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y          =</span> class_numeric,</span>
<span id="cb62-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius     =</span> class_numeric,</span>
<span id="cb62-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range      =</span> class_numeric,</span>
<span id="cb62-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n          =</span> class_integer,</span>
<span id="cb62-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency  =</span> class_numeric,</span>
<span id="cb62-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves    =</span> class_integer,</span>
<span id="cb62-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed       =</span> class_integer,</span>
<span id="cb62-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb62-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb62-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb62-16">        angle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pi, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb62-17">        pointwise_radius <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb62-18">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb62-19">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fbm,</span>
<span id="cb62-20">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius,</span>
<span id="cb62-21">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius,</span>
<span id="cb62-22">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency,</span>
<span id="cb62-23">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>seed,</span>
<span id="cb62-24">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves</span>
<span id="cb62-25">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb62-26">          ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>range)</span>
<span id="cb62-27">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(</span>
<span id="cb62-28">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pointwise_radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(angle),</span>
<span id="cb62-29">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pointwise_radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(angle)</span>
<span id="cb62-30">        )</span>
<span id="cb62-31">      }</span>
<span id="cb62-32">    )</span>
<span id="cb62-33">  ),</span>
<span id="cb62-34">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constructor =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb62-35">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb62-36">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb62-37">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb62-38">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L,</span>
<span id="cb62-39">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb62-40">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L,</span>
<span id="cb62-41">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L,</span>
<span id="cb62-42">                         ...) {</span>
<span id="cb62-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_object</span>(</span>
<span id="cb62-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawable</span>(),</span>
<span id="cb62-45">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb62-46">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb62-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> radius,</span>
<span id="cb62-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> range,</span>
<span id="cb62-49">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb62-50">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb62-51">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb62-52">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb62-53">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(...)</span>
<span id="cb62-54">    )</span>
<span id="cb62-55">  },</span>
<span id="cb62-56">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb62-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb62-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb62-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be length 1"</span>)</span>
<span id="cb62-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>range) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"range must be length 1"</span>)</span>
<span id="cb62-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb62-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency must be length 1"</span>)</span>
<span id="cb62-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octaves must be length 1"</span>)</span>
<span id="cb62-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seed must be length 1"</span>)</span>
<span id="cb62-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"radius must be a non-negative number"</span>)</span>
<span id="cb62-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>range <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"range must be a non-negative number"</span>)</span>
<span id="cb62-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency must be a non-negative number"</span>)</span>
<span id="cb62-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb62-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octaves must be a positive integer"</span>)</span>
<span id="cb62-70">  }</span>
<span id="cb62-71">)</span></code></pre></div>
</div>
<p>The code for <code>blob()</code> is a bit longer than the corresponding code for <code>circle()</code>, and all the interesting work is done within the computed property that constructs the <code>points</code> object. This post is already fairly long, so I won’t unpack all the detail, but I will note that if you read my blog post on the <a href="https://blog.djnavarro.net/posts/2024-01-26_splatter/">Splatter</a> system this code probably seems familiar, at least to the extent that I’m using the tools from the ambient package in a fairly similar way.</p>
<p>The one new trick hidden in this code is the fact that the Perlin noise is computed at the <em>actual</em> coordinates where the object is to be drawn in the plot (see the <code>x</code> and <code>y</code> arguments to <code>ambient::fracture()</code>. This part is critical to producing the spatial autocorrelation, because any two blobs constructed using the same <code>seed</code> value will use the same underlying generator, and the distortions associated with those objects will vary smoothly in the actual coordinate space within which the are subsequently drawn.</p>
<p>In any case, here is a simple <code>blob</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">bb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">blob</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L)</span>
<span id="cb63-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(bb)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-45-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>So, using the rainbow <code>palette</code> I defined at the top of the post, we can create a new piece that is somewhat similar in style to the blob-based art I showed at the very beginning:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb64-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>),</span>
<span id="cb64-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>),</span>
<span id="cb64-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb64-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> radius <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb64-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L,</span>
<span id="cb64-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb64-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb64-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fill</span>
<span id="cb64-10">)</span>
<span id="cb64-11"></span>
<span id="cb64-12">blobs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, blob)</span>
<span id="cb64-13">blobs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-46-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Honestly, I feel it could do with a bit of work to be interesting, but you get the idea.</p>
</section>
<section id="ribbons" class="level3">
<h3 class="anchored" data-anchor-id="ribbons">Ribbons</h3>
<blockquote class="blockquote">
<p>At least once a week, my mind flashes back to the time early in transition when I was told that if I was ever caught using the women’s bathroom I’d be violently assaulted as punishment for the transgression. I find myself wondering how serious that threat was, if it was meant in earnest. The context for the threat is long gone. The fear it created has never quite disappeared.</p>
</blockquote>
<p>Next let’s take a look at <code>ribbon()</code>. Once you’ve wrapped your head around the Perlin noise trick used by <code>blob()</code>, you can see that ribbons are a fairly trivial variation on the theme. Ribbons are similar to blobs insofar as they use Perlin noise to describe pointwise variation along a path, but whereas <code>blob()</code> uses this trick to vary the radius of a “circle”, <code>ribbon()</code> starts with a linear segment and then constructs a symmetric polygon around it whose width at any given point is defined using the Perlin noise trick. The result is that <code>ribbon</code> objects end up looking rather similar to violin plots used to vidualise distributions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">ribbon <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_class</span>(</span>
<span id="cb65-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ribbon"</span>,</span>
<span id="cb65-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> drawable,</span>
<span id="cb65-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">properties =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb65-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x          =</span> class_numeric,</span>
<span id="cb65-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y          =</span> class_numeric,</span>
<span id="cb65-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend       =</span> class_numeric,</span>
<span id="cb65-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend       =</span> class_numeric,</span>
<span id="cb65-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width      =</span> class_numeric,</span>
<span id="cb65-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n          =</span> class_integer,</span>
<span id="cb65-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency  =</span> class_numeric,</span>
<span id="cb65-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves    =</span> class_integer,</span>
<span id="cb65-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed       =</span> class_integer,</span>
<span id="cb65-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">points =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_property</span>(</span>
<span id="cb65-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> points,</span>
<span id="cb65-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getter =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb65-17">        x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>xend, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb65-18">        y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>yend, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb65-19">        displacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fracture</span>(</span>
<span id="cb65-20">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb65-21">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fbm,</span>
<span id="cb65-22">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb65-23">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb65-24">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency,</span>
<span id="cb65-25">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>seed,</span>
<span id="cb65-26">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves</span>
<span id="cb65-27">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb65-28">          ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb65-29">        taper <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(</span>
<span id="cb65-30">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n)</span>
<span id="cb65-31">        )</span>
<span id="cb65-32">        width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> displacement <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> taper <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>width</span>
<span id="cb65-33">        dx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>xend <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x</span>
<span id="cb65-34">        dy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>yend <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y</span>
<span id="cb65-35">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(</span>
<span id="cb65-36">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dy, x[self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width[self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dy),</span>
<span id="cb65-37">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx, y[self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> width[self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx)</span>
<span id="cb65-38">        )</span>
<span id="cb65-39">      }</span>
<span id="cb65-40">    )</span>
<span id="cb65-41">  ),</span>
<span id="cb65-42">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constructor =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb65-43">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb65-44">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb65-45">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb65-46">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="cb65-47">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L,</span>
<span id="cb65-48">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb65-49">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L,</span>
<span id="cb65-50">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L,</span>
<span id="cb65-51">                         ...) {</span>
<span id="cb65-52">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_object</span>(</span>
<span id="cb65-53">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawable</span>(),</span>
<span id="cb65-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb65-55">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb65-56">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> xend,</span>
<span id="cb65-57">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> yend,</span>
<span id="cb65-58">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> width,</span>
<span id="cb65-59">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb65-60">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">frequency =</span> frequency,</span>
<span id="cb65-61">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb65-62">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb65-63">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">style</span>(...)</span>
<span id="cb65-64">    )</span>
<span id="cb65-65">  },</span>
<span id="cb65-66">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">validator =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(self) {</span>
<span id="cb65-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be length 1"</span>)</span>
<span id="cb65-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y must be length 1"</span>)</span>
<span id="cb65-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>xend) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xend must be length 1"</span>)</span>
<span id="cb65-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>yend) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yend must be length 1"</span>)</span>
<span id="cb65-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>width) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width must be length 1"</span>)</span>
<span id="cb65-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be length 1"</span>)</span>
<span id="cb65-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency must be length 1"</span>)</span>
<span id="cb65-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octaves must be length 1"</span>)</span>
<span id="cb65-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seed must be length 1"</span>)</span>
<span id="cb65-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"width must be a non-negative number"</span>)</span>
<span id="cb65-77">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>frequency <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frequency must be a non-negative number"</span>)</span>
<span id="cb65-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n must be a positive integer"</span>)</span>
<span id="cb65-79">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>octaves <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octaves must be a positive integer"</span>)</span>
<span id="cb65-80">  }</span>
<span id="cb65-81">)</span></code></pre></div>
</div>
<p>Here’s the <code>ribbon</code> class in action:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1">rb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ribbon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L)</span>
<span id="cb66-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(rb)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-48-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Using the same general tricks as before, we can construct the image by defining a <code>values</code> data frame, passing it to <code>purrr::pmap()</code> to construct a list of ribbons, and then passing those ribbons to <code>sketch()</code> and <code>draw()</code>. Here’s the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>L)</span>
<span id="cb67-2">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb67-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb67-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb67-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb67-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> y,</span>
<span id="cb67-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb67-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L,</span>
<span id="cb67-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(palette, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb67-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fill</span>
<span id="cb67-11">)</span>
<span id="cb67-12"></span>
<span id="cb67-13">ribbons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(values, ribbon)</span>
<span id="cb67-14">ribbons <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb67-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sketch</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb67-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-02-25_s7/index_files/figure-html/unnamed-chunk-49-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>I’m quite fond of this one. Honestly I prefer it to most of the Mardi Gras graphic design work I’ve seen plastered all over Sydney lately.</p>
</section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>So we come to the end of another blog post and, unsurprisingly, I have ended up back where I started. I find myself thinking about the Mardi Gras festivities that are currently taking over Sydney. I do like Mardi Gras. It’s a celebration and a party, true, but there is value in a highly visible event that allow the queer community to take centre stage for a few short weeks every year. Besides, parties are fun.</p>
<p>But there is a side to it that I don’t love. Lately it has often felt to me that there is a pressure on us to tell <em>only</em> the happy and uplifting stories. Yes, we deserve to celebrate, but I can’t help thinking about the Marks Park Memorial. I visited it this morning, and it was not an uplifting or happy moment. It felt dark, sombre, and sad.</p>
<p>And therein lies the part that makes me uneasy. I keep thinking about all those people who are not part of the queer community who insist on telling me that “everything is different now, everyone is so accepting now”. I keep wondering if the reason that people keep telling me this – despite the obvious falseness to the claim – is that the only thing they ever see are the parties. The celebrations are what they remember; the hate crimes are what they forget.</p>
<p>Queer people don’t have those memory lapses. We remember the hate crimes, both past and present. We remember because those stories are still a part of our daily experience of the world. But they seem to have become invisible to those outside our community, even those who believe themselves to be allies. So it comes to pass that outsiders come to believe that the world is much kinder to us than it actually is.</p>
<p>The little slivers from my personal experience are not things I share lightly. The events they refer to were traumatic, and of course there are other like them I’ve chosen not to discuss. I have shared only a small slice of what my life is actually like. I chose to share these ones specifically because these are the ones I’m mostly recovered from. These memories do cause problems for me from time to time, but not as much as they used to.</p>
<p>Even so, it is not pleasant to revisit this history. I do so here not because I want to, but because if we keep our histories secret then people start to believe the pleasant lies that they tell themselves about our world.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Look, I know I’m hitting the reader over the head with the metaphor, but I’m not trying to be subtle here.↩︎</p></li>
<li id="fn2"><p>For folks outside of the R community: S3, S4, and S7 are all considered to be “functional” OOP systems, and they are broadly similar to function overloading in C++ and, I have recently learned, is also analogous to how methods are defined in Julia for functions of the same name but with different signatures. The functional style of OOP programming is one in which methods attach to generic functions (or to function names), as opposed to more traditional “encapsulated” OOP systems in which methods attach to objects. The encapsulated style is standard in Python, for example, and also appears in R via the <a href="https://adv-r.hadley.nz/r6.html">R6</a> OOP system that I have used in other blog posts (e.g., <a href="https://blog.djnavarro.net/posts/2022-12-22_queue/">here</a> and <a href="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/">here</a>). I mention these tiresome details because I have learned to my detriment that if I don’t exhaustively list the various distinctions between OOP systems and how R adopts multiple styles, I <em>will</em> have to deal with tiresome people mansplaining to me how R is bad at OOP and how OOP in R is wrong and isn’t <em>really</em> OOP and honestly I’m asleep before I finish reading the complaint.↩︎</p></li>
<li id="fn3"><p>A <em>Slow Horses</em> reference, in case you missed it.↩︎</p></li>
<li id="fn4"><p>Or at least not without a lot of extra effort on the developer side.↩︎</p></li>
<li id="fn5"><p>In contrast S3 is so chaotically informal that it doesn’t have any real notion of an “accessor” operator. Some S3 classes are atomic objects internally (e.g., a Date is simply a double with some attributes) and have no accessor operator, whereas others are lists internally and as such use <code>$</code> as the accessor.↩︎</p></li>
<li id="fn6"><p>Like S3 and S4 and like the vast majority of R objects, S7 objects have copy-on-modify semantics. This is distinct to environments and R6 classes which have reference semantics. But let’s be honest, shall we? You either (a) already know this, (b) don’t care, or (c) don’t find this telegraphic explanation very helpful because it really isn’t very helpful. My aims in this post are pretty limited so really if you want to wrap your head around this stuff a better bet is to read <a href="https://adv-r.hadley.nz/">Advanced R</a>.↩︎</p></li>
<li id="fn7"><p>I mean, at this point I’m effectively turning my circle into a pentagon, but of course I could always change <code>n</code> again later if I wanted a different number of points.↩︎</p></li>
<li id="fn8"><p>LOL. Let’s be honest, there is always another way if you try hard enough but the point here is that you’re not supposed to modify a read-only property and S7 will throw up roadblocks if you try to do it.↩︎</p></li>
<li id="fn9"><p>Ideally I’d like to make this an abstract class, in which users can’t directly create a new <code>drawable</code>. In principle this is achievable by setting <code>abstract = TRUE</code> in the call to <code>new_class()</code>, but what I’ve found so far is that creates problems when – as happens slightly later in the post – I define a custom constructor function for my “circle-subclassing-drawable” class. I imagine this will be dealt with at some point, but for now I’m just ignoring the idea of abstract classes.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Creating New Generative Art Tools in {R} with Grid, Ambient,
    and {S7}},
  date = {2024-02-25},
  url = {https://blog.djnavarro.net/posts/2024-02-25_s7},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Creating New Generative Art Tools in R
with Grid, Ambient, and S7.”</span> February 25, 2024. <a href="https://blog.djnavarro.net/posts/2024-02-25_s7">https://blog.djnavarro.net/posts/2024-02-25_s7</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Object-Oriented Programming</category>
  <category>Grid Graphics</category>
  <category>Art</category>
  <guid>https://blog.djnavarro.net/posts/2024-02-25_s7/</guid>
  <pubDate>Sat, 24 Feb 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-02-25_s7/mardi-gras.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Splatter</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-26_splatter/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Over the last few weeks I’ve been posting generative art pieces on mastodon from a generative art system I’ve called <a href="https://art.djnavarro.net/gallery/splatter/">splatter</a>. It creates pieces like these:</p>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_708.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_709.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_973.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>The splatter series has a lot in common with other generative art systems I’ve built in the past, and in many respects is a spiritual descendant of both <a href="https://art.djnavarro.net/gallery/curled/">curled</a> and <a href="https://art.djnavarro.net/gallery/water-colours/">water colours</a>.<sup>1</sup> However, the system has developed enough of its own “look and feel” by now that I think of splatter as its own thing, deserving a writeup of its very own.</p>
<section id="the-basic-idea" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-basic-idea">The basic idea</h2>
<p>The core logic of splatter is pretty simple three-step process:</p>
<ol type="1">
<li><p>Create a “base” image that provides the large-scale structure to the piece (left panel below).</p></li>
<li><p>Using the “base” data as input, create a “flowing” version of the same image (middle panel below). We do this by placing a particle at every cell in the grid, defining a vector field over the grid that describes how each particle moves, and then tracing out the paths of all the particles over many iterations.</p></li>
<li><p>Taking the “flowing” data as input, apply a randomly generated palette and create a prettily-coloured version of the image (right panel below).</p></li>
</ol>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/base.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/flow.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/splatter.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>I’ll unpack these steps below, showing the actual code used to create these images and walking through some of the logic and design considerations that goes into building a system like this one.<sup>2</sup></p>
</section>
<section id="creating-a-base-image" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="creating-a-base-image">Creating a base image</h2>
<p>First let’s take a look at the base images. As you can see from the one shown in the left panel above, these aren’t super-complicated things and they could be generated in many different ways. Somewhat arbitrarily, I decided that for this system I’d build them using via simple cellular automaton implemented in C++ and called from R via <a href="https://www.rcpp.org/">Rcpp</a>. There’s no principled reason for this, I just happened to have suitable code lying around from a previous generative art system called <a href="https://art.djnavarro.net/gallery/stoneskip/">stoneskip</a>, which produces pieces like these:<sup>3</sup></p>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_9.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_14.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_16.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>That said, the implementation used in splatter is different from the stoneskip system. The C++ code below defines an <code>automaton()</code> function that is exposed to R via Rcpp, and can be used to create the base images:<sup>4</sup> <sup>5</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// wrap position to grid</span></span>
<span id="cb1-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// automaton run function</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb1-13">NumericMatrix automaton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">  </span>
<span id="cb1-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">  </span>
<span id="cb1-25">  NumericMatrix grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-28">      grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-31">  </span>
<span id="cb1-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-33">    source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-34">    source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-35">    source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>source_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> source_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-36">    span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-37">    span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-38">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-39">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-41">      c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-43">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-44">        grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> source_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-45">        row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-46">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-47">      col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-49">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-50">  </span>
<span id="cb1-51">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>Ultimately this algorithm is very simple. It’s approximately this:</p>
<ol type="1">
<li>Create a <code>grid</code> matrix and populate every element with a random number.</li>
<li>On every iteration:
<ol type="a">
<li>Pick a random cell in <code>grid</code> to be the “source cell” and treat the value currently assigned to that cell to be the “source value”.</li>
<li>Define a rectangular “neighbourhood” around that cell (with a random width and height).</li>
<li>For every cell in the neighbourhood, update the value to be the average of its current value and the source value.</li>
</ol></li>
<li>Return <code>grid</code>.</li>
</ol>
<p>If you ran it long enough it would eventually produce a completely homogeneous grid, but if you run it for a modest amount of time you end up with somewhat smooth blobbish shapes.</p>
<p>In the normal course of events this code would live in <code>.cpp</code> file and then I’d call <code>Rcpp::sourceCpp()</code> from R to trigger compilation and linking to R, but in the context of this blog post I don’t have to because I’m <a href="https://bookdown.org/yihui/rmarkdown/language-engines.html#rcpp">using the Rcpp language engine</a> which automatically takes care of that within the R session that is used to render the post. So we can skip that step, and go straight to the part where we define a <code>base_data()</code> function in R that constructs a data frame with columns specifying row and column indices, and using the <code>automaton()</code> function to assign a value to the corresponding cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">base_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, rows, cols, iterations, span) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb2-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> cols),</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> rows),</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-9">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(),</span>
<span id="cb2-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automaton</span>(rows, cols, iterations, span)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-13">        ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb2-14">    )</span>
<span id="cb2-15">}</span></code></pre></div>
</div>
<p>The primary intention in this function is to create a data frame that has columns <code>x</code> and <code>y</code> that specify coordinates for every element in a grid, and a <code>value</code> column that is populated by calling the <code>automaton()</code> function that Rcpp exposes to the R session.<sup>6</sup> Here it is in action:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"></span>
<span id="cb3-9">base</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,000 × 6
       x      y     z  iter    id value
   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1     0 0          1     0     1 0.850
 2     0 0.0101     1     0     2 0.801
 3     0 0.0202     1     0     3 0.818
 4     0 0.0303     1     0     4 0.814
 5     0 0.0404     1     0     5 0.736
 6     0 0.0505     1     0     6 0.704
 7     0 0.0606     1     0     7 0.704
 8     0 0.0707     1     0     8 0.740
 9     0 0.0808     1     0     9 0.640
10     0 0.0909     1     0    10 0.595
# ℹ 9,990 more rows</code></pre>
</div>
</div>
<p>You can see from the output that there are a few other columns in the output. These are added because this base data is used as the initial state for a set of particles that we’re going to place within a vector field and then trace their paths. The logic for including each of these:</p>
<ul>
<li><p>We might want to use a vector field that moves points in three dimensions, so there’s also a <code>z</code> column (which is set to a constant value in this case). I’m not really using this feature in the splatter system, but I’ve done it in the past in other systems. One handy trick if you want to give a system a feeling of “mild inhomogeneity” – with different points appearing to move according to similar but not identical flow fields – is to displace each point by a small amount in the <code>z</code> coordinate, and then use a three-dimensional flow field to move the points in three dimensions, while only plotting the <code>x</code> and <code>y</code> values. You can also use the “hidden <code>z</code> coordinate” trick as a way of smoothly changing the colour.</p></li>
<li><p>Similarly, because this base data is used as the initial state for an iterative process, there is also a column <code>iter</code> that records the iteration number (set to 0 for the base data). One the one hand this is nice for housekeeping purposes (e.g., filtering the data to find the subset corresponding to a particular iteration), but later on we’ll actually use this in the plots.</p></li>
<li><p>Finally, we have a <code>id</code> column that assigns each element of the grid a unique number, which can come in handy later on if we want to trace out the path followed by a single particle.</p></li>
</ul>
<p>All that being said, at this point in the development of our system the things we’re most interested in are the <code>x</code> and <code>y</code> coordinates of each cell in our grid, and the <code>value</code> that we use to provide an initial colour to that location. At this point we don’t actually have a genuine palette to map <code>value</code> onto an actual colour, so for now we’ll just use the <a href="https://ggplot2.tidyverse.org/">ggplot2</a> default:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> value</span>
<span id="cb5-6">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-7">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-9">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-10">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-11">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/base-image-plot-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>This is our base image. It’s not super exciting or even particularly aesthetically pleasing, but that’s not the point. What I’m looking for in the base image is something that varies fairly smoothly to create an overall “shape” for the final image, and with enough random variations and irregularities to produce interesting textures in the final image. When building a system like this I’ve found that it’s important to have <em>something</em> that plays this role. They do a huge amount of work in defining the “composition” of the final art work, and if you don’t put a bit of thought into what this part of the system looks like you can end up with pieces that don’t have global structure, and feel a bit bland.</p>
<p>That being said, I don’t think there’s anything very special about the <code>automaton()</code> function I have used in the splatter system. It was a pretty arbitrary choice, and I’m entirely certain that you could swap it out for any number of alternative algorithms and end up with fabulous pieces.</p>
</section>
<section id="creating-the-flow" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-flow">Creating the flow</h2>
<p>Now that we have a base image to provide a bit of global structure, we’re going to need a vector field that we can use to create a sense of flow in the piece. This part is by far the most elaborate part of splatter, and it relies heavily on the <a href="https://ambient.data-imaginist.com/">ambient</a> package. I’ll start by writing a function <code>curl_step()</code> that defines a vector field that specifies, for every point defined by <code>x</code>, <code>y</code>, and <code>z</code> coordinates, how quickly and in what direction a particle located at that point is moving. When passed a data frame <code>data</code> that contains columns <code>x</code>, <code>y</code>, and <code>z</code>, it returns a new data frame with updated coordinates derived by moving each point a small distance defined by the relevant element in the vector field.<sup>7</sup> Additionally, since our input data frame has an <code>iter</code> column corresponding to the iteration number (recall earlier our “base image” has <code>iter = 0</code> for every cell), the output data frame records the updated iteration number.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">curl_step <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb6-2">                      iteration, </span>
<span id="cb6-3">                      scale, </span>
<span id="cb6-4">                      octaves, </span>
<span id="cb6-5">                      seed) {</span>
<span id="cb6-6">  </span>
<span id="cb6-7">  noise_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb6-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x,</span>
<span id="cb6-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb6-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z,</span>
<span id="cb6-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb6-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fracture,</span>
<span id="cb6-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb6-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>ridged,</span>
<span id="cb6-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb6-16">  )</span>
<span id="cb6-17">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iteration</span>
<span id="cb6-18">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-19">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-20">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-21">  data</span>
<span id="cb6-22">}</span></code></pre></div>
</div>
<p>There’s quite a lot going on internally here, and I’m not going to dive deeply into the ambient package in this post. I’ll provide a visual illustration of what happens when <code>curl_step()</code> is called – it’s a bit lower in the post after I define the <code>curl_loop()</code> function – but if you’re interested in a more detailed explanation of the logic underpinning this code, I’ll refer you to the notes I wrote for my <a href="https://art-from-code.netlify.app/">art from code</a> workshop I gave a couple of years ago. The notes have a section discussing <a href="https://art-from-code.netlify.app/day-1/session-2/#curl-of-a-spatial-noise-pattern">curl fields</a> and how they are generated using <code>ambient::curl_noise()</code>, along with sections discussing how <code>ambient::fracture()</code> can be used to create more elaborate and visually interesting flow fields with fractals.</p>
<p>In any case let’s move onto the next step, in which I’ll define a function <code>curl_loop()</code>that uses <code>purrr::accumulate()</code> to iteratively apply the <code>curl_step()</code> function. It starts with an initial state provided by the base image, and then treats the output of every call to <code>curl_step()</code> as the input to the next call. All the intermediate results are stored, resulting in a list of data frames (one per iteration) that is then collapsed into one large data frame that traces the paths of all points across many iterations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">curl_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb7-2">                      seed, </span>
<span id="cb7-3">                      iterations, </span>
<span id="cb7-4">                      scale, </span>
<span id="cb7-5">                      octaves) {</span>
<span id="cb7-6">  states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(</span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations,</span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> curl_step,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> data,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> scale,</span>
<span id="cb7-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb7-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed</span>
<span id="cb7-13">  )</span>
<span id="cb7-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(states)</span>
<span id="cb7-15">}</span></code></pre></div>
</div>
<p>Now that we have these functions, let’s apply them to create a data frame called <code>flow</code> that takes the grid of points defined in our <code>base</code> data frame and repeatedly moves each of them along paths defined by our vector field:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">flow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-7">  )</span>
<span id="cb8-8"></span>
<span id="cb8-9">flow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 6
       x      y     z  iter    id value
   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1     0 0          1     0     1 0.850
 2     0 0.0101     1     0     2 0.801
 3     0 0.0202     1     0     3 0.818
 4     0 0.0303     1     0     4 0.814
 5     0 0.0404     1     0     5 0.736
 6     0 0.0505     1     0     6 0.704
 7     0 0.0606     1     0     7 0.704
 8     0 0.0707     1     0     8 0.740
 9     0 0.0808     1     0     9 0.640
10     0 0.0909     1     0    10 0.595
# ℹ 999,990 more rows</code></pre>
</div>
</div>
<p>This <code>flow</code> data frame provides all the structural elements required to draw the plot. Here’s what it looks like when we create an image using the default shades-of-blue palette in ggplot2:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> flow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb10-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb10-7">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb10-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-12">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb10-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb10-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb10-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-16">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb10-17">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb10-18"></span>
<span id="cb10-19">pic</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/flowing-plot-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>Looking at this plot you get a visceral sense of motion and flow, which is of course the intention, but it’s hard to get a sense of how each of the “cells” in our original base image is moving. Again this is by design. You’re not supposed to be able to see that in the final image. But, for the purposes of unpacking it, here’s an animated version created using <a href="https://gganimate.com/">gganimate</a> which traces out the pattern of movement for every cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gganimate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition_time</span>(iter)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/anim.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" width="800"></p>
</figure>
</div>
<p>In this animation you can see how the plot begins with 10000 “particles” laid out on a regular grid (i.e., there’s one particle for each cell in the original base data), and then iteratively “moves” each of those particles along a path defined by the vector field (created by repeatedly calling <code>curl_step()</code>). You can also see that each particle is gradually shrinking in size over time, a feature that is also used in the splatter plots.</p>
<p>To unpack it a little further, we can use the <code>flow</code> data to create a visual representation of what the vector field itself looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">flow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(iter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id</span>
<span id="cb12-7">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb12-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(</span>
<span id="cb12-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">008</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>),</span>
<span id="cb12-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ends =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>,</span>
<span id="cb12-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"open"</span></span>
<span id="cb12-13">    )</span>
<span id="cb12-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-15">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb12-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb12-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb12-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-19">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/vector-field-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>In this plot, what I’ve done is taken the locations of each of the particles at iteration 0 (because at time 0 the points all sit on a regular grid) and drawn a little arrow that shows where each of them move to when <code>curl_step()</code> is applied. This gives us a rough visualisation of what the vector field looks like. The field itself doesn’t change, but of course once you start moving the particles they no longer sit on a nice grid. To illustrate both of these facts, here’s the same plot but this time I show the step from iteration 10 to iteration 11:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/vector-field-2-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>At any given location the arrow is still the same (because the vector field itself is invariant), but it’s not a nice clean grid in this version because the particles will naturally tend to bunch up as you move them through the field.<sup>8</sup></p>
<p>In any case, I think that at this point we have a fairly decent sense of how the splatter pieces are shaped by the underlying vector field, so it’s time to move on…</p>
</section>
<section id="choosing-a-palette" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="choosing-a-palette">Choosing a palette</h2>
<p>The final part of the splatter system is the paletting system. At this point I confess I started to get a little bit lazy, and created a very simple paletting system that doesn’t always work. Basically, the system is hard coded with a list of 100 colours and it randomly samples 4 of them to define a linear gradient palette that interpolates between those four shades. Here’s a <code>sample_palette()</code> function that implements this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">sample_palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, size) {</span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb13-3">  cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb13-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>,</span>
<span id="cb13-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>,</span>
<span id="cb13-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>,</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>,</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>,</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>,</span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>,</span>
<span id="cb13-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>,</span>
<span id="cb13-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>,</span>
<span id="cb13-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>,</span>
<span id="cb13-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>,</span>
<span id="cb13-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>,</span>
<span id="cb13-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>,</span>
<span id="cb13-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>,</span>
<span id="cb13-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>,</span>
<span id="cb13-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>,</span>
<span id="cb13-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>,</span>
<span id="cb13-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>,</span>
<span id="cb13-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>,</span>
<span id="cb13-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span></span>
<span id="cb13-24">  )</span>
<span id="cb13-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cols, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size)</span>
<span id="cb13-26">}</span></code></pre></div>
</div>
<p>Here’s a few random palettes generated using this function:</p>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb14-2">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb14-3">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-1.png" class="img-fluid" width="480"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-2.png" class="img-fluid" width="480"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-3.png" class="img-fluid" width="480"></p>
</div>
</div>
</div>
<p>It doesn’t always produce satisfying colour schemes, but it succeeds often enough for the system to be workable. And now that we have a paletting system we can write a <code>make_plot()</code> function that applies the palette using <code>ggplot2::scale_colour_gradientn()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">make_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, seed) {</span>
<span id="cb15-2">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-3">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-4">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb15-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb15-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb15-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb15-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb15-9">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-10">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb15-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb15-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb15-13">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-14">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb15-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb15-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb15-17">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-18">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-19">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-20">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb15-21">}</span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(flow, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/shading-plots-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>At this point, we have our final image.</p>
</section>
<section id="exploring-the-system" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="exploring-the-system">Exploring the system</h2>
<p>In order to play around with system, it’s helpful to wrap the whole generative process from beginning to end in a <code>splatter()</code> function that generates images. It takes a single argument <code>seed</code>, which can either be a scalar seed value that is used for all components to the system, or it can be a three-element vector that supplies separate seeds for the base data, the vector field, and the palette:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">splatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb16-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb16-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb16-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb16-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb16-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb16-18">}</span></code></pre></div>
</div>
<p>The ability to set the seed separately for each of the components is useful for illustrating the role played by each one. First let’s look at what happens when we hold the base image and the vector field constant, but vary the palette:</p>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>As you’d expect, these are all structurally the same image: same shapes, same flowing look, but with very different colour schemes, and of course this drastically changes the feel of each piece.</p>
<p>Alternatively, we can keep the base image and palette constant, but use a different vector field each time. Looking at the images below, you can see how this changes the “fine grain” of the image. The effect is much subtler, but it’s definitely noticeable. It’s almost as if someone were trying to paint the same piece all three times, but the brush strokes are different every time:</p>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>Finally, we can vary the base image but keep the vector field and palette the same:</p>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>This, to my mind, is the strangest effect of all. Varying the base image changes the overall distribution of, as you’d expect, but when you look very closely at the images you can see that they all have the same “brush strokes”. The swirling circular pattern in the centre-left of image (which was very evident in the animated image) is present in all three images: on the left image it shows up as a pattern of red and orange strokes curling around one another, but on the right that same swirl is now mostly pink and black. For the image in the middle the swirl is harder to see because it’s almost entirely painted in orange, with just a little bit of black.</p>
</section>
<section id="the-artist-statement" class="level2">
<h2 class="anchored" data-anchor-id="the-artist-statement">The artist statement</h2>
<p>So that’s everything, I guess. I wanted to write something about the splatter pieces because I’ve enjoyed building the system, and I really like the look and feel of these pieces. They’re naturalistic enough to feel organic, and artificial enough to feel like generative art unashamedly <em>being</em> generative art. Splatter is not trying to look like painted artwork, it is deliberately its own thing.</p>
<p>The ethos that underpins splatter is one I’m fond of artistically, and one that cuts a little deeply personally. So much of my everyday existence is spent worrying about “passing” for something I’m not,<sup>9</sup> and it’s not a great feeling. Generative art shouldn’t need to “pass”. It shouldn’t be viewed as a second-class artistic citizen that is merely a simulacrum of other kinds of artwork. It can be its own thing, with its own coherent and meaningful standards for artistic merit. Are the “splatter” pieces aesthetically appealing? Sometimes they are. Do they evoke emotions in the audience? Well, they do for me. Does the artist have some underlying intention behind the artwork that makes a claim about the world we live in? At the risk of making the subtext in this paragraph obvious, yes she does. Splatter isn’t a completely arbitrary thing, it was designed to walk that fine line between “pretending to be something else” and “being honest about what it truly is”.</p>
<p>As anyone who has lived in a closet can attest, that is a treacherous tightrope to walk.</p>
</section>



<div id="quarto-appendix" class="default"><section id="source-code" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Source code</h2><div class="quarto-appendix-contents">

<div class="cell">
<div class="code-with-filename">
<details class="code-fold">
<summary>C++ code for the splatter system</summary>
<div class="code-with-filename-file">
<pre><strong>automaton.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// wrap position to grid</span></span>
<span id="cb20-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// automaton run function</span></span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb20-13">NumericMatrix automaton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-14">  </span>
<span id="cb20-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-24">  </span>
<span id="cb20-25">  NumericMatrix grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-28">      grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-31">  </span>
<span id="cb20-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-33">    source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-34">    source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-35">    source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>source_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> source_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-36">    span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-37">    span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-38">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-39">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-41">      c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-43">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-44">        grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> source_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-45">        row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb20-46">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-47">      col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb20-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-49">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-50">  </span>
<span id="cb20-51">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<details class="code-fold">
<summary>R code for the splatter system</summary>
<div class="code-with-filename-file">
<pre><strong>splatter.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">Rcpp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sourceCpp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"automaton.cpp"</span>)</span>
<span id="cb21-2"></span>
<span id="cb21-3">base_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, rows, cols, iterations, span) {</span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb21-5">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb21-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> cols),</span>
<span id="cb21-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> rows),</span>
<span id="cb21-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb21-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-11">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb21-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(),</span>
<span id="cb21-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automaton</span>(rows, cols, iterations, span)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-15">        ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb21-16">    )</span>
<span id="cb21-17">}</span>
<span id="cb21-18"></span>
<span id="cb21-19">curl_step <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb21-20">                      iteration, </span>
<span id="cb21-21">                      scale, </span>
<span id="cb21-22">                      octaves, </span>
<span id="cb21-23">                      seed) {</span>
<span id="cb21-24">  </span>
<span id="cb21-25">  noise_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb21-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x,</span>
<span id="cb21-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb21-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z,</span>
<span id="cb21-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb21-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fracture,</span>
<span id="cb21-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb21-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>ridged,</span>
<span id="cb21-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb21-34">  )</span>
<span id="cb21-35">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iteration</span>
<span id="cb21-36">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-37">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-38">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-39">  data</span>
<span id="cb21-40">}</span>
<span id="cb21-41"></span>
<span id="cb21-42">curl_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb21-43">                      seed, </span>
<span id="cb21-44">                      iterations, </span>
<span id="cb21-45">                      scale, </span>
<span id="cb21-46">                      octaves) {</span>
<span id="cb21-47">  states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(</span>
<span id="cb21-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations,</span>
<span id="cb21-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> curl_step,</span>
<span id="cb21-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> data,</span>
<span id="cb21-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> scale,</span>
<span id="cb21-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb21-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed</span>
<span id="cb21-54">  )</span>
<span id="cb21-55">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(states)</span>
<span id="cb21-56">}</span>
<span id="cb21-57"></span>
<span id="cb21-58">sample_palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, size) {</span>
<span id="cb21-59">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb21-60">  cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb21-61">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>,</span>
<span id="cb21-62">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>,</span>
<span id="cb21-63">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>,</span>
<span id="cb21-64">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>,</span>
<span id="cb21-65">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>,</span>
<span id="cb21-66">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>,</span>
<span id="cb21-67">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>,</span>
<span id="cb21-68">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>,</span>
<span id="cb21-69">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>,</span>
<span id="cb21-70">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>,</span>
<span id="cb21-71">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>,</span>
<span id="cb21-72">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>,</span>
<span id="cb21-73">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>,</span>
<span id="cb21-74">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>,</span>
<span id="cb21-75">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>,</span>
<span id="cb21-76">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>,</span>
<span id="cb21-77">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>,</span>
<span id="cb21-78">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>,</span>
<span id="cb21-79">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>,</span>
<span id="cb21-80">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span></span>
<span id="cb21-81">  )</span>
<span id="cb21-82">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cols, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size)</span>
<span id="cb21-83">}</span>
<span id="cb21-84"></span>
<span id="cb21-85">make_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, seed) {</span>
<span id="cb21-86">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb21-87">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-88">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb21-89">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb21-90">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb21-91">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb21-92">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb21-93">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-94">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb21-95">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb21-96">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb21-97">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-98">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb21-99">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb21-100">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb21-101">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-102">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-103">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-104">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb21-105">}</span>
<span id="cb21-106"></span>
<span id="cb21-107">splatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb21-108">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb21-109">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb21-110">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb21-111">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb21-112">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb21-113">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb21-114">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb21-115">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb21-116">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-117">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb21-118">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb21-119">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb21-120">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb21-121">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb21-122">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-123">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb21-124">}</span></code></pre></div>
</details>
</div>
</div>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>See <a href="../../posts/2021-09-07_water-colours/">this post</a> for an old write up of the water colours system.↩︎</p></li>
<li id="fn2"><p>Okay fine. It’s not the <em>actual</em> source code for the original system, because the original system is an absolute mess of things I decided to modify on a whim and is not particularly pleasant. Instead, the code here (which is reproduced in full in the “source code” appendix) is a cleaner version that is almost equivalent to the original. And to be honest, if I were starting from scratch I’d be using this cleaned up version and not the bizarre mess that is the original source code.↩︎</p></li>
<li id="fn3"><p>I should also mention that this code is very loosely based on the “stepping-stone automaton” that I discovered a few years ago when looking at Antonio Sánchez Chinchón’s <a href="https://github.com/aschinchon/watercolors">watercolour art</a>, and was the inspiration for my stoneskip system which I adapted to implement the <code>automaton()</code> function.↩︎</p></li>
<li id="fn4"><p>In complete honesty this code is slightly different to the version I implemented in the original <a href="https://github.com/djnavarro/series-splatter">splatter</a> code. In the original version I was a little sloppy about managing the random seed, and in several places I was using the C++ native <code>rand()</code> function for some of the random number generation. That’s problematic in the generative art context because I want to exercise control over the RNG seed from R using the usual <code>set.seed()</code> function, so I need my C++ code to consistently call the random number generators in R using <code>R::runif()</code>↩︎</p></li>
<li id="fn5"><p>At some level I’m mildly amused that I’m writing a C++ function that I can call from R, and said C++ function reaches back up to R to invoke a random number generator that is implemented in C.↩︎</p></li>
<li id="fn6"><p>In the code here I’m using <code>as.vector()</code> to “flatten” the matrix to a vector. To control for any restriction of range that might have happened due to repeated averaging inside the C++ function, I use <code>ambient::normalise()</code> to ensure that the smallest <code>value</code> in this vector is always 0, and the largest <code>value</code> is always 1.↩︎</p></li>
<li id="fn7"><p>Yes I do know this is the worst explanation of fields ever. Hush.↩︎</p></li>
<li id="fn8"><p>It is of course also true to note that the paths that emerge when you do this are only a piecewise-linear approximation to the continuous-flow paths. When you take a series of discrete linear steps like this, errors are introduced at each step. But this is generative art not real analysis class so I’m not at all bothered by that.↩︎</p></li>
<li id="fn9"><p>I probably don’t have to spell it out, right? By now everyone who reads my blog knows what I am, I should imagine.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Splatter},
  date = {2024-01-26},
  url = {https://blog.djnavarro.net/posts/2024-01-26_splatter},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Splatter.”</span> January 26, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-26_splatter">https://blog.djnavarro.net/posts/2024-01-26_splatter</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-26_splatter/</guid>
  <pubDate>Thu, 25 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-26_splatter/splatter.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Making generative art with observable.js</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>About this time last year I wrote a little blog post about my first attempts to make <a href="../../posts/2023-01-14_p5js/">generative art in javascript with p5.js</a>. Because I was using this <a href="https://quarto.org/">quarto</a>-based blog as the vehicle for that exploration, and because quarto supports <a href="https://observablehq.com/">observable.js</a> as a method for javascript-based computational notebooks – which is slightly different to embedding a js script in a regular webpage – I also talked a little bit about observable. To be honest though I didn’t talk about it very much: at the time I was focused mostly on p5.js, and didn’t really think too much about how observable works.</p>
<p>Lately, though, I’ve been making a few new generative art systems in javascript. The <a href="https://art.djnavarro.net/gallery/advent/">advent</a> and <a href="https://art.djnavarro.net/gallery/pastiche/">pastiche</a> series I posted to my art site were both written in javascript. In both cases I used <a href="https://nodejs.org/en">node.js</a> to run the js code locally, calling the scripts from the terminal rather than running them in a browser context.</p>
<p>Making art with javascript has been quite a lot of fun, and since it’s been on my mind lately, I thought it might be time to it prompted me take another look at observable in this post. I’m not planning a deep dive or anything, but I will talk a little bit about little art system I made that makes dynamic pieces like this one:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" data-startfrom="34" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 33;"><span id="cb1-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-1" data-nodetype="expression">

</div>
</div>
</div>
<section id="what-is-observable-and-whats-it-doing-in-quarto" class="level2">
<h2 class="anchored" data-anchor-id="what-is-observable-and-whats-it-doing-in-quarto">What is observable, and what’s it doing in quarto?</h2>
<p>At its heart, observable.js provides a method for creating <a href="https://en.wikipedia.org/wiki/Notebook_interface">computational notebooks</a> that execute javascript code in the context of a document containing regular text, in much the same way that <a href="https://jupyter.org/">jupyter</a> notebooks execute code cells that contain R, Python, or Julia code, and allow the author to interleave regular text with the code.</p>
<p>I’ll talk more about the code execution and the structure of observable notebooks first, but it helps to start by making a clear distinction between the code execution engine that powers observable notebooks, and the hosted service that most people use when creating one. To see what I mean, notice that most of the time when someone wants to create an observable notebook, they use the hosted service provided by the company which – somewhat confusingly – is also called observable.<sup>1</sup> For example, <a href="https://observablehq.com/@observablehq/keep-saving-mono-lake">here is a notebook by Allison Horst</a>: it uses the observable javascript library, and it’s hosted on observable service provided by observable-the-company. When people talk about “observable notebooks”, this is the kind of thing they usually mean.</p>
<p>However, this isn’t the only possible approach. You could, for instance, include the <a href="https://github.com/observablehq">observable.js core libraries</a> in a regular webpage (i.e., using the javascript libraries but not the hosted service). Alternatively – and this is the approach I’m taking here – you can create quarto documents that rely on observable to execute javascript code, which is fairly painless to do because <a href="https://quarto.org/docs/interactive/ojs/">quarto provides native support for observable.js</a>. To create an observable-javascript code chunk (“code cell”, in the terminology used by observable), you’d create an <code>{ojs}</code> chunk like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" data-startfrom="47" data-source-offset="9" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java" style="counter-reset: source-line 46;"><span id="cb2-47">```<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ojs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//| echo: fenced</span></span>
<span id="cb2-49"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-50">```</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-2" data-nodetype="expression">

</div>
</div>
</div>
<p>Here you can see the javascript code (<code>1 + 1</code>), the output (<code>2</code>), and the quarto syntax used to create the chunk itself (the <code>{ojs}</code> bit), but from now on I’ll drop the quarto syntax.<sup>2</sup> The important thing to realise here is that although superficially this page looks rather different to a notebook on the observable hosted service, the underlying “execution engine” is more or less the same.</p>
</section>
<section id="code-cells-execute-in-logical-order" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="code-cells-execute-in-logical-order">Code cells execute in logical order</h2>
<p>For the most part, the code execution within an observable notebook (or a quarto document like this one that uses observable) follows all the usual syntax for vanilla javascript. You can use a cell to define variables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" data-startfrom="58" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 57;"><span id="cb3-58">msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-3" data-nodetype="declaration">

</div>
</div>
</div>
<p>and you can refer to those variables later:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" data-startfrom="64" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 63;"><span id="cb4-64">msg</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-4" data-nodetype="expression">

</div>
</div>
</div>
<p>However, a key characteristic to observable.js is its reactive runtime engine: much like a spreadsheet, cells are executed in “topological order” based on the logical dependencies among them. For example, the cell below refers to a variable called <code>surprise</code>, and it works even though (reading this document from top to bottom) I haven’t actually defined it yet:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" data-startfrom="70" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 69;"><span id="cb5-70">surprise</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-5" data-nodetype="expression">

</div>
</div>
</div>
<p>This works because, at a later point in this document, there is a code cell that does specify a value for <code>surprise</code>, and observable.js detects that the later cell is the <em>logical</em> precursor to the one above, and executes that cell before this one. It is also the reason why I can call the <code>art()</code> function in the code cell below. Because the <code>art()</code> function is defined later in the document, I’m permitted to call it now, knowing that observable will determine the order in which all the cells need to be executed:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" data-startfrom="78" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 77;"><span id="cb6-78"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-6" data-nodetype="expression">

</div>
</div>
</div>
<p>To unpack this still further, the image below shows all the dependencies of the call to <code>art(101)</code> that occurs in the cell above. As you can see, all of the cells upon which the cell above depends appear lower in the document, but that’s okay, because observable.js uses the logical dependencies (which take the form of a directed acyclic graph) among these cells to determine the order in which they execute:</p>
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/topological_order.png" class="img-fluid"></p>
</section>
<section id="loading-modules-in-observable" class="level2">
<h2 class="anchored" data-anchor-id="loading-modules-in-observable">Loading modules in observable</h2>
<p>One of the things about javascript that sometimes gives me headaches is getting used to the numerous different ways you can import javascript code depending on the context in which you’re using the language.</p>
<p>When I first started using javascript in web pages, I didn’t use any external javascript code at all. I’d write an html file that embedded my hand-rolled javascript coded directly into the document, with the code wrapped within a <code>&lt;script&gt;</code> tag:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/javascript"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// comment</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Later, I learned that it was often better to separate the javascript code from the html document, so my web page would contain an <code>.html</code> file and a <code>.js</code> file. Within the html document, I would again have a <code>&lt;script&gt;</code> tag, but instead of including the javascript source code it would reference the <code>.js</code> file:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./myscript.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>This is the traditional way of using javascript in a webpage. All javascript code that I wanted to use in my webpage would be stored in local copies of the relevant <code>.js</code> files, and I’d include them with <code>&lt;script&gt;</code> tags. However, once I learned about content delivery networks (CDN) like <a href="https://www.jsdelivr.com/">jsDelivr</a>, I started to realise that I didn’t have to have a local copy of all the files: instead, I could import the files I needed through a CDN. A common example of this in the javascript that I used to write during that stage of my life would be to load <a href="https://jquery.com/">jquery</a> with code like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Until quite recently, that was essentially everything I knew about loading javascript modules. I’d only ever used javascript in the context of an html document, and in that context it is the <code>.html</code> file that does the work of loading the javascript.</p>
<p>Enter, stage left, the <a href="https://nodejs.org/en">node.js</a> runtime environment for javascript being chased by the node package manager <a href="https://www.npmjs.com/">npm</a>. Traditionally javascript is a scripting language used in the context of a webpage, but it doesn’t actually <em>have</em> to be used that way thanks to node.js. Node allows javascript to function as a pure scripting language: you write code in javascript that you can then execute from the terminal without any browser at all. That’s what I’ve been doing with my recent generative art code that uses javascript. For instance, <a href="https://github.com/djnavarro/series-advent/blob/main/source/advent_06.js">advent_06.js</a> is one of those generative art scripts, and – because I have node installed on my machine – when executing the script I’d use this command at the terminal to create the images:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">node</span> advent_06.js</span></code></pre></div>
<p>One question that you’d naturally have, when running javascript in this fashion, is how to import modules: you can’t use a <code>&lt;script&gt;</code> tag for this because there’s no html file and the javascript code is not executing within a browser. To that end node provides a <code>require()</code> function that you can use for this. As I have previously installed the seedrandom.js library (which allows you to create random number generators that give you control over the <a href="../../posts/2023-12-27_seedcatcher/">RNG seed</a>) using <code>npm</code>, I can include a line of code like this in my js script:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// this code is from the advent_06 script, it's not an ojs cell</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> seedrandom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seedrandom'</span>) </span></code></pre></div>
<p>This creates a <code>seedrandom</code> object that exposes all the functionality of the library, which is then used elsewhere in the script. This works just fine, but it’s important to recognise that <a href="https://stackoverflow.com/questions/9901082/what-is-require-in-javascript-and-nodejs#9901097"><code>require()</code> is not part of vanilla javascript, it’s specific to nodeJS</a>. You can’t use it in vanilla javascript.</p>
<p>…and yet, you <em>can</em> use it with observable.js. This is because <a href="https://observablehq.com/documentation/cells/require">observable supplies its own <code>require()</code> function</a> that behaves similarly to the node.js <code>require()</code> function. For this document, I decided to be smart and import a specific version of seedrandom, like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" data-startfrom="129" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 128;"><span id="cb12-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// this is the ojs cell that imports seedrandom in this document</span></span>
<span id="cb12-130">seedrandom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seedrandom@3.0.5'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-7" data-nodetype="declaration">

</div>
</div>
</div>
<p>The key thing to remember here (and I’ll confess this threw me for a loop for a little while) is that although this <em>looks</em> like I’m writing “server-side” code like you’d do with node.js, this calls the observable.js version of the <code>require()</code> function. Per the documentation:</p>
<blockquote class="blockquote">
<p>By default, require uses modules published on npm, a service that hosts over 1 million different modules created by thousands of individual developers. Because notebooks run in a web environment, we use another service, jsDelivr, that takes npm’s modules and makes them accessible to browsers.</p>
</blockquote>
<p>In other words, when calling the <code>require()</code> function in an observable notebook (or quarto document that uses observable code cells), we’re still relying on a CDN to do the work of importing the javascript modules. The observable <code>require()</code> function abstracts away from the tedious details and means you don’t have to write any html to import from the CDN.</p>
</section>
<section id="cells-implicitly-iterate-over-generators" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cells-implicitly-iterate-over-generators">Cells implicitly iterate over generators</h2>
<p>So now we turn to the generative art system itself. The core mechanic underpinning the system is that each piece is defined by a large number of “particles” that are drawn onto an html5 canvas. The particles move around over time, changing shape and size as they do, sometimes obscuring one another when they are drawn onto the canvas. This leads to dynamic pieces like this:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" data-startfrom="146" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 145;"><span id="cb13-146"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-8" data-nodetype="expression">

</div>
</div>
</div>
<p>Later on in the document I’ll define a <code>makeParticles()</code> function that returns an array containing many of these particles, each of which is an object that has fields like <code>x</code>, <code>y</code>, <code>size</code>, etc that defines the state of the particle, as well as a <code>.draw()</code> method used to draw said particle to the canvas, and a <code>.move()</code> method to update the location, shape, size, etc for the particle. The details of that don’t matter for the moment. Let’s just assume that this mechanism works, and examine the top-level <code>art()</code> function that creates the pieces:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" data-startfrom="152" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 151;"><span id="cb14-152"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(seed) {</span>
<span id="cb14-153">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// setup</span></span>
<span id="cb14-154">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> par <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">nrow</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ncol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>}</span>
<span id="cb14-155">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seedrandom</span>(seed)</span>
<span id="cb14-156">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context2d</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span>)  </span>
<span id="cb14-157">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> pal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(palettes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-158">  </span>
<span id="cb14-159">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// image</span></span>
<span id="cb14-160">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-161">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fillRect</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span>)</span>
<span id="cb14-162">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeParticles</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-163">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb14-164">    particles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(ctx)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">move</span>(rng)})</span>
<span id="cb14-165">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">canvas</span></span>
<span id="cb14-166">  }</span>
<span id="cb14-167">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-9" data-nodetype="declaration">

</div>
</div>
</div>
<p>The key part of this function is that it’s a generator function: it is defined with the <code>function*</code> keyword, and instead of having a <code>return</code> value it has a <code>yield</code> value. Generators (also called iterators) are stateful functions. The first time they are called they execute up to the point that the <code>yield</code> statement is encountered, and then return that value. Any subsequent time the generator is called, it doesn’t start from the beginning: it picks up from where it left off last time, and keeps executing until <code>yield</code> is encountered again. So, in this case, <code>art()</code> is a generator function that yields an html5 canvas object when it is called the first time; later invocations of <code>art()</code> will update the state of the canvas, and then yield the updated canvas as its return value. This provides a natural mechanism for animation: each <code>yield</code> value is, in effect, a frame of the animation.</p>
<p>So far, so good. While I’m not an expert at using generators in vanilla javascript, I grasp the basic idea. The part that is a little peculiar here – and is specific to the reactive runtime used in observable.js – is that nowhere in this document do I <em>appear</em> to be calling the <code>art()</code> generator repeatedly. In vanilla javascript, if I’d defined <code>art()</code> in the way I did in the previous cell and then called <code>art(103)</code>, I would get a static canvas that corresponds to the first frame of the animation because I’ve only called the generator once. And yet…</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" data-startfrom="177" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 176;"><span id="cb15-177"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-10" data-nodetype="expression">

</div>
</div>
</div>
<p>What’s happening here is that the reactive runtime used in observable.js <a href="https://observablehq.com/documentation/cells/observable-javascript#cells-implicitly-iterate-over-generators">implicitly iterates over a generator function</a>. The code cell above appears to be invoking the <code>art()</code> generator once (with a seed of 103), but that’s not actually true: what’s really happening is that observable.js calls the generator repeatedly behind the scenes (i.e., implicitly iterates). I haven’t done a deep dive on how this behaviour works yet, but according to the documentation this iteration typically occurs 60 times a second. So that’s what’s happening here.</p>
</section>
<section id="the-workhorse-code" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-workhorse-code">The workhorse code</h2>
<p>Having now discussed everything that is specific to observable.js, all that remains to do is add some code cells that contain the “workhorse” functions for our generative art system. Here’s the <code>makeParticles()</code> function that takes a collection of parameters <code>par</code>, a palette <code>pal</code>, and a random number generator <code>rng</code> as its arguments, and returns an array of <code>particles</code>. Initially the particles are all laid out on a grid, with <code>x</code> coordinates lined up in columns and <code>y</code> coordinates lined up in rows. As the system evolves, these particles are moved around using the <code>move()</code> function, and can be drawn to a canvas using the <code>draw()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" data-startfrom="187" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 186;"><span id="cb16-187"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeParticles</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb16-188">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> rowheight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow</span></span>
<span id="cb16-189">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> colwidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol</span></span>
<span id="cb16-190">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(rowheight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colwidth) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-191">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-192">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-193">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb16-194">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb16-195">      particles[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-196">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-197">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">col</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-198">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">row</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-199">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-200">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sizemin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-201">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sizemax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-202">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-203">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> colwidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-204">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> rowheight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-205">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xmax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-206">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ymax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-207">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xstep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-208">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ystep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-209">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-210">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-211">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">turn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-212">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">shade</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-213">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">shrink</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-214">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">draw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ctx) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawParticle</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ctx)}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-215">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">move</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(rng) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moveParticle</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)}</span>
<span id="cb16-216">      }</span>
<span id="cb16-217">      k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span></span>
<span id="cb16-218">    }</span>
<span id="cb16-219">  }</span>
<span id="cb16-220">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> particles</span>
<span id="cb16-221">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-11" data-nodetype="declaration">

</div>
</div>
</div>
<p>As you can see, the <code>draw()</code> function for any given particle is just a call to the <code>drawParticle()</code> function, and similarly the <code>move()</code> function is just a call to <code>moveParticle()</code>. Here’s those two functions, each defined in their own code cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" data-startfrom="227" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 226;"><span id="cb17-227"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawParticle</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ctx) {</span>
<span id="cb17-228">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade</span></span>
<span id="cb17-229">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strokeStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade</span></span>
<span id="cb17-230">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineWidth</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span></span>
<span id="cb17-231">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beginPath</span>()</span>
<span id="cb17-232">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arc</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span>)</span>
<span id="cb17-233">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>()</span>
<span id="cb17-234">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>()</span>
<span id="cb17-235">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">closePath</span>()</span>
<span id="cb17-236">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-12" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" data-startfrom="240" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 239;"><span id="cb18-240"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moveParticle</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb18-241">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ystep</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span></span>
<span id="cb18-242">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xstep</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span></span>
<span id="cb18-243">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span></span>
<span id="cb18-244">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span></span>
<span id="cb18-245">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span></span>
<span id="cb18-246">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span></span>
<span id="cb18-247">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemin</span>) {</span>
<span id="cb18-248">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shrink</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemin</span>)</span>
<span id="cb18-249">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb18-250">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemax</span></span>
<span id="cb18-251">  }</span>
<span id="cb18-252">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb18-253">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-13" data-nodetype="declaration">

</div>
</div>
</div>
<p>At several points in the code that defines this system, I’ve relied on a <code>pickOne()</code> function that uses a specific random number generator <code>rng</code> to sample a single element from an array. So of course that too needs to be defined as an observable code cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" data-startfrom="259" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 258;"><span id="cb19-259"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb19-260">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> items[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span>)]</span>
<span id="cb19-261">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-14" data-nodetype="declaration">

</div>
</div>
</div>
<p>Finally, in order for the <code>art()</code> function to choose a random palette every time a new piece is created, I need to have an array <code>palettes</code> that defines a bunch of different palettes (I created these palettes by playing around on <a href="https://coolors.co/">cooolors.co</a> and saving some that I liked):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" data-startfrom="267" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 266;"><span id="cb20-267">palettes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb20-268">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-269">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-270">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-271">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-272">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-273">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-274">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-275">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-276">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-277">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-278">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-279">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-280">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-281">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-282">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-283">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-284">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-285">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-286">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-287">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span>]</span>
<span id="cb20-288">]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-15" data-nodetype="declaration">

</div>
</div>
</div>
<p>Oh, and yeah… it’s not part of the generative art system, but because earlier on I referenced a <code>surprise</code> variable in order to illustrate the “spreadsheet-style” code execution order in observable, I’d better have a cell that actually defines that variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" data-startfrom="294" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 293;"><span id="cb21-294">surprise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a variable defined at the bottom of the document"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-16" data-nodetype="declaration">

</div>
</div>
</div>
<p>And we are done!</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" data-startfrom="302" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 301;"><span id="cb22-302"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-17" data-nodetype="expression">

</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I realise it’s a small gripe, but I do think it’s a problem when companies create this confusion by conflating the organisation with the product and/or service. For many years it was difficult to distinguish between rstudio-the-company and rstudio-the-IDE. Observable makes this confusion even messier, since we have observable-the-company, observable-the-javascript-library, and observable-the-hosting-service. They’re three different things that all have the same name and it’s a pain to write about.↩︎</p></li>
<li id="fn2"><p>This is a little different than what would have happened if I’d used <code>{js}</code> rather than <code>{ojs}</code>: when you use <code>{js}</code> in quarto, the javascript code is embedded as a script within the html page, rather than executed with observable.js↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Making Generative Art with Observable.js},
  date = {2024-01-09},
  url = {https://blog.djnavarro.net/posts/2024-01-09_observable-js-art},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Making Generative Art with
Observable.js.”</span> January 9, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art">https://blog.djnavarro.net/posts/2024-01-09_observable-js-art</a>.
</div></div></section></div> ]]></description>
  <category>Javascript</category>
  <category>Art</category>
  <category>Observable</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/</guid>
  <pubDate>Mon, 08 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/canvas.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Notes on the Emax model</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-09_emax-models/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I’m back at work after my all-too-brief summer vacation, and thankfully it’s not too busy since everyone else has been on break too. It’s given me a bit of breathing room to do some reading for professional development purposes, and – since I find it helps me a lot to write up my notes – it’s time for another pharmacometrics post. This time around I’m going to talk about the “Emax model” that is often used in exposure-response analyses. The Emax model is based on the <a href="https://en.wikipedia.org/wiki/Hill_equation_(biochemistry)">Hill equation</a>, and is used to model a continuous-valued “effect” or “response” that is observed when a drug is administered.</p>
<section id="the-model" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-model">The model</h2>
<p>To introduce the basic model, let’s have some notation:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?E"> denotes the observed biological effect, or response. In the context of this kind of model, the response is a continuous variable bounded below at 0 and has some theoretical upper bound corresponding to the maximum possible effect, denoted <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D">.</li>
<li><img src="https://latex.codecogs.com/png.latex?C"> denotes the plasma concentration (typically the molar concentration, in this context) of the molecule that produces the effect, either the drug itself or a metabolite.</li>
</ul>
<p>The goal in this exercise is to model the effect <img src="https://latex.codecogs.com/png.latex?E"> as a function of the concentration <img src="https://latex.codecogs.com/png.latex?C">. It is therefore a <em>pharmacodynamic</em> model (modelling the effect of a drug at a given concentration) rather than a <em>pharmacokinetic</em> model (modelling the concentration of a drug when administered in a particular dose). Ignoring the statistical issues around measurement error etc (errors are typically assumed to be log-normally distributed), here’s what the Emax model asserts about the relationship between <img src="https://latex.codecogs.com/png.latex?E"> and <img src="https://latex.codecogs.com/png.latex?C">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BEC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>There are three parameters in this model:</p>
<ul>
<li>As mentioned earlier, <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> is the maximum value of the effect</li>
<li><img src="https://latex.codecogs.com/png.latex?%7BEC%7D_%7B50%7D"> is the concentration that produces a 50% of the maximum effect. That is, it refers to the concentration <img src="https://latex.codecogs.com/png.latex?C"> at which <img src="https://latex.codecogs.com/png.latex?E%20=%20E_%7Bmax%7D%20/%202">)</li>
<li><img src="https://latex.codecogs.com/png.latex?n"> is the <em>Hill coefficient</em>, which controls the steepness of the curve. In the “simple” model <img src="https://latex.codecogs.com/png.latex?n"> is fixed at 1, but in practice that often doesn’t work.</li>
</ul>
<p>This is a model in which the effect <img src="https://latex.codecogs.com/png.latex?E"> increases monotonically but with constantly decreasing slope, and asymptotically approaches <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> as <img src="https://latex.codecogs.com/png.latex?C%20%5Crightarrow%20%5Cinfty">. More precisely, it’s a model in which <img src="https://latex.codecogs.com/png.latex?E"> is described by a <a href="https://en.wikipedia.org/wiki/Logistic_function">three-parameter logistic</a> function of <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20%20%5Cfrac%7BE_%7Bmax%7D%7D%7B1%20+%20%5Cexp(-n(%5Cln%20C%20-%20%5Cln%20EC_%7B50%7D))%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D"> is a location parameter that shifts the curve (expressed as a function of <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">) left or right, <img src="https://latex.codecogs.com/png.latex?n"> is a gain parameter that controls the steepness of the curve, and <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> is the maximum height of the logistic curve.</p>
<p>After a little rearrangement, we can also express this relationship as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cln%20%5Cleft(%5Cfrac%7BE%7D%7BE_%7Bmax%7D%20-%20E%7D%20%5Cright)%20=%20n(%5Cln%20C%20-%20%5Cln%20EC_%7B50%7D)%0A"></p>
<p>Here’s what it looks like:</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the emax model</span></span>
<span id="cb1-2">emax <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(conc, emax, ec50, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb1-3">  (emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> conc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (ec50<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n)</span>
<span id="cb1-4">}</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load packages</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a fake data set</span></span>
<span id="cb1-11">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">concentration =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>),</span>
<span id="cb1-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">emax</span>(concentration, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">emax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ec50 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) </span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the data on linear and logarithmic x-axis scales</span></span>
<span id="cb1-17">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(concentration, response)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span>
<span id="cb1-18">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>))</span>
<span id="cb1-19">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration (log scale)"</span>)</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_emax-models/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_emax-models/index_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
<p>This is not the only version of the Emax model. For example, if there is some baseline level of effect (i.e., the curve starts at <img src="https://latex.codecogs.com/png.latex?E_0"> not 0), then we would have a relationship of the following form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_0%20+%20E_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BEC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>Along the same lines, notice that this is a model that implicitly assumes that the drug is an <em>agonist</em>: increasing the concentration <img src="https://latex.codecogs.com/png.latex?C"> increases the effect <img src="https://latex.codecogs.com/png.latex?E">. There is also a version that can be use for drugs that decrease the effect:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_0%20-%20I_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BIC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>where again <img src="https://latex.codecogs.com/png.latex?E_0"> is the baseline effect, and the inhibition effect is described in terms of a maximum inhibition <img src="https://latex.codecogs.com/png.latex?I_%7Bmax%7D"> and the concentration that produces 50% of the maximum inhibition <img src="https://latex.codecogs.com/png.latex?%7BIC%7D_%7B50%7D">.</p>
<p>For the purposes of this post I’m just going to consider the basic model.</p>
</section>
<section id="why-this-model" class="level2">
<h2 class="anchored" data-anchor-id="why-this-model">Why this model?</h2>
<p>Looking at this from the perspective of a scientist with a strong statistics and modelling background but who is still relatively new to pharmacometrics, I completely understand the value of the three-parameter logistic model: it’s used in many different disciplines, and I’ve encountered it before in psychometric contexts (and others). What wasn’t immediately clear to me is <em>why</em> it is considered sensible to model the effect <img src="https://latex.codecogs.com/png.latex?E"> of a drug as a logistic function of the log-concentration <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">. If I’ve learned nothing else from my long career in science that has somehow bounced around from discipline to discipline, it’s that if you don’t understand the theoretical foundations that underpin why researchers in the field use <em>this</em> specific statistical model and not <em>that</em> other possible statistical model, you’ll eventually make a silly mistake. I’ve made a lot of silly mistakes in my life and would like to minimise the chances of making even more.</p>
<p>With that in mind, I turned to <a href="https://www.routledge.com/Pharmacokinetic-and-Pharmacodynamic-Data-Analysis-Concepts-and-Applications/Gabrielsson-Weiner/p/book/9789198299106">Pharmacokinetic and Pharmacodynamic Data Analysis (5th ed)</a> by Johan Gabrielsson and Daniel Weiner, which is the book I’ve been reading at work to try to get myself up to speed on these kinds of things. It turns out that the basic ideas here can be derived from the <a href="https://en.wikipedia.org/wiki/Law_of_mass_action">law of mass action</a>, which I vaguely recall from my long-disused undergraduate chemistry classes, and Chapter 3 of the book shows how this is done. What follows are my own notes based on that section of the book, and as is traditional for such acknowledgements I note that I’ve lifted the core ideas from the authors, but if there are mistakes then yeah those are probably mine alone.</p>
<p>So here goes.</p>
</section>
<section id="applying-the-law-of-mass-action" class="level2">
<h2 class="anchored" data-anchor-id="applying-the-law-of-mass-action">Applying the law of mass action</h2>
<p>First, let’s start by switching notation slightly. Let <img src="https://latex.codecogs.com/png.latex?R"> refer to a <a href="https://en.wikipedia.org/wiki/Receptor_(biochemistry)">receptor</a>, a macromolecule that is involved in signalling within biological systems (e.g., <a href="https://en.wikipedia.org/wiki/Cell_surface_receptor">cell surface receptors</a>). Receptors can bind to chemical messengers (e.g., ligands outside a cell), that triggers some physiological response (e.g., a messenger is released inside a cell). In the context of the Emax model, we’re implicitly assuming a mechanism of action in which the drug (or metabolite) is an agonist molecule <img src="https://latex.codecogs.com/png.latex?A"> that can bind to the receptor (forming the compound molecule <img src="https://latex.codecogs.com/png.latex?AR">), and trigger some response that produces the drug effect. Since this is a chemical reaction that can go both ways, we can denote it as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%20+%20R%20%5C%20%5Cleftrightharpoons%20%5C%20AR%0A"></p>
<p>The concentrations of the receptor <img src="https://latex.codecogs.com/png.latex?R">, the agonist molecule <img src="https://latex.codecogs.com/png.latex?A">, and the compound <img src="https://latex.codecogs.com/png.latex?AR"> are denoted <img src="https://latex.codecogs.com/png.latex?%5BR%5D">, <img src="https://latex.codecogs.com/png.latex?%5BA%5D"> and <img src="https://latex.codecogs.com/png.latex?%5BAR%5D"> respectively.</p>
<p>Okay, so now for some science rather than mere notation. The law of mass action tells us that the rate of the forward reaction <img src="https://latex.codecogs.com/png.latex?A%20+%20R%20%5Crightarrow%20AR"> is proportional to the product of the concentrations of the two reactants, <img src="https://latex.codecogs.com/png.latex?%5BA%5D%20%5Ctimes%20%5BR%5D">, with <img src="https://latex.codecogs.com/png.latex?k_1"> denoting the constant of proportionality. Similarly, the rate of the backward reaction <img src="https://latex.codecogs.com/png.latex?AR%20%5Crightarrow%20A%20+%20R"> is proportional to the concentration of the compound <img src="https://latex.codecogs.com/png.latex?%5BAR%5D">, with proportionality constant <img src="https://latex.codecogs.com/png.latex?k_%7B-1%7D">. This gives us the differential equation to describe how the concentration of the compound <img src="https://latex.codecogs.com/png.latex?AR"> changes over time:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdt%7D%20%5BAR%5D%20%5Cpropto%20k_1%20%5BA%5D%5BR%5D%20-%20k_%7B-1%7D%20%5BAR%5D%0A"></p>
<p>When this reaction is at equilibrium <img src="https://latex.codecogs.com/png.latex?d/dt%20%5BAR%5D%20=%200"> by definition, so it follows that <img src="https://latex.codecogs.com/png.latex?k_1%20%5BA%5D%5BR%5D%20=%20k_%7B-1%7D%20%5BAR%5D"> and therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5BA%5D%5BR%5D%7D%7B%5BAR%5D%7D%20=%20%5Cfrac%7Bk_%7B-1%7D%7D%7Bk_1%7D%20%5Coverset%7Bdef%7D%7B=%7D%20K_d%0A"> where <img src="https://latex.codecogs.com/png.latex?K_d"> is referred to as the <em>equilibrium dissociation constant</em> for this reaction and defined as the ratio of the rate constants for the forward and backward reactions.</p>
<p>Next, we define <img src="https://latex.codecogs.com/png.latex?%5BR_t%5D"> to be the total concentration of receptors regardless of whether they are bound or unbound to the agonist:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5BR_t%5D%20%5Coverset%7Bdef%7D%7B=%7D%20%5BR%5D%20+%20%5BAR%5D%0A"></p>
<p>With this definition we can do the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brrcl%7D%0A&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%5BR%5D%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D(%5BR_t%5D%20-%20%5BAR%5D)%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5BR_t%5D%20-%20%5BAR%5D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BAR%5D%7D%7B%5BA%5D%7D%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5BR_t%5D%20&amp;=&amp;%20%5BAR%5D%20%5Cleft(1%20+%20%5Cdisplaystyle%5Cfrac%7BK_d%7D%7B%5BA%5D%7D%20%5Cright)%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BR_t%5D%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%20+%20K_d%7D%7B%5BA%5D%7D%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>In this expression <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> is referred to as the <em>fractional occupancy</em> of the total receptor pool. That is, it describes the proportion of the receptors that are currently bound to the agonist molecule.</p>
</section>
<section id="motivating-a-simple-model" class="level2">
<h2 class="anchored" data-anchor-id="motivating-a-simple-model">Motivating a simple model</h2>
<p>At this point we have the something that we can turn into theoretical model for the effect of a drug, but we need to impose additional assumptions in order to flesh it out. One proposal is that the effect <img src="https://latex.codecogs.com/png.latex?E"> of the drug is proportional to the fractional occupancy <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> of the relevant receptor pool. That is,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20%5Calpha%20%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%0A"> for some proportionality constant <img src="https://latex.codecogs.com/png.latex?%5Calpha">. Now, noting that the maximum possible value of <img src="https://latex.codecogs.com/png.latex?%5BAR%5D"> is <img src="https://latex.codecogs.com/png.latex?%5BR_t%5D">, it follows that the maximum possible value for <img src="https://latex.codecogs.com/png.latex?E"> is in fact <img src="https://latex.codecogs.com/png.latex?%5Calpha">, so it makes more sense to denote it as <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%0A"></p>
<p>and by substitution back into the earlier equation we obtain something that is beginning to look a lot like the Emax model with a Hill coefficient <img src="https://latex.codecogs.com/png.latex?n%20=%201">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A"></p>
</section>
<section id="incorporating-signal-amplification" class="level2">
<h2 class="anchored" data-anchor-id="incorporating-signal-amplification">Incorporating signal amplification</h2>
<p>It comes as little surprise to discover that the theoretical model just derived is a bit of an oversimplification. Taken at face value, you’d be tempted to assume that the value of the <img src="https://latex.codecogs.com/png.latex?%7BEC%7D_%7B50%7D"> parameter in an Emax model is equal to the value of the equilibrium dissociation constant <img src="https://latex.codecogs.com/png.latex?K_d"> for the reaction between a ligand <img src="https://latex.codecogs.com/png.latex?%5BA%5D"> and receptor <img src="https://latex.codecogs.com/png.latex?%5BR%5D">. This is not generally the case, because biology is more complicated than this simple model suggests. In many situations we observe some kind of <em>signal amplification</em>, in which you get a much stronger response than you’d expect on the basis of this simple response. One way to frame it is like this. We consider the fractional occupancy of the receptor <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> to be a <em>stimulus</em>,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bstimulus%7D%20=%20%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A"> and this stimulus triggers a nonlinear <em>response</em> (equivalent to our effect <img src="https://latex.codecogs.com/png.latex?E"> in the previous notation) that rises quickly to some asymptote level:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bresponse%7D%20=%20%5Cfrac%7B%5Cmbox%7Bstimulus%7D%7D%7B%5Cmbox%7Bstimulus%7D%20+%20%5Cbeta%7D%0A"></p>
<p>In this expression <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> denotes the value of the stimulus that produces 50% of the maximum response.</p>
<p>As it turns out, this doesn’t affect the overall structure of the model predictions, since</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0AE%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%5Cright)%7D%7B%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%20%5Cright)%20+%20%5Cbeta%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20(%5BA%5D%20+%20K_d)%20%5Cbeta%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B(%5Cbeta%20+%201)%20%5BA%5D%20+%20%5Cbeta%20K_d%7D%20%5C%5C%0A&amp;=&amp;%20(%5Cbeta%20+%201)%5E%7B-1%7D%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20%5Cbeta%20(%5Cbeta%20+%201)%5E%7B-1%7D%20K_d%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>In other words, we again have something that looks like Emax model (with <img src="https://latex.codecogs.com/png.latex?n=1">),</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BA%5D%7D%7B%7BEC%7D_%7B50%7D%20+%20%5BA%5D%7D%0A"></p>
<p>but this time <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D%20=%201/(%5Cbeta%20+%201)"> and <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D%20=%20(%5Cbeta/(%5Cbeta%20+%201))%20%5Ctimes%20K_d">. Since the <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> quantity is interpreted as a fraction (i.e., it’s on the same scale as the fractional occupancy <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D">), the net effect is that under a model like this one what we should expect to see is <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D%20%3C%20K_d">. In the event that there is a stimulus-response cascade at play (e.g., the initial response is the stimulus for another response, etc, ultimately leading to an effect), the overall shape of the function would remain the same.</p>
</section>
<section id="interpreting-the-hill-coefficient" class="level2">
<h2 class="anchored" data-anchor-id="interpreting-the-hill-coefficient">Interpreting the Hill coefficient</h2>
<p>Okay, so at this point we have a sensible motivation for using an Emax model in an exposure-response analysis (at least in some situations). What we don’t have is an explanation of the Hill coefficient <img src="https://latex.codecogs.com/png.latex?n">. The Gabrielsson &amp; Weiner book doesn’t say much about this, other than to note that:</p>
<blockquote class="blockquote">
<p>The exponent <img src="https://latex.codecogs.com/png.latex?n"> does not have a direct biological interpretation and should be viewed as an extension of the original <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> model to account for the curvature [i.e., steepness of the logistic function]. It provides a further degree of flexibility in the sensitivity of the response-concentration relationship.</p>
</blockquote>
<p>That doesn’t mean it’s an arbitrary parameter though. It was introduced by Hill originally to describe <a href="https://en.wikipedia.org/wiki/Cooperative_binding#The_Hill_equation">cooperative binding</a> in the oxygen-haemoglobin relationship. Essentially, the derivation earlier is based on the assumption that every time a drug molecule binds to a receptor it’s entirely independent of the all other binding events. That doesn’t have to be the case. Quoting from the linked Wikipedia page:</p>
<blockquote class="blockquote">
<p>Cooperative binding occurs in a molecular binding system where two or more ligand molecules can bind to a receptor molecule. Binding can be considered “cooperative” if the actual binding of the first molecule of the ligand to the receptor changes the binding affinity of the second ligand molecule. The binding of ligand molecules to the different sites on the receptor molecule do not constitute mutually independent events. Cooperativity can be positive or negative, meaning that it becomes more or less likely that successive ligand molecules will bind to the receptor molecule.</p>
</blockquote>
<p>That makes sense to me. It’s not a situation covered by the derivation I considered at the start, because if a receptor can bind to two or more ligands you’d need to consider bound-receptor compounds like <img src="https://latex.codecogs.com/png.latex?AAR"> and, <img src="https://latex.codecogs.com/png.latex?AAAR"> (to use an oversimplified notation) as well as <img src="https://latex.codecogs.com/png.latex?AR">, and then your model would need to include reactions like <img src="https://latex.codecogs.com/png.latex?AR%20+%20A%20%5Cleftrightharpoons%20AAR"> and their associated <img src="https://latex.codecogs.com/png.latex?K_d"> values. The derivation above is – like any such excercise – a simplification of the real situation. So while the Hill coefficient <img src="https://latex.codecogs.com/png.latex?n"> doesn’t immediately fall out of a simplified model, it’s not too hard to see how cooperative binding could give rise to logistic curves (on the log-concentration scale) with steeper slopes than those observed with <img src="https://latex.codecogs.com/png.latex?n%20=%201">.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Okay, so now the Emax model makes more sense to me. That’s all I was aiming for, and it’s 6pm now so I’m quitting work for the day!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Notes on the {Emax} Model},
  date = {2024-01-09},
  url = {https://blog.djnavarro.net/posts/2024-01-09_emax-models},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Notes on the Emax Model.”</span> January
9, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-09_emax-models">https://blog.djnavarro.net/posts/2024-01-09_emax-models</a>.
</div></div></section></div> ]]></description>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-09_emax-models/</guid>
  <pubDate>Mon, 08 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-09_emax-models/d-koi-5nI9N2wNcBU-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Writing knitr hooks</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A very common situation I encounter when writing a blog post or writing a book chapter using R markdown or quarto arises when the command I want to use generates a lot of output, and I don’t want all of the output to be displayed in the output. Every time I run into this problem, I have this vague recollection that “oh yeah, I need to write a knit hook for this”, but I can never quite remember how to do that and have to search online for the answer. In my last post I wrote a jokey <a href="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/#fn9">footnote</a> grumbling about this and saying I was thinking of writing a short blog post on it just so that I’d know where to look next time.</p>
<p>So, uh, yeah… that’s exactly what I did.</p>
<p>The answer to that specific question, incidentally, is described explicitly in the <a href="https://bookdown.org/yihui/rmarkdown-cookbook/hook-truncate.html">R Markdown Cookbook</a>, and – to set expectations appropriately – there’s nothing in this post that isn’t already covered in the documentation and books. I don’t actually <em>need</em> to write a blog post about this. But I’m going to anyway, because every time I actually do need to write a knit hook, I find myself realising that I don’t understand them as well as I ought to. So here goes.</p>
<section id="chunk-options" class="level2">
<h2 class="anchored" data-anchor-id="chunk-options">Chunk options</h2>
<p>This is a post about knit hooks, but it helps to start with a refresher on knitr chunk options. I’m assuming, for the purposes of this post, that anyone reading is already pretty familiar with R markdown and quarto, and knows that when I write a document like this and want to execute some R code, I include an appropriately annotated code chunk in the source like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb1-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">1 + 1</span></span>
<span id="cb1-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p>When the document is rendered to HTML, it’s the job of the knitr package to parse this chunk, execute the code, and append the output to the document as necessary. You can customise the manner in which knitr does this via <a href="https://bookdown.org/yihui/rmarkdown/r-code.html">chunk options</a>, but the code chunk above doesn’t specify any options, so default values are used.</p>
<p>So what are the defaults, and where are they stored?</p>
<p>The <code>knitr::opts_chunk</code> object is used to control the options for code chunks. The object is a list of several functions. The two we use most often are <code>$get()</code> and <code>$set()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">options <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span></code></pre></div>
</div>
<p>This <code>options</code> variable is a list containing all the default values that are applied when knitting the code chunks in the markdown document. If the user doesn’t specify a value for a specific chunk option, these are the default values that are applied. There’s a lot of these options:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(options)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "eval"          "echo"          "results"       "tidy"         
 [5] "tidy.opts"     "collapse"      "prompt"        "comment"      
 [9] "highlight"     "size"          "background"    "strip.white"  
[13] "cache"         "cache.path"    "cache.vars"    "cache.lazy"   
[17] "dependson"     "autodep"       "cache.rebuild" "fig.keep"     
[21] "fig.show"      "fig.align"     "fig.path"      "dev"          
[25] "dev.args"      "dpi"           "fig.ext"       "fig.width"    
[29] "fig.height"    "fig.env"       "fig.cap"       "fig.scap"     
[33] "fig.lp"        "fig.subcap"    "fig.pos"       "out.width"    
[37] "out.height"    "out.extra"     "fig.retina"    "external"     
[41] "sanitize"      "interval"      "aniopts"       "warning"      
[45] "error"         "message"       "render"        "ref.label"    
[49] "child"         "engine"        "split"         "include"      
[53] "purl"          "fenced.echo"   "ft.shadow"    </code></pre>
</div>
</div>
<p>The <code>fig.path</code> option, for example, is used to specify where generated output images should be written. It’s a nice one to illustrate the customisability of knitr because you get a different output depending on context. The blog post is a quarto document, and has different knitr defaults to what you’d see if the same code were run at the console:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fig.path</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "index_files/figure-html/"</code></pre>
</div>
</div>
<p>If I’d run the same output at the console, I would get a different answer. When called from the console the default option for <code>fig.path</code> is <code>"figures"</code>. For example, when I constructed my <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">“knitr + eleventy” blog</a> this is how I was calling knitr, and accordingly the images were written to a “figures” folder. The defaults, when knitr is used in the context of this on this quarto blog, are different.</p>
</section>
<section id="knit-hooks" class="level2">
<h2 class="anchored" data-anchor-id="knit-hooks">Knit hooks</h2>
<p>So now we turn to <a href="https://yihui.org/knitr/hooks/">knitr hooks</a>. Hooks are user-customisable functions that you can use to control how the knitr options are interpreted, and modify the output that knitr creates. In the same fashion that the <code>knitr::opts_chunk</code> object is used to control the chunk options, there’s a <code>knitr::knit_hooks</code> object used to control hooks. Again, this object is a list of functions, and the two we use most often are <code>$get()</code> and <code>$set()</code>.<sup>1</sup> We can retrieve the hooks by calling the <code>$get()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">hooks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span></code></pre></div>
</div>
<p>There are 12 default knit hooks in this list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(hooks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "source"          "output"          "warning"         "message"        
 [5] "error"           "plot"            "inline"          "chunk"          
 [9] "text"            "evaluate.inline" "evaluate"        "document"       </code></pre>
</div>
</div>
<p>The documentation for <a href="https://bookdown.org/yihui/rmarkdown-cookbook/output-hooks.html">output hooks</a> gives a nice summary for most of these. Seven of the hooks are quite specific, and are applied to only one type of output:</p>
<ul>
<li><code>source</code>: Handles how knitr processes the source code inside a chunk</li>
<li><code>output</code>: Handles how knitr processes ordinary R output (i.e., not warnings, messages, or errors)</li>
<li><code>warning</code>: Handles how knitr processes warning output (e.g., from <code>warning()</code>)</li>
<li><code>message</code>: Handles how knitr processes message output (e.g., from <code>message()</code>)</li>
<li><code>error</code>: Handles how knitr processes error output (e.g., from <code>stop()</code>)</li>
<li><code>plot</code>: Handles how knitr processes graphics output</li>
<li><code>inline</code>: Handles how knitr processes output from inline R code</li>
</ul>
<p>There are two output hooks that are broader in scope:</p>
<ul>
<li><code>chunk</code>: Applied to all output from a code chunk</li>
<li><code>document</code>: Applied to all output within the document</li>
</ul>
<p>The other three (<code>evaluate</code>, <code>evaluate.inline</code>, and <code>text</code>) aren’t discussed as much, and while I did get a little curious and started going down a rabbit hole looking at them, for once in my life I’ll be smart and not get sucked all the way in.</p>
</section>
<section id="custom-output-hooks" class="level2">
<h2 class="anchored" data-anchor-id="custom-output-hooks">Custom output hooks</h2>
<p>The general advice when writing custom output hooks is that you shouldn’t try to write the whole thing yourself. By design, knitr will create default hooks that are appropriate to the specific context, and your safest bet is to first retrieve the default hook by calling the <code>$get()</code> function, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">default_hook_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>)</span></code></pre></div>
</div>
<p>Then you can write your own hook that does some pre-processing to the inputs, before passing the modified inputs to the default hook. So, having already saved the default hook as <code>default_hook_output</code> I’d write my custom output hook like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">custom_hook_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, options) {</span>
<span id="cb12-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out.lines</span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(n)) {</span>
<span id="cb12-4">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xfun<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_lines</span>(x)</span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n) x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x, n), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"....</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-6">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-7">  }</span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">default_hook_output</span>(x, options)</span>
<span id="cb12-9">}</span></code></pre></div>
</div>
<p>There’s a few things going on here that are worth highlighting. First, notice that output hooks take two arguments <code>x</code> and <code>options</code>. The <code>x</code> argument is the raw text string that needs to be rendered: in this case, the string would correspond to the output that would normally be printed to the R console. The <code>options</code> argument is the list of knitr chunk options. The value of <code>options</code> that gets passed to the hook includes any values that were specified by the user in the chunk options, and also any default values that were not specified by the user. In this instance, <code>out.lines</code> is intended to indicate the maximum number of lines of R output to write to the rendered output document. It’s not one of the default chunk options (i.e., it wasn’t one of the options we saw in the previous section), and so if the user doesn’t specify a value for <code>out.lines</code> in the chunk options, <code>options$out.lines</code> will return a value of <code>NULL</code> in our custom hook, and so our <code>custom_hook_output()</code> will skip all the pre-processing in that case. However, if the user does specify a value for <code>out.lines</code>, it does a little text manipulation to alter the value of <code>x</code> before it is passed onto the default output hook.</p>
<p>Having written our custom hook, we apply it by using the <code>$set()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> custom_hook_output)</span></code></pre></div>
</div>
<p>Now that we have a knit hook that knows how to interpret <code>out.lines</code> as a chunk option, I can incorporate it into a knitr code chunk just like any other one:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r, out.lines = 4}</span></span>
<span id="cb14-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(200)</span></span>
<span id="cb14-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.26550866 0.37212390 0.57285336 0.90820779 0.20168193 0.89838968
  [7] 0.94467527 0.66079779 0.62911404 0.06178627 0.20597457 0.17655675
 [13] 0.68702285 0.38410372 0.76984142 0.49769924 0.71761851 0.99190609
 [19] 0.38003518 0.77744522 0.93470523 0.21214252 0.65167377 0.12555510
....</code></pre>
</div>
</div>
<p>The output here would normally be considerably longer than 4 lines, but we’ve applied a custom hook that enforces the truncation, so we get nicer output. Notice also that, in the same way that standard chunk options like <code>fig.width</code> and <code>fig.height</code> become <code>fig-width</code> and <code>fig-height</code> when you’re setting them via custom code comments, our new <code>out.lines</code> option becomes <code>out-lines</code> when used in that context:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb16-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| out-lines: 4</span></span>
<span id="cb16-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(200)</span></span>
<span id="cb16-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.26750821 0.21864528 0.51679684 0.26895059 0.18116833 0.51857614
  [7] 0.56278294 0.12915685 0.25636760 0.71793528 0.96140994 0.10014085
 [13] 0.76322269 0.94796635 0.81863469 0.30829233 0.64957946 0.95335545
 [19] 0.95373265 0.33997920 0.26247411 0.16545393 0.32216806 0.51012521
....</code></pre>
</div>
</div>
</section>
<section id="custom-chunk-hooks" class="level2">
<h2 class="anchored" data-anchor-id="custom-chunk-hooks">Custom chunk hooks</h2>
<p>In the previous section, we effectively created a new chunk option called <code>out.lines</code> simply by virtue of modifying one of the standard output hooks that is able to interpret it and modify the output accordingly. That approach doesn’t always work, particularly if the new option that you want to create requires that code be executed before and after knitr processes the chunk. In those situations we may need to write a “chunk hook” that is triggered whenever the new chunk option has a non-null value. Chunk hooks have a different structure than output hooks. The <em>R Markdown Cookbook</em> has some nice examples of this, including one for <a href="https://bookdown.org/yihui/rmarkdown-cookbook/time-chunk.html">timing how long it takes the chunk to execute</a>. I’ll adapt that one here.</p>
<p>To understand how to write a chunk hook, the key thing to realise is that it gets called twice: once before knitr executes the code in the chunk, and once again afterwards. The function can take up to four arguments, all of which are optional:</p>
<ul>
<li><code>before</code> is a logical value indicating whether the function is being called before or after the code chunk is executed</li>
<li><code>options</code> is the list of chunk options</li>
<li><code>envir</code> is the environment in which the code chunk is executed</li>
<li><code>name</code> is the name of the code chunk option that triggered the hook function</li>
</ul>
<p>As a general rule, the chunk hook is called for its side effects not the return value. However, if it returns a character output, knitr will add that output to the document output as-is.</p>
<p>Designing a chunk hook that records the amount of time taken to execute takes a little thought. When the hook is triggered the first time (with <code>before = TRUE</code>) we want to record the system time somewhere (e.g., in a variable called <code>start_time</code>). Then, when the hook is triggered the second time (with <code>before = FALSE</code>) we want to record the system time again (e.g., as <code>stop_time</code>), and compute the difference in time. We can do this using a <a href="https://adv-r.hadley.nz/function-factories.html">function factory</a> to create stateful functions. Here’s what that looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">create_timer_hook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb18-2">  start_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb18-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(before, options) {</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (before) {</span>
<span id="cb18-5">      start_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb18-6">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb18-7">      stop_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb18-8">      elapsed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(stop_time, start_time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>)</span>
<span id="cb18-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb18-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;div style='font-size: 70%; text-align: right'&gt;"</span>,</span>
<span id="cb18-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elapsed time:"</span>, </span>
<span id="cb18-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(elapsed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb18-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>,</span>
<span id="cb18-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/div&gt;"</span></span>
<span id="cb18-15">      )</span>
<span id="cb18-16">    }</span>
<span id="cb18-17">  }</span>
<span id="cb18-18">}</span></code></pre></div>
</div>
<p>When <code>create_timer_hook()</code> is called it returns a function that will become our custom hook. Or – to be more precise, because in this instance the distinction matters – it returns a closure. When called with <code>before == TRUE</code>, it records the system time and uses the super assignment operator <code>&lt;&lt;-</code> to store that value as <code>start_time</code>. Normally, an assignment that takes place during the function execution isn’t persistent and can’t be reused on later calls to that function. But we’ve structured things differently here: in this case, the <code>start_time</code> variable is defined in the enclosing environment (the one in which the function was defined) rather than the execution environment (in which the function body code executes). That changes things: the execution environment is inherently ephemeral and lasts as long as a single function call is in progress. The enclosing environment, however, is persistent, and will survive for (at least) as long as the function itself exists. As a consequence, the value assigned to <code>start_time</code> is persistent also, and still exists when the hook is triggered a second time with <code>before == FALSE</code>. That makes it possible to compute the difference between <code>start_time</code> and <code>stop_time</code> with <code>difftime()</code>.</p>
<p>Having computed the elapsed time, all that remains is to format it a little bit and then return a nice character string with some HTML that will be printed in the final document. To put this into action, we set the custom hook like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_timer_hook</span>())</span></code></pre></div>
</div>
<p>By doing this <code>timer</code> become the code chunk option that triggers the hook, and we can now use it in the document:</p>
<div class="cell" data-timer="true" data-out.lines="4">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb20-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb20-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| timer: true</span></span>
<span id="cb20-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| out-lines: 4</span></span>
<span id="cb20-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(10000)</span></span>
<span id="cb20-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    [1] 0.6588776091 0.1850699645 0.9543781369 0.8978484920 0.9436970544
    [6] 0.7236907512 0.3703570659 0.7810175403 0.0111495086 0.9403087122
   [11] 0.9937492262 0.3574057452 0.7476350635 0.7929090238 0.7058590064
   [16] 0.4758250387 0.4946545260 0.3080524488 0.6950122463 0.8227933056
....</code></pre>
</div>
<div style="font-size: 70%; text-align: right">
Elapsed time: 0.03 secs
</div>
</div>
<p>And with that, we are done!</p>
<p>Yes, there are other kinds of hooks that you can write for knitr,<sup>2</sup> but the only two kinds of hooks I’ve ever actually had the need for myself are output hooks and chunk hooks, so in the interests of brevity I’ll leave it at that.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In addition to <code>knit_hooks</code> and <code>opt_chunks</code>, knitr has several other objects that can be used to control the behaviour of the package. These are <code>knit_patterns</code>, <code>knit_patterns</code>, <code>opts_current</code>, and <code>opts_knit</code>. They all have the same basic structure, including <code>$get()</code> and <code>$set()</code> functions. These objects are documented <a href="https://yihui.org/knitr/objects/">here</a>.↩︎</p></li>
<li id="fn2"><p>There are also <a href="https://yihui.org/knitr/hooks/#option-hooks">option hooks</a> that you can use to modify the value of some options based on the values of other options, and those are managed by <code>opts_hooks</code> in the same way that <code>knit_hooks</code> manages output hooks and chunk hooks.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Writing Knitr Hooks},
  date = {2023-12-30},
  url = {https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Writing Knitr Hooks.”</span> December
30, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks">https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Literate Programming</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/</guid>
  <pubDate>Fri, 29 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/yarn.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Fine-grained control of RNG seeds in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Ah fuck it. So. Earlier this morning<sup>1</sup> I <a href="https://hachyderm.io/@djnavarro/111655059799138922">posted on mastodon</a> about the sense of sadness I have about the death of turn-of-the-century-yes-this-century blog culture:</p>
<blockquote class="blockquote">
<p>I was reading a thread about how the norms around blog posts have changed over the years, where “writing something up a blog post” now has a kind of formality to it that it didn’t have 20 years ago (yes, I did in fact have a blog in 2003), which in turn makes blogging feel more like work than joy. This seems like a genuine cultural loss.</p>
</blockquote>
<p>Once upon a much happier time, we had a blogging culture where writing a blog post didn’t have to be “A Very Serious Blog Post By A Very Serious Person”. The craft of blogging wasn’t built around the idea that blog posts are miniature journal articles. Back then it was understood that a blog post was an inherently ephemeral and rarely serious thing. You’d have an idle thought, spend a small amount of time developing the idea, write it up, and <strong>ET FUCKING VOILA BITCHES I HAVE A BLOG POST</strong>.</p>
<p>I kind of loved that culture. It’s precisely in that spirit that I decided, in my last post, to cobble together an absolutely-cursed rethinking of the <a href="https://bookdown.org/yihui/blogdown/">blogdown</a> R package and write an unapologetically-unhinged <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">post</a> about it. The “eleventy plus knitr” system I built in an afternoon – following the <a href="https://www.youtube.com/watch?v=1i739SyCu9I">Bob Katter principle</a> in which “I ain’t spending any time on it, because in the meantime, every three months a person’s torn to pieces by a crocodile in North Queensland” – was a fun toy, and nothing more than that. This is <em>exactly</em> what blogs are for, and precisely the reason why the subtitle on that post is “Because you know what? I <em>am</em> here to <a href="https://www.urbandictionary.com/define.php?term=Not%20here%20to%20Fuck%20Spiders">fuck spiders</a>”. The entire purpose of blogging is to have some fun. It’s not a public relations exercise.<sup>2</sup> <sup>3</sup> <sup>4</sup></p>
<p>So let’s fuck some spiders.</p>
<section id="managing-computational-state-when-generating-pseudo-random-numbers" class="level2">
<h2 class="anchored" data-anchor-id="managing-computational-state-when-generating-pseudo-random-numbers">Managing computational state when generating pseudo-random numbers</h2>
<p>The spider I’m thinking about today relates to the problem of generating pseudo-random numbers in a reproducible way. Generating a sequence of numbers that satisfy formal definitions of randomness is an inherently tricky business and programming languages have a very, ummmmm, mixed track record in finding ways to do it sanely. The core of the problem lies in the fact that computers are Turing machines, and as such are deterministic systems. You can’t make a deterministic system behave “randomly” without doing quite a bit of mathematical work to (a) decide what “randomly” means in this context and, (b) constructing algorithms that produce behaviour that we are willing to describe as “random”. Fortunately for us, this part of the problem was solved a long time ago, and I have no desire whatsoever to use this post to discuss the <a href="https://en.wikipedia.org/wiki/Mersenne_Twister">Mersenne Twister</a> in relation to <a href="https://en.wikipedia.org/wiki/Algorithmically_random_sequence">Martin-Löf randomness</a>.<sup>5</sup> The algorithm is good enough for my purposes, it’s implemented as a random number generator (usually one of many) in various language, and that is <em>fine</em>.</p>
<p>The tricky part, from a practical perspective, is that pseudo-random number generators are <a href="https://en.wikipedia.org/wiki/State_(computer_science)">stateful</a> entities that depend on a “random number generator seed”, and – by design! – they are spectacularly sensitive to the seed. If you do even the tiniest thing in your code that touches the RNG seed, <em>every</em> subsequent action that uses that RNG will be changed in fundamental ways. If you want to program carefully around random number generators, you need to be super careful with managing the RNG seed.</p>
<p>Ah fuck it. <a href="https://www.youtube.com/watch?v=suAR1PYFNYA">Dua Lipa</a> already said it better:</p>
<blockquote class="blockquote">
<p>I come and I go <br> Tell me all the ways you need me <br> I’m not here for long <br> Catch me or I go Houdini <br> I come and I go <br> Prove you got the right to please me <br> Everybody knows <br> Catch me or I go Houdini</p>
</blockquote>
<p>From a reproducible computing perspective, you’d better catch the RNG state and work carefully with it, or else it will be gone forever.</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/houdini.png" class="img-fluid" alt="Screenshot from the video clip to 'Houdini'"></p>
</section>
<section id="how-do-different-languages-manage-rng-state" class="level2">
<h2 class="anchored" data-anchor-id="how-do-different-languages-manage-rng-state">How do different languages manage RNG state?</h2>
<p>How should we manage the RNG state in a programming language? It’s a difficult problem, and I am absolutely <em>not</em> the person to resolve the question. I’m basically an idiot, and I don’t even pretend to know what the right answer to this is. That being said, I think there’s essentially three categories of solution that exist in the wild:</p>
<ul>
<li><p><strong>The javascript style:</strong> The solution in vanilla javascript is basically a “fuck you” to the user. The core random number generator is <code>Math.random()</code> and it doesn’t let you specify the seed at all. If you want reproducible sequences of random numbers in javascript you can go fuck yourself.<sup>6</sup></p></li>
<li><p><strong>The C++ style:</strong> The solution in C++ is to use the <code>random</code> library, in which the RNG state is itself an object that must be passed to a probabilistic function, creating an object that can then be used to generate random numbers using the RNG state. It’s somewhat rigorous, but it leads to code like this, which is so obnoxiously painful that I barely even have words:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;random&gt;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// set seed using time, define PRNG with Mersenne Twister</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mt19937_64 mersenne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// sample_poisson() draws from Poisson(4.1) and returns an integer.</span></span>
<span id="cb1-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>poisson_distribution<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> sample_poisson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// draw poisson sample (passing the PRNG as argument) and write to stdout</span></span>
<span id="cb1-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"poisson sample: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sample_poisson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mersenne<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Honey I just wanted some Poisson variates I didn’t want your life story.</p></li>
<li><p><strong>The R style:</strong> Okay what if we secretly placed the RNG state into a <code>.Random.seed</code> variable that exists in the global environment but made it invisible so a typical user will never see it or think about it, and then have a <code>set.seed()</code> function to control it in ways that 99% of users won’t ever think about?</p></li>
</ul>
<p>Um. There is, as the young people say, a lot to unpack here.</p>
</section>
<section id="on-the-particulars-of-the-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="on-the-particulars-of-the-r-approach">On the particulars of the R approach</h2>
<p>Okay yes, that little summary is a bit of rhetorical largesse on my part. It should be obvious to anyone who knows me that the primary focus I have in writing about this topic is thinking about how R solves this. The whole purpose of talking about the “three styles” in the previous section is that I want to contrast the core approach in R with two other styles I’ve seen in other languages: compared to R, javascript is utterly lacking in rigour on this topic and as a consequence is utterly useless for analysts, whereas – by way of deliberately constructed contrast – C++ has rigour but is utterly lacking in practicality for everyday data analysis. The set of analysts who are going to put up with C++ bullshit when trying to simulate from a model is perilously close to measure zero. There is a <em>reason</em> why R adopts the peculiar solution it does.<sup>7</sup></p>
<p>So let’s unpack it a tiny bit. We’ll start by looking at the <code>.Random.seed</code> object itself.</p>
<section id="whats-in-the-.random.seed-babe" class="level3">
<h3 class="anchored" data-anchor-id="whats-in-the-.random.seed-babe">What’s in the <code>.Random.seed</code> babe?</h3>
<p>As I mentioned, what R does when you call <code>set.seed()</code> is create a hidden variable called <code>.Random.seed</code> that exists in the users global workspace, and is used to specify the state of the random number generator.<sup>8</sup> Here’s what it looks like when we call <code>set.seed()</code> with <code>seed = 1</code>:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb2-3">state</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1]       10403         624  -169270483  -442010614  -603558397
  [6]  -222347416  1489374793   865871222  1734802815    98005428
 [11]   268448037    63650722 -1754793285 -2135275840  -779982911
 [16]  -864886130  1880007095   463784588  1271615005  1390544442
....</code></pre>
</div>
</div>
<p>I’ve truncated the output because the actual <code>state</code> variable here is quite long and we don’t need all that clutter.<sup>9</sup> It’s noticeable, when you look at this thing, that the first two elements of the <code>.Random.seed</code> seem to be rather different from the others. Let’s test that by calling <code>set.seed()</code> with <code>seed = 2</code>:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb4-3">state</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1]       10403         624 -1619336578  -714750745  -765106180
  [6]   158863565 -1093870294   242367651 -1691232888 -1538791959
 [11]   438890646  -141146593   721730004  1779208901   575310018
 [16]  -949789349   329933024  -952437919  2079445422  1509473879
....</code></pre>
</div>
</div>
<p>Yeah okay, there’s something going on here. The first two values in this vector are clearly different in some sense from the rest of the numbers. Let’s start with the first element of our state vector, the <code>10403</code> value. This one is not part of the random number generator itself. Rather, it’s used to encode the <em>kind</em> of random number generator in use. The way to decode what means is to split it up into three numbers, like this <code>1 04 03</code>. From the help documentation:</p>
<blockquote class="blockquote">
<p>The lowest two decimal digits are in 0:(k-1) where k is the number of available RNGs. The hundreds represent the type of normal generator (starting at 0), and the ten thousands represent the type of discrete uniform sampler.</p>
</blockquote>
<p>To help make sense of this, it helps to realise that <code>set.seed()</code> has more arguments to it than just the <code>seed</code> value. There are in fact four arguments, as shown below:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">normal.kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample.kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<p>The <code>kind</code> argument specifies which RNG algorithm should be used to generate uniform random numbers (e.g., Mersenne Twister, the default), which is usually the thing we’re interested in, at least to the extent that most probabilistic process require that we have a generator for uniform random numbers. This is what the <code>03</code> part of that <code>10403</code> number refers to. However. There are two special cases that come up so often that R allows you to customise them. The <code>normal.kind</code> argument to <code>set.seed()</code> specifies the algorithm to by used when generating normally distributed numbers (e.g., Box-Muller), and this is is what the <code>04</code> part of <code>10403</code> references. The <code>sample.kind</code> argument refers to the algorithm used when sampling from a discrete set (e.g., as in the <code>sample()</code> function), and the <code>1</code> part of <code>10403</code> refers to that.</p>
<p>As to what the different options are, what defaults are used, and how those defaults have changed across different versions of R, I’ll just refer the interested reader to the help documentation, because honestly that’s not the point of this post. For now, it’s enough to recognise that the first element of <code>.Random.seed</code> specifies the kind of RNG, and that by default we’re using the Mersenne Twister any time we need uniform random numbers.</p>
<p>Okay, what about that second element? Much like the <code>10403</code> value in the first position, the <code>624</code> number in the second position seems to be screaming out “hello I am not actually a part of the RNG state” too, and indeed that’s correct. It’s specific to the Mersenne Twister, and is used to indicate that the <em>actual</em> Mersenne Twister RNG state is an integer vector of length 624. And shockingly, if we take a look at how long our <code>state</code> variable is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(state)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 626</code></pre>
</div>
</div>
<p>we get an answer of 626: there are 624 integers used to specify the state of the Mersenne Twister, one integer used to indicate that yes the Mersenne Twister state has length 624, and one more integer used to indicate that (among other things) we’re using the Mersenne Twister.</p>
<p>That checks out.</p>
</section>
<section id="lets-be-random" class="level3">
<h3 class="anchored" data-anchor-id="lets-be-random">Let’s be random</h3>
<p>Well that was tiresome. I seem to be pathologically incapable of writing a short blog post without going off on bizarre yak-shaving tangents. Sorry. Anyway, let’s get back on track and do something that relies on the state of the RNG, shall we? First, we’ll reset the value of <code>.Random.seed</code> and capture its initial value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span></code></pre></div>
</div>
<p>Next, I’ll do something that requires the random number generator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>When I do this, there are two things that happen. Most obviously, by calling <code>sample()</code> I now have a random permutation of the numbers between 1 to 10. But as a hidden side effect, the value of <code>.Random.seed</code> has changed.<sup>10</sup> Because the RNG state has changed, if I repeat the exercise I get a different random permutation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  3  1  5  8  2  6 10  9  4  7</code></pre>
</div>
</div>
<p>This is of course the desired behaviour, but the only reason it works is by relying on the <code>.Random.seed</code> vector. If I restore the original state of the RNG before calling <code>sample()</code>, I get the exact same result as the first time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">.Random.seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> state</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Again, this is expected and desired behaviour.</p>
</section>
<section id="strengths-and-weaknesses-of-the-r-approach" class="level3">
<h3 class="anchored" data-anchor-id="strengths-and-weaknesses-of-the-r-approach">Strengths and weaknesses of the R approach</h3>
<p>The approach used in R reflect as a specific philosophy that emerges from the core purpose of the language: <strong>R is a scripting language designed to support scientific data analysis</strong>. This core goal leads to two key features:</p>
<ul>
<li><p>Scientists care about computational reproducibility, so (unlike javascript) base R comes with the <code>set.seed()</code> function that allows you to initialise the state of the RNG in a reproducible way. In fact, R goes one step further and provides a <code>RNGversion()</code> function that supports backward-compatibility across R versions, because the low level details of how R implements random number generation have changed over the years.</p></li>
<li><p>Data analysts need simple, practical solutions. The C++ style where you have to construct an RNG object and then explicitly pass it as an argument when you want to sample from a distribution is awkward and frustrating, and rarely helpful when doing everyday data analysis.</p></li>
</ul>
<p>These twin considerations lead to the R solution: there’s <em>one</em> RNG state variable in R, tucked away in a hidden variable in the user workspace, and you rarely have to think about it in any more detail than remembering to include <code>set.seed()</code> in your analysis script. In some ways it’s an inelegant solution, but it’s shockingly effective from a practical standpoint.</p>
<p>However.</p>
<p>There are edge cases when the R solution doesn’t quite work as well as you’d hope, and I’ve encountered them more than once. Because R relies on a single <code>.Random.seed</code> variable to manage state, there’s no easy way for the analyst to make a distinction between “things I’m doing that incidentally require some random numbers”, and “other probabilistic things I’m doing that are utterly essential to a simulation”. Everything you do in an R script relies on the <em>same</em> random number generator, and uses the <em>same</em> seed to manage that state. This can sometimes be fragile, because any line of code that “incidentally” touches the RNG will affect the results from any “essential” probabilistic code you write later in the script. That happens a lot with code that has this structure:</p>
<ol type="1">
<li>set the RNG seed</li>
<li>do some essential probabilistic simulations</li>
<li>do something that incidentally calls the RNG</li>
<li>do some more essential probabilistic simulation</li>
</ol>
<p>When you write the code, what you sort of have in your head is that “I’m setting the RNG seed in part 1 in order to ensure that the simulations in part 2 and 4 are reproducible”, but you have a hidden dependence on the code in part 3. Often times, you don’t even realise that the code in part 3 is affecting the RNG state because there are lots of R functions that incidentally use the RNG without you realising it.</p>
<p>Often what people do to address this, when they are aware of this issue, is to set the seed multiple times, at key points in the code:</p>
<ol type="1">
<li>set the RNG seed</li>
<li>do some essential probabilistic simulations</li>
<li>do something that incidentally calls the RNG</li>
<li>set the RNG seed again</li>
<li>do some more essential probabilistic simulation</li>
</ol>
<p>By setting the seed in multiple places, you have a solution that is more robust. If, for example, there are package updates that change the manner in which the code in part 3 touches the RNG, your simulation in part 5 won’t be affected. It’s a defensive coding trick to minimise your exposure to unexpected changes to RNG state, and it works pretty well.<sup>11</sup></p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/dance-the-night.png" class="img-fluid" alt="Screenshot from the video clip to 'Dance The Night' by Dua Lipa"></p>
</section>
</section>
<section id="creating-an-isolated-rng-seed" class="level2">
<h2 class="anchored" data-anchor-id="creating-an-isolated-rng-seed">Creating an “isolated” RNG seed</h2>
<p>As you can probably guess, I am actually a huge fan of the R solution. Yes, it’s an unprincipled hack where the language “cheats” by creating a hidden global state variable, but it really does work for the vast majority of use cases and it doesn’t waste the analysts time by making them do all the dirty work managing the RNG themselves. From its inception R has <em>never</em> been a language that cares about ideological purity: as Hadley Wickham once noted,<sup>12</sup> R is first and foremost a language for “getting shit done”.</p>
<p>That being said, sometimes I find myself wishing there was a way of creating an “isolated” RNG seed. The idea here is that as the data analyst, I know perfectly well which parts of my code are essential to my probabilistic simulations, and what I really want to do is “protect” those parts of the code by executing them with a dedicated RNG. All my incidental code can use the global RNG state, but nothing I do in the incidental code would affect the output of the protected simulation code, <a href="https://www.youtube.com/watch?v=OiC1rgCPmUQ">not one hair out of place</a>.</p>
<blockquote class="blockquote">
<p>Watch me dance, dance the night away <br> My heart could be burnin’, but you won’t see it on my face <br> Watch me dance, dance the night away <br> I’ll still keep the party runnin’, not one hair out of place</p>
</blockquote>
<p>On the face of it, this seems hard to accomplish with R because the <code>.Random.seed</code> variable is aggressively unique. The documentation makes it very clear that the only place R will look for the RNG state is the <code>.Random.seed</code> variable in the user global environment, so you cannot solve this problem by creating a new <code>.Random.seed</code> variable in another environment. However, the documentation also makes clear that you are <em>absolutely</em> allowed to save the value of <code>.Random.seed</code> and restore it later.<sup>13</sup> In other words, you totally could do something like this:</p>
<ol type="1">
<li>Use <code>set.seed()</code> to create the “to-be-isolated” RNG, and then do something like <code>protected_state &lt;- .Random.seed</code> to store the state of that RNG</li>
<li>Use <code>set.seed()</code> again to set the “global” RNG state</li>
<li>Do some “incidental” random things (implicitly using the global RNG state)</li>
<li>In preparation for the protected step, cache the global state in a temporary <code>global_state &lt;- .Random.seed</code></li>
<li>Restore the protected RNG with <code>.Random.seed &lt;- protected_state</code></li>
<li>Run your “protected” simulation code</li>
<li>Capture the updated state <code>protected_state &lt;- .Random.seed</code></li>
<li>Restore the global RNG with <code>.Random.seed &lt;- global_state</code></li>
</ol>
<p>This approach works perfectly well, actually. There is absolutely nothing stopping you from caching the state of a protected RNG separately from the global RNG, and occasionally restoring it when you specifically want to use the protected RNG. The only problem with the solution is that I am <em>absolutely</em> not willing to faff about writing code that does this in my everyday analysis work. It’s time-consuming and annoying, and I have deadlines to meet.</p>
<p>Enter, stage left, the <a href="https://r6.r-lib.org/">R6</a> package. It is almost obnoxiously easy to design a stateful R6 class that solves this problem. Here’s how you do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">Seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R6<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seed"</span>,</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb16-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb16-4">      old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(...)</span>
<span id="cb16-6">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, old, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-8">    },</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">state =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb16-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>()) {</span>
<span id="cb16-11">      old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-13">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(expr), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> envir)</span>
<span id="cb16-14">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, old, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb16-17">    }</span>
<span id="cb16-18">  )</span>
<span id="cb16-19">)</span></code></pre></div>
</div>
<p>The <code>Seed</code> class is terribly simple. When you initialise a new <code>Seed</code> object, it temporarily caches the global <code>.Random.seed</code> state, then calls <code>set.seed()</code> to create the protected RNG state. This protected state is then cached within the <code>Seed</code> object itself as the <code>$state</code> field.<sup>14</sup> Finally, it restores the global <code>.Random.seed</code> variable to its original state.</p>
<p>Using the protected seed is pretty straightforward: the <code>Seed</code> class has a <code>$use()</code> method to which you pass an R expression. All code in that expression is evaluated using the protected RNG state rather than the global state. The mechanism here is exatly the same: the <code>$use()</code> method caches the global RNG state, copies the <code>$state</code> field to the <code>.Random.seed</code>, then executes the R code. After the code has executed, the new value of <code>.Random.seed</code> is copied back to the <code>$state</code> field, and then the global state is restored.</p>
<p>Let’s have a look at how it works. First, I’ll set the “usual” RNG state using <code>set.seed()</code> with <code>seed = 123</code>. Then, I’ll create two new isolated RNG seeds, both of which use <code>seed = 1</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb17-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb17-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-4">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Next, I’ll call <code>sample()</code> using these isolated seeds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb18-2">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8
 [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Notice that both of these produce identical output (as they should, since they were both initialised using the same <code>seed</code> value), and the output is exactly the same as the results we saw earlier when I used <code>set.seed(1)</code>. So far, so good. Okay, now let’s use these isolated seeds a second time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb20-2">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  3  1  5  8  2  6 10  9  4  7
 [1]  3  1  5  8  2  6 10  9  4  7</code></pre>
</div>
</div>
<p>Again, the results are identical to each other, and they’re also identical to the results we saw earlier when I called <code>sample()</code> a second time after using <code>set.seed(1)</code>. Also what we’re expecting. Yay! Finally, let’s check that using these isolated RNG seeds has left the state of <code>.Random.seed</code> in the global workspace unchanged:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(state, .Random.seed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Yup. It works.<sup>15</sup></p>
<p>Importantly for the desired functionality, the protection runs the other way too. RNG-sensitive code executed using the global RNG doesn’t affect the behaviour of code executed using one of the protected generators. This is actually the key feature, so let’s take a look. As before, we’ll set up our global generator and two identical protected generators.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb24-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb24-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-4">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Next, I’ll use the <code>x</code> generator to do something that we might imagine is part of an “essential” simulation exercise:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Unsurprisingly, it produces the same output. Now here’s the key part. What would have happened if I ran some incidental code beforehand? Well, let’s do exactly that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2875775</code></pre>
</div>
</div>
<p>In my hypothetical scenario, this would be something that happens during the incidental code (e.g., maybe a function I called on the side – in order to explore something that came up during the scientific reasoning process, because analysis code is <em>not</em> production code and it has an inherently different logic<sup>16</sup> – happened to generate a random number in order to break a tie or whatever). In the normal course of events, this would alter the state of the RNG for all subsequent code. But, if we now repeat the “essential” line of code using the <code>y</code> generator, we see that it still produces the exact same answer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Well that’s a relief. I mean, this is what we should expect because <code>x</code> and <code>y</code> were both created to be identical generators and they were both designed to be isolated from the global RNG state, so of course state changes in the global RNG are entirely irrelevant to the behaviour of code that uses one of the protected generators, but it’s nice to confirm.</p>
<p>This is the behaviour I wish I had easy access to in R. There are times when I have “special” code that I really, really, really want to be executed with its very own RNG, completely isolated from the global RNG. It actually irritates me that the solution to the problem can be implemented in R6 with a mere 19 lines of code. Annoyed that I didn’t think of this years ago tbqh.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>So okay, I solved the problem I was idly thinking about when I decided to fuck this particular spider. What now?</p>
<p>It would be pretty easy to wrap something like this in a package I suppose,<sup>17</sup> but (a) I’m too lazy to write it myself, and (b) I think the use case for it is pretty narrowly confined to situations when you are writing a very long script that performs an “essential” simulation and also contains incidental code isn’t supposed to affect the simulation itself. Plus, and perhaps most importantly, (c) remember how I said this was a spider-fucking post? I said it and I bloody well meant it. I’m not trying to Solve A Big Problem here. I’m just playing around with code and enjoying the act of writing about it.</p>
<p>That being said, I have to admit I’ve encountered a few situations in my professional life where I really wished there were a package that implemented something like the <code>Seed</code> class. I had one experience a little while back where I’d inherited a long simulation script that did the right thing insofar as it called <code>set.seed()</code> at the top of the script, but it had lots of essential simulation code interleaved between other code that was used for non-essential purposes and incidentally modified the RNG state. It was a nightmare to try to refactor the code without breaking reproducibility. Eventually I just had to give up. The code absolutely did need to be refactored because of the future use that we had in mind, and – despite the original programmers laudable effort to do the right thing – it was absolutely impossible to do so without changing the results of the simulations. It would have been a lot easier to do this if the “essential” simulation code had been properly isolated from the incidental code. Situations like this are exactly the ones where you want something like the <code>Seed</code> class.</p>
<p>Anyway. Whatever. This was supposed to be an exercise in fucking a spider not shaving a yak, and frankly there has been altogether too much <a href="https://en.wiktionary.org/wiki/yak_shaving">yak shaving</a> going on in this post. So let’s leave it there, yes?</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Okay fine it was yesterday morning, because instead of finishing this blog post last night as I’d intended I went out for cocktails. Sue me.↩︎</p></li>
<li id="fn2"><p>One of the most cursed things that has happened to public tech culture is the idea of corporate-style “community”. Oh look at me, I’m a tHouGHt lEaDer iN tEcH blah blah blah. Honey, if I wanted to masturbate in public there are much easier ways to make men pay to watch me do it.↩︎</p></li>
<li id="fn3"><p>Somewhat relatedly, I often think to myself that the reason why a lot of technical blog posts end up with very bland writing is that the author feels obligated to “act professionally” on their blog, for fear that their employer might see it and react negatively if they ever use the word “fuck”. I understand and share that sentiment but also… I’ve worked as an academic, I’ve worked in tech, and I now work in pharma. Anyone who knows me professionally knows that (especially as I’ve gotten older) I don’t ever talk like this at work. Professionalism is important, <em>in a professional context</em>. But my blog is not my job, and in much the same way that <a href="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/#art">trying to be a professional artist sucked all the joy out of making art for me</a>, trying to be professional in my blog posts sucks all the joy out of writing. In my professional life I have to be restrained, and things that are essential to my very character – my queerness, for instance – are inadmissable and unspeakable in a work context. I’m frankly unwilling to extend that level of self-imposed closeting to my personal life. This blog is part of my personal life, not my professional life. So I get to be me here. If that bothers people they are free to not read my blog.↩︎</p></li>
<li id="fn4"><p>As Dan Simpson once remarked, it is <em>extremely</em> homophobic of quarto not to support nested footnotes. Like, what the hell are queers supposed to do when we can’t turn our blog posts into a tangled web of unhinged footnotes? This is our primary defence mechanism to ensure that the straights on linkedin won’t ever try to interact with us, damn it.↩︎</p></li>
<li id="fn5"><p>No seriously. I spent a solid six months of my mid-20s life reading journal articles about algorithmic randomness and its relationships to Kolmogorov complexity and Bayesian inference, when instead I could have spent that time doing literally anything else and it was a terrible fucking decision.↩︎</p></li>
<li id="fn6"><p>Yes I know about <a href="https://www.npmjs.com/package/seedrandom">seedrandom</a>, shut up.↩︎</p></li>
<li id="fn7"><p>In defence of both C++ and javascript, you could probably argue the same for those languages: C++ is a systems language, and you’re not really supposed to use it for everyday data analysis. The tedious verbosity of C++ code in this context reflects the function of the language. Similarly, javascript was designed to support scripting for web pages, and while there are now libraries that support data analysis in javascript, it wasn’t originally designed for that purpose and so “vanilla” javascript doesn’t come with the same level of careful thought on this topic that you see in base R. My point in using those two as contrasts to R is not to call them bad languages, but to highlight the fact that different languages make different choices that reflect the primary function those languages were designed to support.↩︎</p></li>
<li id="fn8"><p>Note that the <code>.Random.seed</code> vector doesn’t actually exist at start up: it is created explicitly when the user calls <code>set.seed()</code>, but it will also be created for you if you do something that requires the RNG without previously calling <code>set.seed()</code>, using the current time and the process ID as the input.↩︎</p></li>
<li id="fn9"><p>I swear to the almighty femme top above, every single time I have to write a knitr hook I have to spend 20 minutes googling to find <a href="https://bookdown.org/yihui/rmarkdown-cookbook/hook-truncate.html">this page</a> again. I don’t know why this specific thing is so hard to search for, but I’m about <em>this</em> close to writing a pointless blog post on my own site that just copies the damn code line for line, just so that I don’t have to search for it again.↩︎</p></li>
<li id="fn10"><p>Parenthetically, if you want to configure R so that you get notified every time <code>.Random.seed</code> changes, you can set up a callback handler to do this. Henrik Bengtsson has a <a href="https://www.jottr.org/2020/09/21/detect-when-the-random-number-generator-was-used/">nice post</a> showing you how to do this. I have something similar set up in my <code>.Rprofile</code>.↩︎</p></li>
<li id="fn11"><p>More generally, though, if you want to be completely safe you’d probably need to use tools like <a href="https://www.docker.com/">Docker</a>, <a href="https://rstudio.github.io/renv/">renv</a>, and <a href="https://github.com/r-lib/rig">rig</a> to control the computational environment. But that’s beyond the scope.↩︎</p></li>
<li id="fn12"><p>I’m too lazy to track down the original citation or the exact quote, but I think he said it during an rstudio::conf / posit::conf talk. The specifics don’t matter very much.↩︎</p></li>
<li id="fn13"><p>The exact phrasing in the documentation says that <code>.Random.seed</code> “can be saved and restored, but should not be altered by the user”, i.e., it’s totally fine to copy the RNG state, just don’t try to modify the values stored in the vector yourself because you’ll almost certainly mess it up.↩︎</p></li>
<li id="fn14"><p>I should probably have made this a private field rather than a public field, and then written a public accessor method like <code>$get_state()</code> or whatever. But this is a toy example, I’m not trying to be rigorous here.↩︎</p></li>
<li id="fn15"><p>It should go without saying that this isn’t guaranteed to work properly if we’re doing a multi-threaded execution thing. But that’s true for normal random number generation anyway: you need special tools when doing random number generation in parallel. One of these days I want to do a deep dive on that topic, but it’s totally something for a future post.↩︎</p></li>
<li id="fn16"><p>One of these days I want to write a post about what counts as “best practice” for writing analysis code that doesn’t go into prod but might be sent to a regulator, because seriously my babes that is a fucking different beast altogether. But that’s for another time.↩︎</p></li>
<li id="fn17"><p>On the off chance anyone does go down this path, I propose the name “seedcatcher” so that all the stats gays can make “no loads refused” jokes about it. See also, “lubridate”.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Fine-Grained Control of {RNG} Seeds in {R}},
  date = {2023-12-27},
  url = {https://blog.djnavarro.net/posts/2023-12-27_seedcatcher},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Fine-Grained Control of RNG Seeds in
R.”</span> December 27, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher">https://blog.djnavarro.net/posts/2023-12-27_seedcatcher</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Randomness</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/</guid>
  <pubDate>Tue, 26 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/houdini.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The blogdown of theseus</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>It is the first day of my summer vacation. The out-of-office autoreply is on. I have a full tank of gas, half a pack of cigarettes, the sun is shining, and I’m wearing a sequined dress. Blues Brothers it is most certainly not, but a certain attitude is in force. And so it is that I’ve decided to get the band back together. Where “the band” in this case happens to be “a tool chain that looks like a shit version of <a href="https://pkgs.rstudio.com/blogdown/">blogdown</a>”.</p>
<p>Is it a good use of my time? No.&nbsp;Will I do a good job of it? No.&nbsp;But will it it make a good blog post? Also no.</p>
<p>Okay. So here’s the backstory. Literate programming in R has been around for a very long time. So much so that we’ve all become accustomed to thinking about tools like <a href="https://rmarkdown.rstudio.com/">R markdown</a>, <a href="https://pkgs.rstudio.com/blogdown/">blogdown</a>, and <a href="https://quarto.org/">quarto</a>, as baked-in aspects to the language. That’s not actually a bad thing. They’re good tools. I have no intention of abandoning any of them. But they aren’t primitives. Each of them is an opinionated tool that takes a code execution engine like <a href="https://yihui.org/knitr/">knitr</a> as a starting point, and builds from it in different ways. R markdown and quarto both use knitr to execute the R code within an appropriately annotated markdown document and then feed the results to <a href="https://pandoc.org/">pandoc</a> to create outputs in different formats. Blogdown takes the same idea, but passes the output to the <a href="https://gohugo.io/">hugo</a> static site generator to create full featured blogs and static websites. Et cetera.</p>
<p>What would happen if those “upstream” tools were taken away? What if you needed to create an R blog from scratch and the only part of this tool chain you had available to you was knitr. What choices would you make? Could you cobble together something vaguely similar to a blogdown site or a quarto blog, using entirely different constituent parts?</p>
<p>Why would you do this? You wouldn’t.</p>
<p>But for reasons that absolutely made sense to me at the time, this is precisely what I did. The website is live at <a href="https://knitr-11ty.djnavarro.net/">knitr-11ty.djnavarro.net/</a>, and – because I have absolutely no intention of writing the same blog post twice – if you want to “read more” as they used to say, you can check out the actual blog post <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">here</a>.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {The Blogdown of Theseus},
  date = {2023-12-23},
  url = {https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“The Blogdown of Theseus.”</span>
December 23, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus">https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus</a>.
</div></div></section></div> ]]></description>
  <category>Javascript</category>
  <category>R</category>
  <category>Blogging</category>
  <category>Literate Programming</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/</guid>
  <pubDate>Fri, 22 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/theseus-and-ariadne.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Closed form solutions for a two-compartment pharmacokinetic model</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>It is late December, the office is quiet on the eve of the annual ritual of everyone vanishing into their own personal end of year vacations, and I have time to breathe and – heaven forfend – to think. As such, and in the spirit of trying to do something professionally useful during this strangely empty moment of the year, it is time for another post in my irregular and unsystematic <a href="http://blog.djnavarro.net/category/pharmacometrics">series on pharmacometrics</a>. Does anyone except Danielle care? Unlikely. Will it make the world a better place? Absolutely not. But neither of these has ever been a governing consideration on this blog.<sup>1</sup></p>
<section id="the-matter-at-hand" class="level2">
<h2 class="anchored" data-anchor-id="the-matter-at-hand">The matter at hand</h2>
<p>The topic for today’s installment in Danielle’s ongoing public display of blog-based narcissism is deriving closed-form solutions for two-compartment pharmacokinetic (PK) models. There is absolutely nothing in the post that is not already extremely well known by pharmacometricians, and the scope of the post is somewhat narrower than the full range of two-compartment PK models. I’m mostly going to consider this model:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/2-cpt-phys.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%"></p>
</figure>
</div>
<p>Here we have the garden-variety two-compartment model with first-order absorption and first-order elimination. In the usual application of this model we have a drug that is administered orally. The drug is absorbed gradually from the gut into systemic circulation (central compartment), and is gradually eliminated from the body, again from the central compartment. During the time that the drug is within the body, it does not stay solely within the blood: it is distributed through various other tissues, and so the volume over which it is distributed changes over time. In a two-compartment model the complexity of this is simplified: the drug concentration in a typical study is measured only in the central compartment (e.g., by measuring plasma concentration), and so the model does not concern itself with the fine grained details of what is happening elsewhere in the body. It is often (not always) sufficient to assume that the “other” tissues in which the drug distributes comprise a single “peripheral compartment”.</p>
<p>In order to attach physiologically meaningful interpretation to this model, it’s typically parameterised in terms of the following five quantities:</p>
<ul>
<li>Volume of distribution for the central compartment <img src="https://latex.codecogs.com/png.latex?V_c"> refers to the volume over which the drug amount in the central compartment is assumed to be evenly distributed. It’s a fictional quantity – and can take on values that are much larger than the actual volume of blood or plasma for a variety of reasons – but it’s a convenient one.</li>
<li>Volume of distribution for the peripheral compartment <img src="https://latex.codecogs.com/png.latex?V_p">: as above but for the peripheral compartment</li>
<li>Clearance <img src="https://latex.codecogs.com/png.latex?Cl"> is the volume within the central compartment that can be completely cleared of drug per unit time, and governs the elimination of drug from the body</li>
<li>Intercompartmental clearance <img src="https://latex.codecogs.com/png.latex?Q"> governs the exchange of drug between the central and peripheral compartments</li>
<li>The absorption rate constant <img src="https://latex.codecogs.com/png.latex?k_a"> is a scaling factor used to describe the proportion of the drug amount currently in the gut that is transferred into systemic circulation at any moment in time<sup>2</sup></li>
</ul>
<p>This model is probably the one I come across most in my everyday work, and these are the parameters used to interpret model behaviour. However, it’s not the most convenient form to use when working with the model mathematically, so let’s rewrite it in terms that are more convenient.</p>
</section>
<section id="a-two-compartment-pharmacokinetic-model" class="level2">
<h2 class="anchored" data-anchor-id="a-two-compartment-pharmacokinetic-model">A two compartment pharmacokinetic model</h2>
<p>As in every mathematical fairy tale and religious text, we begin with some notation. The state of our system will at time <img src="https://latex.codecogs.com/png.latex?t"> be described in terms of three quantities: <img src="https://latex.codecogs.com/png.latex?x_%7B0t%7D"> is the drug amount in the depot compartment (generally the gut) at time <img src="https://latex.codecogs.com/png.latex?t"> units post-dose, <img src="https://latex.codecogs.com/png.latex?x_%7B1t%7D"> is the amount in the central compartment, and <img src="https://latex.codecogs.com/png.latex?x_%7B2t%7D"> is the amount in the peripheral compartment. Our state vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t%20%5Cin%20%5Cmathbb%7BR%7D%5E3_%7B%5Cgeq%200%7D"> is the collection of these three things, and if you care deeply about such matters you might wish to assert that the drug amounts are described by a function <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D(t)"> that takes on such values:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D(t)%20=%20%5Cmathbf%7Bx%7D_t%20=%20(x_%7B0t%7D,%20x_%7B1t%7D,%20x_%7B2t%7D)%0A"> In an act of perversity, however, I’m not going to use the functional notation <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D(t)"> here. I’m simply going to talk about the state vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> because honestly no-one wants to see what this post would look like if I added all those extra parentheses.</p>
<p>Having established this notation and – in a Barbie-like state of best-day-ever excitement – we can now describe how the state vector changes over time using a system of ordinary differential equations (ODEs):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B0t%7D%20&amp;%20=%20&amp;%20-k_%7B01%7D%20x_%7B0t%7D%20%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B1t%7D%20&amp;%20=%20&amp;%20k_%7B01%7D%20x_%7B0t%7D%20-%20(k_%7B12%7D%20+%20k_%7B10%7D)%20x_%7B1t%7D%20+%20k_%7B21%7D%20x_%7B2t%7D%20%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B2t%7D%20&amp;%20=%20&amp;%20k_%7B12%7D%20x_%7B1t%7D%20-%20k_%7B21%7D%20x_%7B2t%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Here we have four rate constant parameters (<img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">), each of which describes the instantaneous transfer of drug quantity from one compartment to another: the notational convention is to refer to the source compartment as the first subscript and the destination compartment as the second, so for instance <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D"> is the rate constant associated with the movement of drug from the central compartment (compartment 1) to the peripheral compartment (compartment 2). In this notation the “zero-th” compartment is an abstraction: <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D"> describes absorption (generally from the gut) and <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D"> describes elimination (generally to urine).<sup>3</sup></p>
<p>Schematically, the exchange of drug amounts between the compartments in this formalism can be visualised in the following way:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/2-cpt-micro.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%"></p>
</figure>
</div>
<p>Structurally you can see it’s the same as the model described at the start, and it’s not at all difficult to convert between the physiologically-interpretable parameterisation and the mathematically-convenient parameterisation using these rate constants.<sup>4</sup> <sup>5</sup></p>
<p>In matrix form we can express the ODE system as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdt%7D%20%5Cmathbf%7Bx%7D_t%20=%20%5Cmathbf%7BK%7D%20%5Cmathbf%7Bx%7D_t%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BK%7D%20=%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bccc%7D%0A-k_%7B01%7D%20&amp;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20&amp;%20%20%20%20%20%20%200%20%5C%5C%0Ak_%7B01%7D%20&amp;%20-k_%7B12%7D%20-%20k_%7B10%7D%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%200%20&amp;%20%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>and our initial conditions for a dose administered orally at time <img src="https://latex.codecogs.com/png.latex?t=0"> are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_%7B0%7D%20=%20(%5Cmbox%7Bdose%7D,%200,%200)%0A"></p>
<p>This particular parameterisation is most helpful when we want to think about the underlying ODE system, and it’s the one I’ll use for deriving solutions in this post, but when we want to interpret the models we usually rewrite it in terms of the parameters I described at the start of the post.<sup>6</sup></p>
</section>
<section id="solving-linear-time-homogeneous-ode-systems" class="level2">
<h2 class="anchored" data-anchor-id="solving-linear-time-homogeneous-ode-systems">Solving linear time-homogeneous ODE systems</h2>
<p>So now we get to the part of the post where the mathematics begins to intrude. Per our model, we have a linear time-homogeneous ODE system that we want to solve, in the sense that we would like a nice algebraic expression that describes the state <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> at time <img src="https://latex.codecogs.com/png.latex?t">. Of course, I want all sorts of things in life that I can’t obtain without suffering, and this is no exception. If you want to solve a linear homogeneous ODE, you’re going to have to work with matrix exponentials, and with matrix exponentials comes pain. Especially if, like me, you vaguely remember matrix exponentials from an undergrad maths class you took 30 years ago and you actually haven’t needed to use them for anything much in the decades that followed.</p>
<p>Perhaps a small “refresher” will help us all then. The <a href="https://en.wikipedia.org/wiki/Matrix_exponential">matrix exponential</a> <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D"> of a matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is a quantity that is broadly analogous to its scalar equivalent <img src="https://latex.codecogs.com/png.latex?e%5Ek"> for scalar value <img src="https://latex.codecogs.com/png.latex?k">, and has similar (but not identical) properties. In the same way that we can define a scalar exponential <img src="https://latex.codecogs.com/png.latex?e%5Ek"> via a <a href="https://en.wikipedia.org/wiki/Taylor_series#List_of_Maclaurin_series_of_some_common_functions">series expansion</a>, the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D"> is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ae%5E%7B%5Cmathbf%7BK%7D%7D%20&amp;=&amp;%20%5Cmathbf%7BI%7D%20+%20%5Cmathbf%7BK%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cmathbf%7BK%7D%5E2%20+%20%5Cfrac%7B1%7D%7B6%7D%20%5Cmathbf%7BK%7D%5E3%20+%20%5Cldots%20+%20%5Cfrac%7B1%7D%7Bj!%7D%20%5Cmathbf%7BK%7D%5Ej%20+%20%5Cldots%20%5C%5C%0A&amp;=&amp;%20%5Csum_%7Bj%20=%200%7D%5E%5Cinfty%20%5Cfrac%7B1%7D%7Bj!%7D%20%5Cmathbf%7BK%7D%5Ej%0A%5Cend%7Barray%7D%0A"></p>
<p>Some handy properties for matrix exponentials, most of which we’ll need:</p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is a matrix of zeros, <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D%20=%201"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is the identity <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BI%7D">, <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D%20=%20e%5E%7B%5Cmathbf%7BI%7D%7D%20=%20%5Cmathbf%7BI%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?t"> is a scalar, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20e%5Et%20e%5E%5Cmathbf%7BK%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?m"> and <img src="https://latex.codecogs.com/png.latex?n"> are scalars, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bm%5Cmathbf%7BK%7D%7D%20e%5E%7Bn%20%5Cmathbf%7BK%7D%7D%20=%20e%5E%7B(m%20+%20n)%5Cmathbf%7BK%7D%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BD%7D%20=%20%5Cmbox%7Bdiag%7D(d_1,%20d_2,%20%5Cldots)"> is a diagonal matrix, <img src="https://latex.codecogs.com/png.latex?e%5E%5Cmathbf%7BD%7D"> is the diagonal matrix <img src="https://latex.codecogs.com/png.latex?e%5E%5Cmathbf%7BD%7D%20=%20%5Cmbox%7Bdiag%7D(e%5E%7Bd_1%7D,%20e%5E%7Bd_2%7D,%20%5Cldots)"></li>
<li>The derivative is analogous to the scalar case, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%7D%7Bdt%7D%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BK%7D%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D"></li>
<li>For an invertible matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BH%7D"> such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BHMH%5E%7B-1%7D%7D">, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BH%7D%20e%5E%7Bt%20%5Cmathbf%7BM%7D%7D%20%5Cmathbf%7BH%5E%7B-1%7D%7D"></li>
</ul>
<p>On the basis of the derivative property above, it’s immediately clear that the solution to our ODE system is going to take the following form:<sup>7</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_t%20=%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5Cmathbf%7Bx%7D_0%0A"></p>
<p>Seeing that this is the form of the solution is the easy part. The hard part, of course, is finding the expression that describes the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D">. Fortunately, this is something that cleverer people than I have already thought about, and in any case the properties of matrix exponentials suggest a general strategy for such problems:</p>
<ol type="1">
<li>Find the eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda_1,%20%5Clambda_2,%20%5Cldots">, for the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"></li>
<li>Find the corresponding eigenvectors <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bu%7D_1,%20%5Cmathbf%7Bu%7D_2,%20%5Cldots"></li>
<li>Construct the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%20=%20%5B%5Cmathbf%7Bu%7D_1,%20%5Cmathbf%7Bu%7D_2,%20%5Cldots%5D"> with the eigenvectors as columns, and diagonal matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> whose diagonals correspond to eigenvalues, and invert it to obtain <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D"></li>
<li>Noting that we have the eigendecomposition <img src="https://latex.codecogs.com/png.latex?K%20=%20%5Cmathbf%7BU%20%5CLambda%20U%5E%7B-1%7D%7D">, rewrite <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BU%7D%20e%5E%7Bt%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%5E%7B-1%7D%7D"></li>
<li>Since <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> is diagonal, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7B%5CLambda%7D%7D"> is straightforward, and we can calculate <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D"> by matrix multiplication</li>
</ol>
<p>Okay then. Much like the Cylons, we have a Plan.<sup>8</sup></p>
</section>
<section id="solve-a-simpler-problem" class="level2">
<h2 class="anchored" data-anchor-id="solve-a-simpler-problem">Solve a simpler problem</h2>
<p>As Jane Austen famously said, “it is a truth universally acknowledged, that a woman in possession of a three-state ODE system must be in want of a two-state ODE that is easier to solve”. And so it is here. Rather than try to work with the model as described, I’ll start with a simpler model (one that is itself quite useful) that will be easier to solve, and whose solution will make it massively easier to solve the full system. And so it is that our first step will be to retreat from a two-compartment model with oral dosing to a two-compartment model with bolus IV dosing.</p>
<p>In most cases I’ve come across in my pharmacometric work so far, the drug we’re modelling is orally administered, and the model with first-order absorption into the central compartment described above (or some variation thereof) is the one we want to use. However, it’s convenient to start with a simpler case where the drug is administered by a bolus IV dose, and of course this scenario does arise in real life. In this scenario there is no depot compartment, and entire dose appears in the central compartment at <img src="https://latex.codecogs.com/png.latex?t%20=%200">. Or, to frame it in technical terms, we have zero-order absorption into the central compartment rather than first-order absorption. Again assuming first-order elimination, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is now a simpler 2x2 matrix.<sup>9</sup> In this situation our state vector consists only of the central and peripheral compartments:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D(t)%20=%20%5Cmathbf%7Bx%7D_t%20=%20(x_%7B1t%7D,%20x_%7B2t%7D)%0A"></p>
<p>Our state transition matrix is now this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BK%7D%20=%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>and our initial state at time <img src="https://latex.codecogs.com/png.latex?t=0"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_%7B0%7D%20=%20(%5Cmbox%7Bdose%7D,%200)%0A"></p>
<p>As before, our solution will be of the form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_t%20=%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5Cmathbf%7Bx%7D_0%0A"></p>
<p>and we can find this solution by following the general strategy outlined earlier. To that end, I’ll begin by finding the <a href="https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors">eigenvalues</a> <img src="https://latex.codecogs.com/png.latex?%5Clambda"> that satisfy <img src="https://latex.codecogs.com/png.latex?%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20=%200">. Well, technically speaking, I’ll begin by taking a little trip down memory lane to 1994 and my first-year undergraduate maths classes, but I’ll spare you that traumatic recollection and jump straight to the derivation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%0A&amp;=&amp;%20%5Cdet%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20-%20%5Clambda%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;=&amp;%20(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)(-k_%7B21%7D%20-%20%5Clambda)%20-%20k_%7B12%7D%20k_%7B21%7D%20%5C%5C%0A&amp;=&amp;%20%5Clambda%5E2%20+%20(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%20%5Clambda%20+%20k_%7B10%7D%20k_%7B21%7D%0A%5Cend%7Barray%7D%0A"> The final expression doesn’t factorise into anything very pretty, so it’s conventional to simply define new variables <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> such that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Calpha%20%5Cbeta%20&amp;%20=%20&amp;%20k_%7B10%7D%20k_%7B21%7D%20%5C%5C%0A%5Calpha%20+%20%5Cbeta%20&amp;%20=%20&amp;%20k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>when written in these new variables, which were constructed <em>specifically</em> to make an expression that factorises easily, the left hand side of our characteristic equation turns out to be shockingly simple to factorise:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20=%20%5Clambda%5E2%20+%20(%5Calpha%20+%20%5Cbeta)%20%5Clambda%20+%20%5Calpha%20%5Cbeta%20=%20(%5Clambda%20+%20%5Calpha)(%5Clambda%20+%20%5Cbeta)%0A"></p>
<p>Wonders will never cease. In any case, when written in these terms, our two eigenvalues are <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Cbeta">. This is – of course – a pure notational convenience since <img src="https://latex.codecogs.com/png.latex?-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?-%5Cbeta"> were defined such that they would end up being the eigenvalues, but it’s worth mentioning this because these are the exact variables that show up in various software systems (e.g., <a href="https://www.iconplc.com/solutions/technologies/nonmem">NONMEM</a>) and textbooks. Nevertheless, it’s still no good to us if we don’t go through tedious business of applying the quadratic formula to express <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> in terms of <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">. So here it is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Calpha,%20%5Cbeta%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B(%5Calpha%20+%20%5Cbeta)%20%5Cpm%20%5Csqrt%7B(%5Calpha%20+%20%5Cbeta)%5E2%20-%204%5Calpha%20%5Cbeta%7D%7D%7B2%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%20%5Cpm%20%5Csqrt%7B(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%5E2%20-%204k_%7B10%7D%20k_%7B21%7D%7D%7D%7B2%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Now that we have the eigenvalues, we proceed to the eigenvectors. For each eigenvalue <img src="https://latex.codecogs.com/png.latex?%5Clambda"> there is a corresponding eigenvector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bu%7D"> such that <img src="https://latex.codecogs.com/png.latex?(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20%5Cmathbf%7Bu%7D%20=%20%5Cmathbf%7B0%7D">. In our case:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20-%20%5Clambda%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bc%7D%0Au_1%20%5C%5C%0Au_2%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A=%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bc%7D%0A0%20%5C%5C%0A0%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>If this were a bigger matrix we’d probably use <a href="https://en.wikipedia.org/wiki/Gaussian_elimination">Gauss-Jordan elimination</a> to construct the row-reduced echelon form (RREF) and then read off the solutions using the RREF. That’s kind of overkill in this case because – let’s be brutally honest here – you can <em>look</em> at the bottom row and guess that the solution is going to have the form <img src="https://latex.codecogs.com/png.latex?u_1%20=%20k_%7B21%7D%20+%20%5Clambda">, <img src="https://latex.codecogs.com/png.latex?u_2%20=%20k_%7B12%7D">.</p>
<p>To convince ourselves that this is the correct solution, we’ll substitute it into both rows and see that, shockingly, we end up with zero. We’ll start with the bottom row because that was the one we used to guess the solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ak_%7B12%7D%20u_1%20+%20(-k_%7B21%7D%20-%20%5Clambda)%20u_2%0A&amp;=&amp;%20k_%7B12%7D%20(k_%7B21%7D%20+%20%5Clambda)%20+%20(-k_%7B21%7D%20-%20%5Clambda)%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%200%0A%5Cend%7Barray%7D%0A"></p>
<p>I mean. Of course that was going to work. We literally chose expressions for <img src="https://latex.codecogs.com/png.latex?u_1"> and <img src="https://latex.codecogs.com/png.latex?u_2"> that would cause the two terms to cancel out. The actual test of our guess arrives when we try the same thing with the top row. This time it’s takes a little more effort:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)%20u_1%20+%20k_%7B21%7D%20u_2%0A&amp;=&amp;%20(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)%20(k_%7B21%7D%20+%20%5Clambda)%20+%20k_%7B21%7D%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%20-k_%7B12%7D%20k_%7B21%7D%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20%5Clambda%20k_%7B21%7D%20-%20k_%7B12%7D%20%5Clambda%20-%20k_%7B10%7D%20%5Clambda%20-%20%5Clambda%5E2%20+%20k_%7B21%7D%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20%5Clambda%20k_%7B21%7D%20-%20k_%7B12%7D%20%5Clambda%20-%20k_%7B10%7D%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20(k_%7B21%7D%20+%20k_%7B12%7D%20+%20k_%7B10%7D)%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20%5Calpha%20%5Cbeta%20-%20(%5Calpha%20+%20%5Cbeta)%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20(%5Clambda%20+%20%5Calpha)%20(%5Clambda%20+%20%5Cbeta)%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>Once we have arrived at this expression, it’s clear that our guess is correct. The only two values that <img src="https://latex.codecogs.com/png.latex?%5Clambda"> can take are the eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Cbeta">, and both of those yield a value of zero. So our guess was indeed correct and we have our eigenvectors. Awesome.<sup>10</sup></p>
<p>Now that we are in possession of eigenvalues and eigenvectors we can construct the matrices <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> that will give us the <a href="https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix">eigendecomposition</a> <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BU%20%5CLambda%20U%7D%5E%7B-1%7D">. Here they are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7B%5CLambda%7D%20&amp;=&amp;%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-%5Calpha%20&amp;%200%20%5C%5C%0A0%20&amp;%20-%5Cbeta%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A%5Cmathbf%7BU%7D%20&amp;=&amp;%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ak_%7B21%7D%20-%5Calpha%20&amp;%20k_%7B21%7D%20-%20%5Cbeta%20%5C%5C%0Ak_%7B12%7D%20&amp;%20k_%7B12%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>The last thing we need is the inverse <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D">, which is also fairly easy to derive. It’s a 2x2 matrix, after all, and inverting a 2x2 matrix isn’t even undergrad level maths: they taught us that one in high school. Noting first that determinant <img src="https://latex.codecogs.com/png.latex?%5Cdet%20%5Cmathbf%7BU%7D"> is as follows,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdet%20%5Cmathbf%7BU%7D%20=%20(k_%7B21%7D%20-%20%5Calpha)%20k_%7B12%7D%20-%20k_%7B12%7D%20(k_%7B21%7D%20-%20%5Cbeta)%20=%20k_%7B12%7D%20(%5Cbeta%20-%20%5Calpha)%0A"></p>
<p>we then write down the inverse as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BU%7D%5E%7B-1%7D%20=%0A%5Cfrac%7B1%7D%7Bk_%7B12%7D(%5Cbeta%20-%20%5Calpha)%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ak_%7B12%7D%20&amp;%20%5Cbeta%20-%20k_%7B21%7D%20%5C%5C%0A-k_%7B12%7D%20&amp;%20k_%7B21%7D%20-%5Calpha%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>So now we have <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D">, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D">, and we could proceed straight to doing the matrix multiplication but for the sake of what is left of my sanity I’m going to simplify my notation a bit and define two new constants <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Aa%20&amp;%20=%20&amp;%20(k_%7B21%7D%20-%20%5Calpha)%20/%20k_%7B12%7D%20%5C%5C%0Ab%20&amp;%20=%20&amp;%20(k_%7B21%7D%20-%20%5Cbeta)%20/%20k_%7B12%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>With the help of these two constant, the expressions for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D"> are now considerably less unpleasant on the eye:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7BU%7D%20&amp;=&amp;%0Ak_%7B12%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20&amp;%20b%20%5C%5C%0A1%20&amp;%201%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A%5Cmathbf%7BU%7D%5E%7B-1%7D%20&amp;=&amp;%0A%5Cdisplaystyle%5Cfrac%7B1%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>Now that we have the eigendecomposition <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BU%20%5CLambda%20U%7D%5E%7B-1%7D">, we can solve our matrix exponential. Using the last of the matrix exponential properties in the potted list I provided earlier in the pose, we can express the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%20%5Cmathbf%7BK%7D%7D"> as the matrix product <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%20e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%7D%5E%7B-1%7D">. Conveniently, <img src="https://latex.codecogs.com/png.latex?%5CLambda"> is a diagonal matrix which makes <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D"> trivially easy, and so we obtain this:<sup>11</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ae%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20&amp;%20=%20&amp;%0A%5Cmathbf%7BU%7D%20e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%7D%5E%7B-1%7D%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20&amp;%20b%20%5C%5C%0A1%20&amp;%201%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ae%5E%7B-%5Calpha%20t%7D%20&amp;%200%20%5C%5C%0A0%20&amp;%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20e%5E%7B-%5Calpha%20t%7D%20&amp;%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5C%5C%0Ae%5E%7B-%5Calpha%20t%7D%20&amp;%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;=&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A(a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20-ab%20(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20%5C%5C%0A-(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20(-b%20e%5E%7B-%5Calpha%20t%7D%20+%20a%20e%5E%7B-%5Cbeta%20t%7D)%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>So now we can turn to our solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7Bx%7D_t%20&amp;%20=%20&amp;%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5C%20%5Cmathbf%7Bx%7D_0%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A(a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20-ab%20(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20%5C%5C%0A-(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20(-b%20e%5E%7B-%5Calpha%20t%7D%20+%20a%20e%5E%7B-%5Cbeta%20t%7D)%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A%5Cmbox%7Bdose%7D%20%5C%5C%0A0%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5C%5C%0Ae%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"> Recalling that the central compartment corresponds to the first element of the state vector (top row), we can focus on this and compute the drug amount (not concentration) in the central compartment at time <img src="https://latex.codecogs.com/png.latex?t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ax_%7B1t%7D%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Ctimes%20%5Cleft(%20%20a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Ctimes%20%5Cleft(%20%5Cleft(%5Cfrac%7Bk_%7B21%7D%20-%20%5Calpha%7D%7Bk_%7B12%7D%7D%20%5Cright)%20%20e%5E%7B-%5Calpha%20t%7D%20-%20%5Cleft(%5Cfrac%7Bk_%7B21%7D%20-%20%5Cbeta%7D%7Bk_%7B12%7D%7D%20%5Cright)%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cleft(%20%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5Calpha%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5Cright)%20e%5E%7B-%5Calpha%20t%7D%20-%20%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5Cbeta%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5Cright)%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cleft(A%20e%5E%7B-%5Calpha%20t%7D%20+%20%20B%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%0A%5Cend%7Barray%7D%0A"></p>
<p>and thus we have a model that can be expressed as a sum of two exponentials where:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0AA%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Calpha%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5C%5C%20%5C%5C%0AB%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Cbeta%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>If I’m being completely honest, it’s precisely this biexponential<sup>12</sup> form that motivated me to suck it up and derive the solution myself. One of the textbooks I was reading at work – in order to familiarise myself with some of the pharmacokinetic background that I need – introduced the two-compartment model by defining it formally in terms of this biexponential expression,<sup>13</sup> but then drew this model schematically using a state-transition diagram similar to the ones I used at the start of this post. I was <em>baffled</em>, because it was not at all obvious to me from inspection how the diagram and the equation were linked, and the book did not present a derivation.</p>
<p>So yes, as with most things I do on this blog, my true motivation was in fact pig-headed stubbornness. I’m terribly bad at taking certain things on faith, and felt a deep – and let’s be honest, pathological – need to derive the solution myself. It is the very essence of spite-driven mathematics.</p>
</section>
<section id="returning-to-the-original-problem" class="level2">
<h2 class="anchored" data-anchor-id="returning-to-the-original-problem">Returning to the original problem</h2>
<p>Now that we have a closed form solution for a two-compartment model with zero-order absorption into the central compartment (i.e., bolus IV dosing), we can return to the oral dosing model (assuming first-order absorption) that we started with. It’s a relatively straightforward solution at this point since we have a continuous influx from the gut, so we can convolve this time-dependent influx with the zero-order solution. Since I’m assuming bioavailability <img src="https://latex.codecogs.com/png.latex?F%20=%201"> for this post<sup>14</sup> I’ll happily act as if the drug amount arriving in the central compartment from the gut at time <img src="https://latex.codecogs.com/png.latex?t"> is the same as the amount that left the gut at time <img src="https://latex.codecogs.com/png.latex?t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A-%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B0t%7D%20=%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20e%5E%7B-k_%7B01%7D%20t%7D%0A"></p>
<p>Thus the drug amount in the central compartment at time <img src="https://latex.codecogs.com/png.latex?t"> is given:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ax_%7B1t%7D%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cdisplaystyle%5Cint_0%5Et%20e%5E%7B-k_%7B01%7D%20u%7D%20%5Cleft(%20A%20e%5E%7B-%5Calpha%20(t-u)%7D%20+%20B%20e%5E%7B-%5Cbeta%20(t-u)%7D%20%5Cright)%20%5C%20du%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cdisplaystyle%5Cint_0%5Et%20A%20e%5E%7B-%5Calpha%20(t-u)%20-k_%7B01%7D%20u%7D%20+%20B%20e%5E%7B-%5Cbeta%20(t-u)%20-k_%7B01%7D%20u%7D%20%20%5C%20du%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cleft(%20Ae%5E%7B-%5Calpha%20t%7D%20%5Cleft%5B%20%5Cfrac%7B1%7D%7B%5Calpha%20-%20k_%7B01%7D%7D%20e%5E%7B(%5Calpha%20-%20k_%7B01%7D)u%7D%20%5Cright%5D_0%5Et%20+%20Be%5E%7B-%5Cbeta%20t%7D%20%5Cleft%5B%20%5Cfrac%7B1%7D%7B%5Cbeta%20-%20k_%7B01%7D%7D%20e%5E%7B(%5Cbeta%20-%20k_%7B01%7D)u%7D%20%5Cright%5D_0%5Et%20%20%20%5Cright)%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cleft(%20%5Cdisplaystyle%5Cfrac%7BAe%5E%7B-%5Calpha%20t%7D%20(e%5E%7B(%5Calpha%20-%20k_%7B01%7D)t%7D%20-%201)%7D%7B%5Calpha%20-%20k_%7B01%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BBe%5E%7B-%5Cbeta%20t%7D%20(e%5E%7B(%5Cbeta%20-%20k_%7B01%7D)t%7D%20-%201)%7D%7B%5Cbeta%20-%20k_%7B01%7D%7D%20%20%20%5Cright)%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>And just like that we have a solution.</p>
</section>
<section id="does-it-work" class="level2">
<h2 class="anchored" data-anchor-id="does-it-work">Does it work?</h2>
<p>I’m not so arrogant as to simply assume I got it right. It’s reassuring that all the expressions that came out along the way bear a striking resemblance to those I’ve seen in the textbooks, but I still want to compare to a numerical method that I trust. In an earlier post I talked about <a href="../../posts/2023-08-28_rxode2/">using the rxode2 package to simulate from pharmacokinetic models</a>, and while I could certainly use some other tool for this purpose (e.g., the deSolve package would be totally fine here) I might as well use rxode2 here as well. Here’s an R function that solves the problem numerically:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">numeric_solution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(k01, k12, k21, k10, time) {</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rxode2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxode</span>({</span>
<span id="cb1-4">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A0) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A0;</span>
<span id="cb1-5">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k10) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k21 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A2;</span>
<span id="cb1-6">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A2;</span>
<span id="cb1-7">  })</span>
<span id="cb1-8">  inits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-9">  </span>
<span id="cb1-10">  ev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rxode2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eventTable</span>()</span>
<span id="cb1-11">  ev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add.sampling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time)</span>
<span id="cb1-12">  pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k01 =</span> k01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k12 =</span> k12, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k21 =</span> k21, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k10 =</span> k10)</span>
<span id="cb1-13">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(pars, ev, inits)</span>
<span id="cb1-14">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(dat)</span>
<span id="cb1-15">  </span>
<span id="cb1-16">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time, </span>
<span id="cb1-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>A1, </span>
<span id="cb1-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solution =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span></span>
<span id="cb1-20">  )</span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(out)</span>
<span id="cb1-22">}</span></code></pre></div>
</div>
<p>Here’s the corresponding function implementing the analytic solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">analytic_solution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(k01, k12, k21, k10, time) {</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  ks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k21</span>
<span id="cb2-4">  alpha <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (ks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(ks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k21))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-5">  beta  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (ks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(ks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k21))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-6">  </span>
<span id="cb2-7">  A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta)</span>
<span id="cb2-8">  B <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(beta <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta) </span>
<span id="cb2-9">  </span>
<span id="cb2-10">  A_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb2-11">  B_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> B <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb2-12"></span>
<span id="cb2-13">  A_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)  </span>
<span id="cb2-14">  B_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> B_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)</span>
<span id="cb2-15">  </span>
<span id="cb2-16">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time, </span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> A_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B_term, </span>
<span id="cb2-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solution =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analytic"</span></span>
<span id="cb2-20">  )</span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(out)</span>
<span id="cb2-22">}</span></code></pre></div>
</div>
<p>Now let’s compare the two:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">k01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-2">k12 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-3">k21 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-4">k10 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-5">time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">dat_numb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb3-8">dat_anal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analytic_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb3-9">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(dat_numb, dat_anal)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, amount, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> solution)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>solution) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Looks good to me? The differences between the two are small enough that we can attribute them to simulation precision etc…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(dat_numb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dat_anal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.920889e-08</code></pre>
</div>
</div>
<p>…and yes, you get similar agreement between the two versions<sup>15</sup> if you feed in other parameter values. That’s good enough for me.</p>
</section>
<section id="was-it-worth-it" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="was-it-worth-it">Was it worth it?</h2>
<p>And so we come to the end. The problem is solved, Danielle has convinced herself that she understands the formalism properly, and a great many pieces of scrap paper were sacrificed to the dark gods of mathematics in the process. Was it all worthwhile? I mean… in one sense, probably not. The analytic solutions I’ve derived here are <em>highly</em> unoriginal, and of course they have already been implemented and incorporated into standard tools used in pharmacometric modelling. Nothing new has been added to the world by me doing this. But also, it’s worth highlighting that it was a <em>very</em> good thing that these solutions exist thanks to the hard work of those that have come before us,<sup>16</sup> because they do make a massive difference in terms of computational performance:</p>
<div class="cell column-page-right">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">microbenchmark<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric_solution</span>(k01, k12, k21, k10, time),</span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analytic_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb6-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: microseconds
                                        expr       min         lq       mean     median         uq      max neval
  numeric_solution(k01, k12, k21, k10, time) 39558.780 45899.2650 51754.4014 49391.4505 55292.3945 92581.17   100
 analytic_solution(k01, k12, k21, k10, time)   137.652   170.0235   314.0824   237.3915   313.8525  5412.48   100</code></pre>
</div>
</div>
<p>The units here are microseconds, so yeah okay they’re both fast. They’re both fast enough that I have no reason at all to care when running a small simulation: <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta%E2%80%93Fehlberg_method">RK45</a> and <a href="https://en.wikipedia.org/wiki/Backward_differentiation_formula">BDF</a> exist for a <em>reason</em>, and as Dan Simpson reminded me the other day, generations of numerical analysts have suffered so that I don’t have to.</p>
<p>However, a speedup of a this magnitude makes a very big difference in the context of model fitting. Even my lazy R implementation of the analytic solution is hundreds of times faster than the very efficient numerical solution implemented by rxode2, and of course the speed up would be even more extreme if I could be bothered writing it in a compiled language like C++ or Rust or whatever. But of course I have no need to do that because that’s already been done in software. All I really care about for this post is deriving the solution and verifying that it works.</p>
<p>I’ve suffered enough.</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>Open access resources:</p>
<ul>
<li>Alex Best has an open textbook <em>Introducing Mathematical Biology</em>, and chapter 20 derives the <a href="https://sheffield.pressbooks.pub/introducingmathematicalbiology/chapter/a-two-compartment-bolus-model/">solution for the two-compartment bolus IV model</a>. It doesn’t go into quite as much detail as I do in this post (it spares the reader from the pain of matrix exponentials, for example) but I found it very helpful.</li>
<li>Jiří Lebl and Trefor Bazett have an open resouce <em>Introduction to Differential Equations</em> whose section on <a href="https://web.uvic.ca/~tbazett/diffyqs/sec_matexp.html">matrix exponentials</a> I found useful when trying to “refresh my memory” (i.e., learn something that I kind of ignored 30 years ago when it came up in my undergrad maths classes). Relatedly, the list of properties for matrix exponentials is mostly sourced from the wikipedia page on <a href="https://en.wikipedia.org/wiki/Matrix_exponential">matrix exponentials</a>.</li>
</ul>
<p>Other resources:</p>
<ul>
<li>It’s not open access, and it doesn’t dive into the derivations, but one of the books I’ve been reading at work is <a href="https://www.routledge.com/Pharmacokinetic-and-Pharmacodynamic-Data-Analysis-Concepts-and-Applications/Gabrielsson-Weiner/p/book/9789198299106">Pharmacokinetic and Pharmacodynamic Data Analysis (5th ed)</a> by Johan Gabrielsson and Daniel Weiner: chapter 2 presents the bi-exponential model using the “macro” parameters (<img src="https://latex.codecogs.com/png.latex?A">, <img src="https://latex.codecogs.com/png.latex?B">, <img src="https://latex.codecogs.com/png.latex?%5Calpha">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta">) and the formulas for converting to the “micro” parameters (the fractional rate constants <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">), along with the more general scientific considerations around the model.</li>
<li>The other book I’m reading at work is <a href="https://onlinelibrary.wiley.com/doi/book/10.1002/9781118784860">Introduction to Population Pharmacokinetic / Pharmacodynamic Analysis with Nonlinear Mixed Effects Models</a> by Joel S. Owen and Jill Fiedler-Kelly. It provides a good coverage of compartmental models in the context of the NONMEM software package, and is somewhat relevant insofar as the different parameterisations (i.e., TRANS subroutines<sup>17</sup>) for the ADVAN3 and ADVAN4 subroutines appear in this post (and make more sense to me now that I’ve derived the solutions).</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>If she were to only write posts when she thought someone cared or when it would somehow improve the state of world affairs, she’d never write anything at all. No, she writes blog posts for the same reason twinks make sex tapes in senate hearing rooms: for the pure and unsullied chaos of the thing itself.↩︎</p></li>
<li id="fn2"><p>This is of course not quite true: for simplicity I’m not considering <a href="https://en.wikipedia.org/wiki/Bioavailability">bioavailability</a> in this post, nor am I considering lag time. I’m certainly not considering transit compartments and the like. The focus of the post is about the ODE system used to model what happens to the drug once it arrives in systemic circulation.↩︎</p></li>
<li id="fn3"><p>By convention we also don’t count the “depot” compartment (usually the gut) as one of the compartments: although the state <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> is a vector of length 3, only two of the compartments (central and peripheral) are used to model the disposition (a term of art referring to both “distribution” and “elimination”) of the drug, so this is a two-compartment model.↩︎</p></li>
<li id="fn4"><p>Yes, I do realise that there are 4 rate constants and 5 physiological parameters. In the rate-constants version there would also be a fifth parameter: when fitting models we need a volumetric scaling parameter to convert between drug amount and drug concentration in the central compartment (where the concentration is typically measured), and as such we would include <img src="https://latex.codecogs.com/png.latex?V_c"> as a parameter in the rate-constant version too. I’ve omitted that in this post for the same reason I have ignored the bioavailability <img src="https://latex.codecogs.com/png.latex?F"> and the lag time to absorption: none of these parameters are super-relevant to solving the ODE. <img src="https://latex.codecogs.com/png.latex?V_c"> and <img src="https://latex.codecogs.com/png.latex?F"> are both scaling factors that multiply various terms by a constant factor, the lag-time is a shift parameter applied to <img src="https://latex.codecogs.com/png.latex?t">. None of them affect the general form of the solution, which is the thing I care about for the purposes of the post.↩︎</p></li>
<li id="fn5"><p>For example, to obtain the rate constants from the physiological parameters, we use <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D%20=%20Cl%20/%20V_c">, <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D%20=%20k_a">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D%20=%20Q/V_c">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D%20=%20Q/V_p">. It’s pretty similar going the other way.↩︎</p></li>
<li id="fn6"><p>In the Gabrielsson and Weiner textbook I’m reading at work, the parameterisation in terms of the fractional rate constants <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D"> and <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D"> is referred to as the “micro-” parameterisation, taking its name from the fact that the parameters describe the low-level operation of the ODE. This is in contrast to the “physiological” parameterisation in terms of <img src="https://latex.codecogs.com/png.latex?Cl">, <img src="https://latex.codecogs.com/png.latex?Q">, <img src="https://latex.codecogs.com/png.latex?V_c">, <img src="https://latex.codecogs.com/png.latex?V_p"> and <img src="https://latex.codecogs.com/png.latex?k_a"> that attempts to ascribe biological interpretation to the quantities. There is also a third “macro-” parameterisation in terms of <img src="https://latex.codecogs.com/png.latex?%5Calpha">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, <img src="https://latex.codecogs.com/png.latex?A">, and <img src="https://latex.codecogs.com/png.latex?B"> in which the parameters correspond to the coefficients of the concentration-time curve. As we’ll see later in the post, something like the “macro-” parameterisation you see in the textbooks emerges more or less naturally from the solution to the ODE system. The version that shows up in this post isn’t 100% identical to the version in the textbook (it’s off by a scaling factor because I don’t bother to account for <img src="https://latex.codecogs.com/png.latex?V_c"> or to fold the dose into the coefficients <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">) but honestly nobody should care about this because the macro-scale parameterisation doesn’t have any scientific meaning. It’s just a convenient description of a biexponential curve that makes you sound fancy at very boring parties when you tell people that the exponents are eigenvalues of the ODE state transition matrix.↩︎</p></li>
<li id="fn7"><p>Yes, I know. If I were being rigorous here I’d be precise about how I ended up with this as the exact expression, but I am tired and this is neither a journal article nor a textbook.↩︎</p></li>
<li id="fn8"><p>As has been so often noted in the BSG fandom, the Cylons quite clearly did not have a Plan. The writers did not ever think of a coherent Plan, and badly tried to retcon a Plan onto the plot in the TV movie by the same name. As <a href="https://www.latimes.com/entertainment/tv/la-et-hc-battlestar-galactica-reunion-atx-fest-20170611-story.html">Mike Moore</a> later explained, it was just something that looked cool in the opening credits. Much the same could be said for me pretending I ever have a plan when trying to derive something: the Plan is the thing you make up after the fact after you accidentally end up with the answer.↩︎</p></li>
<li id="fn9"><p>Formally speaking, I suppose I ought to be using subscripts to distinguish the 3x3 oral-dosing matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D_%7Bo%7D"> from the 2x2 bolus IV dosing matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D_%7Biv%7D">, but I’ll refrain from doing so in this post because it’s always clear from context which one I’m referring to.↩︎</p></li>
<li id="fn10"><p>For extremely specific values of “awesome”.↩︎</p></li>
<li id="fn11"><p>No I do not know why those stray <code>$$</code> fences are showing up in the rendered document. The equations are as-intended, but those should not be included in the output. I kinda think I might have broken the parser with my extremely ugly latex, which is normally a thing I only expect to get told at kink parties↩︎</p></li>
<li id="fn12"><p>Where of course a biexponential is a model that is sexually attracted to two exponents.↩︎</p></li>
<li id="fn13"><p>Technically – <em>per</em>. <em>my</em>. <em>earlier</em>. <em>footnote</em> – the one in the book differed from this one by a multiplicative scale factor since it was expressed in terms of concentrations, but whatever. That’s not germane to the post.↩︎</p></li>
<li id="fn14"><p>I mean, multiplying everything by <img src="https://latex.codecogs.com/png.latex?F"> is not exactly difficult right? If you can follow the rest of this solution you absolutely know how to generalise it to other values of <img src="https://latex.codecogs.com/png.latex?F">. But okay, if you care deeply about the niceties I will be like Bart and <a href="https://knowyourmeme.com/memes/say-the-line-bart">say the line</a>: without loss of generality, I set <img src="https://latex.codecogs.com/png.latex?F=1"> in this post. I’m sure that makes everyone happier.↩︎</p></li>
<li id="fn15"><p>Yes those variable names were deliberate. Of <em>course</em> those variable names were deliberate, whose blog do you think you are reading girl? Now, let’s review our safety tips for numbing lubric…↩︎</p></li>
<li id="fn16"><p>She pauses, wondering if this is the right moment to link to her favourite Lily Allen song? <a href="https://www.youtube.com/watch?v=fUYaosyR4bE">Yes, it is</a>.↩︎</p></li>
<li id="fn17"><p>Technically speaking they only count as trans subroutines in the UK legal system if they have a fortran recognition certificate and a permission slip from a doctor that despises them.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Closed Form Solutions for a Two-Compartment Pharmacokinetic
    Model},
  date = {2023-12-19},
  url = {https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Closed Form Solutions for a
Two-Compartment Pharmacokinetic Model.”</span> December 19, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models">https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models</a>.
</div></div></section></div> ]]></description>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/</guid>
  <pubDate>Mon, 18 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/gayatri-malhotra-4wF66_KWJxA-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Another year ends</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Content note: This post refers briefly to sexual assault</p>
</div>
</div>
<p>At the end of last year I wrote a wrap-up post listing the things I’d done during 2022, (<a href="../../posts/2022-12-26_strange-year/">A Very Strange Year</a>), and perhaps I’ll do another one for 2023. Much like last time, I’ll break with my usual policy on this blog and be a little more open about my personal life. If you read last year’s post, you’d know that 2022 was a grim year for me. Among other things I got raped,<sup>1</sup> and – in the world’s least-surprising plot twist – that messed me up rather badly. Losing my job at the end of 2022 didn’t help matters either.</p>
<p>What I didn’t anticipate when I wrote that post is that I was going to be unemployed for the majority of 2023. That was unpleasant. What I also didn’t see coming, is that rape trauma and unemployment interact with each other rather badly. On the one hand you start to feel worthless to society because you can’t find work, and on the other hand you also feel worthless as a human being because that’s what sexual assault does to you. So then you find yourself losing motivation to be upbeat and outgoing in the job search (and the job search gets worse), and you spend days on end lying in bed trying to believe you’re not a worthless person (and the trauma gets worse). Not exactly a deep insight, I’ll confess. Nevertheless, despite the triteness of the observation, the consequences are still real. Before the unemployment started to cut deep, I’d been making genuine progress in recovery from the sexual assault stuff, but after being out of work for a few months I went backwards.</p>
<p>Coming back from all that has been rough, and trying to work on recovery has been the dominant feature of 2023. I found work in the middle of the year, and am enjoying my new role. It’s nice to feel useful again. I’ve been doing better with the sexual assault fallout over the last few months too. I rarely get flashbacks these days, and I don’t fall to pieces (not often, anyway) whenever there’s another sexual assault story in the news. That’s real progress, and I’m proud of myself for that. But it’s still hard, and my self-confidence is in tatters. I’m working at it, but I suspect it will be a long and slow journey.</p>
<p>Anyway. Enough of that. Life is hard sometimes, and there’s not much to do except acknowledge from time to time that, yes, bad things happen. Let’s move on to other topics, shall we?</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/pastiche.png" class="img-fluid" alt="Abstract geometric patterns in red and orange"></p>
<section id="data-science-tech-and-statistics" class="level2">
<h2 class="anchored" data-anchor-id="data-science-tech-and-statistics">Data science, tech, and statistics</h2>
<p>Not surprisingly given the focus on data science on this blog, I wrote a number posts about R packages and related topics in tech during 2023. Several of them were posts where I chose an R package that I wanted to play around with and wrote about it:</p>
<ul>
<li><a href="../../posts/2023-05-22_santoku/">The santoku package</a></li>
<li><a href="../../posts/2023-06-12_pins-and-needles/">The pins package</a></li>
<li><a href="../../posts/2023-06-14_ansi-tricks/">The asciicast package</a></li>
<li><a href="../../posts/2023-06-16_tabulizer/">The tabulizer package</a></li>
</ul>
<p>Others were built around a specific topic, though still very heavily focused on workflows in R:</p>
<ul>
<li><a href="../../posts/2023-04-09_webr/">Running R on the web with webR</a></li>
<li><a href="../../posts/2023-08-08_being-assertive/">Assertion checking in R</a></li>
</ul>
<p>Not all of my tech posts were about R though. Some are general purpose posts in which I taught myself new tools: learning about Docker and Kubernetes was fun, though in truth I’ve not had much opportunity to use either of these skills.<sup>2</sup> On the other hand, learning about Makefiles was super useful and I’ve found myself using them a lot.<sup>3</sup></p>
<ul>
<li><a href="../../posts/2023-01-01_playing-with-docker/">Playing with docker and the github container registry</a></li>
<li><a href="../../posts/2023-01-10_kubernetes/">Deploying R with kubernetes</a></li>
<li><a href="../../posts/2023-06-30_makefiles/">Makefiles. Or, the balrog and the submersible</a></li>
</ul>
<p>In a refreshing change for this blog – which has historically focused on code – I started writing a little more about statistical inference this year. Not as much as I’d have liked, and not as in-depth as I’d have liked either, but perhaps it will be the beginning of a trend for me. Two old statistics posts returned from the dead in 2023, both relics from my former life as an academic,<sup>4</sup> and a third post estimating the number of internally displaced trans people within the United States:</p>
<ul>
<li><a href="../../posts/2023-04-12_metropolis-hastings/">A gentle introduction to the Metropolis-Hastings algorithm</a></li>
<li><a href="../../posts/2023-04-12_bayes-factors/">A personal essay on Bayes factors</a></li>
<li><a href="../../posts/2023-06-15_dark-times/">On living in dark times</a></li>
</ul>
<p>Finally, I wrote a couple of other posts on other topics broadly related to data science and software. My new personal machine is (for reasons!) using Windows as the primary OS, with an Ubuntu installation (<a href="../../posts/2022-12-31_btw-i-use-arch/">no, not Arch</a>) running concurrently thanks to Windows Subsystem for Linux. I wrote about some of the practicalities of using a setup like this, and specifically about how to use the RStudio IDE and VS Code effectively if you’re using linux for your data science work but you want your IDE to run smoothly as a windows application:</p>
<ul>
<li><a href="../../posts/2023-07-02_the-ides-of-wsl/">RStudio and VS Code in WSL</a></li>
</ul>
<p>Oh, and I wrote a book review of Greg Wilson’s “Software design by example” in which I followed his guidance and wrote a regular expression tokeniser:</p>
<ul>
<li><a href="../../posts/2023-05-31_software-design-by-example/">Software design by example</a></li>
</ul>
<p>That one was fun, and I learned a lot.</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/shattered.png" class="img-fluid" alt="A shattered landscape in a palette of grey and brown against an orange background"></p>
</section>
<section id="pharmacometrics" class="level2">
<h2 class="anchored" data-anchor-id="pharmacometrics">Pharmacometrics</h2>
<p>Around the middle of the year I managed to find work, which came as something of a relief. My new role is in <a href="https://en.wikipedia.org/wiki/Pharmacometrics">pharmacometrics</a>, and while the job is pretty intense – honestly, I’m working longer hours now than I did even as an academic – it’s been rewarding. There’s a lot of new and fascinating things to learn, and I do love being able to learn new things. That’s shown up in this blog quite a bit this year, with several posts discussing pharmacokinetic (PK) models generally and population-pharmacokinetic (pop-PK) models specifically:</p>
<ul>
<li><a href="../../posts/2023-04-26_non-compartmental-analysis/">Non-compartmental analysis</a></li>
<li><a href="../../posts/2023-05-16_stan-ode/">Simple PK models in Stan</a></li>
<li><a href="../../posts/2023-06-10_pop-pk-models/">Minimal pop-PK models in Stan</a></li>
<li><a href="../../posts/2023-07-15_torsten/">Getting started with pop-PK in Torsten</a></li>
<li><a href="../../posts/2023-08-14_mrgsolve/">Simulating from PK models with mrgsolve</a></li>
<li><a href="../../posts/2023-08-28_rxode2/">Simulating from PK models with rxode2</a></li>
</ul>
<p>There’s several other topics in this area I want to write, especially now that my knowledge of the field is considerably stronger than it was when I wrote these pieces.<sup>5</sup> It’s likely I’ll write more posts about pharmacometrics in 2024, but probably at a slower rate. That’s mostly because the nature of my employment is different these days: all my previous jobs before this one were in some sense public-facing roles, and writing blog posts about the substantive topic were part and parcel of the job itself. That’s not the case in my current role, so any writing I do is “off the books” so to speak, and only happens when I have spare time. Which is entirely okay, of course, but it’s hardly a surprise that it’s easier to find time to do a thing when it is central to your job than it is to do the same thing when it’s not actually part of the role!<sup>6</sup></p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/curled.png" class="img-fluid" alt="Swirling patterns in orange, purple and blue"></p>
</section>
<section id="art" class="level2">
<h2 class="anchored" data-anchor-id="art">Art</h2>
<p>On the art front, I changed course a bit in 2023. Early in the year I reluctantly concluded that there isn’t any point in trying to generate income from my art. I haven’t been taking commissions, I turned down a few opportunities to write books on generative art, and I haven’t been doing workshops the way I used to. There are a couple of reasons for that, but mostly they boil down to “return on investment”. It takes a lot of time, energy, and <em>work</em> to do the things that allow you to make money from art, and the bitter truth to it is that unless you’re one of the lucky few who “makes it big”, you really don’t make enough money from the art to justify the effort.<sup>7</sup> People love art. They don’t love paying for it. Nowadays I don’t even bother to try: I make art when I feel like making art, I write about art when I feel like writing about art, and that’s it.</p>
<p>That doesn’t mean I abandoned making art of course, or even writing about it. I wrote three blog posts on generative art this year, for example:</p>
<ul>
<li><a href="../../posts/2023-01-14_p5js/">Generative art with p5.js</a></li>
<li><a href="../../posts/2023-03-13_shattered-landscapes/">Making shattered landscapes in R</a></li>
<li><a href="../../posts/2023-03-31_generative-art-with-grid/">Generative art with grid</a></li>
</ul>
<p>I published seven art series on my art website, mostly created with R but also with javascript in some cases:</p>
<ul>
<li><a href="https://art.djnavarro.net/gallery/subdivision/">Subdivision</a></li>
<li><a href="https://art.djnavarro.net/gallery/broken-lands/">Broken lands</a></li>
<li><a href="https://art.djnavarro.net/gallery/bound/">Bound</a></li>
<li><a href="https://art.djnavarro.net/gallery/curled/">Curled</a></li>
<li><a href="https://art.djnavarro.net/gallery/splotches/">Splotches</a></li>
<li><a href="https://art.djnavarro.net/gallery/pastiche/">Pastiche</a></li>
<li><a href="https://art.djnavarro.net/gallery/advent/">Advent</a></li>
</ul>
<p>I even wrote a custom <a href="https://arttools.djnavarro.net/">arttools</a> R package that I use to help me manage my art workflows,<sup>8</sup> and gave an invited talk at the University of Auckland on generative art (<a href="https://djnavarro.net/slides-auckland-2023/">unpredictable paintings</a>). I’m grateful to the lovely folks at Auckland for the invitation, and it was really wonderful to give the talk to such a kind audience.</p>
<p>So yeah. I’m still making art and sharing it on mastodon, but mostly as a hobbyist these days. I’ve lost any real desire to be a professional artist, and that’s okay. Sometimes a hobby can be just a hobby. Not everything in life needs to be a side hustle.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I honestly don’t like talking about any of this, but I also don’t want to hide the fact that it happened, so I’m not going to shy away from it. But also please don’t be like the stranger who messaged me after my 2022 post to tell me I should carry a gun. That’s not a helpful thing for anyone to tell a rape survivor, and it’s an <em>especially</em> terrible thing to say to her when you’re a man she doesn’t know.↩︎</p></li>
<li id="fn2"><p>I mean, let’s face it: while there’s a strong case to be made that Docker is an important tool for a lot of scientists, Kubernetes is … not. I learned it because it’s occasionally relevant for deploying applications at scale, but that’s not at all relevant in my current role.↩︎</p></li>
<li id="fn3"><p>Yes yes, I know, there are many alternatives, and if I’m an R person I should probably get off my lazy arse and learn <a href="https://books.ropensci.org/targets/">targets</a> but life is short and I am tired okay?↩︎</p></li>
<li id="fn4"><p>Strangely, despite being out of academia for over two years now, <a href="https://papers.djnavarro.net">papers</a> from that life still continue to trickle out, and another six journal articles emerged in 2023 that have my name on them. Academia really makes it hard for you to draw a line in the sand, which… actually is not great when the reason you left is not a pleasant one. Sigh.↩︎</p></li>
<li id="fn5"><p>Gonna be honest: I now look at most of these pieces and smile. They’re good posts, really, but I can now spot a <em>lot</em> of things in each of them that reveal that the author didn’t have a lot of practical experience with PK modelling at the time. But that’s good – that’s what happens when you learn things!↩︎</p></li>
<li id="fn6"><p>This lack of time, incidentally, is also the reason why (despite Hadley’s very kind support and encouragement) I haven’t made much progress on the project to work on the 3rd edition of the ggplot2 book, and haven’t done much of the work on updating my “learning statistics with R” book this year either. I’m sad about both of those things, and hoping that somehow I’ll be able to find some time in the future.↩︎</p></li>
<li id="fn7"><p>And, yes, with the rise of tools like DALL-E and midjourney, the situation has gotten worse over the past year.↩︎</p></li>
<li id="fn8"><p>Note that it’s not a tool for making generative art, it’s a tool for managing art repos and organising output in a format that makes it easy for me to publish art to my website. It’s also not intended for general use. I wrote the package for myself. For anyone else it’s a “use at your own risk” kind of deal. You can use it if it’s useful for you, but I have no intention whatsoever of maintaining it for any purpose except my own use.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Another Year Ends},
  date = {2023-12-16},
  url = {https://blog.djnavarro.net/posts/2023-12-16_another-year-ends},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Another Year Ends.”</span> December 16,
2023. <a href="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends">https://blog.djnavarro.net/posts/2023-12-16_another-year-ends</a>.
</div></div></section></div> ]]></description>
  <category>End of Year</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/</guid>
  <pubDate>Fri, 15 Dec 2023 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Pharmacometric simulation with rxode2</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-28_rxode2/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Hello, yes, this is another <a href="../../category/pharmacometrics">pharmacometrics</a> post. There have been quite a few of these lately as I try to bring myself up to speed on a new discipline. This one is about the <a href="https://nlmixr2.github.io/rxode2/">rxode2</a> package, a pharmacometric simulation tool and the successor to the widely-used <a href="https://nlmixrdevelopment.github.io/RxODE/">RxODE</a> package.<sup>1</sup> Although the original RxODE package is now archived on CRAN, the syntax for rxode2 is very similar, and as far as I can tell it’s fairly (fully?) backward-compatible with the older package.</p>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>As with other packages for pharmacometric simulation such as <a href="https://mrgsolve.org/">mrgsolve</a>, models defined with rxode2 need to be compiled before they are run, and so when you install the package you need the appropriate build tools. There are some implications to this. The package is on CRAN, so you can install it with:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rxode2"</span>)</span></code></pre></div>
<p>However, like most R packages that allow you to compile C/C++/Fortran/Rust/Your-Favourite-Language-Here code, it relies heavily on system dependencies that you may or may not have, and managing the build tools is an OS-specific thing. I’m running Ubuntu 22.04, and (for reasons that don’t bear mentioning) I recently did a “factory reset”<sup>2</sup> and did a fresh install of Ubuntu. So, yeah, I didn’t have everything I needed. Yes, I did have the <code>gcc</code> compiler installed, but that’s not the only system dependency you have to care about. In my case, I was missing <code>gfortran</code>, <code>libblas</code>, and <code>liblapack</code>. As a consequence, when I tried to run the example code on the package website, all I got was a long stream of error messages. In order to get started, I had to do this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install gfortran libblas-dev liblapack-dev liblapack-doc</span></code></pre></div>
<p>That worked for me, but I make no promises that it will work for you. Caveat emptor and all that.<sup>3</sup> But let’s not stand on installation formalities when there are simulations to run. It is time to load some packages and dive once more into the abyss…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rxode2)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(microbenchmark)</span></code></pre></div>
</div>
</section>
<section id="the-rxode2-mini-language" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-rxode2-mini-language">The rxode2 mini-language</h2>
<blockquote class="blockquote">
<p>I don’t understand <br> You claiming I’m a handful when you show up all empty-handed <br> The way you say you love me like you’ve just been reprimanded <br> ’Cause I know you like mind games <br> &nbsp; &nbsp; – <a href="https://www.youtube.com/watch?v=ZyKu6noOxR8">BANKS</a></p>
</blockquote>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/mind-games.jpg" class="img-fluid"></p>
</div></div><p>The story begins with a little commentary on the slippery nature of R as a programming language. It’s not exactly news to many people at this point, but R is famous<sup>4</sup> for the extremely widespread use of <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a> as a tool for implementing domain-specific languages within R itself.<sup>5</sup> As a consequence of this, the same code can have different meaning when called in different contexts. It’s both a curse and a blessing: one the one hand it makes R very flexible in a way that is convenient for analysts, but on the other hand it can be a bit confusing to people from a more conventional programming background who don’t expect R to work this way.</p>
<p>The use of domain-specific languages in pharmacometric modelling is not uncommon: for instance, in my previous <a href="../../posts/2023-08-14_mrgsolve/">post about mrgsolve</a>, I talked about the mini-language used to specify models in that package. Not surprisingly, rxode2 has its own mini-language with it’s own <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html">custom syntax</a>. In mrgsolve, you can specify a model by writing the code for it in a separate file, or passing it as a string within R. You can do that with rxode2 too, but rxode2 also allows you to pass the model specification as a code block: a collection of statements enclosed in curly braces and treated as a single expression. Here’s an example of how that works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxode2</span>({</span>
<span id="cb4-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial values for all four "compartments"</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">central</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">peripheral</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-7">  </span>
<span id="cb4-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drug concentrations</span></span>
<span id="cb4-9">  CP <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> central <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> VC;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># central compartment concentration</span></span>
<span id="cb4-10">  PP <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> peripheral <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> VP; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># peripheral compartment concentration</span></span>
<span id="cb4-11">  </span>
<span id="cb4-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># differential equations</span></span>
<span id="cb4-13">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(depot)       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(KA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> depot);</span>
<span id="cb4-14">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(central)     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  (KA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> depot) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (CL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP);</span>
<span id="cb4-15">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(peripheral)  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PP);</span>
<span id="cb4-16">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(auc)         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  CP;</span>
<span id="cb4-17">})</span></code></pre></div>
</div>
<p>If you don’t look at it too closely you might think this is regular R code, but… it isn’t. The code contained within the braces is captured by the <code>rxode2()</code> function, and then interpreted according to the rules of the mini-language. We’ll need to take a moment to unpack the mini-language itself, but that can wait.</p>
<p>Let’s start by looking at this as a pharmacometrician might. Notice that although this is a two-compartment model in pharmacometric terms, from the perspective of rxode2 there are four “compartments” that define the state of the system. In addition to the usual two compartments (<code>central</code> and <code>peripheral</code>), there is an extravascular <code>depot</code> compartment used to model drug intake. For instance, for an orally-administered drug the <code>depot</code> compartment would be the gut.<sup>6</sup> The <code>depot</code> compartment is “real” in the sense that it is loosely intended to correspond to something in the physical system that we’re modelling. By convention we don’t consider it to be one of the pharmacokinetic compartments, but it’s still a real thing. In contrast, the <code>auc</code> “compartment” has no physical analog at all. It’s included so that the model keeps track of the accumulated drug exposure.<sup>7</sup> As I’m quickly coming to learn, this is a very handy trick when running pharmacometric simulations.</p>
<p>Now that we’ve looked at it as an analyst, let’s look at it as a programmer. The syntax within the rxode2 model specification is not “real” R code. The statements enclosed within the curly braces look vaguely R-like, but if you tried to evaluate these expressions outside the context of the <code>rxode2()</code> function, you’d get errors. Thanks to the magic of non-standard evaluation in R, the <code>rxode2()</code> function is able capture the code before it is evaluated, and prevents R from evaluating it the way it normally would. Instead of following the regular rules of R, it follows the syntax provided by the rxode2 mini-language. This mini-language is similar to R in some ways:</p>
<ul>
<li>Assignment statements can use <code>=</code> or <code>&lt;-</code> as the assignment operator.<sup>8</sup></li>
<li>Comments are specified using the hash (<code>#</code>) character</li>
<li>Semi-colon characters (<code>;</code>) are optional, and specify the end of a line</li>
</ul>
<p>However, there are specialised statements used in the mini-language that don’t exist in regular R code. For example, there are two kinds of special statements I’ve used in this code:</p>
<ul>
<li>Time-derivative statements (i.e., the ones that have something like <code>d/dt(central)</code> on the left hand side) are used to specify the differential equations in the ODE system.</li>
<li>Initial-condition statements (i.e., the ones where I set something like <code>central(0)</code> on the left hand side) are used to specify the initial state of the ODE system.</li>
</ul>
<p>You can check the <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html">rxode2 syntax</a> page for more information about the mini-language and what other kinds of special statements exist.</p>
</section>
<section id="the-rxode2-model-object" class="level2">
<h2 class="anchored" data-anchor-id="the-rxode2-model-object">The rxode2 model object</h2>
<p>In the previous section I used the <code>rxode2()</code> function to specify a pretty standard two-compartment pharmacokinetic model, and assigned the resulting model object to a boringly-named variable called <code>mod</code>.<sup>9</sup> The model object is the primary vehicle for interfacing with the compiled code from R, so it’s helpful to take a look at it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mod</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">rxode2 </span>2.0.13 model named <span style="color: #BBBB00; font-weight: bold;">rx_7b738a16dd646d432336a380787bd163</span> model (<span style="color: #00BB00;">✔</span> <span style="color: #00BB00; font-weight: bold;">ready</span>). 
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$state</span>: depot, central, peripheral, auc
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span>: VC, VP, KA, Q, CL
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$lhs</span>: CP, PP
</code></pre>
</div>
<p>Again, there are a few things to unpack in this output:</p>
<ul>
<li>The first line of the output has some technical information about the model. It tells us what version of rxode2 was used to build the model, gives us the name of the built model (see below), and tells us that it’s ready to use.<sup>10</sup></li>
<li>The second line tells us about <code>mod$state</code>, which in this case are the four “compartment” variables that comprise the state vector for the underlying ODE system.</li>
<li>The third line tells us about <code>mod$params</code>, the list of parameters that need to be passed to the model as input to the simulation</li>
<li>The fourth line tells us about <code>mod$lhs</code>, the list of additional defined variables that are created by the model and whose value will be recorded in the output.</li>
</ul>
<p>Like many R packages that generate compiled code, rxode2 manages the compiled object for you. The long unintelligible “name” assigned to our model gives us the hint we need to find the compiled objects. Within the R session temp directory, the rxode2 package has created an “rxode2” subfolder.<sup>11</sup> And indeed, if I take a peek at the contents of this folder, I find something with an identical name:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempdir</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rxode2"</span>))</span></code></pre></div>
<pre class="fansi fansi-output"><code>/tmp/RtmpC0i8oK/rxode2/018374b1ca9115fbc3be9f765f32e47f.md5
<span style="color: #0000BB; font-weight: bold;">/tmp/RtmpC0i8oK/rxode2/rx_7b738a16dd646d432336a380787bd163__.rxd</span>
</code></pre>
</div>
<p>Okay, makes sense.</p>
</section>
<section id="event-tables" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="event-tables">Event tables</h2>
<p>Event tables (also called event schedules) are the primary way the user specifies things that happen in the simulation. These mostly consist of two kinds of event: dosing events, where the drug is administered, and observation events, where the state of the system is measured. In the rxode2 package these are specified with the <code>et()</code> function, and you can use the pipe operator to build up complex event schedules. I’ll take my example from the rxode2 documentation, and walk through it slowly. One nice thing about the event schedules in rxode2 is that you can specify units, so we’ll start with an event table that doesn’t contain any actual <em>events</em>, but specifies the units in which those events will be expressed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amountUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours"</span>)</span>
<span id="cb7-2">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 0 records ──</span>
0 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
</code></pre>
</div>
<p>The output here isn’t super exciting, since there are no actual events encoded here. But it does let me mention one nice little feature of rxode2: the print methods are generally quite informative, and have nice little “nudges” like the ones you can see above that can help new (or even experienced) users work out what they might need to do next.</p>
<p>Anyway, let’s add some dosing events, shall we? Let’s assume an initial dose of <code>amt = 10000</code> (in milligrams) is administered at <code>time = 0</code>, and repeated for an additional 9 times at 12 hour intervals (i.e., <code>addl = 9</code>, <code>ii = 12</code>). In the interests of being explicit, I’ll set <code>cmt = "depot"</code> to be clear about which compartment the dose is administered to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 1 records ──</span>
1 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 1 × 6</span>
   time cmt     amt    ii  addl evid        
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>      
<span style="color: #555555;">1</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
</code></pre>
</div>
<p>This format for an event table – where <code>time</code>, <code>amt</code>, <code>addl</code>, and <code>ii</code> are used to specify a sequence of regularly spaced dosing events in a single row – will seem quite familiar to anyone in the field, and since I’ve talked about this notation in previous posts, I’ll not bore people by explaining it yet again.</p>
<p>Moving along, let’s also assume that after 120 hours has passed (<code>time = 120</code>) the dosing schedule changes: the dose drops to <code>amt = 2000</code> milligrams, the interdose interval is increased slightly to <code>ii = 14</code> hours, and this dosing regime is maintained for <code>addl = 4</code> additional doses (i.e., 5 in total). So now we have this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 2 records ──</span>
2 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 2 × 6</span>
   time cmt     amt    ii  addl evid        
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>      
<span style="color: #555555;">1</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
<span style="color: #555555;">2</span>   120 depot  <span style="text-decoration: underline;">2</span>000    14     4 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
</code></pre>
</div>
<p>Now that we have specified all the dosing events, we need to add the “observation” events. In a real study, observation times would be the times at which we take a real-world measurement of some kind, but in the context of the simulation it’s just a set of times at which the state of the system is computed. Let’s compute the state of the system for the first 300 hours:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb10-2">events </span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 303 records ──</span>
2 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
301 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 303 × 6</span>
    time cmt     amt    ii  addl evid         
   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>       
<span style="color: #555555;"> 1</span>     0 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 2</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span> 
<span style="color: #555555;"> 3</span>     1 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 4</span>     2 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 5</span>     3 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 6</span>     4 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 7</span>     5 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 8</span>     6 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 9</span>     7 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;">10</span>     8 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"># ℹ 293 more rows</span>
</code></pre>
</div>
<p>And now we’re done. We have a complete events table that can be used in our simulation. Admittedly, I went through that awfully slowly. The whole thing could have been bundled into a single pipeline like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amountUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span></code></pre></div>
</div>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/meds.png" class="img-fluid"></p>
</div>
</section>
<section id="simulating-one-subject" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="simulating-one-subject">Simulating one subject</h2>
<blockquote class="blockquote">
<p>I was alone, falling free<br>
Trying my best not to forget<br>
What happened to us<br>
What happened to me<br>
&nbsp;&nbsp; – <a href="https://www.youtube.com/watch?v=WO9ewCO7TYI">Placebo</a><sup>12</sup></p>
</blockquote>
<p>We’re now almost at a point where we can run a simple simulation using the model specified via the <code>mod</code> object, and the events table in <code>events</code>. The only thing we haven’t done yet is specify pharmacokinetic parameters that need to be passed to the model as input. To keep things simple, I’ll simulate only a single subject, and so the input parameters will be passed as a table with one row corresponding to our lone subject, and one column per parameter that needs to be specified. If we look at the model spec we can see that requires all of the following to be given:</p>
<ul>
<li>elimination clearance (<code>CL</code>)</li>
<li>absorption rate constant (<code>KA</code>)</li>
<li>intercompartmental clearance (<code>Q</code>)</li>
<li>volume of distribution for the central compartment (<code>VC</code>)</li>
<li>volume of distribution for the peripheral compartment (<code>VP</code>)</li>
</ul>
<p>Indeed, if we take a look at <code>mod$params</code> we see the same listing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>params</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "VC" "VP" "KA" "Q"  "CL"</code></pre>
</div>
</div>
<p>Okay, so let’s put together a one-row data frame <code>params</code> containing all these parameters for a single simulated subject:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">KA =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.294</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CL =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.6</span>,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VC =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.2</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VP =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">297</span>,</span>
<span id="cb14-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span></span>
<span id="cb14-7">)</span>
<span id="cb14-8">params</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="color: #555555;"># A tibble: 1 × 5</span>
     KA    CL    VC    VP     Q
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span> 0.294  18.6  40.2   297  10.5
</code></pre>
</div>
<p>Now that we have our parameters, we’re ready to go. There are several ways you can call the solver and run the simulation (<a href="https://nlmixr2.github.io/rxode2/reference/rxSolve.html">documentation here</a>), but I’m currently quite partial to calling <code>solve()</code>,<sup>13</sup> like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events)</span></code></pre></div>
</div>
<p>When we print <code>out</code>, we get a fairly detailed description of the simulation that includes information about the parameters and the initial state:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">out</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── Solved rxode2 object ──</span>
<span style="font-weight: bold;">── Parameters (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span><span style="font-weight: bold;">): ──</span>
     VC      VP      KA       Q      CL 
 40.200 297.000   0.294  10.500  18.600 
<span style="font-weight: bold;">── Initial Conditions (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$inits</span><span style="font-weight: bold;">): ──</span>
     depot    central peripheral        auc 
         0          0          0          0 
<span style="font-weight: bold;">── First part of data (object): ──</span>
<span style="color: #555555;"># A tibble: 301 × 7</span>
   time    CP    PP  depot central peripheral   auc
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span>     0   0   0     <span style="text-decoration: underline;">10</span>000       0          0    0  
<span style="color: #555555;">2</span>     1  44.4 0.920  <span style="text-decoration: underline;">7</span>453.   <span style="text-decoration: underline;">1</span>784.       273.  26.4
<span style="color: #555555;">3</span>     2  54.9 2.67   <span style="text-decoration: underline;">5</span>554.   <span style="text-decoration: underline;">2</span>206.       794.  77.7
<span style="color: #555555;">4</span>     3  51.9 4.46   <span style="text-decoration: underline;">4</span>140.   <span style="text-decoration: underline;">2</span>087.      <span style="text-decoration: underline;">1</span>324. 132. 
<span style="color: #555555;">5</span>     4  44.5 5.98   <span style="text-decoration: underline;">3</span>085.   <span style="text-decoration: underline;">1</span>789.      <span style="text-decoration: underline;">1</span>776. 180. 
<span style="color: #555555;">6</span>     5  36.5 7.18   <span style="text-decoration: underline;">2</span>299.   <span style="text-decoration: underline;">1</span>467.      <span style="text-decoration: underline;">2</span>132. 221. 
<span style="color: #555555;"># ℹ 295 more rows</span>
</code></pre>
</div>
<p>Extremely pretty print method notwithstanding, under the hood it’s nothing fancy. It’s a regular data frame with a few extra classes and some metadata, which means we can pass it straight to ggplot without any coercion, and draw a pretty picture:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(out, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, CP)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Yep, that looks about right.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/boys.png" class="img-fluid"></p>
</div>
</section>
<section id="simulating-multiple-subjects" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="simulating-multiple-subjects">Simulating multiple subjects</h2>
<blockquote class="blockquote">
<p>I like big boys, itty bitty boys<br>
Mississippi boys, inner city boys<br>
I like the pretty boys with the bow tie<br>
Get your nails did, let it blow dry<br>
I like a big beard, I like a clean face<br>
I don’t discriminate, come and get a taste<br>
From the playboys to the gay boys<br>
Go and slay, boys, you my fave boys<br>
&nbsp; &nbsp; –<a href="https://www.youtube.com/watch?v=HQliEKPg1Qk">Lizzo</a></p>
</blockquote>
<p>The previous example shows how to simulate a single subject. However, the world is full of lots of different people with different characteristics, so in a more realistic simulation scenario we would want to simulate many people with different parameter values. In order to accommodate this, the parameter table now has multiple rows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">KA =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.294</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>),</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VC =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VP =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">297</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb18-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-7">)</span>
<span id="cb18-8">params</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="color: #555555;"># A tibble: 20 × 5</span>
      KA    CL    VC    VP     Q
   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;"> 1</span> 0.275  20.4  39.9  321.  9.93
<span style="color: #555555;"> 2</span> 0.300  20.2  39.7  297. 10.4 
<span style="color: #555555;"> 3</span> 0.269  18.7  41.6  304. 11.7 
<span style="color: #555555;"> 4</span> 0.342  14.6  41.3  297.  8.98
<span style="color: #555555;"> 5</span> 0.304  19.8  38.8  290. 11.1 
<span style="color: #555555;"> 6</span> 0.269  18.5  38.8  299. 10.8 
<span style="color: #555555;"> 7</span> 0.309  18.3  40.9  279. 11.6 
<span style="color: #555555;"> 8</span> 0.316  15.7  41.7  312. 10.2 
<span style="color: #555555;"> 9</span> 0.311  17.6  40.0  299. 10.9 
<span style="color: #555555;">10</span> 0.285  19.4  42.0  319. 10.8 
<span style="color: #555555;">11</span> 0.339  21.3  41.0  302.  9.96
<span style="color: #555555;">12</span> 0.306  18.4  39.0  290. 11.7 
<span style="color: #555555;">13</span> 0.275  19.4  40.9  303. 11.7 
<span style="color: #555555;">14</span> 0.228  18.5  37.9  288. 11.2 
<span style="color: #555555;">15</span> 0.328  15.8  43.1  284. 12.1 
<span style="color: #555555;">16</span> 0.293  17.8  44.2  300. 11.1 
<span style="color: #555555;">17</span> 0.294  17.8  39.5  293.  9.22
<span style="color: #555555;">18</span> 0.322  18.5  38.1  297.  9.93
<span style="color: #555555;">19</span> 0.319  20.8  41.3  298.  9.28
<span style="color: #555555;">20</span> 0.312  20.1  39.9  291. 10.0 
</code></pre>
</div>
<p>The command to run the simulation remains unchanged:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events)</span></code></pre></div>
</div>
<p>I’ll show you the <code>out</code> object in a moment, but it’s probably easier to understand it if we start with a plot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">out <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sim.id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject"</span>, sim.id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, CP, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> sim.id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sim.id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As you can see, all 20 subjects have qualitatively similar profiles, but there are noticeable differences in the details. Not surprisingly really. I didn’t build in very much variability into the simulation, and I didn’t even <em>try</em> to incorporate an appropriate covariance structure among the parameters (that’s a topic for another post).<sup>14</sup> The main thing that matters here is that we can see that the variation <em>exists</em>.</p>
<p>Anyway, let’s have a look at the table of results <code>out</code> produced by our simulation. As you probably guessed from the ggplot2 code, there’s a column called <code>sim.id</code> that stores the subject identifier, and there are 20 times as many rows as last time, but it’s essentially the same:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">out</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── Solved rxode2 object ──</span>
<span style="font-weight: bold;">── Parameters (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span><span style="font-weight: bold;">): ──</span>
<span style="color: #555555;"># A tibble: 20 × 6</span>
   sim.id    VC    VP    KA     Q    CL
    <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;"> 1</span>      1  39.9  321. 0.275  9.93  20.4
<span style="color: #555555;"> 2</span>      2  39.7  297. 0.300 10.4   20.2
<span style="color: #555555;"> 3</span>      3  41.6  304. 0.269 11.7   18.7
<span style="color: #555555;"> 4</span>      4  41.3  297. 0.342  8.98  14.6
<span style="color: #555555;"> 5</span>      5  38.8  290. 0.304 11.1   19.8
<span style="color: #555555;"> 6</span>      6  38.8  299. 0.269 10.8   18.5
<span style="color: #555555;"> 7</span>      7  40.9  279. 0.309 11.6   18.3
<span style="color: #555555;"> 8</span>      8  41.7  312. 0.316 10.2   15.7
<span style="color: #555555;"> 9</span>      9  40.0  299. 0.311 10.9   17.6
<span style="color: #555555;">10</span>     10  42.0  319. 0.285 10.8   19.4
<span style="color: #555555;">11</span>     11  41.0  302. 0.339  9.96  21.3
<span style="color: #555555;">12</span>     12  39.0  290. 0.306 11.7   18.4
<span style="color: #555555;">13</span>     13  40.9  303. 0.275 11.7   19.4
<span style="color: #555555;">14</span>     14  37.9  288. 0.228 11.2   18.5
<span style="color: #555555;">15</span>     15  43.1  284. 0.328 12.1   15.8
<span style="color: #555555;">16</span>     16  44.2  300. 0.293 11.1   17.8
<span style="color: #555555;">17</span>     17  39.5  293. 0.294  9.22  17.8
<span style="color: #555555;">18</span>     18  38.1  297. 0.322  9.93  18.5
<span style="color: #555555;">19</span>     19  41.3  298. 0.319  9.28  20.8
<span style="color: #555555;">20</span>     20  39.9  291. 0.312 10.0   20.1
<span style="font-weight: bold;">── Initial Conditions (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$inits</span><span style="font-weight: bold;">): ──</span>
     depot    central peripheral        auc 
         0          0          0          0 

Simulation <span style="font-weight: bold;">without uncertainty</span> in parameters, omega, or sigma matricies

<span style="font-weight: bold;">── First part of data (object): ──</span>
<span style="color: #555555;"># A tibble: 6,020 × 8</span>
  sim.id  time    CP    PP  depot central peripheral   auc
   <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span>      1     0   0   0     <span style="text-decoration: underline;">10</span>000       0          0    0  
<span style="color: #555555;">2</span>      1     1  41.6 0.757  <span style="text-decoration: underline;">7</span>594.   <span style="text-decoration: underline;">1</span>657.       243.  24.7
<span style="color: #555555;">3</span>      1     2  51.2 2.20   <span style="text-decoration: underline;">5</span>767.   <span style="text-decoration: underline;">2</span>041.       705.  72.7
<span style="color: #555555;">4</span>      1     3  48.4 3.66   <span style="text-decoration: underline;">4</span>380.   <span style="text-decoration: underline;">1</span>928.      <span style="text-decoration: underline;">1</span>176. 123. 
<span style="color: #555555;">5</span>      1     4  41.5 4.93   <span style="text-decoration: underline;">3</span>326.   <span style="text-decoration: underline;">1</span>656.      <span style="text-decoration: underline;">1</span>581. 168. 
<span style="color: #555555;">6</span>      1     5  34.2 5.93   <span style="text-decoration: underline;">2</span>526.   <span style="text-decoration: underline;">1</span>362.      <span style="text-decoration: underline;">1</span>902. 206. 
<span style="color: #555555;"># ℹ 6,014 more rows</span>
</code></pre>
</div>
<p>As we’ve seen throughout the post, the print method has lots of nice touches. It shows the simulation parameters as well as the simulation results, and has a very gentle message reminding me I haven’t incorporated measurement error, random effects, or parameter uncertainty. Which… I mean, I intentionally left those things out, but actually I do appreciate the clear statement of what <em>wasn’t</em> done here.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/fastest-girl-in-town.png" class="img-fluid"></p>
</div>
</section>
<section id="performance-considerations" class="level2">
<h2 class="anchored" data-anchor-id="performance-considerations">Performance considerations</h2>
<blockquote class="blockquote">
<p>Ain’t no use in trying to slow me down<br>
’Cause you’re running with the fastest girl in town<br>
Ain’t you baby?<br>
&nbsp;&nbsp; – <a href="https://www.youtube.com/watch?v=EbaEVA259IE">Miranda Lambert</a></p>
</blockquote>
<p>For small simulations like the ones I’m running in this post, you really don’t need to care much about performance. However, when you start running larger simulations it starts to matter a lot. To that end there’s a nice <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html">article on speeding up rxode2</a> in the package documentation which I’ve already found extremely useful at work when doing a little bit of code profiling on analysis code. Since this does matter a fair bit in practice, I’ll walk through the same ideas here.</p>
<p>Let’s define a few functions that run the simulations in different ways. First, I’ll start with a <code>solve_loop()</code> function that deliberately strips out any form of multi-threading. Each row in <code>params</code> is passed as a separate call to <code>solve()</code>, nested inside a <code>for</code> loop:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">solve_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb22-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(params)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params[i, ], events)</span>
<span id="cb22-3">}</span></code></pre></div>
</div>
<p>This is our baseline case. It’s designed to make life as difficult as possible for rxode2 by enforcing single threaded execution within R. We can improve on this considerably by passing the entire <code>params</code> data frame, allowing rxode2 to run the simulations in parallel. I haven’t looked under the hood to work out exactly how rxode2 manages the parallelism<sup>15</sup> Here are three functions that explicitly request 1, 2 or 4 cores/threads:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">solve_thread_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb23-2">solve_thread_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb23-3">solve_thread_4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
<p>From experience, I’ve learned that there’s almost never anything to be gained by trying to execute more than four resource-hogging threads simultaneously on my laptop, so I’ll be sensible and won’t try anything more than that. Let’s take a look at the difference in performance for each of these functions:</p>
<div class="cell" data-hash="index_cache/html/benchmarks_15a64dfc7a69447ec3b1a389376a8a52">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">bench <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_loop</span>(),</span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_1</span>(),</span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_2</span>(),</span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_4</span>()</span>
<span id="cb24-6">)</span>
<span id="cb24-7">bench</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
             expr       min        lq      mean    median       uq       max neval
     solve_loop() 58.630598 62.227245 68.912034 64.780701 68.78793 168.11848   100
 solve_thread_1()  8.515051  8.867159  9.635308  9.126248  9.45503  26.11143   100
 solve_thread_2()  7.497051  7.720607  8.476758  7.968412  8.44852  15.94618   100
 solve_thread_4()  6.538996  7.063265  7.761950  7.160678  7.54286  17.27997   100</code></pre>
</div>
</div>
<p>You can see from looking at the table that there’s a big drop in performance when we force rxode2 to simulate each subject one at a time within a loop: <code>solve_loop()</code> is much, much slower than any of the others. Increasing the number of threads from one to four helps a fair bit too, but not to the same dramatic extent. This is even more apparent when we visualise the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(bench)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/benchmark-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Admittedly, the time scale here is such that it doesn’t really matter much, but for more realistic examples I’ve played with the speed-up seems to be pretty similar and it can make a big difference to the performance of analysis code.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>As an aside: when getting started, I found it a little easier to look at the <a href="https://nlmixr2.github.io/rxode2-manual/">rxode2 user manual</a> than to work from the pkgdown site. As far as I can tell it’s essentially the same material, but the manual organises it in a linear fashion that makes it a little clearer to new users because you get a better sense of the order in which to read things.↩︎</p></li>
<li id="fn2"><p>Does that term even make sense for a linux machine? It’s not like the thing shipped with linux in the first place. Whatever.↩︎</p></li>
<li id="fn3"><p>I haven’t extensively checked the dependencies on other operating systems, but from what I can tell a Windows install requires <a href="https://cran.r-project.org/bin/windows/Rtools/">RTools</a>.↩︎</p></li>
<li id="fn4"><p>Or notorious, depending on your perspective↩︎</p></li>
<li id="fn5"><p>Metaprogramming in R relies on the fact that R adopts a <a href="https://en.wikipedia.org/wiki/Lazy_evaluation">lazy evaluation</a> model for code execution. This allows the programmer to capture user code passed to a function <em>before</em> it is evaluated, modify the code as desired, and indeed prevent it being evaluated at all. R is hardly the only language to adopt this approach, but it does put it in contrast to languages like Python that adopt an <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Eager_evaluation">eager evaluation</a> approach.↩︎</p></li>
<li id="fn6"><p>In this post I’m assuming the drug has bioavailability of <img src="https://latex.codecogs.com/png.latex?F%20=%201">, but that’s not true generally, so you’d have to model this explicitly by scaling the drug amount that passes from the gut to the central compartment in the ODE equations.↩︎</p></li>
<li id="fn7"><p>In essence, the value of <code>auc</code> that accrues is a numerical estimate of the time-integral of drug concentration. This “area under the curve” measure is one of several different measures used to assess drug exposure. I talked a lot about the AUC measure in my post on <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a>.↩︎</p></li>
<li id="fn8"><p>The rxode2 mini-language also allows you to use <code>~</code> for this purpose, but I’m not going to do that here. For this post, I’ve chose to use <code>=</code> as a way of reminding myself that my model specification isn’t “normal” R code.↩︎</p></li>
<li id="fn9"><p>Model objects in rxode2 have S3 class “rxode2”.↩︎</p></li>
<li id="fn10"><p>You can customise this name if you care deeply about such things. As noted in the <a href="https://nlmixr2.github.io/rxode2/reference/rxode2.html"><code>roxde2()</code> documentation</a>, there is a <code>modName</code> argument that you can use for this purpose. Because this name is used throughout the C compilation process, it must start with a letter and contain only alphanumeric ASCII characters.↩︎</p></li>
<li id="fn11"><p>Yes, you can customise this too, by specifying the <code>wd</code> argument to <code>rxode2()</code>.↩︎</p></li>
<li id="fn12"><p>I actually feel bad about referencing “Meds” in this post, because let’s face it <em>“The sex, and the drugs, and the complications”</em> would be a fucking magnificent title for a blog post about PKPD models with covariates. Oh who am I kidding? I’m absolutely going to write a post with that title.↩︎</p></li>
<li id="fn13"><p>Experienced R users would not be surprised to discover that <code>solve()</code> is an S3 generic defined in the base package, and equally unsurprised to note that rxode2 defines a method for “rxode2” objects such as <code>mod</code>. It somehow makes me happy to see <code>solve()</code> used this way.↩︎</p></li>
<li id="fn14"><p>Note to future-Danielle: there is a nice discussion of this in the rxode2 context specifically, in the article on <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html">population simulation</a>.↩︎</p></li>
<li id="fn15"><p>Is it purely <a href="https://en.wikipedia.org/wiki/Multithreading">multi-threading</a> we’re talking about? Do we care deeply about the <a href="https://stackoverflow.com/questions/11835046/multithreading-and-multicore-differences">multi-thread/multi-core</a> distinction? Does <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">SIMD</a> come into play? Most importantly, does the author really want to be bothered writing a deep dive on these topics when the audience consists almost entirely of people who (a) already understand these topics or (b) do not care about these topics? The answer to that last one is no. No she does not.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pharmacometric Simulation with Rxode2},
  date = {2023-08-28},
  url = {https://blog.djnavarro.net/posts/2023-08-28_rxode2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pharmacometric Simulation with
Rxode2.”</span> August 28, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-28_rxode2">https://blog.djnavarro.net/posts/2023-08-28_rxode2</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-28_rxode2/</guid>
  <pubDate>Sun, 27 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-28_rxode2/boys.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Pharmacometric simulation with mrgsolve</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/</link>
  <description><![CDATA[ 





<!-- 
cover art: https://unsplash.com/photos/a7OdG45prSM
licence: unsplash public
-->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Continuing my informal series of “Danielle learns <a href="https://blog.djnavarro.net/category/pharmacometrics">pharmacometric modelling</a>” posts, today I’ve decided to sit down and teach myself how to use the <a href="https://mrgsolve.org/">mrgsolve</a> package in R.</p>
<p>As I’m rapidly coming to realise, the world of pharmacometric modelling is an intersting space where there are a large number of domain-specific languages that have been designed to solve a particular subset of the modelling problems faced by analysts in the field, and R serves as a lingua franca that stitches them all together and makes it possible to write analysis scripts that call on multiple tools.<sup>1</sup></p>
<p>With that as the structure of the ecosystem, what you tend to find are packages that carve out a specific niche by building on top of some other tool. For this post, the niche we’re talking about is <strong>model-based simulation</strong>. In this context, it’s assumed that the analyst has a specific pharmacometric model in mind (e.g., one-compartment PK model,<sup>2</sup> two-compartment PK model, etc etc). We are not attempting to estimate parameters from data, nor are we runing a model testing exercise. The model is presumed to exist already, usually because the analyst has already done the model fitting exercise using their tool of choice.<sup>3</sup></p>
<p>Within the specific “model simulation” niche there are a number of R packages that people seem to use frequently. There’s the RxODE package<sup>4</sup> and its successor <a href="https://nlmixr2.github.io/rxode2/">rxode2</a>, for example, and mrgsolve falls within the same general niche. I didn’t have any specific reason for deciding to learn mrgsolve first: I had to start somewhere and this seems as good a place as any.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mrgsolve)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/mrgsolve-hex.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Hex sticker image for the mrgsolve R package"></p>
</figure>
</div>
<section id="a-simple-example" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-example">A simple example</h2>
<p>Okay, let’s get started. The mrgsolve package is build on top of an open source ODE solver,<sup>5</sup> but the user doesn’t need to call it directly. Instead, a model is constructed using a <strong>model specification file</strong> (more on that later) that is then compiled to C++. This compiled model is used to run simulations, and it’s this compiled model that calls the ODE solvers. As a example, let’s use this code taken from the <a href="https://mrgsolve.org/vignettes/01-get-started.html">get started</a> page, which uses <code>modlib()</code> to use one of the predefined model specifications that come bundled with mrgsolve:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Building pk1 ... done.</code></pre>
</div>
</div>
<p>In this code, <code>"pk1"</code> refers to the name of one of the model that comes bundled with mrgsolve… and there will be exactly zero pharmacometricians in this world that are surprised to discover that this is a one-compartment PK model with first-order absorption into the central compartment, and first-order elimination from the central compartment. If we print out the model object, we get a nice little summary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc27212d78b 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>A few months ago very little of this would have made sense to me, but I’ve – apparently – become familiar enough with conventions in pharamacometrics that this now looks very easy to read. For this initial example, the bits that matter most are these:</p>
<ul>
<li><p>We have a list of compartments: CENT refers to the central compartment, and EV refers to an extravascular dosing compartment through which the drug is administered. Note that although there are two listed compartments, this is really a one-compartment model: the extravascular dosing compartments are a necessary part of the model formalism, but no more than that.</p></li>
<li><p>We have a list of parameters: clearance (CL) is a measure representing the volume of blood that can be fully cleared of the drug per unit time, volume of distribution (V) measures the size of the central compartment, and KA is the absorption rate constant governing how quickly the drug is absorbed from the extravascular compartment into the central compartment.</p></li>
<li><p>When running a simulation, the drug amounts in the compartments CENT and EV will be returned as part of the output. However, we can also specify other “captured” quantities, which in this case adds CP, the drug concentration in the central compartment.<sup>6</sup></p></li>
</ul>
<p>The parameter values (i.e.&nbsp;CL, V, KA) are part of the model specification, and you can see the values assigned to those parameters by calling <code>param()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=3):
 name value . name value
 CL   1     | V    20   
 KA   1     | .    .    </code></pre>
</div>
</div>
<p>We see that our model assumes a clearance (CL) of 1, an aborption rate constant (KA) of 1, and a volume of distribution equal to 20. The mrgsolve package doesn’t keep track of units: it’s up to the user to make sure all the units are on the appropriate scale.</p>
<p>Note that the <code>param()</code> function is both the “getter” and the “setter” for model parameters: <code>param(mod)</code> returns a parameter list object containing the parameters of <code>mod</code>, whereas <code>param(mod, CL = 2, KA = 2)</code> returns a modified model object with updated parameters. Later in the post I’ll use <code>param()</code> to modify model parameters in this way.</p>
<p>Okay so now we have a model object <code>mod</code> that specifies all our pharmacokinetic assumptions. In order to run a simulation, we also need to provide an <strong>event schedule</strong> that provides dosing information, and we’ll also need to say something about the time points at which we want to simulate the various pharmacokinetic quantities of interest. You can do this in a few different ways but for the purposes of the initial example I’ll do it the same way that the “get started” vignette does, and use a pipe-friendly workflow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>Here we take the <code>mod</code> object, pipe it to the <code>ev()</code> function that builds the event schedule, and then pipe the output to <code>mrgsim()</code> which then runs the simulation. In this code, the arguments to <code>ev()</code> are all very standard in the field:</p>
<ul>
<li><code>amt</code> is the amount of drug</li>
<li><code>ii</code> is the interdose interval</li>
<li><code>addl</code> is number of additional doses</li>
</ul>
<p>The arguments to <code>mrgsim()</code> are used to specify the time points:</p>
<ul>
<li><code>start</code> is the initial time point (I actually didn’t need to specify it in ths case because the default value is 0)</li>
<li><code>end</code> is the final time point</li>
<li><code>delta</code> is the step size (i.e., the amount of time between successive time points)</li>
</ul>
<p>The output here is a tabular data structure – not technically a data frame, but I’ll get to that – with sensible column names:</p>
<ul>
<li><code>ID</code> is a subject identifier (always 1 for this simple example)</li>
<li><code>time</code> is the time point for the simulated measurement</li>
<li><code>EV</code> is the drug amount in the extravascular compartment (e.g., the gut, if we’re talking about oral dosing)</li>
<li><code>CENT</code> is the drug amount in the central compartment</li>
<li><code>CP</code> is the drug concentration in the central compartment</li>
</ul>
<p>To help you get a sense of what the simulation results look like, the mrgsolve package provides a plot method for simulation results, so if I’d wanted to I could add a call to <code>plot()</code> at the end of the pipeline, and get this as the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Very nice.</p>
</section>
<section id="simulation-workflow" class="level2">
<h2 class="anchored" data-anchor-id="simulation-workflow">Simulation workflow</h2>
<p>Now things get a little messier. The mrgsolve package is designed to support several different kinds of workflow, which is of course a good thing, but very often the price of analytic flexibility is function complexity. It takes some effort to understand all the moving parts to the package, and the different ways in which mrgsolve functions can be called.<sup>7</sup></p>
<section id="the-model-library" class="level3">
<h3 class="anchored" data-anchor-id="the-model-library">The model library</h3>
<p>Let’s start by taking a closer look at the library of pre-specified models that come bundled with mrgsolve. They’re stored in a package folder whose location is accessible by calling <code>modlib()</code> with no arguments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/danielle/R/x86_64-pc-linux-gnu-library/4.3/mrgsolve/models"</code></pre>
</div>
</div>
<p>As you can see, when called with no inputs <code>modlib()</code> doesn’t return a compiled model, and it simply returns the path to the model library folder. If you want a list of the models that come bundled with mrgsolve, you can call <code>modlib()</code> setting <code>list = TRUE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>mrgsolve internal library:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  effect  tmdd  viral1  viral2  emax  irm1  irm2  irm3  irm4  pk1cmt  pk2cmt  pk3cmt  pk1  pk2  pk2iv  popex  pred1  pbpk  1005  nm-like</code></pre>
</div>
</div>
<p>Finally, if you want to build and use one of these model you can call <code>modlib()</code> and pass the name of the model you want as the <code>model</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading model from cache.</code></pre>
</div>
</div>
<p>It’s probably stating the obvious, but while the <code>modlib()</code> function works nicely as a tool to support analysts interactively, you probably wouldn’t call it as a developer. For instance, if you want to access the mrgsolve package folder that contains the models, you’d write code that makes very clear that you’re looking for a path (not trying to build a model). Something like this would work better:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/danielle/R/x86_64-pc-linux-gnu-library/4.3/mrgsolve/models</code></pre>
</div>
</div>
<p>Similarly, if you want to find the models in the model library folder, that’s easy enough to do with <code>fs::dir_ls()</code> and a simple regular expression. Easy done.</p>
</section>
<section id="building-models-from-file" class="level3">
<h3 class="anchored" data-anchor-id="building-models-from-file">Building models from file</h3>
<p>Along the same lines, building one of the bundled models using <code>modlib()</code> is a perfectly sensible thing to do when you’re just starting out and don’t want to write your own model specification files, but after a while you might want to pivot to a different workflow. To that end, there’s an <code>mread()</code> function – and related functions <code>mread_file()</code> and <code>mread_cache()</code> – that reads a model specification file and returns the model object linked to the compiled code. As an example, here’s how I’d use <code>mread()</code> to build the one-compartment model in the previous section:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb20-2">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Building pk1 ... (waiting) ...
done.</code></pre>
</div>
</div>
<p>Optionally you can provide a file name for the model specification file that sits within the <code>project</code> folder, but in this case we don’t need to: if the <code>file</code> argument is unspecified <code>mread()</code> assumes that the file name is the same as the <code>model</code> name with file extension <code>.cpp</code>.<sup>8</sup></p>
</section>
<section id="model-objects" class="level3">
<h3 class="anchored" data-anchor-id="model-objects">Model objects</h3>
<p>The mrgsolve package is built using S4 classes and of the great many object oriented programming systems available in R that’s the one I’m least comfortable with.<sup>9</sup> But hey… I’ve just reread the <a href="https://adv-r.hadley.nz/s4.html">S4 chapter in Advanced R</a>, so let’s see how we go with this, shall we? First, I’ll be polite and explicitly load the methods package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(methods)</span></code></pre></div>
</div>
<p>Next let’s see what kind of object <code>mod</code> is and what methods are defined for it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "mrgmod"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">methods</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgmod"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] [              [[             $              all.equal     
 [5] as.environment as.list        blocks         cmtn          
 [9] data_set       ev_rx          ev             evd           
[13] idata_set      init           initialize     knobs         
[17] loadso         names          omat           param         
[21] req            Req            revar          see           
[25] show           smat           stime          summary       
[29] update         within         zero_re       
see '?methods' for accessing help and source code</code></pre>
</div>
</div>
<p>A lot of those methods are unsurprising. For example, the <code>show()</code> method is just the S4 analog of <code>print()</code>. When we print the <code>mod</code> object at the console we’re just calling its <code>show()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc21a2b760d 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>But there are other methods that are kind of handy when inspecting a mrgmod object. For example, if we wanted to see the source code for the corresponding model specification file we could call the <code>see()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">see</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Model file:  pk1.cpp 
$PARAM @annotated
CL   :  1 : Clearance (volume/time)
V    : 20 : Central volume (volume)
KA   :  1 : Absorption rate constant (1/time)

$CMT  @annotated
EV   : Extravascular compartment
CENT : Central compartment

$GLOBAL
#define CP (CENT/V)

$PKMODEL ncmt = 1, depot = TRUE

$CAPTURE @annotated
CP : Plasma concentration (mass/volume)</code></pre>
</div>
</div>
<p>If we didn’t want quite that much detail, a <code>summary()</code> would have sufficed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model: pk1
- Parameters: [3]
  CL, V, KA
- Compartments: [2]
  EV, CENT
- Captured: [1]
  CP
- Outputs: [3]
  EV, CENT, CP</code></pre>
</div>
</div>
<p>I don’t intend to do an exhaustive walk through of all the methods defined for mrgmod objects. That would be tiresome, and in any case I don’t even know what all of them do yet. But what I will mention is that many of the methods exist to provide public accessors for these internal slots of a mrgmod object. To illustrate, here’s a list of all the slot names:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slotNames</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "model"    "modfile"  "package"  "soloc"    "project"  "start"   
 [7] "end"      "delta"    "add"      "tscale"   "digits"   "quiet"   
[13] "verbose"  "debug"    "preclean" "atol"     "rtol"     "ss_rtol" 
[19] "ss_atol"  "maxsteps" "hmin"     "hmax"     "ixpr"     "mxhnil"  
[25] "shlib"    "funs"     "omega"    "sigma"    "request"  "param"   
[31] "init"     "capture"  "Icap"     "capL"     "Icmt"     "cmtL"    
[37] "args"     "fixed"    "advan"    "trans"    "mindt"    "code"    
[43] "annot"    "envir"    "plugin"   "ss_cmt"  </code></pre>
</div>
</div>
<p>Okay so one of the slots is called “param”, and denoted <code>@param</code> to remind us that it’s a slot of an S4 object.<sup>10</sup> Calling the <code>param()</code> method is the appropriate way to access the <code>@param</code> slot, for instance.<sup>11</sup> The <code>see()</code> method is slightly fancier, but it too is essentially an accessor function for the <code>@modelfile</code> and <code>@code</code> slots. If I were an extremely unwise woman who ignored all the best practices for S4 classes I could use a command like <code>cat(mod@code, sep = "\n")</code> and get roughly the same output. This is of course a terrible idea: the slots of an S4 object are considered internal details and not part of the package API. Accessing them directly is considered a faux pas and you have only yourself to blame if the developer later changes the structure of the slots and your code breaks.</p>
<p>Indeed, the <em>only</em> reason I’m talking about them here is that I find it helpful for building my own mental model of what mrgsolve does, which will become apparent in the next section when I tackle the puzzlingly magical behaviour of the <code>ev()</code> function.</p>
</section>
<section id="event-objects" class="level3">
<h3 class="anchored" data-anchor-id="event-objects">Event objects</h3>
<p>Model objects represent the underlying ODE system. They don’t store information about “interventions” (external forcers) on the system. In the pharmacokinetic context the main intervention we’re thinking about is dosing. An events object returned by <code>ev()</code> returns a event schedule that would be familiar to any pharmacometrician:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb35-2">events</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Events:
  time amt ii addl cmt evid
1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>The <code>events</code> object looks a lot like a data frame, but is technically an S4 object with class “ev”. However, an ev object has only two slots, one of which is <code>@data</code> and – as you’d expect – it stores the data set as a data frame internally. So… yeah, it’s basically a data frame, and since there are <code>as.data.frame()</code> and <code>as_tibble()</code> methods defined for ev objects, so you can coerce it to whatever your preferred form of tabular data object happens to be.<sup>12</sup> I’m a tibble girl myself so…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(events)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 6
   time   amt    ii  addl   cmt  evid
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     0   100    24     9     1     1</code></pre>
</div>
</div>
<p>I’ll talk more about other ways to build fancier event schedules later, and you’ll see that it’s perfectly possible to use a simple data frame to specify an event schedule, but we’re not yet at the point where any of that is needed. Right now, all we’re trying to do is understand what happens in the simple simulation I showed at the start of this post.</p>
</section>
<section id="danielle-briefly-loses-her-fking-mind" class="level3">
<h3 class="anchored" data-anchor-id="danielle-briefly-loses-her-fking-mind">Danielle briefly loses her f**king mind</h3>
<p>Very soon I will move on to <code>mrgsim()</code>, the function that we use to run the simulation itself. Truly, we will get there soon. But we have one little matter to clear up first, related to the behaviour of <code>ev()</code>.</p>
<p>The previous section makes it look as if <code>ev()</code> is very simple, and viewed from the analyst perspective it really is quite simple. You use it to construct event schedules. However, <code>ev()</code> is not a simple function. It’s an S4 generic with dispatch on the first argument<sup>13</sup> and it returns a qualitatively different kind of object when called in a pipeline.</p>
<p>To understand the “Danielle briefly loses her f**king mind” aspect to this, let’s return to the model simulation pipeline that I lifted from the “Get Started” vignette and used at the start of the post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>If you’re expecting <code>ev()</code> to return an “ev” object – as indeed it would if I called <code>ev(amt = 100, ii = 24, addl = 9)</code> outside of a pipeline – this code makes absolutely no sense whatsoever. An “ev” object simply does not have the information required to run the simulations. Running a model-based simulation requires an actual model, and an “ev” object does not contain any slots that could possibly store a model object. So… something magical is happening. This code shouldn’t work, but it does???</p>
<p>I cried briefly. Then I read the <a href="https://mrgsolve.org/docs/reference/ev.html">documentation</a> properly. Then I cried some more.</p>
<p>After reading the documentation carefully, I now understand what’s going on here, but an explanation is required because if you don’t look closely it looks like magic.<sup>14</sup> When the first argument to <code>ev()</code> is a model object, it doesn’t return an event schedule. Instead, it returns another model object.<sup>15</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc21a2b760d 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>Looking at the printed output, you might think that the output here is identical to the original model object <code>mod</code>, but in this case looks are deceiving. The new model stores the event schedule internally: it’s tucked away in the <code>@args</code> slot.<sup>16</sup> To illustrate, let’s assign the output to a variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">mod_with_ev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>Now compare the pair:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>args</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>list()</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">mod_with_ev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>args</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$events
Events:
  time amt ii addl cmt evid
1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>So now things become a little clearer. After seeing this, what you might – correctly! – conclude is that at the other end of the pipeline the <code>mrgsim()</code> function is aware that the event schedule might not be passed explicitly, and knows to check within the model object if that is the case. Knowing all this, we’re now in a position to understand what happens during a pipeline like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>It’s a clever trick, and I imagine it’s something that a lot of data analysts find super handy. That said, it’s probably not something I would use myself. I’m a simple girl who likes her coffee black and her data pipelines transparent, so I’d probably avoid this particular workflow and instead write code that looks more like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb49-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb49-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb49-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb49-5"></span>
<span id="cb49-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the simulation</span></span>
<span id="cb49-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_e</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">events =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>Notice that I called <code>mrgsim_e()</code> here rather than <code>mrgsim()</code>. Because mrgsolve recognises that sometimes developers might want to call simulation functions programmatically, it provides several restricted versions of <code>mrgsim()</code> that require input in a specific format. The sneaky “event-schedule-inside-the-model-object” piping trick I showed at the start of the post does not work with <code>mrgsim_e()</code>, which – at least to my mind – makes it a safer choice when running simulations programmatically. Later in this post you’ll see me pivot to using <code>mrgsim_d()</code>, for much the same reason.</p>
</section>
<section id="data-frames-as-event-schedules" class="level3">
<h3 class="anchored" data-anchor-id="data-frames-as-event-schedules">Data frames as event schedules</h3>
<p>In the last section I kind of wrapped myself up in knots trying to get a handle on what <code>ev()</code> does under the hood, and as you can probably tell I have some mixed feelings about it. Fortunately, you don’t have to use it at all if you don’t want to: the <code>mrgsim_d()</code> function takes regular data frame as the <code>data</code> argument, and which plays the same role as the <code>events</code> argument in <code>mrgsim_e()</code>. You can generate event schedules in data frame format using the <code>ev_expand()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID time amt ii addl cmt evid
1  1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>The output here looks the same, but this time the output is a regular data frame, and so to be defensive in our code we would call <code>mrgsim_d()</code> to run a simulation that <em>requires</em> a data frame as input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb52-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb52-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb52-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb52-5"></span>
<span id="cb52-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the simulation</span></span>
<span id="cb52-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>As an aside, you might be wondering why this function is named <code>ev_expand()</code>. It’s not obvious from the example I showed above, but the <code>ev_expand()</code> function is essentially a convenience function that calls to <code>expand.grid()</code> to combine the levels of all variables input, with some extra syntactic sugar that auto-populates certain columns that are required for event schedule data sets. As an example, you might generate an event schedule defined for multiple subjects using a command like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID time amt ii addl cmt evid
1  1    0 100 24    9   1    1
2  2    0 100 24    9   1    1
3  3    0 100 24    9   1    1
4  4    0 100 24    9   1    1
5  5    0 100 24    9   1    1
6  6    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>Later in this post I’ll use <code>ev_expand()</code> in exactly this way.</p>
</section>
<section id="simulation-times" class="level3">
<h3 class="anchored" data-anchor-id="simulation-times">Simulation times</h3>
<p>We’re almost done unpacking the simple example, but I want to rewrite the code one last time. Until now, every time I’ve <code>mrgsim()</code> and its variants I’ve passed arguments <code>end</code> and <code>delta</code> as a way to override the default assumptions about what time points we would use when running our simulations. Internally, these arguments are used to construct a “tgrid” object that specifies the time points. We can construct this object explicitly by calling <code>tgrid()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>start:  0  end:    480  delta:  0.1  offset: 0  min:    0   max:    480 </code></pre>
</div>
</div>
<p>Using this knowledge, we can now write our simulation code like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb57-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb57-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb57-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb57-5">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation</span></span>
<span id="cb57-8">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span></code></pre></div>
</div>
<p>For the simple example, calling <code>tgrid()</code> explicitly doesn’t by us much, but if you dive into the documentation a little you discover that there are tools for working with tgrid objects that allow you to define the simulation times in much richer ways than a simple grid. But I digress.</p>
</section>
<section id="simulation-code" class="level3">
<h3 class="anchored" data-anchor-id="simulation-code">Simulation code</h3>
<p>Taking a step back, it’s worth thinking a little about the code I’ve ended up with. The piped code I started with probably works nicely for some people, but it’s not my preferred way to do this. The way I think of these things, a simulation has three main inputs (model object, event schedule, simulation times), and I find the code easier to read when these three inputs are passed as three separate arguments. The syntax used to specify the original simulation pipeline is very compact…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>…but that compactness comes at the expense of slightly obfuscating the inputs to <code>mrgsim()</code>. By way of contrast, this version of the code is considerably more verbose…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this would normally be the project folder</span></span>
<span id="cb59-2">dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb59-5">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb59-6">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb59-7">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb59-8"></span>
<span id="cb59-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation</span></span>
<span id="cb59-10">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span></code></pre></div>
</div>
<p>…but personally I find it a little easier to understand the structure of the simulation when its written like this. Other people might have different views though.</p>
</section>
<section id="simulation-output" class="level3">
<h3 class="anchored" data-anchor-id="simulation-output">Simulation output</h3>
<p>At this point the simulation is complete, so we can turn our attention to the output we’ve created. Here’s an example of the output returned by <code>mrgsim()</code> and its friends:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">out</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>As you’ve probably come to expect at this point, this is not technically a data frame, it’s an S4 object of class “mrgsims”, and can easily be coerced to a data frame using <code>as.data.frame()</code> or <code>as_tibble()</code>.</p>
<p>The mrgsolve package supplies a plot method for mrgsims objects that generates nice looking lattice plots, making it very easy to quickly produce helpful data visualisations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The plot method allows you to <a href="https://mrgsolve.org/docs/reference/plot_mrgsims.html">customise the plot</a> in a fairly flexible way, but there are some limits to what you can do with this approach. It’s not a big drawback though. If additional customisation is needed it’s pretty easy to convert the output to a tibble and then using ggplot2 to create the specific visualisation you want:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb63-2"></span>
<span id="cb63-3">out <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-4">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-5">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb63-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(EV, CENT, CP), </span>
<span id="cb63-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>, </span>
<span id="cb63-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb63-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb63-10">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb63-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb63-12">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EV"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gut amount"</span>,</span>
<span id="cb63-13">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CENT"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Central amount"</span>,</span>
<span id="cb63-14">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CP"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Central concentration"</span></span>
<span id="cb63-15">    )</span>
<span id="cb63-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb63-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Drug amounts and concentrations over time"</span>,</span>
<span id="cb63-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time (hours)"</span>,</span>
<span id="cb63-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb63-26">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="model-specification" class="level2">
<h2 class="anchored" data-anchor-id="model-specification">Model specification</h2>
<p>Up till now I’ve been relying entirely on prespecified pharmacokinetic models included in the mrgsolve model library. That was a useful thing to do earlier in this post while discussing the mechanics of <code>mrgsim()</code>, <code>ev()</code>, <code>mread()</code>, <code>tgrid()</code> and so on, but in practice you really need to understand how models are specified. I’m not going to attempt a comprehensive discussion of this topic, but if you want more detail, the chapters in the user guide I found most relevant are:</p>
<ul>
<li>The <a href="https://mrgsolve.org/user-guide/specification.html">model specification chapter</a></li>
<li>The <a href="https://mrgsolve.org/user-guide/topics.html">topics chapter</a></li>
</ul>
<section id="example-1-two-compartment-pk-model" class="level3">
<h3 class="anchored" data-anchor-id="example-1-two-compartment-pk-model">Example 1: Two compartment PK model</h3>
<p>There are two ways to specify a model in mrgsolve: you can pass a string to <code>mread_code()</code>, or you can read it from a model specification file using <code>mread_file()</code>. I’ll be using the latter method here. By convention, model specification files use a “.cpp” file extension, but it’s important to recognise that despite that, a model specification file is not, strictly speaking, C++ code. A model specification consists of a set of code blocks, and only some of those code blocks contain C++ code. Some blocks use R syntax, and others are plain text.<sup>17</sup></p>
<p>In any case, the first model specification I wrote is contained in the <a href="example1.cpp">example1.cpp</a> file bundled with this post, and is a very modest tweak to one of the models distributed with the mrgsolve package. Here’s what the file looks like:</p>
<div class="cell" data-file="example1.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example1.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb64-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-2"></span>
<span id="cb64-3">This is a minor variation of the <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cmt"</span> model that is distributed as</span>
<span id="cb64-4">part of the mrgsolve internal model library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> It has a single extravascular</span>
<span id="cb64-5">dosing compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>the GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> a central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> a</span>
<span id="cb64-6">peripheral compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span> Absorption from GUT is first order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb64-7">whereas elimination from CENT follows Michaelis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Menten kinetics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb64-8"></span>
<span id="cb64-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-10"></span>
<span id="cb64-11">VC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Central volume <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-12">Q    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Inter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compartmental clearance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-13">VP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Peripheral volume of distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-14">KA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Absorption rate constant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-15">VMAX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Maximum velocity of elimination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-16">KM   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Michaelis constant <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> elimination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-17"></span>
<span id="cb64-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-19"></span>
<span id="cb64-20">GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in gut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-21">CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-22">PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in peripherhal compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-23"></span>
<span id="cb64-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>GLOBAL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-25"></span>
<span id="cb64-26"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CP </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">          </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in central compartment</span></span>
<span id="cb64-27"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CT </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">        </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in peripheral compartment</span></span>
<span id="cb64-28"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CLNL </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>VMAX<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>KM<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// non-linear clearance, per MM kinetics</span></span>
<span id="cb64-29"></span>
<span id="cb64-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ODE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-31"></span>
<span id="cb64-32">dxdt_GUT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb64-33">dxdt_CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CLNL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb64-34">dxdt_PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb64-35"></span>
<span id="cb64-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-37"></span>
<span id="cb64-38">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>There are six code blocks in this file. I’ve specified them using square brackets (e.g., <code>[BLOCKNAME]</code>) because it reminds me of <a href="https://toml.io/en/">TOML</a>, but it’s also valid to use the dollar sign (e.g., <code>$BLOCKNAME</code>).<sup>18</sup> Block names are case insensitive: mrgsolve treats <code>[BLOCKNAME]</code> and <code>[blockname]</code> identically. The order in which you specify blocks doesn’t matter, but the order of statements within a block often does matter because some blocks are interpreted as C++ or R code.</p>
<p>The interpretation of these blocks is as follows:</p>
<ul>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-prob"><code>[PROB]</code></a> block is purely used to specify comments or notes on the model. It has no functional effect. You’ll very often see this block written in markdown format.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-param"><code>[PARAM]</code></a> block is used to pass a list of parameter values to be used in the model. When parsing this code block, mrgsolve interprets the values as R expressions (evaluated at build time), so if you were to define the central compartment volume <code>VC</code> to be <code>sqrt(400)</code>, the resulting model would store <code>VC</code> as the numeric value <code>20</code> within the internal parameter list. Normally, parameters would be defined as a comma separated list of name-value pairs (e.g., <code>VC = 20, Q = 2, ...</code>), but when you use the <code>@annotated</code> option as I have done here, you can write <code>VC : 20 : Central volume (volume)</code>. This version of the syntax allows you to provide comments on how each parameter is interpreted. Many of the code blocks support the <code>@annotated</code> option, and in most cases I find myself strongly preferring the annotated syntax.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#cmt-and-init"><code>[CMT]</code></a> block is used to specify compartment names, and much like the <code>[PARAM]</code> block it supports the <code>@annotated</code> keyword. By default, all compartments are presumed to be initialised with value 0. If you need to set different initial values for the drug amounts in each compartment, use an <code>[INIT]</code> block instead of a <code>[CMT]</code> block.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#global"><code>[GLOBAL]</code></a> block is used to specify global variables and <a href="https://cplusplus.com/doc/tutorial/preprocessor/">preprocessor directives</a> in the C++ code that mrgsolve constructs from the model specification file. This block is, not surprisingly, interpreted as literal C++ code. In this example I’ve used the <code>#define</code> directive to indicate that the plasma concentration <code>CP</code> is simply an alias for <code>(CENT / VP)</code>, and similarly the tissue<sup>19</sup> concentration <code>CT</code> is an alias for <code>(PERIPH / VP)</code>, and so on.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-ode"><code>[ODE]</code></a> block is used to specify the differential equations that define the model. For every compartment in your model there is a corresponding <code>dxdt_</code> variable: for instance, if <code>CENT</code> denotes the drug amount in the central compartment, then there is automatically a variable <code>dxdt_CENT</code> that denotes its first derivative with respect to time, and you must specify the value for <em>all</em> compartment derivatives even if they are zero. The <code>[ODE]</code> block is interpreted as literal C++ code, and you can declare and initialise new variables within the <code>[ODE]</code> block if you want to. Note that you may sometimes see a <code>[DES]</code> code block instead of an <code>[ODE]</code> block. They’re the same thing: <code>[DES]</code> is an alias for <code>[ODE]</code>.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-capture"><code>[CAPTURE]</code></a> block is used to indicate variables that should be “captured” in the simulation and returned to the user in R when <code>mrgsim()</code> is called. The user guide doesn’t say so explicitly, but from what I can tell the compartment amount variables are always captured, and you don’t need to list those here. The only things you need to specify here are the <em>other</em> quantities that you want the simulation to return. It supports the <code>@annotated</code> keyword, and I’ve used that here because honestly my sanity dissolves very quickly when trying to read model specification files that don’t use the annotations.</p></li>
</ul>
<p>Okay, now that I’ve written my model specification file let’s pivot back to my R session and use it to run a simulation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb65-2">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb65-3">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb65-4">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">960</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb65-5"></span>
<span id="cb65-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation and plot results</span></span>
<span id="cb65-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb65-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Yes, that all seems to work nicely. No, I did not have any solid justification for choosing these parameters. It’s just a toy.</p>
</section>
<section id="example-2-two-compartment-population-pk-model" class="level3">
<h3 class="anchored" data-anchor-id="example-2-two-compartment-population-pk-model">Example 2: Two compartment population-PK model</h3>
<p>The simulation in the previous section is relatively simple. It’s a one compartment model, there are no random effects or covariates, and the simulation involves only a single subject. The nonlinear clearance aspect is a little fancy, since <a href="https://en.wikipedia.org/wiki/Michaelis%E2%80%93Menten_kinetics">Michaelis-Menten kinetics</a> aren’t entirely simple, but apart from that there’s not much going on in this model.</p>
<p>Time to add some complexity. This time around I’ll build a standard two compartment model with first-order absorption and first-order elimination, but I’ll now allow random effects on all model parameters. Conventionally,<sup>20</sup> the variables in a population-PK model follow a uniform convention, and this is very often mirrored in software and analysis code. I’m now familiar enough with PK modelling that I’ve internalised these conventions, but since the audience of my blog is wider, here are the key ones:</p>
<ul>
<li>Population typical values are denoted with thetas (<img src="https://latex.codecogs.com/png.latex?%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CTheta">)<sup>21</sup></li>
<li>Population scale parameters are denoted with omegas (<img src="https://latex.codecogs.com/png.latex?%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">)</li>
<li>Random effect terms are denoted with etas (<img src="https://latex.codecogs.com/png.latex?%5Ceta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta">)</li>
<li>Variability of the measurement is denoted with sigmas (<img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CSigma">)</li>
</ul>
<p>With that little refresher out of the way, let’s have a look at the model specification file:</p>
<div class="cell" data-file="example2.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example2.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb66-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-2"></span>
<span id="cb66-3">This is a population<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>PK two<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compartment model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb66-4"></span>
<span id="cb66-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-6"></span>
<span id="cb66-7">TVVC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> VC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-8">TVVP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> VP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-9">TVKA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-10">TVCL   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-11">TVQ    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-12"></span>
<span id="cb66-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OMEGA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-14"></span>
<span id="cb66-15">EVC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on VC</span>
<span id="cb66-16">EVP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on VP</span>
<span id="cb66-17">EKA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on KA</span>
<span id="cb66-18">ECL   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on CL</span>
<span id="cb66-19">EQ    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on Q</span>
<span id="cb66-20"></span>
<span id="cb66-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-22"></span>
<span id="cb66-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> VC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVVC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EVC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// central compartment volume</span></span>
<span id="cb66-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> VP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVVP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EVP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// peripheral compartment volume</span></span>
<span id="cb66-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EKA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate constant</span></span>
<span id="cb66-26"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ECL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance</span></span>
<span id="cb66-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> Q  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVQ  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// intercompartmental clearance</span></span>
<span id="cb66-28"></span>
<span id="cb66-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-30"></span>
<span id="cb66-31">GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in gut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-32">CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-33">PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in peripherhal compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-34"></span>
<span id="cb66-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>GLOBAL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-36"></span>
<span id="cb66-37"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CP </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">   </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in central compartment</span></span>
<span id="cb66-38"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CT </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in peripheral compartment</span></span>
<span id="cb66-39"></span>
<span id="cb66-40"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ODE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-41"></span>
<span id="cb66-42">dxdt_GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-(</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-43">dxdt_CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-44">dxdt_PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-45"></span>
<span id="cb66-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-47"></span>
<span id="cb66-48">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>Things to notice here:</p>
<ul>
<li><p>The <code>[PARAM]</code> block is essentially the same as last time. The only difference is that I’ve now given all the variables a “TV” prefix, to indicate that they now refer to the population typical value for the corresponding quantity (e.g., <code>TVCL</code> is the typical value for clearance <code>CL</code>). I would have preferred a different naming scheme, personally, but since this approach is pretty standard in the field I’ll adhere to it. In any case, these “typical value” variables collectively form the <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta"> vector of fixed effects in the model.</p></li>
<li><p>The purpose of the <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-omega"><code>[OMEGA]</code></a> block to specify a variance-covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">, such that the vector of random effects <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta_i"> for the <img src="https://latex.codecogs.com/png.latex?i">-th simulated person is sampled from a multivariate normal distribution, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta_i%20%5Csim%20%5Cmbox%7BNormal%7D(%5Cboldsymbol%7B0%7D,%20%5Cboldsymbol%5COmega)">. By default, mrgsolve assumes that <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega"> is a diagonal matrix, so all you need to do is specify the vector of variances along the main diagonal.<sup>22</sup> The <code>[OMEGA]</code> block supports the <code>@annotated</code> option, which I’ve used here to provide human-readable explanations of each of the terms. Note that the variable names I’ve used here are things like <code>ECL</code>, <code>EVP</code>, and so on: the “E” prefix is short for “ETA” and indicates that they refer to the value of the sampled random effect term (i.e., an <img src="https://latex.codecogs.com/png.latex?%5Ceta"> value), not the variance itself (i.e., an <img src="https://latex.codecogs.com/png.latex?%5Comega"> value). In that sense I find it helpful to think of the <code>[OMEGA]</code> block as specifying the sampling scheme for the random effect terms, rather than literally a covariance matrix.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-main"><code>[MAIN]</code></a> block, as you might expect given the name, is interpreted with C++ syntax.<sup>23</sup> It serves multiple purposes, but what I’m using it for here is specifying relationships between variables. For instance, the code on line 26 defines the clearance <code>CL</code> for a specific subject as the product of the population typical value <code>TVCL</code> and the exponentiated random effect <code>exp(ECL)</code>.<sup>24</sup></p></li>
<li><p>The <code>[CMT]</code>, <code>[GLOBAL]</code>, <code>[ODE]</code>, and <code>[CAPTURE]</code> blocks are all more or less as they were before. The code is a little different because the model is different, but there’s no new concepts required to read these blocks.</p></li>
</ul>
<p>Now that we’ve talked through the code, let’s go back to R and run a simulation using this model. In the extract below I’ve run a small simulation with six individuals. They all have the same dosing schedule, but we end up with different data in each case because the model samples the random effect terms separately for each person:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb67-2">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example2.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb67-3">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb67-4">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb67-5"></span>
<span id="cb67-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation and plot results</span></span>
<span id="cb67-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb67-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As before, I haven’t tried to choose model parameters in the principled way: I just wanted to make sure the code is functioning properly.</p>
</section>
<section id="example-3-other-customisations" class="level3">
<h3 class="anchored" data-anchor-id="example-3-other-customisations">Example 3: Other customisations</h3>
<p>I’ll go through one last example, just to illustrate some of the other things you can build into your model specification file. The code below specifies a one-compartment population-PK model, and it incorporates a few features that haven’t appeared in any of the examples so far. First, the code:</p>
<div class="cell" data-file="example3.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example3.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb68-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-2"></span>
<span id="cb68-3">This is an example adapted from the user guide <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topics"</span> section<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb68-4"></span>
<span id="cb68-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-6"></span>
<span id="cb68-7">TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical clearance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>hr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-8">TVV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.6</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical volume of distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-9">TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.35</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical absorption rate constant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>hr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-10">WT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-11">SEX  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Sex coded as male <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> female <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb68-12">WTCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Coefficient <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> the effect of weight on CL</span>
<span id="cb68-13">SEXV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.878</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Coefficient <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> the effect of sex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> on V</span>
<span id="cb68-14"></span>
<span id="cb68-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-16"></span>
<span id="cb68-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WTCL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ECL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> V  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SEXV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EKA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-20"></span>
<span id="cb68-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OMEGA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>correlation <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>block <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-22"></span>
<span id="cb68-23">ECL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.23</span>          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on CL</span>
<span id="cb68-24">EV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on V</span>
<span id="cb68-25">EKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.87</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on KA</span>
<span id="cb68-26"></span>
<span id="cb68-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SIGMA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-28"></span>
<span id="cb68-29">PROP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Proportional residual error</span>
<span id="cb68-30">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Additive residual error</span>
<span id="cb68-31"></span>
<span id="cb68-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-33"></span>
<span id="cb68-34">GUT  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Dosing compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-35">CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-36"></span>
<span id="cb68-37"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PKMODEL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-38"></span>
<span id="cb68-39">ncmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> depot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TRUE</span>
<span id="cb68-40"></span>
<span id="cb68-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TABLE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-42"></span>
<span id="cb68-43"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb68-44"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> DV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> PROP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ADD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb68-45"></span>
<span id="cb68-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-47"></span>
<span id="cb68-48">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> True plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-49">DV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Observed plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>There’s a few things to note here.</p>
<ul>
<li><p>There is a binary-valued covariate <code>SEX</code><sup>25</sup> and a continuous covariate <code>WT</code> (weight) specified in the <code>[PARAM]</code> block. Coefficients specifying the effect of sex on distribution volume <code>SEXV</code> and the effect of weight on clearance <code>WTCL</code> are also included in the <code>[PARAM]</code> block. Although from a statistical perspective the value of the covariate that varies across person (<code>WT</code>) and the regression coefficient specifying an effect <code>WTCL</code> are very different kinds of thing, from a simulation perspective they’re both just numbers you can feed into the expressions in the <code>[MAIN]</code> block that define the pharmacokinetic quantities <code>CL</code>, <code>V</code>, and <code>KA</code>.</p></li>
<li><p>The <code>[OMEGA]</code> block now has correlated random effects. I’ve used the <code>@block</code> option to indicate that the off-diagonal elements are included in the code block, and the <code>@correlation</code> option to indicate that the off-diagonal elements are correlations (rather than covariances).</p></li>
<li><p>We now have sources of measurement error included in the model specification. The scale of the noise terms is set in the <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-sigma"><code>[SIGMA]</code></a> code block, and for this model we include both proportional error (variability scales proportional to the true value) and additive error (constant variability of error). Note that the <code>[SIGMA]</code> block is used only to declare the variables and set their values. To actually incorporate the measurement error into the model code, we use the <code>[TABLE]</code> block.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-table"><code>[TABLE]</code></a> block contains C++ code that is executed at the end of each time step, before the simulation steps forward to the next point in time. At this point the drug amounts in each compartment have been computed, as have any time-point dependent stochastic terms (i.e., the noise terms specified in the <code>[SIGMA]</code> block), and we can use them to calculate other quantities. In this case, I’ve used the <code>[TABLE]</code> block to calculate the blood plasma concentration <code>CP</code>, and to calculate a hypothetical dependent variable <code>DV</code> that has noise added.</p></li>
<li><p>The <code>[ODE]</code> block has been replaced with a <a href="https://mrgsolve.org/user-guide/specification.html#pkmodel"><code>[PKMODEL]</code></a> block. This is used to indicate that mrgsolve should use analytic solutions rather than an ODE solver. As you might expect, this is only possible for a smallish subset of models that (a) have analytic solutions that (b) are known to mrgsolve. In this particular case the model is a standard one-compartment model, for which analytic solutions are available. The <code>ncmt = 1</code> part of this block indicates that it’s a one-compartment model, and the <code>depot = TRUE</code> part indicates that the dosing compartment (the gut, in this case) should be included in the model even though it’s not a “real” compartment. Additional information on how this code block is parsed is <a href="https://mrgsolve.org/docs/reference/PKMODEL.html">here</a>.</p></li>
</ul>
<p>To see all this at work, let’s run a small simulation. First, we’ll read the model specification file and compile the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example3.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Next, let’s take a look at the default parameters in this model. As you can see in the output, by default the subject is presumed to be a male who weighs 70kg:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=7):
 name value . name value
 SEX  0     | TVV  35.6 
 SEXV 0.878 | WT   70   
 TVCL 1.1   | WTCL 0.75 
 TVKA 1.35  | .    .    </code></pre>
</div>
</div>
<p>As usual, we’ll specify some dosing events and some time points at which the simulation will be evaluated. I’ll also set it up that we always simulate two subjects at whatever parameter values we feed into the simulation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb72-2">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
</div>
<p>Okay, now let’s run a simulation at the default parameter values. Here’s some data from two male subjects who both weigh 70kg:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb73-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> CP <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> DV)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-45-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The <code>~ CP + DV</code> formula in the <code>plot()</code> command is used to control which variables are plotted. I don’t want to show everything in these plots: we’re showing the drug concentration in the central compartment <code>CP</code>, and the hypothetical dependent variable <code>DV</code> obtained by adding measurement error to the <code>CP</code> value.</p>
<p>But suppose we didn’t actually want to simulate a 70kg male, and instead we want a 60kg female. To specify this, we have to update the relevant parameters in the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SEX =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WT =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span></code></pre></div>
</div>
<p>So now our model parameters look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=7):
 name value . name value
 SEX  1     | TVV  35.6 
 SEXV 0.878 | WT   60   
 TVCL 1.1   | WTCL 0.75 
 TVKA 1.35  | .    .    </code></pre>
</div>
</div>
<p>Simulating from the model at these parameter settings gives us this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb77-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> CP <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> DV)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-48-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>Before wrapping up, some quick links to some resources:</p>
<ul>
<li><p>The <a href="https://mrgsolve.org/user-guide/">mrgsolve user guide</a> is probably not the place you want to start, because it very quickly dives in deep and talks about the domain specific language used to specify models, but once you’ve wrapped your head around the basics that’s the place to look for details.</p></li>
<li><p>The <a href="https://mrgsolve.org/vignettes/">mrgsolve vignettes</a> provide a nice place to start, but one thing you need to keep in mind is that the vignettes posted at <a href="https://mrgsolve.org/vignettes/">mrgsolve.org/vignettes</a> are not identical to the vignettes that appear on the pkgdown website (i.e., <a href="https://mrgsolve.org/docs/articles/">mrgsolve.org/docs/articles</a>), so it’s worth being careful to check which one you’re looking at!</p></li>
<li><p>Speaking of which, the <a href="https://mrgsolve.org/docs/">mrgsolve pkgdown site</a> provides all the usual documentation that you’d expect of an R package in the usual format. Function reference guides, some vignettes, links to github, etc., all that is there.</p></li>
<li><p>The <a href="https://mrgsolve.org/learn.html">learn mrgsolve</a> page on the mrgsolve website has links to presentations, courses, and other things that can be helpful in getting started.</p></li>
<li><p>Finally, there’s a <a href="https://mrgsolve.org/blog/">blog</a> associated with the package that has a variety of tips, tricks, updates and news.</p></li>
</ul>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>As with so many of my posts, I find that I’ve gotten to the end and I have no idea what else to say. I don’t write a post like this one to advocate for a package or a workflow, and I definitely don’t write these things to express opinions or whatever. I write because I enjoy writing and because the act of writing deepens my own understanding of a topic. Viewed from that perspective, writing this post has served its purpose so… mission accomplished?</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In this respect R is the unchallenged queen of languages in pharmacometrics. It’s very different to data science in the tech space, where Python is the lingua franca and R is seen as a second-class citizen. I have not yet seen a single example of anyone using Python for data analysis in this world. Judging from papers I’ve read, Julia has a small presence (e.g., you can use <a href="https://turing.ml/">Turing.jl</a> for building ODE models in Julia), but that’s the only time I’ve ever seen any statistical language other than R in this space.↩︎</p></li>
<li id="fn2"><p>The acronym PK is universally used as shorthand for “pharmacokinetics”, and a PK model is one where the primary variable you’re interested in modelling is the plasma concentration over time for some drug. If you’re totally new to this space, the post I wrote on <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a> was written from a total-newbie perspective and spells out a lot the basic terminology used in PK modelling.↩︎</p></li>
<li id="fn3"><p>There are a <em>lot</em> of tools in this space: NONMEM is the oldest and most-widely used, but in addition there’s Stan/Torsten, Monolix, nlmixr, Phoenix NLME, and probably many others I don’t know about yet…↩︎</p></li>
<li id="fn4"><p>I can’t tell if the original package is still under active development or if it’s been deprecated. The <a href="https://nlmixrdevelopment.github.io/RxODE/">RxODE</a> package still appears on the nlmixr website and on GitHub, but the package is (at present?) archived on CRAN.↩︎</p></li>
<li id="fn5"><p>Specifically, it wraps the public domain Fortran library <a href="https://computing.llnl.gov/projects/odepack">ODEPACK</a>.↩︎</p></li>
<li id="fn6"><p>In this example it’s not very interesting because CP is just the ratio of CENT and V, and since V doesn’t change over time, the curves for CP and CENT look identical. That isn’t true for simulations with multiple sujects, however, since V can and does vary across individuals.↩︎</p></li>
<li id="fn7"><p>As an aside, one thing I’ve noticed in the software development world is that developers who don’t work in statistics have a tendency to get very worked up about R having all these hyper-flexible functions that can behave in wildly different ways in different contexts. While I do understand that annoyance, I also think it’s often misplaced. R is fundamentally a <em>statistical programming language</em> and the primary goal is to support analysts. It’s not trying to be Python, and it’s even less interested in being Rust. You wouldn’t think so from social media discussions – which are massively skewed towards developers – but the typical R user is someone working interactively at the console, constructing a script iteratively as they explore and work with the data set they’ve been tasked to analyse. In that context, the hyper-flexibility of a lot of R functions is designed for the convenience of the analyst, not the convenience as a developer.↩︎</p></li>
<li id="fn8"><p>Developers reading this are probably wondering where the model shared object ends up when compilation happens. By default <code>mread()</code> puts the compiled model in the R temp folder, but you can override this in a persistent way by setting the <code>"mrgsolve.soloc"</code> option, or overriding it in the call to <code>mread()</code> via the <code>soloc</code> argument. You can also suppress compilation if you want by setting <code>compile = FALSE</code>. But probably any devs reading this would likely discover that within 5 minutes of reading the documentation anyway so there’s no real need for me to mention it.↩︎</p></li>
<li id="fn9"><p>I mean… of the <em>widely-used</em> OOP systems, it’s the one I’m least comfortable with. The wild abandon with which R spawns new object oriented programming systems is… a lot to keep up with.↩︎</p></li>
<li id="fn10"><p>Why yes, this blog post is <em>also</em> an exercise in “Danielle reminds herself how S4 works and no she bloody well is not going to talk about multiple inheritance and multiple dispatch in S4 here she’s not that much of a masochist”.↩︎</p></li>
<li id="fn11"><p>As an aside, <code>param(mod)</code> returns an S4 object of class “parameter_list” which in turn has a <code>show()</code> method that provides that prettified looking table pf parameters, but from a practical perspective you might just want to coerce it to a regular list using <code>as.list(param(mod))</code>.↩︎</p></li>
<li id="fn12"><p>There is also an <code>as.ev()</code> function that allows conversion in the other direction.↩︎</p></li>
<li id="fn13"><p>More precisely, method dispatch takes place off the <code>x</code> argument which is the first argument to the <code>ev()</code> generic, but since we’re talking about pipelines here, the name isn’t as important as the position.↩︎</p></li>
<li id="fn14"><p>As a rule I don’t dislike “magic” code. I mean… it would be weird to be an R user and not appreciate its virtues. Lazy evaluation and non-standard evaluation in R are powerful tools, and are the basis of a lot of “magic” in R. They make life a lot easier for the analyst but it comes at the price of making life harder for the developer. Because of that I’ve ended up with a habit of trying to dig into the details every time I find R code that feels magical.↩︎</p></li>
<li id="fn15"><p>To be precise, <code>ev()</code> is an S4 generic with dispatch on the <code>x</code> argument. If <code>x</code> is missing, the relevant <code>ev()</code> method returns an “ev” object. However, if <code>x</code> has class “mrgmod”, the relevant method returns another “mrgmod” object. I’ll confess this makes me a little uneasy.↩︎</p></li>
<li id="fn16"><p>Oh look, that apparently-irrelevant excursion she did talking about the mrgmod object slots turns out to be relevant! It’s almost as if she’s written things before!↩︎</p></li>
<li id="fn17"><p>I’m guessing that the logic here is that, even though some code blocks use R syntax, and others aren’t interpreted as code at all, the model build process is such that eventually it all becomes C++, and a C++ compiler constructs the binary. There’s logic to it, but it does feel a bit disorienting seeing “.cpp” files that aren’t actually C++ source.↩︎</p></li>
<li id="fn18"><p>I suspect that the <code>$BLOCKNAME</code> format is actually canonical because that’s the version you see when model code is printed when calling <code>see()</code>, but I’m going to use <code>[BLOCKNAME]</code> throughout this post because I personally find it easier to read. <a href="https://dictionary.cambridge.org/dictionary/english/ymmv">YMMV</a>.↩︎</p></li>
<li id="fn19"><p>Confession: I’m not 100% certain that the “T” in “CT” stands for tissue, since I copied this line from one of the models in the mrgsolve model library, but I think it’s the right interpretation given that the central compartment amount is usually intended to refer to “amount of drug the blood, sort of” and the peripheral compartment is “amount of drug in body tissues, sort of”. The “sort of” is important though: pharamacokinetic compartments are abstractions, and are they only loosely related to the corresponding physiology.↩︎</p></li>
<li id="fn20"><p>As far as I can tell, most of these conventions are “for compatibility with NONMEM”, and I am very rapidly starting to read “for compatibility with NONMEM” with exactly the same level of jaundiced cynicism that I apply when I find base R documentation that explains that R does something absolutely unhinged “for compatibility with S”. I deeply admire the commitment to backward compatibility and/or notational consistency, but also oh sweet lord in heaven it is <strong>EXHAUSTING</strong>.↩︎</p></li>
<li id="fn21"><p>In the spirit of stating assumptions, I’ll also add this. As is typical in many (but not all) disciplines: italicised lower case denotes a scalar, bold italic lower case denotes a vector, bold upper case denotes a matrix.↩︎</p></li>
<li id="fn22"><p>I’m not going to discuss them here, but note that the <code>@block</code> option allows you to pass a complete variance-covariance matrix, and the <code>@correlation</code> option allows you to specify correlations instead of covariances on the off-diagonals. The user guide discusses these and several other options that are supported in the <code>[OMEGA]</code> block. Of particular note: there’s a section in the user guide on <code>[OMEGA]</code> shows you how to use <code>@block</code> and <code>@annotated</code> together.↩︎</p></li>
<li id="fn23"><p>The <code>[MAIN]</code> block is analogous to the NONMEM <code>$PK</code> block, and indeed <code>[PK]</code> is allowed as an alias for <code>[MAIN]</code> in mrgsolve model specification files.↩︎</p></li>
<li id="fn24"><p>For folks used to linear regression models and random effect terms that compose additively with the fixed effect, it’s worth noting that in PK models everything tends to be log-linear. For any particular PK quantity <img src="https://latex.codecogs.com/png.latex?x">, the relationship takes the form <img src="https://latex.codecogs.com/png.latex?%5Clog%20x%20=%20%5Ceta_x%20+%20%5Clog%20%5Ctheta_x">.↩︎</p></li>
<li id="fn25"><p>I am absolutely <strong>not</strong> going to enter into any discussion of the respects in which sex is not strictly a binary variable, not in this post. There is a time and a place for that conversation, and this is neither that time nor that place. I mean, we’re talking about a category of statistical models that simplify the entire human body into “a couple of leaky buckets and a tinfoil ODE system”. They are extremely <strong>useful</strong> models, per George Box’s famous aphorism, but one does not ever presume they are biologically accurate. That would be absurd.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pharmacometric Simulation with Mrgsolve},
  date = {2023-08-14},
  url = {https://blog.djnavarro.net/posts/2023-08-14_mrgsolve},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pharmacometric Simulation with
Mrgsolve.”</span> August 14, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve">https://blog.djnavarro.net/posts/2023-08-14_mrgsolve</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/</guid>
  <pubDate>Sun, 13 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/danilo-alvesd-a7OdG45prSM-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Four ways to write assertion checks in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-08_being-assertive/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Once upon a time in a land far, far away, I was a bright young thing who wrote my data analyses with the kind of self-assured confidence that only a bright young thing can have. I trusted myself to write analysis code that does exactly what I wanted it to do. After all, I was a smart lady who knows her data and knows her analysis tools. In those halycon days of yore, before I’d been badly burned by sequentially arriving data that don’t have precisely the same structure every single time the data updates, I had the naivete to believe that if something changed in unexpected ways, <em>I’d notice it</em>.</p>
<p>Sweet summer child.</p>
<p>What I have learned since then, following the well-trodden path of every embittered old data analyst whose heart has shrivelled into a dark ball of data cynicism, is that none of this is true:</p>
<ul>
<li>I don’t know the tools as well as I think I do.</li>
<li>I don’t know the data as well as I think I do.</li>
<li>When the data change unexpectedly, I don’t always notice it.</li>
</ul>
<p>Worst of all: <strong>when my assumptions fail, my code can silently do the wrong thing and never throw an error</strong>. This happens very, very easily when data structure can change over time, or when code is reused in a new context. Which… happens a lot, actually.</p>
<p>Real world data are horrible.</p>
<p>Learning my lessons the hard way has taught me the importance of writing assertion checks. The idea behind an assertion check is very simple: write some code that makes sure that your code fails loudly by throwing an error as soon as an assumption is violated.<sup>1</sup> As the saying goes, you want your analysis code to fail fast and fail loudly every time that something is not “as expected”.</p>
<p>So. Let’s talk about four different approaches to writing assertions in R.<sup>2</sup></p>
<section id="just-stopifnot-scott" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="just-stopifnot-scott">Just <code>stopifnot()</code>, Scott</h2>
<p>Here’s a simplified version of a function that I use a lot in my generative art workflows. The <code>identifier()</code> function constructs a unique identifier for an output generated from a particular system:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb1-2">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb1-3">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb1-5">}</span></code></pre></div>
</div>
<p>So let’s say I’m creating a piece from a version 1 system called “rtistry”, and using 203 as my random seed. The unique identifier for this piece would be as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>The idea here is that:</p>
<ul>
<li>The identifier should consist of exactly three parts, separated by underscores</li>
<li>The first part should be the name of the generative art system</li>
<li>The second part should specify the version of the system as a two-digit number</li>
<li>The third part should specify the RNG seed used to generate this piece as a four-digit number</li>
</ul>
<p>For most of my systems this will produce a globally unique identifier, since I try to design them so that the only input parameter to the system is the RNG seed.</p>
<p>Notice, though, that there are some unstated – and unchecked! – assumptions about the kind of input that the function will receive. It’s implicitly assumed that <code>name</code> will be a character string that does not have any underscores, periods, or white spaces, and it’s also assumed that <code>version</code> and <code>seed</code> are both positive valued integers (or at least “integerish”) with upper bounds of 99 and 9999 respectively. Weirdness happens when I break those assumptions with my input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "r tistry_1.02_0203"</code></pre>
</div>
</div>
<p>As a rule, of course, I don’t <em>deliberately</em> pass bad inputs to my functions, but if I want to be defensive about it, I should validate the inputs so that <code>identifier()</code> throws an error if I make a mistake and pass it input that violates the assumptions. The base R function <code>stopifnot()</code> is designed to solve exactly this problem:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb6-2">  </span>
<span id="cb6-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># throw error if any of the following assertions fail</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name must be a scalar</span></span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be a scalar</span></span>
<span id="cb6-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be a scalar</span></span>
<span id="cb6-8">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(version),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be a whole number</span></span>
<span id="cb6-9">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(seed),     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be a whole number</span></span>
<span id="cb6-10">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name can't have spaces, periods, or underscores </span></span>
<span id="cb6-11">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be positive</span></span>
<span id="cb6-12">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be less than 10000</span></span>
<span id="cb6-13">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be positive</span></span>
<span id="cb6-14">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be less than 100</span></span>
<span id="cb6-15">  )</span>
<span id="cb6-16">  </span>
<span id="cb6-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb6-18">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb6-19">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb6-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb6-21">}</span></code></pre></div>
</div>
<p>Using <code>stopifnot()</code> in this way causes all of the following to error and throw informative error messages:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("r tistry", 1, 203): !stringr::str_detect(name, "[[:space:]._]") is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1.02, 203): rlang::is_integerish(version) is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1, 20013): seed &lt; 10000 is not TRUE</code></pre>
</div>
</div>
<p>The error messages aren’t the prettiest, but they do the job. In each case you can look at the error message and figure out what went wrong when calling the <code>identifier()</code> function. That said, you can sort of see the limitations to <code>stopifnot()</code> by looking at my source code: because <code>stopifnot()</code> throws pretty generic error messages that you can’t customise, my first instinct when writing the function was to group <em>all</em> my assertions into a single <code>stopifnot()</code> call, and then – because there isn’t a lot of structure to my assertion code – I’ve added comments explaining what each assertion does. That’s… fine. But not ideal.</p>
<p>As it turns out, there <em>are</em> ways to provide more informative error messages with <code>stopifnot()</code>. You can write a <code>stopifnot()</code> assertion as a name-value pair:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be scalar"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>If this assertion is violated, the error message thrown by the <code>stopifnot()</code> function corresponds to the name of the assertion, as illustrated below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> </span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be scalar"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `version` must be scalar</code></pre>
</div>
</div>
<p>It’s kind of clunky but it works.</p>
<p>Actually, I have a confession to make. I actually didn’t know this trick until I’d already posted the original version of this post to the internet, so I have Jim Gardner to thank for kindly called my attention to it.</p>
<p><strong>Summary</strong>: <code>stopifnot()</code> is suprisingly effective. It’s very general, and works for any expression that yields <code>TRUE</code> or <code>FALSE</code>. There are no dependencies since it’s a base R function. It does have some downsides: dealing with error messages is a bit clunky, and the code isn’t always the prettiest, but nevertheless it does the job that needs doing.</p>
</section>
<section id="just-assert_that-kat" class="level2">
<h2 class="anchored" data-anchor-id="just-assert_that-kat">Just <code>assert_that()</code>, Kat</h2>
<p>The <a href="https://github.com/hadley/assertthat">assertthat</a> package is designed to provide a drop-in replacement for the <code>stopifnot()</code> function, one that allows you to compose your own error messages when an assertion fails. It does have a variety of other convenience functions, but to be honest the main advantage over <code>stopifnot()</code> is the superior control over the error message. In practice, I find that this functionality allows me to write assertion code that is (a) easier to read, and (b) produces better error messages when an assertion fails.</p>
<p>To illustrate, here’s the code I end up with when I revisit my generative art <code>identifier()</code> function using assertthat:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertthat)</span>
<span id="cb16-2"></span>
<span id="cb16-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb16-4">  </span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`name`, `version`, and `seed` must all have length 1"</span></span>
<span id="cb16-10">  )</span>
<span id="cb16-11"></span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(   </span>
<span id="cb16-13">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>),</span>
<span id="cb16-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`name` must not contain white space, periods, or underscores"</span></span>
<span id="cb16-15">  )</span>
<span id="cb16-16"></span>
<span id="cb16-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-18">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(version),</span>
<span id="cb16-19">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb16-20">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be a whole number between 1 and 99"</span></span>
<span id="cb16-22">  )</span>
<span id="cb16-23">   </span>
<span id="cb16-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-25">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(seed),</span>
<span id="cb16-26">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb16-27">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,</span>
<span id="cb16-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`seed` must be a whole number between 1 and 9999"</span>    </span>
<span id="cb16-29">  )</span>
<span id="cb16-30">  </span>
<span id="cb16-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb16-32">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb16-33">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb16-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb16-35">}</span></code></pre></div>
</div>
<p>Like <code>stopifnot()</code>, the <code>assert_that()</code> function allows you to construct arbitrary assertions, which I find useful. Additionally, the <code>assert_that()</code> function has some nice properties when compared to <code>stopifnot()</code>. Because it takes a <code>msg</code> argument that allows you to specify the error message, it gently encourages you to group together all the assertions that are of the same kind, and then write an informative message tailored to that subset of the assertion checks. This produces readable code because the error message is right there next to the assertions themselves, and the assertions end up being more organised than when I used <code>stopifnot()</code> earlier.</p>
<p>In any case, let’s have a look. First, let’s check that this works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>Second, let’s check that all of these fail and throw readable error messages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `name` must not contain white space, periods, or underscores</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `version` must be a whole number between 1 and 99</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `seed` must be a whole number between 1 and 9999</code></pre>
</div>
</div>
<p>I find myself preferring this as a way of generating error messages when input arguments to a function don’t receive appropriate input. Because I know what I want the function to do, I’m able to write concise but informative error messages that are appropriate to the specific set of assertions that I’ve included within any particular <code>assert_that()</code> call.</p>
<p><strong>Summary</strong>: The assertthat package has a pretty specific aim: to provide an <code>assert_that()</code> function works as a drop-in replacement for <code>stopifnot()</code> that allows custom error messages. Given that limited goal, it works nicely.</p>
</section>
<section id="just-assert_-it-kit" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="just-assert_-it-kit">Just <code>assert_*()</code> it, Kit</h2>
<p>The <a href="https://bitbucket.org/richierocks/assertive/">assertive</a> package provides a large collection of <code>assert_*()</code> functions that are each tailored to a specific type of assertion, and designed to produce error messages that are tailored to that specific case. Here’s an example where I apply this approach to checking the inputs to the <code>identifier()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertive)</span>
<span id="cb25-2"></span>
<span id="cb25-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb25-4"></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(version)</span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(name)</span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(seed)</span>
<span id="cb25-8">  </span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_integer</span>(version)</span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_integer</span>(seed)</span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_positive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version))</span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(version, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb25-14">  </span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_not_matching_regex</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>)</span>
<span id="cb25-16"></span>
<span id="cb25-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb25-18">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb25-19">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb25-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb25-21">}</span></code></pre></div>
</div>
<p>I’d probably argue that this is the most readable version of the code yet. The <code>assert_*()</code> functions have such transparently informative names that there’s no need at all for comments. However, there are some downsides to this approach, which become a little more apparent when we look at the error messages that it throws when I pass bad inputs to the <code>identifier()</code> function:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("r tistry", 1L, 203L): is_not_matching_regex : name does not match "[[:space:]._]"
There was 1 failure:
  Position    Value                   Cause
1        1 r tistry matches '[[:space:]._]'</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1.02, 203L): is_integer : version is not of class 'integer'; it has class 'numeric'.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1L, 20013L): is_less_than : seed are not all less than 10000.
There was 1 failure:
  Position Value                          Cause
1        1 20013 greater than or equal to 10000</code></pre>
</div>
</div>
<p>Because I don’t have custom error message code in my assertions, the errors that get returned to the user are a little bit opaque. They’re more informative than the <code>stopifnot()</code> versions, and because each assertion throws its own error message tailored to that function, the results are rather better suited to the context. Even so, they’re still quite long and there’s some cognitive effort required by the user to figure out what happened.</p>
<p>There’s a second issue here. Notice that when I wanted to pass a good input for <code>seed</code> or <code>version</code> in this version of the function, I used explicitly integer-classed values (e.g., <code>203L</code> not <code>203</code>). There’s a reason I did that. The <code>assert_is_integer()</code> function uses <code>is.integer()</code> test for integer status, which returns <code>TRUE</code> only when passed an actual integer. It returns <code>FALSE</code> when passed an “integerish” double:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>Because my assertion is a check for integer status not “integerish” status, this version of the <code>identifier()</code> function is more strict about type checking than I really want it to be, and this fails:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1, 203): is_integer : version is not of class 'integer'; it has class 'numeric'.</code></pre>
</div>
</div>
<p>Now, to be fair, there are of course many situations where you really do want to be strict about type checking integers: the integer representation of <code>203L</code> is a different underlying object to the floating point representation of <code>203</code>, and while R is usually pretty chill about this, it’s important to keep in mind that doubles and integers are fundamentally different data types. That being said, it’s vanishingly rare for this to actually matter in my generative art process, and I’d prefer to let this one slide.</p>
<p>This kind of thing is where you can run into some difficulties using the <code>assert_*()</code> functions. If there isn’t a specific assertion function tailored for your use case (as occurs with “integerish” check in <code>identifier()</code>) you’re left with the dilemma of either choosing an assertion that isn’t quite right, or else falling back on a general-purpose assertion like <code>assert_all_are_true()</code>. For example, this works…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertive)</span>
<span id="cb38-2"></span>
<span id="cb38-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb38-4"></span>
<span id="cb38-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(version)</span>
<span id="cb38-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(name)</span>
<span id="cb38-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(seed)</span>
<span id="cb38-8">  </span>
<span id="cb38-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_true</span>(rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version)))</span>
<span id="cb38-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_positive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version))</span>
<span id="cb38-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb38-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(version, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb38-13">  </span>
<span id="cb38-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_not_matching_regex</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>)</span>
<span id="cb38-15"></span>
<span id="cb38-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb38-17">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb38-18">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb38-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb38-20">}</span>
<span id="cb38-21"></span>
<span id="cb38-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>…but it’s not quite as elegant as you might hope. Nevertheless, I’m not being critical here. It’s impossible to write a package like assertive in a way that covers every use case, and it’s pretty impressive that it has the breadth that it does.</p>
<p><strong>Summary</strong>: Because it provides a huge number of well-named assertion functions, the assertive package tends to produce very readable code, and because each of those functions produces errors that are tailored to that check, the error messages tend to be useful too. It does get a little awkward when there isn’t an assertion for your use case, but usually there’s a way to work around that.</p>
</section>
<section id="just-assertr-carr" class="level2">
<h2 class="anchored" data-anchor-id="just-assertr-carr">Just assertr, Carr</h2>
<p>The <a href="https://docs.ropensci.org/assertr/">assertr</a> package solves a different problem to the other three methods discussed here. The other three approaches are general-purpose tools and – with various strengths and weaknesses – they’re designed to be used when checking an <em>arbitrary</em> input. The assertr package is more specialised: it focuses on checking a <em>data</em> input, specifically a tabular data object like a data frame or a tibble. Because it’s focused on that particular – and extremely important – special case, it’s able to provide a more powerful way of validating the content of a data frame.</p>
<p>In that sense, assertr is complementary to the other three approaches. For example, you could use assertr to check the <code>data</code> input to a function that takes a data frame as the primary argument, but then use (say) <code>assert_that()</code> to test the others.</p>
<p>To get started, I’ll load the packages I’m going to use in this section:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb40-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertr)</span></code></pre></div>
</div>
<p>The assertr package provides three primary verbs, <code>verify()</code>, <code>assert()</code>, and <code>insist()</code>. They all take a data set as the first argument and (by default) returns the original data set unaltered if the checks pass, which makes it include them as part of a data pipeline. There’s also two row-wise variants <code>assert_rows()</code> and <code>insist_rows()</code>. For the purposes of this post I’ll limit myself to talking about the simplest cases, <code>verify()</code> and <code>assert()</code>.</p>
<p>Let’s start with <code>verify()</code>. The <code>verify()</code> function expects to receive an expression as the first non-data argument amd yields a logical value, which is then evaluated in the data context. If the expression evaluates to <code>FALSE</code>, an error is thrown.</p>
<p>Here’s a simple example using <code>verify()</code>. My data set comes from the <a href="https://en.wikipedia.org/wiki/List_of_Archibald_Prize_winners">List of Archibald Prize Winners</a> wikipedia page. The Archibald Prize is a one of the most prestigious art prizes in Australia, awarded for painted portraits, and has been awarded (almost!) annually since 1921. My data set looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">archibald <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"archibald.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb41-2">archibald</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 166 × 6
   prize           year  artist            title         subject n_finalists
   &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt;         &lt;dbl&gt;
 1 Archibald Prize 1921  William McInnes   Desbrowe Ann… Harold…          45
 2 Archibald Prize 1922  William McInnes   Professor Ha… Willia…          53
 3 Archibald Prize 1923  William McInnes   Portrait of … Violet…          50
 4 Archibald Prize 1924  William McInnes   Miss Collins  Gladys…          40
 5 Archibald Prize 1925  John Longstaff    Maurice Mosc… Mauric…          74
 6 Archibald Prize 1926  William McInnes   Silk and Lac… Esther…          58
 7 Archibald Prize 1927  George W. Lambert Mrs Annie Mu… Annie …          56
 8 Archibald Prize 1928  John Longstaff    Dr Alexander… Alexan…          66
 9 Archibald Prize 1929  John Longstaff    The Hon W A … Willia…          75
10 Archibald Prize 1930  William McInnes   Drum-Major H… Harry …          67
# ℹ 156 more rows</code></pre>
</div>
</div>
<p>To be precise, there are actually three different prizes included in the data set. There’s the original Archibald Prize (the famous one), and two more recent additions that are awarded using the same pool of entrants: the People’s Choice Award (which is what you’d think), and the Packing Room Prize (awarded by the staff who install the portraits in the gallery).</p>
<p>For my first analysis then, I want to do a simple tabulation: count the number of times any given artist has won a particular prize, and sort the results in descending count order. So the analysis part of my data pipeline would look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
</div>
<p>However, I might want to <code>verify()</code> a few things first. I’d like to check that <code>prize</code> and <code>artist</code> both exist as columns in the data, and both contain character data. I can use the base R function <code>exists()</code> to check that the variables exist within the data context, and <code>is.character()</code> to check the variable type:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>In this case, all the <code>verify()</code> checks pass, so no errors are thrown and the analysis proceeds in the usual way. But suppose that the <code>artist</code> variable was actually supposed to be called <code>painter</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"painter"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"painter"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(painter, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>verification [exists("painter")] failed! (1 failure)

    verb redux_fn         predicate column index value
1 verify       NA exists("painter")     NA     1    NA</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error: assertr stopped execution</code></pre>
</div>
</div>
<p>There is no <code>painter</code> variable in the data set, so the assertion checks fail, and an error message is thrown. The form of the error message is rather elaborate though. There is a reason why assertr defaults to this strange-looking format: often there are multiple errors that appear in an assertion check, and by default assertr will group them into a table summarising all the issues.</p>
<p>There’s something a little repetitive about the validation code I wrote above. If my analysis pipeline involved many variables, it would be a bit obnoxious to write a separate <code>verify()</code> line to check that they all exist. For the column name checks, assertr provides a convenience function <code>has_all_names()</code> that you can use specifically for this purpose:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>For the type checking, however, there’s no equivalent convenience function and if you want to group multiple <code>verify()</code> checks what you want to do is use the <code>assert()</code> function. The first non-data argument to <code>assert()</code> specifies a predicate function that is applied to a set of columns.<sup>4</sup> If the predicate function returns <code>FALSE</code>, the <code>assert()</code> function errors.</p>
<p>Rewriting the <code>verify()</code> code from our “successful” example as <code>assert()</code> checks gives us this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize, artist) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>One thing I really like about the design of assertr is that pipe-friendly assertion checks make it possible to add your assertion checks at the appropriate point in the analysis pipeline. For instance, let’s suppose I want to look at the number of finalists in the Archibald Prize each year. The raw data only records <code>n_finalists</code> for the Archibald Prize, not the Packing Room Prize or the People’s Choice Award. Rows in the data corresponding to those latter prizes will always have <code>NA</code> values for <code>n_finalists</code>, but that isn’t a problem for my proposed analysis. The <em>only</em> missingness of possible concern to me is for the Archibald Prize proper. So I can write my assertion checks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_finalists"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.numeric, n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archibald Prize"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(\(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x), n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb53-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n_finalists),</span>
<span id="cb53-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(n_finalists),</span>
<span id="cb53-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_finlists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(n_finalists)</span>
<span id="cb53-11">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Column 'n_finalists' violates assertion 'function(x) !is.na(x)' 2 times
    verb redux_fn             predicate      column index value
1 assert       NA function(x) !is.na(x) n_finalists    13    NA
2 assert       NA function(x) !is.na(x) n_finalists    69    NA</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error: assertr stopped execution</code></pre>
</div>
</div>
<p>Okay, so there is in fact a case where missingness is a problem in two rows of the data set, <em>for the explicit subset of the data I care about</em>. As it happens though, I simply don’t care when it’s only those two years, so for the purposes of this example I’ll filter those rows out before they even hit the assertion check, and unsurprisingly this runs without erroring:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb56-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_finalists"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.numeric, n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archibald Prize"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(n_finalists)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(\(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x), n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb56-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n_finalists),</span>
<span id="cb56-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(n_finalists),</span>
<span id="cb56-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_finlists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(n_finalists)</span>
<span id="cb56-11">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  min_finalists median_finalists max_finlists
          &lt;dbl&gt;            &lt;dbl&gt;        &lt;dbl&gt;
1            15               52          197</code></pre>
</div>
</div>
<p>In addition to <code>verify()</code> and <code>assert()</code>, there are three other assertion functions in assertr. I’m not going to dive into those for the purposes of this post – that’s what the package documentation is there for! – but the TL;DR is as follows:</p>
<ul>
<li><code>insist()</code> works like <code>assert()</code> but it takes a “predicate generator” function instead of a “predicate” function, which makes it possible to specify an assertion check for a tidy selection of columns and have the predicate generator handle each column according to its own logic</li>
<li><code>assert_rows()</code> is a row-wise version of <code>assert()</code></li>
<li><code>insist_rows()</code> is a row-wise version of <code>insist()</code></li>
</ul>
<p><strong>Summary</strong>: My overall feeling is that assertr is probably the most powerful tool for assertion checks applied to tabular data. It lacks the generality of the other tools, true, but the special case that it works for is a really important one for data analysts. Data objects tend to have their own special issues, and pretty much every data analysis takes at least one data frame as an input, so it’s really convenient to have a specialised tool for that scenario.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The idea is very similar to writing unit checks for software development. The difference is that unit tests are run at build time, whereas assertions apply at run time.↩︎</p></li>
<li id="fn2"><p>It should be noted that these aren’t the only packages out there to support assertions in R. There are at least three others that I’m aware of but haven’t yet tried, and probably many others that I don’t know about. For what it’s worth, these are the other three I know of: the <a href="https://github.com/smbache/ensurer">ensurer</a>, <a href="https://github.com/mllg/checkmate">checkmate</a>, and <a href="https://github.com/gastonstat/tester">tester</a> packages can all be used for this purpose, and I’m sure I could come up with terrible rhymes for those too, but there’s a limit to how much effort I want to put into this post.↩︎</p></li>
<li id="fn3"><p>In general, assertr doesn’t supply lots of convenience functions, but <code>has_all_names()</code> is an important special case because it’s used to check for the <em>existence</em> of columns, and that requires a special workflow. For type checking assertions, I can group together multiple <code>verify()</code> checks into a single <code>assert()</code> check that takes a tidy selection of columns. But for that to work the columns actually have to exist, so you can’t use <code>assert()</code> for existence checks! Hence (I presume) the inclusion of the <code>has_all_names()</code> convenience function.↩︎</p></li>
<li id="fn4"><p>Column names are unquoted and are passed through the dots <code>...</code>. The documentation notes that the dots are passed to <code>dplyr::select()</code>, and accordingly the <code>assert()</code> function supports tidy selection.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Four Ways to Write Assertion Checks in {R}},
  date = {2023-08-08},
  url = {https://blog.djnavarro.net/posts/2023-08-08_being-assertive},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Four Ways to Write Assertion Checks in
R.”</span> August 8, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-08_being-assertive">https://blog.djnavarro.net/posts/2023-08-08_being-assertive</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-08_being-assertive/</guid>
  <pubDate>Mon, 07 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-08_being-assertive/50_ways.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Getting started with Torsten</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-07-15_torsten/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>In recent months I’ve been gradually teaching myself pharmacometrics, and <a href="https://blog.djnavarro.net/category/pharmacometrics">writing blog posts as I go</a>. I started out writing about relatively simple methods for <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a>, moved on to talking about <a href="../../posts/2023-05-16_stan-ode/">compartmental analysis with Stan</a>, and then to <a href="../../posts/2023-06-10_pop-pk-models/">population pharmacokinetic models in Stan</a>. Now it feels like time for me to move on to looking at <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten</a>.</p>
<p>What’s Torsten, you ask?</p>
<p>Torsten is essentially a forked copy of <a href="https://mc-stan.org/">Stan</a> that has a collection of functions added that can be useful in pharmacometric analyses. As described by <a href="https://doi.org/10.1002/psp4.12926">Elmokadem et al (2023)</a>:</p>
<blockquote class="blockquote">
<p>Torsten is a library of Stan functions built to facilitate analysis of pharmacometric data … [It] contains functions to build specific linear compartmental models as one and two-compartment models with first-order absorption into the central compartment, general linear models that can be expressed as a system of linear ordinary differential equations (ODEs), general compartmental models that can be expressed as a system of ODEs.</p>
</blockquote>
<p>The name “Torsten” refers to Torsten Teorell, described as the <a href="https://doi.org/10.3109/03009739509178895">father of pharmacokinetics</a>. The preview image of this post is taken from the figures in a 1937 paper by Teorell:</p>
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/torsten-figs.png" class="img-fluid"></p>
<p>I do like knowing where the names of things come from, and the history to different disciplines. But to be fair that’s not the purpose of this post, so let’s set the history to one side and take a look at the software. The website is quite clear that Torsten is currently (as of version 0.89rc) a prototype:</p>
<blockquote class="blockquote">
<p>WARNING: The current version of Torsten is a prototype. It is being released for review and comment, and to support limited research applications. It has not been rigorously tested and should not be used for critical applications without further testing or cross-checking by comparison with other methods. We encourage interested users to try Torsten out and are happy to assist. Please report issues, bugs, and feature requests on our GitHub page.</p>
</blockquote>
<p>My goals in this post are modest:</p>
<ul>
<li>Install Torsten and make sure it’s working</li>
<li>Understand the data format expected by the Torsten-specific solvers</li>
<li>Work my way through the model file for simple two-compartment analysis</li>
<li>Work out what’s going on regarding analytic solutions in Torsten</li>
</ul>
<p>As usual, the notes are mostly intended for the benefit of future-me, who absolutely will have forgotten all this in a week from now. But it’s possible that other people may find them helpful too I suppose. Anyway, here goes…</p>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>Installing Torsten starts by cloning the <a href="https://github.com/metrumresearchgroup/Torsten">GitHub repository</a>. Just recently I’ve gotten into the habit of using the <a href="https://cli.github.com/">GitHub command line tool</a> for tasks like this, so the command I used was this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ~/GitHub</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> repo clone metrumresearchgroup/Torsten</span></code></pre></div>
<p>But really, anything that clones a repository will work.</p>
<p>Once you have a copy of the repo, you can build Torsten in any number of ways. Given that I’m usually working from R, the most convenient way for me to do this is with the cmdstanr package. If you don’t have the cmdstanr package, you need to install it first. It’s not on CRAN but you can install it by adding the Stan repository to the <code>repos</code> path when calling <code>remotes::install_cran()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_cran</span>(</span>
<span id="cb2-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkgs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmdstanr"</span>, </span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://mc-stan.org/r-packages/"</span>, </span>
<span id="cb2-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repos"</span>)</span>
<span id="cb2-6">    )</span>
<span id="cb2-7">)</span></code></pre></div>
</div>
<p>Next, you need to make sure that cmdstanr uses the Torsten version of Stan, and not any other version of Stan that you might have installed on your system. This is important because Torsten supplies various functions that we’ll need, and especially important in my case because I also have a “vanilla” copy of Stan installed elsewhere on my laptop. Here’s how I do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">torsten_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/GitHub/Torsten"</span></span>
<span id="cb3-2">cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_cmdstan_path</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(torsten_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmdstan"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>CmdStan path set to: /home/danielle/GitHub/Torsten/cmdstan</code></pre>
</div>
</div>
<p>In a moment, I’m going to try to compile a Stan/Torsten model (and indeed compile Torsten itself), so it’s important to make sure the C++ toolchain is set up properly. If you already have C++ compilers set up on your machine (which I do) then you probably don’t need to do anything special to make sure that everything compiles properly, but just to be safe we’ll check:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_cmdstan_toolchain</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The C++ toolchain required for CmdStan is setup properly!</code></pre>
</div>
</div>
<p>Excellent. Now comes the acid test: let’s see if we can use Torsten to build and sample from a Stan model that specifically requires Torsten functions. I’m following the <a href="https://metrumresearchgroup.github.io/Torsten/installation/#testing">instructions on the installation page</a> here, more or less. But I’m going to walk through the process a little more slowly than those instructions do.</p>
<p>The first step here is to compile the Stan model. The very first time you do this, it can take a moderately long time because two things are happening:</p>
<ul>
<li>First, the compiler need to compile the modified copy of Stan that Torsten ships with. That takes a while, but fortunately it only has to be done once.</li>
<li>Second, the compiler needs to compile the “pk2cpt” model itself. This is fairly fast. This compilation step only happens when the model binary is out of date.</li>
</ul>
<p>Fortunately for me I’ve already done this step once before and I have both binaries compiled already so it all happens instantaneously. In any case, here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">model_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(torsten_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example-models"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt"</span>)</span>
<span id="cb7-2">model_src <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.stan"</span>)</span>
<span id="cb7-3">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdstan_model</span>(model_src)</span></code></pre></div>
</div>
<p>The key thing to note here is that the “pk2cpt.stan” source code relies on Torsten-specific functions that don’t exist in vanilla Stan. It won’t work if you’re not using the Torsten version of Stan. The mere fact that it compiles is itself telling us that it’s all configured correctly.</p>
<p>So now we fit the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">model_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb8-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.data.R"</span>),</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">init =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.init.R"</span>),</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>,</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parallel_chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb8-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_messages =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 chains, at most 2 in parallel...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 7.5 seconds.
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 finished in 7.5 seconds.
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 7.1 seconds.
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 7.7 seconds.

All 4 chains finished successfully.
Mean chain execution time: 7.5 seconds.
Total execution time: 15.4 seconds.</code></pre>
</div>
</div>
<p>When doing this interactively, you should set <code>show_messages = TRUE</code> so that you can see the “informational messages”. As I’m coming to learn, it’s grossly typical of ODE models that you get a few warning messages during the early stages of warmup. But Stan messages tend to be quite good, and in this case they’re quite helpful in reassuring us that there’s not a problem in this instance (they occur early while the MCMC sampler is in a very weird part of the space and then disappear). I’ve suppressed them here because they make the quarto blog output messier than it needs to be. All good.</p>
<p>To draw a pretty picture showing the posterior distribution of the clearance rate parameter for this model (CL), we can do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_cran("bayesplot")</span></span>
<span id="cb10-2">bayesplot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mcmc_dens_overlay</span>(model_fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CL"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/index_files/figure-html/prettiness-pk2cpt-model-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>That looks right. Torsten is configured correctly, the model compiles, the sampler works, and the posterior distributions plotted here mirror the ones that are secretly tucked away in an output file here:</p>
<pre><code>[torsten-directory]/example-models/pk2cpt/deliv/figure/density.pdf</code></pre>
<p>My first goal is accomplished. We are good to go!</p>
</section>
<section id="the-data-file" class="level2">
<h2 class="anchored" data-anchor-id="the-data-file">The data file</h2>
<p>Okay, so now that I’ve succeeded in doing <em>something</em> with Torsten, it would be nice to have a better sense of what precisely I’ve done. Obviously<sup>1</sup> I’ve run a Stan model of some kind on some data set, but the Torsten documentation doesn’t really go into a lot of detail here.</p>
<p>I’ll start by taking a look at the data. I’ve cached a copy of the data file along with this post, located at <code>./example/pk2cpt_data.R</code> relative to this quarto document. The file defines the variables needed by Stan as R vectors, but to make my life a little easier I’ll organise them into a tibble that resembles a NONMEM-style <a href="https://metrumresearchgroup.github.io/Torsten/function/events/">event schedule</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./example/pk2cpt_data.R"</span>)</span>
<span id="cb12-2">pk2cpt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> cmt,</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">evid =</span> evid,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> addl,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ss =</span> ss,</span>
<span id="cb12-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> amt, </span>
<span id="cb12-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time,</span>
<span id="cb12-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rate =</span> rate,</span>
<span id="cb12-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> ii,</span>
<span id="cb12-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dv =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb12-12">)</span>
<span id="cb12-13">pk2cpt_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dv[iObs] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cObs</span>
<span id="cb12-14">pk2cpt_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 54 × 9
     cmt  evid  addl    ss   amt  time  rate    ii    dv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     1     1    14     0 80000 0         0    12   NA 
 2     2     0     0     0     0 0.083     0     0  359.
 3     2     0     0     0     0 0.167     0     0  663.
 4     2     0     0     0     0 0.25      0     0 1106.
 5     2     0     0     0     0 0.5       0     0 1185.
 6     2     0     0     0     0 0.75      0     0 1802.
 7     2     0     0     0     0 1         0     0 2296.
 8     2     0     0     0     0 1.5       0     0 2008.
 9     2     0     0     0     0 2         0     0 2001.
10     2     0     0     0     0 3         0     0 1115.
# ℹ 44 more rows</code></pre>
</div>
</div>
<p>I am firmly of the opinion that these aren’t good variable names, but they are completely standard in the field so I’m just going to have to memorise them. To that end, and despite the fact that I have written a version of this about a dozen times already, here’s what each of those variables refers to:</p>
<ul>
<li><code>cmt</code>: compartment number to which the row refers</li>
<li><code>evid</code>: event id (0=observation, 1=dose, 2=other)</li>
<li><code>addl</code>: number of additional identical doses given</li>
<li><code>ss</code>: is it steady-state dosing? (0=false, 1=true)</li>
<li><code>amt</code>: dose amount administered at this time</li>
<li><code>time</code>: time of observation/administration</li>
<li><code>rate</code>: rate of drug infusion (=0 for bolus administration)</li>
<li><code>ii</code>: interdose interval: time between additional doses</li>
<li><code>dv</code>: the dependent variable (observed concentration)</li>
</ul>
<p>The key point here is that (unlike in my previous post where I used a slightly different data structure in my bespoke Stan model), Torsten functions expect input variables that look very similar to those used in NONMEM. Fair enough.</p>
<p>Now that I have a sense of the data structure, let’s plot it to see what the observed pharmacokinetic function looks like. In the plot below, the dotted vertical lines mark the moments at which additional doses were administered. The circular markers connected by solid lines represent the observed drug concentrations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">pk2cpt_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(evid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-3">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, dv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-4">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(</span>
<span id="cb14-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb14-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey50"</span>,</span>
<span id="cb14-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span></span>
<span id="cb14-8">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-9">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-10">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-11">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-12">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-13">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/index_files/figure-html/pk2cpt-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The solid lines connecting the dots are a bit misleading. For the first, second, and last doses, measurements are taken regularly enough that you can see the rise and fall of drug concentration associated with each dose. For all other doses, however, there’s only a single measurement taken immediately before the dose is administered, with the result that it looks like a fairly flat function through the middle of the data. This makes total sense from an experimental design point of view, of course, it’s just important to remember that there’s a good reason why the observed data has this slightly odd shape.</p>
<p>Objective #2 accomplished. Time to move to the next one.</p>
</section>
<section id="the-model-file" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-model-file">The model file</h2>
<p>Let’s take a look at the source code for the Torsten/Stan model that I fit in the last section. For the sake of my sanity I’m not going to use the actual .stan file that Torsten distributes. In the original version there’s no explanation of what the parameters mean or what the data variables are.</p>
<p>I’m about 99% certain that the reason for this is that among pharmacometricians it is “understood” that everyone already knows the notational specifications used in <a href="https://en.wikipedia.org/wiki/NONMEM">NONMEM</a>, and consequently nobody bothers to say what those terms mean. To be honest I find it a little frustrating. If you want new users to consider Torsten as a viable modelling tool for pharmacometrics, I think it’s a bad idea to make it a <em>prerequisite</em> that new users already know NONMEM. But as I am Queen only of this blog and not of statistics generally, and my guess is that the primary target audience for Torsten are pharmacometricians who have already used NONMEM for many years, I’ll restrict myself to mild grumbling and simply fix the comments so that the “hidden curriculum” aspect to all this is no longer quite so hidden. Nevertheless, given that the vast majority of my readership belong to the 99.99% of statisticians and data scientists who aren’t professional pharamacometricians,<sup>2</sup> I’ve added a lot more annotation to my version of the file:</p>
<div class="cell column-body-outset" data-file="example/pk2cpt.stan" data-output.var="pk2cpt">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./example/pk2cpt.stan</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Two compartment model using Torsten analytical solver </span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span>{</span>
<span id="cb15-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; nt;                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of events</span></span>
<span id="cb15-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; nObs;              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of observations</span></span>
<span id="cb15-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nObs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; iObs;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// indices of observation events</span></span>
<span id="cb15-7">  </span>
<span id="cb15-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// NONMEM data</span></span>
<span id="cb15-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; cmt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compartment number</span></span>
<span id="cb15-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> evid;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// event id (0=observation, 1=dose, 2=other)</span></span>
<span id="cb15-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> addl;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of additional identical doses given</span></span>
<span id="cb15-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ss;             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// is it steady-state dosing? (0=false, 1=true)</span></span>
<span id="cb15-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> amt;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// dose amount administered at this time</span></span>
<span id="cb15-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> time;          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// time of observation/administration </span></span>
<span id="cb15-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> rate;          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// rate of drug infusion (0 for bolus administration)</span></span>
<span id="cb15-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> ii;            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// interdose interval: time between additional doses </span></span>
<span id="cb15-17">  </span>
<span id="cb15-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nObs] cObs;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// observed concentration (the dv)</span></span>
<span id="cb15-19">}</span>
<span id="cb15-20"></span>
<span id="cb15-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed data</span>{</span>
<span id="cb15-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[nObs] logCObs = log(cObs);</span>
<span id="cb15-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nTheta = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of ODE parameters describing the pharmacokinetic function</span></span>
<span id="cb15-24">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nCmt = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of compartments in model (1=gut, 2=central, 3=peripheral)</span></span>
<span id="cb15-25">}</span>
<span id="cb15-26"></span>
<span id="cb15-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span>{</span>
<span id="cb15-28">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; CL;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance rate from central compartment</span></span>
<span id="cb15-29">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; Q;     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// intercompartmental clearance rate</span></span>
<span id="cb15-30">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; V1;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume of distribution, central compartment</span></span>
<span id="cb15-31">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; V2;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume of distribution, peripheral compartment</span></span>
<span id="cb15-32">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; ka;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate constant from gut to central </span></span>
<span id="cb15-33">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; sigma; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// standard deviation of measurement error on log-scale</span></span>
<span id="cb15-34">}</span>
<span id="cb15-35"></span>
<span id="cb15-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed parameters</span>{</span>
<span id="cb15-37">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nTheta] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> theta;        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// parameters of the pharmacokinetic function</span></span>
<span id="cb15-38">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">matrix</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nCmt, nt] x;   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// drug amounts in each compartment over time</span></span>
<span id="cb15-39"></span>
<span id="cb15-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// predicted drug concentrations in the central compartment</span></span>
<span id="cb15-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">row_vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nt] cHat;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// row vector, one element per event</span></span>
<span id="cb15-42">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nObs] cHatObs; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// column vector, one element per *observation*</span></span>
<span id="cb15-43"></span>
<span id="cb15-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bundle pharmacokinetic parameters into a vector</span></span>
<span id="cb15-45">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = CL;</span>
<span id="cb15-46">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] = Q;</span>
<span id="cb15-47">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] = V1;</span>
<span id="cb15-48">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] = V2;</span>
<span id="cb15-49">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] = ka;</span>
<span id="cb15-50"></span>
<span id="cb15-51">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute the pharmacokinetic function (drug amounts in all compartments)</span></span>
<span id="cb15-52">  x = pmx_solve_twocpt(time, amt, rate, ii, evid, cmt, addl, ss, theta);</span>
<span id="cb15-53"></span>
<span id="cb15-54">  cHat = x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :] ./ V1;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute drug concentrations in central compartment</span></span>
<span id="cb15-55">  cHatObs = cHat'[iObs]; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// transform to column vector &amp; keep relevant cells only</span></span>
<span id="cb15-56">}</span>
<span id="cb15-57"></span>
<span id="cb15-58"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span>{</span>
<span id="cb15-59">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// informative prior</span></span>
<span id="cb15-60">  CL ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>);</span>
<span id="cb15-61">  Q ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>);</span>
<span id="cb15-62">  V1 ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>);</span>
<span id="cb15-63">  V2 ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>);</span>
<span id="cb15-64">  ka ~ lognormal(log(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb15-65">  sigma ~ cauchy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb15-66"></span>
<span id="cb15-67">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// measurement errors are log-normally distributed</span></span>
<span id="cb15-68">  logCObs ~ normal(log(cHatObs), sigma);</span>
<span id="cb15-69">}</span>
<span id="cb15-70"></span>
<span id="cb15-71"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span>{</span>
<span id="cb15-72">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nObs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> cObsPred; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// simulated observations</span></span>
<span id="cb15-73">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:nObs) {</span>
<span id="cb15-74">    cObsPred[i] = exp(normal_rng(log(cHatObs[i]), sigma));</span>
<span id="cb15-75">  }</span>
<span id="cb15-76">}</span></code></pre></div>
</div>
</div>
<p>Even with the additional commenting, it’s still a little impenetrable unless you’re a pharmacometric insider, because the pharmacokinetic model is not represented anywhere in this Stan code. It’s simply understood that this is a two-compartment model by virtue of the fact that the <code>pmx_solve_twocpt()</code> function is called, and all the details of what that <em>means</em> have been rendered invisible in the process.</p>
<p>That’s not wrong from the Torsten perspective – and probably necessary – but at the same time it makes the code difficult to follow for anyone who isn’t a pharmacometrician. So let’s make it a bit more explicit, yes? What precisely is the ODE system solved by the <code>pmx_solve_twocpt()</code> function? Fortunately, the actual ODEs are described by <a href="https://doi.org/10.1002/psp4.12812">Margossian et al (2022)</a> and are in fact the same ones I used in a previous post.</p>
<p>I’ll reproduce the ODEs here in exactly the same form as they are presented by Margossian et al:<sup>3</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bgut%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20-k_a%20u_%7B%5Cmbox%7Bgut%7D%7D%20%5C%5C%20%5C%5C%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bcent%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20k_a%20u_%7B%5Cmbox%7Bgut%7D%7D%20-%20%5Cleft(%20%5Cdisplaystyle%5Cfrac%7B%5Cmbox%7BCL%7D%7D%7BV_%7B%5Cmbox%7Bcent%7D%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%5Cmbox%7Bcent%7D%7D%20%5Cright)%20u_%7B%5Cmbox%7Bcent%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%7B%5Cmbox%7Bperi%7D%7D%7D%20u_%7B%5Cmbox%7Bperi%7D%7D%20%5C%5C%20%5C%5C%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bperi%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%5Cmbox%7Bcent%7D%7D%20u_%7B%5Cmbox%7Bcent%7D%7D%20-%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%7B%5Cmbox%7Bperi%7D%7D%7D%20u_%7B%5Cmbox%7Bperi%7D%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>There’s still a little friction here because mathematical notation is never precisely identical to variable naming in code (nor should it be). But it does help to have a little lookup table like this one:</p>
<table class="table">
<colgroup>
<col style="width: 18%">
<col style="width: 31%">
<col style="width: 49%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Stan variable</th>
<th style="text-align: center;">Mathematical notatation</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>x[1, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bgut%7D%7D"></td>
<td style="text-align: left;">Drug amount in the gut</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>x[2, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bcent%7D%7D"></td>
<td style="text-align: left;">Drug amount in central compartment</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>x[3, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bperi%7D%7D"></td>
<td style="text-align: left;">Drug amount in peripheral compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>ka</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?k_a"></td>
<td style="text-align: left;">Absorption rate constant from gut</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>CL</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmbox%7BCL%7D"></td>
<td style="text-align: left;">Elimination clearance from central</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>Q</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?Q"></td>
<td style="text-align: left;">Intercompartmental clearance</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>V1</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?V_%5Cmbox%7Bcent%7D"></td>
<td style="text-align: left;">Volume of central compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>V2</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?V_%5Cmbox%7Bperi%7D"></td>
<td style="text-align: left;">Volume of peripheral compartment</td>
</tr>
</tbody>
</table>
<p>The differential equations are all expressed in terms of drug amounts rather than drug concentrations, and the <code>pmx_solve_twocpt()</code> function solves for drug amounts in each compartment at each point in time. However, pharmacometric functions specify how drug concentrations change over time, so the Stan code makes the appropriate transformation. With that in mind I find it helpful to extend the table slightly:</p>
<table class="table">
<colgroup>
<col style="width: 22%">
<col style="width: 29%">
<col style="width: 48%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Stan transformation</th>
<th style="text-align: center;">Mathematical notatation</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>x[2, :] ./ V1</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bcent%7D%7D%20/%20V_%5Cmbox%7Bcent%7D"></td>
<td style="text-align: left;">Drug concentration in central compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>x[3, :] ./ V2</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bperi%7D%7D%20/%20V_%5Cmbox%7Bperi%7D"></td>
<td style="text-align: left;">Drug concentration in peripheral compartment</td>
</tr>
</tbody>
</table>
<p>Having written that out, the Stan code seems pretty interpretable. There’s still something missing here insofar as it’s not entirely clear <em>how</em> the <code>pmx_solve_twocpt()</code> function computes the drug amounts in each compartment at all time points, but at least it’s now clear <em>what</em> it is computing.</p>
</section>
<section id="where-can-i-find-the-analytical-solutions" class="level2">
<h2 class="anchored" data-anchor-id="where-can-i-find-the-analytical-solutions">Where can I find the analytical solutions?</h2>
<p>In my <a href="../../posts/2023-06-10_pop-pk-models/">previous post on pop-PK modelling</a>, I managed to get far enough along that I could implement my own two-compartment models in Stan, without using Torsten. However, in order to do that I had to rely on numerical ODE solvers to compute solutions to the pharmacokinetic functions. It turns out that was unnecessary. On the <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten home page</a>, it indicates that:</p>
<blockquote class="blockquote">
<p>One and two compartment models are based on analytical solutions of governing ODEs.</p>
</blockquote>
<p>So presumably there <em>are</em> some analytical solutions somewhere! A little awkwardly, the documentation doesn’t explicitly say what the analytical solutions for the two-compartment model are or where they are taken from, but a little bit of digging gives us some answers. First, looking through the Torsten source reveals the relevant parts of the code:</p>
<ul>
<li><a href="https://github.com/metrumresearchgroup/Torsten/blob/0168482d400e4b819acadbc28cc817dd1a037c1b/cmdstan/stan/lib/stan_math/stan/math/torsten/pmx_solve_twocpt.hpp">This file</a> appears to be where the <code>torsten::pmx_solve_twocpt()</code> function is defined.</li>
<li><a href="https://github.com/metrumresearchgroup/Torsten/blob/0168482d400e4b819acadbc28cc817dd1a037c1b/cmdstan/stan/lib/stan_math/stan/math/torsten/pmx_twocpt_model.hpp">This file</a> appears to be where the analytical solutions are specified.</li>
</ul>
<p>Second, a little hunting around on the internet unearths this handy little paper by <a href="https://doi.org/10.12793/tcp.2019.27.2.43">D’Argenio and Bae (2019)</a> that derives the analytical solutions of interest. Skimming the paper quickly suggests it’s not too complicated an exercise to implement analytical solutions (especially if you’re not trying to optimise for performance), and even the derivations don’t look too painful. I may return to that topic in a later post, but for now I feel reassured that I know where to look when I want to dive deeper.</p>
</section>
<section id="useful-resources" class="level2">
<h2 class="anchored" data-anchor-id="useful-resources">Useful resources</h2>
<p>I suspect that at a future date I’ll want to pick up from where this post leaves off. With that in mind, these are the resources I relied on when putting it together:</p>
<ul>
<li><p><a href="https://doi.org/10.1002/psp4.12926">Bayesian PBPK modeling using R/Stan/Torsten and Julia/SciML/Turing.Jl</a>. Journal article by Ahmed Elmokadem, Yi Zhang, Timothy Knab, Eric Jordie, and Bill Gillespie, January 2023.</p></li>
<li><p><a href="https://doi.org/10.1002/psp4.12812">Flexible and efficient Bayesian pharmacometrics modeling using Stan and Torsten, Part I</a>. Journal article by Charles Margossian, Yi Zhang, and Bill Gillespie, April 2022.</p></li>
<li><p><a href="https://www.metrumrg.com/wp-content/uploads/2023/06/bbr.bayes_StanCon2023.pdf">Bayesian modeling workflow for pharmacometric applications using bbr.bayes with Stan/Torsten</a>. Slides by Bill Gillespie, June 2023.<sup>4</sup></p></li>
<li><p><a href="https://metrumrg.com/wp-content/uploads/2018/05/BayesianPmetricsMBSW2018.pdf">Bayesian Data Analysis Using Stan/Torsten for Pharmacometric Applications</a>. Slides by Bill Gillespie, May 2018.</p></li>
<li><p><a href="https://doi.org/10.12793/tcp.2019.27.2.43">Analytical solution of linear multi-compartment models with non-zero initial condition and its implementation with R</a>. Journal article by David D’Argenio and Kyun-Seop Bae, June 2019.</p></li>
<li><p><em>Kinetics of distribution of substances administered to the body. I. The extravascular modes of administration.</em> Journal article by Torsten Teorell, 1937. Discussed in <a href="https://doi.org/10.3109/03009739509178895">Torsten Teorell, the Father of Pharmacokinetics</a> by Lennart Paalzow, 1995.</p></li>
<li><p><a href="https://stanpmx.github.io/">Stan and R for Pharmacometrics</a>. Book by Casey Davis, Yasong Lu, Arya Pourzanjani, and Pavan Vaddady.<sup>5</sup></p></li>
</ul>
</section>
<section id="done" class="level2">
<h2 class="anchored" data-anchor-id="done">Done!</h2>
<p>…and with that, I’ve accomplished my very limited goals for this post, and for once in my life I shall bloody well refrain from expanding on it further and turning a short blog post into a monograph.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I mean… “obvious” in the sense that I’m a person who has used Stan before and the output from the previous section is very familiar to me <em>as</em> Stan output.↩︎</p></li>
<li id="fn2"><p>Number obviously fictitious but probably in the right ballpark.↩︎</p></li>
<li id="fn3"><p>The same ODE system appears in the <a href="https://metrumresearchgroup.github.io/Torsten/function/two-cpt/">Torsten documentation for the two-compartment model</a>, using <img src="https://latex.codecogs.com/png.latex?y"> in place of <img src="https://latex.codecogs.com/png.latex?u"> and <img src="https://latex.codecogs.com/png.latex?y%5E%5Cprime"> in place of <img src="https://latex.codecogs.com/png.latex?du/dt">. I probably should have used that version in this post, but I found the Margossian et al version first and I’m too lazy to rewrite the LaTeX expressions.↩︎</p></li>
<li id="fn4"><p>Thank you to Mike Smith for pointing me to this resource.↩︎</p></li>
<li id="fn5"><p>Thank you to Tim Waterhouse for pointing me to this resource.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Getting Started with {Torsten}},
  date = {2023-07-15},
  url = {https://blog.djnavarro.net/posts/2023-07-15_torsten},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Getting Started with Torsten.”</span>
July 15, 2023. <a href="https://blog.djnavarro.net/posts/2023-07-15_torsten">https://blog.djnavarro.net/posts/2023-07-15_torsten</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Stan</category>
  <category>Torsten</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-07-15_torsten/</guid>
  <pubDate>Fri, 14 Jul 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-07-15_torsten/torsten-crop.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Beware the IDEs of Windows (Subsystem for Linux)</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>After many years of using Ubuntu as my primary operating system for data science work, I’ve found myself in a situation where my primary laptop runs Windows. There are reasons for this. It does, however, introduce some problems. My workflows are often built around Unix-like tools, and life without bash is too heavy a burden for me to bear. Fortunately, there is a solution: Windows Subsystem for Linux (WSL). The process for getting set up with WSL is essentially as follows:</p>
<ol type="1">
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/install">Install WSL</a></li>
<li><a href="https://ubuntu.com/wsl">Install Ubuntu for WSL</a></li>
<li><a href="https://cloud.r-project.org/bin/linux/ubuntu/">Install R for Ubuntu</a></li>
</ol>
<p>Repeat step 3 for all the other command line tools you love (and replace step 2 with your favourite distro if you don’t love Ubuntu), and just like that you have a working setup for all your favourite data science workflows on Linux, living happily within a Windows environment.</p>
<section id="some-bits-are-tricksy" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="some-bits-are-tricksy">Some bits are tricksy</h2>
<p>There’s a sense in which WSL is a kind of dark magic, one that allows me to run two operating systems side by side on the same machine, and allowing extensive interoperability between them. By installing WSL and Ubuntu for WSL on my laptop, I’ve created a situation where I have two filesystems co-existing on my machine, and two qualitatively different kinds of shell to interact with them. On the Windows side I can use powershell, and on the Ubuntu side I can use bash. Regardless of which shell I use (and which operating system powers it), I have the ability to find files on both filesystems, as long as I know what paths to look for.</p>
<p>The key thing to understand is that Ubuntu mounts the Windows C: drive at <code>/mnt/c/</code>, and Windows locates the Ubuntu root directory at <code>\\wsl.localhost\Ubuntu-22.04\</code>. So, for instance, given that my Windows user is called <code>strin</code>,<sup>1</sup> and my Ubuntu username is <code>danielle</code>, the paths to the user home directories are:</p>
<div class="column-body-outset">
<table class="table">
<colgroup>
<col style="width: 25%">
<col style="width: 26%">
<col style="width: 48%">
</colgroup>
<thead>
<tr class="header">
<th>Folder:</th>
<th>Ubuntu path (bash):</th>
<th>Windows path (powershell):</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Ubuntu user directory</td>
<td><code>/home/danielle</code></td>
<td><code>\\wsl.localhost\Ubuntu-22.04\home\danielle</code></td>
</tr>
<tr class="even">
<td>Windows user directory</td>
<td><code>/mnt/c/Users/strin</code></td>
<td><code>C:\Users\strin</code></td>
</tr>
</tbody>
</table>
</div>
<p>This illustrates some of the subtleties. Decisions need to be made about which files and applications should live in the Windows filesystem, and which should live in the Ubuntu filesystem. For example, I don’t use my Dropbox folder for data science work, so it lives in Windows at <code>C:\Users\strin\Dropbox</code>. On the other hand, my GitHub repositories are used mostly for data science and developer work, so they all live in Ubuntu and are all kept in the <code>/home/danielle/GitHub</code> folder.</p>
<p>It becomes trickier still when thinking about applications that require a GUI. The Ubuntu for WSL installation doesn’t come with a desktop environment. You certainly can install one, and if you’re willing to do the finicky work setting up an X server for Windows, you can in fact set things up so that Ubuntu for WSL has its own floating desktop environment in Windows (just like the one you’d get if you were running Ubuntu as a virtual machine). However, I don’t fancy doing all that work just to get a web browser up and running… so I made the practical decision that my Firefox installation should be the regular Windows version, living in Windows like any other Windows application.</p>
<p>The trickiness reaches its zenith when you start thinking about where your favourite IDE should live. At its heart an IDE is a GUI, and as such it’s going to run so much more smoothly if you install it as a Windows application. But IDEs are also used to start terminals, to write code, and execute all sorts of tasks that require access to the data science tooling… all of which live on Ubuntu.</p>
<p>How do we resolve this? In my case, I have two IDEs that I cannot live without. For my everyday work I am almost perfectly split between <a href="https://posit.co/products/open-source/rstudio/">RStudio</a> and <a href="https://code.visualstudio.com/">VS Code</a>. Here’s the approach I took with each.</p>
</section>
<section id="rstudio-setup" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="rstudio-setup">RStudio setup</h2>
<p>What are my options for RStudio?</p>
<ul>
<li><p>Option 1: RStudio Desktop for Windows. If I go down this path the RStudio GUI will look very nice, but I won’t be able to use the Ubuntu installation of R. I’d have to install R for Windows, and then I’d have to configure RTools if I want to do developer work, and now I’d need C/C++ compilers on Windows, and… at that point I’d essentially have to manage an entire Windows data science stack in parallel with my Ubuntu data science stack. Not loving this as an option.</p></li>
<li><p>Option 2: RStudio Desktop for Ubuntu. This version of RStudio will have no problems finding the Ubuntu installation, but without a lot of tinkering it won’t be able to create the RStudio GUI. Again, there’s a solution to this (and I did actually get it up and running), if you’re okay with running an X-server for Windows like <a href="https://x410.dev/">X410</a>. It does work, but it’s finicky. Fonts and cursors don’t look right if you’re running X410 in windowed mode, and if you want to run it in floating desktop mode then you have to set up the entire Ubuntu desktop environment just to run RStudio. Not loving this one either.</p></li>
<li><p>Option 3: RStudio Server for Ubuntu. This is easily my preferred option. RStudio Server loves to run on Ubuntu, and so of course it has no problems finding the Ubuntu installation of R. Even better, it doesn’t require an Ubuntu desktop environment. When you start RStudio Server running from bash (<code>sudo rstudio-server start</code>), it starts a server running (most likely at <code>http://localhost:8787/</code>). Back on Windows, I can open up my browser and point it to that address, and can login using my Ubuntu username and password. Works beautifully. I have Ubuntu-native versions of R and RStudio Server, and a Windows-native RStudio GUI through the browser.</p></li>
</ul>
<p>Having made my choice, I sort of know what I need to search for to solve the problem. There are good resources out there for this, and I’m not doing a walkthrough in this post. The purpose of the post is to document the approach I’ve taken so that I can remember how to do it next time, and point future-me at the right resources. That said, these are the resources I relied upon to set up option 3:</p>
<ul>
<li><a href="https://support.posit.co/hc/en-us/articles/360049776974-Using-RStudio-Server-in-Windows-WSL2">Using RStudio Server in Windows WSL2</a></li>
<li><a href="https://posit.co/download/rstudio-server/">RStudio Server</a></li>
<li><a href="https://support.posit.co/hc/en-us/articles/221303588-What-is-my-username-on-my-RStudio-Workbench-RStudio-Server-installation-">What is my username on my RStudio Workbench / RStudio Server installation?</a></li>
</ul>
<p>The result:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/rstudio.png" class="img-fluid figure-img" alt="RStudio interface rendered within a browser window. Within the RStudio interface you can see that I'm working on this blog post."></p>
<figcaption class="margin-caption">Working on this blog post within RStudio. The GUI runs within Firefox on Windows, connected to RStudio Server running on Ubuntu for WSL, both of which exist on my local machine.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="vs-code-setup" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="vs-code-setup">VS Code setup</h2>
<p>Okay that’s RStudio sorted. What about VS Code?</p>
<p>The solution for VS Code is similar but not the same. The core principle is the same: the GUI should be native to Windows, and the underlying engine should be native to Ubuntu. The way you actually do this for VS Code, however, is slightly different. Essentially, what you want to do is install the Windows version of VS Code, and then – within VS Code – install the WSL extension. You’ll also need to install a bunch of other extensions too but that’s the normal experience for VS Code, for every language and every operating system.</p>
<p>As before, I’m not going to do a walkthrough, but these are the resources I used when getting VS Code set up properly on my Windows/Ubuntu-on-WSL box:</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode">Get started using Visual Studio Code with Windows Subsystem for Linux</a></li>
<li><a href="https://code.visualstudio.com/blogs/2019/09/03/wsl2">WSL 2 with Visual Studio Code</a></li>
</ul>
<p>The result:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/vscode.png" class="img-fluid figure-img" alt="VS Code application running natively on Windows, connected to Ubuntu for WSL. The left sidebar displays the file tree for the project, there's an R console open beneath, and a quarto document open in the main panel."></p>
<figcaption class="margin-caption">Working on this blog post within VS Code. The GUI for VS Code is a native Windows application, but in the lower left hand corner you can see that it connects to Ubuntu for WSL to handle code execution and so forth.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="ubuntu-desktop" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="ubuntu-desktop">Ubuntu desktop</h2>
<p>As a kind of postscript… it’s entirely possible to have a fully functional Ubuntu desktop in a setup like this. The main thing you need is an X server. I’ve no idea what the best X server for Windows options are: I went with <a href="https://x410.dev/">X410</a> because it seems pretty professional and work has clearly gone into it, but you do have to pay actual money for it. There might be better options. Anyway, the instructions I followed are in <a href="https://x410.dev/cookbook/wsl/enable-systemd-in-wsl2-and-have-the-best-ubuntu-gui-desktop-experience/">this blog post</a>. At the end of it you have the Ubuntu desktop environment installed, and a handy bash script that does the configuration you need. You can start the session like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span> ~/.bash_ubuntu_desktop</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gnome-session</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--session</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ubuntu</span></code></pre></div>
<p>If you’ve gone to the additional effort of setting up snap, and installing the Firefox snap on your Ubuntu system (yes, I do have two copies of Firefox on my machine), you can do something unbearably absurd like run R-within-RStudio-Server-within-Firefox-within-Ubuntu-desktop-within-Windows. Screenshot, simply to prove that I actually did this:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/ubuntu.png" class="img-fluid figure-img" alt="RStudio running in a browser. The browser window is within an Ubuntu desktop. The Ubuntu desktop floats above the Windows taskbar."></p>
<figcaption class="margin-caption">Working on this blog post within RStudio… within a browser… within Ubuntu on WSL… within X410… on Windows. Yes this is absurd.</figcaption>
</figure>
</div>
<p><br></p>
<p>No, it’s not a very good idea.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A truncation of <code>stringrbelle</code>, which I occasionally use as a username.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Beware the {IDEs} of {Windows} {(Subsystem} for {Linux)}},
  date = {2023-07-02},
  url = {https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Beware the IDEs of Windows (Subsystem
for Linux).”</span> July 2, 2023. <a href="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl">https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/</guid>
  <pubDate>Sat, 01 Jul 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/death-of-ceasar.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Makefiles. Or, the balrog and the submersible</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-30_makefiles/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I have a secret to confess: I have been writing code for over 20 years, and until about a month ago I have been loathe even to try using <a href="https://en.wikipedia.org/wiki/Make_(software)">Make</a>. For too long I have feared catastrophic implosion should I be reckless enough attempt to dive into these dark waters.<sup>1</sup> Even now, as the sunlight fades and I pass below the surface into the treacherous realm below, I can hear the ominous sounds of compressive stress upon my psyche. I imagine the betentacled krakenlike beasts native to this realm congregating outside the hull.</p>
<p>Drums, drums in the deep.</p>
<p>But I am here now and I cannot get out. I shall have to complete this blog post in the hope that a wizard and his merry little troupe of clueless hobbits may one day discover the tale of my tragic descent and eventual demise at the hands of build automation balrogs.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/gothmog.jpg" class="img-fluid figure-img" alt="Stylised art showing a balrog riding a dragon."></p>
<figcaption class="margin-caption">“Gothmog at the Storming of Gondolin”, depicting a balrog riding a dragon. The piece is CC-BY licenced by the artist <a href="https://en.wikipedia.org/wiki/Tom_Loback">Tom Loback</a></figcaption>
</figure>
</div>
<p><br></p>
<section id="farewell-to-the-broad-sunlit-uplands" class="level2">
<h2 class="anchored" data-anchor-id="farewell-to-the-broad-sunlit-uplands">Farewell to the broad, Sunlit Uplands</h2>
<p>Every tragic narrative begins with a fatal mistake, the hubris of the doomed making the terrible choice that sealed their fate well before the story gets underway. In this case, that mistake was deciding that now is the time to read a 1200 page book on C++. Absolutely cursed decision. There was no way I wasn’t going to end up swallowed by a yawning hellmouth once that choice had been made. But – as the saying goes – when one descends into the abyss to be crushed by lovecraftian horrors, it’s all about the journey and not the destination.</p>
<p>Here’s how the sad story unfolded. Having read through the first hundred or so pages of the C++ necronomicon (the “fucking around” stage), I started encountering the inevitable consequences of the fact that (a) C++ is a compiled language, and (b) I am a person who obsessively takes notes as she reads and writes her own code to accompany the notes. And so it came to pass that (in the “finding out” stage of this tragedy) I was barely one chapter into the book and I’d written almost 50 little baby C++ programs, every one of them a helpless monster gnashing it’s tiny teeth in ravenous hunger, demanding to be compiled before it can do anything useful.</p>
<p>Oh no, my precious abominations, I said to them. I already have human children to feed and care for, I’ll not fall into the trap of lovingly passing each of you individually to the compiler for nurture and sustenance with bespoke hand crafted calls to clang++. That way lies madness and chaos. No, I shall hire a metaphorical nanny/butler/build-manager to feed you and compile you when you need compiling, to politely inform me each time a little C++ demon has grown into to a new binary file, and to take care of sundry other drudgeries with which I do not wish to be burdened. I shall write a <code>Makefile</code>.</p>
<p>And with that my doomed submersible slipped below the waves.</p>
</section>
<section id="the-decay-of-that-colossal-wreck" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-decay-of-that-colossal-wreck">The decay of that colossal Wreck</h2>
<p>As the light fades away visions of my Ozymandian future cross my eyes. I imagine the Works that I will construct, upon which even the Mighty will gaze and despair. Hints of make targets that I will specify and the wonders that will get built with automations.</p>
<p>Behold!</p>
<p>Here is the <code>Makefile</code> I wrote for my side project. It’s a minor incantation at best, a small spell to feed my tiresome C++ babies into the maw of clang++ whenever necessary, and renders all my boring markdown scratchings into graven html with the help of pandoc.</p>
<div class="cell" data-file="_examples/learning-cpp/Makefile">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cpp</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">notes</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> notes/%.md</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> docs/%.html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> notes/*.md</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">static</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> docs/.nojekyll docs/CNAME docs/style.css</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dirs </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">static</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">notes</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dirs:</span></span>
<span id="cb1-8"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./bin</span></span>
<span id="cb1-9">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./docs</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(cpp):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb1-12"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[compiling]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span></span>
<span id="cb1-13">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clang++-15 --std=c++20 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(static):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> docs/%: static/%</span></span>
<span id="cb1-16"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[copying]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb1-17">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(notes):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> docs/%.html: notes/%.md</span></span>
<span id="cb1-20"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[rendering]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span></span>
<span id="cb1-21">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pandoc </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --template=./pandoc/template.html </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        --standalone --mathjax --toc --toc-depth 2</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb1-25"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[deleting] docs"</span></span>
<span id="cb1-26">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[deleting] bin"</span></span>
<span id="cb1-27">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf docs</span></span>
<span id="cb1-28">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf bin</span></span></code></pre></div>
</div>
<p>It is not very impressive, I know. But it does work, and it does help. So perhaps I should say a little about how I got to there from here?</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/odysseus-and-the-sirens.jpg" class="img-fluid figure-img" alt="Mosaic depicting the temptation of Odysseus by the Sirens."></p>
<figcaption class="margin-caption">The Ulysses mosaic at the Bardo Museum in Tunis, Tunisia (2nd century AD), depicting the temptation of Odysseus by the Sirens. (Image appears to be public domain)</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="love-me-while-your-wrists-are-bound" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="love-me-while-your-wrists-are-bound">Love me while your wrists are bound</h2>
<p>If I’m going to write something about Makefiles, I should perhaps start by acknowledging a few important truths:</p>
<ul>
<li>I’m not an expert. Everything I know about Makefiles is from <a href="https://makefiletutorial.com">makefiletutorial.com</a>. This post is not going to tell you anything you cannot find in Chase Lambert’s lovely tutorial.</li>
<li>There are many alternatives to Make. I’ve seen many projects use <a href="https://cmake.org/">CMake</a> for build automation, for example. Alternatively, if you’re working in R you might prefer to use the <a href="https://docs.ropensci.org/targets/">targets</a> package by Will Landau (<a href="https://books.ropensci.org/targets/">user manual here</a>). There is nothing particularly special about Make per se that made me decide to learn it: it just happens to be a thing that has been around for a long time, and it was irritating me that I didn’t know how to use it.</li>
<li>Like all things created by humans, it is cursed. Makefiles are indeed the Night That is Dark and Full of Terrors. The red priestesses warned us.</li>
</ul>
<p>With that out of the way, let’s begin. Reduced to its simplest form a Makefile is a collection of build <strong>targets</strong>, each of which is defined using syntax that looks something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb2-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">targets:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> prerequisites</span></span>
<span id="cb2-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>command</span>
<span id="cb2-3">    command</span>
<span id="cb2-4">    command</span></code></pre></div>
</div>
<p>It seems simple enough. The top level command provides the name of the target. In the simplest case, a target is a specific file that <code>make</code> needs to build, and the name of the target is the path to that file, though it’s also possible to specify targets using arbitrary names</p>
<p>Optionally, a target can have a set of <strong>prerequisites</strong> associated with that target. Prerequisites provide a method for specifying the dependencies for a build target. If the files listed as prerequisites have changed more recently than the output target, the build target is deemed to be “out of date”, and the <strong>commands</strong> listed beneath it will be executed in order to rebuild that target.</p>
<p>A concrete example might help to make this a little clearer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb3-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb3-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span></code></pre></div>
</div>
<p>Let’s unpack what each part of this target means:</p>
<ul>
<li><code>bin/collatz</code> is the target, and is specified as the path to the output file that we’re asking <code>make</code> to build for us.</li>
<li><code>src/collatz.cpp</code> is a prerequisite file. If the <code>src/collatz.cpp</code> file has been modified more recently than the <code>bin/collatz</code> file created by the compilation command underneath, then that command will be executed when <code>make</code> is called</li>
<li>The third line is a shell command. In this instance, the command takes the <code>src/collatz.cpp</code> source file and uses clang to compile it to a binary executable file <code>bin/collatz</code>. (The <code>--std=c++20</code> flag indicates that C++ version 20 should be assumed)</li>
</ul>
<p>Targets and their prerequisites provide a mechanism by which a Makefile can be used to track the dependencies among the various files in your project. It’s worth noting a few special cases:</p>
<ul>
<li>If a target has no prerequisites it is always deemed out of date, so the commands will be executed every time.</li>
<li>If the name of the target doesn’t correspond to an actual output file, it’s considered to be a “phony” target and is always considered out of date, and hence the commands will always be executed.</li>
<li>A target can be explicitly labelled as “phony” even if the target name happens to be the same as a file in the project using the <code>.PHONY</code> keyword. We’ll see an example of this later.</li>
</ul>
<p>It seems lovely, does it not? Of course it does my sweet Odysseus. You’ve been listening to the Sirens again, and fortunate indeed that your loved ones have tied you to the mast to prevent you from casting yourself overboard and drowning.</p>
<blockquote class="blockquote">
<p><em>“But Danielle, this seems so simple! It is lovely, alluring and sweet. I see no sign of eldritch horrors or evil creatures lurking in the depths here”</em></p>
</blockquote>
<p>You say that, so I presume that you have absolutely noticed that all those <code>command</code> lines in the code snippet above are indented with tabs and not spaces, yes? No? Those tabs are like little glass knives buried in the sand beneath your soft, bare feet. You must use tabs for indentations in your Makefile, or it won’t work.</p>
<blockquote class="blockquote">
<p><em>“But Danielle, my IDE is set to automatically convert tabs to spaces! This is going to mess me up and now I have to faff about making exceptions for specific files”</em></p>
</blockquote>
<p>Indeed. Don’t say I didn’t warn you.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/hope-in-hell.jpg" class="img-fluid figure-img" alt="Cover art to 'A Hope in Hell', a Sandman comic."></p>
<figcaption>The cover art to “A Hope in Hell”, the fourth of <a href="https://en.wikipedia.org/wiki/The_Sandman_(comic_book)">The Sandman comics</a>. Written by Neil Gaiman, Sam Kieth and Mike Dringenberg, and part of the “Preludes and Nocturnes” collection. Likely a copyrighted image, but hopefully okay to reproduce here under fair use etc.</figcaption>
</figure>
</div>
</div></div></section>
<section id="hope-in-hell" class="level2">
<h2 class="anchored" data-anchor-id="hope-in-hell">Hope in hell</h2>
<p><em>Perhaps we won’t die</em>, we whisper to ourselves as we open a blank Makefile, and point our vessel towards Scylla and Charybdis with the kind of blind optimism that typically ends with the Coroners Court issuing a lengthy report several months later. After all, our project is so very small. We are but hobbits crossing the Brandywine river looking for mushrooms or something, surely the Willow at the heart of the Old Forest won’t eat us?</p>
<p>Sorry. Got a little distracted there, didn’t I? I’m going to blame Morpheus… I haven’t slept very well lately and my writing gets very weird when that happens.</p>
<p>Getting back on track now. When your project is very small, it isn’t hard to write a basic Makefile. Again, it helps to use concrete examples. Let us imagine a project that has this structure:</p>
<div class="cell">

</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>In this happy fantasy Narnia – which absolutely will never turn into a Fillory because happy endings are real, and life really truly is more than one barely-sublimated trauma after another – we have a very easy thing to work with. In the <code>src</code> folder we have three .cpp files that each correspond to a small C++ program that needs to be compiled.</p>
<p>Being the sort of person who likes to separate inputs from outputs, we decide that the executable binary files should all be stored in a <code>bin</code> folder. Being also the cautious sort of person who understands the difference between inputs and outputs, our project has a <code>.gitignore</code> file that ensures that nothing we write to <code>bin</code> is placed under version control.</p>
<p>We also have a a file called <code>Makefile</code>,<sup>2</sup> whose contents are as follows:</p>
<div class="cell" data-file="_examples/version1/Makefile">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "all" target is a set of other targets</span></span>
<span id="cb5-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "dir" target creates a directory for the binaries</span></span>
<span id="cb5-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb5-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>mkdir -p ./bin</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/collatz" target compiles the collatz.cpp program</span></span>
<span id="cb5-9"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb5-10"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/species" target compiles the species.cpp program</span></span>
<span id="cb5-13"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/species:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/species.cpp</span></span>
<span id="cb5-14"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/species.cpp -o bin/species</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/swap" target compiles the swap.cpp program</span></span>
<span id="cb5-17"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/swap:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/swap.cpp</span></span>
<span id="cb5-18"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/swap.cpp -o bin/swap</span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "clean" target deletes all binary files</span></span>
<span id="cb5-21"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb5-22"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>rm -rf bin</span></code></pre></div>
</div>
<p>The central part of the Makefile is familiar. We’re taking the “compile a C++ source file” recipe that I previously used as an example of makefile target, and repeating it three times over. It’s so utterly dull that it actually reads better if we strip the comments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb6-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb6-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/species:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/species.cpp</span></span>
<span id="cb6-5"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/species.cpp -o bin/species</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/swap:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/swap.cpp</span></span>
<span id="cb6-8"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/swap.cpp -o bin/swap</span></code></pre></div>
</div>
<p>It’s repetitive, but for this toy project it works. If we want this project to build, we require that all three of these C++ source files be compiled to binaries.</p>
<p>Sisyphus should be so lucky.</p>
<p>The nature of make targets is that you can call them by name. In the snippet above I have three targets. To build each of these I could type this mind-meltingly tedious sequence of commands at the terminal:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/collatz</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/species</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/swap</span></code></pre></div>
<p>It works fine when there are only a few targets, but becomes extremely painful once there are dozens of them. Life is short, and this is not the kind of masochism I enjoy. Building each target individually is simply not on my to-do list. Not now, not as Valyria sinks into its Doom, and not as Rome is burning. My fiddling time is preserved for something better than this, my babes.</p>
<p>To accommodate the need of the dead things like myself, <code>make</code> makes it possible to group multiple targets together:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb8-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span></code></pre></div>
<p>This is very helpful. Instead of typing this to make all four targets…</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> dir</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/collatz</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/species</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/swap</span></code></pre></div>
<p>…I can now type this and get the same result:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> all</span></code></pre></div>
<p>In fact, even this can be shortened, because “all” happens to be the first target listed in the Makefile. If you don’t specify a target to build, <code>make</code> will use the first target in the file. It is conventional, then, to call the first target “all”, and have that target consist of a list of all the <em>other</em> targets needed to build the whole project. Consequently, I can do this:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<p>Here’s what we get as output…</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap</code></pre>
</div>
</div>
<p>…and our project now contains the binary files:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
├── bin
│   ├── collatz
│   ├── species
│   └── swap
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>Nice.</p>
<p>So, okay. This is the explanation of lines 1-19 of our Makefile. What’s going on in lines 20-22?</p>
<p>I’m so glad you asked.</p>
<p>What happens if you want to burn it all down and revert to the initial (unbuilt) state of the project? <code>make</code> doesn’t provide that functionality automatically, but it is traditional for writers of Makefiles to include a target called <code>clean</code> that includes commands that will perform this clean up job for you.<sup>4</sup> That’s generally a good thing to do, and for this project the cleanup process is very simple. All we have to do delete the <code>bin</code> folder and everything in it, so that’s what our “clean” target does.</p>
<p>Because we have this target in the Makefile, all we have to do is type <code>make clean</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> clean</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>rm -rf bin</code></pre>
</div>
</div>
<p>And just like that, we are back to the clean (unbuilt) state for our project:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>Hope yet lives, despite our descent into Hell.</p>
</section>
<section id="the-filetree-yggdrasil-reaching-to-the-heavens" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-filetree-yggdrasil-reaching-to-the-heavens">The filetree Yggdrasil, reaching to the heavens</h2>
<p>In the Makefile I used in the last section, I created a separate target for every file, and wrote the code manually for every one of them. It’s a little repetitive, but when you only have a handful of files that need to be processed (… regardless of whether “processing” means compiling a source file, rendering a markdown document, or anything else), it’s not too onerous. However, it’s very common for a project to grow much too large for this to be ideal. For example, here’s the filetree for the side-project (including source files and output files) that motivated me to learn how to write Makefiles in the first place:</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/yggdrasil.jpg" class="img-fluid figure-img" alt="The world tree Yggdrasil."></p>
<figcaption>The world tree Yggdrasil from Norse mythology, as depicted by <a href="https://en.wikipedia.org/wiki/Friedrich_Wilhelm_Heine">Friedrich Wilhelm Heine</a> in 1886. (Public domain image)</figcaption>
</figure>
</div>
</div></div><div class="cell">

</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/learning-cpp
├── .gitignore
├── LICENSE.md
├── Makefile
├── README.md
├── bin
│   ├── add-with-logging
│   ├── add-with-overloading
│   ├── append-c-strings
│   ├── array-danielle
│   ├── array-iterator
│   ├── beta-sample
│   ├── beta-sample-2
│   ├── char-code
│   ├── circles
│   ├── collatz
│   ├── employee
│   ├── enumerated-types
│   ├── extended-raw-string-literal
│   ├── file-extension
│   ├── file-extension-2
│   ├── gender-switch
│   ├── gender-switch-2
│   ├── helloworld
│   ├── helloworld-using
│   ├── immovable-reference
│   ├── mean-value
│   ├── na-na-hey-hey
│   ├── pass-by-reference-to-const
│   ├── pointer-free-store
│   ├── pointer-stack
│   ├── poisson-conditional
│   ├── poisson-initialised-conditional
│   ├── poisson-sample
│   ├── raw-string-literal
│   ├── scope-resolution
│   ├── simple-reference
│   ├── simple-string
│   ├── species-first-pass
│   ├── stoi
│   ├── string-class-examples
│   ├── string-class-handy
│   ├── string-class-logical
│   ├── string-escapes
│   ├── string-to-numeric
│   ├── string-vectors
│   ├── structured-binding
│   ├── structured-binding-asl
│   ├── swap
│   ├── try-catch
│   ├── typecasting
│   └── validation-check
├── docs
│   ├── .nojekyll
│   ├── CNAME
│   ├── chapter-01.html
│   ├── chapter-02.html
│   ├── chapter-03.html
│   ├── chapter-04.html
│   ├── index.html
│   └── style.css
├── notes
│   ├── chapter-01.md
│   ├── chapter-02.md
│   ├── chapter-03.md
│   ├── chapter-04.md
│   └── index.md
├── pandoc
│   ├── README.md
│   └── template.html
├── src
│   ├── add-with-logging.cpp
│   ├── add-with-overloading.cpp
│   ├── append-c-strings.cpp
│   ├── array-danielle.cpp
│   ├── array-iterator.cpp
│   ├── beta-sample-2.cpp
│   ├── beta-sample.cpp
│   ├── char-code.cpp
│   ├── circles.cpp
│   ├── collatz.cpp
│   ├── employee.cpp
│   ├── employee.h
│   ├── enumerated-types.cpp
│   ├── extended-raw-string-literal.cpp
│   ├── file-extension-2.cpp
│   ├── file-extension.cpp
│   ├── gender-switch-2.cpp
│   ├── gender-switch.cpp
│   ├── helloworld-using.cpp
│   ├── helloworld.cpp
│   ├── immovable-reference.cpp
│   ├── mean-value.cpp
│   ├── na-na-hey-hey.cpp
│   ├── pass-by-reference-to-const.cpp
│   ├── pointer-free-store.cpp
│   ├── pointer-stack.cpp
│   ├── poisson-conditional.cpp
│   ├── poisson-initialised-conditional.cpp
│   ├── poisson-sample.cpp
│   ├── raw-string-literal.cpp
│   ├── scope-resolution.cpp
│   ├── simple-reference.cpp
│   ├── simple-string.cpp
│   ├── species-first-pass.cpp
│   ├── stoi.cpp
│   ├── string-class-examples.cpp
│   ├── string-class-handy.cpp
│   ├── string-class-logical.cpp
│   ├── string-escapes.cpp
│   ├── string-to-numeric.cpp
│   ├── string-vectors.cpp
│   ├── structured-binding-asl.cpp
│   ├── structured-binding.cpp
│   ├── swap.cpp
│   ├── try-catch.cpp
│   ├── typecasting.cpp
│   └── validation-check.cpp
└── static
    ├── .nojekyll
    ├── CNAME
    └── style.css</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>It’s not a huge project by any stretch of the imagination, but it’s big enough to illustrate the point. If I had to write a separate target telling <code>make</code> how to process each of these files I’d quickly lose my mind. Not only that, it would be difficult to maintain if – for example – I needed to change the command used to compile the C++ source files.</p>
<p>In practice, then, we want to write Makefiles that use pattern matching to process every file that matches that pattern. For instance, in the “learning-cpp” project shown above, one of the pattern rules I need is one that automatically compiles every .cpp file in the <code>src</code> folder to a binary file of the same name in the <code>bin</code> folder.<sup>5</sup> Conveniently enough, that’s exactly the same problem we needed to solve for the toy example. So let’s revisit it, keeping in mind that although you don’t really need pattern rules for a project as tiny as the toy project I’m using here, you really do need them as soon as your project moves into the real world.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/kraken.jpg" class="img-fluid figure-img" alt="'Kraken of the imagination', by John Gibson. 1887"></p>
<figcaption class="margin-caption">“The kraken, as seen by the eye of imagination”. Public domain image by John Gibson, published in <a href="https://www.biodiversitylibrary.org/page/54285093#page/85/mode/1up">Monsters of the sea, legendary and authentic</a>, 1887</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="release-the-kraken-of-the-imagination" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="release-the-kraken-of-the-imagination">Release the kraken of the imagination</h2>
<div class="cell">

</div>
<p>Now comes the part of the post where turbulent waters are encountered, and we the dark beasts of the depths might claim us. That is to say, we’ll start creating targets programmatically within our Makefile. To that end we’ll return to the toy project. As before, our project has the following source files:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version2
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>However, our Makefile this time around is a little different:</p>
<div class="cell" data-file="_examples/version2/Makefile">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lists of filenames</span></span>
<span id="cb19-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "all" target is much simpler now</span></span>
<span id="cb19-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb19-9"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>mkdir -p ./bin</span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each C++ binary is a target, the source is its prerequisite</span></span>
<span id="cb19-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(bin_files):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb19-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span> -o <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb19-14"></span>
<span id="cb19-15"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb19-16"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>rm -rf bin</span></code></pre></div>
</div>
<p>Let’s go through this line by line. First, we can use wildcard matching to find all files in the <code>src</code> folder that end with the <code>.cpp</code> file extension:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb20-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>It may not be immediately apparent to – oh, say, humans – but this is in fact a function call. The name of the function is <code>wildcard</code>, the <code>$( )</code> syntax with the function name inside the parentheses is the way you call functions in <code>make</code>,<sup>6</sup> and <code>src/*.cpp</code> is the argument passed to the function.</p>
<p>It may also not be obvious upon first inspection – because again, why would it be? – why I’ve used <code>:=</code> instead of <code>=</code> in my assignment statement. The goal here is to create a new variable called <code>src_files</code> that contains the names of the various source files, that much is clear. But why use <code>:=</code>, exactly? The answer, of course, is that <code>make</code> supports several different kinds of assignment operators, and confusingly enough <code>=</code> is <em>not</em> the operator for “simple” assignment:</p>
<ul>
<li>Use <code>:=</code> if you want “simple assignment”: the assignment happens once and only once, the first time the assignment statement is encountered</li>
<li>Use <code>=</code> if you want “recursive assignment”: the assignment is reevaluated every time the value of the right hand side changes (e.g., in this example, if a later make target changes the list of source files in the <code>src</code> folder, the value of <code>src_files</code> changes too)</li>
<li>Use <code>?=</code> if you want “conditional assignment”: the assignment only happens if the variable doesn’t already have a value (sure, normal humans would use an if-statement for this, but as we all know keystrokes are a precious resource and must be conserved; preserving human sanity is of course a much less important goal)</li>
<li>Use <code>+=</code> if you want the value of the right hand side to be added to the variable rather than replacing its existing value.</li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<p>It sure doesn’t seem like I should have had to write a small manuscript simply to explain one very modest line of code, does it? But such is the nature of <code>make</code>.</p>
</div></div><p>In any case, the thing that matters here is we’ve scanned the <code>src</code> folder and created a variable called <code>src_files</code> that lists all the C++ source code files in that folder. In other words, <code>src_files</code> is now a synonym for this:</p>
<pre><code>src/collatz.cpp src/species.cpp src/swap.cpp</code></pre>
<p>This will now form the basis by which we construct a list of build targets. Because our project is very simple and has a nice one-to-one mapping between source files and output files, what we really want to construct now is a variable that contains a list of build targets like this:</p>
<pre><code>bin/collatz bin/species bin/swap</code></pre>
<p>If we could be assured that the binary files always exist, we could use the same trick to list all binaries in the <code>bin</code> folder. But because those might not exist (e.g., if we delete the binaries when calling <code>make clean</code>), we can’t be assured of that. So instead, we’ll use the <code>patsubst</code> function to do a pattern substitution: we’ll take the <code>src_files</code> variable as input, strip the <code>.cpp</code> extension from the files, and replace <code>src</code> with <code>bin</code>. Here’s what that looks like:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb23-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>The <code>patsubst</code> function takes three arguments, and – of course – they are specified in a weird order. The data argument appears in the third position, because again… why not? The pattern to which we match the data appears in the first position, and the replacement pattern appears in the second position.<sup>7</sup> Anyway, the point here is that what this function call does is as follows: it takes all the filenames in <code>src_files</code>, matches them against <code>src/%.cpp</code> to find the “stem” (e.g., the stem for <code>src/collatz.cpp</code> is the part that matches the <code>%</code> operator, i.e., <code>collatz</code>), and then uses the replacement pattern <code>bin/%</code> to construct output values from the stems (e.g., <code>collatz</code> is transformed to <code>bin/collatz</code>). And so we end up with a variable <code>bin_files</code> that contains the list of target files we want to build:</p>
<pre><code>bin/collatz bin/species bin/swap</code></pre>
<p>Now that we have this, we can define the “all” target using this variable, as follows:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb25-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>From the <code>make</code> perspective this is equivalent to:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb26-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span></code></pre></div>
<p>Or, to put it another way, by using the <code>bin_files</code> variable, we can programmatically ensure that the “all” target includes a target for every binary file that needs to be compiled.</p>
<p>Having defined a list of targets programmatically, our next task<sup>8</sup> is to write a <a href="https://www.gnu.org/software/make/manual/html_node/Static-Usage.html">static pattern rule</a> that programmatically defines the targets themselves. Specifically, for every target listed in <code>bin_files</code>, we want (1) to assert that it relies on the corresponding source file as a prerequisite, and (2) to specify a build action that compiles the binary from the corresponding source.</p>
<p>Here’s some code that does this:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb27-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(bin_files):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb27-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span> -o <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span></code></pre></div>
<p>The underlying syntax here is as follows:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb28-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">targets:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> target-pattern: prerequisites-patterns</span></span>
<span id="cb28-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>commands</span></code></pre></div>
<p>For our example, the <code>bin_files</code> variable contains the list of targets specified by the pattern rule. The <code>bin/%</code> part (the target pattern) and the <code>src/%.cpp</code> part (the prerequisites pattern) are used for pattern substitution purposes. It’s essentially the same task that we saw when I called <code>patsubst</code> using these patterns earlier: in the previous example I used them to construct the name of a binary file from the corresponding source file, this time I’m going the other direction and constructing the name of the source file (to use as a rerequisite) from the binary file (which is used as the target).</p>
<p>Okay, now let’s turn to the second line of the code snippet. In the orginal version of the code I wrote targets like this:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb29-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb29-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span></code></pre></div>
<p>But in the static pattern rule version I’ve used <code>$&lt;</code> to refer to the prerequisite file (e.g., the source file <code>src/collatz.cpp</code>) and <code>$@</code> to refer to the file name of the target (e.g., the binary file <code>bin/collatz</code>). These are both examples of <a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html">automatic variables</a> in <code>make</code>. There are quite a lot of these: <code>$@</code>, <code>$%</code>, <code>$&lt;</code>, <code>$?</code>, <code>$^</code>, <code>$+</code>, <code>$|</code>, <code>$*</code>. Some of these have “D” and “F” variants that specifically refer to directory paths or filenames: <code>$(@D)</code> and <code>$(@F)</code> are variations on <code>$@</code>, <code>$(*D)</code> and <code>$(*F)</code> are variants of <code>$*</code> and so on. If you desperately want to learn all these details the linked page explains them all. For our purposes it’s enough to note that in the example above, I’ve used <code>$&lt;</code> to refer to the source file and <code>$@</code> to refer to the output file.</p>
<p>Right. After all that as explanatory background we can run <code>make</code>, and happily see that the results are indeed the same as before:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap</code></pre>
</div>
</div>
<p>And now that we’ve built the project we see that the filetree now contains the binaries:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version2
├── .gitignore
├── Makefile
├── bin
│   ├── collatz
│   ├── species
│   └── swap
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<div class="cell">

</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/medusa-too.jpg" class="img-fluid figure-img" alt="Oil painting of the mythological character, Medusa, reimagined through a contemporary feminist lens"></p>
<figcaption>“Me(dusa) too”. Oil painting of the mythological character, Medusa, reimagined through a contemporary feminist lens, in response to the #metoo movement.<sup>9</sup> Art by <a href="https://en.wikipedia.org/wiki/Judy_Tak%C3%A1cs">Judy Takács</a>. Released by the artist as CC-BY.</figcaption>
</figure>
</div>
</div></div></section>
<section id="the-tragedy-of-medusa-and-what-is-permitted-to-be-seen-and-said" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-tragedy-of-medusa-and-what-is-permitted-to-be-seen-and-said">The tragedy of Medusa, and what is permitted to be seen and said</h2>
<p>The last step in putting together a Makefile for our toy project is to tidy some of the code, and make choices about what messages are printed to the terminal when <code>make</code> is called. Let’s start with the tidying. It was convenient for expository purposes to create the list of targets as a two-step process, so that I could talk about the <code>wildcard</code> function before introducing the <code>patsubst</code> function:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb33-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb33-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>But realistically this doesn’t need to be two lines, so I’ll shorten it to a single line that generates the list of compilation targets:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb34-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>The second task is to add some code modifying the messages printed when targets are built. To do this, I’ll preface all my commands with the <code>@</code> symbol, which silences their raw output, thereby preventing them from being printed to the terminal whenever <code>make</code> is called. In place of the automatic printing, I’ll use <code>echo</code> to write my own, more human-friendly output lines. So now my Makefile looks like this:</p>
<div class="cell">

</div>
<div class="cell" data-file="_examples/version3/Makefile">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb35-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb35-4"></span>
<span id="cb35-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb35-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./bin</span></span>
<span id="cb35-7"></span>
<span id="cb35-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(compile):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb35-9"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compiling"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb35-10">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clang++ --std=c++20 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb35-11"></span>
<span id="cb35-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb35-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deleting binary files"</span></span>
<span id="cb35-14">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf bin</span></span></code></pre></div>
</div>
<p>Let’s have a look at what happens when we call <code>make</code> using this version of the Makefile. The same files are compiled, but the printed messages are prettier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>compiling src/collatz.cpp to bin/collatz
compiling src/species.cpp to bin/species
compiling src/swap.cpp to bin/swap</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>Much nicer.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/hercules-slaying-the-hydra.jpg" class="img-fluid figure-img" alt="Mosaic depicting Hercules and Iolaus slaying the Hydra of Lerna."></p>
<figcaption class="margin-caption">Mosaic by <a href="https://en.wikipedia.org/wiki/Sebald_Beham">Sebald Beham</a> depicting Hercules and Iolaus slaying the many-headed Hydra of Lerna, 1545. Public domain image.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="the-fourth-wall-shatters-into-little-shards-of-recursion" class="level2">
<h2 class="anchored" data-anchor-id="the-fourth-wall-shatters-into-little-shards-of-recursion">The fourth wall shatters into little shards of Recursion</h2>
<p>At this point, this post <em>has</em> covered all the tricks that I’m using in the Makefile for the accursed C++ side project that motivated me to learn <code>make</code>. What this post <em>hasn’t</em> yet covered, though, are some of the tricks that I needed to use for… um… this post. This quarto blog post is a project, and it has a Makefile. But the folder that contains all the source for this blog post <em>also</em> contains source files for all the sub-projects that I’ve used as the examples… and each of those has its own Makefile. Our simple project has become a multi-headed monster, a poisonous serpentine water beast.</p>
<p>To create a Makefile that works in this situation we need to call <a href="https://www.gnu.org/software/make/manual/make.html#Recursion">call make recursively</a>, and though much beloved by computer scientists, I personally view recursion as the little death and the exsanguination of hope. To do this with <code>make</code> some care is required. The thing you <em>don’t</em> want to do is literally use the <code>make</code> command inside a Makefile. That’s exactly the kind of intuitive strategy that get us slain by the poison breath of the Hydra. Instead, we use the <code>$(MAKE)</code> variable as an alias for <code>make</code>. To illustrate this let’s take a look at the actual Makefile used to build this post:</p>
<div class="cell" data-file="Makefile">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb38-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 2023-06-30_makefiles</span></span>
<span id="cb38-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">html</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ../../_site/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/index.html</span></span>
<span id="cb38-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> version1 version2 version3</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explicitly state that these targets aren't file names</span></span>
<span id="cb38-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> all clean clean_quarto</span></span>
<span id="cb38-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> build_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb38-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> clean_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb38-9"></span>
<span id="cb38-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> build_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">html</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-11"></span>
<span id="cb38-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(patsubst %, build_%, $(examples)):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> build_%: _examples/%</span></span>
<span id="cb38-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------ building"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------"</span></span>
<span id="cb38-14">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span>
<span id="cb38-15"></span>
<span id="cb38-16"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(html):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> index.qmd</span></span>
<span id="cb38-17"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------ rendering quarto ------------"</span></span>
<span id="cb38-18">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rendering"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb38-19">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto render </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --quiet</span></span>
<span id="cb38-20"></span>
<span id="cb38-21"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(patsubst %, clean_%, $(examples)):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> clean_%: _examples/%</span></span>
<span id="cb38-22"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> clean -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span>
<span id="cb38-23"></span>
<span id="cb38-24"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean_quarto:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb38-25"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf ../../_site/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-26">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf ../../_freeze/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-27"></span>
<span id="cb38-28"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> clean_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> clean_quarto</span></span></code></pre></div>
</div>
<p>There are some other new tricks in play here. When I call <code>make</code> via the <code>$(MAKE)</code> alias, I’m passing some additional flags: the <code>-C</code> flag tells <code>make</code> to change directories (I could also have used <code>--directory</code> here in place of <code>-C</code>), and the <code>--no-print-directory</code> flag asks <code>make</code> to do so without printing an annoyingly long message informing me that it has done so. As usual <code>$&lt;</code> refers to a prerequisite (e.g., <code>_examples/version1</code>). In other words, this command…</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb39-1"><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span></code></pre></div>
<p>… has essentially the same effect as a bash command that changes to the appropriate directory, calling <code>make</code> there, and then returning to the original directory:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> _examples/version1</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span>
<span id="cb40-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ../..</span></code></pre></div>
<p>There’s another trick in play here too. At the start of the file I’ve made use of <code>.PHONY</code> to declare explicitly that many of my targets don’t refer to real files, and are merely labels for recipes. I’ve been lazy about that up till now,<sup>10</sup> but it does matter in a lot of contexts.</p>
<p>In any case, here’s what I get as output when I <code>make</code> this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<pre><code>------------ building _examples/version1 ------------
mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap
------------ building _examples/version2 ------------
mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap
------------ building _examples/version3 ------------
compiling src/collatz.cpp to bin/collatz
compiling src/species.cpp to bin/species
compiling src/swap.cpp to bin/swap
------------ rendering quarto ------------
rendering ../../_site/posts/2023-06-23_makefiles/index.html</code></pre>
<p>Each of the example projects gets built, with a pretty header line to explain which project is building at each step of the process, and then finally the quarto document is rendered also. Somewhat awkwardly though, there’s some indirect recursion going on also: the quarto document calls <code>make</code> several times internally in order to generate much of the output shown in this post. It doesn’t actually break anything, but it does mean it’s a little harder for <code>make</code> to infer when one of the submakes is out of date. Indirect recursion is a strange beast at the best of times, but fortunately it doesn’t cause a lot of problems in this case.</p>
</section>
<section id="epilogue-and-the-death-of-the-author" class="level2">
<h2 class="anchored" data-anchor-id="epilogue-and-the-death-of-the-author">Epilogue, and the Death of the Author</h2>
<p>This was a strange post, and I honestly have no idea how to wrap it all up. If you do want to learn more about Makefiles, I highly recommend the walkthrough at <a href="https://makefiletutorial.com">makefiletutorial.com</a>. It’s how I learned. As for the rest of the narrative… I don’t know what that was all about? I was bored, I guess.</p>
</section>
<section id="postscript" class="level2">
<h2 class="anchored" data-anchor-id="postscript">Postscript</h2>
<p>After sharing this post on mastodon some folks suggested a few other resources related to make and other build automation tools. So here’s a list of resources I’ve either used in this post, or someone else suggested to me afterwards:</p>
<ul>
<li><a href="https://makefiletutorial.com">makefiletutorial.com</a> is the tutorial I learned from</li>
<li>here’s the <a href="https://www.gnu.org/software/make/manual/html_node/index.html">documentation for GNU make</a></li>
<li>a blog post by Mike Bostock: <a href="https://bost.ocks.org/mike/make/">why use make</a></li>
<li>a blog post by Jake Howard: <a href="https://theorangeone.net/posts/just-stop-using-makefile/">just! stop using make</a></li>
<li>for R users, there is the <code>usethis::use_make()</code> function which was new to me</li>
</ul>
<p>Links to some related tools:</p>
<ul>
<li><a href="https://docs.ropensci.org/targets/">targets</a></li>
<li><a href="https://cmake.org/">cmake</a></li>
<li><a href="https://snakemake.github.io/">snakemake</a></li>
<li><a href="https://ruby.github.io/rake/">rake</a></li>
<li><a href="https://microsoft.github.io/just/">just</a></li>
<li><a href="https://www.pyinvoke.org/">invoke</a></li>
<li><a href="https://taskfile.dev/">task</a></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I did ponder briefly the question of whether this joke is in poor taste. On the one hand, it probably is. On the other hand, I can’t help but notice there’s a remarkable number of people who suddenly come out of the woodwork to handwringing about the horrors of ordinary people making jokes at the expense of reckless rich people who came to a relatively painless end due to their own overwhelming hubris, while Dave Chappelle and Ricky Gervais are both out there making bank by mocking and belittling the most vulnerable people in society. Pick your battles my sweet things. Pick your battles.↩︎</p></li>
<li id="fn2"><p>Traditionally a Makefile is simply named <code>Makefile</code> or <code>makefile</code>. It doesn’t have to be, but if you call it something else you need to explicitly tell <code>make</code> where to find the file using the <code>-f</code> flag. A command like <code>make -f my_make_file</code>, for example, specifies that the Makefile is called <code>my_make_file</code>.↩︎</p></li>
<li id="fn3"><p>Admittedly, this implicitly assumes that I’m executing the <code>make</code> command from the same directory as the <code>Makefile</code> itself. That creates some awkwardness for this blog post because the quarto file is not in the same folder as the Makefile. So when you look at the source code for this post you’ll see I’m doing something slightly different. But let’s put those particular nightmares on layby shall we? Instead, let’s see what horrors escape from the particular Pandora’s box that happens to sit before us.↩︎</p></li>
<li id="fn4"><p>Don’t include “clean” in the list of “all” targets, obviously: that would defeat the point entirely.↩︎</p></li>
<li id="fn5"><p>This seems as good a moment as any to mention that yes, I am indeed aware of the <a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Rules.html">implicit rules</a> that are very often used in Makefiles to do common tasks like compiling C code without explicitly calling the compiler. I’ve chosen not to use those here because, quite frankly, implicit compilation rules make me uncomfortable.↩︎</p></li>
<li id="fn6"><p>Oh yes, <code>make</code> uses infix notation for functions. Of course it does, for the same reason that it mandates tab indentation… because <code>make</code> is the very quintessence of evil design. It’s useful enough to weasel its way into your projects, at which point it then slowly drives you toward the pit of despair by making design choices that seem chosen deliberately to make you feel like an idiot. Case in point, you can use <code>${ }</code> instead of <code>$( )</code> to call a function if you like. Because why not?↩︎</p></li>
<li id="fn7"><p>The fact that this happens to be the same batshit argument ordering used in the base R <code>gsub()</code> function makes me suspect that there is some historical reason for this that involves being lectured about grep for about an hour. Anyway there’s a reason why almost everyone who uses R in real world vastly prefers the stringr pattern matching API over the base R API. But I digress.↩︎</p></li>
<li id="fn8"><p>I’m skipping over the <code>dir</code> target on lines 8 and 9, because the code here is the same as it was in the original version. It’s very boring: it just makes sure that a <code>bin</code> folder exists.↩︎</p></li>
<li id="fn9"><p>You probably know why this piece speaks to me, and why I chose to include it even though it’s a slight departure from the narrative. If not, well, I’ll leave it for you to guess.↩︎</p></li>
<li id="fn10"><p>The <code>.ALLCAPS</code> thing going on here tells us that <code>.PHONY</code> is one of the <a href="https://www.gnu.org/software/make/manual/html_node/Special-Targets.html">special built-in target names</a> that have particular meaning in <code>make</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Makefiles. {Or,} the Balrog and the Submersible},
  date = {2023-06-30},
  url = {https://blog.djnavarro.net/posts/2023-06-30_makefiles},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Makefiles. Or, the Balrog and the
Submersible.”</span> June 30, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-30_makefiles">https://blog.djnavarro.net/posts/2023-06-30_makefiles</a>.
</div></div></section></div> ]]></description>
  <category>Reproducibility</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-30_makefiles/</guid>
  <pubDate>Thu, 29 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/gothmog.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Extracting tables from pdf files with tabulizer</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-16_tabulizer/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>In the last post I talked about <a href="../../dark-times/">something very grim</a>, and to be honest it’s not at all what wanted to be writing about yesterday. My intention when I woke up yesterday was to write about <a href="https://docs.ropensci.org/tabulizer/">tabulizer</a>, an R package you can use to extract tables from a pdf document. This isn’t my favourite of data wrangling tasks: pdf is not a very good format in which to store data, but it’s awfully common to find yourself in a situation where the data you want to work with exists only as a table in a pdf document. Because this is a thing that happens, it’s nice to have tools that make it a little easier.</p>
<section id="to-extract-a-table-we-must-first-create-the-universe" class="level2">
<h2 class="anchored" data-anchor-id="to-extract-a-table-we-must-first-create-the-universe">To extract a table, we must first create the universe</h2>
<p>The tabulizer package works by supplying bindings to <a href="https://github.com/tabulapdf/tabula-java/">tabula-java</a>, a java library for extracting tables from pdfs. So if you want tabulizer to work in R you need a working installation of Java, and you need to have the <a href="https://github.com/s-u/rJava">rJava</a> package to provide the R-to-Java bindings.</p>
<p>My experience in the past has been that getting all this setup can be a bit finicky. Happily for me, I’m on Ubuntu and <a href="https://datawookie.dev/blog/2018/02/installing-rjava-on-ubuntu/">Andrew Collier has a blog post</a> that walks you through the process step by step. Following his guide, my first step was to install the Java runtime environment and the Java development kit:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> default-jre default-jdk</span></code></pre></div>
<p>This worked smoothly, so I moved onto the next step and ensured that R knows where to find Java:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> R CMD javareconf</span></code></pre></div>
<p>Only now is it possible to install the rJava package:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rJava"</span>)</span></code></pre></div>
<p>Andrew’s post suggests that you need to restart RStudio after doing this, so I did that too. Having done so, I could finally install the tabulizer package itself:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ropensci/tabulizerjars"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ropensci/tabulizer"</span>))</span></code></pre></div>
</section>
<section id="let-there-be-tables" class="level2">
<h2 class="anchored" data-anchor-id="let-there-be-tables">Let there be tables</h2>
<p>Now that I have the tabulizer package installed, I’ll load it along with the other packages I’ll be using in this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tabulizer)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span></code></pre></div>
</div>
<p>To check that it works, I’ll need a pdf file to work with. As a convenience, the tabulizer package comes with a bundled “data.pdf” file that we can use for this purpose:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">pdf_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"examples"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.pdf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabulizer"</span>)</span></code></pre></div>
</div>
<p>I’ve embedded a copy of the “data.pdf” file in this post, and as you can see it’s very simple test case (by design). The file contains four tables, and only those four tables:</p>
<br> <object data="data.pdf" type="application/pdf" width="100%" height="500px" style="padding:10px">
<p>
Unable to display PDF file. <a href="data.pdf">Download</a> instead.
</p>
</object>
<p><br></p>
<p>We can use this data file as a way to check that the package works and does what we expect. The workhorse function in the package is <code>extract_tables()</code>. We pass it the path to the pdf file as the first argument, and use the various other arguments to provide details about how the file should be processed. In this case, the only other argument I’ll specify is <code>output = "data.frame"</code>, which tells the <code>extract_tables()</code> function to return a list of data frames rather than a list of matrices (the default behaviour). Let’s see if it’s working:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">pdf_tables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pdf_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(as_tibble)</span>
<span id="cb7-4"></span>
<span id="cb7-5">pdf_tables</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 31 × 10
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear
   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;
 1  21       6  160    110  3.9   2.62  16.5     0     1     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4
# ℹ 21 more rows

[[2]]
# A tibble: 6 × 5
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;  
1          5.1         3.5          1.4         0.2 setosa 
2          4.9         3            1.4         0.2 setosa 
3          4.7         3.2          1.3         0.2 setosa 
4          4.6         3.1          1.5         0.2 setosa 
5          5           3.6          1.4         0.2 setosa 
6          5.4         3.9          1.7         0.4 setosa 

[[3]]
# A tibble: 6 × 6
      X Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
  &lt;int&gt;        &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;    
1   145          6.7         3.3          5.7         2.5 virginica
2   146          6.7         3            5.2         2.3 virginica
3   147          6.3         2.5          5           1.9 virginica
4   148          6.5         3            5.2         2   virginica
5   149          6.2         3.4          5.4         2.3 virginica
6   150          5.9         3            5.1         1.8 virginica

[[4]]
# A tibble: 14 × 1
   supp 
   &lt;chr&gt;
 1 VC   
 2 VC   
 3 VC   
 4 VC   
 5 VC   
 6 VC   
 7 VC   
 8 VC   
 9 VC   
10 VC   
11 VC   
12 VC   
13 VC   
14 VC   </code></pre>
</div>
</div>
<p>That looks nice. With very little effort we’ve extracted all four tables from the pdf file, and returned a list of tibbles containing the data. Yay! 🎉</p>
</section>
<section id="wild-caught-pdf-files-are-trickier-to-work-with" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="wild-caught-pdf-files-are-trickier-to-work-with">Wild caught pdf files are trickier to work with</h2>
<p>Okay, let’s try a harder example. One of the two reports I referred to in yesterdays blog post is a survey of LGBTQ people conducted by <a href="https://www.dataforprogress.org/">Data For Progress</a>. Unlike the test file, it contains additional text that is not part of any table, and the tables within the report have a lot of fancier formatting that isn’t present in the test file. I’ve cached a local copy of the pdf file as “dfp_lgbtq_survey.pdf”, and you can take a look yourself to see what we’re working with this time:</p>
<br> <object data="dfp_lgbtq_survey.pdf" type="application/pdf" width="100%" height="500px" style="padding:10px">
<p>
Unable to display PDF file. <a href="dfp_lgbtq_survey.pdf">Download</a> instead.
</p>
</object>
<p><br></p>
<p>The data I used in that post comes from question 4, so I’ll try to extract the data for that table from the pdf file. This turns out to be a little harder to do. My first attempt tried to automatically pull all the tables from the second page by setting <code>pages = 2</code>, and this is what happened:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">pdf_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dfp_lgbtq_survey.pdf"</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(pdf_file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
[1,] "79" "85" "82" "70" "87" "89" "77" "79" "83" "69"  "80" 
[2,] "17" "12" "13" "29" "7"  "6"  "19" "14" "15" "27"  "17" 

[[2]]
     [,1]       [,2]      [,3]       [,4]       [,5]    [,6]     [,7]  
[1,] "Response" "Topline" "African"  "or"       "White" "Female" "Male"
[2,] ""         ""        ""         ""         ""      ""       ""    
[3,] ""         ""        "American" "Latino/a​" ""      ""       ""    
     [,8]     [,9]          [,10]         [,11] [,12] [,13] [,14] [,15]
[1,] ""       ""            "identify as" ""    ""    ""    ""    "65+"
[2,] "binary" "transgender" ""            "24"  "39"  "54"  "64"  ""   
[3,] ""       ""            "transgender" ""    ""    ""    ""    ""   </code></pre>
</div>
</div>
<p>Okay, that’s definitely not the data we want. To make this work we’re going to have to give <code>extract_tables()</code> a little more information. One way to do this is to explicitly specify the <code>area</code> of the pdf file that contains the table to be extracted. To that end, it’s helpful to first call the <code>get_page_dims()</code> function, which gives us the dimensions of each page in the pdf document:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_page_dims</span>(pdf_file)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 595 842

[[2]]
[1] 595 842

[[3]]
[1] 595 842</code></pre>
</div>
</div>
<p>Now that we have the dimensions for each page we can specify a rectangular region as a vector containing the top, left, bottom and right coordinates of the rectangle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">region <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">595</span>)</span></code></pre></div>
</div>
<p>The command we want looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> pdf_file, </span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guess =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">area =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(region)</span>
<span id="cb14-6">)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
</div>
<p>This time around, in addition to setting <code>pages = 2</code>, we’ve set <code>guess = FALSE</code> in order to stop <code>extract_tables()</code> from trying to automatically detect regions containing tabular data, and also passed a list of regions (in this case just the one region) as the <code>area</code> argument, thereby telling <code>extract_tables()</code> to look in that specific part of the document.</p>
<p>Let’s take a look at the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">mat</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code>      [,1]                                [,2]      [,3]       [,4]       [,5]    [,6]     [,7]   [,8]     [,9]            [,10]         [,11] [,12] [,13] [,14] [,15]
 [1,] ""                                  ""        "Black or" "Hispanic" ""      ""       ""     ""       ""              "Does not"    ""    ""    ""    ""    ""   
 [2,] ""                                  ""        ""         ""         ""      ""       ""     "Non-"   "Identifies as" ""            "18-" "25-" "40-" "55-" ""   
 [3,] "Response"                          "Topline" "African"  "or"       "White" "Female" "Male" ""       ""              "identify as" ""    ""    ""    ""    "65+"
 [4,] ""                                  ""        ""         ""         ""      ""       ""     "binary" "transgender"   ""            "24"  "39"  "54"  "64"  ""   
 [5,] ""                                  ""        "American" "Latino/​a" ""      ""       ""     ""       ""              "transgender" ""    ""    ""    ""    ""   
 [6,] "Yes, I have considered moving"     ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
 [7,] ""                                  "27"      "24"       "28"       "27"    "26"     "20"   "44"     "43"            "24"          "41"  "28"  "18"  "17"  "17" 
 [8,] "out of my community or state"      ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
 [9,] "No, I have not considered"         ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[10,] "moving out of my community or"     "61"      "57"       "59"       "64"    "60"     "75"   "37"     "40"            "65"          "43"  "60"  "74"  "80"  "70" 
[11,] "state"                             ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[12,] "I have already moved out of my"    ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[13,] "community or state as a result of" "5"       "6"        "4"        "3"     "3"      "3"    "13"     "8"             "4"           "8"   "4"   "2"   "1"   "9"  
[14,] "anti-LGBTQ+ legislation"           ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[15,] "Not sure"                          "7"       "14"       "8"        "6"     "11"     "3"    "6"      "8"             "7"           "9"   "8"   "7"   "2"   "4"  
[16,] "Weighted N"                        "1,036"   "93"       "217"      "632"   "426"    "368"  "135"    "166"           "870"         "249" "425" "186" "93"  "83" </code></pre>
</div>
</div>
<p>It’s not quite organised the way we want, but it’s definitely the right data.</p>
<p>Even better, you don’t actually have to do all this messing about trying to figure out the precise region containing the table. If you have the <a href="https://shiny.posit.co/">Shiny</a> and <a href="https://github.com/rstudio/miniUI">miniUI</a> packages installed, you can work interactively using a command like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_areas</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dfp_lgbtq_survey.pdf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>After using click and drag to select the region of the page containing the table, R returns the same data contained in the <code>mat</code> matrix shown earlier.</p>
</section>
<section id="cleaning-the-table" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cleaning-the-table">Cleaning the table</h2>
<p>Once we have the data in this matrix form, it’s slightly tedious to wrangle it into the format we want, but it’s not conceptually difficult once we have a few helper functions to make our lives easier. The first step is to split the matrix into a list of matrices, each of which contains the data that should belong in a single row of the final data set. The <code>row_split()</code> function below takes a matrix as input, and splits it up into a list of matrices specified by the list argument <code>rows</code>, where each element of <code>rows</code> is a vector containing the indices of the rows that should be included in the relevant element of the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">row_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, rows) {</span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(rows, \(r) {</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(x[r, ], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb18-4">    x[r, ]</span>
<span id="cb18-5">  })</span>
<span id="cb18-6">}</span>
<span id="cb18-7">groups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb18-8"></span>
<span id="cb18-9">mat_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_split</span>(mat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> groups)</span>
<span id="cb18-10">mat_split</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
     [,1]       [,2]      [,3]       [,4]       [,5]    [,6]     [,7]   [,8]     [,9]            [,10]         [,11] [,12] [,13] [,14] [,15]
[1,] ""         ""        "Black or" "Hispanic" ""      ""       ""     ""       ""              "Does not"    ""    ""    ""    ""    ""   
[2,] ""         ""        ""         ""         ""      ""       ""     "Non-"   "Identifies as" ""            "18-" "25-" "40-" "55-" ""   
[3,] "Response" "Topline" "African"  "or"       "White" "Female" "Male" ""       ""              "identify as" ""    ""    ""    ""    "65+"
[4,] ""         ""        ""         ""         ""      ""       ""     "binary" "transgender"   ""            "24"  "39"  "54"  "64"  ""   
[5,] ""         ""        "American" "Latino/​a" ""      ""       ""     ""       ""              "transgender" ""    ""    ""    ""    ""   

[[2]]
     [,1]                            [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Yes, I have considered moving" ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] ""                              "27" "24" "28" "27" "26" "20" "44" "43" "24"  "41"  "28"  "18"  "17"  "17" 
[3,] "out of my community or state"  ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[3]]
     [,1]                            [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "No, I have not considered"     ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] "moving out of my community or" "61" "57" "59" "64" "60" "75" "37" "40" "65"  "43"  "60"  "74"  "80"  "70" 
[3,] "state"                         ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[4]]
     [,1]                                [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "I have already moved out of my"    ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] "community or state as a result of" "5"  "6"  "4"  "3"  "3"  "3"  "13" "8"  "4"   "8"   "4"   "2"   "1"   "9"  
[3,] "anti-LGBTQ+ legislation"           ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[5]]
     [,1]       [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Not sure" "7"  "14" "8"  "6"  "11" "3"  "6"  "8"  "7"   "9"   "8"   "7"   "2"   "4"  

[[6]]
     [,1]         [,2]    [,3] [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Weighted N" "1,036" "93" "217" "632" "426" "368" "135" "166" "870" "249" "425" "186" "93"  "83" </code></pre>
</div>
</div>
<p>The second helper function is <code>col_paste()</code> which takes a matrix with one or more rows as input and collapses it to a vector by pasting the contents of all cells in the same column together:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">col_paste <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, \(y) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(y, ...))})</span>
<span id="cb20-3">}</span></code></pre></div>
</div>
<p>To illustrate the idea, let’s take <code>mat_split[[1]]</code>, a five-row matrix that contains the data that should eventually become our column names, and convert it to a character vector using <code>col_paste()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_paste</span>(mat_split[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "  Response  "                      
 [2] "  Topline  "                       
 [3] "Black or  African  American"       
 [4] "Hispanic  or  Latino/​a"            
 [5] "  White  "                         
 [6] "  Female  "                        
 [7] "  Male  "                          
 [8] " Non-  binary "                    
 [9] " Identifies as  transgender "      
[10] "Does not  identify as  transgender"
[11] " 18-  24 "                         
[12] " 25-  39 "                         
[13] " 40-  54 "                         
[14] " 55-  64 "                         
[15] "  65+  "                           </code></pre>
</div>
</div>
<p>Finally, we can use the <code>row_combine()</code> function below that takes a list of vectors and combines them into a matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">row_combine <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-3">}</span></code></pre></div>
</div>
<p>Equipped with these helpers, the following pipeline takes the raw output <code>mat</code> and converts it into a tibble <code>dat</code> containing the data in the format we want it to be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_split</span>(groups) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split into list of matrices</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_paste</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># paste into character vector</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_combine</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine vectors into one matrix</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.name_repair =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minimal"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to tibble</span></span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_to_names</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_number =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use first row as names</span></span>
<span id="cb24-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean the names</span></span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(                                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shorten some names</span></span>
<span id="cb24-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black_or_african_american"</span>,</span>
<span id="cb24-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hispanic"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hispanic_or_latino_a"</span>, </span>
<span id="cb24-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trans"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identifies_as_transgender"</span>,</span>
<span id="cb24-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not_trans"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"does_not_identify_as_transgender"</span></span>
<span id="cb24-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>response, \(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, x))})) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numeric data</span></span>
<span id="cb24-15"></span>
<span id="cb24-16">dat</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 15
  response                        topline black hispanic white female  male non_binary trans not_trans x18_24 x25_39 x40_54 x55_64   x65
  &lt;chr&gt;                             &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1 Yes, I have considered moving …      27    24       28    27     26    20         44    43        24     41     28     18     17    17
2 No, I have not considered movi…      61    57       59    64     60    75         37    40        65     43     60     74     80    70
3 I have already moved out of my…       5     6        4     3      3     3         13     8         4      8      4      2      1     9
4 Not sure                              7    14        8     6     11     3          6     8         7      9      8      7      2     4
5 Weighted N                         1036    93      217   632    426   368        135   166       870    249    425    186     93    83</code></pre>
</div>
</div>
<p>Et voilà!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Extracting Tables from Pdf Files with Tabulizer},
  date = {2023-06-16},
  url = {https://blog.djnavarro.net/posts/2023-06-16_tabulizer},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Extracting Tables from Pdf Files with
Tabulizer.”</span> June 16, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-16_tabulizer">https://blog.djnavarro.net/posts/2023-06-16_tabulizer</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Data Wrangling</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-16_tabulizer/</guid>
  <pubDate>Thu, 15 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-16_tabulizer/dimitra-peppa--abBaVOMsBk-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>On living in dark times</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-15_dark-times/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>As a rule, I don’t do politics on this blog. In fact, I have never previously discussed political or social issues on this blog. I’ve scrupulously avoided discussing anything that might carry the hint of politics, because I don’t wish to be drawn into the fray. I’m a data scientist, a statistician, and a generative artist. I do not have the temperament required to involve myself in matters political, and it is fundamentally not what I wish to be doing with this blog. However, sometimes exceptions need to be made, and this post is one such exception.</p>
<p>One of the feeds I follow fairly regularly is <a href="https://www.erininthemorning.com/">Erin in the Morning</a>, a substack written by <a href="https://en.wikipedia.org/wiki/Erin_Reed_(journalist)">Erin Reed</a>. Erin is an activist and independent journalist who writes about transgender issues, and one of the few people who diligently attempts to document the full scope of the anti-trans laws that are currently being passed across large swathes of the United States, and the consequences that those laws are having on transgender people who live there. It’s grim reading.</p>
<p>A couple of days ago she published a very depressing post entitled <a href="https://www.erininthemorning.com/p/us-internal-refugee-crisis-130-260k">US internal refugee crisis: 130-260k trans people have already fled</a>, documenting the scale of the crisis currently affecting trans people in the US, and presenting personalised accounts from people who have been forced to leave their lives behind and flee to safer territory. A staggeringly large number of trans people have been internally displaced. They are so frightened by what is happening right now that they have upended their lives and moved in the hope of finding safety.</p>
<p>If you haven’t read the article yet, read it first… I’ll wait.</p>
<p>Okay, you’ve read it now, right? Good.</p>
<p>At this point, if you’re a statistician (or any other data-focused person) you have one of two reactions. If you’re a decent human being, your reaction will be something like this:</p>
<blockquote class="blockquote">
<p>Fucking fuck fuck fuck this is horrible. What can I do to help?</p>
</blockquote>
<p>Unfortunately, many statisticians will have this reaction:</p>
<blockquote class="blockquote">
<p>That’s not how you should construct the estimate. Those numbers aren’t quite right, and probably an overestimate. So instead of being a decent human being I’m going to be a smug asshole, shove my head back in the sand, and ignore the very real crisis unfolding.</p>
</blockquote>
<p>Admittedly the second group would probably choose to phrase their reaction differently, because they don’t want to admit that statistical pedantry is not an appropriate response to a catastrophic situation. Nevertheless, I’ve met statisticians before. We all have. We know perfectly well that pedantry is precisely what many of them will resort to when presented with an article like this one.</p>
<p>And so, in order to cut that off at the pass and do my best to forestall anyone who might be tempted to dismiss the substance of Erin’s point by nitpicking the statistics I’m going to redo her calculations in a somewhat more statistically careful way, and you can decide for yourself whether you want to be an asshole about it.</p>
<section id="what-proportion-of-the-transgender-population-has-been-displaced" class="level2">
<h2 class="anchored" data-anchor-id="what-proportion-of-the-transgender-population-has-been-displaced">What proportion of the transgender population has been displaced?</h2>
<p>The data source is this <a href="https://www.dataforprogress.org/blog/2023/6/8/lgbtq-adults-do-not-feel-safe-and-do-not-think-the-democratic-party-is-doing-enough-to-protect-their-rights">article by Data For Progress</a>.</p>
<p>From the pdf report embedded at the bottom of the page, the point estimate suggests 8% of transgender adults (defined here as people aged 18+) in the United States have been forced to migrate interstate. However, the weighted N associated with that point estimate is only 166, because sampling transgender people is hard. We don’t have any more detailed breakdown to work with, but as a “back of the envelope” style calculation, I’ll treat this as if it were a simple random sample in which 13 of 166 transgender adults indicated that they have already been forced to move interstate because of the current crisis. To the extent that this is a reasonable first-pass approximation, a simple beta-binomial model will suffice to provide an uncertainty estimate:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Ctheta%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BBeta%7D(1,%201)%20%5C%5C%0An%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BBinomial%7D(%5Ctheta,%20N%20=%20166)%0A%5Cend%7Barray%7D%0A"></p>
<p>Given <img src="https://latex.codecogs.com/png.latex?n%20=%2013"> displaced people from a simple random sample of <img src="https://latex.codecogs.com/png.latex?N%20=%20166"> transgender people, the posterior proportion of displaced trans people is given by a Beta(14, 154) distribution.<sup>1</sup> As such our 95% equal-tail credible interval is straightforwardly calculated as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0465905 0.1294375</code></pre>
</div>
</div>
<p>In other words, the data from this survey suggest that somewhere between 5% and 13% of all transgender adults in the United States have been internally displaced as a consequence of the deluge of anti-trans legislation in the last few years.<sup>2</sup> How many people is that, really? To answer that question we need to know something about how many trans people there are in the United States.</p>
</section>
<section id="what-proportion-of-the-us-population-is-transgender" class="level2">
<h2 class="anchored" data-anchor-id="what-proportion-of-the-us-population-is-transgender">What proportion of the US population is transgender?</h2>
<p>For this we can use a relatively recent <a href="https://williamsinstitute.law.ucla.edu/publications/trans-adults-united-states">survey by the Williams Institute</a>. The webpage provides point estimates in a digestible form, but Tables 4 and A4 of the associated <a href="https://williamsinstitute.law.ucla.edu/wp-content/uploads/Trans-Pop-Update-Jun-2022.pdf">pdf report</a> includes a 95% credible interval that suggests the adult transgender population in the United States (where again age 18+ is used as the cutoff) is somewhere between 816,644 and 1,964,330 people. Or, to express it as a percentage, somewhere between 0.32% and 0.77% of the US adult population of 255,201,250 persons identifies as transgender (the point estimate is 0.52%).</p>
<p>In my ideal world I’d have access to the actual posterior distribution from the Williams Institute modelling, but alas I do not. However, since this is intended as a back-of-the-envelope style calculation, I’ll again try to make some sensible assumptions. In most situations I’d be willing to assume that the posterior is approximately normal, but that doesn’t work here because the percentages are too close to zero. Instead what I’ll do is use a beta distribution and choose parameters that ensure the relevant quantiles approximately mirror the numbers from the Williams Institute study:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.65</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3922.84</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.003230431 0.005153068 0.007716206</code></pre>
</div>
</div>
<div class="cell">
<details class="code-fold">
<summary>Parameter estimation code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the values I hand tuned originally</span></span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> \(par) {</span>
<span id="cb5-4">    prd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-5">    obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0032</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0052</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0077</span>)</span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>((obs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prd)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-7">  }</span>
<span id="cb5-8">)</span></code></pre></div>
</details>
</div>
<p>It’s awfully crude, but it works: the 95% equal-tail intervals that you’d get if this were the real posterior match the numbers reported by the Williams Institute, the distribution is bounded appropriately, and the point estimate (in this case the median) is pretty decent too. Good enough for the back of an envelope calculation I’d say.</p>
</section>
<section id="estimating-the-number-of-displaced-persons" class="level2">
<h2 class="anchored" data-anchor-id="estimating-the-number-of-displaced-persons">Estimating the number of displaced persons</h2>
<p>Okay, now I have some (slightly crude) posterior densities to express what we know about (a) the proportion of adults in the United States are transgender, and (b) the proportion of transgender adults in the United States that have been displaced courtesy of the anti-trans legislation sweeping the nation. Again using the numbers from the Williams Institute study as the basis for the calculation, I’ll assume that the adult population of the US is approximately 255,201,250 persons. Now, I personally don’t know how to convolve two beta distributions analytically, but it’s not even slightly hard to do numerically:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">sim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_adults =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255201250</span>,</span>
<span id="cb6-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_trans =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.65</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3922.84</span>),</span>
<span id="cb6-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_displaced =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>),</span>
<span id="cb6-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_displaced =</span> n_adults <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prop_trans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prop_displaced</span>
<span id="cb6-6">)</span></code></pre></div>
</div>
<p>Having done so, we can plot a distribution reflecting what we know about the number of transgender adults who have been displaced:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(sim, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_displaced)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_comma</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-15_dark-times/index_files/figure-html/displaced-trans-persons-histogram-1.png" class="img-fluid figure-img" alt="A histogram representing the uncertainty around the number of internally diplaced trans people within the United State. The plot shows a distribution with a peak at around 100000 people. The vast bulk of the distribution is between 50000 and 200000 people. There is a very slight positive skewness to the distribution." width="672"></p>
</figure>
</div>
</div>
</div>
<p>So… how many transgender people within the United States do we estimate have already been forced from their homes as a consequence of the dire political climate there? Here’s the headline number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_displaced)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 111379.2</code></pre>
</div>
</div>
<p>About 111000 people. That’s… a lot, and that number doesn’t even include the families of transgender adults, or transgender children, or the families of transgender children. I mean, there aren’t many of us. We are a small population, and this is a humanitarian disaster for transgender people in the United States. It’s something that has been building for several years now, and every trans person knows it.</p>
<p>The precise scale of the disaster isn’t entirely clear from the data. The point estimate of 111k people could be out by a factor of 2 in either direction, which you can see by calculating the 95% credible interval:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_displaced, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     2.5%     97.5% 
 51998.81 199427.60 </code></pre>
</div>
</div>
<p>Between 52000 and 199000 transgender adults have been displaced. No matter how you look at it, a <em>lot</em> of people have been forced to flee already.</p>
<p>At some point the rest of the American population will start to actually <em>do</em> something about this, right? I mean, something <strong>other</strong> than make it worse or waste your time and effort by <a href="https://statmodeling.stat.columbia.edu/2021/07/18/what-is-a-woman/">whining about the threat to society posed by trans women in sports and asking “what is a woman?”</a>.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Huge thank you to Martin Modrák for noticing the mistake in which I’d originally specified a Beta(14, 167) distribution here like an idiot.↩︎</p></li>
<li id="fn2"><p>You could do the same thing in a frequentist way, of course, but that would be no less crude than this Bayesian method, and anyway I already did that and found essentially the same answer. This isn’t a situation where Bayes-vs-orthodox matters very much. In the real world, the nuance is entirely around the SRS assumption and the accuracy of the responses. In that respect I’m of course oversimplifying, but let’s be honest… how much do you <em>really</em> think this would change things? Be honest.↩︎</p></li>
<li id="fn3"><p>The original version of this post used hand tuned parameter values because I had a brain fade and forgot that it’s absurdly easy to find least squares estimates with <code>optim()</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {On Living in Dark Times},
  date = {2023-06-15},
  url = {https://blog.djnavarro.net/posts/2023-06-15_dark-times},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“On Living in Dark Times.”</span> June
15, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-15_dark-times">https://blog.djnavarro.net/posts/2023-06-15_dark-times</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Statistics</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-15_dark-times/</guid>
  <pubDate>Wed, 14 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-15_dark-times/map.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
