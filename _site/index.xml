<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/</link>
<atom:link href="https://blog.djnavarro.net/index.xml" rel="self" type="application/rss+xml"/>
<description>A data science blog by Danielle Navarro</description>
<image>
<url>https://blog.djnavarro.net/profile_hex.jpg</url>
<title>Notes from a data witch</title>
<link>https://blog.djnavarro.net/</link>
</image>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Thu, 25 Jan 2024 13:00:00 GMT</lastBuildDate>
<item>
  <title>Splatter</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-26_splatter/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Over the last few weeks I’ve been posting generative art pieces on mastodon from a generative art system I’ve called <a href="https://art.djnavarro.net/gallery/splatter/">splatter</a>. It creates pieces like these:</p>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_708.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_709.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-splatter/image/splatter_07_973.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>The splatter series has a lot in common with other generative art systems I’ve built in the past, and in many respects is a spiritual descendant of both <a href="https://art.djnavarro.net/gallery/curled/">curled</a> and <a href="https://art.djnavarro.net/gallery/water-colours/">water colours</a>.<sup>1</sup> However, the system has developed enough of its own “look and feel” by now that I think of splatter as its own thing, deserving a writeup of its very own.</p>
<section id="the-basic-idea" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-basic-idea">The basic idea</h2>
<p>The core logic of splatter is pretty simple three-step process:</p>
<ol type="1">
<li><p>Create a “base” image that provides the large-scale structure to the piece (left panel below).</p></li>
<li><p>Using the “base” data as input, create a “flowing” version of the same image (middle panel below). We do this by placing a particle at every cell in the grid, defining a vector field over the grid that describes how each particle moves, and then tracing out the paths of all the particles over many iterations.</p></li>
<li><p>Taking the “flowing” data as input, apply a randomly generated palette and create a prettily-coloured version of the image (right panel below).</p></li>
</ol>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/base.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/flow.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/splatter.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>I’ll unpack these steps below, showing the actual code used to create these images and walking through some of the logic and design considerations that goes into building a system like this one.<sup>2</sup></p>
</section>
<section id="creating-a-base-image" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="creating-a-base-image">Creating a base image</h2>
<p>First let’s take a look at the base images. As you can see from the one shown in the left panel above, these aren’t super-complicated things and they could be generated in many different ways. Somewhat arbitrarily, I decided that for this system I’d build them using via simple cellular automaton implemented in C++ and called from R via <a href="https://www.rcpp.org/">Rcpp</a>. There’s no principled reason for this, I just happened to have suitable code lying around from a previous generative art system called <a href="https://art.djnavarro.net/gallery/stoneskip/">stoneskip</a>, which produces pieces like these:<sup>3</sup></p>
<div>

</div>
<div class="column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_9.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_14.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://storage.googleapis.com/djnavarro-art/series-stoneskip/800/stoneskip_01_16.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>That said, the implementation used in splatter is different from the stoneskip system. The C++ code below defines an <code>automaton()</code> function that is exposed to R via Rcpp, and can be used to create the base images:<sup>4</sup> <sup>5</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// wrap position to grid</span></span>
<span id="cb1-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// automaton run function</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb1-13">NumericMatrix automaton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">  </span>
<span id="cb1-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-24">  </span>
<span id="cb1-25">  NumericMatrix grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-28">      grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-31">  </span>
<span id="cb1-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-33">    source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-34">    source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-35">    source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>source_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> source_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-36">    span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-37">    span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-38">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-39">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-41">      c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-43">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-44">        grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> source_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-45">        row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-46">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-47">      col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb1-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-49">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-50">  </span>
<span id="cb1-51">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>Ultimately this algorithm is very simple. It’s approximately this:</p>
<ol type="1">
<li>Create a <code>grid</code> matrix and populate every element with a random number.</li>
<li>On every iteration:
<ol type="a">
<li>Pick a random cell in <code>grid</code> to be the “source cell” and treat the value currently assigned to that cell to be the “source value”.</li>
<li>Define a rectangular “neighbourhood” around that cell (with a random width and height).</li>
<li>For every cell in the neighbourhood, update the value to be the average of its current value and the source value.</li>
</ol></li>
<li>Return <code>grid</code>.</li>
</ol>
<p>If you ran it long enough it would eventually produce a completely homogeneous grid, but if you run it for a modest amount of time you end up with somewhat smooth blobbish shapes.</p>
<p>In the normal course of events this code would live in <code>.cpp</code> file and then I’d call <code>Rcpp::sourceCpp()</code> from R to trigger compilation and linking to R, but in the context of this blog post I don’t have to because I’m <a href="https://bookdown.org/yihui/rmarkdown/language-engines.html#rcpp">using the Rcpp language engine</a> which automatically takes care of that within the R session that is used to render the post. So we can skip that step, and go straight to the part where we define a <code>base_data()</code> function in R that constructs a data frame with columns specifying row and column indices, and using the <code>automaton()</code> function to assign a value to the corresponding cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">base_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, rows, cols, iterations, span) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb2-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> cols),</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> rows),</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-9">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(),</span>
<span id="cb2-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automaton</span>(rows, cols, iterations, span)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-13">        ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb2-14">    )</span>
<span id="cb2-15">}</span></code></pre></div>
</div>
<p>The primary intention in this function is to create a data frame that has columns <code>x</code> and <code>y</code> that specify coordinates for every element in a grid, and a <code>value</code> column that is populated by calling the <code>automaton()</code> function that Rcpp exposes to the R session.<sup>6</sup> Here it is in action:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"></span>
<span id="cb3-9">base</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10,000 × 6
       x      y     z  iter    id value
   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1     0 0          1     0     1 0.850
 2     0 0.0101     1     0     2 0.801
 3     0 0.0202     1     0     3 0.818
 4     0 0.0303     1     0     4 0.814
 5     0 0.0404     1     0     5 0.736
 6     0 0.0505     1     0     6 0.704
 7     0 0.0606     1     0     7 0.704
 8     0 0.0707     1     0     8 0.740
 9     0 0.0808     1     0     9 0.640
10     0 0.0909     1     0    10 0.595
# ℹ 9,990 more rows</code></pre>
</div>
</div>
<p>You can see from the output that there are a few other columns in the output. These are added because this base data is used as the initial state for a set of particles that we’re going to place within a vector field and then trace their paths. The logic for including each of these:</p>
<ul>
<li><p>We might want to use a vector field that moves points in three dimensions, so there’s also a <code>z</code> column (which is set to a constant value in this case). I’m not really using this feature in the splatter system, but I’ve done it in the past in other systems. One handy trick if you want to give a system a feeling of “mild inhomogeneity” – with different points appearing to move according to similar but not identical flow fields – is to displace each point by a small amount in the <code>z</code> coordinate, and then use a three-dimensional flow field to move the points in three dimensions, while only plotting the <code>x</code> and <code>y</code> values. You can also use the “hidden <code>z</code> coordinate” trick as a way of smoothly changing the colour.</p></li>
<li><p>Similarly, because this base data is used as the initial state for an iterative process, there is also a column <code>iter</code> that records the iteration number (set to 0 for the base data). One the one hand this is nice for housekeeping purposes (e.g., filtering the data to find the subset corresponding to a particular iteration), but later on we’ll actually use this in the plots.</p></li>
<li><p>Finally, we have a <code>id</code> column that assigns each element of the grid a unique number, which can come in handy later on if we want to trace out the path followed by a single particle.</p></li>
</ul>
<p>All that being said, at this point in the development of our system the things we’re most interested in are the <code>x</code> and <code>y</code> coordinates of each cell in our grid, and the <code>value</code> that we use to provide an initial colour to that location. At this point we don’t actually have a genuine palette to map <code>value</code> onto an actual colour, so for now we’ll just use the <a href="https://ggplot2.tidyverse.org/">ggplot2</a> default:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, </span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> value</span>
<span id="cb5-6">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-7">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-9">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb5-10">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-11">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/base-image-plot-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>This is our base image. It’s not super exciting or even particularly aesthetically pleasing, but that’s not the point. What I’m looking for in the base image is something that varies fairly smoothly to create an overall “shape” for the final image, and with enough random variations and irregularities to produce interesting textures in the final image. When building a system like this I’ve found that it’s important to have <em>something</em> that plays this role. They do a huge amount of work in defining the “composition” of the final art work, and if you don’t put a bit of thought into what this part of the system looks like you can end up with pieces that don’t have global structure, and feel a bit bland.</p>
<p>That being said, I don’t think there’s anything very special about the <code>automaton()</code> function I have used in the splatter system. It was a pretty arbitrary choice, and I’m entirely certain that you could swap it out for any number of alternative algorithms and end up with fabulous pieces.</p>
</section>
<section id="creating-the-flow" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-flow">Creating the flow</h2>
<p>Now that we have a base image to provide a bit of global structure, we’re going to need a vector field that we can use to create a sense of flow in the piece. This part is by far the most elaborate part of splatter, and it relies heavily on the <a href="https://ambient.data-imaginist.com/">ambient</a> package. I’ll start by writing a function <code>curl_step()</code> that defines a vector field that specifies, for every point defined by <code>x</code>, <code>y</code>, and <code>z</code> coordinates, how quickly and in what direction a particle located at that point is moving. When passed a data frame <code>data</code> that contains columns <code>x</code>, <code>y</code>, and <code>z</code>, it returns a new data frame with updated coordinates derived by moving each point a small distance defined by the relevant element in the vector field.<sup>7</sup> Additionally, since our input data frame has an <code>iter</code> column corresponding to the iteration number (recall earlier our “base image” has <code>iter = 0</code> for every cell), the output data frame records the updated iteration number.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">curl_step <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb6-2">                      iteration, </span>
<span id="cb6-3">                      scale, </span>
<span id="cb6-4">                      octaves, </span>
<span id="cb6-5">                      seed) {</span>
<span id="cb6-6">  </span>
<span id="cb6-7">  noise_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb6-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x,</span>
<span id="cb6-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb6-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z,</span>
<span id="cb6-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb6-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fracture,</span>
<span id="cb6-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb6-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>ridged,</span>
<span id="cb6-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb6-16">  )</span>
<span id="cb6-17">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iteration</span>
<span id="cb6-18">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-19">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-20">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb6-21">  data</span>
<span id="cb6-22">}</span></code></pre></div>
</div>
<p>There’s quite a lot going on internally here, and I’m not going to dive deeply into the ambient package in this post. I’ll provide a visual illustration of what happens when <code>curl_step()</code> is called – it’s a bit lower in the post after I define the <code>curl_loop()</code> function – but if you’re interested in a more detailed explanation of the logic underpinning this code, I’ll refer you to the notes I wrote for my <a href="https://art-from-code.netlify.app/">art from code</a> workshop I gave a couple of years ago. The notes have a section discussing <a href="https://art-from-code.netlify.app/day-1/session-2/#curl-of-a-spatial-noise-pattern">curl fields</a> and how they are generated using <code>ambient::curl_noise()</code>, along with sections discussing how <code>ambient::fracture()</code> can be used to create more elaborate and visually interesting flow fields with fractals.</p>
<p>In any case let’s move onto the next step, in which I’ll define a function <code>curl_loop()</code>that uses <code>purrr::accumulate()</code> to iteratively apply the <code>curl_step()</code> function. It starts with an initial state provided by the base image, and then treats the output of every call to <code>curl_step()</code> as the input to the next call. All the intermediate results are stored, resulting in a list of data frames (one per iteration) that is then collapsed into one large data frame that traces the paths of all points across many iterations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">curl_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb7-2">                      seed, </span>
<span id="cb7-3">                      iterations, </span>
<span id="cb7-4">                      scale, </span>
<span id="cb7-5">                      octaves) {</span>
<span id="cb7-6">  states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(</span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations,</span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> curl_step,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> data,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> scale,</span>
<span id="cb7-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb7-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed</span>
<span id="cb7-13">  )</span>
<span id="cb7-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(states)</span>
<span id="cb7-15">}</span></code></pre></div>
</div>
<p>Now that we have these functions, let’s apply them to create a data frame called <code>flow</code> that takes the grid of points defined in our <code>base</code> data frame and repeatedly moves each of them along paths defined by our vector field:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">flow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-7">  )</span>
<span id="cb8-8"></span>
<span id="cb8-9">flow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,000,000 × 6
       x      y     z  iter    id value
   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;
 1     0 0          1     0     1 0.850
 2     0 0.0101     1     0     2 0.801
 3     0 0.0202     1     0     3 0.818
 4     0 0.0303     1     0     4 0.814
 5     0 0.0404     1     0     5 0.736
 6     0 0.0505     1     0     6 0.704
 7     0 0.0606     1     0     7 0.704
 8     0 0.0707     1     0     8 0.740
 9     0 0.0808     1     0     9 0.640
10     0 0.0909     1     0    10 0.595
# ℹ 999,990 more rows</code></pre>
</div>
</div>
<p>This <code>flow</code> data frame provides all the structural elements required to draw the plot. Here’s what it looks like when we create an image using the default shades-of-blue palette in ggplot2:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">pic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> flow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb10-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb10-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb10-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb10-7">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb10-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-12">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb10-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb10-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb10-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb10-16">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  </span>
<span id="cb10-17">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb10-18"></span>
<span id="cb10-19">pic</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/flowing-plot-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>Looking at this plot you get a visceral sense of motion and flow, which is of course the intention, but it’s hard to get a sense of how each of the “cells” in our original base image is moving. Again this is by design. You’re not supposed to be able to see that in the final image. But, for the purposes of unpacking it, here’s an animated version created using <a href="https://gganimate.com/">gganimate</a> which traces out the pattern of movement for every cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">pic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gganimate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transition_time</span>(iter)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/anim.gif" class="img-fluid quarto-figure quarto-figure-center figure-img" width="800"></p>
</figure>
</div>
<p>In this animation you can see how the plot begins with 10000 “particles” laid out on a regular grid (i.e., there’s one particle for each cell in the original base data), and then iteratively “moves” each of those particles along a path defined by the vector field (created by repeatedly calling <code>curl_step()</code>). You can also see that each particle is gradually shrinking in size over time, a feature that is also used in the splatter plots.</p>
<p>To unpack it a little further, we can use the <code>flow</code> data to create a visual representation of what the vector field itself looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">flow <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(iter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id</span>
<span id="cb12-7">  )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-8">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(</span>
<span id="cb12-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(</span>
<span id="cb12-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> grid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">008</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"npc"</span>),</span>
<span id="cb12-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ends =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last"</span>,</span>
<span id="cb12-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"open"</span></span>
<span id="cb12-13">    )</span>
<span id="cb12-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-15">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb12-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb12-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb12-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-19">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/vector-field-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>In this plot, what I’ve done is taken the locations of each of the particles at iteration 0 (because at time 0 the points all sit on a regular grid) and drawn a little arrow that shows where each of them move to when <code>curl_step()</code> is applied. This gives us a rough visualisation of what the vector field looks like. The field itself doesn’t change, but of course once you start moving the particles they no longer sit on a nice grid. To illustrate both of these facts, here’s the same plot but this time I show the step from iteration 10 to iteration 11:</p>
<div class="cell">
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/vector-field-2-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>At any given location the arrow is still the same (because the vector field itself is invariant), but it’s not a nice clean grid in this version because the particles will naturally tend to bunch up as you move them through the field.<sup>8</sup></p>
<p>In any case, I think that at this point we have a fairly decent sense of how the splatter pieces are shaped by the underlying vector field, so it’s time to move on…</p>
</section>
<section id="choosing-a-palette" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="choosing-a-palette">Choosing a palette</h2>
<p>The final part of the splatter system is the paletting system. At this point I confess I started to get a little bit lazy, and created a very simple paletting system that doesn’t always work. Basically, the system is hard coded with a list of 100 colours and it randomly samples 4 of them to define a linear gradient palette that interpolates between those four shades. Here’s a <code>sample_palette()</code> function that implements this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">sample_palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, size) {</span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb13-3">  cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb13-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>,</span>
<span id="cb13-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>,</span>
<span id="cb13-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>,</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>,</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>,</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>,</span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>,</span>
<span id="cb13-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>,</span>
<span id="cb13-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>,</span>
<span id="cb13-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>,</span>
<span id="cb13-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>,</span>
<span id="cb13-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>,</span>
<span id="cb13-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>,</span>
<span id="cb13-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>,</span>
<span id="cb13-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>,</span>
<span id="cb13-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>,</span>
<span id="cb13-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>,</span>
<span id="cb13-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>,</span>
<span id="cb13-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>,</span>
<span id="cb13-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span></span>
<span id="cb13-24">  )</span>
<span id="cb13-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cols, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size)</span>
<span id="cb13-26">}</span></code></pre></div>
</div>
<p>Here’s a few random palettes generated using this function:</p>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb14-2">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb14-3">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_col</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-1.png" class="img-fluid" width="480"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-2.png" class="img-fluid" width="480"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/sampled-palettes-3.png" class="img-fluid" width="480"></p>
</div>
</div>
</div>
<p>It doesn’t always produce satisfying colour schemes, but it succeeds often enough for the system to be workable. And now that we have a paletting system we can write a <code>make_plot()</code> function that applies the palette using <code>ggplot2::scale_colour_gradientn()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">make_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, seed) {</span>
<span id="cb15-2">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-3">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-4">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb15-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb15-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb15-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb15-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb15-9">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-10">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb15-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb15-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb15-13">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-14">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb15-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb15-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb15-17">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb15-18">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-19">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-20">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb15-21">}</span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(flow, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/shading-plots-1.png" class="img-fluid figure-img" width="960"></p>
</figure>
</div>
</div>
</div>
<p>At this point, we have our final image.</p>
</section>
<section id="exploring-the-system" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="exploring-the-system">Exploring the system</h2>
<p>In order to play around with system, it’s helpful to wrap the whole generative process from beginning to end in a <code>splatter()</code> function that generates images. It takes a single argument <code>seed</code>, which can either be a scalar seed value that is used for all components to the system, or it can be a three-element vector that supplies separate seeds for the base data, the vector field, and the palette:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">splatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb16-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb16-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb16-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb16-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb16-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb16-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb16-18">}</span></code></pre></div>
</div>
<p>The ability to set the seed separately for each of the components is useful for illustrating the role played by each one. First let’s look at what happens when we hold the base image and the vector field constant, but vary the palette:</p>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-palette-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>As you’d expect, these are all structurally the same image: same shapes, same flowing look, but with very different colour schemes, and of course this drastically changes the feel of each piece.</p>
<p>Alternatively, we can keep the base image and palette constant, but use a different vector field each time. Looking at the images below, you can see how this changes the “fine grain” of the image. The effect is much subtler, but it’s definitely noticeable. It’s almost as if someone were trying to paint the same piece all three times, but the brush strokes are different every time:</p>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">666</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-flow-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>Finally, we can vary the base image but keep the vector field and palette the same:</p>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">789</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">456</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">splatter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>))</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-1.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-2.png" class="img-fluid" width="960"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-26_splatter/index_files/figure-html/splatter-vary-base-3.png" class="img-fluid" width="960"></p>
</div>
</div>
</div>
<p>This, to my mind, is the strangest effect of all. Varying the base image changes the overall distribution of, as you’d expect, but when you look very closely at the images you can see that they all have the same “brush strokes”. The swirling circular pattern in the centre-left of image (which was very evident in the animated image) is present in all three images: on the left image it shows up as a pattern of red and orange strokes curling around one another, but on the right that same swirl is now mostly pink and black. For the image in the middle the swirl is harder to see because it’s almost entirely painted in orange, with just a little bit of black.</p>
</section>
<section id="the-artist-statement" class="level2">
<h2 class="anchored" data-anchor-id="the-artist-statement">The artist statement</h2>
<p>So that’s everything, I guess. I wanted to write something about the splatter pieces because I’ve enjoyed building the system, and I really like the look and feel of these pieces. They’re naturalistic enough to feel organic, and artificial enough to feel like generative art unashamedly <em>being</em> generative art. Splatter is not trying to look like painted artwork, it is deliberately its own thing.</p>
<p>The ethos that underpins splatter is one I’m fond of artistically, and one that cuts a little deeply personally. So much of my everyday existence is spent worrying about “passing” for something I’m not,<sup>9</sup> and it’s not a great feeling. Generative art shouldn’t need to “pass”. It shouldn’t be viewed as a second-class artistic citizen that is merely a simulacrum of other kinds of artwork. It can be its own thing, with its own coherent and meaningful standards for artistic merit. Are the “splatter” pieces aesthetically appealing? Sometimes they are. Do they evoke emotions in the audience? Well, they do for me. Does the artist have some underlying intention behind the artwork that makes a claim about the world we live in? At the risk of making the subtext in this paragraph obvious, yes she does. Splatter isn’t a completely arbitrary thing, it was designed to walk that fine line between “pretending to be something else” and “being honest about what it truly is”.</p>
<p>As anyone who has lived in a closet can attest, that is a treacherous tightrope to walk.</p>
</section>



<div id="quarto-appendix" class="default"><section id="source-code" class="level2 appendix"><h2 class="anchored quarto-appendix-heading">Source code</h2><div class="quarto-appendix-contents">

<div class="cell">
<div class="code-with-filename">
<details class="code-fold">
<summary>C++ code for the splatter system</summary>
<div class="code-with-filename-file">
<pre><strong>automaton.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// wrap position to grid</span></span>
<span id="cb20-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// automaton run function</span></span>
<span id="cb20-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb20-13">NumericMatrix automaton<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-14">  </span>
<span id="cb20-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-24">  </span>
<span id="cb20-25">  NumericMatrix grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-28">      grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-30">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-31">  </span>
<span id="cb20-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-33">    source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-34">    source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-35">    source_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>source_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> source_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-36">    span_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-37">    span_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>R<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>runif<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> max_span<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-38">    row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-39">    col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-41">      c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-43">        r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-44">        grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> source_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-45">        row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb20-46">      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-47">      col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb20-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> source_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> span_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-49">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-50">  </span>
<span id="cb20-51">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-52"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</div>
</div>
<div class="cell">
<div class="code-with-filename">
<details class="code-fold">
<summary>R code for the splatter system</summary>
<div class="code-with-filename-file">
<pre><strong>splatter.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">Rcpp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sourceCpp</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"automaton.cpp"</span>)</span>
<span id="cb21-2"></span>
<span id="cb21-3">base_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, rows, cols, iterations, span) {</span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb21-5">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(</span>
<span id="cb21-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> cols),</span>
<span id="cb21-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> rows),</span>
<span id="cb21-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb21-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-11">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb21-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>(),</span>
<span id="cb21-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">automaton</span>(rows, cols, iterations, span)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-15">        ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normalise</span>()</span>
<span id="cb21-16">    )</span>
<span id="cb21-17">}</span>
<span id="cb21-18"></span>
<span id="cb21-19">curl_step <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb21-20">                      iteration, </span>
<span id="cb21-21">                      scale, </span>
<span id="cb21-22">                      octaves, </span>
<span id="cb21-23">                      seed) {</span>
<span id="cb21-24">  </span>
<span id="cb21-25">  noise_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_noise</span>(</span>
<span id="cb21-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x,</span>
<span id="cb21-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y,</span>
<span id="cb21-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z,</span>
<span id="cb21-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed,</span>
<span id="cb21-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">generator =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>fracture,</span>
<span id="cb21-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">noise =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gen_simplex,</span>
<span id="cb21-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fractal =</span> ambient<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>ridged,</span>
<span id="cb21-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves</span>
<span id="cb21-34">  )</span>
<span id="cb21-35">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iteration</span>
<span id="cb21-36">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-37">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-38">  data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span>
<span id="cb21-39">  data</span>
<span id="cb21-40">}</span>
<span id="cb21-41"></span>
<span id="cb21-42">curl_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, </span>
<span id="cb21-43">                      seed, </span>
<span id="cb21-44">                      iterations, </span>
<span id="cb21-45">                      scale, </span>
<span id="cb21-46">                      octaves) {</span>
<span id="cb21-47">  states <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accumulate</span>(</span>
<span id="cb21-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>iterations,</span>
<span id="cb21-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> curl_step,</span>
<span id="cb21-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.init =</span> data,</span>
<span id="cb21-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> scale,</span>
<span id="cb21-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> octaves,</span>
<span id="cb21-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed</span>
<span id="cb21-54">  )</span>
<span id="cb21-55">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(states)</span>
<span id="cb21-56">}</span>
<span id="cb21-57"></span>
<span id="cb21-58">sample_palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed, size) {</span>
<span id="cb21-59">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed)</span>
<span id="cb21-60">  cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb21-61">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>,</span>
<span id="cb21-62">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>,</span>
<span id="cb21-63">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>,</span>
<span id="cb21-64">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>,</span>
<span id="cb21-65">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>,</span>
<span id="cb21-66">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>,</span>
<span id="cb21-67">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>,</span>
<span id="cb21-68">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>,</span>
<span id="cb21-69">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>,</span>
<span id="cb21-70">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>,</span>
<span id="cb21-71">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>,</span>
<span id="cb21-72">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>,</span>
<span id="cb21-73">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>,</span>
<span id="cb21-74">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>,</span>
<span id="cb21-75">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>,</span>
<span id="cb21-76">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>,</span>
<span id="cb21-77">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>,</span>
<span id="cb21-78">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>,</span>
<span id="cb21-79">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>,</span>
<span id="cb21-80">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span></span>
<span id="cb21-81">  )</span>
<span id="cb21-82">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cols, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> size)</span>
<span id="cb21-83">}</span>
<span id="cb21-84"></span>
<span id="cb21-85">make_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, seed) {</span>
<span id="cb21-86">  palette <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_palette</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb21-87">  data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-88">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb21-89">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x,</span>
<span id="cb21-90">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y,</span>
<span id="cb21-91">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> value,</span>
<span id="cb21-92">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>iter</span>
<span id="cb21-93">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-94">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb21-95">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb21-96">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb21-97">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-98">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>(</span>
<span id="cb21-99">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb21-100">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb21-101">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb21-102">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-103">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_gradientn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> palette) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-104">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span>
<span id="cb21-105">}</span>
<span id="cb21-106"></span>
<span id="cb21-107">splatter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(seed) {</span>
<span id="cb21-108">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb21-109">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb21-110">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_data</span>(</span>
<span id="cb21-111">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb21-112">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb21-113">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb21-114">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>,</span>
<span id="cb21-115">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">span =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb21-116">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-117">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">curl_loop</span>(</span>
<span id="cb21-118">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb21-119">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>,</span>
<span id="cb21-120">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0002</span>,</span>
<span id="cb21-121">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">octaves =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb21-122">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-123">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> seed[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb21-124">}</span></code></pre></div>
</details>
</div>
</div>


</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>See <a href="../../posts/2021-09-07_water-colours/">this post</a> for an old write up of the water colours system.↩︎</p></li>
<li id="fn2"><p>Okay fine. It’s not the <em>actual</em> source code for the original system, because the original system is an absolute mess of things I decided to modify on a whim and is not particularly pleasant. Instead, the code here (which is reproduced in full in the “source code” appendix) is a cleaner version that is almost equivalent to the original. And to be honest, if I were starting from scratch I’d be using this cleaned up version and not the bizarre mess that is the original source code.↩︎</p></li>
<li id="fn3"><p>I should also mention that this code is very loosely based on the “stepping-stone automaton” that I discovered a few years ago when looking at Antonio Sánchez Chinchón’s <a href="https://github.com/aschinchon/watercolors">watercolour art</a>, and was the inspiration for my stoneskip system which I adapted to implement the <code>automaton()</code> function.↩︎</p></li>
<li id="fn4"><p>In complete honesty this code is slightly different to the version I implemented in the original <a href="https://github.com/djnavarro/series-splatter">splatter</a> code. In the original version I was a little sloppy about managing the random seed, and in several places I was using the C++ native <code>rand()</code> function for some of the random number generation. That’s problematic in the generative art context because I want to exercise control over the RNG seed from R using the usual <code>set.seed()</code> function, so I need my C++ code to consistently call the random number generators in R using <code>R::runif()</code>↩︎</p></li>
<li id="fn5"><p>At some level I’m mildly amused that I’m writing a C++ function that I can call from R, and said C++ function reaches back up to R to invoke a random number generator that is implemented in C.↩︎</p></li>
<li id="fn6"><p>In the code here I’m using <code>as.vector()</code> to “flatten” the matrix to a vector. To control for any restriction of range that might have happened due to repeated averaging inside the C++ function, I use <code>ambient::normalise()</code> to ensure that the smallest <code>value</code> in this vector is always 0, and the largest <code>value</code> is always 1.↩︎</p></li>
<li id="fn7"><p>Yes I do know this is the worst explanation of fields ever. Hush.↩︎</p></li>
<li id="fn8"><p>It is of course also true to note that the paths that emerge when you do this are only a piecewise-linear approximation to the continuous-flow paths. When you take a series of discrete linear steps like this, errors are introduced at each step. But this is generative art not real analysis class so I’m not at all bothered by that.↩︎</p></li>
<li id="fn9"><p>I probably don’t have to spell it out, right? By now everyone who reads my blog knows what I am, I should imagine.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Splatter},
  date = {2024-01-26},
  url = {https://blog.djnavarro.net/posts/2024-01-26_splatter},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Splatter.”</span> January 26, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-26_splatter">https://blog.djnavarro.net/posts/2024-01-26_splatter</a>.
</div></div></section></div> ]]></description>
  <category>Art</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-26_splatter/</guid>
  <pubDate>Thu, 25 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-26_splatter/splatter.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Notes on the Emax model</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-09_emax-models/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I’m back at work after my all-too-brief summer vacation, and thankfully it’s not too busy since everyone else has been on break too. It’s given me a bit of breathing room to do some reading for professional development purposes, and – since I find it helps me a lot to write up my notes – it’s time for another pharmacometrics post. This time around I’m going to talk about the “Emax model” that is often used in exposure-response analyses. The Emax model is based on the <a href="https://en.wikipedia.org/wiki/Hill_equation_(biochemistry)">Hill equation</a>, and is used to model a continuous-valued “effect” or “response” that is observed when a drug is administered.</p>
<section id="the-model" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-model">The model</h2>
<p>To introduce the basic model, let’s have some notation:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?E"> denotes the observed biological effect, or response. In the context of this kind of model, the response is a continuous variable bounded below at 0 and has some theoretical upper bound corresponding to the maximum possible effect, denoted <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D">.</li>
<li><img src="https://latex.codecogs.com/png.latex?C"> denotes the plasma concentration (typically the molar concentration, in this context) of the molecule that produces the effect, either the drug itself or a metabolite.</li>
</ul>
<p>The goal in this exercise is to model the effect <img src="https://latex.codecogs.com/png.latex?E"> as a function of the concentration <img src="https://latex.codecogs.com/png.latex?C">. It is therefore a <em>pharmacodynamic</em> model (modelling the effect of a drug at a given concentration) rather than a <em>pharmacokinetic</em> model (modelling the concentration of a drug when administered in a particular dose). Ignoring the statistical issues around measurement error etc (errors are typically assumed to be log-normally distributed), here’s what the Emax model asserts about the relationship between <img src="https://latex.codecogs.com/png.latex?E"> and <img src="https://latex.codecogs.com/png.latex?C">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BEC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>There are three parameters in this model:</p>
<ul>
<li>As mentioned earlier, <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> is the maximum value of the effect</li>
<li><img src="https://latex.codecogs.com/png.latex?%7BEC%7D_%7B50%7D"> is the concentration that produces a 50% of the maximum effect. That is, it refers to the concentration <img src="https://latex.codecogs.com/png.latex?C"> at which <img src="https://latex.codecogs.com/png.latex?E%20=%20E_%7Bmax%7D%20/%202">)</li>
<li><img src="https://latex.codecogs.com/png.latex?n"> is the <em>Hill coefficient</em>, which controls the steepness of the curve. In the “simple” model <img src="https://latex.codecogs.com/png.latex?n"> is fixed at 1, but in practice that often doesn’t work.</li>
</ul>
<p>This is a model in which the effect <img src="https://latex.codecogs.com/png.latex?E"> increases monotonically but with constantly decreasing slope, and asymptotically approaches <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> as <img src="https://latex.codecogs.com/png.latex?C%20%5Crightarrow%20%5Cinfty">. More precisely, it’s a model in which <img src="https://latex.codecogs.com/png.latex?E"> is described by a <a href="https://en.wikipedia.org/wiki/Logistic_function">three-parameter logistic</a> function of <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20%20%5Cfrac%7BE_%7Bmax%7D%7D%7B1%20+%20%5Cexp(-n(%5Cln%20C%20-%20%5Cln%20EC_%7B50%7D))%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D"> is a location parameter that shifts the curve (expressed as a function of <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">) left or right, <img src="https://latex.codecogs.com/png.latex?n"> is a gain parameter that controls the steepness of the curve, and <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> is the maximum height of the logistic curve.</p>
<p>After a little rearrangement, we can also express this relationship as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cln%20%5Cleft(%5Cfrac%7BE%7D%7BE_%7Bmax%7D%20-%20E%7D%20%5Cright)%20=%20n(%5Cln%20C%20-%20%5Cln%20EC_%7B50%7D)%0A"></p>
<p>Here’s what it looks like:</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define the emax model</span></span>
<span id="cb1-2">emax <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(conc, emax, ec50, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb1-3">  (emax <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> conc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (ec50<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> conc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>n)</span>
<span id="cb1-4">}</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load packages</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a fake data set</span></span>
<span id="cb1-11">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">concentration =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>),</span>
<span id="cb1-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">response =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">emax</span>(concentration, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">emax =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ec50 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) </span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot the data on linear and logarithmic x-axis scales</span></span>
<span id="cb1-17">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(concentration, response)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span>
<span id="cb1-18">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>))</span>
<span id="cb1-19">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration (log scale)"</span>)</span></code></pre></div>
<div class="cell column-page quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_emax-models/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_emax-models/index_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid" width="672"></p>
</div>
</div>
</div>
<p>This is not the only version of the Emax model. For example, if there is some baseline level of effect (i.e., the curve starts at <img src="https://latex.codecogs.com/png.latex?E_0"> not 0), then we would have a relationship of the following form:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_0%20+%20E_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BEC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>Along the same lines, notice that this is a model that implicitly assumes that the drug is an <em>agonist</em>: increasing the concentration <img src="https://latex.codecogs.com/png.latex?C"> increases the effect <img src="https://latex.codecogs.com/png.latex?E">. There is also a version that can be use for drugs that decrease the effect:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_0%20-%20I_%7Bmax%7D%20%5Cfrac%7BC%5En%7D%7B%7BIC%7D_%7B50%7D%5En%20+%20C%5En%7D%0A"></p>
<p>where again <img src="https://latex.codecogs.com/png.latex?E_0"> is the baseline effect, and the inhibition effect is described in terms of a maximum inhibition <img src="https://latex.codecogs.com/png.latex?I_%7Bmax%7D"> and the concentration that produces 50% of the maximum inhibition <img src="https://latex.codecogs.com/png.latex?%7BIC%7D_%7B50%7D">.</p>
<p>For the purposes of this post I’m just going to consider the basic model.</p>
</section>
<section id="why-this-model" class="level2">
<h2 class="anchored" data-anchor-id="why-this-model">Why this model?</h2>
<p>Looking at this from the perspective of a scientist with a strong statistics and modelling background but who is still relatively new to pharmacometrics, I completely understand the value of the three-parameter logistic model: it’s used in many different disciplines, and I’ve encountered it before in psychometric contexts (and others). What wasn’t immediately clear to me is <em>why</em> it is considered sensible to model the effect <img src="https://latex.codecogs.com/png.latex?E"> of a drug as a logistic function of the log-concentration <img src="https://latex.codecogs.com/png.latex?%5Cln%20C">. If I’ve learned nothing else from my long career in science that has somehow bounced around from discipline to discipline, it’s that if you don’t understand the theoretical foundations that underpin why researchers in the field use <em>this</em> specific statistical model and not <em>that</em> other possible statistical model, you’ll eventually make a silly mistake. I’ve made a lot of silly mistakes in my life and would like to minimise the chances of making even more.</p>
<p>With that in mind, I turned to <a href="https://www.routledge.com/Pharmacokinetic-and-Pharmacodynamic-Data-Analysis-Concepts-and-Applications/Gabrielsson-Weiner/p/book/9789198299106">Pharmacokinetic and Pharmacodynamic Data Analysis (5th ed)</a> by Johan Gabrielsson and Daniel Weiner, which is the book I’ve been reading at work to try to get myself up to speed on these kinds of things. It turns out that the basic ideas here can be derived from the <a href="https://en.wikipedia.org/wiki/Law_of_mass_action">law of mass action</a>, which I vaguely recall from my long-disused undergraduate chemistry classes, and Chapter 3 of the book shows how this is done. What follows are my own notes based on that section of the book, and as is traditional for such acknowledgements I note that I’ve lifted the core ideas from the authors, but if there are mistakes then yeah those are probably mine alone.</p>
<p>So here goes.</p>
</section>
<section id="applying-the-law-of-mass-action" class="level2">
<h2 class="anchored" data-anchor-id="applying-the-law-of-mass-action">Applying the law of mass action</h2>
<p>First, let’s start by switching notation slightly. Let <img src="https://latex.codecogs.com/png.latex?R"> refer to a <a href="https://en.wikipedia.org/wiki/Receptor_(biochemistry)">receptor</a>, a macromolecule that is involved in signalling within biological systems (e.g., <a href="https://en.wikipedia.org/wiki/Cell_surface_receptor">cell surface receptors</a>). Receptors can bind to chemical messengers (e.g., ligands outside a cell), that triggers some physiological response (e.g., a messenger is released inside a cell). In the context of the Emax model, we’re implicitly assuming a mechanism of action in which the drug (or metabolite) is an agonist molecule <img src="https://latex.codecogs.com/png.latex?A"> that can bind to the receptor (forming the compound molecule <img src="https://latex.codecogs.com/png.latex?AR">), and trigger some response that produces the drug effect. Since this is a chemical reaction that can go both ways, we can denote it as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%20+%20R%20%5C%20%5Cleftrightharpoons%20%5C%20AR%0A"></p>
<p>The concentrations of the receptor <img src="https://latex.codecogs.com/png.latex?R">, the agonist molecule <img src="https://latex.codecogs.com/png.latex?A">, and the compound <img src="https://latex.codecogs.com/png.latex?AR"> are denoted <img src="https://latex.codecogs.com/png.latex?%5BR%5D">, <img src="https://latex.codecogs.com/png.latex?%5BA%5D"> and <img src="https://latex.codecogs.com/png.latex?%5BAR%5D"> respectively.</p>
<p>Okay, so now for some science rather than mere notation. The law of mass action tells us that the rate of the forward reaction <img src="https://latex.codecogs.com/png.latex?A%20+%20R%20%5Crightarrow%20AR"> is proportional to the product of the concentrations of the two reactants, <img src="https://latex.codecogs.com/png.latex?%5BA%5D%20%5Ctimes%20%5BR%5D">, with <img src="https://latex.codecogs.com/png.latex?k_1"> denoting the constant of proportionality. Similarly, the rate of the backward reaction <img src="https://latex.codecogs.com/png.latex?AR%20%5Crightarrow%20A%20+%20R"> is proportional to the concentration of the compound <img src="https://latex.codecogs.com/png.latex?%5BAR%5D">, with proportionality constant <img src="https://latex.codecogs.com/png.latex?k_%7B-1%7D">. This gives us the differential equation to describe how the concentration of the compound <img src="https://latex.codecogs.com/png.latex?AR"> changes over time:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdt%7D%20%5BAR%5D%20%5Cpropto%20k_1%20%5BA%5D%5BR%5D%20-%20k_%7B-1%7D%20%5BAR%5D%0A"></p>
<p>When this reaction is at equilibrium <img src="https://latex.codecogs.com/png.latex?d/dt%20%5BAR%5D%20=%200"> by definition, so it follows that <img src="https://latex.codecogs.com/png.latex?k_1%20%5BA%5D%5BR%5D%20=%20k_%7B-1%7D%20%5BAR%5D"> and therefore</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5BA%5D%5BR%5D%7D%7B%5BAR%5D%7D%20=%20%5Cfrac%7Bk_%7B-1%7D%7D%7Bk_1%7D%20%5Coverset%7Bdef%7D%7B=%7D%20K_d%0A"> where <img src="https://latex.codecogs.com/png.latex?K_d"> is referred to as the <em>equilibrium dissociation constant</em> for this reaction and defined as the ratio of the rate constants for the forward and backward reactions.</p>
<p>Next, we define <img src="https://latex.codecogs.com/png.latex?%5BR_t%5D"> to be the total concentration of receptors regardless of whether they are bound or unbound to the agonist:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5BR_t%5D%20%5Coverset%7Bdef%7D%7B=%7D%20%5BR%5D%20+%20%5BAR%5D%0A"></p>
<p>With this definition we can do the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brrcl%7D%0A&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%5BR%5D%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D(%5BR_t%5D%20-%20%5BAR%5D)%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5BR_t%5D%20-%20%5BAR%5D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BAR%5D%7D%7B%5BA%5D%7D%20K_d%20%5C%5C%0A%5Cimplies%20&amp;%20%5BR_t%5D%20&amp;=&amp;%20%5BAR%5D%20%5Cleft(1%20+%20%5Cdisplaystyle%5Cfrac%7BK_d%7D%7B%5BA%5D%7D%20%5Cright)%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BR_t%5D%7D%7B%5BAR%5D%7D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%20+%20K_d%7D%7B%5BA%5D%7D%5C%5C%0A%5Cimplies%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>In this expression <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> is referred to as the <em>fractional occupancy</em> of the total receptor pool. That is, it describes the proportion of the receptors that are currently bound to the agonist molecule.</p>
</section>
<section id="motivating-a-simple-model" class="level2">
<h2 class="anchored" data-anchor-id="motivating-a-simple-model">Motivating a simple model</h2>
<p>At this point we have the something that we can turn into theoretical model for the effect of a drug, but we need to impose additional assumptions in order to flesh it out. One proposal is that the effect <img src="https://latex.codecogs.com/png.latex?E"> of the drug is proportional to the fractional occupancy <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> of the relevant receptor pool. That is,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20%5Calpha%20%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%0A"> for some proportionality constant <img src="https://latex.codecogs.com/png.latex?%5Calpha">. Now, noting that the maximum possible value of <img src="https://latex.codecogs.com/png.latex?%5BAR%5D"> is <img src="https://latex.codecogs.com/png.latex?%5BR_t%5D">, it follows that the maximum possible value for <img src="https://latex.codecogs.com/png.latex?E"> is in fact <img src="https://latex.codecogs.com/png.latex?%5Calpha">, so it makes more sense to denote it as <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BAR%5D%7D%7B%5BR_t%5D%7D%0A"></p>
<p>and by substitution back into the earlier equation we obtain something that is beginning to look a lot like the Emax model with a Hill coefficient <img src="https://latex.codecogs.com/png.latex?n%20=%201">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A"></p>
</section>
<section id="incorporating-signal-amplification" class="level2">
<h2 class="anchored" data-anchor-id="incorporating-signal-amplification">Incorporating signal amplification</h2>
<p>It comes as little surprise to discover that the theoretical model just derived is a bit of an oversimplification. Taken at face value, you’d be tempted to assume that the value of the <img src="https://latex.codecogs.com/png.latex?%7BEC%7D_%7B50%7D"> parameter in an Emax model is equal to the value of the equilibrium dissociation constant <img src="https://latex.codecogs.com/png.latex?K_d"> for the reaction between a ligand <img src="https://latex.codecogs.com/png.latex?%5BA%5D"> and receptor <img src="https://latex.codecogs.com/png.latex?%5BR%5D">. This is not generally the case, because biology is more complicated than this simple model suggests. In many situations we observe some kind of <em>signal amplification</em>, in which you get a much stronger response than you’d expect on the basis of this simple response. One way to frame it is like this. We consider the fractional occupancy of the receptor <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D"> to be a <em>stimulus</em>,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bstimulus%7D%20=%20%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%0A"> and this stimulus triggers a nonlinear <em>response</em> (equivalent to our effect <img src="https://latex.codecogs.com/png.latex?E"> in the previous notation) that rises quickly to some asymptote level:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmbox%7Bresponse%7D%20=%20%5Cfrac%7B%5Cmbox%7Bstimulus%7D%7D%7B%5Cmbox%7Bstimulus%7D%20+%20%5Cbeta%7D%0A"></p>
<p>In this expression <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> denotes the value of the stimulus that produces 50% of the maximum response.</p>
<p>As it turns out, this doesn’t affect the overall structure of the model predictions, since</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0AE%20&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%5Cright)%7D%7B%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20K_d%7D%20%5Cright)%20+%20%5Cbeta%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20(%5BA%5D%20+%20K_d)%20%5Cbeta%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B(%5Cbeta%20+%201)%20%5BA%5D%20+%20%5Cbeta%20K_d%7D%20%5C%5C%0A&amp;=&amp;%20(%5Cbeta%20+%201)%5E%7B-1%7D%20%5Cdisplaystyle%5Cfrac%7B%5BA%5D%7D%7B%5BA%5D%20+%20%5Cbeta%20(%5Cbeta%20+%201)%5E%7B-1%7D%20K_d%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>In other words, we again have something that looks like Emax model (with <img src="https://latex.codecogs.com/png.latex?n=1">),</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE%20=%20E_%7Bmax%7D%20%5Cfrac%7B%5BA%5D%7D%7B%7BEC%7D_%7B50%7D%20+%20%5BA%5D%7D%0A"></p>
<p>but this time <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D%20=%201/(%5Cbeta%20+%201)"> and <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D%20=%20(%5Cbeta/(%5Cbeta%20+%201))%20%5Ctimes%20K_d">. Since the <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> quantity is interpreted as a fraction (i.e., it’s on the same scale as the fractional occupancy <img src="https://latex.codecogs.com/png.latex?%5BAR%5D/%5BR_t%5D">), the net effect is that under a model like this one what we should expect to see is <img src="https://latex.codecogs.com/png.latex?EC_%7B50%7D%20%3C%20K_d">. In the event that there is a stimulus-response cascade at play (e.g., the initial response is the stimulus for another response, etc, ultimately leading to an effect), the overall shape of the function would remain the same.</p>
</section>
<section id="interpreting-the-hill-coefficient" class="level2">
<h2 class="anchored" data-anchor-id="interpreting-the-hill-coefficient">Interpreting the Hill coefficient</h2>
<p>Okay, so at this point we have a sensible motivation for using an Emax model in an exposure-response analysis (at least in some situations). What we don’t have is an explanation of the Hill coefficient <img src="https://latex.codecogs.com/png.latex?n">. The Gabrielsson &amp; Weiner book doesn’t say much about this, other than to note that:</p>
<blockquote class="blockquote">
<p>The exponent <img src="https://latex.codecogs.com/png.latex?n"> does not have a direct biological interpretation and should be viewed as an extension of the original <img src="https://latex.codecogs.com/png.latex?E_%7Bmax%7D"> model to account for the curvature [i.e., steepness of the logistic function]. It provides a further degree of flexibility in the sensitivity of the response-concentration relationship.</p>
</blockquote>
<p>That doesn’t mean it’s an arbitrary parameter though. It was introduced by Hill originally to describe <a href="https://en.wikipedia.org/wiki/Cooperative_binding#The_Hill_equation">cooperative binding</a> in the oxygen-haemoglobin relationship. Essentially, the derivation earlier is based on the assumption that every time a drug molecule binds to a receptor it’s entirely independent of the all other binding events. That doesn’t have to be the case. Quoting from the linked Wikipedia page:</p>
<blockquote class="blockquote">
<p>Cooperative binding occurs in a molecular binding system where two or more ligand molecules can bind to a receptor molecule. Binding can be considered “cooperative” if the actual binding of the first molecule of the ligand to the receptor changes the binding affinity of the second ligand molecule. The binding of ligand molecules to the different sites on the receptor molecule do not constitute mutually independent events. Cooperativity can be positive or negative, meaning that it becomes more or less likely that successive ligand molecules will bind to the receptor molecule.</p>
</blockquote>
<p>That makes sense to me. It’s not a situation covered by the derivation I considered at the start, because if a receptor can bind to two or more ligands you’d need to consider bound-receptor compounds like <img src="https://latex.codecogs.com/png.latex?AAR"> and, <img src="https://latex.codecogs.com/png.latex?AAAR"> (to use an oversimplified notation) as well as <img src="https://latex.codecogs.com/png.latex?AR">, and then your model would need to include reactions like <img src="https://latex.codecogs.com/png.latex?AR%20+%20A%20%5Cleftrightharpoons%20AAR"> and their associated <img src="https://latex.codecogs.com/png.latex?K_d"> values. The derivation above is – like any such excercise – a simplification of the real situation. So while the Hill coefficient <img src="https://latex.codecogs.com/png.latex?n"> doesn’t immediately fall out of a simplified model, it’s not too hard to see how cooperative binding could give rise to logistic curves (on the log-concentration scale) with steeper slopes than those observed with <img src="https://latex.codecogs.com/png.latex?n%20=%201">.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Okay, so now the Emax model makes more sense to me. That’s all I was aiming for, and it’s 6pm now so I’m quitting work for the day!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Notes on the {Emax} Model},
  date = {2024-01-09},
  url = {https://blog.djnavarro.net/posts/2024-01-09_emax-models},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Notes on the Emax Model.”</span> January
9, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-09_emax-models">https://blog.djnavarro.net/posts/2024-01-09_emax-models</a>.
</div></div></section></div> ]]></description>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-09_emax-models/</guid>
  <pubDate>Mon, 08 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-09_emax-models/d-koi-5nI9N2wNcBU-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Making generative art with observable.js</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>About this time last year I wrote a little blog post about my first attempts to make <a href="../../posts/2023-01-14_p5js/">generative art in javascript with p5.js</a>. Because I was using this <a href="https://quarto.org/">quarto</a>-based blog as the vehicle for that exploration, and because quarto supports <a href="https://observablehq.com/">observable.js</a> as a method for javascript-based computational notebooks – which is slightly different to embedding a js script in a regular webpage – I also talked a little bit about observable. To be honest though I didn’t talk about it very much: at the time I was focused mostly on p5.js, and didn’t really think too much about how observable works.</p>
<p>Lately, though, I’ve been making a few new generative art systems in javascript. The <a href="https://art.djnavarro.net/gallery/advent/">advent</a> and <a href="https://art.djnavarro.net/gallery/pastiche/">pastiche</a> series I posted to my art site were both written in javascript. In both cases I used <a href="https://nodejs.org/en">node.js</a> to run the js code locally, calling the scripts from the terminal rather than running them in a browser context.</p>
<p>Making art with javascript has been quite a lot of fun, and since it’s been on my mind lately, I thought it might be time to it prompted me take another look at observable in this post. I’m not planning a deep dive or anything, but I will talk a little bit about little art system I made that makes dynamic pieces like this one:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" data-startfrom="34" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 33;"><span id="cb1-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-1" data-nodetype="expression">

</div>
</div>
</div>
<section id="what-is-observable-and-whats-it-doing-in-quarto" class="level2">
<h2 class="anchored" data-anchor-id="what-is-observable-and-whats-it-doing-in-quarto">What is observable, and what’s it doing in quarto?</h2>
<p>At its heart, observable.js provides a method for creating <a href="https://en.wikipedia.org/wiki/Notebook_interface">computational notebooks</a> that execute javascript code in the context of a document containing regular text, in much the same way that <a href="https://jupyter.org/">jupyter</a> notebooks execute code cells that contain R, Python, or Julia code, and allow the author to interleave regular text with the code.</p>
<p>I’ll talk more about the code execution and the structure of observable notebooks first, but it helps to start by making a clear distinction between the code execution engine that powers observable notebooks, and the hosted service that most people use when creating one. To see what I mean, notice that most of the time when someone wants to create an observable notebook, they use the hosted service provided by the company which – somewhat confusingly – is also called observable.<sup>1</sup> For example, <a href="https://observablehq.com/@observablehq/keep-saving-mono-lake">here is a notebook by Allison Horst</a>: it uses the observable javascript library, and it’s hosted on observable service provided by observable-the-company. When people talk about “observable notebooks”, this is the kind of thing they usually mean.</p>
<p>However, this isn’t the only possible approach. You could, for instance, include the <a href="https://github.com/observablehq">observable.js core libraries</a> in a regular webpage (i.e., using the javascript libraries but not the hosted service). Alternatively – and this is the approach I’m taking here – you can create quarto documents that rely on observable to execute javascript code, which is fairly painless to do because <a href="https://quarto.org/docs/interactive/ojs/">quarto provides native support for observable.js</a>. To create an observable-javascript code chunk (“code cell”, in the terminology used by observable), you’d create an <code>{ojs}</code> chunk like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" data-startfrom="47" data-source-offset="9" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java" style="counter-reset: source-line 46;"><span id="cb2-47">```<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ojs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//| echo: fenced</span></span>
<span id="cb2-49"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-50">```</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-2" data-nodetype="expression">

</div>
</div>
</div>
<p>Here you can see the javascript code (<code>1 + 1</code>), the output (<code>2</code>), and the quarto syntax used to create the chunk itself (the <code>{ojs}</code> bit), but from now on I’ll drop the quarto syntax.<sup>2</sup> The important thing to realise here is that although superficially this page looks rather different to a notebook on the observable hosted service, the underlying “execution engine” is more or less the same.</p>
</section>
<section id="code-cells-execute-in-logical-order" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="code-cells-execute-in-logical-order">Code cells execute in logical order</h2>
<p>For the most part, the code execution within an observable notebook (or a quarto document like this one that uses observable) follows all the usual syntax for vanilla javascript. You can use a cell to define variables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" data-startfrom="58" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 57;"><span id="cb3-58">msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-3" data-nodetype="declaration">

</div>
</div>
</div>
<p>and you can refer to those variables later:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" data-startfrom="64" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 63;"><span id="cb4-64">msg</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-4" data-nodetype="expression">

</div>
</div>
</div>
<p>However, a key characteristic to observable.js is its reactive runtime engine: much like a spreadsheet, cells are executed in “topological order” based on the logical dependencies among them. For example, the cell below refers to a variable called <code>surprise</code>, and it works even though (reading this document from top to bottom) I haven’t actually defined it yet:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" data-startfrom="70" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 69;"><span id="cb5-70">surprise</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-5" data-nodetype="expression">

</div>
</div>
</div>
<p>This works because, at a later point in this document, there is a code cell that does specify a value for <code>surprise</code>, and observable.js detects that the later cell is the <em>logical</em> precursor to the one above, and executes that cell before this one. It is also the reason why I can call the <code>art()</code> function in the code cell below. Because the <code>art()</code> function is defined later in the document, I’m permitted to call it now, knowing that observable will determine the order in which all the cells need to be executed:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" data-startfrom="78" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 77;"><span id="cb6-78"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-6" data-nodetype="expression">

</div>
</div>
</div>
<p>To unpack this still further, the image below shows all the dependencies of the call to <code>art(101)</code> that occurs in the cell above. As you can see, all of the cells upon which the cell above depends appear lower in the document, but that’s okay, because observable.js uses the logical dependencies (which take the form of a directed acyclic graph) among these cells to determine the order in which they execute:</p>
<p><img src="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/topological_order.png" class="img-fluid"></p>
</section>
<section id="loading-modules-in-observable" class="level2">
<h2 class="anchored" data-anchor-id="loading-modules-in-observable">Loading modules in observable</h2>
<p>One of the things about javascript that sometimes gives me headaches is getting used to the numerous different ways you can import javascript code depending on the context in which you’re using the language.</p>
<p>When I first started using javascript in web pages, I didn’t use any external javascript code at all. I’d write an html file that embedded my hand-rolled javascript coded directly into the document, with the code wrapped within a <code>&lt;script&gt;</code> tag:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/javascript"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// comment</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Later, I learned that it was often better to separate the javascript code from the html document, so my web page would contain an <code>.html</code> file and a <code>.js</code> file. Within the html document, I would again have a <code>&lt;script&gt;</code> tag, but instead of including the javascript source code it would reference the <code>.js</code> file:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./myscript.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>This is the traditional way of using javascript in a webpage. All javascript code that I wanted to use in my webpage would be stored in local copies of the relevant <code>.js</code> files, and I’d include them with <code>&lt;script&gt;</code> tags. However, once I learned about content delivery networks (CDN) like <a href="https://www.jsdelivr.com/">jsDelivr</a>, I started to realise that I didn’t have to have a local copy of all the files: instead, I could import the files I needed through a CDN. A common example of this in the javascript that I used to write during that stage of my life would be to load <a href="https://jquery.com/">jquery</a> with code like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> src</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;&lt;/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">script</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>Until quite recently, that was essentially everything I knew about loading javascript modules. I’d only ever used javascript in the context of an html document, and in that context it is the <code>.html</code> file that does the work of loading the javascript.</p>
<p>Enter, stage left, the <a href="https://nodejs.org/en">node.js</a> runtime environment for javascript being chased by the node package manager <a href="https://www.npmjs.com/">npm</a>. Traditionally javascript is a scripting language used in the context of a webpage, but it doesn’t actually <em>have</em> to be used that way thanks to node.js. Node allows javascript to function as a pure scripting language: you write code in javascript that you can then execute from the terminal without any browser at all. That’s what I’ve been doing with my recent generative art code that uses javascript. For instance, <a href="https://github.com/djnavarro/series-advent/blob/main/source/advent_06.js">advent_06.js</a> is one of those generative art scripts, and – because I have node installed on my machine – when executing the script I’d use this command at the terminal to create the images:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">node</span> advent_06.js</span></code></pre></div>
<p>One question that you’d naturally have, when running javascript in this fashion, is how to import modules: you can’t use a <code>&lt;script&gt;</code> tag for this because there’s no html file and the javascript code is not executing within a browser. To that end node provides a <code>require()</code> function that you can use for this. As I have previously installed the seedrandom.js library (which allows you to create random number generators that give you control over the <a href="../../posts/2023-12-27_seedcatcher/">RNG seed</a>) using <code>npm</code>, I can include a line of code like this in my js script:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// this code is from the advent_06 script, it's not an ojs cell</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> seedrandom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seedrandom'</span>) </span></code></pre></div>
<p>This creates a <code>seedrandom</code> object that exposes all the functionality of the library, which is then used elsewhere in the script. This works just fine, but it’s important to recognise that <a href="https://stackoverflow.com/questions/9901082/what-is-require-in-javascript-and-nodejs#9901097"><code>require()</code> is not part of vanilla javascript, it’s specific to nodeJS</a>. You can’t use it in vanilla javascript.</p>
<p>…and yet, you <em>can</em> use it with observable.js. This is because <a href="https://observablehq.com/documentation/cells/require">observable supplies its own <code>require()</code> function</a> that behaves similarly to the node.js <code>require()</code> function. For this document, I decided to be smart and import a specific version of seedrandom, like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" data-startfrom="129" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 128;"><span id="cb12-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// this is the ojs cell that imports seedrandom in this document</span></span>
<span id="cb12-130">seedrandom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seedrandom@3.0.5'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-7" data-nodetype="declaration">

</div>
</div>
</div>
<p>The key thing to remember here (and I’ll confess this threw me for a loop for a little while) is that although this <em>looks</em> like I’m writing “server-side” code like you’d do with node.js, this calls the observable.js version of the <code>require()</code> function. Per the documentation:</p>
<blockquote class="blockquote">
<p>By default, require uses modules published on npm, a service that hosts over 1 million different modules created by thousands of individual developers. Because notebooks run in a web environment, we use another service, jsDelivr, that takes npm’s modules and makes them accessible to browsers.</p>
</blockquote>
<p>In other words, when calling the <code>require()</code> function in an observable notebook (or quarto document that uses observable code cells), we’re still relying on a CDN to do the work of importing the javascript modules. The observable <code>require()</code> function abstracts away from the tedious details and means you don’t have to write any html to import from the CDN.</p>
</section>
<section id="cells-implicitly-iterate-over-generators" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cells-implicitly-iterate-over-generators">Cells implicitly iterate over generators</h2>
<p>So now we turn to the generative art system itself. The core mechanic underpinning the system is that each piece is defined by a large number of “particles” that are drawn onto an html5 canvas. The particles move around over time, changing shape and size as they do, sometimes obscuring one another when they are drawn onto the canvas. This leads to dynamic pieces like this:</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" data-startfrom="146" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 145;"><span id="cb13-146"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-8" data-nodetype="expression">

</div>
</div>
</div>
<p>Later on in the document I’ll define a <code>makeParticles()</code> function that returns an array containing many of these particles, each of which is an object that has fields like <code>x</code>, <code>y</code>, <code>size</code>, etc that defines the state of the particle, as well as a <code>.draw()</code> method used to draw said particle to the canvas, and a <code>.move()</code> method to update the location, shape, size, etc for the particle. The details of that don’t matter for the moment. Let’s just assume that this mechanism works, and examine the top-level <code>art()</code> function that creates the pieces:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" data-startfrom="152" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 151;"><span id="cb14-152"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(seed) {</span>
<span id="cb14-153">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// setup</span></span>
<span id="cb14-154">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> par <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">nrow</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ncol</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>}</span>
<span id="cb14-155">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> rng <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seedrandom</span>(seed)</span>
<span id="cb14-156">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> ctx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DOM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context2d</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span>)  </span>
<span id="cb14-157">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> pal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(palettes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-158">  </span>
<span id="cb14-159">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// image</span></span>
<span id="cb14-160">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-161">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fillRect</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span>)</span>
<span id="cb14-162">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeParticles</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)</span>
<span id="cb14-163">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">true</span>) {</span>
<span id="cb14-164">    particles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=&gt;</span> {p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(ctx)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">move</span>(rng)})</span>
<span id="cb14-165">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">canvas</span></span>
<span id="cb14-166">  }</span>
<span id="cb14-167">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-9" data-nodetype="declaration">

</div>
</div>
</div>
<p>The key part of this function is that it’s a generator function: it is defined with the <code>function*</code> keyword, and instead of having a <code>return</code> value it has a <code>yield</code> value. Generators (also called iterators) are stateful functions. The first time they are called they execute up to the point that the <code>yield</code> statement is encountered, and then return that value. Any subsequent time the generator is called, it doesn’t start from the beginning: it picks up from where it left off last time, and keeps executing until <code>yield</code> is encountered again. So, in this case, <code>art()</code> is a generator function that yields an html5 canvas object when it is called the first time; later invocations of <code>art()</code> will update the state of the canvas, and then yield the updated canvas as its return value. This provides a natural mechanism for animation: each <code>yield</code> value is, in effect, a frame of the animation.</p>
<p>So far, so good. While I’m not an expert at using generators in vanilla javascript, I grasp the basic idea. The part that is a little peculiar here – and is specific to the reactive runtime used in observable.js – is that nowhere in this document do I <em>appear</em> to be calling the <code>art()</code> generator repeatedly. In vanilla javascript, if I’d defined <code>art()</code> in the way I did in the previous cell and then called <code>art(103)</code>, I would get a static canvas that corresponds to the first frame of the animation because I’ve only called the generator once. And yet…</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" data-startfrom="177" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 176;"><span id="cb15-177"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-10" data-nodetype="expression">

</div>
</div>
</div>
<p>What’s happening here is that the reactive runtime used in observable.js <a href="https://observablehq.com/documentation/cells/observable-javascript#cells-implicitly-iterate-over-generators">implicitly iterates over a generator function</a>. The code cell above appears to be invoking the <code>art()</code> generator once (with a seed of 103), but that’s not actually true: what’s really happening is that observable.js calls the generator repeatedly behind the scenes (i.e., implicitly iterates). I haven’t done a deep dive on how this behaviour works yet, but according to the documentation this iteration typically occurs 60 times a second. So that’s what’s happening here.</p>
</section>
<section id="the-workhorse-code" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-workhorse-code">The workhorse code</h2>
<p>Having now discussed everything that is specific to observable.js, all that remains to do is add some code cells that contain the “workhorse” functions for our generative art system. Here’s the <code>makeParticles()</code> function that takes a collection of parameters <code>par</code>, a palette <code>pal</code>, and a random number generator <code>rng</code> as its arguments, and returns an array of <code>particles</code>. Initially the particles are all laid out on a grid, with <code>x</code> coordinates lined up in columns and <code>y</code> coordinates lined up in rows. As the system evolves, these particles are moved around using the <code>move()</code> function, and can be drawn to a canvas using the <code>draw()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" data-startfrom="187" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 186;"><span id="cb16-187"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeParticles</span>(par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb16-188">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> rowheight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow</span></span>
<span id="cb16-189">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> colwidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol</span></span>
<span id="cb16-190">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(rowheight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> colwidth) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-191">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-192">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb16-193">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb16-194">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> (par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>) {</span>
<span id="cb16-195">      particles[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-196">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-197">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">col</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-198">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">row</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-199">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-200">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sizemin</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-201">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">sizemax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-202">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-203">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> colwidth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-204">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> rowheight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-205">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xmax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-206">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ymax</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> par<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-207">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">xstep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-208">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ystep</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-209">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-210">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-211">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">turn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-212">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">shade</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(pal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-213">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">shrink</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">005</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-214">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">draw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ctx) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawParticle</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ctx)}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-215">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">move</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(rng) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moveParticle</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">this</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng)}</span>
<span id="cb16-216">      }</span>
<span id="cb16-217">      k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span></span>
<span id="cb16-218">    }</span>
<span id="cb16-219">  }</span>
<span id="cb16-220">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> particles</span>
<span id="cb16-221">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-11" data-nodetype="declaration">

</div>
</div>
</div>
<p>As you can see, the <code>draw()</code> function for any given particle is just a call to the <code>drawParticle()</code> function, and similarly the <code>move()</code> function is just a call to <code>moveParticle()</code>. Here’s those two functions, each defined in their own code cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" data-startfrom="227" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 226;"><span id="cb17-227"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drawParticle</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ctx) {</span>
<span id="cb17-228">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fillStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade</span></span>
<span id="cb17-229">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strokeStyle</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shade</span></span>
<span id="cb17-230">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lineWidth</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width</span></span>
<span id="cb17-231">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">beginPath</span>()</span>
<span id="cb17-232">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arc</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span>)</span>
<span id="cb17-233">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span>()</span>
<span id="cb17-234">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span>()</span>
<span id="cb17-235">  ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">closePath</span>()</span>
<span id="cb17-236">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-12" data-nodetype="declaration">

</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" data-startfrom="240" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 239;"><span id="cb18-240"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moveParticle</span>(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb18-241">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ystep</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span></span>
<span id="cb18-242">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xstep</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span></span>
<span id="cb18-243">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span></span>
<span id="cb18-244">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span></span>
<span id="cb18-245">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span></span>
<span id="cb18-246">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span></span>
<span id="cb18-247">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemin</span>) {</span>
<span id="cb18-248">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shrink</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemax</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemin</span>)</span>
<span id="cb18-249">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb18-250">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sizemax</span></span>
<span id="cb18-251">  }</span>
<span id="cb18-252">  p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">turn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">PI</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb18-253">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-13" data-nodetype="declaration">

</div>
</div>
</div>
<p>At several points in the code that defines this system, I’ve relied on a <code>pickOne()</code> function that uses a specific random number generator <code>rng</code> to sample a single element from an array. So of course that too needs to be defined as an observable code cell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" data-startfrom="259" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 258;"><span id="cb19-259"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pickOne</span>(items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> rng) {</span>
<span id="cb19-260">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> items[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(rng<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length</span>)]</span>
<span id="cb19-261">}</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-14" data-nodetype="declaration">

</div>
</div>
</div>
<p>Finally, in order for the <code>art()</code> function to choose a random palette every time a new piece is created, I need to have an array <code>palettes</code> that defines a bunch of different palettes (I created these palettes by playing around on <a href="https://coolors.co/">cooolors.co</a> and saving some that I liked):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" data-startfrom="267" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 266;"><span id="cb20-267">palettes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb20-268">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de9151"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f34213"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e2e3a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc5d2e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bbb8b2"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-269">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63446"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfef9"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c6291"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#000004"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7e1946"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-270">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffff"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffcad4"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#b0d0d3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c08497"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7af9d"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-271">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#aa8f66"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ed9b40"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffeedb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#61c9a8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ba3b46"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-272">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#241023"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6b0504"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a3320b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d5e68d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#47a025"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-273">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#64113f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#de4d86"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f29ca3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f7cacd"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#84e6f8"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-274">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#660000"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#990033"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5f021f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8c001a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9000"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-275">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c9cba3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffe1a8"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e26d5c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#723d46"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#472d30"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-276">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0e7c7b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#17bebb"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d4f4dd"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d62246"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#4b1d3f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-277">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0a0908"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#49111c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f2f4f3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a9927d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5e503f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-278">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#020202"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0d324d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7f5a83"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a188a6"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#9da2ab"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-279">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c2c1c2"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#42213d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#683257"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bd4089"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f51aa4"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-280">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#820263"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d90368"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eadeda"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2e294e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffd400"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-281">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f4e409"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#eeba0b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#c36f09"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a63c06"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#710000"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-282">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d9d0de"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bc8da0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a04668"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ab4967"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0c1713"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-283">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#012622"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#003b36"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ece5f0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e98a15"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#59114d"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-284">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3c1518"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#69140e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#a44200"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d58936"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fffb46"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-285">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6e0d25"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffffb3"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#dcab6b"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#774e24"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#6a381f"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-286">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#bcabae"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0f0f0f"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2d2e2e"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#716969"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fbfbfb"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-287">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b4162"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#385f71"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#f5f0f6"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#d7b377"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#8f754f"</span>]</span>
<span id="cb20-288">]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-15" data-nodetype="declaration">

</div>
</div>
</div>
<p>Oh, and yeah… it’s not part of the generative art system, but because earlier on I referenced a <code>surprise</code> variable in order to illustrate the “spreadsheet-style” code execution order in observable, I’d better have a cell that actually defines that variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" data-startfrom="294" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 293;"><span id="cb21-294">surprise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a variable defined at the bottom of the document"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="ojs-cell-16" data-nodetype="declaration">

</div>
</div>
</div>
<p>And we are done!</p>
<div class="cell page-columns page-full" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" data-startfrom="302" data-source-offset="0" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript" style="counter-reset: source-line 301;"><span id="cb22-302"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">art</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>)</span></code></pre></div>
<div class="cell-output cell-output-display column-body-outset">
<div id="ojs-cell-17" data-nodetype="expression">

</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I realise it’s a small gripe, but I do think it’s a problem when companies create this confusion by conflating the organisation with the product and/or service. For many years it was difficult to distinguish between rstudio-the-company and rstudio-the-IDE. Observable makes this confusion even messier, since we have observable-the-company, observable-the-javascript-library, and observable-the-hosting-service. They’re three different things that all have the same name and it’s a pain to write about.↩︎</p></li>
<li id="fn2"><p>This is a little different than what would have happened if I’d used <code>{js}</code> rather than <code>{ojs}</code>: when you use <code>{js}</code> in quarto, the javascript code is embedded as a script within the html page, rather than executed with observable.js↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2024,
  author = {Navarro, Danielle},
  title = {Making Generative Art with Observable.js},
  date = {2024-01-09},
  url = {https://blog.djnavarro.net/posts/2024-01-09_observable-js-art},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2024" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2024. <span>“Making Generative Art with
Observable.js.”</span> January 9, 2024. <a href="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art">https://blog.djnavarro.net/posts/2024-01-09_observable-js-art</a>.
</div></div></section></div> ]]></description>
  <category>Javascript</category>
  <category>Art</category>
  <category>Observable</category>
  <guid>https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/</guid>
  <pubDate>Mon, 08 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2024-01-09_observable-js-art/canvas.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Writing knitr hooks</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A very common situation I encounter when writing a blog post or writing a book chapter using R markdown or quarto arises when the command I want to use generates a lot of output, and I don’t want all of the output to be displayed in the output. Every time I run into this problem, I have this vague recollection that “oh yeah, I need to write a knit hook for this”, but I can never quite remember how to do that and have to search online for the answer. In my last post I wrote a jokey <a href="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/#fn9">footnote</a> grumbling about this and saying I was thinking of writing a short blog post on it just so that I’d know where to look next time.</p>
<p>So, uh, yeah… that’s exactly what I did.</p>
<p>The answer to that specific question, incidentally, is described explicitly in the <a href="https://bookdown.org/yihui/rmarkdown-cookbook/hook-truncate.html">R Markdown Cookbook</a>, and – to set expectations appropriately – there’s nothing in this post that isn’t already covered in the documentation and books. I don’t actually <em>need</em> to write a blog post about this. But I’m going to anyway, because every time I actually do need to write a knit hook, I find myself realising that I don’t understand them as well as I ought to. So here goes.</p>
<section id="chunk-options" class="level2">
<h2 class="anchored" data-anchor-id="chunk-options">Chunk options</h2>
<p>This is a post about knit hooks, but it helps to start with a refresher on knitr chunk options. I’m assuming, for the purposes of this post, that anyone reading is already pretty familiar with R markdown and quarto, and knows that when I write a document like this and want to execute some R code, I include an appropriately annotated code chunk in the source like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb1-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">1 + 1</span></span>
<span id="cb1-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p>When the document is rendered to HTML, it’s the job of the knitr package to parse this chunk, execute the code, and append the output to the document as necessary. You can customise the manner in which knitr does this via <a href="https://bookdown.org/yihui/rmarkdown/r-code.html">chunk options</a>, but the code chunk above doesn’t specify any options, so default values are used.</p>
<p>So what are the defaults, and where are they stored?</p>
<p>The <code>knitr::opts_chunk</code> object is used to control the options for code chunks. The object is a list of several functions. The two we use most often are <code>$get()</code> and <code>$set()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">options <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span></code></pre></div>
</div>
<p>This <code>options</code> variable is a list containing all the default values that are applied when knitting the code chunks in the markdown document. If the user doesn’t specify a value for a specific chunk option, these are the default values that are applied. There’s a lot of these options:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(options)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "eval"          "echo"          "results"       "tidy"         
 [5] "tidy.opts"     "collapse"      "prompt"        "comment"      
 [9] "highlight"     "size"          "background"    "strip.white"  
[13] "cache"         "cache.path"    "cache.vars"    "cache.lazy"   
[17] "dependson"     "autodep"       "cache.rebuild" "fig.keep"     
[21] "fig.show"      "fig.align"     "fig.path"      "dev"          
[25] "dev.args"      "dpi"           "fig.ext"       "fig.width"    
[29] "fig.height"    "fig.env"       "fig.cap"       "fig.scap"     
[33] "fig.lp"        "fig.subcap"    "fig.pos"       "out.width"    
[37] "out.height"    "out.extra"     "fig.retina"    "external"     
[41] "sanitize"      "interval"      "aniopts"       "warning"      
[45] "error"         "message"       "render"        "ref.label"    
[49] "child"         "engine"        "split"         "include"      
[53] "purl"          "fenced.echo"   "ft.shadow"    </code></pre>
</div>
</div>
<p>The <code>fig.path</code> option, for example, is used to specify where generated output images should be written. It’s a nice one to illustrate the customisability of knitr because you get a different output depending on context. The blog post is a quarto document, and has different knitr defaults to what you’d see if the same code were run at the console:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fig.path</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "index_files/figure-html/"</code></pre>
</div>
</div>
<p>If I’d run the same output at the console, I would get a different answer. When called from the console the default option for <code>fig.path</code> is <code>"figures"</code>. For example, when I constructed my <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">“knitr + eleventy” blog</a> this is how I was calling knitr, and accordingly the images were written to a “figures” folder. The defaults, when knitr is used in the context of this on this quarto blog, are different.</p>
</section>
<section id="knit-hooks" class="level2">
<h2 class="anchored" data-anchor-id="knit-hooks">Knit hooks</h2>
<p>So now we turn to <a href="https://yihui.org/knitr/hooks/">knitr hooks</a>. Hooks are user-customisable functions that you can use to control how the knitr options are interpreted, and modify the output that knitr creates. In the same fashion that the <code>knitr::opts_chunk</code> object is used to control the chunk options, there’s a <code>knitr::knit_hooks</code> object used to control hooks. Again, this object is a list of functions, and the two we use most often are <code>$get()</code> and <code>$set()</code>.<sup>1</sup> We can retrieve the hooks by calling the <code>$get()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">hooks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span></code></pre></div>
</div>
<p>There are 12 default knit hooks in this list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(hooks)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "source"          "output"          "warning"         "message"        
 [5] "error"           "plot"            "inline"          "chunk"          
 [9] "text"            "evaluate.inline" "evaluate"        "document"       </code></pre>
</div>
</div>
<p>The documentation for <a href="https://bookdown.org/yihui/rmarkdown-cookbook/output-hooks.html">output hooks</a> gives a nice summary for most of these. Seven of the hooks are quite specific, and are applied to only one type of output:</p>
<ul>
<li><code>source</code>: Handles how knitr processes the source code inside a chunk</li>
<li><code>output</code>: Handles how knitr processes ordinary R output (i.e., not warnings, messages, or errors)</li>
<li><code>warning</code>: Handles how knitr processes warning output (e.g., from <code>warning()</code>)</li>
<li><code>message</code>: Handles how knitr processes message output (e.g., from <code>message()</code>)</li>
<li><code>error</code>: Handles how knitr processes error output (e.g., from <code>stop()</code>)</li>
<li><code>plot</code>: Handles how knitr processes graphics output</li>
<li><code>inline</code>: Handles how knitr processes output from inline R code</li>
</ul>
<p>There are two output hooks that are broader in scope:</p>
<ul>
<li><code>chunk</code>: Applied to all output from a code chunk</li>
<li><code>document</code>: Applied to all output within the document</li>
</ul>
<p>The other three (<code>evaluate</code>, <code>evaluate.inline</code>, and <code>text</code>) aren’t discussed as much, and while I did get a little curious and started going down a rabbit hole looking at them, for once in my life I’ll be smart and not get sucked all the way in.</p>
</section>
<section id="custom-output-hooks" class="level2">
<h2 class="anchored" data-anchor-id="custom-output-hooks">Custom output hooks</h2>
<p>The general advice when writing custom output hooks is that you shouldn’t try to write the whole thing yourself. By design, knitr will create default hooks that are appropriate to the specific context, and your safest bet is to first retrieve the default hook by calling the <code>$get()</code> function, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">default_hook_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>)</span></code></pre></div>
</div>
<p>Then you can write your own hook that does some pre-processing to the inputs, before passing the modified inputs to the default hook. So, having already saved the default hook as <code>default_hook_output</code> I’d write my custom output hook like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">custom_hook_output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, options) {</span>
<span id="cb12-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> options<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>out.lines</span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(n)) {</span>
<span id="cb12-4">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> xfun<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split_lines</span>(x)</span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n) x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x, n), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"....</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-6">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-7">  }</span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">default_hook_output</span>(x, options)</span>
<span id="cb12-9">}</span></code></pre></div>
</div>
<p>There’s a few things going on here that are worth highlighting. First, notice that output hooks take two arguments <code>x</code> and <code>options</code>. The <code>x</code> argument is the raw text string that needs to be rendered: in this case, the string would correspond to the output that would normally be printed to the R console. The <code>options</code> argument is the list of knitr chunk options. The value of <code>options</code> that gets passed to the hook includes any values that were specified by the user in the chunk options, and also any default values that were not specified by the user. In this instance, <code>out.lines</code> is intended to indicate the maximum number of lines of R output to write to the rendered output document. It’s not one of the default chunk options (i.e., it wasn’t one of the options we saw in the previous section), and so if the user doesn’t specify a value for <code>out.lines</code> in the chunk options, <code>options$out.lines</code> will return a value of <code>NULL</code> in our custom hook, and so our <code>custom_hook_output()</code> will skip all the pre-processing in that case. However, if the user does specify a value for <code>out.lines</code>, it does a little text manipulation to alter the value of <code>x</code> before it is passed onto the default output hook.</p>
<p>Having written our custom hook, we apply it by using the <code>$set()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> custom_hook_output)</span></code></pre></div>
</div>
<p>Now that we have a knit hook that knows how to interpret <code>out.lines</code> as a chunk option, I can incorporate it into a knitr code chunk just like any other one:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r, out.lines = 4}</span></span>
<span id="cb14-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(200)</span></span>
<span id="cb14-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.26550866 0.37212390 0.57285336 0.90820779 0.20168193 0.89838968
  [7] 0.94467527 0.66079779 0.62911404 0.06178627 0.20597457 0.17655675
 [13] 0.68702285 0.38410372 0.76984142 0.49769924 0.71761851 0.99190609
 [19] 0.38003518 0.77744522 0.93470523 0.21214252 0.65167377 0.12555510
....</code></pre>
</div>
</div>
<p>The output here would normally be considerably longer than 4 lines, but we’ve applied a custom hook that enforces the truncation, so we get nicer output. Notice also that, in the same way that standard chunk options like <code>fig.width</code> and <code>fig.height</code> become <code>fig-width</code> and <code>fig-height</code> when you’re setting them via custom code comments, our new <code>out.lines</code> option becomes <code>out-lines</code> when used in that context:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb16-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| out-lines: 4</span></span>
<span id="cb16-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(200)</span></span>
<span id="cb16-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.26750821 0.21864528 0.51679684 0.26895059 0.18116833 0.51857614
  [7] 0.56278294 0.12915685 0.25636760 0.71793528 0.96140994 0.10014085
 [13] 0.76322269 0.94796635 0.81863469 0.30829233 0.64957946 0.95335545
 [19] 0.95373265 0.33997920 0.26247411 0.16545393 0.32216806 0.51012521
....</code></pre>
</div>
</div>
</section>
<section id="custom-chunk-hooks" class="level2">
<h2 class="anchored" data-anchor-id="custom-chunk-hooks">Custom chunk hooks</h2>
<p>In the previous section, we effectively created a new chunk option called <code>out.lines</code> simply by virtue of modifying one of the standard output hooks that is able to interpret it and modify the output accordingly. That approach doesn’t always work, particularly if the new option that you want to create requires that code be executed before and after knitr processes the chunk. In those situations we may need to write a “chunk hook” that is triggered whenever the new chunk option has a non-null value. Chunk hooks have a different structure than output hooks. The <em>R Markdown Cookbook</em> has some nice examples of this, including one for <a href="https://bookdown.org/yihui/rmarkdown-cookbook/time-chunk.html">timing how long it takes the chunk to execute</a>. I’ll adapt that one here.</p>
<p>To understand how to write a chunk hook, the key thing to realise is that it gets called twice: once before knitr executes the code in the chunk, and once again afterwards. The function can take up to four arguments, all of which are optional:</p>
<ul>
<li><code>before</code> is a logical value indicating whether the function is being called before or after the code chunk is executed</li>
<li><code>options</code> is the list of chunk options</li>
<li><code>envir</code> is the environment in which the code chunk is executed</li>
<li><code>name</code> is the name of the code chunk option that triggered the hook function</li>
</ul>
<p>As a general rule, the chunk hook is called for its side effects not the return value. However, if it returns a character output, knitr will add that output to the document output as-is.</p>
<p>Designing a chunk hook that records the amount of time taken to execute takes a little thought. When the hook is triggered the first time (with <code>before = TRUE</code>) we want to record the system time somewhere (e.g., in a variable called <code>start_time</code>). Then, when the hook is triggered the second time (with <code>before = FALSE</code>) we want to record the system time again (e.g., as <code>stop_time</code>), and compute the difference in time. We can do this using a <a href="https://adv-r.hadley.nz/function-factories.html">function factory</a> to create stateful functions. Here’s what that looks like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">create_timer_hook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb18-2">  start_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb18-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(before, options) {</span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (before) {</span>
<span id="cb18-5">      start_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb18-6">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb18-7">      stop_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb18-8">      elapsed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(stop_time, start_time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>)</span>
<span id="cb18-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb18-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;div style='font-size: 70%; text-align: right'&gt;"</span>,</span>
<span id="cb18-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elapsed time:"</span>, </span>
<span id="cb18-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(elapsed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), </span>
<span id="cb18-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>,</span>
<span id="cb18-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;/div&gt;"</span></span>
<span id="cb18-15">      )</span>
<span id="cb18-16">    }</span>
<span id="cb18-17">  }</span>
<span id="cb18-18">}</span></code></pre></div>
</div>
<p>When <code>create_timer_hook()</code> is called it returns a function that will become our custom hook. Or – to be more precise, because in this instance the distinction matters – it returns a closure. When called with <code>before == TRUE</code>, it records the system time and uses the super assignment operator <code>&lt;&lt;-</code> to store that value as <code>start_time</code>. Normally, an assignment that takes place during the function execution isn’t persistent and can’t be reused on later calls to that function. But we’ve structured things differently here: in this case, the <code>start_time</code> variable is defined in the enclosing environment (the one in which the function was defined) rather than the execution environment (in which the function body code executes). That changes things: the execution environment is inherently ephemeral and lasts as long as a single function call is in progress. The enclosing environment, however, is persistent, and will survive for (at least) as long as the function itself exists. As a consequence, the value assigned to <code>start_time</code> is persistent also, and still exists when the hook is triggered a second time with <code>before == FALSE</code>. That makes it possible to compute the difference between <code>start_time</code> and <code>stop_time</code> with <code>difftime()</code>.</p>
<p>Having computed the elapsed time, all that remains is to format it a little bit and then return a nice character string with some HTML that will be printed in the final document. To put this into action, we set the custom hook like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_timer_hook</span>())</span></code></pre></div>
</div>
<p>By doing this <code>timer</code> become the code chunk option that triggers the hook, and we can now use it in the document:</p>
<div class="cell" data-timer="true" data-out.lines="4">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb20-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb20-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| timer: true</span></span>
<span id="cb20-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| out-lines: 4</span></span>
<span id="cb20-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">runif(10000)</span></span>
<span id="cb20-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    [1] 0.6588776091 0.1850699645 0.9543781369 0.8978484920 0.9436970544
    [6] 0.7236907512 0.3703570659 0.7810175403 0.0111495086 0.9403087122
   [11] 0.9937492262 0.3574057452 0.7476350635 0.7929090238 0.7058590064
   [16] 0.4758250387 0.4946545260 0.3080524488 0.6950122463 0.8227933056
....</code></pre>
</div>
<div style="font-size: 70%; text-align: right">
Elapsed time: 0.03 secs
</div>
</div>
<p>And with that, we are done!</p>
<p>Yes, there are other kinds of hooks that you can write for knitr,<sup>2</sup> but the only two kinds of hooks I’ve ever actually had the need for myself are output hooks and chunk hooks, so in the interests of brevity I’ll leave it at that.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In addition to <code>knit_hooks</code> and <code>opt_chunks</code>, knitr has several other objects that can be used to control the behaviour of the package. These are <code>knit_patterns</code>, <code>knit_patterns</code>, <code>opts_current</code>, and <code>opts_knit</code>. They all have the same basic structure, including <code>$get()</code> and <code>$set()</code> functions. These objects are documented <a href="https://yihui.org/knitr/objects/">here</a>.↩︎</p></li>
<li id="fn2"><p>There are also <a href="https://yihui.org/knitr/hooks/#option-hooks">option hooks</a> that you can use to modify the value of some options based on the values of other options, and those are managed by <code>opts_hooks</code> in the same way that <code>knit_hooks</code> manages output hooks and chunk hooks.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Writing Knitr Hooks},
  date = {2023-12-30},
  url = {https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Writing Knitr Hooks.”</span> December
30, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks">https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Literate Programming</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/</guid>
  <pubDate>Fri, 29 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-30_knitr-hooks/yarn.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Fine-grained control of RNG seeds in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Ah fuck it. So. Earlier this morning<sup>1</sup> I <a href="https://hachyderm.io/@djnavarro/111655059799138922">posted on mastodon</a> about the sense of sadness I have about the death of turn-of-the-century-yes-this-century blog culture:</p>
<blockquote class="blockquote">
<p>I was reading a thread about how the norms around blog posts have changed over the years, where “writing something up a blog post” now has a kind of formality to it that it didn’t have 20 years ago (yes, I did in fact have a blog in 2003), which in turn makes blogging feel more like work than joy. This seems like a genuine cultural loss.</p>
</blockquote>
<p>Once upon a much happier time, we had a blogging culture where writing a blog post didn’t have to be “A Very Serious Blog Post By A Very Serious Person”. The craft of blogging wasn’t built around the idea that blog posts are miniature journal articles. Back then it was understood that a blog post was an inherently ephemeral and rarely serious thing. You’d have an idle thought, spend a small amount of time developing the idea, write it up, and <strong>ET FUCKING VOILA BITCHES I HAVE A BLOG POST</strong>.</p>
<p>I kind of loved that culture. It’s precisely in that spirit that I decided, in my last post, to cobble together an absolutely-cursed rethinking of the <a href="https://bookdown.org/yihui/blogdown/">blogdown</a> R package and write an unapologetically-unhinged <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">post</a> about it. The “eleventy plus knitr” system I built in an afternoon – following the <a href="https://www.youtube.com/watch?v=1i739SyCu9I">Bob Katter principle</a> in which “I ain’t spending any time on it, because in the meantime, every three months a person’s torn to pieces by a crocodile in North Queensland” – was a fun toy, and nothing more than that. This is <em>exactly</em> what blogs are for, and precisely the reason why the subtitle on that post is “Because you know what? I <em>am</em> here to <a href="https://www.urbandictionary.com/define.php?term=Not%20here%20to%20Fuck%20Spiders">fuck spiders</a>”. The entire purpose of blogging is to have some fun. It’s not a public relations exercise.<sup>2</sup> <sup>3</sup> <sup>4</sup></p>
<p>So let’s fuck some spiders.</p>
<section id="managing-computational-state-when-generating-pseudo-random-numbers" class="level2">
<h2 class="anchored" data-anchor-id="managing-computational-state-when-generating-pseudo-random-numbers">Managing computational state when generating pseudo-random numbers</h2>
<p>The spider I’m thinking about today relates to the problem of generating pseudo-random numbers in a reproducible way. Generating a sequence of numbers that satisfy formal definitions of randomness is an inherently tricky business and programming languages have a very, ummmmm, mixed track record in finding ways to do it sanely. The core of the problem lies in the fact that computers are Turing machines, and as such are deterministic systems. You can’t make a deterministic system behave “randomly” without doing quite a bit of mathematical work to (a) decide what “randomly” means in this context and, (b) constructing algorithms that produce behaviour that we are willing to describe as “random”. Fortunately for us, this part of the problem was solved a long time ago, and I have no desire whatsoever to use this post to discuss the <a href="https://en.wikipedia.org/wiki/Mersenne_Twister">Mersenne Twister</a> in relation to <a href="https://en.wikipedia.org/wiki/Algorithmically_random_sequence">Martin-Löf randomness</a>.<sup>5</sup> The algorithm is good enough for my purposes, it’s implemented as a random number generator (usually one of many) in various language, and that is <em>fine</em>.</p>
<p>The tricky part, from a practical perspective, is that pseudo-random number generators are <a href="https://en.wikipedia.org/wiki/State_(computer_science)">stateful</a> entities that depend on a “random number generator seed”, and – by design! – they are spectacularly sensitive to the seed. If you do even the tiniest thing in your code that touches the RNG seed, <em>every</em> subsequent action that uses that RNG will be changed in fundamental ways. If you want to program carefully around random number generators, you need to be super careful with managing the RNG seed.</p>
<p>Ah fuck it. <a href="https://www.youtube.com/watch?v=suAR1PYFNYA">Dua Lipa</a> already said it better:</p>
<blockquote class="blockquote">
<p>I come and I go <br> Tell me all the ways you need me <br> I’m not here for long <br> Catch me or I go Houdini <br> I come and I go <br> Prove you got the right to please me <br> Everybody knows <br> Catch me or I go Houdini</p>
</blockquote>
<p>From a reproducible computing perspective, you’d better catch the RNG state and work carefully with it, or else it will be gone forever.</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/houdini.png" class="img-fluid" alt="Screenshot from the video clip to 'Houdini'"></p>
</section>
<section id="how-do-different-languages-manage-rng-state" class="level2">
<h2 class="anchored" data-anchor-id="how-do-different-languages-manage-rng-state">How do different languages manage RNG state?</h2>
<p>How should we manage the RNG state in a programming language? It’s a difficult problem, and I am absolutely <em>not</em> the person to resolve the question. I’m basically an idiot, and I don’t even pretend to know what the right answer to this is. That being said, I think there’s essentially three categories of solution that exist in the wild:</p>
<ul>
<li><p><strong>The javascript style:</strong> The solution in vanilla javascript is basically a “fuck you” to the user. The core random number generator is <code>Math.random()</code> and it doesn’t let you specify the seed at all. If you want reproducible sequences of random numbers in javascript you can go fuck yourself.<sup>6</sup></p></li>
<li><p><strong>The C++ style:</strong> The solution in C++ is to use the <code>random</code> library, in which the RNG state is itself an object that must be passed to a probabilistic function, creating an object that can then be used to generate random numbers using the RNG state. It’s somewhat rigorous, but it leads to code like this, which is so obnoxiously painful that I barely even have words:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;random&gt;</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// set seed using time, define PRNG with Mersenne Twister</span></span>
<span id="cb1-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">static_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>mt19937_64 mersenne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// sample_poisson() draws from Poisson(4.1) and returns an integer.</span></span>
<span id="cb1-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>poisson_distribution<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> sample_poisson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// draw poisson sample (passing the PRNG as argument) and write to stdout</span></span>
<span id="cb1-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"poisson sample: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> sample_poisson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mersenne<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Honey I just wanted some Poisson variates I didn’t want your life story.</p></li>
<li><p><strong>The R style:</strong> Okay what if we secretly placed the RNG state into a <code>.Random.seed</code> variable that exists in the global environment but made it invisible so a typical user will never see it or think about it, and then have a <code>set.seed()</code> function to control it in ways that 99% of users won’t ever think about?</p></li>
</ul>
<p>Um. There is, as the young people say, a lot to unpack here.</p>
</section>
<section id="on-the-particulars-of-the-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="on-the-particulars-of-the-r-approach">On the particulars of the R approach</h2>
<p>Okay yes, that little summary is a bit of rhetorical largesse on my part. It should be obvious to anyone who knows me that the primary focus I have in writing about this topic is thinking about how R solves this. The whole purpose of talking about the “three styles” in the previous section is that I want to contrast the core approach in R with two other styles I’ve seen in other languages: compared to R, javascript is utterly lacking in rigour on this topic and as a consequence is utterly useless for analysts, whereas – by way of deliberately constructed contrast – C++ has rigour but is utterly lacking in practicality for everyday data analysis. The set of analysts who are going to put up with C++ bullshit when trying to simulate from a model is perilously close to measure zero. There is a <em>reason</em> why R adopts the peculiar solution it does.<sup>7</sup></p>
<p>So let’s unpack it a tiny bit. We’ll start by looking at the <code>.Random.seed</code> object itself.</p>
<section id="whats-in-the-.random.seed-babe" class="level3">
<h3 class="anchored" data-anchor-id="whats-in-the-.random.seed-babe">What’s in the <code>.Random.seed</code> babe?</h3>
<p>As I mentioned, what R does when you call <code>set.seed()</code> is create a hidden variable called <code>.Random.seed</code> that exists in the users global workspace, and is used to specify the state of the random number generator.<sup>8</sup> Here’s what it looks like when we call <code>set.seed()</code> with <code>seed = 1</code>:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb2-3">state</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1]       10403         624  -169270483  -442010614  -603558397
  [6]  -222347416  1489374793   865871222  1734802815    98005428
 [11]   268448037    63650722 -1754793285 -2135275840  -779982911
 [16]  -864886130  1880007095   463784588  1271615005  1390544442
....</code></pre>
</div>
</div>
<p>I’ve truncated the output because the actual <code>state</code> variable here is quite long and we don’t need all that clutter.<sup>9</sup> It’s noticeable, when you look at this thing, that the first two elements of the <code>.Random.seed</code> seem to be rather different from the others. Let’s test that by calling <code>set.seed()</code> with <code>seed = 2</code>:</p>
<div class="cell" data-out.lines="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb4-3">state</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  [1]       10403         624 -1619336578  -714750745  -765106180
  [6]   158863565 -1093870294   242367651 -1691232888 -1538791959
 [11]   438890646  -141146593   721730004  1779208901   575310018
 [16]  -949789349   329933024  -952437919  2079445422  1509473879
....</code></pre>
</div>
</div>
<p>Yeah okay, there’s something going on here. The first two values in this vector are clearly different in some sense from the rest of the numbers. Let’s start with the first element of our state vector, the <code>10403</code> value. This one is not part of the random number generator itself. Rather, it’s used to encode the <em>kind</em> of random number generator in use. The way to decode what means is to split it up into three numbers, like this <code>1 04 03</code>. From the help documentation:</p>
<blockquote class="blockquote">
<p>The lowest two decimal digits are in 0:(k-1) where k is the number of available RNGs. The hundreds represent the type of normal generator (starting at 0), and the ten thousands represent the type of discrete uniform sampler.</p>
</blockquote>
<p>To help make sense of this, it helps to realise that <code>set.seed()</code> has more arguments to it than just the <code>seed</code> value. There are in fact four arguments, as shown below:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">normal.kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample.kind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<p>The <code>kind</code> argument specifies which RNG algorithm should be used to generate uniform random numbers (e.g., Mersenne Twister, the default), which is usually the thing we’re interested in, at least to the extent that most probabilistic process require that we have a generator for uniform random numbers. This is what the <code>03</code> part of that <code>10403</code> number refers to. However. There are two special cases that come up so often that R allows you to customise them. The <code>normal.kind</code> argument to <code>set.seed()</code> specifies the algorithm to by used when generating normally distributed numbers (e.g., Box-Muller), and this is is what the <code>04</code> part of <code>10403</code> references. The <code>sample.kind</code> argument refers to the algorithm used when sampling from a discrete set (e.g., as in the <code>sample()</code> function), and the <code>1</code> part of <code>10403</code> refers to that.</p>
<p>As to what the different options are, what defaults are used, and how those defaults have changed across different versions of R, I’ll just refer the interested reader to the help documentation, because honestly that’s not the point of this post. For now, it’s enough to recognise that the first element of <code>.Random.seed</code> specifies the kind of RNG, and that by default we’re using the Mersenne Twister any time we need uniform random numbers.</p>
<p>Okay, what about that second element? Much like the <code>10403</code> value in the first position, the <code>624</code> number in the second position seems to be screaming out “hello I am not actually a part of the RNG state” too, and indeed that’s correct. It’s specific to the Mersenne Twister, and is used to indicate that the <em>actual</em> Mersenne Twister RNG state is an integer vector of length 624. And shockingly, if we take a look at how long our <code>state</code> variable is</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(state)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 626</code></pre>
</div>
</div>
<p>we get an answer of 626: there are 624 integers used to specify the state of the Mersenne Twister, one integer used to indicate that yes the Mersenne Twister state has length 624, and one more integer used to indicate that (among other things) we’re using the Mersenne Twister.</p>
<p>That checks out.</p>
</section>
<section id="lets-be-random" class="level3">
<h3 class="anchored" data-anchor-id="lets-be-random">Let’s be random</h3>
<p>Well that was tiresome. I seem to be pathologically incapable of writing a short blog post without going off on bizarre yak-shaving tangents. Sorry. Anyway, let’s get back on track and do something that relies on the state of the RNG, shall we? First, we’ll reset the value of <code>.Random.seed</code> and capture its initial value:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span></code></pre></div>
</div>
<p>Next, I’ll do something that requires the random number generator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>When I do this, there are two things that happen. Most obviously, by calling <code>sample()</code> I now have a random permutation of the numbers between 1 to 10. But as a hidden side effect, the value of <code>.Random.seed</code> has changed.<sup>10</sup> Because the RNG state has changed, if I repeat the exercise I get a different random permutation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  3  1  5  8  2  6 10  9  4  7</code></pre>
</div>
</div>
<p>This is of course the desired behaviour, but the only reason it works is by relying on the <code>.Random.seed</code> vector. If I restore the original state of the RNG before calling <code>sample()</code>, I get the exact same result as the first time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">.Random.seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> state</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Again, this is expected and desired behaviour.</p>
</section>
<section id="strengths-and-weaknesses-of-the-r-approach" class="level3">
<h3 class="anchored" data-anchor-id="strengths-and-weaknesses-of-the-r-approach">Strengths and weaknesses of the R approach</h3>
<p>The approach used in R reflect as a specific philosophy that emerges from the core purpose of the language: <strong>R is a scripting language designed to support scientific data analysis</strong>. This core goal leads to two key features:</p>
<ul>
<li><p>Scientists care about computational reproducibility, so (unlike javascript) base R comes with the <code>set.seed()</code> function that allows you to initialise the state of the RNG in a reproducible way. In fact, R goes one step further and provides a <code>RNGversion()</code> function that supports backward-compatibility across R versions, because the low level details of how R implements random number generation have changed over the years.</p></li>
<li><p>Data analysts need simple, practical solutions. The C++ style where you have to construct an RNG object and then explicitly pass it as an argument when you want to sample from a distribution is awkward and frustrating, and rarely helpful when doing everyday data analysis.</p></li>
</ul>
<p>These twin considerations lead to the R solution: there’s <em>one</em> RNG state variable in R, tucked away in a hidden variable in the user workspace, and you rarely have to think about it in any more detail than remembering to include <code>set.seed()</code> in your analysis script. In some ways it’s an inelegant solution, but it’s shockingly effective from a practical standpoint.</p>
<p>However.</p>
<p>There are edge cases when the R solution doesn’t quite work as well as you’d hope, and I’ve encountered them more than once. Because R relies on a single <code>.Random.seed</code> variable to manage state, there’s no easy way for the analyst to make a distinction between “things I’m doing that incidentally require some random numbers”, and “other probabilistic things I’m doing that are utterly essential to a simulation”. Everything you do in an R script relies on the <em>same</em> random number generator, and uses the <em>same</em> seed to manage that state. This can sometimes be fragile, because any line of code that “incidentally” touches the RNG will affect the results from any “essential” probabilistic code you write later in the script. That happens a lot with code that has this structure:</p>
<ol type="1">
<li>set the RNG seed</li>
<li>do some essential probabilistic simulations</li>
<li>do something that incidentally calls the RNG</li>
<li>do some more essential probabilistic simulation</li>
</ol>
<p>When you write the code, what you sort of have in your head is that “I’m setting the RNG seed in part 1 in order to ensure that the simulations in part 2 and 4 are reproducible”, but you have a hidden dependence on the code in part 3. Often times, you don’t even realise that the code in part 3 is affecting the RNG state because there are lots of R functions that incidentally use the RNG without you realising it.</p>
<p>Often what people do to address this, when they are aware of this issue, is to set the seed multiple times, at key points in the code:</p>
<ol type="1">
<li>set the RNG seed</li>
<li>do some essential probabilistic simulations</li>
<li>do something that incidentally calls the RNG</li>
<li>set the RNG seed again</li>
<li>do some more essential probabilistic simulation</li>
</ol>
<p>By setting the seed in multiple places, you have a solution that is more robust. If, for example, there are package updates that change the manner in which the code in part 3 touches the RNG, your simulation in part 5 won’t be affected. It’s a defensive coding trick to minimise your exposure to unexpected changes to RNG state, and it works pretty well.<sup>11</sup></p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/dance-the-night.png" class="img-fluid" alt="Screenshot from the video clip to 'Dance The Night' by Dua Lipa"></p>
</section>
</section>
<section id="creating-an-isolated-rng-seed" class="level2">
<h2 class="anchored" data-anchor-id="creating-an-isolated-rng-seed">Creating an “isolated” RNG seed</h2>
<p>As you can probably guess, I am actually a huge fan of the R solution. Yes, it’s an unprincipled hack where the language “cheats” by creating a hidden global state variable, but it really does work for the vast majority of use cases and it doesn’t waste the analysts time by making them do all the dirty work managing the RNG themselves. From its inception R has <em>never</em> been a language that cares about ideological purity: as Hadley Wickham once noted,<sup>12</sup> R is first and foremost a language for “getting shit done”.</p>
<p>That being said, sometimes I find myself wishing there was a way of creating an “isolated” RNG seed. The idea here is that as the data analyst, I know perfectly well which parts of my code are essential to my probabilistic simulations, and what I really want to do is “protect” those parts of the code by executing them with a dedicated RNG. All my incidental code can use the global RNG state, but nothing I do in the incidental code would affect the output of the protected simulation code, <a href="https://www.youtube.com/watch?v=OiC1rgCPmUQ">not one hair out of place</a>.</p>
<blockquote class="blockquote">
<p>Watch me dance, dance the night away <br> My heart could be burnin’, but you won’t see it on my face <br> Watch me dance, dance the night away <br> I’ll still keep the party runnin’, not one hair out of place</p>
</blockquote>
<p>On the face of it, this seems hard to accomplish with R because the <code>.Random.seed</code> variable is aggressively unique. The documentation makes it very clear that the only place R will look for the RNG state is the <code>.Random.seed</code> variable in the user global environment, so you cannot solve this problem by creating a new <code>.Random.seed</code> variable in another environment. However, the documentation also makes clear that you are <em>absolutely</em> allowed to save the value of <code>.Random.seed</code> and restore it later.<sup>13</sup> In other words, you totally could do something like this:</p>
<ol type="1">
<li>Use <code>set.seed()</code> to create the “to-be-isolated” RNG, and then do something like <code>protected_state &lt;- .Random.seed</code> to store the state of that RNG</li>
<li>Use <code>set.seed()</code> again to set the “global” RNG state</li>
<li>Do some “incidental” random things (implicitly using the global RNG state)</li>
<li>In preparation for the protected step, cache the global state in a temporary <code>global_state &lt;- .Random.seed</code></li>
<li>Restore the protected RNG with <code>.Random.seed &lt;- protected_state</code></li>
<li>Run your “protected” simulation code</li>
<li>Capture the updated state <code>protected_state &lt;- .Random.seed</code></li>
<li>Restore the global RNG with <code>.Random.seed &lt;- global_state</code></li>
</ol>
<p>This approach works perfectly well, actually. There is absolutely nothing stopping you from caching the state of a protected RNG separately from the global RNG, and occasionally restoring it when you specifically want to use the protected RNG. The only problem with the solution is that I am <em>absolutely</em> not willing to faff about writing code that does this in my everyday analysis work. It’s time-consuming and annoying, and I have deadlines to meet.</p>
<p>Enter, stage left, the <a href="https://r6.r-lib.org/">R6</a> package. It is almost obnoxiously easy to design a stateful R6 class that solves this problem. Here’s how you do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">Seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R6<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seed"</span>,</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb16-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb16-4">      old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(...)</span>
<span id="cb16-6">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, old, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-8">    },</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">state =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb16-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>()) {</span>
<span id="cb16-11">      old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-13">      x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(expr), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> envir)</span>
<span id="cb16-14">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(.Random.seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".Random.seed"</span>, old, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .GlobalEnv)</span>
<span id="cb16-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb16-17">    }</span>
<span id="cb16-18">  )</span>
<span id="cb16-19">)</span></code></pre></div>
</div>
<p>The <code>Seed</code> class is terribly simple. When you initialise a new <code>Seed</code> object, it temporarily caches the global <code>.Random.seed</code> state, then calls <code>set.seed()</code> to create the protected RNG state. This protected state is then cached within the <code>Seed</code> object itself as the <code>$state</code> field.<sup>14</sup> Finally, it restores the global <code>.Random.seed</code> variable to its original state.</p>
<p>Using the protected seed is pretty straightforward: the <code>Seed</code> class has a <code>$use()</code> method to which you pass an R expression. All code in that expression is evaluated using the protected RNG state rather than the global state. The mechanism here is exatly the same: the <code>$use()</code> method caches the global RNG state, copies the <code>$state</code> field to the <code>.Random.seed</code>, then executes the R code. After the code has executed, the new value of <code>.Random.seed</code> is copied back to the <code>$state</code> field, and then the global state is restored.</p>
<p>Let’s have a look at how it works. First, I’ll set the “usual” RNG state using <code>set.seed()</code> with <code>seed = 123</code>. Then, I’ll create two new isolated RNG seeds, both of which use <code>seed = 1</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb17-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb17-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-4">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Next, I’ll call <code>sample()</code> using these isolated seeds:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb18-2">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8
 [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Notice that both of these produce identical output (as they should, since they were both initialised using the same <code>seed</code> value), and the output is exactly the same as the results we saw earlier when I used <code>set.seed(1)</code>. So far, so good. Okay, now let’s use these isolated seeds a second time:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb20-2">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  3  1  5  8  2  6 10  9  4  7
 [1]  3  1  5  8  2  6 10  9  4  7</code></pre>
</div>
</div>
<p>Again, the results are identical to each other, and they’re also identical to the results we saw earlier when I called <code>sample()</code> a second time after using <code>set.seed(1)</code>. Also what we’re expecting. Yay! Finally, let’s check that using these isolated RNG seeds has left the state of <code>.Random.seed</code> in the global workspace unchanged:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(state, .Random.seed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Yup. It works.<sup>15</sup></p>
<p>Importantly for the desired functionality, the protection runs the other way too. RNG-sensitive code executed using the global RNG doesn’t affect the behaviour of code executed using one of the protected generators. This is actually the key feature, so let’s take a look. As before, we’ll set up our global generator and two identical protected generators.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb24-2">state <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .Random.seed</span>
<span id="cb24-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-4">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Next, I’ll use the <code>x</code> generator to do something that we might imagine is part of an “essential” simulation exercise:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Unsurprisingly, it produces the same output. Now here’s the key part. What would have happened if I ran some incidental code beforehand? Well, let’s do exactly that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2875775</code></pre>
</div>
</div>
<p>In my hypothetical scenario, this would be something that happens during the incidental code (e.g., maybe a function I called on the side – in order to explore something that came up during the scientific reasoning process, because analysis code is <em>not</em> production code and it has an inherently different logic<sup>16</sup> – happened to generate a random number in order to break a tie or whatever). In the normal course of events, this would alter the state of the RNG for all subsequent code. But, if we now repeat the “essential” line of code using the <code>y</code> generator, we see that it still produces the exact same answer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  9  4  7  1  2  5  3 10  6  8</code></pre>
</div>
</div>
<p>Well that’s a relief. I mean, this is what we should expect because <code>x</code> and <code>y</code> were both created to be identical generators and they were both designed to be isolated from the global RNG state, so of course state changes in the global RNG are entirely irrelevant to the behaviour of code that uses one of the protected generators, but it’s nice to confirm.</p>
<p>This is the behaviour I wish I had easy access to in R. There are times when I have “special” code that I really, really, really want to be executed with its very own RNG, completely isolated from the global RNG. It actually irritates me that the solution to the problem can be implemented in R6 with a mere 19 lines of code. Annoyed that I didn’t think of this years ago tbqh.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping up</h2>
<p>So okay, I solved the problem I was idly thinking about when I decided to fuck this particular spider. What now?</p>
<p>It would be pretty easy to wrap something like this in a package I suppose,<sup>17</sup> but (a) I’m too lazy to write it myself, and (b) I think the use case for it is pretty narrowly confined to situations when you are writing a very long script that performs an “essential” simulation and also contains incidental code isn’t supposed to affect the simulation itself. Plus, and perhaps most importantly, (c) remember how I said this was a spider-fucking post? I said it and I bloody well meant it. I’m not trying to Solve A Big Problem here. I’m just playing around with code and enjoying the act of writing about it.</p>
<p>That being said, I have to admit I’ve encountered a few situations in my professional life where I really wished there were a package that implemented something like the <code>Seed</code> class. I had one experience a little while back where I’d inherited a long simulation script that did the right thing insofar as it called <code>set.seed()</code> at the top of the script, but it had lots of essential simulation code interleaved between other code that was used for non-essential purposes and incidentally modified the RNG state. It was a nightmare to try to refactor the code without breaking reproducibility. Eventually I just had to give up. The code absolutely did need to be refactored because of the future use that we had in mind, and – despite the original programmers laudable effort to do the right thing – it was absolutely impossible to do so without changing the results of the simulations. It would have been a lot easier to do this if the “essential” simulation code had been properly isolated from the incidental code. Situations like this are exactly the ones where you want something like the <code>Seed</code> class.</p>
<p>Anyway. Whatever. This was supposed to be an exercise in fucking a spider not shaving a yak, and frankly there has been altogether too much <a href="https://en.wiktionary.org/wiki/yak_shaving">yak shaving</a> going on in this post. So let’s leave it there, yes?</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Okay fine it was yesterday morning, because instead of finishing this blog post last night as I’d intended I went out for cocktails. Sue me.↩︎</p></li>
<li id="fn2"><p>One of the most cursed things that has happened to public tech culture is the idea of corporate-style “community”. Oh look at me, I’m a tHouGHt lEaDer iN tEcH blah blah blah. Honey, if I wanted to masturbate in public there are much easier ways to make men pay to watch me do it.↩︎</p></li>
<li id="fn3"><p>Somewhat relatedly, I often think to myself that the reason why a lot of technical blog posts end up with very bland writing is that the author feels obligated to “act professionally” on their blog, for fear that their employer might see it and react negatively if they ever use the word “fuck”. I understand and share that sentiment but also… I’ve worked as an academic, I’ve worked in tech, and I now work in pharma. Anyone who knows me professionally knows that (especially as I’ve gotten older) I don’t ever talk like this at work. Professionalism is important, <em>in a professional context</em>. But my blog is not my job, and in much the same way that <a href="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/#art">trying to be a professional artist sucked all the joy out of making art for me</a>, trying to be professional in my blog posts sucks all the joy out of writing. In my professional life I have to be restrained, and things that are essential to my very character – my queerness, for instance – are inadmissable and unspeakable in a work context. I’m frankly unwilling to extend that level of self-imposed closeting to my personal life. This blog is part of my personal life, not my professional life. So I get to be me here. If that bothers people they are free to not read my blog.↩︎</p></li>
<li id="fn4"><p>As Dan Simpson once remarked, it is <em>extremely</em> homophobic of quarto not to support nested footnotes. Like, what the hell are queers supposed to do when we can’t turn our blog posts into a tangled web of unhinged footnotes? This is our primary defence mechanism to ensure that the straights on linkedin won’t ever try to interact with us, damn it.↩︎</p></li>
<li id="fn5"><p>No seriously. I spent a solid six months of my mid-20s life reading journal articles about algorithmic randomness and its relationships to Kolmogorov complexity and Bayesian inference, when instead I could have spent that time doing literally anything else and it was a terrible fucking decision.↩︎</p></li>
<li id="fn6"><p>Yes I know about <a href="https://www.npmjs.com/package/seedrandom">seedrandom</a>, shut up.↩︎</p></li>
<li id="fn7"><p>In defence of both C++ and javascript, you could probably argue the same for those languages: C++ is a systems language, and you’re not really supposed to use it for everyday data analysis. The tedious verbosity of C++ code in this context reflects the function of the language. Similarly, javascript was designed to support scripting for web pages, and while there are now libraries that support data analysis in javascript, it wasn’t originally designed for that purpose and so “vanilla” javascript doesn’t come with the same level of careful thought on this topic that you see in base R. My point in using those two as contrasts to R is not to call them bad languages, but to highlight the fact that different languages make different choices that reflect the primary function those languages were designed to support.↩︎</p></li>
<li id="fn8"><p>Note that the <code>.Random.seed</code> vector doesn’t actually exist at start up: it is created explicitly when the user calls <code>set.seed()</code>, but it will also be created for you if you do something that requires the RNG without previously calling <code>set.seed()</code>, using the current time and the process ID as the input.↩︎</p></li>
<li id="fn9"><p>I swear to the almighty femme top above, every single time I have to write a knitr hook I have to spend 20 minutes googling to find <a href="https://bookdown.org/yihui/rmarkdown-cookbook/hook-truncate.html">this page</a> again. I don’t know why this specific thing is so hard to search for, but I’m about <em>this</em> close to writing a pointless blog post on my own site that just copies the damn code line for line, just so that I don’t have to search for it again.↩︎</p></li>
<li id="fn10"><p>Parenthetically, if you want to configure R so that you get notified every time <code>.Random.seed</code> changes, you can set up a callback handler to do this. Henrik Bengtsson has a <a href="https://www.jottr.org/2020/09/21/detect-when-the-random-number-generator-was-used/">nice post</a> showing you how to do this. I have something similar set up in my <code>.Rprofile</code>.↩︎</p></li>
<li id="fn11"><p>More generally, though, if you want to be completely safe you’d probably need to use tools like <a href="https://www.docker.com/">Docker</a>, <a href="https://rstudio.github.io/renv/">renv</a>, and <a href="https://github.com/r-lib/rig">rig</a> to control the computational environment. But that’s beyond the scope.↩︎</p></li>
<li id="fn12"><p>I’m too lazy to track down the original citation or the exact quote, but I think he said it during an rstudio::conf / posit::conf talk. The specifics don’t matter very much.↩︎</p></li>
<li id="fn13"><p>The exact phrasing in the documentation says that <code>.Random.seed</code> “can be saved and restored, but should not be altered by the user”, i.e., it’s totally fine to copy the RNG state, just don’t try to modify the values stored in the vector yourself because you’ll almost certainly mess it up.↩︎</p></li>
<li id="fn14"><p>I should probably have made this a private field rather than a public field, and then written a public accessor method like <code>$get_state()</code> or whatever. But this is a toy example, I’m not trying to be rigorous here.↩︎</p></li>
<li id="fn15"><p>It should go without saying that this isn’t guaranteed to work properly if we’re doing a multi-threaded execution thing. But that’s true for normal random number generation anyway: you need special tools when doing random number generation in parallel. One of these days I want to do a deep dive on that topic, but it’s totally something for a future post.↩︎</p></li>
<li id="fn16"><p>One of these days I want to write a post about what counts as “best practice” for writing analysis code that doesn’t go into prod but might be sent to a regulator, because seriously my babes that is a fucking different beast altogether. But that’s for another time.↩︎</p></li>
<li id="fn17"><p>On the off chance anyone does go down this path, I propose the name “seedcatcher” so that all the stats gays can make “no loads refused” jokes about it. See also, “lubridate”.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Fine-Grained Control of {RNG} Seeds in {R}},
  date = {2023-12-27},
  url = {https://blog.djnavarro.net/posts/2023-12-27_seedcatcher},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Fine-Grained Control of RNG Seeds in
R.”</span> December 27, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher">https://blog.djnavarro.net/posts/2023-12-27_seedcatcher</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Randomness</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/</guid>
  <pubDate>Tue, 26 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-27_seedcatcher/houdini.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The blogdown of theseus</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>It is the first day of my summer vacation. The out-of-office autoreply is on. I have a full tank of gas, half a pack of cigarettes, the sun is shining, and I’m wearing a sequined dress. Blues Brothers it is most certainly not, but a certain attitude is in force. And so it is that I’ve decided to get the band back together. Where “the band” in this case happens to be “a tool chain that looks like a shit version of <a href="https://pkgs.rstudio.com/blogdown/">blogdown</a>”.</p>
<p>Is it a good use of my time? No.&nbsp;Will I do a good job of it? No.&nbsp;But will it it make a good blog post? Also no.</p>
<p>Okay. So here’s the backstory. Literate programming in R has been around for a very long time. So much so that we’ve all become accustomed to thinking about tools like <a href="https://rmarkdown.rstudio.com/">R markdown</a>, <a href="https://pkgs.rstudio.com/blogdown/">blogdown</a>, and <a href="https://quarto.org/">quarto</a>, as baked-in aspects to the language. That’s not actually a bad thing. They’re good tools. I have no intention of abandoning any of them. But they aren’t primitives. Each of them is an opinionated tool that takes a code execution engine like <a href="https://yihui.org/knitr/">knitr</a> as a starting point, and builds from it in different ways. R markdown and quarto both use knitr to execute the R code within an appropriately annotated markdown document and then feed the results to <a href="https://pandoc.org/">pandoc</a> to create outputs in different formats. Blogdown takes the same idea, but passes the output to the <a href="https://gohugo.io/">hugo</a> static site generator to create full featured blogs and static websites. Et cetera.</p>
<p>What would happen if those “upstream” tools were taken away? What if you needed to create an R blog from scratch and the only part of this tool chain you had available to you was knitr. What choices would you make? Could you cobble together something vaguely similar to a blogdown site or a quarto blog, using entirely different constituent parts?</p>
<p>Why would you do this? You wouldn’t.</p>
<p>But for reasons that absolutely made sense to me at the time, this is precisely what I did. The website is live at <a href="https://knitr-11ty.djnavarro.net/">knitr-11ty.djnavarro.net/</a>, and – because I have absolutely no intention of writing the same blog post twice – if you want to “read more” as they used to say, you can check out the actual blog post <a href="https://knitr-11ty.djnavarro.net/posts/the-blogdown-of-theseus/">here</a>.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {The Blogdown of Theseus},
  date = {2023-12-23},
  url = {https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“The Blogdown of Theseus.”</span>
December 23, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus">https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus</a>.
</div></div></section></div> ]]></description>
  <category>Javascript</category>
  <category>R</category>
  <category>Blogging</category>
  <category>Literate Programming</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/</guid>
  <pubDate>Fri, 22 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-24_blogdown-of-theseus/theseus-and-ariadne.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Closed form solutions for a two-compartment pharmacokinetic model</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>It is late December, the office is quiet on the eve of the annual ritual of everyone vanishing into their own personal end of year vacations, and I have time to breathe and – heaven forfend – to think. As such, and in the spirit of trying to do something professionally useful during this strangely empty moment of the year, it is time for another post in my irregular and unsystematic <a href="http://blog.djnavarro.net/category/pharmacometrics">series on pharmacometrics</a>. Does anyone except Danielle care? Unlikely. Will it make the world a better place? Absolutely not. But neither of these has ever been a governing consideration on this blog.<sup>1</sup></p>
<section id="the-matter-at-hand" class="level2">
<h2 class="anchored" data-anchor-id="the-matter-at-hand">The matter at hand</h2>
<p>The topic for today’s installment in Danielle’s ongoing public display of blog-based narcissism is deriving closed-form solutions for two-compartment pharmacokinetic (PK) models. There is absolutely nothing in the post that is not already extremely well known by pharmacometricians, and the scope of the post is somewhat narrower than the full range of two-compartment PK models. I’m mostly going to consider this model:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/2-cpt-phys.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%"></p>
</figure>
</div>
<p>Here we have the garden-variety two-compartment model with first-order absorption and first-order elimination. In the usual application of this model we have a drug that is administered orally. The drug is absorbed gradually from the gut into systemic circulation (central compartment), and is gradually eliminated from the body, again from the central compartment. During the time that the drug is within the body, it does not stay solely within the blood: it is distributed through various other tissues, and so the volume over which it is distributed changes over time. In a two-compartment model the complexity of this is simplified: the drug concentration in a typical study is measured only in the central compartment (e.g., by measuring plasma concentration), and so the model does not concern itself with the fine grained details of what is happening elsewhere in the body. It is often (not always) sufficient to assume that the “other” tissues in which the drug distributes comprise a single “peripheral compartment”.</p>
<p>In order to attach physiologically meaningful interpretation to this model, it’s typically parameterised in terms of the following five quantities:</p>
<ul>
<li>Volume of distribution for the central compartment <img src="https://latex.codecogs.com/png.latex?V_c"> refers to the volume over which the drug amount in the central compartment is assumed to be evenly distributed. It’s a fictional quantity – and can take on values that are much larger than the actual volume of blood or plasma for a variety of reasons – but it’s a convenient one.</li>
<li>Volume of distribution for the peripheral compartment <img src="https://latex.codecogs.com/png.latex?V_p">: as above but for the peripheral compartment</li>
<li>Clearance <img src="https://latex.codecogs.com/png.latex?Cl"> is the volume within the central compartment that can be completely cleared of drug per unit time, and governs the elimination of drug from the body</li>
<li>Intercompartmental clearance <img src="https://latex.codecogs.com/png.latex?Q"> governs the exchange of drug between the central and peripheral compartments</li>
<li>The absorption rate constant <img src="https://latex.codecogs.com/png.latex?k_a"> is a scaling factor used to describe the proportion of the drug amount currently in the gut that is transferred into systemic circulation at any moment in time<sup>2</sup></li>
</ul>
<p>This model is probably the one I come across most in my everyday work, and these are the parameters used to interpret model behaviour. However, it’s not the most convenient form to use when working with the model mathematically, so let’s rewrite it in terms that are more convenient.</p>
</section>
<section id="a-two-compartment-pharmacokinetic-model" class="level2">
<h2 class="anchored" data-anchor-id="a-two-compartment-pharmacokinetic-model">A two compartment pharmacokinetic model</h2>
<p>As in every mathematical fairy tale and religious text, we begin with some notation. The state of our system will at time <img src="https://latex.codecogs.com/png.latex?t"> be described in terms of three quantities: <img src="https://latex.codecogs.com/png.latex?x_%7B0t%7D"> is the drug amount in the depot compartment (generally the gut) at time <img src="https://latex.codecogs.com/png.latex?t"> units post-dose, <img src="https://latex.codecogs.com/png.latex?x_%7B1t%7D"> is the amount in the central compartment, and <img src="https://latex.codecogs.com/png.latex?x_%7B2t%7D"> is the amount in the peripheral compartment. Our state vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t%20%5Cin%20%5Cmathbb%7BR%7D%5E3_%7B%5Cgeq%200%7D"> is the collection of these three things, and if you care deeply about such matters you might wish to assert that the drug amounts are described by a function <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D(t)"> that takes on such values:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D(t)%20=%20%5Cmathbf%7Bx%7D_t%20=%20(x_%7B0t%7D,%20x_%7B1t%7D,%20x_%7B2t%7D)%0A"> In an act of perversity, however, I’m not going to use the functional notation <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D(t)"> here. I’m simply going to talk about the state vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> because honestly no-one wants to see what this post would look like if I added all those extra parentheses.</p>
<p>Having established this notation and – in a Barbie-like state of best-day-ever excitement – we can now describe how the state vector changes over time using a system of ordinary differential equations (ODEs):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B0t%7D%20&amp;%20=%20&amp;%20-k_%7B01%7D%20x_%7B0t%7D%20%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B1t%7D%20&amp;%20=%20&amp;%20k_%7B01%7D%20x_%7B0t%7D%20-%20(k_%7B12%7D%20+%20k_%7B10%7D)%20x_%7B1t%7D%20+%20k_%7B21%7D%20x_%7B2t%7D%20%5C%5C%0A%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B2t%7D%20&amp;%20=%20&amp;%20k_%7B12%7D%20x_%7B1t%7D%20-%20k_%7B21%7D%20x_%7B2t%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Here we have four rate constant parameters (<img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">), each of which describes the instantaneous transfer of drug quantity from one compartment to another: the notational convention is to refer to the source compartment as the first subscript and the destination compartment as the second, so for instance <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D"> is the rate constant associated with the movement of drug from the central compartment (compartment 1) to the peripheral compartment (compartment 2). In this notation the “zero-th” compartment is an abstraction: <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D"> describes absorption (generally from the gut) and <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D"> describes elimination (generally to urine).<sup>3</sup></p>
<p>Schematically, the exchange of drug amounts between the compartments in this formalism can be visualised in the following way:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/2-cpt-micro.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:60.0%"></p>
</figure>
</div>
<p>Structurally you can see it’s the same as the model described at the start, and it’s not at all difficult to convert between the physiologically-interpretable parameterisation and the mathematically-convenient parameterisation using these rate constants.<sup>4</sup> <sup>5</sup></p>
<p>In matrix form we can express the ODE system as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%7D%7Bdt%7D%20%5Cmathbf%7Bx%7D_t%20=%20%5Cmathbf%7BK%7D%20%5Cmathbf%7Bx%7D_t%0A"></p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BK%7D%20=%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bccc%7D%0A-k_%7B01%7D%20&amp;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20&amp;%20%20%20%20%20%20%200%20%5C%5C%0Ak_%7B01%7D%20&amp;%20-k_%7B12%7D%20-%20k_%7B10%7D%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%200%20&amp;%20%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>and our initial conditions for a dose administered orally at time <img src="https://latex.codecogs.com/png.latex?t=0"> are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_%7B0%7D%20=%20(%5Cmbox%7Bdose%7D,%200,%200)%0A"></p>
<p>This particular parameterisation is most helpful when we want to think about the underlying ODE system, and it’s the one I’ll use for deriving solutions in this post, but when we want to interpret the models we usually rewrite it in terms of the parameters I described at the start of the post.<sup>6</sup></p>
</section>
<section id="solving-linear-time-homogeneous-ode-systems" class="level2">
<h2 class="anchored" data-anchor-id="solving-linear-time-homogeneous-ode-systems">Solving linear time-homogeneous ODE systems</h2>
<p>So now we get to the part of the post where the mathematics begins to intrude. Per our model, we have a linear time-homogeneous ODE system that we want to solve, in the sense that we would like a nice algebraic expression that describes the state <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> at time <img src="https://latex.codecogs.com/png.latex?t">. Of course, I want all sorts of things in life that I can’t obtain without suffering, and this is no exception. If you want to solve a linear homogeneous ODE, you’re going to have to work with matrix exponentials, and with matrix exponentials comes pain. Especially if, like me, you vaguely remember matrix exponentials from an undergrad maths class you took 30 years ago and you actually haven’t needed to use them for anything much in the decades that followed.</p>
<p>Perhaps a small “refresher” will help us all then. The <a href="https://en.wikipedia.org/wiki/Matrix_exponential">matrix exponential</a> <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D"> of a matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is a quantity that is broadly analogous to its scalar equivalent <img src="https://latex.codecogs.com/png.latex?e%5Ek"> for scalar value <img src="https://latex.codecogs.com/png.latex?k">, and has similar (but not identical) properties. In the same way that we can define a scalar exponential <img src="https://latex.codecogs.com/png.latex?e%5Ek"> via a <a href="https://en.wikipedia.org/wiki/Taylor_series#List_of_Maclaurin_series_of_some_common_functions">series expansion</a>, the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D"> is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ae%5E%7B%5Cmathbf%7BK%7D%7D%20&amp;=&amp;%20%5Cmathbf%7BI%7D%20+%20%5Cmathbf%7BK%7D%20+%20%5Cfrac%7B1%7D%7B2%7D%20%5Cmathbf%7BK%7D%5E2%20+%20%5Cfrac%7B1%7D%7B6%7D%20%5Cmathbf%7BK%7D%5E3%20+%20%5Cldots%20+%20%5Cfrac%7B1%7D%7Bj!%7D%20%5Cmathbf%7BK%7D%5Ej%20+%20%5Cldots%20%5C%5C%0A&amp;=&amp;%20%5Csum_%7Bj%20=%200%7D%5E%5Cinfty%20%5Cfrac%7B1%7D%7Bj!%7D%20%5Cmathbf%7BK%7D%5Ej%0A%5Cend%7Barray%7D%0A"></p>
<p>Some handy properties for matrix exponentials, most of which we’ll need:</p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is a matrix of zeros, <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D%20=%201"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is the identity <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BI%7D">, <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cmathbf%7BK%7D%7D%20=%20e%5E%7B%5Cmathbf%7BI%7D%7D%20=%20%5Cmathbf%7BI%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?t"> is a scalar, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20e%5Et%20e%5E%5Cmathbf%7BK%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?m"> and <img src="https://latex.codecogs.com/png.latex?n"> are scalars, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bm%5Cmathbf%7BK%7D%7D%20e%5E%7Bn%20%5Cmathbf%7BK%7D%7D%20=%20e%5E%7B(m%20+%20n)%5Cmathbf%7BK%7D%7D"></li>
<li>If <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BD%7D%20=%20%5Cmbox%7Bdiag%7D(d_1,%20d_2,%20%5Cldots)"> is a diagonal matrix, <img src="https://latex.codecogs.com/png.latex?e%5E%5Cmathbf%7BD%7D"> is the diagonal matrix <img src="https://latex.codecogs.com/png.latex?e%5E%5Cmathbf%7BD%7D%20=%20%5Cmbox%7Bdiag%7D(e%5E%7Bd_1%7D,%20e%5E%7Bd_2%7D,%20%5Cldots)"></li>
<li>The derivative is analogous to the scalar case, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bd%7D%7Bdt%7D%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BK%7D%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D"></li>
<li>For an invertible matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BH%7D"> such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BHMH%5E%7B-1%7D%7D">, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BH%7D%20e%5E%7Bt%20%5Cmathbf%7BM%7D%7D%20%5Cmathbf%7BH%5E%7B-1%7D%7D"></li>
</ul>
<p>On the basis of the derivative property above, it’s immediately clear that the solution to our ODE system is going to take the following form:<sup>7</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_t%20=%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5Cmathbf%7Bx%7D_0%0A"></p>
<p>Seeing that this is the form of the solution is the easy part. The hard part, of course, is finding the expression that describes the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D">. Fortunately, this is something that cleverer people than I have already thought about, and in any case the properties of matrix exponentials suggest a general strategy for such problems:</p>
<ol type="1">
<li>Find the eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda_1,%20%5Clambda_2,%20%5Cldots">, for the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"></li>
<li>Find the corresponding eigenvectors <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bu%7D_1,%20%5Cmathbf%7Bu%7D_2,%20%5Cldots"></li>
<li>Construct the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%20=%20%5B%5Cmathbf%7Bu%7D_1,%20%5Cmathbf%7Bu%7D_2,%20%5Cldots%5D"> with the eigenvectors as columns, and diagonal matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> whose diagonals correspond to eigenvalues, and invert it to obtain <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D"></li>
<li>Noting that we have the eigendecomposition <img src="https://latex.codecogs.com/png.latex?K%20=%20%5Cmathbf%7BU%20%5CLambda%20U%5E%7B-1%7D%7D">, rewrite <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D%20=%20%5Cmathbf%7BU%7D%20e%5E%7Bt%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%5E%7B-1%7D%7D"></li>
<li>Since <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> is diagonal, <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7B%5CLambda%7D%7D"> is straightforward, and we can calculate <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%5Cmathbf%7BK%7D%7D"> by matrix multiplication</li>
</ol>
<p>Okay then. Much like the Cylons, we have a Plan.<sup>8</sup></p>
</section>
<section id="solve-a-simpler-problem" class="level2">
<h2 class="anchored" data-anchor-id="solve-a-simpler-problem">Solve a simpler problem</h2>
<p>As Jane Austen famously said, “it is a truth universally acknowledged, that a woman in possession of a three-state ODE system must be in want of a two-state ODE that is easier to solve”. And so it is here. Rather than try to work with the model as described, I’ll start with a simpler model (one that is itself quite useful) that will be easier to solve, and whose solution will make it massively easier to solve the full system. And so it is that our first step will be to retreat from a two-compartment model with oral dosing to a two-compartment model with bolus IV dosing.</p>
<p>In most cases I’ve come across in my pharmacometric work so far, the drug we’re modelling is orally administered, and the model with first-order absorption into the central compartment described above (or some variation thereof) is the one we want to use. However, it’s convenient to start with a simpler case where the drug is administered by a bolus IV dose, and of course this scenario does arise in real life. In this scenario there is no depot compartment, and entire dose appears in the central compartment at <img src="https://latex.codecogs.com/png.latex?t%20=%200">. Or, to frame it in technical terms, we have zero-order absorption into the central compartment rather than first-order absorption. Again assuming first-order elimination, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D"> is now a simpler 2x2 matrix.<sup>9</sup> In this situation our state vector consists only of the central and peripheral compartments:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D(t)%20=%20%5Cmathbf%7Bx%7D_t%20=%20(x_%7B1t%7D,%20x_%7B2t%7D)%0A"></p>
<p>Our state transition matrix is now this:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BK%7D%20=%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>and our initial state at time <img src="https://latex.codecogs.com/png.latex?t=0"> is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_%7B0%7D%20=%20(%5Cmbox%7Bdose%7D,%200)%0A"></p>
<p>As before, our solution will be of the form</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7Bx%7D_t%20=%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5Cmathbf%7Bx%7D_0%0A"></p>
<p>and we can find this solution by following the general strategy outlined earlier. To that end, I’ll begin by finding the <a href="https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors">eigenvalues</a> <img src="https://latex.codecogs.com/png.latex?%5Clambda"> that satisfy <img src="https://latex.codecogs.com/png.latex?%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20=%200">. Well, technically speaking, I’ll begin by taking a little trip down memory lane to 1994 and my first-year undergraduate maths classes, but I’ll spare you that traumatic recollection and jump straight to the derivation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%0A&amp;=&amp;%20%5Cdet%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20-%20%5Clambda%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;=&amp;%20(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)(-k_%7B21%7D%20-%20%5Clambda)%20-%20k_%7B12%7D%20k_%7B21%7D%20%5C%5C%0A&amp;=&amp;%20%5Clambda%5E2%20+%20(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%20%5Clambda%20+%20k_%7B10%7D%20k_%7B21%7D%0A%5Cend%7Barray%7D%0A"> The final expression doesn’t factorise into anything very pretty, so it’s conventional to simply define new variables <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> such that:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Calpha%20%5Cbeta%20&amp;%20=%20&amp;%20k_%7B10%7D%20k_%7B21%7D%20%5C%5C%0A%5Calpha%20+%20%5Cbeta%20&amp;%20=%20&amp;%20k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>when written in these new variables, which were constructed <em>specifically</em> to make an expression that factorises easily, the left hand side of our characteristic equation turns out to be shockingly simple to factorise:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdet(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20=%20%5Clambda%5E2%20+%20(%5Calpha%20+%20%5Cbeta)%20%5Clambda%20+%20%5Calpha%20%5Cbeta%20=%20(%5Clambda%20+%20%5Calpha)(%5Clambda%20+%20%5Cbeta)%0A"></p>
<p>Wonders will never cease. In any case, when written in these terms, our two eigenvalues are <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Cbeta">. This is – of course – a pure notational convenience since <img src="https://latex.codecogs.com/png.latex?-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?-%5Cbeta"> were defined such that they would end up being the eigenvalues, but it’s worth mentioning this because these are the exact variables that show up in various software systems (e.g., <a href="https://www.iconplc.com/solutions/technologies/nonmem">NONMEM</a>) and textbooks. Nevertheless, it’s still no good to us if we don’t go through tedious business of applying the quadratic formula to express <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> in terms of <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">. So here it is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Calpha,%20%5Cbeta%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B(%5Calpha%20+%20%5Cbeta)%20%5Cpm%20%5Csqrt%7B(%5Calpha%20+%20%5Cbeta)%5E2%20-%204%5Calpha%20%5Cbeta%7D%7D%7B2%7D%20%5C%5C%0A&amp;=&amp;%20%5Cdisplaystyle%5Cfrac%7B(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%20%5Cpm%20%5Csqrt%7B(k_%7B10%7D%20+%20k_%7B12%7D%20+%20k_%7B21%7D)%5E2%20-%204k_%7B10%7D%20k_%7B21%7D%7D%7D%7B2%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>Now that we have the eigenvalues, we proceed to the eigenvectors. For each eigenvalue <img src="https://latex.codecogs.com/png.latex?%5Clambda"> there is a corresponding eigenvector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bu%7D"> such that <img src="https://latex.codecogs.com/png.latex?(%5Cmathbf%7BK%7D%20-%20%5Clambda%20%5Cmathbf%7BI%7D)%20%5Cmathbf%7Bu%7D%20=%20%5Cmathbf%7B0%7D">. In our case:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda%20%20&amp;%20%20k_%7B21%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20k_%7B12%7D%20%20&amp;%20-k_%7B21%7D%20-%20%5Clambda%20%5C%5C%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bc%7D%0Au_1%20%5C%5C%0Au_2%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A=%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bc%7D%0A0%20%5C%5C%0A0%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>If this were a bigger matrix we’d probably use <a href="https://en.wikipedia.org/wiki/Gaussian_elimination">Gauss-Jordan elimination</a> to construct the row-reduced echelon form (RREF) and then read off the solutions using the RREF. That’s kind of overkill in this case because – let’s be brutally honest here – you can <em>look</em> at the bottom row and guess that the solution is going to have the form <img src="https://latex.codecogs.com/png.latex?u_1%20=%20k_%7B21%7D%20+%20%5Clambda">, <img src="https://latex.codecogs.com/png.latex?u_2%20=%20k_%7B12%7D">.</p>
<p>To convince ourselves that this is the correct solution, we’ll substitute it into both rows and see that, shockingly, we end up with zero. We’ll start with the bottom row because that was the one we used to guess the solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ak_%7B12%7D%20u_1%20+%20(-k_%7B21%7D%20-%20%5Clambda)%20u_2%0A&amp;=&amp;%20k_%7B12%7D%20(k_%7B21%7D%20+%20%5Clambda)%20+%20(-k_%7B21%7D%20-%20%5Clambda)%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%200%0A%5Cend%7Barray%7D%0A"></p>
<p>I mean. Of course that was going to work. We literally chose expressions for <img src="https://latex.codecogs.com/png.latex?u_1"> and <img src="https://latex.codecogs.com/png.latex?u_2"> that would cause the two terms to cancel out. The actual test of our guess arrives when we try the same thing with the top row. This time it’s takes a little more effort:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)%20u_1%20+%20k_%7B21%7D%20u_2%0A&amp;=&amp;%20(-k_%7B12%7D%20-%20k_%7B10%7D%20-%20%5Clambda)%20(k_%7B21%7D%20+%20%5Clambda)%20+%20k_%7B21%7D%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%20-k_%7B12%7D%20k_%7B21%7D%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20%5Clambda%20k_%7B21%7D%20-%20k_%7B12%7D%20%5Clambda%20-%20k_%7B10%7D%20%5Clambda%20-%20%5Clambda%5E2%20+%20k_%7B21%7D%20k_%7B12%7D%20%5C%5C%0A&amp;=&amp;%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20%5Clambda%20k_%7B21%7D%20-%20k_%7B12%7D%20%5Clambda%20-%20k_%7B10%7D%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20k_%7B10%7D%20k_%7B21%7D%20-%20(k_%7B21%7D%20+%20k_%7B12%7D%20+%20k_%7B10%7D)%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20%5Calpha%20%5Cbeta%20-%20(%5Calpha%20+%20%5Cbeta)%20%5Clambda%20-%20%5Clambda%5E2%20%5C%5C%0A&amp;=&amp;%20-%20(%5Clambda%20+%20%5Calpha)%20(%5Clambda%20+%20%5Cbeta)%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>Once we have arrived at this expression, it’s clear that our guess is correct. The only two values that <img src="https://latex.codecogs.com/png.latex?%5Clambda"> can take are the eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda%20=%20-%5Cbeta">, and both of those yield a value of zero. So our guess was indeed correct and we have our eigenvectors. Awesome.<sup>10</sup></p>
<p>Now that we are in possession of eigenvalues and eigenvectors we can construct the matrices <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> that will give us the <a href="https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix">eigendecomposition</a> <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BU%20%5CLambda%20U%7D%5E%7B-1%7D">. Here they are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7B%5CLambda%7D%20&amp;=&amp;%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A-%5Calpha%20&amp;%200%20%5C%5C%0A0%20&amp;%20-%5Cbeta%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A%5Cmathbf%7BU%7D%20&amp;=&amp;%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ak_%7B21%7D%20-%5Calpha%20&amp;%20k_%7B21%7D%20-%20%5Cbeta%20%5C%5C%0Ak_%7B12%7D%20&amp;%20k_%7B12%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>The last thing we need is the inverse <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D">, which is also fairly easy to derive. It’s a 2x2 matrix, after all, and inverting a 2x2 matrix isn’t even undergrad level maths: they taught us that one in high school. Noting first that determinant <img src="https://latex.codecogs.com/png.latex?%5Cdet%20%5Cmathbf%7BU%7D"> is as follows,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdet%20%5Cmathbf%7BU%7D%20=%20(k_%7B21%7D%20-%20%5Calpha)%20k_%7B12%7D%20-%20k_%7B12%7D%20(k_%7B21%7D%20-%20%5Cbeta)%20=%20k_%7B12%7D%20(%5Cbeta%20-%20%5Calpha)%0A"></p>
<p>we then write down the inverse as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BU%7D%5E%7B-1%7D%20=%0A%5Cfrac%7B1%7D%7Bk_%7B12%7D(%5Cbeta%20-%20%5Calpha)%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ak_%7B12%7D%20&amp;%20%5Cbeta%20-%20k_%7B21%7D%20%5C%5C%0A-k_%7B12%7D%20&amp;%20k_%7B21%7D%20-%5Calpha%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A"></p>
<p>So now we have <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D">, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D">, and we could proceed straight to doing the matrix multiplication but for the sake of what is left of my sanity I’m going to simplify my notation a bit and define two new constants <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Aa%20&amp;%20=%20&amp;%20(k_%7B21%7D%20-%20%5Calpha)%20/%20k_%7B12%7D%20%5C%5C%0Ab%20&amp;%20=%20&amp;%20(k_%7B21%7D%20-%20%5Cbeta)%20/%20k_%7B12%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>With the help of these two constant, the expressions for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D"> are now considerably less unpleasant on the eye:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7BU%7D%20&amp;=&amp;%0Ak_%7B12%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20&amp;%20b%20%5C%5C%0A1%20&amp;%201%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A%5Cmathbf%7BU%7D%5E%7B-1%7D%20&amp;=&amp;%0A%5Cdisplaystyle%5Cfrac%7B1%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>Now that we have the eigendecomposition <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D%20=%20%5Cmathbf%7BU%20%5CLambda%20U%7D%5E%7B-1%7D">, we can solve our matrix exponential. Using the last of the matrix exponential properties in the potted list I provided earlier in the pose, we can express the matrix exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%20%5Cmathbf%7BK%7D%7D"> as the matrix product <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%20e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%7D%5E%7B-1%7D">. Conveniently, <img src="https://latex.codecogs.com/png.latex?%5CLambda"> is a diagonal matrix which makes <img src="https://latex.codecogs.com/png.latex?e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D"> trivially easy, and so we obtain this:<sup>11</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ae%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20&amp;%20=%20&amp;%0A%5Cmathbf%7BU%7D%20e%5E%7Bt%20%5Cmathbf%7B%5CLambda%7D%7D%20%5Cmathbf%7BU%7D%5E%7B-1%7D%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20&amp;%20b%20%5C%5C%0A1%20&amp;%201%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Ae%5E%7B-%5Calpha%20t%7D%20&amp;%200%20%5C%5C%0A0%20&amp;%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20e%5E%7B-%5Calpha%20t%7D%20&amp;%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5C%5C%0Ae%5E%7B-%5Calpha%20t%7D%20&amp;%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A1%20&amp;%20-b%20%5C%5C%0A-1%20&amp;%20a%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;=&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A(a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20-ab%20(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20%5C%5C%0A-(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20(-b%20e%5E%7B-%5Calpha%20t%7D%20+%20a%20e%5E%7B-%5Cbeta%20t%7D)%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"></p>
<p>So now we can turn to our solution:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmathbf%7Bx%7D_t%20&amp;%20=%20&amp;%20e%5E%7Bt%20%5Cmathbf%7BK%7D%7D%20%5C%20%5Cmathbf%7Bx%7D_0%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A(a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20-ab%20(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20%5C%5C%0A-(e%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D)%20&amp;%20(-b%20e%5E%7B-%5Calpha%20t%7D%20+%20a%20e%5E%7B-%5Cbeta%20t%7D)%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0A%5Cmbox%7Bdose%7D%20%5C%5C%0A0%0A%5Cend%7Barray%7D%0A%5Cright%5D%20%5C%5C%0A&amp;%20=%20&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Cleft%5B%0A%5Cbegin%7Barray%7D%7Bcc%7D%0Aa%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5C%5C%0Ae%5E%7B-%5Calpha%20t%7D%20-%20e%5E%7B-%5Cbeta%20t%7D%0A%5Cend%7Barray%7D%0A%5Cright%5D%0A%5Cend%7Barray%7D%0A"> Recalling that the central compartment corresponds to the first element of the state vector (top row), we can focus on this and compute the drug amount (not concentration) in the central compartment at time <img src="https://latex.codecogs.com/png.latex?t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ax_%7B1t%7D%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Ctimes%20%5Cleft(%20%20a%20e%5E%7B-%5Calpha%20t%7D%20-%20b%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cdisplaystyle%5Cfrac%7Bk_%7B12%7D%7D%7B%5Cbeta%20-%20%5Calpha%7D%20%5Ctimes%20%5Cleft(%20%5Cleft(%5Cfrac%7Bk_%7B21%7D%20-%20%5Calpha%7D%7Bk_%7B12%7D%7D%20%5Cright)%20%20e%5E%7B-%5Calpha%20t%7D%20-%20%5Cleft(%5Cfrac%7Bk_%7B21%7D%20-%20%5Cbeta%7D%7Bk_%7B12%7D%7D%20%5Cright)%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cleft(%20%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5Calpha%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5Cright)%20e%5E%7B-%5Calpha%20t%7D%20-%20%5Cleft(%5Cdisplaystyle%5Cfrac%7B%5Cbeta%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5Cright)%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%20%5C%5C%0A&amp;=&amp;%0A%5Cmbox%7Bdose%7D%20%5Ctimes%20%5Cleft(A%20e%5E%7B-%5Calpha%20t%7D%20+%20%20B%20e%5E%7B-%5Cbeta%20t%7D%20%5Cright)%0A%5Cend%7Barray%7D%0A"></p>
<p>and thus we have a model that can be expressed as a sum of two exponentials where:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0AA%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Calpha%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%20%5C%5C%20%5C%5C%0AB%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7B%5Cbeta%20-%20k_%7B21%7D%7D%7B%5Calpha%20-%20%5Cbeta%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>If I’m being completely honest, it’s precisely this biexponential<sup>12</sup> form that motivated me to suck it up and derive the solution myself. One of the textbooks I was reading at work – in order to familiarise myself with some of the pharmacokinetic background that I need – introduced the two-compartment model by defining it formally in terms of this biexponential expression,<sup>13</sup> but then drew this model schematically using a state-transition diagram similar to the ones I used at the start of this post. I was <em>baffled</em>, because it was not at all obvious to me from inspection how the diagram and the equation were linked, and the book did not present a derivation.</p>
<p>So yes, as with most things I do on this blog, my true motivation was in fact pig-headed stubbornness. I’m terribly bad at taking certain things on faith, and felt a deep – and let’s be honest, pathological – need to derive the solution myself. It is the very essence of spite-driven mathematics.</p>
</section>
<section id="returning-to-the-original-problem" class="level2">
<h2 class="anchored" data-anchor-id="returning-to-the-original-problem">Returning to the original problem</h2>
<p>Now that we have a closed form solution for a two-compartment model with zero-order absorption into the central compartment (i.e., bolus IV dosing), we can return to the oral dosing model (assuming first-order absorption) that we started with. It’s a relatively straightforward solution at this point since we have a continuous influx from the gut, so we can convolve this time-dependent influx with the zero-order solution. Since I’m assuming bioavailability <img src="https://latex.codecogs.com/png.latex?F%20=%201"> for this post<sup>14</sup> I’ll happily act as if the drug amount arriving in the central compartment from the gut at time <img src="https://latex.codecogs.com/png.latex?t"> is the same as the amount that left the gut at time <img src="https://latex.codecogs.com/png.latex?t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A-%5Cfrac%7Bd%7D%7Bdt%7D%20x_%7B0t%7D%20=%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20e%5E%7B-k_%7B01%7D%20t%7D%0A"></p>
<p>Thus the drug amount in the central compartment at time <img src="https://latex.codecogs.com/png.latex?t"> is given:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ax_%7B1t%7D%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cdisplaystyle%5Cint_0%5Et%20e%5E%7B-k_%7B01%7D%20u%7D%20%5Cleft(%20A%20e%5E%7B-%5Calpha%20(t-u)%7D%20+%20B%20e%5E%7B-%5Cbeta%20(t-u)%7D%20%5Cright)%20%5C%20du%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cdisplaystyle%5Cint_0%5Et%20A%20e%5E%7B-%5Calpha%20(t-u)%20-k_%7B01%7D%20u%7D%20+%20B%20e%5E%7B-%5Cbeta%20(t-u)%20-k_%7B01%7D%20u%7D%20%20%5C%20du%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cleft(%20Ae%5E%7B-%5Calpha%20t%7D%20%5Cleft%5B%20%5Cfrac%7B1%7D%7B%5Calpha%20-%20k_%7B01%7D%7D%20e%5E%7B(%5Calpha%20-%20k_%7B01%7D)u%7D%20%5Cright%5D_0%5Et%20+%20Be%5E%7B-%5Cbeta%20t%7D%20%5Cleft%5B%20%5Cfrac%7B1%7D%7B%5Cbeta%20-%20k_%7B01%7D%7D%20e%5E%7B(%5Cbeta%20-%20k_%7B01%7D)u%7D%20%5Cright%5D_0%5Et%20%20%20%5Cright)%20%5C%5C%0A&amp;=&amp;%20%5Cmbox%7Bdose%7D%20%5Ctimes%20k_%7B01%7D%20%5Ctimes%20%5Cleft(%20%5Cdisplaystyle%5Cfrac%7BAe%5E%7B-%5Calpha%20t%7D%20(e%5E%7B(%5Calpha%20-%20k_%7B01%7D)t%7D%20-%201)%7D%7B%5Calpha%20-%20k_%7B01%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BBe%5E%7B-%5Cbeta%20t%7D%20(e%5E%7B(%5Cbeta%20-%20k_%7B01%7D)t%7D%20-%201)%7D%7B%5Cbeta%20-%20k_%7B01%7D%7D%20%20%20%5Cright)%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>And just like that we have a solution.</p>
</section>
<section id="does-it-work" class="level2">
<h2 class="anchored" data-anchor-id="does-it-work">Does it work?</h2>
<p>I’m not so arrogant as to simply assume I got it right. It’s reassuring that all the expressions that came out along the way bear a striking resemblance to those I’ve seen in the textbooks, but I still want to compare to a numerical method that I trust. In an earlier post I talked about <a href="../../posts/2023-08-28_rxode2/">using the rxode2 package to simulate from pharmacokinetic models</a>, and while I could certainly use some other tool for this purpose (e.g., the deSolve package would be totally fine here) I might as well use rxode2 here as well. Here’s an R function that solves the problem numerically:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">numeric_solution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(k01, k12, k21, k10, time) {</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rxode2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxode</span>({</span>
<span id="cb1-4">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A0) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A0;</span>
<span id="cb1-5">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A0 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k10) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k21 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A2;</span>
<span id="cb1-6">    d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(A2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A2;</span>
<span id="cb1-7">  })</span>
<span id="cb1-8">  inits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A0 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-9">  </span>
<span id="cb1-10">  ev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rxode2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eventTable</span>()</span>
<span id="cb1-11">  ev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add.sampling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time)</span>
<span id="cb1-12">  pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k01 =</span> k01, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k12 =</span> k12, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k21 =</span> k21, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k10 =</span> k10)</span>
<span id="cb1-13">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(pars, ev, inits)</span>
<span id="cb1-14">  dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(dat)</span>
<span id="cb1-15">  </span>
<span id="cb1-16">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time, </span>
<span id="cb1-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>A1, </span>
<span id="cb1-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solution =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span></span>
<span id="cb1-20">  )</span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(out)</span>
<span id="cb1-22">}</span></code></pre></div>
</div>
<p>Here’s the corresponding function implementing the analytic solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">analytic_solution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(k01, k12, k21, k10, time) {</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  ks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k12 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k21</span>
<span id="cb2-4">  alpha <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (ks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(ks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k21))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-5">  beta  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (ks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(ks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k10 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k21))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-6">  </span>
<span id="cb2-7">  A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta)</span>
<span id="cb2-8">  B <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(beta <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k21) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> beta) </span>
<span id="cb2-9">  </span>
<span id="cb2-10">  A_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb2-11">  B_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> B <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb2-12"></span>
<span id="cb2-13">  A_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (alpha <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)  </span>
<span id="cb2-14">  B_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> B_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> k01 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (beta  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> k01)</span>
<span id="cb2-15">  </span>
<span id="cb2-16">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time, </span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> A_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B_term, </span>
<span id="cb2-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">solution =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analytic"</span></span>
<span id="cb2-20">  )</span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(out)</span>
<span id="cb2-22">}</span></code></pre></div>
</div>
<p>Now let’s compare the two:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">k01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-2">k12 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-3">k21 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-4">k10 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-5">time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">dat_numb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb3-8">dat_anal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analytic_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb3-9">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(dat_numb, dat_anal)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(dat, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, amount, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> solution)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>solution) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Looks good to me? The differences between the two are small enough that we can attribute them to simulation precision etc…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(dat_numb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dat_anal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.920889e-08</code></pre>
</div>
</div>
<p>…and yes, you get similar agreement between the two versions<sup>15</sup> if you feed in other parameter values. That’s good enough for me.</p>
</section>
<section id="was-it-worth-it" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="was-it-worth-it">Was it worth it?</h2>
<p>And so we come to the end. The problem is solved, Danielle has convinced herself that she understands the formalism properly, and a great many pieces of scrap paper were sacrificed to the dark gods of mathematics in the process. Was it all worthwhile? I mean… in one sense, probably not. The analytic solutions I’ve derived here are <em>highly</em> unoriginal, and of course they have already been implemented and incorporated into standard tools used in pharmacometric modelling. Nothing new has been added to the world by me doing this. But also, it’s worth highlighting that it was a <em>very</em> good thing that these solutions exist thanks to the hard work of those that have come before us,<sup>16</sup> because they do make a massive difference in terms of computational performance:</p>
<div class="cell column-page-right">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">microbenchmark<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric_solution</span>(k01, k12, k21, k10, time),</span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analytic_solution</span>(k01, k12, k21, k10, time)</span>
<span id="cb6-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: microseconds
                                        expr       min         lq       mean     median         uq      max neval
  numeric_solution(k01, k12, k21, k10, time) 39558.780 45899.2650 51754.4014 49391.4505 55292.3945 92581.17   100
 analytic_solution(k01, k12, k21, k10, time)   137.652   170.0235   314.0824   237.3915   313.8525  5412.48   100</code></pre>
</div>
</div>
<p>The units here are microseconds, so yeah okay they’re both fast. They’re both fast enough that I have no reason at all to care when running a small simulation: <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta%E2%80%93Fehlberg_method">RK45</a> and <a href="https://en.wikipedia.org/wiki/Backward_differentiation_formula">BDF</a> exist for a <em>reason</em>, and as Dan Simpson reminded me the other day, generations of numerical analysts have suffered so that I don’t have to.</p>
<p>However, a speedup of a this magnitude makes a very big difference in the context of model fitting. Even my lazy R implementation of the analytic solution is hundreds of times faster than the very efficient numerical solution implemented by rxode2, and of course the speed up would be even more extreme if I could be bothered writing it in a compiled language like C++ or Rust or whatever. But of course I have no need to do that because that’s already been done in software. All I really care about for this post is deriving the solution and verifying that it works.</p>
<p>I’ve suffered enough.</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>Open access resources:</p>
<ul>
<li>Alex Best has an open textbook <em>Introducing Mathematical Biology</em>, and chapter 20 derives the <a href="https://sheffield.pressbooks.pub/introducingmathematicalbiology/chapter/a-two-compartment-bolus-model/">solution for the two-compartment bolus IV model</a>. It doesn’t go into quite as much detail as I do in this post (it spares the reader from the pain of matrix exponentials, for example) but I found it very helpful.</li>
<li>Jiří Lebl and Trefor Bazett have an open resouce <em>Introduction to Differential Equations</em> whose section on <a href="https://web.uvic.ca/~tbazett/diffyqs/sec_matexp.html">matrix exponentials</a> I found useful when trying to “refresh my memory” (i.e., learn something that I kind of ignored 30 years ago when it came up in my undergrad maths classes). Relatedly, the list of properties for matrix exponentials is mostly sourced from the wikipedia page on <a href="https://en.wikipedia.org/wiki/Matrix_exponential">matrix exponentials</a>.</li>
</ul>
<p>Other resources:</p>
<ul>
<li>It’s not open access, and it doesn’t dive into the derivations, but one of the books I’ve been reading at work is <a href="https://www.routledge.com/Pharmacokinetic-and-Pharmacodynamic-Data-Analysis-Concepts-and-Applications/Gabrielsson-Weiner/p/book/9789198299106">Pharmacokinetic and Pharmacodynamic Data Analysis (5th ed)</a> by Johan Gabrielsson and Daniel Weiner: chapter 2 presents the bi-exponential model using the “macro” parameters (<img src="https://latex.codecogs.com/png.latex?A">, <img src="https://latex.codecogs.com/png.latex?B">, <img src="https://latex.codecogs.com/png.latex?%5Calpha">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta">) and the formulas for converting to the “micro” parameters (the fractional rate constants <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D">), along with the more general scientific considerations around the model.</li>
<li>The other book I’m reading at work is <a href="https://onlinelibrary.wiley.com/doi/book/10.1002/9781118784860">Introduction to Population Pharmacokinetic / Pharmacodynamic Analysis with Nonlinear Mixed Effects Models</a> by Joel S. Owen and Jill Fiedler-Kelly. It provides a good coverage of compartmental models in the context of the NONMEM software package, and is somewhat relevant insofar as the different parameterisations (i.e., TRANS subroutines<sup>17</sup>) for the ADVAN3 and ADVAN4 subroutines appear in this post (and make more sense to me now that I’ve derived the solutions).</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>If she were to only write posts when she thought someone cared or when it would somehow improve the state of world affairs, she’d never write anything at all. No, she writes blog posts for the same reason twinks make sex tapes in senate hearing rooms: for the pure and unsullied chaos of the thing itself.↩︎</p></li>
<li id="fn2"><p>This is of course not quite true: for simplicity I’m not considering <a href="https://en.wikipedia.org/wiki/Bioavailability">bioavailability</a> in this post, nor am I considering lag time. I’m certainly not considering transit compartments and the like. The focus of the post is about the ODE system used to model what happens to the drug once it arrives in systemic circulation.↩︎</p></li>
<li id="fn3"><p>By convention we also don’t count the “depot” compartment (usually the gut) as one of the compartments: although the state <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_t"> is a vector of length 3, only two of the compartments (central and peripheral) are used to model the disposition (a term of art referring to both “distribution” and “elimination”) of the drug, so this is a two-compartment model.↩︎</p></li>
<li id="fn4"><p>Yes, I do realise that there are 4 rate constants and 5 physiological parameters. In the rate-constants version there would also be a fifth parameter: when fitting models we need a volumetric scaling parameter to convert between drug amount and drug concentration in the central compartment (where the concentration is typically measured), and as such we would include <img src="https://latex.codecogs.com/png.latex?V_c"> as a parameter in the rate-constant version too. I’ve omitted that in this post for the same reason I have ignored the bioavailability <img src="https://latex.codecogs.com/png.latex?F"> and the lag time to absorption: none of these parameters are super-relevant to solving the ODE. <img src="https://latex.codecogs.com/png.latex?V_c"> and <img src="https://latex.codecogs.com/png.latex?F"> are both scaling factors that multiply various terms by a constant factor, the lag-time is a shift parameter applied to <img src="https://latex.codecogs.com/png.latex?t">. None of them affect the general form of the solution, which is the thing I care about for the purposes of the post.↩︎</p></li>
<li id="fn5"><p>For example, to obtain the rate constants from the physiological parameters, we use <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D%20=%20Cl%20/%20V_c">, <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D%20=%20k_a">, <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D%20=%20Q/V_c">, and <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D%20=%20Q/V_p">. It’s pretty similar going the other way.↩︎</p></li>
<li id="fn6"><p>In the Gabrielsson and Weiner textbook I’m reading at work, the parameterisation in terms of the fractional rate constants <img src="https://latex.codecogs.com/png.latex?k_%7B01%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B10%7D">, <img src="https://latex.codecogs.com/png.latex?k_%7B21%7D"> and <img src="https://latex.codecogs.com/png.latex?k_%7B12%7D"> is referred to as the “micro-” parameterisation, taking its name from the fact that the parameters describe the low-level operation of the ODE. This is in contrast to the “physiological” parameterisation in terms of <img src="https://latex.codecogs.com/png.latex?Cl">, <img src="https://latex.codecogs.com/png.latex?Q">, <img src="https://latex.codecogs.com/png.latex?V_c">, <img src="https://latex.codecogs.com/png.latex?V_p"> and <img src="https://latex.codecogs.com/png.latex?k_a"> that attempts to ascribe biological interpretation to the quantities. There is also a third “macro-” parameterisation in terms of <img src="https://latex.codecogs.com/png.latex?%5Calpha">, <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, <img src="https://latex.codecogs.com/png.latex?A">, and <img src="https://latex.codecogs.com/png.latex?B"> in which the parameters correspond to the coefficients of the concentration-time curve. As we’ll see later in the post, something like the “macro-” parameterisation you see in the textbooks emerges more or less naturally from the solution to the ODE system. The version that shows up in this post isn’t 100% identical to the version in the textbook (it’s off by a scaling factor because I don’t bother to account for <img src="https://latex.codecogs.com/png.latex?V_c"> or to fold the dose into the coefficients <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">) but honestly nobody should care about this because the macro-scale parameterisation doesn’t have any scientific meaning. It’s just a convenient description of a biexponential curve that makes you sound fancy at very boring parties when you tell people that the exponents are eigenvalues of the ODE state transition matrix.↩︎</p></li>
<li id="fn7"><p>Yes, I know. If I were being rigorous here I’d be precise about how I ended up with this as the exact expression, but I am tired and this is neither a journal article nor a textbook.↩︎</p></li>
<li id="fn8"><p>As has been so often noted in the BSG fandom, the Cylons quite clearly did not have a Plan. The writers did not ever think of a coherent Plan, and badly tried to retcon a Plan onto the plot in the TV movie by the same name. As <a href="https://www.latimes.com/entertainment/tv/la-et-hc-battlestar-galactica-reunion-atx-fest-20170611-story.html">Mike Moore</a> later explained, it was just something that looked cool in the opening credits. Much the same could be said for me pretending I ever have a plan when trying to derive something: the Plan is the thing you make up after the fact after you accidentally end up with the answer.↩︎</p></li>
<li id="fn9"><p>Formally speaking, I suppose I ought to be using subscripts to distinguish the 3x3 oral-dosing matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D_%7Bo%7D"> from the 2x2 bolus IV dosing matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BK%7D_%7Biv%7D">, but I’ll refrain from doing so in this post because it’s always clear from context which one I’m referring to.↩︎</p></li>
<li id="fn10"><p>For extremely specific values of “awesome”.↩︎</p></li>
<li id="fn11"><p>No I do not know why those stray <code>$$</code> fences are showing up in the rendered document. The equations are as-intended, but those should not be included in the output. I kinda think I might have broken the parser with my extremely ugly latex, which is normally a thing I only expect to get told at kink parties↩︎</p></li>
<li id="fn12"><p>Where of course a biexponential is a model that is sexually attracted to two exponents.↩︎</p></li>
<li id="fn13"><p>Technically – <em>per</em>. <em>my</em>. <em>earlier</em>. <em>footnote</em> – the one in the book differed from this one by a multiplicative scale factor since it was expressed in terms of concentrations, but whatever. That’s not germane to the post.↩︎</p></li>
<li id="fn14"><p>I mean, multiplying everything by <img src="https://latex.codecogs.com/png.latex?F"> is not exactly difficult right? If you can follow the rest of this solution you absolutely know how to generalise it to other values of <img src="https://latex.codecogs.com/png.latex?F">. But okay, if you care deeply about the niceties I will be like Bart and <a href="https://knowyourmeme.com/memes/say-the-line-bart">say the line</a>: without loss of generality, I set <img src="https://latex.codecogs.com/png.latex?F=1"> in this post. I’m sure that makes everyone happier.↩︎</p></li>
<li id="fn15"><p>Yes those variable names were deliberate. Of <em>course</em> those variable names were deliberate, whose blog do you think you are reading girl? Now, let’s review our safety tips for numbing lubric…↩︎</p></li>
<li id="fn16"><p>She pauses, wondering if this is the right moment to link to her favourite Lily Allen song? <a href="https://www.youtube.com/watch?v=fUYaosyR4bE">Yes, it is</a>.↩︎</p></li>
<li id="fn17"><p>Technically speaking they only count as trans subroutines in the UK legal system if they have a fortran recognition certificate and a permission slip from a doctor that despises them.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Closed Form Solutions for a Two-Compartment Pharmacokinetic
    Model},
  date = {2023-12-19},
  url = {https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Closed Form Solutions for a
Two-Compartment Pharmacokinetic Model.”</span> December 19, 2023. <a href="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models">https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models</a>.
</div></div></section></div> ]]></description>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/</guid>
  <pubDate>Mon, 18 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-12-19_solving-two-compartment-pk-models/gayatri-malhotra-4wF66_KWJxA-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Another year ends</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Content note: This post refers briefly to sexual assault</p>
</div>
</div>
<p>At the end of last year I wrote a wrap-up post listing the things I’d done during 2022, (<a href="../../posts/2022-12-26_strange-year/">A Very Strange Year</a>), and perhaps I’ll do another one for 2023. Much like last time, I’ll break with my usual policy on this blog and be a little more open about my personal life. If you read last year’s post, you’d know that 2022 was a grim year for me. Among other things I got raped,<sup>1</sup> and – in the world’s least-surprising plot twist – that messed me up rather badly. Losing my job at the end of 2022 didn’t help matters either.</p>
<p>What I didn’t anticipate when I wrote that post is that I was going to be unemployed for the majority of 2023. That was unpleasant. What I also didn’t see coming, is that rape trauma and unemployment interact with each other rather badly. On the one hand you start to feel worthless to society because you can’t find work, and on the other hand you also feel worthless as a human being because that’s what sexual assault does to you. So then you find yourself losing motivation to be upbeat and outgoing in the job search (and the job search gets worse), and you spend days on end lying in bed trying to believe you’re not a worthless person (and the trauma gets worse). Not exactly a deep insight, I’ll confess. Nevertheless, despite the triteness of the observation, the consequences are still real. Before the unemployment started to cut deep, I’d been making genuine progress in recovery from the sexual assault stuff, but after being out of work for a few months I went backwards.</p>
<p>Coming back from all that has been rough, and trying to work on recovery has been the dominant feature of 2023. I found work in the middle of the year, and am enjoying my new role. It’s nice to feel useful again. I’ve been doing better with the sexual assault fallout over the last few months too. I rarely get flashbacks these days, and I don’t fall to pieces (not often, anyway) whenever there’s another sexual assault story in the news. That’s real progress, and I’m proud of myself for that. But it’s still hard, and my self-confidence is in tatters. I’m working at it, but I suspect it will be a long and slow journey.</p>
<p>Anyway. Enough of that. Life is hard sometimes, and there’s not much to do except acknowledge from time to time that, yes, bad things happen. Let’s move on to other topics, shall we?</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/pastiche.png" class="img-fluid" alt="Abstract geometric patterns in red and orange"></p>
<section id="data-science-tech-and-statistics" class="level2">
<h2 class="anchored" data-anchor-id="data-science-tech-and-statistics">Data science, tech, and statistics</h2>
<p>Not surprisingly given the focus on data science on this blog, I wrote a number posts about R packages and related topics in tech during 2023. Several of them were posts where I chose an R package that I wanted to play around with and wrote about it:</p>
<ul>
<li><a href="../../posts/2023-05-22_santoku/">The santoku package</a></li>
<li><a href="../../posts/2023-06-12_pins-and-needles/">The pins package</a></li>
<li><a href="../../posts/2023-06-14_ansi-tricks/">The asciicast package</a></li>
<li><a href="../../posts/2023-06-16_tabulizer/">The tabulizer package</a></li>
</ul>
<p>Others were built around a specific topic, though still very heavily focused on workflows in R:</p>
<ul>
<li><a href="../../posts/2023-04-09_webr/">Running R on the web with webR</a></li>
<li><a href="../../posts/2023-08-08_being-assertive/">Assertion checking in R</a></li>
</ul>
<p>Not all of my tech posts were about R though. Some are general purpose posts in which I taught myself new tools: learning about Docker and Kubernetes was fun, though in truth I’ve not had much opportunity to use either of these skills.<sup>2</sup> On the other hand, learning about Makefiles was super useful and I’ve found myself using them a lot.<sup>3</sup></p>
<ul>
<li><a href="../../posts/2023-01-01_playing-with-docker/">Playing with docker and the github container registry</a></li>
<li><a href="../../posts/2023-01-10_kubernetes/">Deploying R with kubernetes</a></li>
<li><a href="../../posts/2023-06-30_makefiles/">Makefiles. Or, the balrog and the submersible</a></li>
</ul>
<p>In a refreshing change for this blog – which has historically focused on code – I started writing a little more about statistical inference this year. Not as much as I’d have liked, and not as in-depth as I’d have liked either, but perhaps it will be the beginning of a trend for me. Two old statistics posts returned from the dead in 2023, both relics from my former life as an academic,<sup>4</sup> and a third post estimating the number of internally displaced trans people within the United States:</p>
<ul>
<li><a href="../../posts/2023-04-12_metropolis-hastings/">A gentle introduction to the Metropolis-Hastings algorithm</a></li>
<li><a href="../../posts/2023-04-12_bayes-factors/">A personal essay on Bayes factors</a></li>
<li><a href="../../posts/2023-06-15_dark-times/">On living in dark times</a></li>
</ul>
<p>Finally, I wrote a couple of other posts on other topics broadly related to data science and software. My new personal machine is (for reasons!) using Windows as the primary OS, with an Ubuntu installation (<a href="../../posts/2022-12-31_btw-i-use-arch/">no, not Arch</a>) running concurrently thanks to Windows Subsystem for Linux. I wrote about some of the practicalities of using a setup like this, and specifically about how to use the RStudio IDE and VS Code effectively if you’re using linux for your data science work but you want your IDE to run smoothly as a windows application:</p>
<ul>
<li><a href="../../posts/2023-07-02_the-ides-of-wsl/">RStudio and VS Code in WSL</a></li>
</ul>
<p>Oh, and I wrote a book review of Greg Wilson’s “Software design by example” in which I followed his guidance and wrote a regular expression tokeniser:</p>
<ul>
<li><a href="../../posts/2023-05-31_software-design-by-example/">Software design by example</a></li>
</ul>
<p>That one was fun, and I learned a lot.</p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/shattered.png" class="img-fluid" alt="A shattered landscape in a palette of grey and brown against an orange background"></p>
</section>
<section id="pharmacometrics" class="level2">
<h2 class="anchored" data-anchor-id="pharmacometrics">Pharmacometrics</h2>
<p>Around the middle of the year I managed to find work, which came as something of a relief. My new role is in <a href="https://en.wikipedia.org/wiki/Pharmacometrics">pharmacometrics</a>, and while the job is pretty intense – honestly, I’m working longer hours now than I did even as an academic – it’s been rewarding. There’s a lot of new and fascinating things to learn, and I do love being able to learn new things. That’s shown up in this blog quite a bit this year, with several posts discussing pharmacokinetic (PK) models generally and population-pharmacokinetic (pop-PK) models specifically:</p>
<ul>
<li><a href="../../posts/2023-04-26_non-compartmental-analysis/">Non-compartmental analysis</a></li>
<li><a href="../../posts/2023-05-16_stan-ode/">Simple PK models in Stan</a></li>
<li><a href="../../posts/2023-06-10_pop-pk-models/">Minimal pop-PK models in Stan</a></li>
<li><a href="../../posts/2023-07-15_torsten/">Getting started with pop-PK in Torsten</a></li>
<li><a href="../../posts/2023-08-14_mrgsolve/">Simulating from PK models with mrgsolve</a></li>
<li><a href="../../posts/2023-08-28_rxode2/">Simulating from PK models with rxode2</a></li>
</ul>
<p>There’s several other topics in this area I want to write, especially now that my knowledge of the field is considerably stronger than it was when I wrote these pieces.<sup>5</sup> It’s likely I’ll write more posts about pharmacometrics in 2024, but probably at a slower rate. That’s mostly because the nature of my employment is different these days: all my previous jobs before this one were in some sense public-facing roles, and writing blog posts about the substantive topic were part and parcel of the job itself. That’s not the case in my current role, so any writing I do is “off the books” so to speak, and only happens when I have spare time. Which is entirely okay, of course, but it’s hardly a surprise that it’s easier to find time to do a thing when it is central to your job than it is to do the same thing when it’s not actually part of the role!<sup>6</sup></p>
<p><img src="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/curled.png" class="img-fluid" alt="Swirling patterns in orange, purple and blue"></p>
</section>
<section id="art" class="level2">
<h2 class="anchored" data-anchor-id="art">Art</h2>
<p>On the art front, I changed course a bit in 2023. Early in the year I reluctantly concluded that there isn’t any point in trying to generate income from my art. I haven’t been taking commissions, I turned down a few opportunities to write books on generative art, and I haven’t been doing workshops the way I used to. There are a couple of reasons for that, but mostly they boil down to “return on investment”. It takes a lot of time, energy, and <em>work</em> to do the things that allow you to make money from art, and the bitter truth to it is that unless you’re one of the lucky few who “makes it big”, you really don’t make enough money from the art to justify the effort.<sup>7</sup> People love art. They don’t love paying for it. Nowadays I don’t even bother to try: I make art when I feel like making art, I write about art when I feel like writing about art, and that’s it.</p>
<p>That doesn’t mean I abandoned making art of course, or even writing about it. I wrote three blog posts on generative art this year, for example:</p>
<ul>
<li><a href="../../posts/2023-01-14_p5js/">Generative art with p5.js</a></li>
<li><a href="../../posts/2023-03-13_shattered-landscapes/">Making shattered landscapes in R</a></li>
<li><a href="../../posts/2023-03-31_generative-art-with-grid/">Generative art with grid</a></li>
</ul>
<p>I published seven art series on my art website, mostly created with R but also with javascript in some cases:</p>
<ul>
<li><a href="https://art.djnavarro.net/gallery/subdivision/">Subdivision</a></li>
<li><a href="https://art.djnavarro.net/gallery/broken-lands/">Broken lands</a></li>
<li><a href="https://art.djnavarro.net/gallery/bound/">Bound</a></li>
<li><a href="https://art.djnavarro.net/gallery/curled/">Curled</a></li>
<li><a href="https://art.djnavarro.net/gallery/splotches/">Splotches</a></li>
<li><a href="https://art.djnavarro.net/gallery/pastiche/">Pastiche</a></li>
<li><a href="https://art.djnavarro.net/gallery/advent/">Advent</a></li>
</ul>
<p>I even wrote a custom <a href="https://arttools.djnavarro.net/">arttools</a> R package that I use to help me manage my art workflows,<sup>8</sup> and gave an invited talk at the University of Auckland on generative art (<a href="https://djnavarro.net/slides-auckland-2023/">unpredictable paintings</a>). I’m grateful to the lovely folks at Auckland for the invitation, and it was really wonderful to give the talk to such a kind audience.</p>
<p>So yeah. I’m still making art and sharing it on mastodon, but mostly as a hobbyist these days. I’ve lost any real desire to be a professional artist, and that’s okay. Sometimes a hobby can be just a hobby. Not everything in life needs to be a side hustle.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I honestly don’t like talking about any of this, but I also don’t want to hide the fact that it happened, so I’m not going to shy away from it. But also please don’t be like the stranger who messaged me after my 2022 post to tell me I should carry a gun. That’s not a helpful thing for anyone to tell a rape survivor, and it’s an <em>especially</em> terrible thing to say to her when you’re a man she doesn’t know.↩︎</p></li>
<li id="fn2"><p>I mean, let’s face it: while there’s a strong case to be made that Docker is an important tool for a lot of scientists, Kubernetes is … not. I learned it because it’s occasionally relevant for deploying applications at scale, but that’s not at all relevant in my current role.↩︎</p></li>
<li id="fn3"><p>Yes yes, I know, there are many alternatives, and if I’m an R person I should probably get off my lazy arse and learn <a href="https://books.ropensci.org/targets/">targets</a> but life is short and I am tired okay?↩︎</p></li>
<li id="fn4"><p>Strangely, despite being out of academia for over two years now, <a href="https://papers.djnavarro.net">papers</a> from that life still continue to trickle out, and another six journal articles emerged in 2023 that have my name on them. Academia really makes it hard for you to draw a line in the sand, which… actually is not great when the reason you left is not a pleasant one. Sigh.↩︎</p></li>
<li id="fn5"><p>Gonna be honest: I now look at most of these pieces and smile. They’re good posts, really, but I can now spot a <em>lot</em> of things in each of them that reveal that the author didn’t have a lot of practical experience with PK modelling at the time. But that’s good – that’s what happens when you learn things!↩︎</p></li>
<li id="fn6"><p>This lack of time, incidentally, is also the reason why (despite Hadley’s very kind support and encouragement) I haven’t made much progress on the project to work on the 3rd edition of the ggplot2 book, and haven’t done much of the work on updating my “learning statistics with R” book this year either. I’m sad about both of those things, and hoping that somehow I’ll be able to find some time in the future.↩︎</p></li>
<li id="fn7"><p>And, yes, with the rise of tools like DALL-E and midjourney, the situation has gotten worse over the past year.↩︎</p></li>
<li id="fn8"><p>Note that it’s not a tool for making generative art, it’s a tool for managing art repos and organising output in a format that makes it easy for me to publish art to my website. It’s also not intended for general use. I wrote the package for myself. For anyone else it’s a “use at your own risk” kind of deal. You can use it if it’s useful for you, but I have no intention whatsoever of maintaining it for any purpose except my own use.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Another Year Ends},
  date = {2023-12-16},
  url = {https://blog.djnavarro.net/posts/2023-12-16_another-year-ends},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Another Year Ends.”</span> December 16,
2023. <a href="https://blog.djnavarro.net/posts/2023-12-16_another-year-ends">https://blog.djnavarro.net/posts/2023-12-16_another-year-ends</a>.
</div></div></section></div> ]]></description>
  <category>End of Year</category>
  <guid>https://blog.djnavarro.net/posts/2023-12-16_another-year-ends/</guid>
  <pubDate>Fri, 15 Dec 2023 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Pharmacometric simulation with rxode2</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-28_rxode2/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Hello, yes, this is another <a href="../../category/pharmacometrics">pharmacometrics</a> post. There have been quite a few of these lately as I try to bring myself up to speed on a new discipline. This one is about the <a href="https://nlmixr2.github.io/rxode2/">rxode2</a> package, a pharmacometric simulation tool and the successor to the widely-used <a href="https://nlmixrdevelopment.github.io/RxODE/">RxODE</a> package.<sup>1</sup> Although the original RxODE package is now archived on CRAN, the syntax for rxode2 is very similar, and as far as I can tell it’s fairly (fully?) backward-compatible with the older package.</p>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>As with other packages for pharmacometric simulation such as <a href="https://mrgsolve.org/">mrgsolve</a>, models defined with rxode2 need to be compiled before they are run, and so when you install the package you need the appropriate build tools. There are some implications to this. The package is on CRAN, so you can install it with:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rxode2"</span>)</span></code></pre></div>
<p>However, like most R packages that allow you to compile C/C++/Fortran/Rust/Your-Favourite-Language-Here code, it relies heavily on system dependencies that you may or may not have, and managing the build tools is an OS-specific thing. I’m running Ubuntu 22.04, and (for reasons that don’t bear mentioning) I recently did a “factory reset”<sup>2</sup> and did a fresh install of Ubuntu. So, yeah, I didn’t have everything I needed. Yes, I did have the <code>gcc</code> compiler installed, but that’s not the only system dependency you have to care about. In my case, I was missing <code>gfortran</code>, <code>libblas</code>, and <code>liblapack</code>. As a consequence, when I tried to run the example code on the package website, all I got was a long stream of error messages. In order to get started, I had to do this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install gfortran libblas-dev liblapack-dev liblapack-doc</span></code></pre></div>
<p>That worked for me, but I make no promises that it will work for you. Caveat emptor and all that.<sup>3</sup> But let’s not stand on installation formalities when there are simulations to run. It is time to load some packages and dive once more into the abyss…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rxode2)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(microbenchmark)</span></code></pre></div>
</div>
</section>
<section id="the-rxode2-mini-language" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-rxode2-mini-language">The rxode2 mini-language</h2>
<blockquote class="blockquote">
<p>I don’t understand <br> You claiming I’m a handful when you show up all empty-handed <br> The way you say you love me like you’ve just been reprimanded <br> ’Cause I know you like mind games <br> &nbsp; &nbsp; – <a href="https://www.youtube.com/watch?v=ZyKu6noOxR8">BANKS</a></p>
</blockquote>

<div class="no-row-height column-margin column-container"><div class="">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/mind-games.jpg" class="img-fluid"></p>
</div></div><p>The story begins with a little commentary on the slippery nature of R as a programming language. It’s not exactly news to many people at this point, but R is famous<sup>4</sup> for the extremely widespread use of <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a> as a tool for implementing domain-specific languages within R itself.<sup>5</sup> As a consequence of this, the same code can have different meaning when called in different contexts. It’s both a curse and a blessing: one the one hand it makes R very flexible in a way that is convenient for analysts, but on the other hand it can be a bit confusing to people from a more conventional programming background who don’t expect R to work this way.</p>
<p>The use of domain-specific languages in pharmacometric modelling is not uncommon: for instance, in my previous <a href="../../posts/2023-08-14_mrgsolve/">post about mrgsolve</a>, I talked about the mini-language used to specify models in that package. Not surprisingly, rxode2 has its own mini-language with it’s own <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html">custom syntax</a>. In mrgsolve, you can specify a model by writing the code for it in a separate file, or passing it as a string within R. You can do that with rxode2 too, but rxode2 also allows you to pass the model specification as a code block: a collection of statements enclosed in curly braces and treated as a single expression. Here’s an example of how that works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rxode2</span>({</span>
<span id="cb4-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial values for all four "compartments"</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">central</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">peripheral</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb4-7">  </span>
<span id="cb4-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drug concentrations</span></span>
<span id="cb4-9">  CP <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> central <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> VC;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># central compartment concentration</span></span>
<span id="cb4-10">  PP <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> peripheral <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> VP; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># peripheral compartment concentration</span></span>
<span id="cb4-11">  </span>
<span id="cb4-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># differential equations</span></span>
<span id="cb4-13">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(depot)       <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(KA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> depot);</span>
<span id="cb4-14">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(central)     <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  (KA <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> depot) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (CL <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP);</span>
<span id="cb4-15">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(peripheral)  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (Q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> PP);</span>
<span id="cb4-16">  d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dt</span>(auc)         <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>  CP;</span>
<span id="cb4-17">})</span></code></pre></div>
</div>
<p>If you don’t look at it too closely you might think this is regular R code, but… it isn’t. The code contained within the braces is captured by the <code>rxode2()</code> function, and then interpreted according to the rules of the mini-language. We’ll need to take a moment to unpack the mini-language itself, but that can wait.</p>
<p>Let’s start by looking at this as a pharmacometrician might. Notice that although this is a two-compartment model in pharmacometric terms, from the perspective of rxode2 there are four “compartments” that define the state of the system. In addition to the usual two compartments (<code>central</code> and <code>peripheral</code>), there is an extravascular <code>depot</code> compartment used to model drug intake. For instance, for an orally-administered drug the <code>depot</code> compartment would be the gut.<sup>6</sup> The <code>depot</code> compartment is “real” in the sense that it is loosely intended to correspond to something in the physical system that we’re modelling. By convention we don’t consider it to be one of the pharmacokinetic compartments, but it’s still a real thing. In contrast, the <code>auc</code> “compartment” has no physical analog at all. It’s included so that the model keeps track of the accumulated drug exposure.<sup>7</sup> As I’m quickly coming to learn, this is a very handy trick when running pharmacometric simulations.</p>
<p>Now that we’ve looked at it as an analyst, let’s look at it as a programmer. The syntax within the rxode2 model specification is not “real” R code. The statements enclosed within the curly braces look vaguely R-like, but if you tried to evaluate these expressions outside the context of the <code>rxode2()</code> function, you’d get errors. Thanks to the magic of non-standard evaluation in R, the <code>rxode2()</code> function is able capture the code before it is evaluated, and prevents R from evaluating it the way it normally would. Instead of following the regular rules of R, it follows the syntax provided by the rxode2 mini-language. This mini-language is similar to R in some ways:</p>
<ul>
<li>Assignment statements can use <code>=</code> or <code>&lt;-</code> as the assignment operator.<sup>8</sup></li>
<li>Comments are specified using the hash (<code>#</code>) character</li>
<li>Semi-colon characters (<code>;</code>) are optional, and specify the end of a line</li>
</ul>
<p>However, there are specialised statements used in the mini-language that don’t exist in regular R code. For example, there are two kinds of special statements I’ve used in this code:</p>
<ul>
<li>Time-derivative statements (i.e., the ones that have something like <code>d/dt(central)</code> on the left hand side) are used to specify the differential equations in the ODE system.</li>
<li>Initial-condition statements (i.e., the ones where I set something like <code>central(0)</code> on the left hand side) are used to specify the initial state of the ODE system.</li>
</ul>
<p>You can check the <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html">rxode2 syntax</a> page for more information about the mini-language and what other kinds of special statements exist.</p>
</section>
<section id="the-rxode2-model-object" class="level2">
<h2 class="anchored" data-anchor-id="the-rxode2-model-object">The rxode2 model object</h2>
<p>In the previous section I used the <code>rxode2()</code> function to specify a pretty standard two-compartment pharmacokinetic model, and assigned the resulting model object to a boringly-named variable called <code>mod</code>.<sup>9</sup> The model object is the primary vehicle for interfacing with the compiled code from R, so it’s helpful to take a look at it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mod</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">rxode2 </span>2.0.13 model named <span style="color: #BBBB00; font-weight: bold;">rx_7b738a16dd646d432336a380787bd163</span> model (<span style="color: #00BB00;">✔</span> <span style="color: #00BB00; font-weight: bold;">ready</span>). 
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$state</span>: depot, central, peripheral, auc
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span>: VC, VP, KA, Q, CL
<span style="color: #BBBB00;">x</span><span style="color: #0000BB; font-weight: bold;">$lhs</span>: CP, PP
</code></pre>
</div>
<p>Again, there are a few things to unpack in this output:</p>
<ul>
<li>The first line of the output has some technical information about the model. It tells us what version of rxode2 was used to build the model, gives us the name of the built model (see below), and tells us that it’s ready to use.<sup>10</sup></li>
<li>The second line tells us about <code>mod$state</code>, which in this case are the four “compartment” variables that comprise the state vector for the underlying ODE system.</li>
<li>The third line tells us about <code>mod$params</code>, the list of parameters that need to be passed to the model as input to the simulation</li>
<li>The fourth line tells us about <code>mod$lhs</code>, the list of additional defined variables that are created by the model and whose value will be recorded in the output.</li>
</ul>
<p>Like many R packages that generate compiled code, rxode2 manages the compiled object for you. The long unintelligible “name” assigned to our model gives us the hint we need to find the compiled objects. Within the R session temp directory, the rxode2 package has created an “rxode2” subfolder.<sup>11</sup> And indeed, if I take a peek at the contents of this folder, I find something with an identical name:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempdir</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rxode2"</span>))</span></code></pre></div>
<pre class="fansi fansi-output"><code>/tmp/RtmpC0i8oK/rxode2/018374b1ca9115fbc3be9f765f32e47f.md5
<span style="color: #0000BB; font-weight: bold;">/tmp/RtmpC0i8oK/rxode2/rx_7b738a16dd646d432336a380787bd163__.rxd</span>
</code></pre>
</div>
<p>Okay, makes sense.</p>
</section>
<section id="event-tables" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="event-tables">Event tables</h2>
<p>Event tables (also called event schedules) are the primary way the user specifies things that happen in the simulation. These mostly consist of two kinds of event: dosing events, where the drug is administered, and observation events, where the state of the system is measured. In the rxode2 package these are specified with the <code>et()</code> function, and you can use the pipe operator to build up complex event schedules. I’ll take my example from the rxode2 documentation, and walk through it slowly. One nice thing about the event schedules in rxode2 is that you can specify units, so we’ll start with an event table that doesn’t contain any actual <em>events</em>, but specifies the units in which those events will be expressed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amountUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours"</span>)</span>
<span id="cb7-2">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 0 records ──</span>
0 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
</code></pre>
</div>
<p>The output here isn’t super exciting, since there are no actual events encoded here. But it does let me mention one nice little feature of rxode2: the print methods are generally quite informative, and have nice little “nudges” like the ones you can see above that can help new (or even experienced) users work out what they might need to do next.</p>
<p>Anyway, let’s add some dosing events, shall we? Let’s assume an initial dose of <code>amt = 10000</code> (in milligrams) is administered at <code>time = 0</code>, and repeated for an additional 9 times at 12 hour intervals (i.e., <code>addl = 9</code>, <code>ii = 12</code>). In the interests of being explicit, I’ll set <code>cmt = "depot"</code> to be clear about which compartment the dose is administered to.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 1 records ──</span>
1 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 1 × 6</span>
   time cmt     amt    ii  addl evid        
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>      
<span style="color: #555555;">1</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
</code></pre>
</div>
<p>This format for an event table – where <code>time</code>, <code>amt</code>, <code>addl</code>, and <code>ii</code> are used to specify a sequence of regularly spaced dosing events in a single row – will seem quite familiar to anyone in the field, and since I’ve talked about this notation in previous posts, I’ll not bore people by explaining it yet again.</p>
<p>Moving along, let’s also assume that after 120 hours has passed (<code>time = 120</code>) the dosing schedule changes: the dose drops to <code>amt = 2000</code> milligrams, the interdose interval is increased slightly to <code>ii = 14</code> hours, and this dosing regime is maintained for <code>addl = 4</code> additional doses (i.e., 5 in total). So now we have this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">events</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 2 records ──</span>
2 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
0 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 2 × 6</span>
   time cmt     amt    ii  addl evid        
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>      
<span style="color: #555555;">1</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
<span style="color: #555555;">2</span>   120 depot  <span style="text-decoration: underline;">2</span>000    14     4 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span>
</code></pre>
</div>
<p>Now that we have specified all the dosing events, we need to add the “observation” events. In a real study, observation times would be the times at which we take a real-world measurement of some kind, but in the context of the simulation it’s just a set of times at which the state of the system is computed. Let’s compute the state of the system for the first 300 hours:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb10-2">events </span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── EventTable with 303 records ──</span>
2 dosing records (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.dosing</span>(); add with <span style="color: #0000BB;">add.dosing</span> or <span style="color: #0000BB;">et</span>)
301 observation times (see <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">get.sampling</span>(); add with <span style="color: #0000BB;">add.sampling</span> or <span style="color: #0000BB;">et</span>)
multiple doses in `addl` columns, expand with <span style="color: #BBBB00;">x</span>$<span style="color: #0000BB;">expand</span>(); or <span style="color: #0000BB;">etExpand</span>(<span style="color: #BBBB00;">x</span>)
<span style="font-weight: bold;">── First part of </span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="font-weight: bold;">: ──</span>
<span style="color: #555555;"># A tibble: 303 × 6</span>
    time cmt     amt    ii  addl evid         
   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;chr&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;evid&gt;</span>       
<span style="color: #555555;"> 1</span>     0 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 2</span>     0 depot <span style="text-decoration: underline;">10</span>000    12     9 <span style="color: #0000BB; font-weight: bold;">1</span>:<span style="color: #BBBB00;">Dose (Add)</span> 
<span style="color: #555555;"> 3</span>     1 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 4</span>     2 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 5</span>     3 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 6</span>     4 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 7</span>     5 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 8</span>     6 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"> 9</span>     7 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;">10</span>     8 (obs)    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span>    <span style="color: #BB0000;">NA</span> <span style="color: #0000BB; font-weight: bold;">0</span>:<span style="color: #BBBBBB;">Observation</span>
<span style="color: #555555;"># ℹ 293 more rows</span>
</code></pre>
</div>
<p>And now we’re done. We have a complete events table that can be used in our simulation. Admittedly, I went through that awfully slowly. The whole thing could have been bundled into a single pipeline like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amountUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeUnits =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hours"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depot"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">et</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span></code></pre></div>
</div>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/meds.png" class="img-fluid"></p>
</div>
</section>
<section id="simulating-one-subject" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="simulating-one-subject">Simulating one subject</h2>
<blockquote class="blockquote">
<p>I was alone, falling free<br>
Trying my best not to forget<br>
What happened to us<br>
What happened to me<br>
&nbsp;&nbsp; – <a href="https://www.youtube.com/watch?v=WO9ewCO7TYI">Placebo</a><sup>12</sup></p>
</blockquote>
<p>We’re now almost at a point where we can run a simple simulation using the model specified via the <code>mod</code> object, and the events table in <code>events</code>. The only thing we haven’t done yet is specify pharmacokinetic parameters that need to be passed to the model as input. To keep things simple, I’ll simulate only a single subject, and so the input parameters will be passed as a table with one row corresponding to our lone subject, and one column per parameter that needs to be specified. If we look at the model spec we can see that requires all of the following to be given:</p>
<ul>
<li>elimination clearance (<code>CL</code>)</li>
<li>absorption rate constant (<code>KA</code>)</li>
<li>intercompartmental clearance (<code>Q</code>)</li>
<li>volume of distribution for the central compartment (<code>VC</code>)</li>
<li>volume of distribution for the peripheral compartment (<code>VP</code>)</li>
</ul>
<p>Indeed, if we take a look at <code>mod$params</code> we see the same listing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>params</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "VC" "VP" "KA" "Q"  "CL"</code></pre>
</div>
</div>
<p>Okay, so let’s put together a one-row data frame <code>params</code> containing all these parameters for a single simulated subject:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">KA =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.294</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CL =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.6</span>,</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VC =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.2</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VP =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">297</span>,</span>
<span id="cb14-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span></span>
<span id="cb14-7">)</span>
<span id="cb14-8">params</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="color: #555555;"># A tibble: 1 × 5</span>
     KA    CL    VC    VP     Q
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span> 0.294  18.6  40.2   297  10.5
</code></pre>
</div>
<p>Now that we have our parameters, we’re ready to go. There are several ways you can call the solver and run the simulation (<a href="https://nlmixr2.github.io/rxode2/reference/rxSolve.html">documentation here</a>), but I’m currently quite partial to calling <code>solve()</code>,<sup>13</sup> like so:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events)</span></code></pre></div>
</div>
<p>When we print <code>out</code>, we get a fairly detailed description of the simulation that includes information about the parameters and the initial state:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">out</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── Solved rxode2 object ──</span>
<span style="font-weight: bold;">── Parameters (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span><span style="font-weight: bold;">): ──</span>
     VC      VP      KA       Q      CL 
 40.200 297.000   0.294  10.500  18.600 
<span style="font-weight: bold;">── Initial Conditions (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$inits</span><span style="font-weight: bold;">): ──</span>
     depot    central peripheral        auc 
         0          0          0          0 
<span style="font-weight: bold;">── First part of data (object): ──</span>
<span style="color: #555555;"># A tibble: 301 × 7</span>
   time    CP    PP  depot central peripheral   auc
  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span>     0   0   0     <span style="text-decoration: underline;">10</span>000       0          0    0  
<span style="color: #555555;">2</span>     1  44.4 0.920  <span style="text-decoration: underline;">7</span>453.   <span style="text-decoration: underline;">1</span>784.       273.  26.4
<span style="color: #555555;">3</span>     2  54.9 2.67   <span style="text-decoration: underline;">5</span>554.   <span style="text-decoration: underline;">2</span>206.       794.  77.7
<span style="color: #555555;">4</span>     3  51.9 4.46   <span style="text-decoration: underline;">4</span>140.   <span style="text-decoration: underline;">2</span>087.      <span style="text-decoration: underline;">1</span>324. 132. 
<span style="color: #555555;">5</span>     4  44.5 5.98   <span style="text-decoration: underline;">3</span>085.   <span style="text-decoration: underline;">1</span>789.      <span style="text-decoration: underline;">1</span>776. 180. 
<span style="color: #555555;">6</span>     5  36.5 7.18   <span style="text-decoration: underline;">2</span>299.   <span style="text-decoration: underline;">1</span>467.      <span style="text-decoration: underline;">2</span>132. 221. 
<span style="color: #555555;"># ℹ 295 more rows</span>
</code></pre>
</div>
<p>Extremely pretty print method notwithstanding, under the hood it’s nothing fancy. It’s a regular data frame with a few extra classes and some metadata, which means we can pass it straight to ggplot without any coercion, and draw a pretty picture:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(out, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, CP)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Yep, that looks about right.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/boys.png" class="img-fluid"></p>
</div>
</section>
<section id="simulating-multiple-subjects" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="simulating-multiple-subjects">Simulating multiple subjects</h2>
<blockquote class="blockquote">
<p>I like big boys, itty bitty boys<br>
Mississippi boys, inner city boys<br>
I like the pretty boys with the bow tie<br>
Get your nails did, let it blow dry<br>
I like a big beard, I like a clean face<br>
I don’t discriminate, come and get a taste<br>
From the playboys to the gay boys<br>
Go and slay, boys, you my fave boys<br>
&nbsp; &nbsp; –<a href="https://www.youtube.com/watch?v=HQliEKPg1Qk">Lizzo</a></p>
</blockquote>
<p>The previous example shows how to simulate a single subject. However, the world is full of lots of different people with different characteristics, so in a more realistic simulation scenario we would want to simulate many people with different parameter values. In order to accommodate this, the parameter table now has multiple rows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb18-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">KA =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.294</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>),</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CL =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VC =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">40.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">VP =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">297</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb18-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-7">)</span>
<span id="cb18-8">params</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="color: #555555;"># A tibble: 20 × 5</span>
      KA    CL    VC    VP     Q
   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;"> 1</span> 0.275  20.4  39.9  321.  9.93
<span style="color: #555555;"> 2</span> 0.300  20.2  39.7  297. 10.4 
<span style="color: #555555;"> 3</span> 0.269  18.7  41.6  304. 11.7 
<span style="color: #555555;"> 4</span> 0.342  14.6  41.3  297.  8.98
<span style="color: #555555;"> 5</span> 0.304  19.8  38.8  290. 11.1 
<span style="color: #555555;"> 6</span> 0.269  18.5  38.8  299. 10.8 
<span style="color: #555555;"> 7</span> 0.309  18.3  40.9  279. 11.6 
<span style="color: #555555;"> 8</span> 0.316  15.7  41.7  312. 10.2 
<span style="color: #555555;"> 9</span> 0.311  17.6  40.0  299. 10.9 
<span style="color: #555555;">10</span> 0.285  19.4  42.0  319. 10.8 
<span style="color: #555555;">11</span> 0.339  21.3  41.0  302.  9.96
<span style="color: #555555;">12</span> 0.306  18.4  39.0  290. 11.7 
<span style="color: #555555;">13</span> 0.275  19.4  40.9  303. 11.7 
<span style="color: #555555;">14</span> 0.228  18.5  37.9  288. 11.2 
<span style="color: #555555;">15</span> 0.328  15.8  43.1  284. 12.1 
<span style="color: #555555;">16</span> 0.293  17.8  44.2  300. 11.1 
<span style="color: #555555;">17</span> 0.294  17.8  39.5  293.  9.22
<span style="color: #555555;">18</span> 0.322  18.5  38.1  297.  9.93
<span style="color: #555555;">19</span> 0.319  20.8  41.3  298.  9.28
<span style="color: #555555;">20</span> 0.312  20.1  39.9  291. 10.0 
</code></pre>
</div>
<p>The command to run the simulation remains unchanged:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events)</span></code></pre></div>
</div>
<p>I’ll show you the <code>out</code> object in a moment, but it’s probably easier to understand it if we start with a plot:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">out <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sim.id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subject"</span>, sim.id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, CP, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> sim.id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_area</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sim.id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb20-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As you can see, all 20 subjects have qualitatively similar profiles, but there are noticeable differences in the details. Not surprisingly really. I didn’t build in very much variability into the simulation, and I didn’t even <em>try</em> to incorporate an appropriate covariance structure among the parameters (that’s a topic for another post).<sup>14</sup> The main thing that matters here is that we can see that the variation <em>exists</em>.</p>
<p>Anyway, let’s have a look at the table of results <code>out</code> produced by our simulation. As you probably guessed from the ggplot2 code, there’s a column called <code>sim.id</code> that stores the subject identifier, and there are 20 times as many rows as last time, but it’s essentially the same:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">out</span></code></pre></div>
<pre class="fansi fansi-output"><code><span style="font-weight: bold;">── Solved rxode2 object ──</span>
<span style="font-weight: bold;">── Parameters (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$params</span><span style="font-weight: bold;">): ──</span>
<span style="color: #555555;"># A tibble: 20 × 6</span>
   sim.id    VC    VP    KA     Q    CL
    <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;"> 1</span>      1  39.9  321. 0.275  9.93  20.4
<span style="color: #555555;"> 2</span>      2  39.7  297. 0.300 10.4   20.2
<span style="color: #555555;"> 3</span>      3  41.6  304. 0.269 11.7   18.7
<span style="color: #555555;"> 4</span>      4  41.3  297. 0.342  8.98  14.6
<span style="color: #555555;"> 5</span>      5  38.8  290. 0.304 11.1   19.8
<span style="color: #555555;"> 6</span>      6  38.8  299. 0.269 10.8   18.5
<span style="color: #555555;"> 7</span>      7  40.9  279. 0.309 11.6   18.3
<span style="color: #555555;"> 8</span>      8  41.7  312. 0.316 10.2   15.7
<span style="color: #555555;"> 9</span>      9  40.0  299. 0.311 10.9   17.6
<span style="color: #555555;">10</span>     10  42.0  319. 0.285 10.8   19.4
<span style="color: #555555;">11</span>     11  41.0  302. 0.339  9.96  21.3
<span style="color: #555555;">12</span>     12  39.0  290. 0.306 11.7   18.4
<span style="color: #555555;">13</span>     13  40.9  303. 0.275 11.7   19.4
<span style="color: #555555;">14</span>     14  37.9  288. 0.228 11.2   18.5
<span style="color: #555555;">15</span>     15  43.1  284. 0.328 12.1   15.8
<span style="color: #555555;">16</span>     16  44.2  300. 0.293 11.1   17.8
<span style="color: #555555;">17</span>     17  39.5  293. 0.294  9.22  17.8
<span style="color: #555555;">18</span>     18  38.1  297. 0.322  9.93  18.5
<span style="color: #555555;">19</span>     19  41.3  298. 0.319  9.28  20.8
<span style="color: #555555;">20</span>     20  39.9  291. 0.312 10.0   20.1
<span style="font-weight: bold;">── Initial Conditions (</span><span style="color: #BBBB00; font-weight: bold;">x</span><span style="color: #0000BB; font-weight: bold;">$inits</span><span style="font-weight: bold;">): ──</span>
     depot    central peripheral        auc 
         0          0          0          0 

Simulation <span style="font-weight: bold;">without uncertainty</span> in parameters, omega, or sigma matricies

<span style="font-weight: bold;">── First part of data (object): ──</span>
<span style="color: #555555;"># A tibble: 6,020 × 8</span>
  sim.id  time    CP    PP  depot central peripheral   auc
   <span style="color: #555555; font-style: italic;">&lt;int&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>  <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>   <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>      <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span> <span style="color: #555555; font-style: italic;">&lt;dbl&gt;</span>
<span style="color: #555555;">1</span>      1     0   0   0     <span style="text-decoration: underline;">10</span>000       0          0    0  
<span style="color: #555555;">2</span>      1     1  41.6 0.757  <span style="text-decoration: underline;">7</span>594.   <span style="text-decoration: underline;">1</span>657.       243.  24.7
<span style="color: #555555;">3</span>      1     2  51.2 2.20   <span style="text-decoration: underline;">5</span>767.   <span style="text-decoration: underline;">2</span>041.       705.  72.7
<span style="color: #555555;">4</span>      1     3  48.4 3.66   <span style="text-decoration: underline;">4</span>380.   <span style="text-decoration: underline;">1</span>928.      <span style="text-decoration: underline;">1</span>176. 123. 
<span style="color: #555555;">5</span>      1     4  41.5 4.93   <span style="text-decoration: underline;">3</span>326.   <span style="text-decoration: underline;">1</span>656.      <span style="text-decoration: underline;">1</span>581. 168. 
<span style="color: #555555;">6</span>      1     5  34.2 5.93   <span style="text-decoration: underline;">2</span>526.   <span style="text-decoration: underline;">1</span>362.      <span style="text-decoration: underline;">1</span>902. 206. 
<span style="color: #555555;"># ℹ 6,014 more rows</span>
</code></pre>
</div>
<p>As we’ve seen throughout the post, the print method has lots of nice touches. It shows the simulation parameters as well as the simulation results, and has a very gentle message reminding me I haven’t incorporated measurement error, random effects, or parameter uncertainty. Which… I mean, I intentionally left those things out, but actually I do appreciate the clear statement of what <em>wasn’t</em> done here.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/fastest-girl-in-town.png" class="img-fluid"></p>
</div>
</section>
<section id="performance-considerations" class="level2">
<h2 class="anchored" data-anchor-id="performance-considerations">Performance considerations</h2>
<blockquote class="blockquote">
<p>Ain’t no use in trying to slow me down<br>
’Cause you’re running with the fastest girl in town<br>
Ain’t you baby?<br>
&nbsp;&nbsp; – <a href="https://www.youtube.com/watch?v=EbaEVA259IE">Miranda Lambert</a></p>
</blockquote>
<p>For small simulations like the ones I’m running in this post, you really don’t need to care much about performance. However, when you start running larger simulations it starts to matter a lot. To that end there’s a nice <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html">article on speeding up rxode2</a> in the package documentation which I’ve already found extremely useful at work when doing a little bit of code profiling on analysis code. Since this does matter a fair bit in practice, I’ll walk through the same ideas here.</p>
<p>Let’s define a few functions that run the simulations in different ways. First, I’ll start with a <code>solve_loop()</code> function that deliberately strips out any form of multi-threading. Each row in <code>params</code> is passed as a separate call to <code>solve()</code>, nested inside a <code>for</code> loop:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">solve_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb22-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(params)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params[i, ], events)</span>
<span id="cb22-3">}</span></code></pre></div>
</div>
<p>This is our baseline case. It’s designed to make life as difficult as possible for rxode2 by enforcing single threaded execution within R. We can improve on this considerably by passing the entire <code>params</code> data frame, allowing rxode2 to run the simulations in parallel. I haven’t looked under the hood to work out exactly how rxode2 manages the parallelism<sup>15</sup> Here are three functions that explicitly request 1, 2 or 4 cores/threads:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">solve_thread_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb23-2">solve_thread_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb23-3">solve_thread_4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(mod, params, events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cores =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</div>
<p>From experience, I’ve learned that there’s almost never anything to be gained by trying to execute more than four resource-hogging threads simultaneously on my laptop, so I’ll be sensible and won’t try anything more than that. Let’s take a look at the difference in performance for each of these functions:</p>
<div class="cell" data-hash="index_cache/html/benchmarks_15a64dfc7a69447ec3b1a389376a8a52">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">bench <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(</span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_loop</span>(),</span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_1</span>(),</span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_2</span>(),</span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve_thread_4</span>()</span>
<span id="cb24-6">)</span>
<span id="cb24-7">bench</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
             expr       min        lq      mean    median       uq       max neval
     solve_loop() 58.630598 62.227245 68.912034 64.780701 68.78793 168.11848   100
 solve_thread_1()  8.515051  8.867159  9.635308  9.126248  9.45503  26.11143   100
 solve_thread_2()  7.497051  7.720607  8.476758  7.968412  8.44852  15.94618   100
 solve_thread_4()  6.538996  7.063265  7.761950  7.160678  7.54286  17.27997   100</code></pre>
</div>
</div>
<p>You can see from looking at the table that there’s a big drop in performance when we force rxode2 to simulate each subject one at a time within a loop: <code>solve_loop()</code> is much, much slower than any of the others. Increasing the number of threads from one to four helps a fair bit too, but not to the same dramatic extent. This is even more apparent when we visualise the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(bench)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-28_rxode2/index_files/figure-html/benchmark-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Admittedly, the time scale here is such that it doesn’t really matter much, but for more realistic examples I’ve played with the speed-up seems to be pretty similar and it can make a big difference to the performance of analysis code.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>As an aside: when getting started, I found it a little easier to look at the <a href="https://nlmixr2.github.io/rxode2-manual/">rxode2 user manual</a> than to work from the pkgdown site. As far as I can tell it’s essentially the same material, but the manual organises it in a linear fashion that makes it a little clearer to new users because you get a better sense of the order in which to read things.↩︎</p></li>
<li id="fn2"><p>Does that term even make sense for a linux machine? It’s not like the thing shipped with linux in the first place. Whatever.↩︎</p></li>
<li id="fn3"><p>I haven’t extensively checked the dependencies on other operating systems, but from what I can tell a Windows install requires <a href="https://cran.r-project.org/bin/windows/Rtools/">RTools</a>.↩︎</p></li>
<li id="fn4"><p>Or notorious, depending on your perspective↩︎</p></li>
<li id="fn5"><p>Metaprogramming in R relies on the fact that R adopts a <a href="https://en.wikipedia.org/wiki/Lazy_evaluation">lazy evaluation</a> model for code execution. This allows the programmer to capture user code passed to a function <em>before</em> it is evaluated, modify the code as desired, and indeed prevent it being evaluated at all. R is hardly the only language to adopt this approach, but it does put it in contrast to languages like Python that adopt an <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Eager_evaluation">eager evaluation</a> approach.↩︎</p></li>
<li id="fn6"><p>In this post I’m assuming the drug has bioavailability of <img src="https://latex.codecogs.com/png.latex?F%20=%201">, but that’s not true generally, so you’d have to model this explicitly by scaling the drug amount that passes from the gut to the central compartment in the ODE equations.↩︎</p></li>
<li id="fn7"><p>In essence, the value of <code>auc</code> that accrues is a numerical estimate of the time-integral of drug concentration. This “area under the curve” measure is one of several different measures used to assess drug exposure. I talked a lot about the AUC measure in my post on <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a>.↩︎</p></li>
<li id="fn8"><p>The rxode2 mini-language also allows you to use <code>~</code> for this purpose, but I’m not going to do that here. For this post, I’ve chose to use <code>=</code> as a way of reminding myself that my model specification isn’t “normal” R code.↩︎</p></li>
<li id="fn9"><p>Model objects in rxode2 have S3 class “rxode2”.↩︎</p></li>
<li id="fn10"><p>You can customise this name if you care deeply about such things. As noted in the <a href="https://nlmixr2.github.io/rxode2/reference/rxode2.html"><code>roxde2()</code> documentation</a>, there is a <code>modName</code> argument that you can use for this purpose. Because this name is used throughout the C compilation process, it must start with a letter and contain only alphanumeric ASCII characters.↩︎</p></li>
<li id="fn11"><p>Yes, you can customise this too, by specifying the <code>wd</code> argument to <code>rxode2()</code>.↩︎</p></li>
<li id="fn12"><p>I actually feel bad about referencing “Meds” in this post, because let’s face it <em>“The sex, and the drugs, and the complications”</em> would be a fucking magnificent title for a blog post about PKPD models with covariates. Oh who am I kidding? I’m absolutely going to write a post with that title.↩︎</p></li>
<li id="fn13"><p>Experienced R users would not be surprised to discover that <code>solve()</code> is an S3 generic defined in the base package, and equally unsurprised to note that rxode2 defines a method for “rxode2” objects such as <code>mod</code>. It somehow makes me happy to see <code>solve()</code> used this way.↩︎</p></li>
<li id="fn14"><p>Note to future-Danielle: there is a nice discussion of this in the rxode2 context specifically, in the article on <a href="https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html">population simulation</a>.↩︎</p></li>
<li id="fn15"><p>Is it purely <a href="https://en.wikipedia.org/wiki/Multithreading">multi-threading</a> we’re talking about? Do we care deeply about the <a href="https://stackoverflow.com/questions/11835046/multithreading-and-multicore-differences">multi-thread/multi-core</a> distinction? Does <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">SIMD</a> come into play? Most importantly, does the author really want to be bothered writing a deep dive on these topics when the audience consists almost entirely of people who (a) already understand these topics or (b) do not care about these topics? The answer to that last one is no. No she does not.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pharmacometric Simulation with Rxode2},
  date = {2023-08-28},
  url = {https://blog.djnavarro.net/posts/2023-08-28_rxode2},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pharmacometric Simulation with
Rxode2.”</span> August 28, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-28_rxode2">https://blog.djnavarro.net/posts/2023-08-28_rxode2</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-28_rxode2/</guid>
  <pubDate>Sun, 27 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-28_rxode2/boys.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Pharmacometric simulation with mrgsolve</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/</link>
  <description><![CDATA[ 





<!-- 
cover art: https://unsplash.com/photos/a7OdG45prSM
licence: unsplash public
-->
<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Continuing my informal series of “Danielle learns <a href="https://blog.djnavarro.net/category/pharmacometrics">pharmacometric modelling</a>” posts, today I’ve decided to sit down and teach myself how to use the <a href="https://mrgsolve.org/">mrgsolve</a> package in R.</p>
<p>As I’m rapidly coming to realise, the world of pharmacometric modelling is an intersting space where there are a large number of domain-specific languages that have been designed to solve a particular subset of the modelling problems faced by analysts in the field, and R serves as a lingua franca that stitches them all together and makes it possible to write analysis scripts that call on multiple tools.<sup>1</sup></p>
<p>With that as the structure of the ecosystem, what you tend to find are packages that carve out a specific niche by building on top of some other tool. For this post, the niche we’re talking about is <strong>model-based simulation</strong>. In this context, it’s assumed that the analyst has a specific pharmacometric model in mind (e.g., one-compartment PK model,<sup>2</sup> two-compartment PK model, etc etc). We are not attempting to estimate parameters from data, nor are we runing a model testing exercise. The model is presumed to exist already, usually because the analyst has already done the model fitting exercise using their tool of choice.<sup>3</sup></p>
<p>Within the specific “model simulation” niche there are a number of R packages that people seem to use frequently. There’s the RxODE package<sup>4</sup> and its successor <a href="https://nlmixr2.github.io/rxode2/">rxode2</a>, for example, and mrgsolve falls within the same general niche. I didn’t have any specific reason for deciding to learn mrgsolve first: I had to start somewhere and this seems as good a place as any.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mrgsolve)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/mrgsolve-hex.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Hex sticker image for the mrgsolve R package"></p>
</figure>
</div>
<section id="a-simple-example" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-example">A simple example</h2>
<p>Okay, let’s get started. The mrgsolve package is build on top of an open source ODE solver,<sup>5</sup> but the user doesn’t need to call it directly. Instead, a model is constructed using a <strong>model specification file</strong> (more on that later) that is then compiled to C++. This compiled model is used to run simulations, and it’s this compiled model that calls the ODE solvers. As a example, let’s use this code taken from the <a href="https://mrgsolve.org/vignettes/01-get-started.html">get started</a> page, which uses <code>modlib()</code> to use one of the predefined model specifications that come bundled with mrgsolve:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Building pk1 ... done.</code></pre>
</div>
</div>
<p>In this code, <code>"pk1"</code> refers to the name of one of the model that comes bundled with mrgsolve… and there will be exactly zero pharmacometricians in this world that are surprised to discover that this is a one-compartment PK model with first-order absorption into the central compartment, and first-order elimination from the central compartment. If we print out the model object, we get a nice little summary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc27212d78b 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>A few months ago very little of this would have made sense to me, but I’ve – apparently – become familiar enough with conventions in pharamacometrics that this now looks very easy to read. For this initial example, the bits that matter most are these:</p>
<ul>
<li><p>We have a list of compartments: CENT refers to the central compartment, and EV refers to an extravascular dosing compartment through which the drug is administered. Note that although there are two listed compartments, this is really a one-compartment model: the extravascular dosing compartments are a necessary part of the model formalism, but no more than that.</p></li>
<li><p>We have a list of parameters: clearance (CL) is a measure representing the volume of blood that can be fully cleared of the drug per unit time, volume of distribution (V) measures the size of the central compartment, and KA is the absorption rate constant governing how quickly the drug is absorbed from the extravascular compartment into the central compartment.</p></li>
<li><p>When running a simulation, the drug amounts in the compartments CENT and EV will be returned as part of the output. However, we can also specify other “captured” quantities, which in this case adds CP, the drug concentration in the central compartment.<sup>6</sup></p></li>
</ul>
<p>The parameter values (i.e.&nbsp;CL, V, KA) are part of the model specification, and you can see the values assigned to those parameters by calling <code>param()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=3):
 name value . name value
 CL   1     | V    20   
 KA   1     | .    .    </code></pre>
</div>
</div>
<p>We see that our model assumes a clearance (CL) of 1, an aborption rate constant (KA) of 1, and a volume of distribution equal to 20. The mrgsolve package doesn’t keep track of units: it’s up to the user to make sure all the units are on the appropriate scale.</p>
<p>Note that the <code>param()</code> function is both the “getter” and the “setter” for model parameters: <code>param(mod)</code> returns a parameter list object containing the parameters of <code>mod</code>, whereas <code>param(mod, CL = 2, KA = 2)</code> returns a modified model object with updated parameters. Later in the post I’ll use <code>param()</code> to modify model parameters in this way.</p>
<p>Okay so now we have a model object <code>mod</code> that specifies all our pharmacokinetic assumptions. In order to run a simulation, we also need to provide an <strong>event schedule</strong> that provides dosing information, and we’ll also need to say something about the time points at which we want to simulate the various pharmacokinetic quantities of interest. You can do this in a few different ways but for the purposes of the initial example I’ll do it the same way that the “get started” vignette does, and use a pipe-friendly workflow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>Here we take the <code>mod</code> object, pipe it to the <code>ev()</code> function that builds the event schedule, and then pipe the output to <code>mrgsim()</code> which then runs the simulation. In this code, the arguments to <code>ev()</code> are all very standard in the field:</p>
<ul>
<li><code>amt</code> is the amount of drug</li>
<li><code>ii</code> is the interdose interval</li>
<li><code>addl</code> is number of additional doses</li>
</ul>
<p>The arguments to <code>mrgsim()</code> are used to specify the time points:</p>
<ul>
<li><code>start</code> is the initial time point (I actually didn’t need to specify it in ths case because the default value is 0)</li>
<li><code>end</code> is the final time point</li>
<li><code>delta</code> is the step size (i.e., the amount of time between successive time points)</li>
</ul>
<p>The output here is a tabular data structure – not technically a data frame, but I’ll get to that – with sensible column names:</p>
<ul>
<li><code>ID</code> is a subject identifier (always 1 for this simple example)</li>
<li><code>time</code> is the time point for the simulated measurement</li>
<li><code>EV</code> is the drug amount in the extravascular compartment (e.g., the gut, if we’re talking about oral dosing)</li>
<li><code>CENT</code> is the drug amount in the central compartment</li>
<li><code>CP</code> is the drug concentration in the central compartment</li>
</ul>
<p>To help you get a sense of what the simulation results look like, the mrgsolve package provides a plot method for simulation results, so if I’d wanted to I could add a call to <code>plot()</code> at the end of the pipeline, and get this as the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Very nice.</p>
</section>
<section id="simulation-workflow" class="level2">
<h2 class="anchored" data-anchor-id="simulation-workflow">Simulation workflow</h2>
<p>Now things get a little messier. The mrgsolve package is designed to support several different kinds of workflow, which is of course a good thing, but very often the price of analytic flexibility is function complexity. It takes some effort to understand all the moving parts to the package, and the different ways in which mrgsolve functions can be called.<sup>7</sup></p>
<section id="the-model-library" class="level3">
<h3 class="anchored" data-anchor-id="the-model-library">The model library</h3>
<p>Let’s start by taking a closer look at the library of pre-specified models that come bundled with mrgsolve. They’re stored in a package folder whose location is accessible by calling <code>modlib()</code> with no arguments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "/home/danielle/R/x86_64-pc-linux-gnu-library/4.3/mrgsolve/models"</code></pre>
</div>
</div>
<p>As you can see, when called with no inputs <code>modlib()</code> doesn’t return a compiled model, and it simply returns the path to the model library folder. If you want a list of the models that come bundled with mrgsolve, you can call <code>modlib()</code> setting <code>list = TRUE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>mrgsolve internal library:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>  effect  tmdd  viral1  viral2  emax  irm1  irm2  irm3  irm4  pk1cmt  pk2cmt  pk3cmt  pk1  pk2  pk2iv  popex  pred1  pbpk  1005  nm-like</code></pre>
</div>
</div>
<p>Finally, if you want to build and use one of these model you can call <code>modlib()</code> and pass the name of the model you want as the <code>model</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading model from cache.</code></pre>
</div>
</div>
<p>It’s probably stating the obvious, but while the <code>modlib()</code> function works nicely as a tool to support analysts interactively, you probably wouldn’t call it as a developer. For instance, if you want to access the mrgsolve package folder that contains the models, you’d write code that makes very clear that you’re looking for a path (not trying to build a model). Something like this would work better:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/danielle/R/x86_64-pc-linux-gnu-library/4.3/mrgsolve/models</code></pre>
</div>
</div>
<p>Similarly, if you want to find the models in the model library folder, that’s easy enough to do with <code>fs::dir_ls()</code> and a simple regular expression. Easy done.</p>
</section>
<section id="building-models-from-file" class="level3">
<h3 class="anchored" data-anchor-id="building-models-from-file">Building models from file</h3>
<p>Along the same lines, building one of the bundled models using <code>modlib()</code> is a perfectly sensible thing to do when you’re just starting out and don’t want to write your own model specification files, but after a while you might want to pivot to a different workflow. To that end, there’s an <code>mread()</code> function – and related functions <code>mread_file()</code> and <code>mread_cache()</code> – that reads a model specification file and returns the model object linked to the compiled code. As an example, here’s how I’d use <code>mread()</code> to build the one-compartment model in the previous section:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb20-2">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Building pk1 ... (waiting) ...
done.</code></pre>
</div>
</div>
<p>Optionally you can provide a file name for the model specification file that sits within the <code>project</code> folder, but in this case we don’t need to: if the <code>file</code> argument is unspecified <code>mread()</code> assumes that the file name is the same as the <code>model</code> name with file extension <code>.cpp</code>.<sup>8</sup></p>
</section>
<section id="model-objects" class="level3">
<h3 class="anchored" data-anchor-id="model-objects">Model objects</h3>
<p>The mrgsolve package is built using S4 classes and of the great many object oriented programming systems available in R that’s the one I’m least comfortable with.<sup>9</sup> But hey… I’ve just reread the <a href="https://adv-r.hadley.nz/s4.html">S4 chapter in Advanced R</a>, so let’s see how we go with this, shall we? First, I’ll be polite and explicitly load the methods package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(methods)</span></code></pre></div>
</div>
<p>Next let’s see what kind of object <code>mod</code> is and what methods are defined for it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "mrgmod"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">methods</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgmod"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] [              [[             $              all.equal     
 [5] as.environment as.list        blocks         cmtn          
 [9] data_set       ev_rx          ev             evd           
[13] idata_set      init           initialize     knobs         
[17] loadso         names          omat           param         
[21] req            Req            revar          see           
[25] show           smat           stime          summary       
[29] update         within         zero_re       
see '?methods' for accessing help and source code</code></pre>
</div>
</div>
<p>A lot of those methods are unsurprising. For example, the <code>show()</code> method is just the S4 analog of <code>print()</code>. When we print the <code>mod</code> object at the console we’re just calling its <code>show()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc21a2b760d 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>But there are other methods that are kind of handy when inspecting a mrgmod object. For example, if we wanted to see the source code for the corresponding model specification file we could call the <code>see()</code> method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">see</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Model file:  pk1.cpp 
$PARAM @annotated
CL   :  1 : Clearance (volume/time)
V    : 20 : Central volume (volume)
KA   :  1 : Absorption rate constant (1/time)

$CMT  @annotated
EV   : Extravascular compartment
CENT : Central compartment

$GLOBAL
#define CP (CENT/V)

$PKMODEL ncmt = 1, depot = TRUE

$CAPTURE @annotated
CP : Plasma concentration (mass/volume)</code></pre>
</div>
</div>
<p>If we didn’t want quite that much detail, a <code>summary()</code> would have sufficed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model: pk1
- Parameters: [3]
  CL, V, KA
- Compartments: [2]
  EV, CENT
- Captured: [1]
  CP
- Outputs: [3]
  EV, CENT, CP</code></pre>
</div>
</div>
<p>I don’t intend to do an exhaustive walk through of all the methods defined for mrgmod objects. That would be tiresome, and in any case I don’t even know what all of them do yet. But what I will mention is that many of the methods exist to provide public accessors for these internal slots of a mrgmod object. To illustrate, here’s a list of all the slot names:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slotNames</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "model"    "modfile"  "package"  "soloc"    "project"  "start"   
 [7] "end"      "delta"    "add"      "tscale"   "digits"   "quiet"   
[13] "verbose"  "debug"    "preclean" "atol"     "rtol"     "ss_rtol" 
[19] "ss_atol"  "maxsteps" "hmin"     "hmax"     "ixpr"     "mxhnil"  
[25] "shlib"    "funs"     "omega"    "sigma"    "request"  "param"   
[31] "init"     "capture"  "Icap"     "capL"     "Icmt"     "cmtL"    
[37] "args"     "fixed"    "advan"    "trans"    "mindt"    "code"    
[43] "annot"    "envir"    "plugin"   "ss_cmt"  </code></pre>
</div>
</div>
<p>Okay so one of the slots is called “param”, and denoted <code>@param</code> to remind us that it’s a slot of an S4 object.<sup>10</sup> Calling the <code>param()</code> method is the appropriate way to access the <code>@param</code> slot, for instance.<sup>11</sup> The <code>see()</code> method is slightly fancier, but it too is essentially an accessor function for the <code>@modelfile</code> and <code>@code</code> slots. If I were an extremely unwise woman who ignored all the best practices for S4 classes I could use a command like <code>cat(mod@code, sep = "\n")</code> and get roughly the same output. This is of course a terrible idea: the slots of an S4 object are considered internal details and not part of the package API. Accessing them directly is considered a faux pas and you have only yourself to blame if the developer later changes the structure of the slots and your code breaks.</p>
<p>Indeed, the <em>only</em> reason I’m talking about them here is that I find it helpful for building my own mental model of what mrgsolve does, which will become apparent in the next section when I tackle the puzzlingly magical behaviour of the <code>ev()</code> function.</p>
</section>
<section id="event-objects" class="level3">
<h3 class="anchored" data-anchor-id="event-objects">Event objects</h3>
<p>Model objects represent the underlying ODE system. They don’t store information about “interventions” (external forcers) on the system. In the pharmacokinetic context the main intervention we’re thinking about is dosing. An events object returned by <code>ev()</code> returns a event schedule that would be familiar to any pharmacometrician:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb35-2">events</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Events:
  time amt ii addl cmt evid
1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>The <code>events</code> object looks a lot like a data frame, but is technically an S4 object with class “ev”. However, an ev object has only two slots, one of which is <code>@data</code> and – as you’d expect – it stores the data set as a data frame internally. So… yeah, it’s basically a data frame, and since there are <code>as.data.frame()</code> and <code>as_tibble()</code> methods defined for ev objects, so you can coerce it to whatever your preferred form of tabular data object happens to be.<sup>12</sup> I’m a tibble girl myself so…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(events)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 6
   time   amt    ii  addl   cmt  evid
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     0   100    24     9     1     1</code></pre>
</div>
</div>
<p>I’ll talk more about other ways to build fancier event schedules later, and you’ll see that it’s perfectly possible to use a simple data frame to specify an event schedule, but we’re not yet at the point where any of that is needed. Right now, all we’re trying to do is understand what happens in the simple simulation I showed at the start of this post.</p>
</section>
<section id="danielle-briefly-loses-her-fking-mind" class="level3">
<h3 class="anchored" data-anchor-id="danielle-briefly-loses-her-fking-mind">Danielle briefly loses her f**king mind</h3>
<p>Very soon I will move on to <code>mrgsim()</code>, the function that we use to run the simulation itself. Truly, we will get there soon. But we have one little matter to clear up first, related to the behaviour of <code>ev()</code>.</p>
<p>The previous section makes it look as if <code>ev()</code> is very simple, and viewed from the analyst perspective it really is quite simple. You use it to construct event schedules. However, <code>ev()</code> is not a simple function. It’s an S4 generic with dispatch on the first argument<sup>13</sup> and it returns a qualitatively different kind of object when called in a pipeline.</p>
<p>To understand the “Danielle briefly loses her f**king mind” aspect to this, let’s return to the model simulation pipeline that I lifted from the “Get Started” vignette and used at the start of the post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">mod <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>If you’re expecting <code>ev()</code> to return an “ev” object – as indeed it would if I called <code>ev(amt = 100, ii = 24, addl = 9)</code> outside of a pipeline – this code makes absolutely no sense whatsoever. An “ev” object simply does not have the information required to run the simulations. Running a model-based simulation requires an actual model, and an “ev” object does not contain any slots that could possibly store a model object. So… something magical is happening. This code shouldn’t work, but it does???</p>
<p>I cried briefly. Then I read the <a href="https://mrgsolve.org/docs/reference/ev.html">documentation</a> properly. Then I cried some more.</p>
<p>After reading the documentation carefully, I now understand what’s going on here, but an explanation is required because if you don’t look closely it looks like magic.<sup>14</sup> When the first argument to <code>ev()</code> is a model object, it doesn’t return an event schedule. Instead, it returns another model object.<sup>15</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>

-----------------  source: pk1.cpp  -----------------

  project: /home/danielle/R...gsolve/models
  shared object: pk1-so-3fbc21a2b760d 

  time:          start: 0 end: 24 delta: 1
                 add: &lt;none&gt;

  compartments:  EV CENT [2]
  parameters:    CL V KA [3]
  captures:      CP [1]
  omega:         0x0 
  sigma:         0x0 

  solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k
------------------------------------------------------</code></pre>
</div>
</div>
<p>Looking at the printed output, you might think that the output here is identical to the original model object <code>mod</code>, but in this case looks are deceiving. The new model stores the event schedule internally: it’s tucked away in the <code>@args</code> slot.<sup>16</sup> To illustrate, let’s assign the output to a variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">mod_with_ev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>Now compare the pair:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>args</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>list()</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">mod_with_ev<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>args</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$events
Events:
  time amt ii addl cmt evid
1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>So now things become a little clearer. After seeing this, what you might – correctly! – conclude is that at the other end of the pipeline the <code>mrgsim()</code> function is aware that the event schedule might not be passed explicitly, and knows to check within the model object if that is the case. Knowing all this, we’re now in a position to understand what happens during a pipeline like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>It’s a clever trick, and I imagine it’s something that a lot of data analysts find super handy. That said, it’s probably not something I would use myself. I’m a simple girl who likes her coffee black and her data pipelines transparent, so I’d probably avoid this particular workflow and instead write code that looks more like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb49-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb49-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb49-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb49-5"></span>
<span id="cb49-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the simulation</span></span>
<span id="cb49-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_e</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">events =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>Notice that I called <code>mrgsim_e()</code> here rather than <code>mrgsim()</code>. Because mrgsolve recognises that sometimes developers might want to call simulation functions programmatically, it provides several restricted versions of <code>mrgsim()</code> that require input in a specific format. The sneaky “event-schedule-inside-the-model-object” piping trick I showed at the start of the post does not work with <code>mrgsim_e()</code>, which – at least to my mind – makes it a safer choice when running simulations programmatically. Later in this post you’ll see me pivot to using <code>mrgsim_d()</code>, for much the same reason.</p>
</section>
<section id="data-frames-as-event-schedules" class="level3">
<h3 class="anchored" data-anchor-id="data-frames-as-event-schedules">Data frames as event schedules</h3>
<p>In the last section I kind of wrapped myself up in knots trying to get a handle on what <code>ev()</code> does under the hood, and as you can probably tell I have some mixed feelings about it. Fortunately, you don’t have to use it at all if you don’t want to: the <code>mrgsim_d()</code> function takes regular data frame as the <code>data</code> argument, and which plays the same role as the <code>events</code> argument in <code>mrgsim_e()</code>. You can generate event schedules in data frame format using the <code>ev_expand()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID time amt ii addl cmt evid
1  1    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>The output here looks the same, but this time the output is a regular data frame, and so to be defensive in our code we would call <code>mrgsim_d()</code> to run a simulation that <em>requires</em> a data frame as input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb52-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb52-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb52-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb52-5"></span>
<span id="cb52-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run the simulation</span></span>
<span id="cb52-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>As an aside, you might be wondering why this function is named <code>ev_expand()</code>. It’s not obvious from the example I showed above, but the <code>ev_expand()</code> function is essentially a convenience function that calls to <code>expand.grid()</code> to combine the levels of all variables input, with some extra syntactic sugar that auto-populates certain columns that are required for event schedule data sets. As an example, you might generate an event schedule defined for multiple subjects using a command like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID time amt ii addl cmt evid
1  1    0 100 24    9   1    1
2  2    0 100 24    9   1    1
3  3    0 100 24    9   1    1
4  4    0 100 24    9   1    1
5  5    0 100 24    9   1    1
6  6    0 100 24    9   1    1</code></pre>
</div>
</div>
<p>Later in this post I’ll use <code>ev_expand()</code> in exactly this way.</p>
</section>
<section id="simulation-times" class="level3">
<h3 class="anchored" data-anchor-id="simulation-times">Simulation times</h3>
<p>We’re almost done unpacking the simple example, but I want to rewrite the code one last time. Until now, every time I’ve <code>mrgsim()</code> and its variants I’ve passed arguments <code>end</code> and <code>delta</code> as a way to override the default assumptions about what time points we would use when running our simulations. Internally, these arguments are used to construct a “tgrid” object that specifies the time points. We can construct this object explicitly by calling <code>tgrid()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>start:  0  end:    480  delta:  0.1  offset: 0  min:    0   max:    480 </code></pre>
</div>
</div>
<p>Using this knowledge, we can now write our simulation code like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the simulation</span></span>
<span id="cb57-2">dir    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb57-3">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb57-4">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb57-5">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation</span></span>
<span id="cb57-8">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span></code></pre></div>
</div>
<p>For the simple example, calling <code>tgrid()</code> explicitly doesn’t by us much, but if you dive into the documentation a little you discover that there are tools for working with tgrid objects that allow you to define the simulation times in much richer ways than a simple grid. But I digress.</p>
</section>
<section id="simulation-code" class="level3">
<h3 class="anchored" data-anchor-id="simulation-code">Simulation code</h3>
<p>Taking a step back, it’s worth thinking a little about the code I’ve ended up with. The piped code I started with probably works nicely for some people, but it’s not my preferred way to do this. The way I think of these things, a simulation has three main inputs (model object, event schedule, simulation times), and I find the code easier to read when these three inputs are passed as three separate arguments. The syntax used to specify the original simulation pipeline is very compact…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modlib</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb58-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb58-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
</div>
<p>…but that compactness comes at the expense of slightly obfuscating the inputs to <code>mrgsim()</code>. By way of contrast, this version of the code is considerably more verbose…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this would normally be the project folder</span></span>
<span id="cb59-2">dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrgsolve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>)</span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb59-5">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb59-6">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb59-7">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb59-8"></span>
<span id="cb59-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation</span></span>
<span id="cb59-10">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span></code></pre></div>
</div>
<p>…but personally I find it a little easier to understand the structure of the simulation when its written like this. Other people might have different views though.</p>
</section>
<section id="simulation-output" class="level3">
<h3 class="anchored" data-anchor-id="simulation-output">Simulation output</h3>
<p>At this point the simulation is complete, so we can turn our attention to the output we’ve created. Here’s an example of the output returned by <code>mrgsim()</code> and its friends:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">out</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model:  pk1 
Dim:    4802 x 5 
Time:   0 to 480 
ID:     1 
    ID time     EV   CENT     CP
1:   1  0.0   0.00  0.000 0.0000
2:   1  0.0 100.00  0.000 0.0000
3:   1  0.1  90.48  9.492 0.4746
4:   1  0.2  81.87 18.034 0.9017
5:   1  0.3  74.08 25.715 1.2858
6:   1  0.4  67.03 32.619 1.6309
7:   1  0.5  60.65 38.819 1.9409
8:   1  0.6  54.88 44.383 2.2191</code></pre>
</div>
</div>
<p>As you’ve probably come to expect at this point, this is not technically a data frame, it’s an S4 object of class “mrgsims”, and can easily be coerced to a data frame using <code>as.data.frame()</code> or <code>as_tibble()</code>.</p>
<p>The mrgsolve package supplies a plot method for mrgsims objects that generates nice looking lattice plots, making it very easy to quickly produce helpful data visualisations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The plot method allows you to <a href="https://mrgsolve.org/docs/reference/plot_mrgsims.html">customise the plot</a> in a fairly flexible way, but there are some limits to what you can do with this approach. It’s not a big drawback though. If additional customisation is needed it’s pretty easy to convert the output to a tibble and then using ggplot2 to create the specific visualisation you want:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb63-2"></span>
<span id="cb63-3">out <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-4">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-5">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb63-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(EV, CENT, CP), </span>
<span id="cb63-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>, </span>
<span id="cb63-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb63-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb63-10">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb63-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable =</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb63-12">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EV"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gut amount"</span>,</span>
<span id="cb63-13">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CENT"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Central amount"</span>,</span>
<span id="cb63-14">      variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CP"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Central concentration"</span></span>
<span id="cb63-15">    )</span>
<span id="cb63-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb63-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb63-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb63-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb63-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Drug amounts and concentrations over time"</span>,</span>
<span id="cb63-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time (hours)"</span>,</span>
<span id="cb63-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb63-26">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-36-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="model-specification" class="level2">
<h2 class="anchored" data-anchor-id="model-specification">Model specification</h2>
<p>Up till now I’ve been relying entirely on prespecified pharmacokinetic models included in the mrgsolve model library. That was a useful thing to do earlier in this post while discussing the mechanics of <code>mrgsim()</code>, <code>ev()</code>, <code>mread()</code>, <code>tgrid()</code> and so on, but in practice you really need to understand how models are specified. I’m not going to attempt a comprehensive discussion of this topic, but if you want more detail, the chapters in the user guide I found most relevant are:</p>
<ul>
<li>The <a href="https://mrgsolve.org/user-guide/specification.html">model specification chapter</a></li>
<li>The <a href="https://mrgsolve.org/user-guide/topics.html">topics chapter</a></li>
</ul>
<section id="example-1-two-compartment-pk-model" class="level3">
<h3 class="anchored" data-anchor-id="example-1-two-compartment-pk-model">Example 1: Two compartment PK model</h3>
<p>There are two ways to specify a model in mrgsolve: you can pass a string to <code>mread_code()</code>, or you can read it from a model specification file using <code>mread_file()</code>. I’ll be using the latter method here. By convention, model specification files use a “.cpp” file extension, but it’s important to recognise that despite that, a model specification file is not, strictly speaking, C++ code. A model specification consists of a set of code blocks, and only some of those code blocks contain C++ code. Some blocks use R syntax, and others are plain text.<sup>17</sup></p>
<p>In any case, the first model specification I wrote is contained in the <a href="example1.cpp">example1.cpp</a> file bundled with this post, and is a very modest tweak to one of the models distributed with the mrgsolve package. Here’s what the file looks like:</p>
<div class="cell" data-file="example1.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example1.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb64-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-2"></span>
<span id="cb64-3">This is a minor variation of the <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cmt"</span> model that is distributed as</span>
<span id="cb64-4">part of the mrgsolve internal model library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span> It has a single extravascular</span>
<span id="cb64-5">dosing compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>the GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> a central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> a</span>
<span id="cb64-6">peripheral compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span> Absorption from GUT is first order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb64-7">whereas elimination from CENT follows Michaelis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Menten kinetics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb64-8"></span>
<span id="cb64-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-10"></span>
<span id="cb64-11">VC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Central volume <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-12">Q    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Inter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compartmental clearance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-13">VP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Peripheral volume of distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-14">KA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Absorption rate constant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-15">VMAX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Maximum velocity of elimination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-16">KM   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Michaelis constant <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> elimination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-17"></span>
<span id="cb64-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-19"></span>
<span id="cb64-20">GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in gut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-21">CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-22">PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in peripherhal compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb64-23"></span>
<span id="cb64-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>GLOBAL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-25"></span>
<span id="cb64-26"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CP </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">          </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in central compartment</span></span>
<span id="cb64-27"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CT </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">        </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in peripheral compartment</span></span>
<span id="cb64-28"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CLNL </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>VMAX<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>KM<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// non-linear clearance, per MM kinetics</span></span>
<span id="cb64-29"></span>
<span id="cb64-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ODE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb64-31"></span>
<span id="cb64-32">dxdt_GUT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb64-33">dxdt_CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CLNL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb64-34">dxdt_PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb64-35"></span>
<span id="cb64-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb64-37"></span>
<span id="cb64-38">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>There are six code blocks in this file. I’ve specified them using square brackets (e.g., <code>[BLOCKNAME]</code>) because it reminds me of <a href="https://toml.io/en/">TOML</a>, but it’s also valid to use the dollar sign (e.g., <code>$BLOCKNAME</code>).<sup>18</sup> Block names are case insensitive: mrgsolve treats <code>[BLOCKNAME]</code> and <code>[blockname]</code> identically. The order in which you specify blocks doesn’t matter, but the order of statements within a block often does matter because some blocks are interpreted as C++ or R code.</p>
<p>The interpretation of these blocks is as follows:</p>
<ul>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-prob"><code>[PROB]</code></a> block is purely used to specify comments or notes on the model. It has no functional effect. You’ll very often see this block written in markdown format.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-param"><code>[PARAM]</code></a> block is used to pass a list of parameter values to be used in the model. When parsing this code block, mrgsolve interprets the values as R expressions (evaluated at build time), so if you were to define the central compartment volume <code>VC</code> to be <code>sqrt(400)</code>, the resulting model would store <code>VC</code> as the numeric value <code>20</code> within the internal parameter list. Normally, parameters would be defined as a comma separated list of name-value pairs (e.g., <code>VC = 20, Q = 2, ...</code>), but when you use the <code>@annotated</code> option as I have done here, you can write <code>VC : 20 : Central volume (volume)</code>. This version of the syntax allows you to provide comments on how each parameter is interpreted. Many of the code blocks support the <code>@annotated</code> option, and in most cases I find myself strongly preferring the annotated syntax.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#cmt-and-init"><code>[CMT]</code></a> block is used to specify compartment names, and much like the <code>[PARAM]</code> block it supports the <code>@annotated</code> keyword. By default, all compartments are presumed to be initialised with value 0. If you need to set different initial values for the drug amounts in each compartment, use an <code>[INIT]</code> block instead of a <code>[CMT]</code> block.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#global"><code>[GLOBAL]</code></a> block is used to specify global variables and <a href="https://cplusplus.com/doc/tutorial/preprocessor/">preprocessor directives</a> in the C++ code that mrgsolve constructs from the model specification file. This block is, not surprisingly, interpreted as literal C++ code. In this example I’ve used the <code>#define</code> directive to indicate that the plasma concentration <code>CP</code> is simply an alias for <code>(CENT / VP)</code>, and similarly the tissue<sup>19</sup> concentration <code>CT</code> is an alias for <code>(PERIPH / VP)</code>, and so on.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-ode"><code>[ODE]</code></a> block is used to specify the differential equations that define the model. For every compartment in your model there is a corresponding <code>dxdt_</code> variable: for instance, if <code>CENT</code> denotes the drug amount in the central compartment, then there is automatically a variable <code>dxdt_CENT</code> that denotes its first derivative with respect to time, and you must specify the value for <em>all</em> compartment derivatives even if they are zero. The <code>[ODE]</code> block is interpreted as literal C++ code, and you can declare and initialise new variables within the <code>[ODE]</code> block if you want to. Note that you may sometimes see a <code>[DES]</code> code block instead of an <code>[ODE]</code> block. They’re the same thing: <code>[DES]</code> is an alias for <code>[ODE]</code>.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-capture"><code>[CAPTURE]</code></a> block is used to indicate variables that should be “captured” in the simulation and returned to the user in R when <code>mrgsim()</code> is called. The user guide doesn’t say so explicitly, but from what I can tell the compartment amount variables are always captured, and you don’t need to list those here. The only things you need to specify here are the <em>other</em> quantities that you want the simulation to return. It supports the <code>@annotated</code> keyword, and I’ve used that here because honestly my sanity dissolves very quickly when trying to read model specification files that don’t use the annotations.</p></li>
</ul>
<p>Okay, now that I’ve written my model specification file let’s pivot back to my R session and use it to run a simulation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb65-2">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example1.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb65-3">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb65-4">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">960</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb65-5"></span>
<span id="cb65-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation and plot results</span></span>
<span id="cb65-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb65-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-38-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Yes, that all seems to work nicely. No, I did not have any solid justification for choosing these parameters. It’s just a toy.</p>
</section>
<section id="example-2-two-compartment-population-pk-model" class="level3">
<h3 class="anchored" data-anchor-id="example-2-two-compartment-population-pk-model">Example 2: Two compartment population-PK model</h3>
<p>The simulation in the previous section is relatively simple. It’s a one compartment model, there are no random effects or covariates, and the simulation involves only a single subject. The nonlinear clearance aspect is a little fancy, since <a href="https://en.wikipedia.org/wiki/Michaelis%E2%80%93Menten_kinetics">Michaelis-Menten kinetics</a> aren’t entirely simple, but apart from that there’s not much going on in this model.</p>
<p>Time to add some complexity. This time around I’ll build a standard two compartment model with first-order absorption and first-order elimination, but I’ll now allow random effects on all model parameters. Conventionally,<sup>20</sup> the variables in a population-PK model follow a uniform convention, and this is very often mirrored in software and analysis code. I’m now familiar enough with PK modelling that I’ve internalised these conventions, but since the audience of my blog is wider, here are the key ones:</p>
<ul>
<li>Population typical values are denoted with thetas (<img src="https://latex.codecogs.com/png.latex?%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CTheta">)<sup>21</sup></li>
<li>Population scale parameters are denoted with omegas (<img src="https://latex.codecogs.com/png.latex?%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">)</li>
<li>Random effect terms are denoted with etas (<img src="https://latex.codecogs.com/png.latex?%5Ceta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta">)</li>
<li>Variability of the measurement is denoted with sigmas (<img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CSigma">)</li>
</ul>
<p>With that little refresher out of the way, let’s have a look at the model specification file:</p>
<div class="cell" data-file="example2.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example2.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb66-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-2"></span>
<span id="cb66-3">This is a population<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>PK two<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compartment model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb66-4"></span>
<span id="cb66-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-6"></span>
<span id="cb66-7">TVVC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> VC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-8">TVVP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> VP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-9">TVKA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-10">TVCL   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-11">TVQ    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical value <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>volume<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-12"></span>
<span id="cb66-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OMEGA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-14"></span>
<span id="cb66-15">EVC   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on VC</span>
<span id="cb66-16">EVP   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on VP</span>
<span id="cb66-17">EKA   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on KA</span>
<span id="cb66-18">ECL   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on CL</span>
<span id="cb66-19">EQ    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Variance of random effect on Q</span>
<span id="cb66-20"></span>
<span id="cb66-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-22"></span>
<span id="cb66-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> VC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVVC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EVC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// central compartment volume</span></span>
<span id="cb66-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> VP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVVP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EVP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// peripheral compartment volume</span></span>
<span id="cb66-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EKA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate constant</span></span>
<span id="cb66-26"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ECL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance</span></span>
<span id="cb66-27"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> Q  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVQ  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EQ<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// intercompartmental clearance</span></span>
<span id="cb66-28"></span>
<span id="cb66-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-30"></span>
<span id="cb66-31">GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in gut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-32">CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-33">PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Drug amount in peripherhal compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb66-34"></span>
<span id="cb66-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>GLOBAL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-36"></span>
<span id="cb66-37"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CP </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CENT<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">   </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in central compartment</span></span>
<span id="cb66-38"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CT </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PERIPH<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>VP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// concentration in peripheral compartment</span></span>
<span id="cb66-39"></span>
<span id="cb66-40"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ODE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb66-41"></span>
<span id="cb66-42">dxdt_GUT    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-(</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-43">dxdt_CENT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-44">dxdt_PERIPH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> CT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb66-45"></span>
<span id="cb66-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb66-47"></span>
<span id="cb66-48">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>Things to notice here:</p>
<ul>
<li><p>The <code>[PARAM]</code> block is essentially the same as last time. The only difference is that I’ve now given all the variables a “TV” prefix, to indicate that they now refer to the population typical value for the corresponding quantity (e.g., <code>TVCL</code> is the typical value for clearance <code>CL</code>). I would have preferred a different naming scheme, personally, but since this approach is pretty standard in the field I’ll adhere to it. In any case, these “typical value” variables collectively form the <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta"> vector of fixed effects in the model.</p></li>
<li><p>The purpose of the <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-omega"><code>[OMEGA]</code></a> block to specify a variance-covariance matrix <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">, such that the vector of random effects <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta_i"> for the <img src="https://latex.codecogs.com/png.latex?i">-th simulated person is sampled from a multivariate normal distribution, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta_i%20%5Csim%20%5Cmbox%7BNormal%7D(%5Cboldsymbol%7B0%7D,%20%5Cboldsymbol%5COmega)">. By default, mrgsolve assumes that <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega"> is a diagonal matrix, so all you need to do is specify the vector of variances along the main diagonal.<sup>22</sup> The <code>[OMEGA]</code> block supports the <code>@annotated</code> option, which I’ve used here to provide human-readable explanations of each of the terms. Note that the variable names I’ve used here are things like <code>ECL</code>, <code>EVP</code>, and so on: the “E” prefix is short for “ETA” and indicates that they refer to the value of the sampled random effect term (i.e., an <img src="https://latex.codecogs.com/png.latex?%5Ceta"> value), not the variance itself (i.e., an <img src="https://latex.codecogs.com/png.latex?%5Comega"> value). In that sense I find it helpful to think of the <code>[OMEGA]</code> block as specifying the sampling scheme for the random effect terms, rather than literally a covariance matrix.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-main"><code>[MAIN]</code></a> block, as you might expect given the name, is interpreted with C++ syntax.<sup>23</sup> It serves multiple purposes, but what I’m using it for here is specifying relationships between variables. For instance, the code on line 26 defines the clearance <code>CL</code> for a specific subject as the product of the population typical value <code>TVCL</code> and the exponentiated random effect <code>exp(ECL)</code>.<sup>24</sup></p></li>
<li><p>The <code>[CMT]</code>, <code>[GLOBAL]</code>, <code>[ODE]</code>, and <code>[CAPTURE]</code> blocks are all more or less as they were before. The code is a little different because the model is different, but there’s no new concepts required to read these blocks.</p></li>
</ul>
<p>Now that we’ve talked through the code, let’s go back to R and run a simulation using this model. In the extract below I’ve run a small simulation with six individuals. They all have the same dosing schedule, but we end up with different data in each case because the model samples the random effect terms separately for each person:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define model, events, and times</span></span>
<span id="cb67-2">mod    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example2.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb67-3">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb67-4">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb67-5"></span>
<span id="cb67-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run simulation and plot results</span></span>
<span id="cb67-7">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb67-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-40-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As before, I haven’t tried to choose model parameters in the principled way: I just wanted to make sure the code is functioning properly.</p>
</section>
<section id="example-3-other-customisations" class="level3">
<h3 class="anchored" data-anchor-id="example-3-other-customisations">Example 3: Other customisations</h3>
<p>I’ll go through one last example, just to illustrate some of the other things you can build into your model specification file. The code below specifies a one-compartment population-PK model, and it incorporates a few features that haven’t appeared in any of the examples so far. First, the code:</p>
<div class="cell" data-file="example3.cpp">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>example3.cpp</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource cpp number-lines code-with-copy"><code class="sourceCode cpp"><span id="cb68-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PROB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-2"></span>
<span id="cb68-3">This is an example adapted from the user guide <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topics"</span> section<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span></span>
<span id="cb68-4"></span>
<span id="cb68-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PARAM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-6"></span>
<span id="cb68-7">TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical clearance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>hr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-8">TVV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">35.6</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical volume of distribution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-9">TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.35</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Typical absorption rate constant <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>hr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-10">WT   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>kg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-11">SEX  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Sex coded as male <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> female <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb68-12">WTCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Coefficient <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> the effect of weight on CL</span>
<span id="cb68-13">SEXV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.878</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Coefficient <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> the effect of sex <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> on V</span>
<span id="cb68-14"></span>
<span id="cb68-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-16"></span>
<span id="cb68-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVCL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WTCL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ECL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> V  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SEXV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> KA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TVKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> exp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>EKA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb68-20"></span>
<span id="cb68-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OMEGA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>correlation <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>block <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-22"></span>
<span id="cb68-23">ECL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.23</span>          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on CL</span>
<span id="cb68-24">EV  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on V</span>
<span id="cb68-25">EKA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.87</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Random effect on KA</span>
<span id="cb68-26"></span>
<span id="cb68-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>SIGMA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-28"></span>
<span id="cb68-29">PROP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Proportional residual error</span>
<span id="cb68-30">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Additive residual error</span>
<span id="cb68-31"></span>
<span id="cb68-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CMT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-33"></span>
<span id="cb68-34">GUT  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Dosing compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-35">CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Central compartment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-36"></span>
<span id="cb68-37"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>PKMODEL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-38"></span>
<span id="cb68-39">ncmt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> depot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TRUE</span>
<span id="cb68-40"></span>
<span id="cb68-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TABLE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb68-42"></span>
<span id="cb68-43"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb68-44"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> DV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> PROP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ADD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb68-45"></span>
<span id="cb68-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>CAPTURE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span>annotated</span>
<span id="cb68-47"></span>
<span id="cb68-48">CP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> True plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb68-49">DV <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> Observed plasma concentration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>mg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
</div>
</div>
<p>There’s a few things to note here.</p>
<ul>
<li><p>There is a binary-valued covariate <code>SEX</code><sup>25</sup> and a continuous covariate <code>WT</code> (weight) specified in the <code>[PARAM]</code> block. Coefficients specifying the effect of sex on distribution volume <code>SEXV</code> and the effect of weight on clearance <code>WTCL</code> are also included in the <code>[PARAM]</code> block. Although from a statistical perspective the value of the covariate that varies across person (<code>WT</code>) and the regression coefficient specifying an effect <code>WTCL</code> are very different kinds of thing, from a simulation perspective they’re both just numbers you can feed into the expressions in the <code>[MAIN]</code> block that define the pharmacokinetic quantities <code>CL</code>, <code>V</code>, and <code>KA</code>.</p></li>
<li><p>The <code>[OMEGA]</code> block now has correlated random effects. I’ve used the <code>@block</code> option to indicate that the off-diagonal elements are included in the code block, and the <code>@correlation</code> option to indicate that the off-diagonal elements are correlations (rather than covariances).</p></li>
<li><p>We now have sources of measurement error included in the model specification. The scale of the noise terms is set in the <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-sigma"><code>[SIGMA]</code></a> code block, and for this model we include both proportional error (variability scales proportional to the true value) and additive error (constant variability of error). Note that the <code>[SIGMA]</code> block is used only to declare the variables and set their values. To actually incorporate the measurement error into the model code, we use the <code>[TABLE]</code> block.</p></li>
<li><p>The <a href="https://mrgsolve.org/user-guide/specification.html#sec-block-table"><code>[TABLE]</code></a> block contains C++ code that is executed at the end of each time step, before the simulation steps forward to the next point in time. At this point the drug amounts in each compartment have been computed, as have any time-point dependent stochastic terms (i.e., the noise terms specified in the <code>[SIGMA]</code> block), and we can use them to calculate other quantities. In this case, I’ve used the <code>[TABLE]</code> block to calculate the blood plasma concentration <code>CP</code>, and to calculate a hypothetical dependent variable <code>DV</code> that has noise added.</p></li>
<li><p>The <code>[ODE]</code> block has been replaced with a <a href="https://mrgsolve.org/user-guide/specification.html#pkmodel"><code>[PKMODEL]</code></a> block. This is used to indicate that mrgsolve should use analytic solutions rather than an ODE solver. As you might expect, this is only possible for a smallish subset of models that (a) have analytic solutions that (b) are known to mrgsolve. In this particular case the model is a standard one-compartment model, for which analytic solutions are available. The <code>ncmt = 1</code> part of this block indicates that it’s a one-compartment model, and the <code>depot = TRUE</code> part indicates that the dosing compartment (the gut, in this case) should be included in the model even though it’s not a “real” compartment. Additional information on how this code block is parsed is <a href="https://mrgsolve.org/docs/reference/PKMODEL.html">here</a>.</p></li>
</ul>
<p>To see all this at work, let’s run a small simulation. First, we’ll read the model specification file and compile the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mread_file</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example3.cpp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Next, let’s take a look at the default parameters in this model. As you can see in the output, by default the subject is presumed to be a male who weighs 70kg:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=7):
 name value . name value
 SEX  0     | TVV  35.6 
 SEXV 0.878 | WT   70   
 TVCL 1.1   | WTCL 0.75 
 TVKA 1.35  | .    .    </code></pre>
</div>
</div>
<p>As usual, we’ll specify some dosing events and some time points at which the simulation will be evaluated. I’ll also set it up that we always simulate two subjects at whatever parameter values we feed into the simulation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb72-1">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ev_expand</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb72-2">times  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tgrid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delta =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
</div>
<p>Okay, now let’s run a simulation at the default parameter values. Here’s some data from two male subjects who both weigh 70kg:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb73-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> CP <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> DV)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-45-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The <code>~ CP + DV</code> formula in the <code>plot()</code> command is used to control which variables are plotted. I don’t want to show everything in these plots: we’re showing the drug concentration in the central compartment <code>CP</code>, and the hypothetical dependent variable <code>DV</code> obtained by adding measurement error to the <code>CP</code> value.</p>
<p>But suppose we didn’t actually want to simulate a 70kg male, and instead we want a 60kg female. To specify this, we have to update the relevant parameters in the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb74-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SEX =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WT =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span></code></pre></div>
</div>
<p>So now our model parameters look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">param</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
 Model parameters (N=7):
 name value . name value
 SEX  1     | TVV  35.6 
 SEXV 0.878 | WT   60   
 TVCL 1.1   | WTCL 0.75 
 TVKA 1.35  | .    .    </code></pre>
</div>
</div>
<p>Simulating from the model at these parameter settings gives us this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mrgsim_d</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> events, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tgrid =</span> times)</span>
<span id="cb77-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(out, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> CP <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> DV)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/index_files/figure-html/unnamed-chunk-48-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>Before wrapping up, some quick links to some resources:</p>
<ul>
<li><p>The <a href="https://mrgsolve.org/user-guide/">mrgsolve user guide</a> is probably not the place you want to start, because it very quickly dives in deep and talks about the domain specific language used to specify models, but once you’ve wrapped your head around the basics that’s the place to look for details.</p></li>
<li><p>The <a href="https://mrgsolve.org/vignettes/">mrgsolve vignettes</a> provide a nice place to start, but one thing you need to keep in mind is that the vignettes posted at <a href="https://mrgsolve.org/vignettes/">mrgsolve.org/vignettes</a> are not identical to the vignettes that appear on the pkgdown website (i.e., <a href="https://mrgsolve.org/docs/articles/">mrgsolve.org/docs/articles</a>), so it’s worth being careful to check which one you’re looking at!</p></li>
<li><p>Speaking of which, the <a href="https://mrgsolve.org/docs/">mrgsolve pkgdown site</a> provides all the usual documentation that you’d expect of an R package in the usual format. Function reference guides, some vignettes, links to github, etc., all that is there.</p></li>
<li><p>The <a href="https://mrgsolve.org/learn.html">learn mrgsolve</a> page on the mrgsolve website has links to presentations, courses, and other things that can be helpful in getting started.</p></li>
<li><p>Finally, there’s a <a href="https://mrgsolve.org/blog/">blog</a> associated with the package that has a variety of tips, tricks, updates and news.</p></li>
</ul>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>As with so many of my posts, I find that I’ve gotten to the end and I have no idea what else to say. I don’t write a post like this one to advocate for a package or a workflow, and I definitely don’t write these things to express opinions or whatever. I write because I enjoy writing and because the act of writing deepens my own understanding of a topic. Viewed from that perspective, writing this post has served its purpose so… mission accomplished?</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In this respect R is the unchallenged queen of languages in pharmacometrics. It’s very different to data science in the tech space, where Python is the lingua franca and R is seen as a second-class citizen. I have not yet seen a single example of anyone using Python for data analysis in this world. Judging from papers I’ve read, Julia has a small presence (e.g., you can use <a href="https://turing.ml/">Turing.jl</a> for building ODE models in Julia), but that’s the only time I’ve ever seen any statistical language other than R in this space.↩︎</p></li>
<li id="fn2"><p>The acronym PK is universally used as shorthand for “pharmacokinetics”, and a PK model is one where the primary variable you’re interested in modelling is the plasma concentration over time for some drug. If you’re totally new to this space, the post I wrote on <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a> was written from a total-newbie perspective and spells out a lot the basic terminology used in PK modelling.↩︎</p></li>
<li id="fn3"><p>There are a <em>lot</em> of tools in this space: NONMEM is the oldest and most-widely used, but in addition there’s Stan/Torsten, Monolix, nlmixr, Phoenix NLME, and probably many others I don’t know about yet…↩︎</p></li>
<li id="fn4"><p>I can’t tell if the original package is still under active development or if it’s been deprecated. The <a href="https://nlmixrdevelopment.github.io/RxODE/">RxODE</a> package still appears on the nlmixr website and on GitHub, but the package is (at present?) archived on CRAN.↩︎</p></li>
<li id="fn5"><p>Specifically, it wraps the public domain Fortran library <a href="https://computing.llnl.gov/projects/odepack">ODEPACK</a>.↩︎</p></li>
<li id="fn6"><p>In this example it’s not very interesting because CP is just the ratio of CENT and V, and since V doesn’t change over time, the curves for CP and CENT look identical. That isn’t true for simulations with multiple sujects, however, since V can and does vary across individuals.↩︎</p></li>
<li id="fn7"><p>As an aside, one thing I’ve noticed in the software development world is that developers who don’t work in statistics have a tendency to get very worked up about R having all these hyper-flexible functions that can behave in wildly different ways in different contexts. While I do understand that annoyance, I also think it’s often misplaced. R is fundamentally a <em>statistical programming language</em> and the primary goal is to support analysts. It’s not trying to be Python, and it’s even less interested in being Rust. You wouldn’t think so from social media discussions – which are massively skewed towards developers – but the typical R user is someone working interactively at the console, constructing a script iteratively as they explore and work with the data set they’ve been tasked to analyse. In that context, the hyper-flexibility of a lot of R functions is designed for the convenience of the analyst, not the convenience as a developer.↩︎</p></li>
<li id="fn8"><p>Developers reading this are probably wondering where the model shared object ends up when compilation happens. By default <code>mread()</code> puts the compiled model in the R temp folder, but you can override this in a persistent way by setting the <code>"mrgsolve.soloc"</code> option, or overriding it in the call to <code>mread()</code> via the <code>soloc</code> argument. You can also suppress compilation if you want by setting <code>compile = FALSE</code>. But probably any devs reading this would likely discover that within 5 minutes of reading the documentation anyway so there’s no real need for me to mention it.↩︎</p></li>
<li id="fn9"><p>I mean… of the <em>widely-used</em> OOP systems, it’s the one I’m least comfortable with. The wild abandon with which R spawns new object oriented programming systems is… a lot to keep up with.↩︎</p></li>
<li id="fn10"><p>Why yes, this blog post is <em>also</em> an exercise in “Danielle reminds herself how S4 works and no she bloody well is not going to talk about multiple inheritance and multiple dispatch in S4 here she’s not that much of a masochist”.↩︎</p></li>
<li id="fn11"><p>As an aside, <code>param(mod)</code> returns an S4 object of class “parameter_list” which in turn has a <code>show()</code> method that provides that prettified looking table pf parameters, but from a practical perspective you might just want to coerce it to a regular list using <code>as.list(param(mod))</code>.↩︎</p></li>
<li id="fn12"><p>There is also an <code>as.ev()</code> function that allows conversion in the other direction.↩︎</p></li>
<li id="fn13"><p>More precisely, method dispatch takes place off the <code>x</code> argument which is the first argument to the <code>ev()</code> generic, but since we’re talking about pipelines here, the name isn’t as important as the position.↩︎</p></li>
<li id="fn14"><p>As a rule I don’t dislike “magic” code. I mean… it would be weird to be an R user and not appreciate its virtues. Lazy evaluation and non-standard evaluation in R are powerful tools, and are the basis of a lot of “magic” in R. They make life a lot easier for the analyst but it comes at the price of making life harder for the developer. Because of that I’ve ended up with a habit of trying to dig into the details every time I find R code that feels magical.↩︎</p></li>
<li id="fn15"><p>To be precise, <code>ev()</code> is an S4 generic with dispatch on the <code>x</code> argument. If <code>x</code> is missing, the relevant <code>ev()</code> method returns an “ev” object. However, if <code>x</code> has class “mrgmod”, the relevant method returns another “mrgmod” object. I’ll confess this makes me a little uneasy.↩︎</p></li>
<li id="fn16"><p>Oh look, that apparently-irrelevant excursion she did talking about the mrgmod object slots turns out to be relevant! It’s almost as if she’s written things before!↩︎</p></li>
<li id="fn17"><p>I’m guessing that the logic here is that, even though some code blocks use R syntax, and others aren’t interpreted as code at all, the model build process is such that eventually it all becomes C++, and a C++ compiler constructs the binary. There’s logic to it, but it does feel a bit disorienting seeing “.cpp” files that aren’t actually C++ source.↩︎</p></li>
<li id="fn18"><p>I suspect that the <code>$BLOCKNAME</code> format is actually canonical because that’s the version you see when model code is printed when calling <code>see()</code>, but I’m going to use <code>[BLOCKNAME]</code> throughout this post because I personally find it easier to read. <a href="https://dictionary.cambridge.org/dictionary/english/ymmv">YMMV</a>.↩︎</p></li>
<li id="fn19"><p>Confession: I’m not 100% certain that the “T” in “CT” stands for tissue, since I copied this line from one of the models in the mrgsolve model library, but I think it’s the right interpretation given that the central compartment amount is usually intended to refer to “amount of drug the blood, sort of” and the peripheral compartment is “amount of drug in body tissues, sort of”. The “sort of” is important though: pharamacokinetic compartments are abstractions, and are they only loosely related to the corresponding physiology.↩︎</p></li>
<li id="fn20"><p>As far as I can tell, most of these conventions are “for compatibility with NONMEM”, and I am very rapidly starting to read “for compatibility with NONMEM” with exactly the same level of jaundiced cynicism that I apply when I find base R documentation that explains that R does something absolutely unhinged “for compatibility with S”. I deeply admire the commitment to backward compatibility and/or notational consistency, but also oh sweet lord in heaven it is <strong>EXHAUSTING</strong>.↩︎</p></li>
<li id="fn21"><p>In the spirit of stating assumptions, I’ll also add this. As is typical in many (but not all) disciplines: italicised lower case denotes a scalar, bold italic lower case denotes a vector, bold upper case denotes a matrix.↩︎</p></li>
<li id="fn22"><p>I’m not going to discuss them here, but note that the <code>@block</code> option allows you to pass a complete variance-covariance matrix, and the <code>@correlation</code> option allows you to specify correlations instead of covariances on the off-diagonals. The user guide discusses these and several other options that are supported in the <code>[OMEGA]</code> block. Of particular note: there’s a section in the user guide on <code>[OMEGA]</code> shows you how to use <code>@block</code> and <code>@annotated</code> together.↩︎</p></li>
<li id="fn23"><p>The <code>[MAIN]</code> block is analogous to the NONMEM <code>$PK</code> block, and indeed <code>[PK]</code> is allowed as an alias for <code>[MAIN]</code> in mrgsolve model specification files.↩︎</p></li>
<li id="fn24"><p>For folks used to linear regression models and random effect terms that compose additively with the fixed effect, it’s worth noting that in PK models everything tends to be log-linear. For any particular PK quantity <img src="https://latex.codecogs.com/png.latex?x">, the relationship takes the form <img src="https://latex.codecogs.com/png.latex?%5Clog%20x%20=%20%5Ceta_x%20+%20%5Clog%20%5Ctheta_x">.↩︎</p></li>
<li id="fn25"><p>I am absolutely <strong>not</strong> going to enter into any discussion of the respects in which sex is not strictly a binary variable, not in this post. There is a time and a place for that conversation, and this is neither that time nor that place. I mean, we’re talking about a category of statistical models that simplify the entire human body into “a couple of leaky buckets and a tinfoil ODE system”. They are extremely <strong>useful</strong> models, per George Box’s famous aphorism, but one does not ever presume they are biologically accurate. That would be absurd.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pharmacometric Simulation with Mrgsolve},
  date = {2023-08-14},
  url = {https://blog.djnavarro.net/posts/2023-08-14_mrgsolve},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pharmacometric Simulation with
Mrgsolve.”</span> August 14, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve">https://blog.djnavarro.net/posts/2023-08-14_mrgsolve</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/</guid>
  <pubDate>Sun, 13 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-14_mrgsolve/danilo-alvesd-a7OdG45prSM-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Four ways to write assertion checks in R</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-08-08_being-assertive/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>Once upon a time in a land far, far away, I was a bright young thing who wrote my data analyses with the kind of self-assured confidence that only a bright young thing can have. I trusted myself to write analysis code that does exactly what I wanted it to do. After all, I was a smart lady who knows her data and knows her analysis tools. In those halycon days of yore, before I’d been badly burned by sequentially arriving data that don’t have precisely the same structure every single time the data updates, I had the naivete to believe that if something changed in unexpected ways, <em>I’d notice it</em>.</p>
<p>Sweet summer child.</p>
<p>What I have learned since then, following the well-trodden path of every embittered old data analyst whose heart has shrivelled into a dark ball of data cynicism, is that none of this is true:</p>
<ul>
<li>I don’t know the tools as well as I think I do.</li>
<li>I don’t know the data as well as I think I do.</li>
<li>When the data change unexpectedly, I don’t always notice it.</li>
</ul>
<p>Worst of all: <strong>when my assumptions fail, my code can silently do the wrong thing and never throw an error</strong>. This happens very, very easily when data structure can change over time, or when code is reused in a new context. Which… happens a lot, actually.</p>
<p>Real world data are horrible.</p>
<p>Learning my lessons the hard way has taught me the importance of writing assertion checks. The idea behind an assertion check is very simple: write some code that makes sure that your code fails loudly by throwing an error as soon as an assumption is violated.<sup>1</sup> As the saying goes, you want your analysis code to fail fast and fail loudly every time that something is not “as expected”.</p>
<p>So. Let’s talk about four different approaches to writing assertions in R.<sup>2</sup></p>
<section id="just-stopifnot-scott" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="just-stopifnot-scott">Just <code>stopifnot()</code>, Scott</h2>
<p>Here’s a simplified version of a function that I use a lot in my generative art workflows. The <code>identifier()</code> function constructs a unique identifier for an output generated from a particular system:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb1-2">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb1-3">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb1-5">}</span></code></pre></div>
</div>
<p>So let’s say I’m creating a piece from a version 1 system called “rtistry”, and using 203 as my random seed. The unique identifier for this piece would be as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>The idea here is that:</p>
<ul>
<li>The identifier should consist of exactly three parts, separated by underscores</li>
<li>The first part should be the name of the generative art system</li>
<li>The second part should specify the version of the system as a two-digit number</li>
<li>The third part should specify the RNG seed used to generate this piece as a four-digit number</li>
</ul>
<p>For most of my systems this will produce a globally unique identifier, since I try to design them so that the only input parameter to the system is the RNG seed.</p>
<p>Notice, though, that there are some unstated – and unchecked! – assumptions about the kind of input that the function will receive. It’s implicitly assumed that <code>name</code> will be a character string that does not have any underscores, periods, or white spaces, and it’s also assumed that <code>version</code> and <code>seed</code> are both positive valued integers (or at least “integerish”) with upper bounds of 99 and 9999 respectively. Weirdness happens when I break those assumptions with my input:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "r tistry_1.02_0203"</code></pre>
</div>
</div>
<p>As a rule, of course, I don’t <em>deliberately</em> pass bad inputs to my functions, but if I want to be defensive about it, I should validate the inputs so that <code>identifier()</code> throws an error if I make a mistake and pass it input that violates the assumptions. The base R function <code>stopifnot()</code> is designed to solve exactly this problem:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb6-2">  </span>
<span id="cb6-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># throw error if any of the following assertions fail</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb6-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name must be a scalar</span></span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be a scalar</span></span>
<span id="cb6-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be a scalar</span></span>
<span id="cb6-8">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(version),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be a whole number</span></span>
<span id="cb6-9">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(seed),     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be a whole number</span></span>
<span id="cb6-10">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name can't have spaces, periods, or underscores </span></span>
<span id="cb6-11">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be positive</span></span>
<span id="cb6-12">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed must be less than 10000</span></span>
<span id="cb6-13">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be positive</span></span>
<span id="cb6-14">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># version must be less than 100</span></span>
<span id="cb6-15">  )</span>
<span id="cb6-16">  </span>
<span id="cb6-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb6-18">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb6-19">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb6-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb6-21">}</span></code></pre></div>
</div>
<p>Using <code>stopifnot()</code> in this way causes all of the following to error and throw informative error messages:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("r tistry", 1, 203): !stringr::str_detect(name, "[[:space:]._]") is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1.02, 203): rlang::is_integerish(version) is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1, 20013): seed &lt; 10000 is not TRUE</code></pre>
</div>
</div>
<p>The error messages aren’t the prettiest, but they do the job. In each case you can look at the error message and figure out what went wrong when calling the <code>identifier()</code> function. That said, you can sort of see the limitations to <code>stopifnot()</code> by looking at my source code: because <code>stopifnot()</code> throws pretty generic error messages that you can’t customise, my first instinct when writing the function was to group <em>all</em> my assertions into a single <code>stopifnot()</code> call, and then – because there isn’t a lot of structure to my assertion code – I’ve added comments explaining what each assertion does. That’s… fine. But not ideal.</p>
<p>As it turns out, there <em>are</em> ways to provide more informative error messages with <code>stopifnot()</code>. You can write a <code>stopifnot()</code> assertion as a name-value pair:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be scalar"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>If this assertion is violated, the error message thrown by the <code>stopifnot()</code> function corresponds to the name of the assertion, as illustrated below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> </span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be scalar"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `version` must be scalar</code></pre>
</div>
</div>
<p>It’s kind of clunky but it works.</p>
<p>Actually, I have a confession to make. I actually didn’t know this trick until I’d already posted the original version of this post to the internet, so I have Jim Gardner to thank for kindly called my attention to it.</p>
<p><strong>Summary</strong>: <code>stopifnot()</code> is suprisingly effective. It’s very general, and works for any expression that yields <code>TRUE</code> or <code>FALSE</code>. There are no dependencies since it’s a base R function. It does have some downsides: dealing with error messages is a bit clunky, and the code isn’t always the prettiest, but nevertheless it does the job that needs doing.</p>
</section>
<section id="just-assert_that-kat" class="level2">
<h2 class="anchored" data-anchor-id="just-assert_that-kat">Just <code>assert_that()</code>, Kat</h2>
<p>The <a href="https://github.com/hadley/assertthat">assertthat</a> package is designed to provide a drop-in replacement for the <code>stopifnot()</code> function, one that allows you to compose your own error messages when an assertion fails. It does have a variety of other convenience functions, but to be honest the main advantage over <code>stopifnot()</code> is the superior control over the error message. In practice, I find that this functionality allows me to write assertion code that is (a) easier to read, and (b) produces better error messages when an assertion fails.</p>
<p>To illustrate, here’s the code I end up with when I revisit my generative art <code>identifier()</code> function using assertthat:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertthat)</span>
<span id="cb16-2"></span>
<span id="cb16-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb16-4">  </span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(version) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(seed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`name`, `version`, and `seed` must all have length 1"</span></span>
<span id="cb16-10">  )</span>
<span id="cb16-11"></span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(   </span>
<span id="cb16-13">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>),</span>
<span id="cb16-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`name` must not contain white space, periods, or underscores"</span></span>
<span id="cb16-15">  )</span>
<span id="cb16-16"></span>
<span id="cb16-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-18">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(version),</span>
<span id="cb16-19">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb16-20">    version <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb16-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`version` must be a whole number between 1 and 99"</span></span>
<span id="cb16-22">  )</span>
<span id="cb16-23">   </span>
<span id="cb16-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_that</span>(</span>
<span id="cb16-25">    rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(seed),</span>
<span id="cb16-26">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb16-27">    seed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,</span>
<span id="cb16-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">msg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`seed` must be a whole number between 1 and 9999"</span>    </span>
<span id="cb16-29">  )</span>
<span id="cb16-30">  </span>
<span id="cb16-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb16-32">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb16-33">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb16-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb16-35">}</span></code></pre></div>
</div>
<p>Like <code>stopifnot()</code>, the <code>assert_that()</code> function allows you to construct arbitrary assertions, which I find useful. Additionally, the <code>assert_that()</code> function has some nice properties when compared to <code>stopifnot()</code>. Because it takes a <code>msg</code> argument that allows you to specify the error message, it gently encourages you to group together all the assertions that are of the same kind, and then write an informative message tailored to that subset of the assertion checks. This produces readable code because the error message is right there next to the assertions themselves, and the assertions end up being more organised than when I used <code>stopifnot()</code> earlier.</p>
<p>In any case, let’s have a look. First, let’s check that this works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>Second, let’s check that all of these fail and throw readable error messages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `name` must not contain white space, periods, or underscores</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `version` must be a whole number between 1 and 99</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error: `seed` must be a whole number between 1 and 9999</code></pre>
</div>
</div>
<p>I find myself preferring this as a way of generating error messages when input arguments to a function don’t receive appropriate input. Because I know what I want the function to do, I’m able to write concise but informative error messages that are appropriate to the specific set of assertions that I’ve included within any particular <code>assert_that()</code> call.</p>
<p><strong>Summary</strong>: The assertthat package has a pretty specific aim: to provide an <code>assert_that()</code> function works as a drop-in replacement for <code>stopifnot()</code> that allows custom error messages. Given that limited goal, it works nicely.</p>
</section>
<section id="just-assert_-it-kit" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="just-assert_-it-kit">Just <code>assert_*()</code> it, Kit</h2>
<p>The <a href="https://bitbucket.org/richierocks/assertive/">assertive</a> package provides a large collection of <code>assert_*()</code> functions that are each tailored to a specific type of assertion, and designed to produce error messages that are tailored to that specific case. Here’s an example where I apply this approach to checking the inputs to the <code>identifier()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertive)</span>
<span id="cb25-2"></span>
<span id="cb25-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb25-4"></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(version)</span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(name)</span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(seed)</span>
<span id="cb25-8">  </span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_integer</span>(version)</span>
<span id="cb25-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_integer</span>(seed)</span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_positive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version))</span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(version, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb25-14">  </span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_not_matching_regex</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>)</span>
<span id="cb25-16"></span>
<span id="cb25-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb25-18">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb25-19">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb25-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb25-21">}</span></code></pre></div>
</div>
<p>I’d probably argue that this is the most readable version of the code yet. The <code>assert_*()</code> functions have such transparently informative names that there’s no need at all for comments. However, there are some downsides to this approach, which become a little more apparent when we look at the error messages that it throws when I pass bad inputs to the <code>identifier()</code> function:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r tistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("r tistry", 1L, 203L): is_not_matching_regex : name does not match "[[:space:]._]"
There was 1 failure:
  Position    Value                   Cause
1        1 r tistry matches '[[:space:]._]'</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.02</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1.02, 203L): is_integer : version is not of class 'integer'; it has class 'numeric'.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20013</span>L)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1L, 20013L): is_less_than : seed are not all less than 10000.
There was 1 failure:
  Position Value                          Cause
1        1 20013 greater than or equal to 10000</code></pre>
</div>
</div>
<p>Because I don’t have custom error message code in my assertions, the errors that get returned to the user are a little bit opaque. They’re more informative than the <code>stopifnot()</code> versions, and because each assertion throws its own error message tailored to that function, the results are rather better suited to the context. Even so, they’re still quite long and there’s some cognitive effort required by the user to figure out what happened.</p>
<p>There’s a second issue here. Notice that when I wanted to pass a good input for <code>seed</code> or <code>version</code> in this version of the function, I used explicitly integer-classed values (e.g., <code>203L</code> not <code>203</code>). There’s a reason I did that. The <code>assert_is_integer()</code> function uses <code>is.integer()</code> test for integer status, which returns <code>TRUE</code> only when passed an actual integer. It returns <code>FALSE</code> when passed an “integerish” double:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>Because my assertion is a check for integer status not “integerish” status, this version of the <code>identifier()</code> function is more strict about type checking than I really want it to be, and this fails:</p>
<div class="cell column-body-outset">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in identifier("rtistry", 1, 203): is_integer : version is not of class 'integer'; it has class 'numeric'.</code></pre>
</div>
</div>
<p>Now, to be fair, there are of course many situations where you really do want to be strict about type checking integers: the integer representation of <code>203L</code> is a different underlying object to the floating point representation of <code>203</code>, and while R is usually pretty chill about this, it’s important to keep in mind that doubles and integers are fundamentally different data types. That being said, it’s vanishingly rare for this to actually matter in my generative art process, and I’d prefer to let this one slide.</p>
<p>This kind of thing is where you can run into some difficulties using the <code>assert_*()</code> functions. If there isn’t a specific assertion function tailored for your use case (as occurs with “integerish” check in <code>identifier()</code>) you’re left with the dilemma of either choosing an assertion that isn’t quite right, or else falling back on a general-purpose assertion like <code>assert_all_are_true()</code>. For example, this works…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertive)</span>
<span id="cb38-2"></span>
<span id="cb38-3">identifier <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, version, seed) {</span>
<span id="cb38-4"></span>
<span id="cb38-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(version)</span>
<span id="cb38-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(name)</span>
<span id="cb38-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_is_scalar</span>(seed)</span>
<span id="cb38-8">  </span>
<span id="cb38-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_true</span>(rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_integerish</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version)))</span>
<span id="cb38-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_positive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(seed, version))</span>
<span id="cb38-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(seed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb38-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_less_than</span>(version, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb38-13">  </span>
<span id="cb38-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert_all_are_not_matching_regex</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[:space:]._]"</span>)</span>
<span id="cb38-15"></span>
<span id="cb38-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the actual work of the function</span></span>
<span id="cb38-17">  version <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(version, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb38-18">  seed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_pad</span>(seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pad =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb38-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(name, version, seed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) </span>
<span id="cb38-20">}</span>
<span id="cb38-21"></span>
<span id="cb38-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identifier</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtistry"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">203</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "rtistry_01_0203"</code></pre>
</div>
</div>
<p>…but it’s not quite as elegant as you might hope. Nevertheless, I’m not being critical here. It’s impossible to write a package like assertive in a way that covers every use case, and it’s pretty impressive that it has the breadth that it does.</p>
<p><strong>Summary</strong>: Because it provides a huge number of well-named assertion functions, the assertive package tends to produce very readable code, and because each of those functions produces errors that are tailored to that check, the error messages tend to be useful too. It does get a little awkward when there isn’t an assertion for your use case, but usually there’s a way to work around that.</p>
</section>
<section id="just-assertr-carr" class="level2">
<h2 class="anchored" data-anchor-id="just-assertr-carr">Just assertr, Carr</h2>
<p>The <a href="https://docs.ropensci.org/assertr/">assertr</a> package solves a different problem to the other three methods discussed here. The other three approaches are general-purpose tools and – with various strengths and weaknesses – they’re designed to be used when checking an <em>arbitrary</em> input. The assertr package is more specialised: it focuses on checking a <em>data</em> input, specifically a tabular data object like a data frame or a tibble. Because it’s focused on that particular – and extremely important – special case, it’s able to provide a more powerful way of validating the content of a data frame.</p>
<p>In that sense, assertr is complementary to the other three approaches. For example, you could use assertr to check the <code>data</code> input to a function that takes a data frame as the primary argument, but then use (say) <code>assert_that()</code> to test the others.</p>
<p>To get started, I’ll load the packages I’m going to use in this section:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb40-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(assertr)</span></code></pre></div>
</div>
<p>The assertr package provides three primary verbs, <code>verify()</code>, <code>assert()</code>, and <code>insist()</code>. They all take a data set as the first argument and (by default) returns the original data set unaltered if the checks pass, which makes it include them as part of a data pipeline. There’s also two row-wise variants <code>assert_rows()</code> and <code>insist_rows()</code>. For the purposes of this post I’ll limit myself to talking about the simplest cases, <code>verify()</code> and <code>assert()</code>.</p>
<p>Let’s start with <code>verify()</code>. The <code>verify()</code> function expects to receive an expression as the first non-data argument amd yields a logical value, which is then evaluated in the data context. If the expression evaluates to <code>FALSE</code>, an error is thrown.</p>
<p>Here’s a simple example using <code>verify()</code>. My data set comes from the <a href="https://en.wikipedia.org/wiki/List_of_Archibald_Prize_winners">List of Archibald Prize Winners</a> wikipedia page. The Archibald Prize is a one of the most prestigious art prizes in Australia, awarded for painted portraits, and has been awarded (almost!) annually since 1921. My data set looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">archibald <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"archibald.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb41-2">archibald</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 166 × 6
   prize           year  artist            title         subject n_finalists
   &lt;chr&gt;           &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt;         &lt;dbl&gt;
 1 Archibald Prize 1921  William McInnes   Desbrowe Ann… Harold…          45
 2 Archibald Prize 1922  William McInnes   Professor Ha… Willia…          53
 3 Archibald Prize 1923  William McInnes   Portrait of … Violet…          50
 4 Archibald Prize 1924  William McInnes   Miss Collins  Gladys…          40
 5 Archibald Prize 1925  John Longstaff    Maurice Mosc… Mauric…          74
 6 Archibald Prize 1926  William McInnes   Silk and Lac… Esther…          58
 7 Archibald Prize 1927  George W. Lambert Mrs Annie Mu… Annie …          56
 8 Archibald Prize 1928  John Longstaff    Dr Alexander… Alexan…          66
 9 Archibald Prize 1929  John Longstaff    The Hon W A … Willia…          75
10 Archibald Prize 1930  William McInnes   Drum-Major H… Harry …          67
# ℹ 156 more rows</code></pre>
</div>
</div>
<p>To be precise, there are actually three different prizes included in the data set. There’s the original Archibald Prize (the famous one), and two more recent additions that are awarded using the same pool of entrants: the People’s Choice Award (which is what you’d think), and the Packing Room Prize (awarded by the staff who install the portraits in the gallery).</p>
<p>For my first analysis then, I want to do a simple tabulation: count the number of times any given artist has won a particular prize, and sort the results in descending count order. So the analysis part of my data pipeline would look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
</div>
<p>However, I might want to <code>verify()</code> a few things first. I’d like to check that <code>prize</code> and <code>artist</code> both exist as columns in the data, and both contain character data. I can use the base R function <code>exists()</code> to check that the variables exist within the data context, and <code>is.character()</code> to check the variable type:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>In this case, all the <code>verify()</code> checks pass, so no errors are thrown and the analysis proceeds in the usual way. But suppose that the <code>artist</code> variable was actually supposed to be called <code>painter</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"painter"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"painter"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(painter, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb46-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>verification [exists("painter")] failed! (1 failure)

    verb redux_fn         predicate column index value
1 verify       NA exists("painter")     NA     1    NA</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error: assertr stopped execution</code></pre>
</div>
</div>
<p>There is no <code>painter</code> variable in the data set, so the assertion checks fail, and an error message is thrown. The form of the error message is rather elaborate though. There is a reason why assertr defaults to this strange-looking format: often there are multiple errors that appear in an assertion check, and by default assertr will group them into a table summarising all the issues.</p>
<p>There’s something a little repetitive about the validation code I wrote above. If my analysis pipeline involved many variables, it would be a bit obnoxious to write a separate <code>verify()</code> line to check that they all exist. For the column name checks, assertr provides a convenience function <code>has_all_names()</code> that you can use specifically for this purpose:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>For the type checking, however, there’s no equivalent convenience function and if you want to group multiple <code>verify()</code> checks what you want to do is use the <code>assert()</code> function. The first non-data argument to <code>assert()</code> specifies a predicate function that is applied to a set of columns.<sup>4</sup> If the predicate function returns <code>FALSE</code>, the <code>assert()</code> function errors.</p>
<p>Rewriting the <code>verify()</code> code from our “successful” example as <code>assert()</code> checks gives us this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"artist"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize, artist) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(artist, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(n))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 118 × 3
   artist            prize                     n
   &lt;chr&gt;             &lt;chr&gt;                 &lt;int&gt;
 1 William Dargie    Archibald Prize           8
 2 William McInnes   Archibald Prize           7
 3 Ivor Hele         Archibald Prize           5
 4 John Longstaff    Archibald Prize           5
 5 Vincent Fantauzzo People's Choice Award     4
 6 Clifton Pugh      Archibald Prize           3
 7 Eric Smith        Archibald Prize           3
 8 Robert Hannaford  People's Choice Award     3
 9 William Dobell    Archibald Prize           3
10 William Pidgeon   Archibald Prize           3
# ℹ 108 more rows</code></pre>
</div>
</div>
<p>One thing I really like about the design of assertr is that pipe-friendly assertion checks make it possible to add your assertion checks at the appropriate point in the analysis pipeline. For instance, let’s suppose I want to look at the number of finalists in the Archibald Prize each year. The raw data only records <code>n_finalists</code> for the Archibald Prize, not the Packing Room Prize or the People’s Choice Award. Rows in the data corresponding to those latter prizes will always have <code>NA</code> values for <code>n_finalists</code>, but that isn’t a problem for my proposed analysis. The <em>only</em> missingness of possible concern to me is for the Archibald Prize proper. So I can write my assertion checks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb53-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_finalists"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.numeric, n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archibald Prize"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(\(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x), n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb53-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb53-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n_finalists),</span>
<span id="cb53-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(n_finalists),</span>
<span id="cb53-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_finlists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(n_finalists)</span>
<span id="cb53-11">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Column 'n_finalists' violates assertion 'function(x) !is.na(x)' 2 times
    verb redux_fn             predicate      column index value
1 assert       NA function(x) !is.na(x) n_finalists    13    NA
2 assert       NA function(x) !is.na(x) n_finalists    69    NA</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error: assertr stopped execution</code></pre>
</div>
</div>
<p>Okay, so there is in fact a case where missingness is a problem in two rows of the data set, <em>for the explicit subset of the data I care about</em>. As it happens though, I simply don’t care when it’s only those two years, so for the purposes of this example I’ll filter those rows out before they even hit the assertion check, and unsurprisingly this runs without erroring:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">archibald <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb56-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_all_names</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prize"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_finalists"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.character, prize) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(is.numeric, n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(prize <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archibald Prize"</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(n_finalists)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assert</span>(\(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x), n_finalists) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb56-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb56-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n_finalists),</span>
<span id="cb56-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_finalists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(n_finalists),</span>
<span id="cb56-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_finlists =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(n_finalists)</span>
<span id="cb56-11">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  min_finalists median_finalists max_finlists
          &lt;dbl&gt;            &lt;dbl&gt;        &lt;dbl&gt;
1            15               52          197</code></pre>
</div>
</div>
<p>In addition to <code>verify()</code> and <code>assert()</code>, there are three other assertion functions in assertr. I’m not going to dive into those for the purposes of this post – that’s what the package documentation is there for! – but the TL;DR is as follows:</p>
<ul>
<li><code>insist()</code> works like <code>assert()</code> but it takes a “predicate generator” function instead of a “predicate” function, which makes it possible to specify an assertion check for a tidy selection of columns and have the predicate generator handle each column according to its own logic</li>
<li><code>assert_rows()</code> is a row-wise version of <code>assert()</code></li>
<li><code>insist_rows()</code> is a row-wise version of <code>insist()</code></li>
</ul>
<p><strong>Summary</strong>: My overall feeling is that assertr is probably the most powerful tool for assertion checks applied to tabular data. It lacks the generality of the other tools, true, but the special case that it works for is a really important one for data analysts. Data objects tend to have their own special issues, and pretty much every data analysis takes at least one data frame as an input, so it’s really convenient to have a specialised tool for that scenario.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The idea is very similar to writing unit checks for software development. The difference is that unit tests are run at build time, whereas assertions apply at run time.↩︎</p></li>
<li id="fn2"><p>It should be noted that these aren’t the only packages out there to support assertions in R. There are at least three others that I’m aware of but haven’t yet tried, and probably many others that I don’t know about. For what it’s worth, these are the other three I know of: the <a href="https://github.com/smbache/ensurer">ensurer</a>, <a href="https://github.com/mllg/checkmate">checkmate</a>, and <a href="https://github.com/gastonstat/tester">tester</a> packages can all be used for this purpose, and I’m sure I could come up with terrible rhymes for those too, but there’s a limit to how much effort I want to put into this post.↩︎</p></li>
<li id="fn3"><p>In general, assertr doesn’t supply lots of convenience functions, but <code>has_all_names()</code> is an important special case because it’s used to check for the <em>existence</em> of columns, and that requires a special workflow. For type checking assertions, I can group together multiple <code>verify()</code> checks into a single <code>assert()</code> check that takes a tidy selection of columns. But for that to work the columns actually have to exist, so you can’t use <code>assert()</code> for existence checks! Hence (I presume) the inclusion of the <code>has_all_names()</code> convenience function.↩︎</p></li>
<li id="fn4"><p>Column names are unquoted and are passed through the dots <code>...</code>. The documentation notes that the dots are passed to <code>dplyr::select()</code>, and accordingly the <code>assert()</code> function supports tidy selection.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Four Ways to Write Assertion Checks in {R}},
  date = {2023-08-08},
  url = {https://blog.djnavarro.net/posts/2023-08-08_being-assertive},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Four Ways to Write Assertion Checks in
R.”</span> August 8, 2023. <a href="https://blog.djnavarro.net/posts/2023-08-08_being-assertive">https://blog.djnavarro.net/posts/2023-08-08_being-assertive</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-08-08_being-assertive/</guid>
  <pubDate>Mon, 07 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-08-08_being-assertive/50_ways.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Getting started with Torsten</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-07-15_torsten/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>In recent months I’ve been gradually teaching myself pharmacometrics, and <a href="https://blog.djnavarro.net/category/pharmacometrics">writing blog posts as I go</a>. I started out writing about relatively simple methods for <a href="../../posts/2023-04-26_non-compartmental-analysis/">non-compartmental analysis</a>, moved on to talking about <a href="../../posts/2023-05-16_stan-ode/">compartmental analysis with Stan</a>, and then to <a href="../../posts/2023-06-10_pop-pk-models/">population pharmacokinetic models in Stan</a>. Now it feels like time for me to move on to looking at <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten</a>.</p>
<p>What’s Torsten, you ask?</p>
<p>Torsten is essentially a forked copy of <a href="https://mc-stan.org/">Stan</a> that has a collection of functions added that can be useful in pharmacometric analyses. As described by <a href="https://doi.org/10.1002/psp4.12926">Elmokadem et al (2023)</a>:</p>
<blockquote class="blockquote">
<p>Torsten is a library of Stan functions built to facilitate analysis of pharmacometric data … [It] contains functions to build specific linear compartmental models as one and two-compartment models with first-order absorption into the central compartment, general linear models that can be expressed as a system of linear ordinary differential equations (ODEs), general compartmental models that can be expressed as a system of ODEs.</p>
</blockquote>
<p>The name “Torsten” refers to Torsten Teorell, described as the <a href="https://doi.org/10.3109/03009739509178895">father of pharmacokinetics</a>. The preview image of this post is taken from the figures in a 1937 paper by Teorell:</p>
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/torsten-figs.png" class="img-fluid"></p>
<p>I do like knowing where the names of things come from, and the history to different disciplines. But to be fair that’s not the purpose of this post, so let’s set the history to one side and take a look at the software. The website is quite clear that Torsten is currently (as of version 0.89rc) a prototype:</p>
<blockquote class="blockquote">
<p>WARNING: The current version of Torsten is a prototype. It is being released for review and comment, and to support limited research applications. It has not been rigorously tested and should not be used for critical applications without further testing or cross-checking by comparison with other methods. We encourage interested users to try Torsten out and are happy to assist. Please report issues, bugs, and feature requests on our GitHub page.</p>
</blockquote>
<p>My goals in this post are modest:</p>
<ul>
<li>Install Torsten and make sure it’s working</li>
<li>Understand the data format expected by the Torsten-specific solvers</li>
<li>Work my way through the model file for simple two-compartment analysis</li>
<li>Work out what’s going on regarding analytic solutions in Torsten</li>
</ul>
<p>As usual, the notes are mostly intended for the benefit of future-me, who absolutely will have forgotten all this in a week from now. But it’s possible that other people may find them helpful too I suppose. Anyway, here goes…</p>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>Installing Torsten starts by cloning the <a href="https://github.com/metrumresearchgroup/Torsten">GitHub repository</a>. Just recently I’ve gotten into the habit of using the <a href="https://cli.github.com/">GitHub command line tool</a> for tasks like this, so the command I used was this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ~/GitHub</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> repo clone metrumresearchgroup/Torsten</span></code></pre></div>
<p>But really, anything that clones a repository will work.</p>
<p>Once you have a copy of the repo, you can build Torsten in any number of ways. Given that I’m usually working from R, the most convenient way for me to do this is with the cmdstanr package. If you don’t have the cmdstanr package, you need to install it first. It’s not on CRAN but you can install it by adding the Stan repository to the <code>repos</code> path when calling <code>remotes::install_cran()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_cran</span>(</span>
<span id="cb2-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkgs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmdstanr"</span>, </span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://mc-stan.org/r-packages/"</span>, </span>
<span id="cb2-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"repos"</span>)</span>
<span id="cb2-6">    )</span>
<span id="cb2-7">)</span></code></pre></div>
</div>
<p>Next, you need to make sure that cmdstanr uses the Torsten version of Stan, and not any other version of Stan that you might have installed on your system. This is important because Torsten supplies various functions that we’ll need, and especially important in my case because I also have a “vanilla” copy of Stan installed elsewhere on my laptop. Here’s how I do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">torsten_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/GitHub/Torsten"</span></span>
<span id="cb3-2">cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_cmdstan_path</span>(fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(torsten_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmdstan"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>CmdStan path set to: /home/danielle/GitHub/Torsten/cmdstan</code></pre>
</div>
</div>
<p>In a moment, I’m going to try to compile a Stan/Torsten model (and indeed compile Torsten itself), so it’s important to make sure the C++ toolchain is set up properly. If you already have C++ compilers set up on your machine (which I do) then you probably don’t need to do anything special to make sure that everything compiles properly, but just to be safe we’ll check:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_cmdstan_toolchain</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The C++ toolchain required for CmdStan is setup properly!</code></pre>
</div>
</div>
<p>Excellent. Now comes the acid test: let’s see if we can use Torsten to build and sample from a Stan model that specifically requires Torsten functions. I’m following the <a href="https://metrumresearchgroup.github.io/Torsten/installation/#testing">instructions on the installation page</a> here, more or less. But I’m going to walk through the process a little more slowly than those instructions do.</p>
<p>The first step here is to compile the Stan model. The very first time you do this, it can take a moderately long time because two things are happening:</p>
<ul>
<li>First, the compiler need to compile the modified copy of Stan that Torsten ships with. That takes a while, but fortunately it only has to be done once.</li>
<li>Second, the compiler needs to compile the “pk2cpt” model itself. This is fairly fast. This compilation step only happens when the model binary is out of date.</li>
</ul>
<p>Fortunately for me I’ve already done this step once before and I have both binaries compiled already so it all happens instantaneously. In any case, here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">model_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(torsten_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example-models"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt"</span>)</span>
<span id="cb7-2">model_src <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.stan"</span>)</span>
<span id="cb7-3">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdstan_model</span>(model_src)</span></code></pre></div>
</div>
<p>The key thing to note here is that the “pk2cpt.stan” source code relies on Torsten-specific functions that don’t exist in vanilla Stan. It won’t work if you’re not using the Torsten version of Stan. The mere fact that it compiles is itself telling us that it’s all configured correctly.</p>
<p>So now we fit the model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">model_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb8-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.data.R"</span>),</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">init =</span> fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(model_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pk2cpt.init.R"</span>),</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>,</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parallel_chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb8-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_messages =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 chains, at most 2 in parallel...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 7.5 seconds.
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 finished in 7.5 seconds.
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup) 
Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 7.1 seconds.
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 7.7 seconds.

All 4 chains finished successfully.
Mean chain execution time: 7.5 seconds.
Total execution time: 15.4 seconds.</code></pre>
</div>
</div>
<p>When doing this interactively, you should set <code>show_messages = TRUE</code> so that you can see the “informational messages”. As I’m coming to learn, it’s grossly typical of ODE models that you get a few warning messages during the early stages of warmup. But Stan messages tend to be quite good, and in this case they’re quite helpful in reassuring us that there’s not a problem in this instance (they occur early while the MCMC sampler is in a very weird part of the space and then disappear). I’ve suppressed them here because they make the quarto blog output messier than it needs to be. All good.</p>
<p>To draw a pretty picture showing the posterior distribution of the clearance rate parameter for this model (CL), we can do this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remotes::install_cran("bayesplot")</span></span>
<span id="cb10-2">bayesplot<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mcmc_dens_overlay</span>(model_fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CL"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/index_files/figure-html/prettiness-pk2cpt-model-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>That looks right. Torsten is configured correctly, the model compiles, the sampler works, and the posterior distributions plotted here mirror the ones that are secretly tucked away in an output file here:</p>
<pre><code>[torsten-directory]/example-models/pk2cpt/deliv/figure/density.pdf</code></pre>
<p>My first goal is accomplished. We are good to go!</p>
</section>
<section id="the-data-file" class="level2">
<h2 class="anchored" data-anchor-id="the-data-file">The data file</h2>
<p>Okay, so now that I’ve succeeded in doing <em>something</em> with Torsten, it would be nice to have a better sense of what precisely I’ve done. Obviously<sup>1</sup> I’ve run a Stan model of some kind on some data set, but the Torsten documentation doesn’t really go into a lot of detail here.</p>
<p>I’ll start by taking a look at the data. I’ve cached a copy of the data file along with this post, located at <code>./example/pk2cpt_data.R</code> relative to this quarto document. The file defines the variables needed by Stan as R vectors, but to make my life a little easier I’ll organise them into a tibble that resembles a NONMEM-style <a href="https://metrumresearchgroup.github.io/Torsten/function/events/">event schedule</a>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./example/pk2cpt_data.R"</span>)</span>
<span id="cb12-2">pk2cpt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cmt =</span> cmt,</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">evid =</span> evid,</span>
<span id="cb12-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">addl =</span> addl,</span>
<span id="cb12-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ss =</span> ss,</span>
<span id="cb12-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amt =</span> amt, </span>
<span id="cb12-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> time,</span>
<span id="cb12-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rate =</span> rate,</span>
<span id="cb12-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ii =</span> ii,</span>
<span id="cb12-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dv =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb12-12">)</span>
<span id="cb12-13">pk2cpt_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dv[iObs] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cObs</span>
<span id="cb12-14">pk2cpt_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 54 × 9
     cmt  evid  addl    ss   amt  time  rate    ii    dv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     1     1    14     0 80000 0         0    12   NA 
 2     2     0     0     0     0 0.083     0     0  359.
 3     2     0     0     0     0 0.167     0     0  663.
 4     2     0     0     0     0 0.25      0     0 1106.
 5     2     0     0     0     0 0.5       0     0 1185.
 6     2     0     0     0     0 0.75      0     0 1802.
 7     2     0     0     0     0 1         0     0 2296.
 8     2     0     0     0     0 1.5       0     0 2008.
 9     2     0     0     0     0 2         0     0 2001.
10     2     0     0     0     0 3         0     0 1115.
# ℹ 44 more rows</code></pre>
</div>
</div>
<p>I am firmly of the opinion that these aren’t good variable names, but they are completely standard in the field so I’m just going to have to memorise them. To that end, and despite the fact that I have written a version of this about a dozen times already, here’s what each of those variables refers to:</p>
<ul>
<li><code>cmt</code>: compartment number to which the row refers</li>
<li><code>evid</code>: event id (0=observation, 1=dose, 2=other)</li>
<li><code>addl</code>: number of additional identical doses given</li>
<li><code>ss</code>: is it steady-state dosing? (0=false, 1=true)</li>
<li><code>amt</code>: dose amount administered at this time</li>
<li><code>time</code>: time of observation/administration</li>
<li><code>rate</code>: rate of drug infusion (=0 for bolus administration)</li>
<li><code>ii</code>: interdose interval: time between additional doses</li>
<li><code>dv</code>: the dependent variable (observed concentration)</li>
</ul>
<p>The key point here is that (unlike in my previous post where I used a slightly different data structure in my bespoke Stan model), Torsten functions expect input variables that look very similar to those used in NONMEM. Fair enough.</p>
<p>Now that I have a sense of the data structure, let’s plot it to see what the observed pharmacokinetic function looks like. In the plot below, the dotted vertical lines mark the moments at which additional doses were administered. The circular markers connected by solid lines represent the observed drug concentrations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">pk2cpt_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(evid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-3">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, dv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-4">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(</span>
<span id="cb14-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb14-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey50"</span>,</span>
<span id="cb14-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotted"</span></span>
<span id="cb14-8">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-9">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-10">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-11">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-12">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Concentration"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-13">    ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-07-15_torsten/index_files/figure-html/pk2cpt-plot-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The solid lines connecting the dots are a bit misleading. For the first, second, and last doses, measurements are taken regularly enough that you can see the rise and fall of drug concentration associated with each dose. For all other doses, however, there’s only a single measurement taken immediately before the dose is administered, with the result that it looks like a fairly flat function through the middle of the data. This makes total sense from an experimental design point of view, of course, it’s just important to remember that there’s a good reason why the observed data has this slightly odd shape.</p>
<p>Objective #2 accomplished. Time to move to the next one.</p>
</section>
<section id="the-model-file" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-model-file">The model file</h2>
<p>Let’s take a look at the source code for the Torsten/Stan model that I fit in the last section. For the sake of my sanity I’m not going to use the actual .stan file that Torsten distributes. In the original version there’s no explanation of what the parameters mean or what the data variables are.</p>
<p>I’m about 99% certain that the reason for this is that among pharmacometricians it is “understood” that everyone already knows the notational specifications used in <a href="https://en.wikipedia.org/wiki/NONMEM">NONMEM</a>, and consequently nobody bothers to say what those terms mean. To be honest I find it a little frustrating. If you want new users to consider Torsten as a viable modelling tool for pharmacometrics, I think it’s a bad idea to make it a <em>prerequisite</em> that new users already know NONMEM. But as I am Queen only of this blog and not of statistics generally, and my guess is that the primary target audience for Torsten are pharmacometricians who have already used NONMEM for many years, I’ll restrict myself to mild grumbling and simply fix the comments so that the “hidden curriculum” aspect to all this is no longer quite so hidden. Nevertheless, given that the vast majority of my readership belong to the 99.99% of statisticians and data scientists who aren’t professional pharamacometricians,<sup>2</sup> I’ve added a lot more annotation to my version of the file:</p>
<div class="cell column-body-outset" data-file="example/pk2cpt.stan" data-output.var="pk2cpt">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>./example/pk2cpt.stan</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Two compartment model using Torsten analytical solver </span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span>{</span>
<span id="cb15-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; nt;                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of events</span></span>
<span id="cb15-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; nObs;              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of observations</span></span>
<span id="cb15-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nObs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; iObs;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// indices of observation events</span></span>
<span id="cb15-7">  </span>
<span id="cb15-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// NONMEM data</span></span>
<span id="cb15-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; cmt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compartment number</span></span>
<span id="cb15-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> evid;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// event id (0=observation, 1=dose, 2=other)</span></span>
<span id="cb15-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> addl;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of additional identical doses given</span></span>
<span id="cb15-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ss;             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// is it steady-state dosing? (0=false, 1=true)</span></span>
<span id="cb15-13">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> amt;           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// dose amount administered at this time</span></span>
<span id="cb15-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> time;          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// time of observation/administration </span></span>
<span id="cb15-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> rate;          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// rate of drug infusion (0 for bolus administration)</span></span>
<span id="cb15-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nt] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> ii;            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// interdose interval: time between additional doses </span></span>
<span id="cb15-17">  </span>
<span id="cb15-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nObs] cObs;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// observed concentration (the dv)</span></span>
<span id="cb15-19">}</span>
<span id="cb15-20"></span>
<span id="cb15-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed data</span>{</span>
<span id="cb15-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[nObs] logCObs = log(cObs);</span>
<span id="cb15-23">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nTheta = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of ODE parameters describing the pharmacokinetic function</span></span>
<span id="cb15-24">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nCmt = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of compartments in model (1=gut, 2=central, 3=peripheral)</span></span>
<span id="cb15-25">}</span>
<span id="cb15-26"></span>
<span id="cb15-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span>{</span>
<span id="cb15-28">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; CL;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance rate from central compartment</span></span>
<span id="cb15-29">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; Q;     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// intercompartmental clearance rate</span></span>
<span id="cb15-30">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; V1;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume of distribution, central compartment</span></span>
<span id="cb15-31">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; V2;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume of distribution, peripheral compartment</span></span>
<span id="cb15-32">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; ka;    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate constant from gut to central </span></span>
<span id="cb15-33">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; sigma; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// standard deviation of measurement error on log-scale</span></span>
<span id="cb15-34">}</span>
<span id="cb15-35"></span>
<span id="cb15-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed parameters</span>{</span>
<span id="cb15-37">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nTheta] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> theta;        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// parameters of the pharmacokinetic function</span></span>
<span id="cb15-38">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">matrix</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nCmt, nt] x;   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// drug amounts in each compartment over time</span></span>
<span id="cb15-39"></span>
<span id="cb15-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// predicted drug concentrations in the central compartment</span></span>
<span id="cb15-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">row_vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nt] cHat;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// row vector, one element per event</span></span>
<span id="cb15-42">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span> = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[nObs] cHatObs; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// column vector, one element per *observation*</span></span>
<span id="cb15-43"></span>
<span id="cb15-44">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bundle pharmacokinetic parameters into a vector</span></span>
<span id="cb15-45">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = CL;</span>
<span id="cb15-46">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] = Q;</span>
<span id="cb15-47">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] = V1;</span>
<span id="cb15-48">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] = V2;</span>
<span id="cb15-49">  theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] = ka;</span>
<span id="cb15-50"></span>
<span id="cb15-51">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute the pharmacokinetic function (drug amounts in all compartments)</span></span>
<span id="cb15-52">  x = pmx_solve_twocpt(time, amt, rate, ii, evid, cmt, addl, ss, theta);</span>
<span id="cb15-53"></span>
<span id="cb15-54">  cHat = x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :] ./ V1;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute drug concentrations in central compartment</span></span>
<span id="cb15-55">  cHatObs = cHat'[iObs]; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// transform to column vector &amp; keep relevant cells only</span></span>
<span id="cb15-56">}</span>
<span id="cb15-57"></span>
<span id="cb15-58"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span>{</span>
<span id="cb15-59">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// informative prior</span></span>
<span id="cb15-60">  CL ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>);</span>
<span id="cb15-61">  Q ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>);</span>
<span id="cb15-62">  V1 ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>);</span>
<span id="cb15-63">  V2 ~ lognormal(log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>);</span>
<span id="cb15-64">  ka ~ lognormal(log(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb15-65">  sigma ~ cauchy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb15-66"></span>
<span id="cb15-67">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// measurement errors are log-normally distributed</span></span>
<span id="cb15-68">  logCObs ~ normal(log(cHatObs), sigma);</span>
<span id="cb15-69">}</span>
<span id="cb15-70"></span>
<span id="cb15-71"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span>{</span>
<span id="cb15-72">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[nObs] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> cObsPred; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// simulated observations</span></span>
<span id="cb15-73">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:nObs) {</span>
<span id="cb15-74">    cObsPred[i] = exp(normal_rng(log(cHatObs[i]), sigma));</span>
<span id="cb15-75">  }</span>
<span id="cb15-76">}</span></code></pre></div>
</div>
</div>
<p>Even with the additional commenting, it’s still a little impenetrable unless you’re a pharmacometric insider, because the pharmacokinetic model is not represented anywhere in this Stan code. It’s simply understood that this is a two-compartment model by virtue of the fact that the <code>pmx_solve_twocpt()</code> function is called, and all the details of what that <em>means</em> have been rendered invisible in the process.</p>
<p>That’s not wrong from the Torsten perspective – and probably necessary – but at the same time it makes the code difficult to follow for anyone who isn’t a pharmacometrician. So let’s make it a bit more explicit, yes? What precisely is the ODE system solved by the <code>pmx_solve_twocpt()</code> function? Fortunately, the actual ODEs are described by <a href="https://doi.org/10.1002/psp4.12812">Margossian et al (2022)</a> and are in fact the same ones I used in a previous post.</p>
<p>I’ll reproduce the ODEs here in exactly the same form as they are presented by Margossian et al:<sup>3</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bgut%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20-k_a%20u_%7B%5Cmbox%7Bgut%7D%7D%20%5C%5C%20%5C%5C%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bcent%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20k_a%20u_%7B%5Cmbox%7Bgut%7D%7D%20-%20%5Cleft(%20%5Cdisplaystyle%5Cfrac%7B%5Cmbox%7BCL%7D%7D%7BV_%7B%5Cmbox%7Bcent%7D%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%5Cmbox%7Bcent%7D%7D%20%5Cright)%20u_%7B%5Cmbox%7Bcent%7D%7D%20+%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%7B%5Cmbox%7Bperi%7D%7D%7D%20u_%7B%5Cmbox%7Bperi%7D%7D%20%5C%5C%20%5C%5C%0A%5Cdisplaystyle%5Cfrac%7Bdu_%7B%5Cmbox%7Bperi%7D%7D%7D%7Bdt%7D%20&amp;%20=%20&amp;%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%5Cmbox%7Bcent%7D%7D%20u_%7B%5Cmbox%7Bcent%7D%7D%20-%20%5Cdisplaystyle%5Cfrac%7BQ%7D%7BV_%7B%5Cmbox%7Bperi%7D%7D%7D%20u_%7B%5Cmbox%7Bperi%7D%7D%0A%5Cend%7Barray%7D%0A"></p>
<p>There’s still a little friction here because mathematical notation is never precisely identical to variable naming in code (nor should it be). But it does help to have a little lookup table like this one:</p>
<table class="table">
<colgroup>
<col style="width: 18%">
<col style="width: 31%">
<col style="width: 49%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Stan variable</th>
<th style="text-align: center;">Mathematical notatation</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>x[1, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bgut%7D%7D"></td>
<td style="text-align: left;">Drug amount in the gut</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>x[2, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bcent%7D%7D"></td>
<td style="text-align: left;">Drug amount in central compartment</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>x[3, :]</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bperi%7D%7D"></td>
<td style="text-align: left;">Drug amount in peripheral compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>ka</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?k_a"></td>
<td style="text-align: left;">Absorption rate constant from gut</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>CL</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Cmbox%7BCL%7D"></td>
<td style="text-align: left;">Elimination clearance from central</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>Q</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?Q"></td>
<td style="text-align: left;">Intercompartmental clearance</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>V1</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?V_%5Cmbox%7Bcent%7D"></td>
<td style="text-align: left;">Volume of central compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>V2</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?V_%5Cmbox%7Bperi%7D"></td>
<td style="text-align: left;">Volume of peripheral compartment</td>
</tr>
</tbody>
</table>
<p>The differential equations are all expressed in terms of drug amounts rather than drug concentrations, and the <code>pmx_solve_twocpt()</code> function solves for drug amounts in each compartment at each point in time. However, pharmacometric functions specify how drug concentrations change over time, so the Stan code makes the appropriate transformation. With that in mind I find it helpful to extend the table slightly:</p>
<table class="table">
<colgroup>
<col style="width: 22%">
<col style="width: 29%">
<col style="width: 48%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Stan transformation</th>
<th style="text-align: center;">Mathematical notatation</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>x[2, :] ./ V1</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bcent%7D%7D%20/%20V_%5Cmbox%7Bcent%7D"></td>
<td style="text-align: left;">Drug concentration in central compartment</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>x[3, :] ./ V2</code></td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?u_%7B%5Cmbox%7Bperi%7D%7D%20/%20V_%5Cmbox%7Bperi%7D"></td>
<td style="text-align: left;">Drug concentration in peripheral compartment</td>
</tr>
</tbody>
</table>
<p>Having written that out, the Stan code seems pretty interpretable. There’s still something missing here insofar as it’s not entirely clear <em>how</em> the <code>pmx_solve_twocpt()</code> function computes the drug amounts in each compartment at all time points, but at least it’s now clear <em>what</em> it is computing.</p>
</section>
<section id="where-can-i-find-the-analytical-solutions" class="level2">
<h2 class="anchored" data-anchor-id="where-can-i-find-the-analytical-solutions">Where can I find the analytical solutions?</h2>
<p>In my <a href="../../posts/2023-06-10_pop-pk-models/">previous post on pop-PK modelling</a>, I managed to get far enough along that I could implement my own two-compartment models in Stan, without using Torsten. However, in order to do that I had to rely on numerical ODE solvers to compute solutions to the pharmacokinetic functions. It turns out that was unnecessary. On the <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten home page</a>, it indicates that:</p>
<blockquote class="blockquote">
<p>One and two compartment models are based on analytical solutions of governing ODEs.</p>
</blockquote>
<p>So presumably there <em>are</em> some analytical solutions somewhere! A little awkwardly, the documentation doesn’t explicitly say what the analytical solutions for the two-compartment model are or where they are taken from, but a little bit of digging gives us some answers. First, looking through the Torsten source reveals the relevant parts of the code:</p>
<ul>
<li><a href="https://github.com/metrumresearchgroup/Torsten/blob/0168482d400e4b819acadbc28cc817dd1a037c1b/cmdstan/stan/lib/stan_math/stan/math/torsten/pmx_solve_twocpt.hpp">This file</a> appears to be where the <code>torsten::pmx_solve_twocpt()</code> function is defined.</li>
<li><a href="https://github.com/metrumresearchgroup/Torsten/blob/0168482d400e4b819acadbc28cc817dd1a037c1b/cmdstan/stan/lib/stan_math/stan/math/torsten/pmx_twocpt_model.hpp">This file</a> appears to be where the analytical solutions are specified.</li>
</ul>
<p>Second, a little hunting around on the internet unearths this handy little paper by <a href="https://doi.org/10.12793/tcp.2019.27.2.43">D’Argenio and Bae (2019)</a> that derives the analytical solutions of interest. Skimming the paper quickly suggests it’s not too complicated an exercise to implement analytical solutions (especially if you’re not trying to optimise for performance), and even the derivations don’t look too painful. I may return to that topic in a later post, but for now I feel reassured that I know where to look when I want to dive deeper.</p>
</section>
<section id="useful-resources" class="level2">
<h2 class="anchored" data-anchor-id="useful-resources">Useful resources</h2>
<p>I suspect that at a future date I’ll want to pick up from where this post leaves off. With that in mind, these are the resources I relied on when putting it together:</p>
<ul>
<li><p><a href="https://doi.org/10.1002/psp4.12926">Bayesian PBPK modeling using R/Stan/Torsten and Julia/SciML/Turing.Jl</a>. Journal article by Ahmed Elmokadem, Yi Zhang, Timothy Knab, Eric Jordie, and Bill Gillespie, January 2023.</p></li>
<li><p><a href="https://doi.org/10.1002/psp4.12812">Flexible and efficient Bayesian pharmacometrics modeling using Stan and Torsten, Part I</a>. Journal article by Charles Margossian, Yi Zhang, and Bill Gillespie, April 2022.</p></li>
<li><p><a href="https://www.metrumrg.com/wp-content/uploads/2023/06/bbr.bayes_StanCon2023.pdf">Bayesian modeling workflow for pharmacometric applications using bbr.bayes with Stan/Torsten</a>. Slides by Bill Gillespie, June 2023.<sup>4</sup></p></li>
<li><p><a href="https://metrumrg.com/wp-content/uploads/2018/05/BayesianPmetricsMBSW2018.pdf">Bayesian Data Analysis Using Stan/Torsten for Pharmacometric Applications</a>. Slides by Bill Gillespie, May 2018.</p></li>
<li><p><a href="https://doi.org/10.12793/tcp.2019.27.2.43">Analytical solution of linear multi-compartment models with non-zero initial condition and its implementation with R</a>. Journal article by David D’Argenio and Kyun-Seop Bae, June 2019.</p></li>
<li><p><em>Kinetics of distribution of substances administered to the body. I. The extravascular modes of administration.</em> Journal article by Torsten Teorell, 1937. Discussed in <a href="https://doi.org/10.3109/03009739509178895">Torsten Teorell, the Father of Pharmacokinetics</a> by Lennart Paalzow, 1995.</p></li>
<li><p><a href="https://stanpmx.github.io/">Stan and R for Pharmacometrics</a>. Book by Casey Davis, Yasong Lu, Arya Pourzanjani, and Pavan Vaddady.<sup>5</sup></p></li>
</ul>
</section>
<section id="done" class="level2">
<h2 class="anchored" data-anchor-id="done">Done!</h2>
<p>…and with that, I’ve accomplished my very limited goals for this post, and for once in my life I shall bloody well refrain from expanding on it further and turning a short blog post into a monograph.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I mean… “obvious” in the sense that I’m a person who has used Stan before and the output from the previous section is very familiar to me <em>as</em> Stan output.↩︎</p></li>
<li id="fn2"><p>Number obviously fictitious but probably in the right ballpark.↩︎</p></li>
<li id="fn3"><p>The same ODE system appears in the <a href="https://metrumresearchgroup.github.io/Torsten/function/two-cpt/">Torsten documentation for the two-compartment model</a>, using <img src="https://latex.codecogs.com/png.latex?y"> in place of <img src="https://latex.codecogs.com/png.latex?u"> and <img src="https://latex.codecogs.com/png.latex?y%5E%5Cprime"> in place of <img src="https://latex.codecogs.com/png.latex?du/dt">. I probably should have used that version in this post, but I found the Margossian et al version first and I’m too lazy to rewrite the LaTeX expressions.↩︎</p></li>
<li id="fn4"><p>Thank you to Mike Smith for pointing me to this resource.↩︎</p></li>
<li id="fn5"><p>Thank you to Tim Waterhouse for pointing me to this resource.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Getting Started with {Torsten}},
  date = {2023-07-15},
  url = {https://blog.djnavarro.net/posts/2023-07-15_torsten},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Getting Started with Torsten.”</span>
July 15, 2023. <a href="https://blog.djnavarro.net/posts/2023-07-15_torsten">https://blog.djnavarro.net/posts/2023-07-15_torsten</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Stan</category>
  <category>Torsten</category>
  <category>Pharmacometrics</category>
  <guid>https://blog.djnavarro.net/posts/2023-07-15_torsten/</guid>
  <pubDate>Fri, 14 Jul 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-07-15_torsten/torsten-crop.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Beware the IDEs of Windows (Subsystem for Linux)</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>After many years of using Ubuntu as my primary operating system for data science work, I’ve found myself in a situation where my primary laptop runs Windows. There are reasons for this. It does, however, introduce some problems. My workflows are often built around Unix-like tools, and life without bash is too heavy a burden for me to bear. Fortunately, there is a solution: Windows Subsystem for Linux (WSL). The process for getting set up with WSL is essentially as follows:</p>
<ol type="1">
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/install">Install WSL</a></li>
<li><a href="https://ubuntu.com/wsl">Install Ubuntu for WSL</a></li>
<li><a href="https://cloud.r-project.org/bin/linux/ubuntu/">Install R for Ubuntu</a></li>
</ol>
<p>Repeat step 3 for all the other command line tools you love (and replace step 2 with your favourite distro if you don’t love Ubuntu), and just like that you have a working setup for all your favourite data science workflows on Linux, living happily within a Windows environment.</p>
<section id="some-bits-are-tricksy" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="some-bits-are-tricksy">Some bits are tricksy</h2>
<p>There’s a sense in which WSL is a kind of dark magic, one that allows me to run two operating systems side by side on the same machine, and allowing extensive interoperability between them. By installing WSL and Ubuntu for WSL on my laptop, I’ve created a situation where I have two filesystems co-existing on my machine, and two qualitatively different kinds of shell to interact with them. On the Windows side I can use powershell, and on the Ubuntu side I can use bash. Regardless of which shell I use (and which operating system powers it), I have the ability to find files on both filesystems, as long as I know what paths to look for.</p>
<p>The key thing to understand is that Ubuntu mounts the Windows C: drive at <code>/mnt/c/</code>, and Windows locates the Ubuntu root directory at <code>\\wsl.localhost\Ubuntu-22.04\</code>. So, for instance, given that my Windows user is called <code>strin</code>,<sup>1</sup> and my Ubuntu username is <code>danielle</code>, the paths to the user home directories are:</p>
<div class="column-body-outset">
<table class="table">
<colgroup>
<col style="width: 25%">
<col style="width: 26%">
<col style="width: 48%">
</colgroup>
<thead>
<tr class="header">
<th>Folder:</th>
<th>Ubuntu path (bash):</th>
<th>Windows path (powershell):</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Ubuntu user directory</td>
<td><code>/home/danielle</code></td>
<td><code>\\wsl.localhost\Ubuntu-22.04\home\danielle</code></td>
</tr>
<tr class="even">
<td>Windows user directory</td>
<td><code>/mnt/c/Users/strin</code></td>
<td><code>C:\Users\strin</code></td>
</tr>
</tbody>
</table>
</div>
<p>This illustrates some of the subtleties. Decisions need to be made about which files and applications should live in the Windows filesystem, and which should live in the Ubuntu filesystem. For example, I don’t use my Dropbox folder for data science work, so it lives in Windows at <code>C:\Users\strin\Dropbox</code>. On the other hand, my GitHub repositories are used mostly for data science and developer work, so they all live in Ubuntu and are all kept in the <code>/home/danielle/GitHub</code> folder.</p>
<p>It becomes trickier still when thinking about applications that require a GUI. The Ubuntu for WSL installation doesn’t come with a desktop environment. You certainly can install one, and if you’re willing to do the finicky work setting up an X server for Windows, you can in fact set things up so that Ubuntu for WSL has its own floating desktop environment in Windows (just like the one you’d get if you were running Ubuntu as a virtual machine). However, I don’t fancy doing all that work just to get a web browser up and running… so I made the practical decision that my Firefox installation should be the regular Windows version, living in Windows like any other Windows application.</p>
<p>The trickiness reaches its zenith when you start thinking about where your favourite IDE should live. At its heart an IDE is a GUI, and as such it’s going to run so much more smoothly if you install it as a Windows application. But IDEs are also used to start terminals, to write code, and execute all sorts of tasks that require access to the data science tooling… all of which live on Ubuntu.</p>
<p>How do we resolve this? In my case, I have two IDEs that I cannot live without. For my everyday work I am almost perfectly split between <a href="https://posit.co/products/open-source/rstudio/">RStudio</a> and <a href="https://code.visualstudio.com/">VS Code</a>. Here’s the approach I took with each.</p>
</section>
<section id="rstudio-setup" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="rstudio-setup">RStudio setup</h2>
<p>What are my options for RStudio?</p>
<ul>
<li><p>Option 1: RStudio Desktop for Windows. If I go down this path the RStudio GUI will look very nice, but I won’t be able to use the Ubuntu installation of R. I’d have to install R for Windows, and then I’d have to configure RTools if I want to do developer work, and now I’d need C/C++ compilers on Windows, and… at that point I’d essentially have to manage an entire Windows data science stack in parallel with my Ubuntu data science stack. Not loving this as an option.</p></li>
<li><p>Option 2: RStudio Desktop for Ubuntu. This version of RStudio will have no problems finding the Ubuntu installation, but without a lot of tinkering it won’t be able to create the RStudio GUI. Again, there’s a solution to this (and I did actually get it up and running), if you’re okay with running an X-server for Windows like <a href="https://x410.dev/">X410</a>. It does work, but it’s finicky. Fonts and cursors don’t look right if you’re running X410 in windowed mode, and if you want to run it in floating desktop mode then you have to set up the entire Ubuntu desktop environment just to run RStudio. Not loving this one either.</p></li>
<li><p>Option 3: RStudio Server for Ubuntu. This is easily my preferred option. RStudio Server loves to run on Ubuntu, and so of course it has no problems finding the Ubuntu installation of R. Even better, it doesn’t require an Ubuntu desktop environment. When you start RStudio Server running from bash (<code>sudo rstudio-server start</code>), it starts a server running (most likely at <code>http://localhost:8787/</code>). Back on Windows, I can open up my browser and point it to that address, and can login using my Ubuntu username and password. Works beautifully. I have Ubuntu-native versions of R and RStudio Server, and a Windows-native RStudio GUI through the browser.</p></li>
</ul>
<p>Having made my choice, I sort of know what I need to search for to solve the problem. There are good resources out there for this, and I’m not doing a walkthrough in this post. The purpose of the post is to document the approach I’ve taken so that I can remember how to do it next time, and point future-me at the right resources. That said, these are the resources I relied upon to set up option 3:</p>
<ul>
<li><a href="https://support.posit.co/hc/en-us/articles/360049776974-Using-RStudio-Server-in-Windows-WSL2">Using RStudio Server in Windows WSL2</a></li>
<li><a href="https://posit.co/download/rstudio-server/">RStudio Server</a></li>
<li><a href="https://support.posit.co/hc/en-us/articles/221303588-What-is-my-username-on-my-RStudio-Workbench-RStudio-Server-installation-">What is my username on my RStudio Workbench / RStudio Server installation?</a></li>
</ul>
<p>The result:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/rstudio.png" class="img-fluid figure-img" alt="RStudio interface rendered within a browser window. Within the RStudio interface you can see that I'm working on this blog post."></p>
<figcaption class="margin-caption">Working on this blog post within RStudio. The GUI runs within Firefox on Windows, connected to RStudio Server running on Ubuntu for WSL, both of which exist on my local machine.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="vs-code-setup" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="vs-code-setup">VS Code setup</h2>
<p>Okay that’s RStudio sorted. What about VS Code?</p>
<p>The solution for VS Code is similar but not the same. The core principle is the same: the GUI should be native to Windows, and the underlying engine should be native to Ubuntu. The way you actually do this for VS Code, however, is slightly different. Essentially, what you want to do is install the Windows version of VS Code, and then – within VS Code – install the WSL extension. You’ll also need to install a bunch of other extensions too but that’s the normal experience for VS Code, for every language and every operating system.</p>
<p>As before, I’m not going to do a walkthrough, but these are the resources I used when getting VS Code set up properly on my Windows/Ubuntu-on-WSL box:</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-vscode">Get started using Visual Studio Code with Windows Subsystem for Linux</a></li>
<li><a href="https://code.visualstudio.com/blogs/2019/09/03/wsl2">WSL 2 with Visual Studio Code</a></li>
</ul>
<p>The result:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/vscode.png" class="img-fluid figure-img" alt="VS Code application running natively on Windows, connected to Ubuntu for WSL. The left sidebar displays the file tree for the project, there's an R console open beneath, and a quarto document open in the main panel."></p>
<figcaption class="margin-caption">Working on this blog post within VS Code. The GUI for VS Code is a native Windows application, but in the lower left hand corner you can see that it connects to Ubuntu for WSL to handle code execution and so forth.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="ubuntu-desktop" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="ubuntu-desktop">Ubuntu desktop</h2>
<p>As a kind of postscript… it’s entirely possible to have a fully functional Ubuntu desktop in a setup like this. The main thing you need is an X server. I’ve no idea what the best X server for Windows options are: I went with <a href="https://x410.dev/">X410</a> because it seems pretty professional and work has clearly gone into it, but you do have to pay actual money for it. There might be better options. Anyway, the instructions I followed are in <a href="https://x410.dev/cookbook/wsl/enable-systemd-in-wsl2-and-have-the-best-ubuntu-gui-desktop-experience/">this blog post</a>. At the end of it you have the Ubuntu desktop environment installed, and a handy bash script that does the configuration you need. You can start the session like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">.</span> ~/.bash_ubuntu_desktop</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gnome-session</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--session</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ubuntu</span></code></pre></div>
<p>If you’ve gone to the additional effort of setting up snap, and installing the Firefox snap on your Ubuntu system (yes, I do have two copies of Firefox on my machine), you can do something unbearably absurd like run R-within-RStudio-Server-within-Firefox-within-Ubuntu-desktop-within-Windows. Screenshot, simply to prove that I actually did this:</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/ubuntu.png" class="img-fluid figure-img" alt="RStudio running in a browser. The browser window is within an Ubuntu desktop. The Ubuntu desktop floats above the Windows taskbar."></p>
<figcaption class="margin-caption">Working on this blog post within RStudio… within a browser… within Ubuntu on WSL… within X410… on Windows. Yes this is absurd.</figcaption>
</figure>
</div>
<p><br></p>
<p>No, it’s not a very good idea.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A truncation of <code>stringrbelle</code>, which I occasionally use as a username.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Beware the {IDEs} of {Windows} {(Subsystem} for {Linux)}},
  date = {2023-07-02},
  url = {https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Beware the IDEs of Windows (Subsystem
for Linux).”</span> July 2, 2023. <a href="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl">https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl</a>.
</div></div></section></div> ]]></description>
  <category>Linux</category>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/</guid>
  <pubDate>Sat, 01 Jul 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-07-02_the-ides-of-wsl/img/death-of-ceasar.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Makefiles. Or, the balrog and the submersible</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-30_makefiles/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>I have a secret to confess: I have been writing code for over 20 years, and until about a month ago I have been loathe even to try using <a href="https://en.wikipedia.org/wiki/Make_(software)">Make</a>. For too long I have feared catastrophic implosion should I be reckless enough attempt to dive into these dark waters.<sup>1</sup> Even now, as the sunlight fades and I pass below the surface into the treacherous realm below, I can hear the ominous sounds of compressive stress upon my psyche. I imagine the betentacled krakenlike beasts native to this realm congregating outside the hull.</p>
<p>Drums, drums in the deep.</p>
<p>But I am here now and I cannot get out. I shall have to complete this blog post in the hope that a wizard and his merry little troupe of clueless hobbits may one day discover the tale of my tragic descent and eventual demise at the hands of build automation balrogs.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/gothmog.jpg" class="img-fluid figure-img" alt="Stylised art showing a balrog riding a dragon."></p>
<figcaption class="margin-caption">“Gothmog at the Storming of Gondolin”, depicting a balrog riding a dragon. The piece is CC-BY licenced by the artist <a href="https://en.wikipedia.org/wiki/Tom_Loback">Tom Loback</a></figcaption>
</figure>
</div>
<p><br></p>
<section id="farewell-to-the-broad-sunlit-uplands" class="level2">
<h2 class="anchored" data-anchor-id="farewell-to-the-broad-sunlit-uplands">Farewell to the broad, Sunlit Uplands</h2>
<p>Every tragic narrative begins with a fatal mistake, the hubris of the doomed making the terrible choice that sealed their fate well before the story gets underway. In this case, that mistake was deciding that now is the time to read a 1200 page book on C++. Absolutely cursed decision. There was no way I wasn’t going to end up swallowed by a yawning hellmouth once that choice had been made. But – as the saying goes – when one descends into the abyss to be crushed by lovecraftian horrors, it’s all about the journey and not the destination.</p>
<p>Here’s how the sad story unfolded. Having read through the first hundred or so pages of the C++ necronomicon (the “fucking around” stage), I started encountering the inevitable consequences of the fact that (a) C++ is a compiled language, and (b) I am a person who obsessively takes notes as she reads and writes her own code to accompany the notes. And so it came to pass that (in the “finding out” stage of this tragedy) I was barely one chapter into the book and I’d written almost 50 little baby C++ programs, every one of them a helpless monster gnashing it’s tiny teeth in ravenous hunger, demanding to be compiled before it can do anything useful.</p>
<p>Oh no, my precious abominations, I said to them. I already have human children to feed and care for, I’ll not fall into the trap of lovingly passing each of you individually to the compiler for nurture and sustenance with bespoke hand crafted calls to clang++. That way lies madness and chaos. No, I shall hire a metaphorical nanny/butler/build-manager to feed you and compile you when you need compiling, to politely inform me each time a little C++ demon has grown into to a new binary file, and to take care of sundry other drudgeries with which I do not wish to be burdened. I shall write a <code>Makefile</code>.</p>
<p>And with that my doomed submersible slipped below the waves.</p>
</section>
<section id="the-decay-of-that-colossal-wreck" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-decay-of-that-colossal-wreck">The decay of that colossal Wreck</h2>
<p>As the light fades away visions of my Ozymandian future cross my eyes. I imagine the Works that I will construct, upon which even the Mighty will gaze and despair. Hints of make targets that I will specify and the wonders that will get built with automations.</p>
<p>Behold!</p>
<p>Here is the <code>Makefile</code> I wrote for my side project. It’s a minor incantation at best, a small spell to feed my tiresome C++ babies into the maw of clang++ whenever necessary, and renders all my boring markdown scratchings into graven html with the help of pandoc.</p>
<div class="cell" data-file="_examples/learning-cpp/Makefile">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cpp</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">notes</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> notes/%.md</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> docs/%.html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> notes/*.md</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">static</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> docs/.nojekyll docs/CNAME docs/style.css</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dirs </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">static</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">notes</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dirs:</span></span>
<span id="cb1-8"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./bin</span></span>
<span id="cb1-9">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./docs</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(cpp):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb1-12"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[compiling]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span></span>
<span id="cb1-13">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clang++-15 --std=c++20 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(static):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> docs/%: static/%</span></span>
<span id="cb1-16"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[copying]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb1-17">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(notes):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> docs/%.html: notes/%.md</span></span>
<span id="cb1-20"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[rendering]"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span></span>
<span id="cb1-21">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pandoc </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --template=./pandoc/template.html </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        --standalone --mathjax --toc --toc-depth 2</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb1-25"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[deleting] docs"</span></span>
<span id="cb1-26">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[deleting] bin"</span></span>
<span id="cb1-27">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf docs</span></span>
<span id="cb1-28">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf bin</span></span></code></pre></div>
</div>
<p>It is not very impressive, I know. But it does work, and it does help. So perhaps I should say a little about how I got to there from here?</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/odysseus-and-the-sirens.jpg" class="img-fluid figure-img" alt="Mosaic depicting the temptation of Odysseus by the Sirens."></p>
<figcaption class="margin-caption">The Ulysses mosaic at the Bardo Museum in Tunis, Tunisia (2nd century AD), depicting the temptation of Odysseus by the Sirens. (Image appears to be public domain)</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="love-me-while-your-wrists-are-bound" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="love-me-while-your-wrists-are-bound">Love me while your wrists are bound</h2>
<p>If I’m going to write something about Makefiles, I should perhaps start by acknowledging a few important truths:</p>
<ul>
<li>I’m not an expert. Everything I know about Makefiles is from <a href="https://makefiletutorial.com">makefiletutorial.com</a>. This post is not going to tell you anything you cannot find in Chase Lambert’s lovely tutorial.</li>
<li>There are many alternatives to Make. I’ve seen many projects use <a href="https://cmake.org/">CMake</a> for build automation, for example. Alternatively, if you’re working in R you might prefer to use the <a href="https://docs.ropensci.org/targets/">targets</a> package by Will Landau (<a href="https://books.ropensci.org/targets/">user manual here</a>). There is nothing particularly special about Make per se that made me decide to learn it: it just happens to be a thing that has been around for a long time, and it was irritating me that I didn’t know how to use it.</li>
<li>Like all things created by humans, it is cursed. Makefiles are indeed the Night That is Dark and Full of Terrors. The red priestesses warned us.</li>
</ul>
<p>With that out of the way, let’s begin. Reduced to its simplest form a Makefile is a collection of build <strong>targets</strong>, each of which is defined using syntax that looks something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb2-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">targets:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> prerequisites</span></span>
<span id="cb2-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>command</span>
<span id="cb2-3">    command</span>
<span id="cb2-4">    command</span></code></pre></div>
</div>
<p>It seems simple enough. The top level command provides the name of the target. In the simplest case, a target is a specific file that <code>make</code> needs to build, and the name of the target is the path to that file, though it’s also possible to specify targets using arbitrary names</p>
<p>Optionally, a target can have a set of <strong>prerequisites</strong> associated with that target. Prerequisites provide a method for specifying the dependencies for a build target. If the files listed as prerequisites have changed more recently than the output target, the build target is deemed to be “out of date”, and the <strong>commands</strong> listed beneath it will be executed in order to rebuild that target.</p>
<p>A concrete example might help to make this a little clearer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb3-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb3-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span></code></pre></div>
</div>
<p>Let’s unpack what each part of this target means:</p>
<ul>
<li><code>bin/collatz</code> is the target, and is specified as the path to the output file that we’re asking <code>make</code> to build for us.</li>
<li><code>src/collatz.cpp</code> is a prerequisite file. If the <code>src/collatz.cpp</code> file has been modified more recently than the <code>bin/collatz</code> file created by the compilation command underneath, then that command will be executed when <code>make</code> is called</li>
<li>The third line is a shell command. In this instance, the command takes the <code>src/collatz.cpp</code> source file and uses clang to compile it to a binary executable file <code>bin/collatz</code>. (The <code>--std=c++20</code> flag indicates that C++ version 20 should be assumed)</li>
</ul>
<p>Targets and their prerequisites provide a mechanism by which a Makefile can be used to track the dependencies among the various files in your project. It’s worth noting a few special cases:</p>
<ul>
<li>If a target has no prerequisites it is always deemed out of date, so the commands will be executed every time.</li>
<li>If the name of the target doesn’t correspond to an actual output file, it’s considered to be a “phony” target and is always considered out of date, and hence the commands will always be executed.</li>
<li>A target can be explicitly labelled as “phony” even if the target name happens to be the same as a file in the project using the <code>.PHONY</code> keyword. We’ll see an example of this later.</li>
</ul>
<p>It seems lovely, does it not? Of course it does my sweet Odysseus. You’ve been listening to the Sirens again, and fortunate indeed that your loved ones have tied you to the mast to prevent you from casting yourself overboard and drowning.</p>
<blockquote class="blockquote">
<p><em>“But Danielle, this seems so simple! It is lovely, alluring and sweet. I see no sign of eldritch horrors or evil creatures lurking in the depths here”</em></p>
</blockquote>
<p>You say that, so I presume that you have absolutely noticed that all those <code>command</code> lines in the code snippet above are indented with tabs and not spaces, yes? No? Those tabs are like little glass knives buried in the sand beneath your soft, bare feet. You must use tabs for indentations in your Makefile, or it won’t work.</p>
<blockquote class="blockquote">
<p><em>“But Danielle, my IDE is set to automatically convert tabs to spaces! This is going to mess me up and now I have to faff about making exceptions for specific files”</em></p>
</blockquote>
<p>Indeed. Don’t say I didn’t warn you.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/hope-in-hell.jpg" class="img-fluid figure-img" alt="Cover art to 'A Hope in Hell', a Sandman comic."></p>
<figcaption>The cover art to “A Hope in Hell”, the fourth of <a href="https://en.wikipedia.org/wiki/The_Sandman_(comic_book)">The Sandman comics</a>. Written by Neil Gaiman, Sam Kieth and Mike Dringenberg, and part of the “Preludes and Nocturnes” collection. Likely a copyrighted image, but hopefully okay to reproduce here under fair use etc.</figcaption>
</figure>
</div>
</div></div></section>
<section id="hope-in-hell" class="level2">
<h2 class="anchored" data-anchor-id="hope-in-hell">Hope in hell</h2>
<p><em>Perhaps we won’t die</em>, we whisper to ourselves as we open a blank Makefile, and point our vessel towards Scylla and Charybdis with the kind of blind optimism that typically ends with the Coroners Court issuing a lengthy report several months later. After all, our project is so very small. We are but hobbits crossing the Brandywine river looking for mushrooms or something, surely the Willow at the heart of the Old Forest won’t eat us?</p>
<p>Sorry. Got a little distracted there, didn’t I? I’m going to blame Morpheus… I haven’t slept very well lately and my writing gets very weird when that happens.</p>
<p>Getting back on track now. When your project is very small, it isn’t hard to write a basic Makefile. Again, it helps to use concrete examples. Let us imagine a project that has this structure:</p>
<div class="cell">

</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>In this happy fantasy Narnia – which absolutely will never turn into a Fillory because happy endings are real, and life really truly is more than one barely-sublimated trauma after another – we have a very easy thing to work with. In the <code>src</code> folder we have three .cpp files that each correspond to a small C++ program that needs to be compiled.</p>
<p>Being the sort of person who likes to separate inputs from outputs, we decide that the executable binary files should all be stored in a <code>bin</code> folder. Being also the cautious sort of person who understands the difference between inputs and outputs, our project has a <code>.gitignore</code> file that ensures that nothing we write to <code>bin</code> is placed under version control.</p>
<p>We also have a a file called <code>Makefile</code>,<sup>2</sup> whose contents are as follows:</p>
<div class="cell" data-file="_examples/version1/Makefile">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "all" target is a set of other targets</span></span>
<span id="cb5-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "dir" target creates a directory for the binaries</span></span>
<span id="cb5-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb5-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>mkdir -p ./bin</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/collatz" target compiles the collatz.cpp program</span></span>
<span id="cb5-9"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb5-10"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/species" target compiles the species.cpp program</span></span>
<span id="cb5-13"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/species:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/species.cpp</span></span>
<span id="cb5-14"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/species.cpp -o bin/species</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "bin/swap" target compiles the swap.cpp program</span></span>
<span id="cb5-17"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/swap:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/swap.cpp</span></span>
<span id="cb5-18"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/swap.cpp -o bin/swap</span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "clean" target deletes all binary files</span></span>
<span id="cb5-21"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb5-22"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>rm -rf bin</span></code></pre></div>
</div>
<p>The central part of the Makefile is familiar. We’re taking the “compile a C++ source file” recipe that I previously used as an example of makefile target, and repeating it three times over. It’s so utterly dull that it actually reads better if we strip the comments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb6-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb6-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/species:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/species.cpp</span></span>
<span id="cb6-5"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/species.cpp -o bin/species</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/swap:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/swap.cpp</span></span>
<span id="cb6-8"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/swap.cpp -o bin/swap</span></code></pre></div>
</div>
<p>It’s repetitive, but for this toy project it works. If we want this project to build, we require that all three of these C++ source files be compiled to binaries.</p>
<p>Sisyphus should be so lucky.</p>
<p>The nature of make targets is that you can call them by name. In the snippet above I have three targets. To build each of these I could type this mind-meltingly tedious sequence of commands at the terminal:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/collatz</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/species</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/swap</span></code></pre></div>
<p>It works fine when there are only a few targets, but becomes extremely painful once there are dozens of them. Life is short, and this is not the kind of masochism I enjoy. Building each target individually is simply not on my to-do list. Not now, not as Valyria sinks into its Doom, and not as Rome is burning. My fiddling time is preserved for something better than this, my babes.</p>
<p>To accommodate the need of the dead things like myself, <code>make</code> makes it possible to group multiple targets together:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb8-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span></code></pre></div>
<p>This is very helpful. Instead of typing this to make all four targets…</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> dir</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/collatz</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/species</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> bin/swap</span></code></pre></div>
<p>…I can now type this and get the same result:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> all</span></code></pre></div>
<p>In fact, even this can be shortened, because “all” happens to be the first target listed in the Makefile. If you don’t specify a target to build, <code>make</code> will use the first target in the file. It is conventional, then, to call the first target “all”, and have that target consist of a list of all the <em>other</em> targets needed to build the whole project. Consequently, I can do this:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<p>Here’s what we get as output…</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap</code></pre>
</div>
</div>
<p>…and our project now contains the binary files:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
├── bin
│   ├── collatz
│   ├── species
│   └── swap
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>Nice.</p>
<p>So, okay. This is the explanation of lines 1-19 of our Makefile. What’s going on in lines 20-22?</p>
<p>I’m so glad you asked.</p>
<p>What happens if you want to burn it all down and revert to the initial (unbuilt) state of the project? <code>make</code> doesn’t provide that functionality automatically, but it is traditional for writers of Makefiles to include a target called <code>clean</code> that includes commands that will perform this clean up job for you.<sup>4</sup> That’s generally a good thing to do, and for this project the cleanup process is very simple. All we have to do delete the <code>bin</code> folder and everything in it, so that’s what our “clean” target does.</p>
<p>Because we have this target in the Makefile, all we have to do is type <code>make clean</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> clean</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>rm -rf bin</code></pre>
</div>
</div>
<p>And just like that, we are back to the clean (unbuilt) state for our project:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version1
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>Hope yet lives, despite our descent into Hell.</p>
</section>
<section id="the-filetree-yggdrasil-reaching-to-the-heavens" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-filetree-yggdrasil-reaching-to-the-heavens">The filetree Yggdrasil, reaching to the heavens</h2>
<p>In the Makefile I used in the last section, I created a separate target for every file, and wrote the code manually for every one of them. It’s a little repetitive, but when you only have a handful of files that need to be processed (… regardless of whether “processing” means compiling a source file, rendering a markdown document, or anything else), it’s not too onerous. However, it’s very common for a project to grow much too large for this to be ideal. For example, here’s the filetree for the side-project (including source files and output files) that motivated me to learn how to write Makefiles in the first place:</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/yggdrasil.jpg" class="img-fluid figure-img" alt="The world tree Yggdrasil."></p>
<figcaption>The world tree Yggdrasil from Norse mythology, as depicted by <a href="https://en.wikipedia.org/wiki/Friedrich_Wilhelm_Heine">Friedrich Wilhelm Heine</a> in 1886. (Public domain image)</figcaption>
</figure>
</div>
</div></div><div class="cell">

</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/learning-cpp
├── .gitignore
├── LICENSE.md
├── Makefile
├── README.md
├── bin
│   ├── add-with-logging
│   ├── add-with-overloading
│   ├── append-c-strings
│   ├── array-danielle
│   ├── array-iterator
│   ├── beta-sample
│   ├── beta-sample-2
│   ├── char-code
│   ├── circles
│   ├── collatz
│   ├── employee
│   ├── enumerated-types
│   ├── extended-raw-string-literal
│   ├── file-extension
│   ├── file-extension-2
│   ├── gender-switch
│   ├── gender-switch-2
│   ├── helloworld
│   ├── helloworld-using
│   ├── immovable-reference
│   ├── mean-value
│   ├── na-na-hey-hey
│   ├── pass-by-reference-to-const
│   ├── pointer-free-store
│   ├── pointer-stack
│   ├── poisson-conditional
│   ├── poisson-initialised-conditional
│   ├── poisson-sample
│   ├── raw-string-literal
│   ├── scope-resolution
│   ├── simple-reference
│   ├── simple-string
│   ├── species-first-pass
│   ├── stoi
│   ├── string-class-examples
│   ├── string-class-handy
│   ├── string-class-logical
│   ├── string-escapes
│   ├── string-to-numeric
│   ├── string-vectors
│   ├── structured-binding
│   ├── structured-binding-asl
│   ├── swap
│   ├── try-catch
│   ├── typecasting
│   └── validation-check
├── docs
│   ├── .nojekyll
│   ├── CNAME
│   ├── chapter-01.html
│   ├── chapter-02.html
│   ├── chapter-03.html
│   ├── chapter-04.html
│   ├── index.html
│   └── style.css
├── notes
│   ├── chapter-01.md
│   ├── chapter-02.md
│   ├── chapter-03.md
│   ├── chapter-04.md
│   └── index.md
├── pandoc
│   ├── README.md
│   └── template.html
├── src
│   ├── add-with-logging.cpp
│   ├── add-with-overloading.cpp
│   ├── append-c-strings.cpp
│   ├── array-danielle.cpp
│   ├── array-iterator.cpp
│   ├── beta-sample-2.cpp
│   ├── beta-sample.cpp
│   ├── char-code.cpp
│   ├── circles.cpp
│   ├── collatz.cpp
│   ├── employee.cpp
│   ├── employee.h
│   ├── enumerated-types.cpp
│   ├── extended-raw-string-literal.cpp
│   ├── file-extension-2.cpp
│   ├── file-extension.cpp
│   ├── gender-switch-2.cpp
│   ├── gender-switch.cpp
│   ├── helloworld-using.cpp
│   ├── helloworld.cpp
│   ├── immovable-reference.cpp
│   ├── mean-value.cpp
│   ├── na-na-hey-hey.cpp
│   ├── pass-by-reference-to-const.cpp
│   ├── pointer-free-store.cpp
│   ├── pointer-stack.cpp
│   ├── poisson-conditional.cpp
│   ├── poisson-initialised-conditional.cpp
│   ├── poisson-sample.cpp
│   ├── raw-string-literal.cpp
│   ├── scope-resolution.cpp
│   ├── simple-reference.cpp
│   ├── simple-string.cpp
│   ├── species-first-pass.cpp
│   ├── stoi.cpp
│   ├── string-class-examples.cpp
│   ├── string-class-handy.cpp
│   ├── string-class-logical.cpp
│   ├── string-escapes.cpp
│   ├── string-to-numeric.cpp
│   ├── string-vectors.cpp
│   ├── structured-binding-asl.cpp
│   ├── structured-binding.cpp
│   ├── swap.cpp
│   ├── try-catch.cpp
│   ├── typecasting.cpp
│   └── validation-check.cpp
└── static
    ├── .nojekyll
    ├── CNAME
    └── style.css</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>It’s not a huge project by any stretch of the imagination, but it’s big enough to illustrate the point. If I had to write a separate target telling <code>make</code> how to process each of these files I’d quickly lose my mind. Not only that, it would be difficult to maintain if – for example – I needed to change the command used to compile the C++ source files.</p>
<p>In practice, then, we want to write Makefiles that use pattern matching to process every file that matches that pattern. For instance, in the “learning-cpp” project shown above, one of the pattern rules I need is one that automatically compiles every .cpp file in the <code>src</code> folder to a binary file of the same name in the <code>bin</code> folder.<sup>5</sup> Conveniently enough, that’s exactly the same problem we needed to solve for the toy example. So let’s revisit it, keeping in mind that although you don’t really need pattern rules for a project as tiny as the toy project I’m using here, you really do need them as soon as your project moves into the real world.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/kraken.jpg" class="img-fluid figure-img" alt="'Kraken of the imagination', by John Gibson. 1887"></p>
<figcaption class="margin-caption">“The kraken, as seen by the eye of imagination”. Public domain image by John Gibson, published in <a href="https://www.biodiversitylibrary.org/page/54285093#page/85/mode/1up">Monsters of the sea, legendary and authentic</a>, 1887</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="release-the-kraken-of-the-imagination" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="release-the-kraken-of-the-imagination">Release the kraken of the imagination</h2>
<div class="cell">

</div>
<p>Now comes the part of the post where turbulent waters are encountered, and we the dark beasts of the depths might claim us. That is to say, we’ll start creating targets programmatically within our Makefile. To that end we’ll return to the toy project. As before, our project has the following source files:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version2
├── .gitignore
├── Makefile
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<p>However, our Makefile this time around is a little different:</p>
<div class="cell" data-file="_examples/version2/Makefile">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lists of filenames</span></span>
<span id="cb19-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the "all" target is much simpler now</span></span>
<span id="cb19-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb19-9"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>mkdir -p ./bin</span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># each C++ binary is a target, the source is its prerequisite</span></span>
<span id="cb19-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(bin_files):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb19-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span> -o <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb19-14"></span>
<span id="cb19-15"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb19-16"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>rm -rf bin</span></code></pre></div>
</div>
<p>Let’s go through this line by line. First, we can use wildcard matching to find all files in the <code>src</code> folder that end with the <code>.cpp</code> file extension:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb20-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>It may not be immediately apparent to – oh, say, humans – but this is in fact a function call. The name of the function is <code>wildcard</code>, the <code>$( )</code> syntax with the function name inside the parentheses is the way you call functions in <code>make</code>,<sup>6</sup> and <code>src/*.cpp</code> is the argument passed to the function.</p>
<p>It may also not be obvious upon first inspection – because again, why would it be? – why I’ve used <code>:=</code> instead of <code>=</code> in my assignment statement. The goal here is to create a new variable called <code>src_files</code> that contains the names of the various source files, that much is clear. But why use <code>:=</code>, exactly? The answer, of course, is that <code>make</code> supports several different kinds of assignment operators, and confusingly enough <code>=</code> is <em>not</em> the operator for “simple” assignment:</p>
<ul>
<li>Use <code>:=</code> if you want “simple assignment”: the assignment happens once and only once, the first time the assignment statement is encountered</li>
<li>Use <code>=</code> if you want “recursive assignment”: the assignment is reevaluated every time the value of the right hand side changes (e.g., in this example, if a later make target changes the list of source files in the <code>src</code> folder, the value of <code>src_files</code> changes too)</li>
<li>Use <code>?=</code> if you want “conditional assignment”: the assignment only happens if the variable doesn’t already have a value (sure, normal humans would use an if-statement for this, but as we all know keystrokes are a precious resource and must be conserved; preserving human sanity is of course a much less important goal)</li>
<li>Use <code>+=</code> if you want the value of the right hand side to be added to the variable rather than replacing its existing value.</li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<p>It sure doesn’t seem like I should have had to write a small manuscript simply to explain one very modest line of code, does it? But such is the nature of <code>make</code>.</p>
</div></div><p>In any case, the thing that matters here is we’ve scanned the <code>src</code> folder and created a variable called <code>src_files</code> that lists all the C++ source code files in that folder. In other words, <code>src_files</code> is now a synonym for this:</p>
<pre><code>src/collatz.cpp src/species.cpp src/swap.cpp</code></pre>
<p>This will now form the basis by which we construct a list of build targets. Because our project is very simple and has a nice one-to-one mapping between source files and output files, what we really want to construct now is a variable that contains a list of build targets like this:</p>
<pre><code>bin/collatz bin/species bin/swap</code></pre>
<p>If we could be assured that the binary files always exist, we could use the same trick to list all binaries in the <code>bin</code> folder. But because those might not exist (e.g., if we delete the binaries when calling <code>make clean</code>), we can’t be assured of that. So instead, we’ll use the <code>patsubst</code> function to do a pattern substitution: we’ll take the <code>src_files</code> variable as input, strip the <code>.cpp</code> extension from the files, and replace <code>src</code> with <code>bin</code>. Here’s what that looks like:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb23-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>The <code>patsubst</code> function takes three arguments, and – of course – they are specified in a weird order. The data argument appears in the third position, because again… why not? The pattern to which we match the data appears in the first position, and the replacement pattern appears in the second position.<sup>7</sup> Anyway, the point here is that what this function call does is as follows: it takes all the filenames in <code>src_files</code>, matches them against <code>src/%.cpp</code> to find the “stem” (e.g., the stem for <code>src/collatz.cpp</code> is the part that matches the <code>%</code> operator, i.e., <code>collatz</code>), and then uses the replacement pattern <code>bin/%</code> to construct output values from the stems (e.g., <code>collatz</code> is transformed to <code>bin/collatz</code>). And so we end up with a variable <code>bin_files</code> that contains the list of target files we want to build:</p>
<pre><code>bin/collatz bin/species bin/swap</code></pre>
<p>Now that we have this, we can define the “all” target using this variable, as follows:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb25-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span></code></pre></div>
<p>From the <code>make</code> perspective this is equivalent to:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb26-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir bin/collatz bin/species bin/swap</span></span></code></pre></div>
<p>Or, to put it another way, by using the <code>bin_files</code> variable, we can programmatically ensure that the “all” target includes a target for every binary file that needs to be compiled.</p>
<p>Having defined a list of targets programmatically, our next task<sup>8</sup> is to write a <a href="https://www.gnu.org/software/make/manual/html_node/Static-Usage.html">static pattern rule</a> that programmatically defines the targets themselves. Specifically, for every target listed in <code>bin_files</code>, we want (1) to assert that it relies on the corresponding source file as a prerequisite, and (2) to specify a build action that compiles the binary from the corresponding source.</p>
<p>Here’s some code that does this:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb27-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(bin_files):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb27-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span> -o <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span></code></pre></div>
<p>The underlying syntax here is as follows:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb28-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">targets:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> target-pattern: prerequisites-patterns</span></span>
<span id="cb28-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>commands</span></code></pre></div>
<p>For our example, the <code>bin_files</code> variable contains the list of targets specified by the pattern rule. The <code>bin/%</code> part (the target pattern) and the <code>src/%.cpp</code> part (the prerequisites pattern) are used for pattern substitution purposes. It’s essentially the same task that we saw when I called <code>patsubst</code> using these patterns earlier: in the previous example I used them to construct the name of a binary file from the corresponding source file, this time I’m going the other direction and constructing the name of the source file (to use as a rerequisite) from the binary file (which is used as the target).</p>
<p>Okay, now let’s turn to the second line of the code snippet. In the orginal version of the code I wrote targets like this:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb29-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin/collatz:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> src/collatz.cpp</span></span>
<span id="cb29-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span>clang++ --std=c++20 src/collatz.cpp -o bin/collatz</span></code></pre></div>
<p>But in the static pattern rule version I’ve used <code>$&lt;</code> to refer to the prerequisite file (e.g., the source file <code>src/collatz.cpp</code>) and <code>$@</code> to refer to the file name of the target (e.g., the binary file <code>bin/collatz</code>). These are both examples of <a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html">automatic variables</a> in <code>make</code>. There are quite a lot of these: <code>$@</code>, <code>$%</code>, <code>$&lt;</code>, <code>$?</code>, <code>$^</code>, <code>$+</code>, <code>$|</code>, <code>$*</code>. Some of these have “D” and “F” variants that specifically refer to directory paths or filenames: <code>$(@D)</code> and <code>$(@F)</code> are variations on <code>$@</code>, <code>$(*D)</code> and <code>$(*F)</code> are variants of <code>$*</code> and so on. If you desperately want to learn all these details the linked page explains them all. For our purposes it’s enough to note that in the example above, I’ve used <code>$&lt;</code> to refer to the source file and <code>$@</code> to refer to the output file.</p>
<p>Right. After all that as explanatory background we can run <code>make</code>, and happily see that the results are indeed the same as before:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap</code></pre>
</div>
</div>
<p>And now that we’ve built the project we see that the filetree now contains the binaries:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>./_examples/version2
├── .gitignore
├── Makefile
├── bin
│   ├── collatz
│   ├── species
│   └── swap
└── src
    ├── collatz.cpp
    ├── species.cpp
    └── swap.cpp</code></pre>
</div>
</div>
<div class="cell">

</div>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/medusa-too.jpg" class="img-fluid figure-img" alt="Oil painting of the mythological character, Medusa, reimagined through a contemporary feminist lens"></p>
<figcaption>“Me(dusa) too”. Oil painting of the mythological character, Medusa, reimagined through a contemporary feminist lens, in response to the #metoo movement.<sup>9</sup> Art by <a href="https://en.wikipedia.org/wiki/Judy_Tak%C3%A1cs">Judy Takács</a>. Released by the artist as CC-BY.</figcaption>
</figure>
</div>
</div></div></section>
<section id="the-tragedy-of-medusa-and-what-is-permitted-to-be-seen-and-said" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-tragedy-of-medusa-and-what-is-permitted-to-be-seen-and-said">The tragedy of Medusa, and what is permitted to be seen and said</h2>
<p>The last step in putting together a Makefile for our toy project is to tidy some of the code, and make choices about what messages are printed to the terminal when <code>make</code> is called. Let’s start with the tidying. It was convenient for expository purposes to create the list of targets as a two-step process, so that I could talk about the <code>wildcard</code> function before introducing the <code>patsubst</code> function:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb33-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb33-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">bin_files</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">src_files</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>But realistically this doesn’t need to be two lines, so I’ll shorten it to a single line that generates the list of compilation targets:</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb34-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span></code></pre></div>
<p>The second task is to add some code modifying the messages printed when targets are built. To do this, I’ll preface all my commands with the <code>@</code> symbol, which silences their raw output, thereby preventing them from being printed to the terminal whenever <code>make</code> is called. In place of the automatic printing, I’ll use <code>echo</code> to write my own, more human-friendly output lines. So now my Makefile looks like this:</p>
<div class="cell">

</div>
<div class="cell" data-file="_examples/version3/Makefile">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb35-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/%.cpp</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bin/%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">wildcard</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> src/*.cpp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> dir </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">compile</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb35-4"></span>
<span id="cb35-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">dir:</span></span>
<span id="cb35-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir -p ./bin</span></span>
<span id="cb35-7"></span>
<span id="cb35-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(compile):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> bin/%: src/%.cpp</span></span>
<span id="cb35-9"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compiling"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb35-10">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clang++ --std=c++20 </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -o </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb35-11"></span>
<span id="cb35-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span></span>
<span id="cb35-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deleting binary files"</span></span>
<span id="cb35-14">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf bin</span></span></code></pre></div>
</div>
<p>Let’s have a look at what happens when we call <code>make</code> using this version of the Makefile. The same files are compiled, but the printed messages are prettier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>compiling src/collatz.cpp to bin/collatz
compiling src/species.cpp to bin/species
compiling src/swap.cpp to bin/swap</code></pre>
</div>
</div>
<div class="cell">

</div>
<p>Much nicer.</p>
<p><br></p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/hercules-slaying-the-hydra.jpg" class="img-fluid figure-img" alt="Mosaic depicting Hercules and Iolaus slaying the Hydra of Lerna."></p>
<figcaption class="margin-caption">Mosaic by <a href="https://en.wikipedia.org/wiki/Sebald_Beham">Sebald Beham</a> depicting Hercules and Iolaus slaying the many-headed Hydra of Lerna, 1545. Public domain image.</figcaption>
</figure>
</div>
<p><br></p>
</section>
<section id="the-fourth-wall-shatters-into-little-shards-of-recursion" class="level2">
<h2 class="anchored" data-anchor-id="the-fourth-wall-shatters-into-little-shards-of-recursion">The fourth wall shatters into little shards of Recursion</h2>
<p>At this point, this post <em>has</em> covered all the tricks that I’m using in the Makefile for the accursed C++ side project that motivated me to learn <code>make</code>. What this post <em>hasn’t</em> yet covered, though, are some of the tricks that I needed to use for… um… this post. This quarto blog post is a project, and it has a Makefile. But the folder that contains all the source for this blog post <em>also</em> contains source files for all the sub-projects that I’ve used as the examples… and each of those has its own Makefile. Our simple project has become a multi-headed monster, a poisonous serpentine water beast.</p>
<p>To create a Makefile that works in this situation we need to call <a href="https://www.gnu.org/software/make/manual/make.html#Recursion">call make recursively</a>, and though much beloved by computer scientists, I personally view recursion as the little death and the exsanguination of hope. To do this with <code>make</code> some care is required. The thing you <em>don’t</em> want to do is literally use the <code>make</code> command inside a Makefile. That’s exactly the kind of intuitive strategy that get us slain by the poison breath of the Hydra. Instead, we use the <code>$(MAKE)</code> variable as an alias for <code>make</code>. To illustrate this let’s take a look at the actual Makefile used to build this post:</p>
<div class="cell" data-file="Makefile">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource makefile number-lines code-with-copy"><code class="sourceCode makefile"><span id="cb38-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> 2023-06-30_makefiles</span></span>
<span id="cb38-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">html</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ../../_site/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/index.html</span></span>
<span id="cb38-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> version1 version2 version3</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explicitly state that these targets aren't file names</span></span>
<span id="cb38-6"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> all clean clean_quarto</span></span>
<span id="cb38-7"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> build_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb38-8"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">.PHONY:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> clean_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb38-9"></span>
<span id="cb38-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">all:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> build_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">html</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-11"></span>
<span id="cb38-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(patsubst %, build_%, $(examples)):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> build_%: _examples/%</span></span>
<span id="cb38-13"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------ building"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------"</span></span>
<span id="cb38-14">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span>
<span id="cb38-15"></span>
<span id="cb38-16"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(html):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> index.qmd</span></span>
<span id="cb38-17"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"------------ rendering quarto ------------"</span></span>
<span id="cb38-18">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">echo </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rendering"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$@</span></span>
<span id="cb38-19">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quarto render </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --quiet</span></span>
<span id="cb38-20"></span>
<span id="cb38-21"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">$(patsubst %, clean_%, $(examples)):</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> clean_%: _examples/%</span></span>
<span id="cb38-22"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> clean -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span>
<span id="cb38-23"></span>
<span id="cb38-24"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean_quarto:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb38-25"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf ../../_site/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-26">    <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm -rf ../../_freeze/posts/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb38-27"></span>
<span id="cb38-28"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">clean:</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">patsubst</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> %</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> clean_%</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">examples</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">))</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;"> clean_quarto</span></span></code></pre></div>
</div>
<p>There are some other new tricks in play here. When I call <code>make</code> via the <code>$(MAKE)</code> alias, I’m passing some additional flags: the <code>-C</code> flag tells <code>make</code> to change directories (I could also have used <code>--directory</code> here in place of <code>-C</code>), and the <code>--no-print-directory</code> flag asks <code>make</code> to do so without printing an annoyingly long message informing me that it has done so. As usual <code>$&lt;</code> refers to a prerequisite (e.g., <code>_examples/version1</code>). In other words, this command…</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb39-1"><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">@$(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MAKE</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> -C </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">$&lt;</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> --no-print-directory</span></span></code></pre></div>
<p>… has essentially the same effect as a bash command that changes to the appropriate directory, calling <code>make</code> there, and then returning to the original directory:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> _examples/version1</span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span>
<span id="cb40-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ../..</span></code></pre></div>
<p>There’s another trick in play here too. At the start of the file I’ve made use of <code>.PHONY</code> to declare explicitly that many of my targets don’t refer to real files, and are merely labels for recipes. I’ve been lazy about that up till now,<sup>10</sup> but it does matter in a lot of contexts.</p>
<p>In any case, here’s what I get as output when I <code>make</code> this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
</div>
<pre><code>------------ building _examples/version1 ------------
mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap
------------ building _examples/version2 ------------
mkdir -p ./bin
clang++ --std=c++20 src/collatz.cpp -o bin/collatz
clang++ --std=c++20 src/species.cpp -o bin/species
clang++ --std=c++20 src/swap.cpp -o bin/swap
------------ building _examples/version3 ------------
compiling src/collatz.cpp to bin/collatz
compiling src/species.cpp to bin/species
compiling src/swap.cpp to bin/swap
------------ rendering quarto ------------
rendering ../../_site/posts/2023-06-23_makefiles/index.html</code></pre>
<p>Each of the example projects gets built, with a pretty header line to explain which project is building at each step of the process, and then finally the quarto document is rendered also. Somewhat awkwardly though, there’s some indirect recursion going on also: the quarto document calls <code>make</code> several times internally in order to generate much of the output shown in this post. It doesn’t actually break anything, but it does mean it’s a little harder for <code>make</code> to infer when one of the submakes is out of date. Indirect recursion is a strange beast at the best of times, but fortunately it doesn’t cause a lot of problems in this case.</p>
</section>
<section id="epilogue-and-the-death-of-the-author" class="level2">
<h2 class="anchored" data-anchor-id="epilogue-and-the-death-of-the-author">Epilogue, and the Death of the Author</h2>
<p>This was a strange post, and I honestly have no idea how to wrap it all up. If you do want to learn more about Makefiles, I highly recommend the walkthrough at <a href="https://makefiletutorial.com">makefiletutorial.com</a>. It’s how I learned. As for the rest of the narrative… I don’t know what that was all about? I was bored, I guess.</p>
</section>
<section id="postscript" class="level2">
<h2 class="anchored" data-anchor-id="postscript">Postscript</h2>
<p>After sharing this post on mastodon some folks suggested a few other resources related to make and other build automation tools. So here’s a list of resources I’ve either used in this post, or someone else suggested to me afterwards:</p>
<ul>
<li><a href="https://makefiletutorial.com">makefiletutorial.com</a> is the tutorial I learned from</li>
<li>here’s the <a href="https://www.gnu.org/software/make/manual/html_node/index.html">documentation for GNU make</a></li>
<li>a blog post by Mike Bostock: <a href="https://bost.ocks.org/mike/make/">why use make</a></li>
<li>a blog post by Jake Howard: <a href="https://theorangeone.net/posts/just-stop-using-makefile/">just! stop using make</a></li>
<li>for R users, there is the <code>usethis::use_make()</code> function which was new to me</li>
</ul>
<p>Links to some related tools:</p>
<ul>
<li><a href="https://docs.ropensci.org/targets/">targets</a></li>
<li><a href="https://cmake.org/">cmake</a></li>
<li><a href="https://snakemake.github.io/">snakemake</a></li>
<li><a href="https://ruby.github.io/rake/">rake</a></li>
<li><a href="https://microsoft.github.io/just/">just</a></li>
<li><a href="https://www.pyinvoke.org/">invoke</a></li>
<li><a href="https://taskfile.dev/">task</a></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I did ponder briefly the question of whether this joke is in poor taste. On the one hand, it probably is. On the other hand, I can’t help but notice there’s a remarkable number of people who suddenly come out of the woodwork to handwringing about the horrors of ordinary people making jokes at the expense of reckless rich people who came to a relatively painless end due to their own overwhelming hubris, while Dave Chappelle and Ricky Gervais are both out there making bank by mocking and belittling the most vulnerable people in society. Pick your battles my sweet things. Pick your battles.↩︎</p></li>
<li id="fn2"><p>Traditionally a Makefile is simply named <code>Makefile</code> or <code>makefile</code>. It doesn’t have to be, but if you call it something else you need to explicitly tell <code>make</code> where to find the file using the <code>-f</code> flag. A command like <code>make -f my_make_file</code>, for example, specifies that the Makefile is called <code>my_make_file</code>.↩︎</p></li>
<li id="fn3"><p>Admittedly, this implicitly assumes that I’m executing the <code>make</code> command from the same directory as the <code>Makefile</code> itself. That creates some awkwardness for this blog post because the quarto file is not in the same folder as the Makefile. So when you look at the source code for this post you’ll see I’m doing something slightly different. But let’s put those particular nightmares on layby shall we? Instead, let’s see what horrors escape from the particular Pandora’s box that happens to sit before us.↩︎</p></li>
<li id="fn4"><p>Don’t include “clean” in the list of “all” targets, obviously: that would defeat the point entirely.↩︎</p></li>
<li id="fn5"><p>This seems as good a moment as any to mention that yes, I am indeed aware of the <a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Rules.html">implicit rules</a> that are very often used in Makefiles to do common tasks like compiling C code without explicitly calling the compiler. I’ve chosen not to use those here because, quite frankly, implicit compilation rules make me uncomfortable.↩︎</p></li>
<li id="fn6"><p>Oh yes, <code>make</code> uses infix notation for functions. Of course it does, for the same reason that it mandates tab indentation… because <code>make</code> is the very quintessence of evil design. It’s useful enough to weasel its way into your projects, at which point it then slowly drives you toward the pit of despair by making design choices that seem chosen deliberately to make you feel like an idiot. Case in point, you can use <code>${ }</code> instead of <code>$( )</code> to call a function if you like. Because why not?↩︎</p></li>
<li id="fn7"><p>The fact that this happens to be the same batshit argument ordering used in the base R <code>gsub()</code> function makes me suspect that there is some historical reason for this that involves being lectured about grep for about an hour. Anyway there’s a reason why almost everyone who uses R in real world vastly prefers the stringr pattern matching API over the base R API. But I digress.↩︎</p></li>
<li id="fn8"><p>I’m skipping over the <code>dir</code> target on lines 8 and 9, because the code here is the same as it was in the original version. It’s very boring: it just makes sure that a <code>bin</code> folder exists.↩︎</p></li>
<li id="fn9"><p>You probably know why this piece speaks to me, and why I chose to include it even though it’s a slight departure from the narrative. If not, well, I’ll leave it for you to guess.↩︎</p></li>
<li id="fn10"><p>The <code>.ALLCAPS</code> thing going on here tells us that <code>.PHONY</code> is one of the <a href="https://www.gnu.org/software/make/manual/html_node/Special-Targets.html">special built-in target names</a> that have particular meaning in <code>make</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Makefiles. {Or,} the Balrog and the Submersible},
  date = {2023-06-30},
  url = {https://blog.djnavarro.net/posts/2023-06-30_makefiles},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Makefiles. Or, the Balrog and the
Submersible.”</span> June 30, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-30_makefiles">https://blog.djnavarro.net/posts/2023-06-30_makefiles</a>.
</div></div></section></div> ]]></description>
  <category>Reproducibility</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-30_makefiles/</guid>
  <pubDate>Thu, 29 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-30_makefiles/img/gothmog.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Extracting tables from pdf files with tabulizer</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-16_tabulizer/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>In the last post I talked about <a href="../../dark-times/">something very grim</a>, and to be honest it’s not at all what wanted to be writing about yesterday. My intention when I woke up yesterday was to write about <a href="https://docs.ropensci.org/tabulizer/">tabulizer</a>, an R package you can use to extract tables from a pdf document. This isn’t my favourite of data wrangling tasks: pdf is not a very good format in which to store data, but it’s awfully common to find yourself in a situation where the data you want to work with exists only as a table in a pdf document. Because this is a thing that happens, it’s nice to have tools that make it a little easier.</p>
<section id="to-extract-a-table-we-must-first-create-the-universe" class="level2">
<h2 class="anchored" data-anchor-id="to-extract-a-table-we-must-first-create-the-universe">To extract a table, we must first create the universe</h2>
<p>The tabulizer package works by supplying bindings to <a href="https://github.com/tabulapdf/tabula-java/">tabula-java</a>, a java library for extracting tables from pdfs. So if you want tabulizer to work in R you need a working installation of Java, and you need to have the <a href="https://github.com/s-u/rJava">rJava</a> package to provide the R-to-Java bindings.</p>
<p>My experience in the past has been that getting all this setup can be a bit finicky. Happily for me, I’m on Ubuntu and <a href="https://datawookie.dev/blog/2018/02/installing-rjava-on-ubuntu/">Andrew Collier has a blog post</a> that walks you through the process step by step. Following his guide, my first step was to install the Java runtime environment and the Java development kit:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> default-jre default-jdk</span></code></pre></div>
<p>This worked smoothly, so I moved onto the next step and ensured that R knows where to find Java:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> R CMD javareconf</span></code></pre></div>
<p>Only now is it possible to install the rJava package:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rJava"</span>)</span></code></pre></div>
<p>Andrew’s post suggests that you need to restart RStudio after doing this, so I did that too. Having done so, I could finally install the tabulizer package itself:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ropensci/tabulizerjars"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ropensci/tabulizer"</span>))</span></code></pre></div>
</section>
<section id="let-there-be-tables" class="level2">
<h2 class="anchored" data-anchor-id="let-there-be-tables">Let there be tables</h2>
<p>Now that I have the tabulizer package installed, I’ll load it along with the other packages I’ll be using in this post:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tabulizer)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span></code></pre></div>
</div>
<p>To check that it works, I’ll need a pdf file to work with. As a convenience, the tabulizer package comes with a bundled “data.pdf” file that we can use for this purpose:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">pdf_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"examples"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.pdf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tabulizer"</span>)</span></code></pre></div>
</div>
<p>I’ve embedded a copy of the “data.pdf” file in this post, and as you can see it’s very simple test case (by design). The file contains four tables, and only those four tables:</p>
<br> <object data="data.pdf" type="application/pdf" width="100%" height="500px" style="padding:10px">
<p>
Unable to display PDF file. <a href="data.pdf">Download</a> instead.
</p>
</object>
<p><br></p>
<p>We can use this data file as a way to check that the package works and does what we expect. The workhorse function in the package is <code>extract_tables()</code>. We pass it the path to the pdf file as the first argument, and use the various other arguments to provide details about how the file should be processed. In this case, the only other argument I’ll specify is <code>output = "data.frame"</code>, which tells the <code>extract_tables()</code> function to return a list of data frames rather than a list of matrices (the default behaviour). Let’s see if it’s working:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">pdf_tables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pdf_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(as_tibble)</span>
<span id="cb7-4"></span>
<span id="cb7-5">pdf_tables</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 31 × 10
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear
   &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;
 1  21       6  160    110  3.9   2.62  16.5     0     1     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4
# ℹ 21 more rows

[[2]]
# A tibble: 6 × 5
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
         &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;  
1          5.1         3.5          1.4         0.2 setosa 
2          4.9         3            1.4         0.2 setosa 
3          4.7         3.2          1.3         0.2 setosa 
4          4.6         3.1          1.5         0.2 setosa 
5          5           3.6          1.4         0.2 setosa 
6          5.4         3.9          1.7         0.4 setosa 

[[3]]
# A tibble: 6 × 6
      X Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
  &lt;int&gt;        &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;    
1   145          6.7         3.3          5.7         2.5 virginica
2   146          6.7         3            5.2         2.3 virginica
3   147          6.3         2.5          5           1.9 virginica
4   148          6.5         3            5.2         2   virginica
5   149          6.2         3.4          5.4         2.3 virginica
6   150          5.9         3            5.1         1.8 virginica

[[4]]
# A tibble: 14 × 1
   supp 
   &lt;chr&gt;
 1 VC   
 2 VC   
 3 VC   
 4 VC   
 5 VC   
 6 VC   
 7 VC   
 8 VC   
 9 VC   
10 VC   
11 VC   
12 VC   
13 VC   
14 VC   </code></pre>
</div>
</div>
<p>That looks nice. With very little effort we’ve extracted all four tables from the pdf file, and returned a list of tibbles containing the data. Yay! 🎉</p>
</section>
<section id="wild-caught-pdf-files-are-trickier-to-work-with" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="wild-caught-pdf-files-are-trickier-to-work-with">Wild caught pdf files are trickier to work with</h2>
<p>Okay, let’s try a harder example. One of the two reports I referred to in yesterdays blog post is a survey of LGBTQ people conducted by <a href="https://www.dataforprogress.org/">Data For Progress</a>. Unlike the test file, it contains additional text that is not part of any table, and the tables within the report have a lot of fancier formatting that isn’t present in the test file. I’ve cached a local copy of the pdf file as “dfp_lgbtq_survey.pdf”, and you can take a look yourself to see what we’re working with this time:</p>
<br> <object data="dfp_lgbtq_survey.pdf" type="application/pdf" width="100%" height="500px" style="padding:10px">
<p>
Unable to display PDF file. <a href="dfp_lgbtq_survey.pdf">Download</a> instead.
</p>
</object>
<p><br></p>
<p>The data I used in that post comes from question 4, so I’ll try to extract the data for that table from the pdf file. This turns out to be a little harder to do. My first attempt tried to automatically pull all the tables from the second page by setting <code>pages = 2</code>, and this is what happened:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">pdf_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dfp_lgbtq_survey.pdf"</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(pdf_file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
[1,] "79" "85" "82" "70" "87" "89" "77" "79" "83" "69"  "80" 
[2,] "17" "12" "13" "29" "7"  "6"  "19" "14" "15" "27"  "17" 

[[2]]
     [,1]       [,2]      [,3]       [,4]       [,5]    [,6]     [,7]  
[1,] "Response" "Topline" "African"  "or"       "White" "Female" "Male"
[2,] ""         ""        ""         ""         ""      ""       ""    
[3,] ""         ""        "American" "Latino/a​" ""      ""       ""    
     [,8]     [,9]          [,10]         [,11] [,12] [,13] [,14] [,15]
[1,] ""       ""            "identify as" ""    ""    ""    ""    "65+"
[2,] "binary" "transgender" ""            "24"  "39"  "54"  "64"  ""   
[3,] ""       ""            "transgender" ""    ""    ""    ""    ""   </code></pre>
</div>
</div>
<p>Okay, that’s definitely not the data we want. To make this work we’re going to have to give <code>extract_tables()</code> a little more information. One way to do this is to explicitly specify the <code>area</code> of the pdf file that contains the table to be extracted. To that end, it’s helpful to first call the <code>get_page_dims()</code> function, which gives us the dimensions of each page in the pdf document:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_page_dims</span>(pdf_file)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 595 842

[[2]]
[1] 595 842

[[3]]
[1] 595 842</code></pre>
</div>
</div>
<p>Now that we have the dimensions for each page we can specify a rectangular region as a vector containing the top, left, bottom and right coordinates of the rectangle:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">region <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">595</span>)</span></code></pre></div>
</div>
<p>The command we want looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_tables</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> pdf_file, </span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guess =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">area =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(region)</span>
<span id="cb14-6">)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
</div>
<p>This time around, in addition to setting <code>pages = 2</code>, we’ve set <code>guess = FALSE</code> in order to stop <code>extract_tables()</code> from trying to automatically detect regions containing tabular data, and also passed a list of regions (in this case just the one region) as the <code>area</code> argument, thereby telling <code>extract_tables()</code> to look in that specific part of the document.</p>
<p>Let’s take a look at the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">mat</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code>      [,1]                                [,2]      [,3]       [,4]       [,5]    [,6]     [,7]   [,8]     [,9]            [,10]         [,11] [,12] [,13] [,14] [,15]
 [1,] ""                                  ""        "Black or" "Hispanic" ""      ""       ""     ""       ""              "Does not"    ""    ""    ""    ""    ""   
 [2,] ""                                  ""        ""         ""         ""      ""       ""     "Non-"   "Identifies as" ""            "18-" "25-" "40-" "55-" ""   
 [3,] "Response"                          "Topline" "African"  "or"       "White" "Female" "Male" ""       ""              "identify as" ""    ""    ""    ""    "65+"
 [4,] ""                                  ""        ""         ""         ""      ""       ""     "binary" "transgender"   ""            "24"  "39"  "54"  "64"  ""   
 [5,] ""                                  ""        "American" "Latino/​a" ""      ""       ""     ""       ""              "transgender" ""    ""    ""    ""    ""   
 [6,] "Yes, I have considered moving"     ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
 [7,] ""                                  "27"      "24"       "28"       "27"    "26"     "20"   "44"     "43"            "24"          "41"  "28"  "18"  "17"  "17" 
 [8,] "out of my community or state"      ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
 [9,] "No, I have not considered"         ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[10,] "moving out of my community or"     "61"      "57"       "59"       "64"    "60"     "75"   "37"     "40"            "65"          "43"  "60"  "74"  "80"  "70" 
[11,] "state"                             ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[12,] "I have already moved out of my"    ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[13,] "community or state as a result of" "5"       "6"        "4"        "3"     "3"      "3"    "13"     "8"             "4"           "8"   "4"   "2"   "1"   "9"  
[14,] "anti-LGBTQ+ legislation"           ""        ""         ""         ""      ""       ""     ""       ""              ""            ""    ""    ""    ""    ""   
[15,] "Not sure"                          "7"       "14"       "8"        "6"     "11"     "3"    "6"      "8"             "7"           "9"   "8"   "7"   "2"   "4"  
[16,] "Weighted N"                        "1,036"   "93"       "217"      "632"   "426"    "368"  "135"    "166"           "870"         "249" "425" "186" "93"  "83" </code></pre>
</div>
</div>
<p>It’s not quite organised the way we want, but it’s definitely the right data.</p>
<p>Even better, you don’t actually have to do all this messing about trying to figure out the precise region containing the table. If you have the <a href="https://shiny.posit.co/">Shiny</a> and <a href="https://github.com/rstudio/miniUI">miniUI</a> packages installed, you can work interactively using a command like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_areas</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dfp_lgbtq_survey.pdf"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pages =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>After using click and drag to select the region of the page containing the table, R returns the same data contained in the <code>mat</code> matrix shown earlier.</p>
</section>
<section id="cleaning-the-table" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="cleaning-the-table">Cleaning the table</h2>
<p>Once we have the data in this matrix form, it’s slightly tedious to wrangle it into the format we want, but it’s not conceptually difficult once we have a few helper functions to make our lives easier. The first step is to split the matrix into a list of matrices, each of which contains the data that should belong in a single row of the final data set. The <code>row_split()</code> function below takes a matrix as input, and splits it up into a list of matrices specified by the list argument <code>rows</code>, where each element of <code>rows</code> is a vector containing the indices of the rows that should be included in the relevant element of the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">row_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, rows) {</span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(rows, \(r) {</span>
<span id="cb18-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(r) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(x[r, ], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb18-4">    x[r, ]</span>
<span id="cb18-5">  })</span>
<span id="cb18-6">}</span>
<span id="cb18-7">groups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb18-8"></span>
<span id="cb18-9">mat_split <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_split</span>(mat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> groups)</span>
<span id="cb18-10">mat_split</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
     [,1]       [,2]      [,3]       [,4]       [,5]    [,6]     [,7]   [,8]     [,9]            [,10]         [,11] [,12] [,13] [,14] [,15]
[1,] ""         ""        "Black or" "Hispanic" ""      ""       ""     ""       ""              "Does not"    ""    ""    ""    ""    ""   
[2,] ""         ""        ""         ""         ""      ""       ""     "Non-"   "Identifies as" ""            "18-" "25-" "40-" "55-" ""   
[3,] "Response" "Topline" "African"  "or"       "White" "Female" "Male" ""       ""              "identify as" ""    ""    ""    ""    "65+"
[4,] ""         ""        ""         ""         ""      ""       ""     "binary" "transgender"   ""            "24"  "39"  "54"  "64"  ""   
[5,] ""         ""        "American" "Latino/​a" ""      ""       ""     ""       ""              "transgender" ""    ""    ""    ""    ""   

[[2]]
     [,1]                            [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Yes, I have considered moving" ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] ""                              "27" "24" "28" "27" "26" "20" "44" "43" "24"  "41"  "28"  "18"  "17"  "17" 
[3,] "out of my community or state"  ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[3]]
     [,1]                            [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "No, I have not considered"     ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] "moving out of my community or" "61" "57" "59" "64" "60" "75" "37" "40" "65"  "43"  "60"  "74"  "80"  "70" 
[3,] "state"                         ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[4]]
     [,1]                                [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "I have already moved out of my"    ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   
[2,] "community or state as a result of" "5"  "6"  "4"  "3"  "3"  "3"  "13" "8"  "4"   "8"   "4"   "2"   "1"   "9"  
[3,] "anti-LGBTQ+ legislation"           ""   ""   ""   ""   ""   ""   ""   ""   ""    ""    ""    ""    ""    ""   

[[5]]
     [,1]       [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Not sure" "7"  "14" "8"  "6"  "11" "3"  "6"  "8"  "7"   "9"   "8"   "7"   "2"   "4"  

[[6]]
     [,1]         [,2]    [,3] [,4]  [,5]  [,6]  [,7]  [,8]  [,9]  [,10] [,11] [,12] [,13] [,14] [,15]
[1,] "Weighted N" "1,036" "93" "217" "632" "426" "368" "135" "166" "870" "249" "425" "186" "93"  "83" </code></pre>
</div>
</div>
<p>The second helper function is <code>col_paste()</code> which takes a matrix with one or more rows as input and collapses it to a vector by pasting the contents of all cells in the same column together:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">col_paste <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, \(y) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(y, ...))})</span>
<span id="cb20-3">}</span></code></pre></div>
</div>
<p>To illustrate the idea, let’s take <code>mat_split[[1]]</code>, a five-row matrix that contains the data that should eventually become our column names, and convert it to a character vector using <code>col_paste()</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_paste</span>(mat_split[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "  Response  "                      
 [2] "  Topline  "                       
 [3] "Black or  African  American"       
 [4] "Hispanic  or  Latino/​a"            
 [5] "  White  "                         
 [6] "  Female  "                        
 [7] "  Male  "                          
 [8] " Non-  binary "                    
 [9] " Identifies as  transgender "      
[10] "Does not  identify as  transgender"
[11] " 18-  24 "                         
[12] " 25-  39 "                         
[13] " 40-  54 "                         
[14] " 55-  64 "                         
[15] "  65+  "                           </code></pre>
</div>
</div>
<p>Finally, we can use the <code>row_combine()</code> function below that takes a list of vectors and combines them into a matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">row_combine <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-3">}</span></code></pre></div>
</div>
<p>Equipped with these helpers, the following pipeline takes the raw output <code>mat</code> and converts it into a tibble <code>dat</code> containing the data in the format we want it to be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_split</span>(groups) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split into list of matrices</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_paste</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># paste into character vector</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_combine</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine vectors into one matrix</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.name_repair =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minimal"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to tibble</span></span>
<span id="cb24-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_to_names</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_number =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use first row as names</span></span>
<span id="cb24-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span>                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clean the names</span></span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(                                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shorten some names</span></span>
<span id="cb24-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black_or_african_american"</span>,</span>
<span id="cb24-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hispanic"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hispanic_or_latino_a"</span>, </span>
<span id="cb24-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trans"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identifies_as_transgender"</span>,</span>
<span id="cb24-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not_trans"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"does_not_identify_as_transgender"</span></span>
<span id="cb24-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>response, \(x) {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, x))})) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numeric data</span></span>
<span id="cb24-15"></span>
<span id="cb24-16">dat</span></code></pre></div>
</div>
<div class="cell column-page">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 15
  response                        topline black hispanic white female  male non_binary trans not_trans x18_24 x25_39 x40_54 x55_64   x65
  &lt;chr&gt;                             &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1 Yes, I have considered moving …      27    24       28    27     26    20         44    43        24     41     28     18     17    17
2 No, I have not considered movi…      61    57       59    64     60    75         37    40        65     43     60     74     80    70
3 I have already moved out of my…       5     6        4     3      3     3         13     8         4      8      4      2      1     9
4 Not sure                              7    14        8     6     11     3          6     8         7      9      8      7      2     4
5 Weighted N                         1036    93      217   632    426   368        135   166       870    249    425    186     93    83</code></pre>
</div>
</div>
<p>Et voilà!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Extracting Tables from Pdf Files with Tabulizer},
  date = {2023-06-16},
  url = {https://blog.djnavarro.net/posts/2023-06-16_tabulizer},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Extracting Tables from Pdf Files with
Tabulizer.”</span> June 16, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-16_tabulizer">https://blog.djnavarro.net/posts/2023-06-16_tabulizer</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Data Wrangling</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-16_tabulizer/</guid>
  <pubDate>Thu, 15 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-16_tabulizer/dimitra-peppa--abBaVOMsBk-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>On living in dark times</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-15_dark-times/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>As a rule, I don’t do politics on this blog. In fact, I have never previously discussed political or social issues on this blog. I’ve scrupulously avoided discussing anything that might carry the hint of politics, because I don’t wish to be drawn into the fray. I’m a data scientist, a statistician, and a generative artist. I do not have the temperament required to involve myself in matters political, and it is fundamentally not what I wish to be doing with this blog. However, sometimes exceptions need to be made, and this post is one such exception.</p>
<p>One of the feeds I follow fairly regularly is <a href="https://www.erininthemorning.com/">Erin in the Morning</a>, a substack written by <a href="https://en.wikipedia.org/wiki/Erin_Reed_(journalist)">Erin Reed</a>. Erin is an activist and independent journalist who writes about transgender issues, and one of the few people who diligently attempts to document the full scope of the anti-trans laws that are currently being passed across large swathes of the United States, and the consequences that those laws are having on transgender people who live there. It’s grim reading.</p>
<p>A couple of days ago she published a very depressing post entitled <a href="https://www.erininthemorning.com/p/us-internal-refugee-crisis-130-260k">US internal refugee crisis: 130-260k trans people have already fled</a>, documenting the scale of the crisis currently affecting trans people in the US, and presenting personalised accounts from people who have been forced to leave their lives behind and flee to safer territory. A staggeringly large number of trans people have been internally displaced. They are so frightened by what is happening right now that they have upended their lives and moved in the hope of finding safety.</p>
<p>If you haven’t read the article yet, read it first… I’ll wait.</p>
<p>Okay, you’ve read it now, right? Good.</p>
<p>At this point, if you’re a statistician (or any other data-focused person) you have one of two reactions. If you’re a decent human being, your reaction will be something like this:</p>
<blockquote class="blockquote">
<p>Fucking fuck fuck fuck this is horrible. What can I do to help?</p>
</blockquote>
<p>Unfortunately, many statisticians will have this reaction:</p>
<blockquote class="blockquote">
<p>That’s not how you should construct the estimate. Those numbers aren’t quite right, and probably an overestimate. So instead of being a decent human being I’m going to be a smug asshole, shove my head back in the sand, and ignore the very real crisis unfolding.</p>
</blockquote>
<p>Admittedly the second group would probably choose to phrase their reaction differently, because they don’t want to admit that statistical pedantry is not an appropriate response to a catastrophic situation. Nevertheless, I’ve met statisticians before. We all have. We know perfectly well that pedantry is precisely what many of them will resort to when presented with an article like this one.</p>
<p>And so, in order to cut that off at the pass and do my best to forestall anyone who might be tempted to dismiss the substance of Erin’s point by nitpicking the statistics I’m going to redo her calculations in a somewhat more statistically careful way, and you can decide for yourself whether you want to be an asshole about it.</p>
<section id="what-proportion-of-the-transgender-population-has-been-displaced" class="level2">
<h2 class="anchored" data-anchor-id="what-proportion-of-the-transgender-population-has-been-displaced">What proportion of the transgender population has been displaced?</h2>
<p>The data source is this <a href="https://www.dataforprogress.org/blog/2023/6/8/lgbtq-adults-do-not-feel-safe-and-do-not-think-the-democratic-party-is-doing-enough-to-protect-their-rights">article by Data For Progress</a>.</p>
<p>From the pdf report embedded at the bottom of the page, the point estimate suggests 8% of transgender adults (defined here as people aged 18+) in the United States have been forced to migrate interstate. However, the weighted N associated with that point estimate is only 166, because sampling transgender people is hard. We don’t have any more detailed breakdown to work with, but as a “back of the envelope” style calculation, I’ll treat this as if it were a simple random sample in which 13 of 166 transgender adults indicated that they have already been forced to move interstate because of the current crisis. To the extent that this is a reasonable first-pass approximation, a simple beta-binomial model will suffice to provide an uncertainty estimate:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Ctheta%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BBeta%7D(1,%201)%20%5C%5C%0An%20&amp;%20%5Csim%20&amp;%20%5Cmbox%7BBinomial%7D(%5Ctheta,%20N%20=%20166)%0A%5Cend%7Barray%7D%0A"></p>
<p>Given <img src="https://latex.codecogs.com/png.latex?n%20=%2013"> displaced people from a simple random sample of <img src="https://latex.codecogs.com/png.latex?N%20=%20166"> transgender people, the posterior proportion of displaced trans people is given by a Beta(14, 154) distribution.<sup>1</sup> As such our 95% equal-tail credible interval is straightforwardly calculated as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.0465905 0.1294375</code></pre>
</div>
</div>
<p>In other words, the data from this survey suggest that somewhere between 5% and 13% of all transgender adults in the United States have been internally displaced as a consequence of the deluge of anti-trans legislation in the last few years.<sup>2</sup> How many people is that, really? To answer that question we need to know something about how many trans people there are in the United States.</p>
</section>
<section id="what-proportion-of-the-us-population-is-transgender" class="level2">
<h2 class="anchored" data-anchor-id="what-proportion-of-the-us-population-is-transgender">What proportion of the US population is transgender?</h2>
<p>For this we can use a relatively recent <a href="https://williamsinstitute.law.ucla.edu/publications/trans-adults-united-states">survey by the Williams Institute</a>. The webpage provides point estimates in a digestible form, but Tables 4 and A4 of the associated <a href="https://williamsinstitute.law.ucla.edu/wp-content/uploads/Trans-Pop-Update-Jun-2022.pdf">pdf report</a> includes a 95% credible interval that suggests the adult transgender population in the United States (where again age 18+ is used as the cutoff) is somewhere between 816,644 and 1,964,330 people. Or, to express it as a percentage, somewhere between 0.32% and 0.77% of the US adult population of 255,201,250 persons identifies as transgender (the point estimate is 0.52%).</p>
<p>In my ideal world I’d have access to the actual posterior distribution from the Williams Institute modelling, but alas I do not. However, since this is intended as a back-of-the-envelope style calculation, I’ll again try to make some sensible assumptions. In most situations I’d be willing to assume that the posterior is approximately normal, but that doesn’t work here because the percentages are too close to zero. Instead what I’ll do is use a beta distribution and choose parameters that ensure the relevant quantiles approximately mirror the numbers from the Williams Institute study:<sup>3</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.65</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3922.84</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.003230431 0.005153068 0.007716206</code></pre>
</div>
</div>
<div class="cell">
<details class="code-fold">
<summary>Parameter estimation code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the values I hand tuned originally</span></span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> \(par) {</span>
<span id="cb5-4">    prd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qbeta</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>), par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], par[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-5">    obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0032</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0052</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0077</span>)</span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>((obs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prd)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-7">  }</span>
<span id="cb5-8">)</span></code></pre></div>
</details>
</div>
<p>It’s awfully crude, but it works: the 95% equal-tail intervals that you’d get if this were the real posterior match the numbers reported by the Williams Institute, the distribution is bounded appropriately, and the point estimate (in this case the median) is pretty decent too. Good enough for the back of an envelope calculation I’d say.</p>
</section>
<section id="estimating-the-number-of-displaced-persons" class="level2">
<h2 class="anchored" data-anchor-id="estimating-the-number-of-displaced-persons">Estimating the number of displaced persons</h2>
<p>Okay, now I have some (slightly crude) posterior densities to express what we know about (a) the proportion of adults in the United States are transgender, and (b) the proportion of transgender adults in the United States that have been displaced courtesy of the anti-trans legislation sweeping the nation. Again using the numbers from the Williams Institute study as the basis for the calculation, I’ll assume that the adult population of the US is approximately 255,201,250 persons. Now, I personally don’t know how to convolve two beta distributions analytically, but it’s not even slightly hard to do numerically:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">sim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_adults =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255201250</span>,</span>
<span id="cb6-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_trans =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.65</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3922.84</span>),</span>
<span id="cb6-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop_displaced =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>),</span>
<span id="cb6-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_displaced =</span> n_adults <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prop_trans <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prop_displaced</span>
<span id="cb6-6">)</span></code></pre></div>
</div>
<p>Having done so, we can plot a distribution reflecting what we know about the number of transgender adults who have been displaced:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(sim, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(n_displaced)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_comma</span>())</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-15_dark-times/index_files/figure-html/displaced-trans-persons-histogram-1.png" class="img-fluid figure-img" alt="A histogram representing the uncertainty around the number of internally diplaced trans people within the United State. The plot shows a distribution with a peak at around 100000 people. The vast bulk of the distribution is between 50000 and 200000 people. There is a very slight positive skewness to the distribution." width="672"></p>
</figure>
</div>
</div>
</div>
<p>So… how many transgender people within the United States do we estimate have already been forced from their homes as a consequence of the dire political climate there? Here’s the headline number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_displaced)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 111379.2</code></pre>
</div>
</div>
<p>About 111000 people. That’s… a lot, and that number doesn’t even include the families of transgender adults, or transgender children, or the families of transgender children. I mean, there aren’t many of us. We are a small population, and this is a humanitarian disaster for transgender people in the United States. It’s something that has been building for several years now, and every trans person knows it.</p>
<p>The precise scale of the disaster isn’t entirely clear from the data. The point estimate of 111k people could be out by a factor of 2 in either direction, which you can see by calculating the 95% credible interval:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(sim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_displaced, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">025</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     2.5%     97.5% 
 51998.81 199427.60 </code></pre>
</div>
</div>
<p>Between 52000 and 199000 transgender adults have been displaced. No matter how you look at it, a <em>lot</em> of people have been forced to flee already.</p>
<p>At some point the rest of the American population will start to actually <em>do</em> something about this, right? I mean, something <strong>other</strong> than make it worse or waste your time and effort by <a href="https://statmodeling.stat.columbia.edu/2021/07/18/what-is-a-woman/">whining about the threat to society posed by trans women in sports and asking “what is a woman?”</a>.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Huge thank you to Martin Modrák for noticing the mistake in which I’d originally specified a Beta(14, 167) distribution here like an idiot.↩︎</p></li>
<li id="fn2"><p>You could do the same thing in a frequentist way, of course, but that would be no less crude than this Bayesian method, and anyway I already did that and found essentially the same answer. This isn’t a situation where Bayes-vs-orthodox matters very much. In the real world, the nuance is entirely around the SRS assumption and the accuracy of the responses. In that respect I’m of course oversimplifying, but let’s be honest… how much do you <em>really</em> think this would change things? Be honest.↩︎</p></li>
<li id="fn3"><p>The original version of this post used hand tuned parameter values because I had a brain fade and forgot that it’s absurdly easy to find least squares estimates with <code>optim()</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {On Living in Dark Times},
  date = {2023-06-15},
  url = {https://blog.djnavarro.net/posts/2023-06-15_dark-times},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“On Living in Dark Times.”</span> June
15, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-15_dark-times">https://blog.djnavarro.net/posts/2023-06-15_dark-times</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Statistics</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-15_dark-times/</guid>
  <pubDate>Wed, 14 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-15_dark-times/map.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A little ANSI trickery</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>On mastodon today I wrote cute little <a href="https://fosstodon.org/@djnavarro/110540314955265024">post</a> showing what my R startup message currently looks like:</p>
<p align="center" style="padding: 10px;">
<iframe src="https://fosstodon.org/@djnavarro/110540314955265024/embed" class="mastodon-embed" style="max-width: 100%; border: 0" width="400" allowfullscreen="allowfullscreen">
</iframe>
<script src="https://fosstodon.org/embed.js" async="async"></script>
</p>
<p>In the replies, I included the code showing how to generate the rainbow strip that appears at the bottom of the startup message. Calling this <code>rainbow_strip()</code> function from the R console will give you the result you’re looking for:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-3_527e641a2214b46c26543852ceae8538">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">rainbow_strip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e50000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff8d00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffee00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#028121"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004cff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#770088"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-3">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>make_ansi_style) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-4">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.x</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\u2583"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))))</span>
<span id="cb1-5">}</span></code></pre></div>
</div>
<p>The code isn’t very complicated, but it does rely on a few tricks. The most important trick is the one that occurs on the second line, in which I use the <a href="about:blank">cli</a> package to define a set of six styles, each of which colours the text in one of the colours from the LGBTIQ+ pride flag.<sup>1</sup> Each of these six styles is then applied to the UTF-8 character<sup>2</sup> string <code>"▃▃▃▃▃▃"</code> and the results are concatenated in the output. It’s very pretty. But suppose I wanted to reproduce the style out output within a quarto document like this one. Alas, it does not work, because information about text colour is not preserved in the output when the document is rendered:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_46d48e1489e413e9fbd81014cc0ab12f">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rainbow_strip</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃</code></pre>
</div>
</div>
<p>Hm. Well that’s annoying, but hardly surprising to anyone familiar with R markdown or quarto. But just to be sure, let’s try it again, shall we?</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-6_d87467b6413116321fd86361fb0a5448">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rainbow_strip</span>()</span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color:#e50000;">▃▃▃▃▃▃</span><span style="color:#ff8d00;">▃▃▃▃▃▃</span><span style="color:#ffee00;">▃▃▃▃▃▃</span><span style="color:#028121;">▃▃▃▃▃▃</span><span style="color:#004cff;">▃▃▃▃▃▃</span><span style="color:#770088;">▃▃▃▃▃▃</span>                                            
</pre>
</div>
</div>
<p>Say what? It works the second time, but not the first? Peculiar. Someone – possibly me?<sup>3</sup> – must be engaged in some trickery that isn’t obvious from first inspection.</p>
<section id="the-trick-revealed" class="level2">
<h2 class="anchored" data-anchor-id="the-trick-revealed">The trick revealed</h2>
<p>If you were to take a look at the source code for this quarto document, the thing you’d immediately notice is that while both of these two code chunks contain R code, one of them is explicitly an R chunk and the other is… not. Here’s the first one again, with the quarto code fencing shown:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-7_9ff7cfcf39d3ab6ad43ce5e86d808d3e">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb5-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">rainbow_strip()</span></span>
<span id="cb5-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃▃</code></pre>
</div>
</div>
<p>The second one, however, is tagged as an “asciicast” code chunk. It still executes R code, but something extra is going on when the code runs, because now the output now preserves the text colour:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-9_7ad14db0db3e31d6ce1fdcfe4ff75ef8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{asciicast}</span></span>
<span id="cb7-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">rainbow_strip()</span></span>
<span id="cb7-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color:#e50000;">▃▃▃▃▃▃</span><span style="color:#ff8d00;">▃▃▃▃▃▃</span><span style="color:#ffee00;">▃▃▃▃▃▃</span><span style="color:#028121;">▃▃▃▃▃▃</span><span style="color:#004cff;">▃▃▃▃▃▃</span><span style="color:#770088;">▃▃▃▃▃▃</span>                                            
</pre>
</div>
</div>
<p>To be clear, there’s nothing special about my <code>rainbow_strip()</code> function here. You can see the same thing happening with any R function that produces coloured text in the output. For example, when printing a tibble at the R console you would normally expect to see the less important parts of the output printed in a muted grey colour. However, when we create a tibble in a quarto document the shading disappears:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-10_f85063e517b34ea041cf40e854bbc883">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is an R chunk</span></span>
<span id="cb8-2">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
      x y    
  &lt;int&gt; &lt;chr&gt;
1     1 a    
2     2 b    
3     3 c    </code></pre>
</div>
</div>
<p>The shading reappears when the same code is executed with the asciicast knitr engine:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-11_5dbfd9c141f4d7dd19c3ebcd98104930">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this is an asciicast chunk</span></span>
<span id="cb10-2">tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color: #999999;"># A tibble: 3 × 2</span>                                                               
      x y                                                                       
  <span style="font-style: italic;color: #999999;">&lt;int&gt;</span> <span style="font-style: italic;color: #999999;">&lt;chr&gt;</span>                                                                   
<span style="color: #c2c2c2;">1</span>     1 a                                                                       
<span style="color: #c2c2c2;">2</span>     2 b                                                                       
<span style="color: #c2c2c2;">3</span>     3 c                                                                       
</pre>
</div>
</div>
<p>The thing that makes this all work is the <a href="https://r-lib.github.io/asciicast/">asciicast</a> package. Typically, the asciicast package is used to create screencast from R code. I’ve used it before on this blog, actually. When I wrote the <a href="../../pretty-little-clis/">“pretty little CLIs”</a> post about the cli package, I used asciicast to create all the animations that appear in the post. However, you can also use asciicast in conjunction with the <a href="https://yihui.org/knitr/">knitr</a> engine that powers the code execution in quarto.<sup>4</sup> Here’s the code chunk I used to set it up for the current post:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-12_1c8f46d5cfb498fd1529ce59a6e87d85">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb11-2"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">knitr::opts_chunk$set(</span></span>
<span id="cb11-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  collapse = FALSE,</span></span>
<span id="cb11-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  comment = "",</span></span>
<span id="cb11-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  out.width = "100%",</span></span>
<span id="cb11-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  cache = TRUE,</span></span>
<span id="cb11-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  asciicast_knitr_output = "html"</span></span>
<span id="cb11-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">asciicast::init_knitr_engine(</span></span>
<span id="cb11-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  echo = TRUE,</span></span>
<span id="cb11-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  echo_input = FALSE,</span></span>
<span id="cb11-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  same_process = TRUE,</span></span>
<span id="cb11-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  startup = quote({</span></span>
<span id="cb11-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    library(cli)</span></span>
<span id="cb11-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    options(</span></span>
<span id="cb11-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      cli.num_colors = cli::truecolor,</span></span>
<span id="cb11-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      asciicast_theme = list(background = c(255, 255, 255))</span></span>
<span id="cb11-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb11-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    set.seed(1)</span></span>
<span id="cb11-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  })</span></span>
<span id="cb11-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
</div>
<p>The first command sets the knitr options for R code chunks. The important line here is the one that sets <code>asciicast_knitr_output = "html"</code>, which ensures that asciicast produces HTML output. If you don’t set this, the output from asciicast chunks will be rendered as images rather than HTML. The second line does what you might expect: calling <code>asciicast::init_knitr_engine()</code> initialises the asciicast knitr engine.</p>
</section>
<section id="the-trick-explained" class="level2">
<h2 class="anchored" data-anchor-id="the-trick-explained">The trick explained</h2>
<p>In case you don’t already know this stuff, it’s probably worth explaining why the text colour in R output usually vanishes when R code is executed within a quarto or R markdown document. In fact, when I wrote the “pretty little CLIs” post I talked about precisely this:</p>
<blockquote class="blockquote">
<p>The R console is a terminal, and its behaviour doesn’t always translate nicely to HTML. Part of the magic of the rmarkdown package is that most of the time it is able to capture terminal output and translate it seamlessly into HTML, and we mere mortal users never notice how clever this is. However, when dealing with cli output, we run into cases where this breaks down and the law of leaky abstractions comes into play: text generated at the R console does not follow the same rules as text inserted into an HTML document, and R Markdown sometimes needs a little help when transforming one to the other.</p>
</blockquote>
<p>As regards colour:</p>
<blockquote class="blockquote">
<p>The colours and symbols used by cli, and supported in the R console, rely on <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape codes</a>, but those escape codes aren’t recognised in HTML</p>
</blockquote>
<p>In that post I used the <a href="https://github.com/brodieG/fansi">fansi</a> package to write a knitr hook that translated the relevant ANSI characters into HTML, thereby preserving the colour information. In essence, the asciicast package allows me to do the same thing here.</p>
<p>Fun!</p>
<div class="tight-text">
<div class="cell" data-hash="index_cache/html/unnamed-chunk-13_896aa2e8360efa56344722b235d6ac55">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">rainbow_flag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#e50000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff8d00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffee00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#028121"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#004cff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#770088"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(cli<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>make_ansi_style) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-4">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.x</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\u2588"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))))</span>
<span id="cb12-5">}</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rainbow_flag</span>()</span></code></pre></div>
<div class="asciicast" style="color: #B9C0CB;font-family: 'Fira Code',Monaco,Consolas,Menlo,'Bitstream Vera Sans Mono','Powerline Symbols',monospace;line-height: 1.300000">
<pre><span style="color:#e50000;">██████████████████</span>                                                              
<span style="color:#ff8d00;">██████████████████</span>                                                              
<span style="color:#ffee00;">██████████████████</span>                                                              
<span style="color:#028121;">██████████████████</span>                                                              
<span style="color:#004cff;">██████████████████</span>                                                              
<span style="color:#770088;">██████████████████</span>                                                              
</pre>
</div>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In the post on Mastodon I used <code>crayon::make_style ()</code> rather than <code>cli::make_ansi_style()</code>, but they do the same thing. After I wrote the post I remembered that the crayon package has been superseded by cli, so it’s generally better to use the cli version instead.↩︎</p></li>
<li id="fn2"><p>In the source code I use <code>"\u2583"</code> to produce the <a href="https://www.w3schools.com/charsets/ref_utf_block.asp">UTF-8 block character</a> <code>"▃"</code>.↩︎</p></li>
<li id="fn3"><p>Definitely me.↩︎</p></li>
<li id="fn4"><p>I mean, that’s assuming you’re using knitr as the engine, which I am in this post. There’s nothing stopping you from using jupyter as the execution engine, which I’ve done in the past for python-focused posts.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {A Little {ANSI} Trickery},
  date = {2023-06-14},
  url = {https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“A Little ANSI Trickery.”</span> June 14,
2023. <a href="https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks">https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks/</guid>
  <pubDate>Tue, 13 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-14_ansi-tricks/flag.png" medium="image" type="image/png" height="89" width="144"/>
</item>
<item>
  <title>Pins and needles</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>A few days ago <a href="https://youtu.be/GwQW3KW3DCc">I made a huge mistake</a>. I was working on a project that, quite rightly, I’d placed under version control. It lived within a git repository, and that git repository was hosted remotely on GitHub. That’s not the mistake: version control is a good thing. The mistake arrived when the project generated a large output files (about 300Mb in size), and because it’s not a good idea to have large files under version control with git,<sup>1</sup> I added that file to <code>.gitignore</code>. Again, not a mistake per se, but you can see the shape of the mistake already: the large file doesn’t exist anywhere except as an untracked file in my local git repo. Bad things can happen in this situation, and lo and behold a few hours later when I messed up something else and unthinkingly called <code>git reset --hard</code> to revert to an earlier state, the file – which took about two hours to generate in the first place – vanished.</p>
<p>Fuuuuuuuuuuck. I’m an idiot.</p>
<p>Okay, that’s not true. I’m not an idiot. But I what I am (or was), is a person who doesn’t have a workflow in place to manage data files that don’t really belong in a git repository, and I paid the price for that huge tiny mistake. Lesson learned.</p>
<p>This is the story of <a href="https://en.wikipedia.org/wiki/Dr._Strangelove">how I learned how to stop worrying and love pins</a>. It’s not a very thorough or detailed post. I’m trying to follow <a href="https://jvns.ca/blog/2023/06/05/some-blogging-myths/">Julia Evans’ advice on blogging</a> and allow myself to tell personal stories, even if those stories are incomplete or imperfect. Not every post needs to be a goddamn monograph.</p>
<section id="storing-data-with-pins" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="storing-data-with-pins">Storing data with pins</h2>
<p>As with everything in data science, mine is a problem that can be solved in many different ways. In this instance I’m working within R, which influences how I think about this. Even within R there are multiple solutions, but I’m lazy and chose to use the <a href="https://pins.rstudio.com/">pins</a> package for this because I know the developers and it was the first option that came to mind. I don’t really want to write a full tutorial on the pins package because I’m fairly new to it myself, but in case you don’t already know pins, here’s a very quick summary:</p>
<ul>
<li><p>A <strong>pin</strong> is a serialised copy of an R object saved to disk along with accompanying metadata. The most obvious kind of object to store in this way is a data frame, but the general approach is broader. You can choose what format the object is stored in. For general R objects you can write to the native <a href="https://rdrr.io/r/base/readRDS.html">rds</a> format or the <a href="https://github.com/traversc/qs">qs</a> format. Lists can be saved as json. For rectangular objects like data frames you also have the options of writing to a csv file, a <a href="https://parquet.apache.org/">parquet</a> file, or the <a href="https://arrow.apache.org/docs/format/Columnar.html#ipc-file-format">arrow IPC file format</a>.</p></li>
<li><p>Pins live within a <strong>board</strong>, which refers to the file storage location. This can be a folder on your local machine, or a bucket on a cloud storage provider (AWS, Azure, GCS, etc). When reading or writing a pin, you read or write to the board. Each board is associated with a manifest, a yaml file called <code>_pins.yaml</code> that lives in the root directory of the board and lists all the pins stored in the board.</p></li>
</ul>
<p>There’s more nuance to pins than this: pins can be versioned and given tags, for instance. But I’m not going to bother with all that here. Instead, I’ll dive straight in and illustrate a very simple workflow using pins that solves about 90% of my problems with almost no effort…</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/immo-wegmann-zqO87IQK6c0-unsplash.jpg" class="img-fluid" alt="An image showing two pieces of paper pinned to a board"></p>
</div>
</section>
<section id="using-pins-with-dropbox-personal-storage" class="level2">
<h2 class="anchored" data-anchor-id="using-pins-with-dropbox-personal-storage">Using pins with Dropbox personal storage</h2>
<p>Okay, let’s have a look at ways to solve my problem using pins. I am by nature a lazy person who looks for the easiest solutions to my problems. In particular, I habitually look for solutions that align nicely with my existing setup. In this case, my first thought was to use Dropbox. For many years now I have organised my “personal” files<sup>2</sup> on my local machine by keeping my git repos in <code>~/GitHub</code> and keeping my files that aren’t under version control (but should still be backed up) in <code>~/Dropbox</code>. Viewed from that perspective, the solution I’m looking for is something where I can keep my git repos in <code>~/GitHub</code>, but have the large data files stored in <code>~/Dropbox</code>.</p>
<p>This workflow is very easy to set up with pins. It’s not what I do now (more on that momentarily) but it was the first thing I tried and it works beautifully for personal use. All I have to do is create a Dropbox folder that I’ll use to store my pins (say, <code>~/Dropbox/Pins</code>), and then create a board in that folder. First, let’s make sure I have the folder:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-2_7212a78f918f330c65e28bea70103cc1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Dropbox/Pins"</span>)</span></code></pre></div>
</div>
<p>Now I’ll load the pins package and create a board in that folder.</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-3_d11ca5376e296d9e616663ad3d885347">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pins)</span>
<span id="cb2-2">board_dropbox <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_folder</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Dropbox/Pins"</span>)</span>
<span id="cb2-3">board_dropbox</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pin board &lt;pins_board_folder&gt;
Path: '~/Dropbox/Pins'
Cache size: 0</code></pre>
</div>
</div>
<p>Let’s suppose I want to pin a copy of the <code>mpg</code> data from the ggplot2 package as a csv file. I’d do that by calling <code>pin_write()</code>:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-4_b5e66aa3a9dce8588733a4455802cbf2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_write</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">board =</span> board_dropbox,</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mpg,</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpg"</span>,</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csv"</span></span>
<span id="cb4-6">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Creating new version '20230613T004154Z-26aa0'
Writing to pin 'mpg'</code></pre>
</div>
</div>
<p>The <code>pin_write()</code> function allows you to supply more information and metadata than this, but – again – I’m not going to bother with all that here. The main thing for my purposes is that <code>pin_write()</code> has indeed written some files to disk:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-5_b5005892aac663e22f76f64bcfb84b27">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/Dropbox/Pins"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recurse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/home/danielle/Dropbox/Pins/mpg
/home/danielle/Dropbox/Pins/mpg/20230613T004154Z-26aa0
/home/danielle/Dropbox/Pins/mpg/20230613T004154Z-26aa0/data.txt
/home/danielle/Dropbox/Pins/mpg/20230613T004154Z-26aa0/mpg.csv</code></pre>
</div>
</div>
<p>Okay that’s easy enough. The next step is to check if I can read the data back to R. That’s very easy to do with <code>pin_read()</code>. When I pass the board (<code>board_dropbox</code>) and the name of the pin (<code>"mpg"</code>) to this function, it returns the data:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-6_0426e2247b6e420b3778526804575775">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(board_dropbox, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpg"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 234 × 11
   manufacturer model  displ  year   cyl trans drv     cty   hwy fl    class
   &lt;chr&gt;        &lt;chr&gt;  &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;
 1 audi         a4       1.8  1999     4 auto… f        18    29 p     comp…
 2 audi         a4       1.8  1999     4 manu… f        21    29 p     comp…
 3 audi         a4       2    2008     4 manu… f        20    31 p     comp…
 4 audi         a4       2    2008     4 auto… f        21    30 p     comp…
 5 audi         a4       2.8  1999     6 auto… f        16    26 p     comp…
 6 audi         a4       2.8  1999     6 manu… f        18    26 p     comp…
 7 audi         a4       3.1  2008     6 auto… f        18    27 p     comp…
 8 audi         a4 qu…   1.8  1999     4 manu… 4        18    26 p     comp…
 9 audi         a4 qu…   1.8  1999     4 auto… 4        16    25 p     comp…
10 audi         a4 qu…   2    2008     4 manu… 4        20    28 p     comp…
# ℹ 224 more rows</code></pre>
</div>
</div>
<p>Yay!</p>
<p>There’s quite a bit going on under the hood, and I’m glossing over all sorts of details related to metadata, versioning and so on. There’s a reason why pins doesn’t simply dump the csv file into the root folder and call it a day. The extra stuff serves a purpose. But let’s not worry about that for now. What matters is that it works.</p>
<p>Unfortunately, my job is not quite finished. What I haven’t done yet is create a manifest file that summarises the content of the board. Fortunately that’s also easy to do:</p>
<div class="cell" data-hash="index_cache/html/unnamed-chunk-7_c13794266f79fd00bbb10429918b4a5b">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_board_manifest</span>(board_dropbox)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Manifest file written to root folder of board, as `_pins.yaml`</code></pre>
</div>
</div>
<p>This creates a <code>_pins.yaml</code> file that contains the relevant summary. The pins package doesn’t automate this part of the process, so you need to call <code>write_board_manifest()</code> every time you modify the pins stored in the board. But that’s pretty easy to do.</p>
<p>All in all, quite painless, and the really nice thing about it is that this dead-simple workflow is perfectly sufficient for my immediate needs. I can now use my <code>~/Dropbox/Pins</code> folder as the place to keep my big data files without messing up my git workflow at all. The pins package provides a suite of tools that allow me to manipulate pins, but this isn’t the post for that. All I care about right now is convincing myself that yes, this actually will address my immediate concern.</p>
<p>Yay again! Problem solved.</p>
<p>Well, sort of.</p>
</section>
<section id="making-a-huge-tiny-mistake" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="making-a-huge-tiny-mistake">Making a huge tiny mistake…</h2>
<p>The shortcoming of this approach is that it only works for me. Although my <code>~/Dropbox/Pins</code> folder is backed up, thereby ensuring I don’t lose my data files, it’s not shared with anyone else. One solution to this would of course be to share the folder. Dropbox supports that, and this would work perfectly well for small-group collaboration. If I’m working with a bunch of people on a project and we need shared copies of a data file, I could share the folder with them and everything would work for them too. But it’s not a <em>great</em> solution to the problem, and it’s not ideal if I want to create a public repository of data files that anyone can access. Yes, you <em>can</em> do that with Dropbox, but it’s not really what the service is supposed to be used for. To my mind, a better approach in that situation is to create a file storage bucket with Amazon AWS S3, or Google Cloud Storage, or whatever. If I then make that bucket publicly readable, anyone can access my pins. That seems like a much better plan to me.</p>
<p>Unfortunately, it’s at this point I made a tiiiiiny mistake. I decided to use Google Cloud Storage to host my buckets because that’s the cloud provider I’m most familiar with… but unbeknownst to me at the time it turns out that support for GCS buckets in the pins package is a work in progress. It mostly works but there’s a few features still missing, and I had to resort to a truly awful hack in order to get what I wanted.</p>
<p>But I’m getting ahead of myself. Let’s start out by creating the buckets and see what happens…</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/nicolas-brulois-EA4MvInOSy0-unsplash.jpg" class="img-fluid" alt="Two metal buckets hanging from hooks on a bright yellow wall"></p>
</div>
</section>
<section id="creating-and-configuring-the-storage-buckets" class="level2">
<h2 class="anchored" data-anchor-id="creating-and-configuring-the-storage-buckets">Creating and configuring the storage buckets</h2>
<p>Over the years I’ve done quite a bit of work using Google Cloud Platform. Small scale stuff, generally, but nevertheless I’ve had enough experience with it that I’m fairly comfortable with the <a href="https://cloud.google.com/sdk/gcloud/">gcloud</a> command line tool. So naturally, the first thing I did was create my buckets from the terminal.<sup>3</sup> This isn’t supposed to be a gcloud tutorial, but in case you’re interested there’s some <a href="https://cloud.google.com/storage/docs/creating-buckets#storage-create-bucket-cli">relevant documentation</a> that explains what I did. Everything in google cloud takes place within a project, specified by project ID (in this case <code>pins-389407</code>). For my own purposes I have two buckets in my pins project: <code>djnavarro-pins</code> is where I store publicly accessible data, and <code>djnavarro-private-pins</code> is where I keep private pins. Rather than set defaults, I have a tendency to do everything explicitly, so the <code>--project</code> flag is set in each command, as is the <code>--location</code> flag used to specify that I want my data to be stored in Sydney (also known as <code>australia-southeast1</code>). Anyway, here’s the command to create the bucket:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage buckets create gs://djnavarro-pins/ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb12-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span> pins-389407 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--location</span> australia-southeast1 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb12-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--uniform-bucket-level-access</span></span></code></pre></div>
<p>The <code>--uniform-bucket-level-access</code> flag is used to indicate that I’m not doing fancy file-specific access control. I’m too lazy or simple-minded for that: I want one bucket to be public, and another bucket to be private. By default the buckets are private, and to make all files in the bucket publicly readable (<a href="https://cloud.google.com/storage/docs/access-control/making-data-public#command-line_1">relevant documentation</a>) the command I want is this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage buckets add-iam-policy-binding gs://djnavarro-pins/ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--member</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>allUsers <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--role</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>roles/storage.objectViewer</span></code></pre></div>
<p>Cool. <a href="https://youtu.be/DlQoXP2XH68">Now I have a machine gun</a>. Um, sorry. Now I have a public GCS bucket. Yes. That’s what I meant. Let’s use it to store my pins.</p>
</section>
<section id="writing-pins-to-a-board-on-google-cloud-storage" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="writing-pins-to-a-board-on-google-cloud-storage">Writing pins to a board on Google Cloud Storage</h2>
<p>For the moment I’m going to look at this solely from my perspective: as the owner of this public bucket, how can I use it to store pins? I’m not going to concern myself with how other people can access it right now. I’ll get to that at the end of the post.</p>
<p>Let’s say I want to pin the <code>diamonds</code> data from the ggplot2 package as a csv file. In order to write anything to my bucket, I need to authenticate with google. I find this step clunky but doable. The first thing I need to do is obtain an authentication token, which I can obtain with the help of the <a href="https://gargle.r-lib.org/">gargle</a> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(gargle)</span>
<span id="cb14-2">scope <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.googleapis.com/auth/cloud-platform"</span></span>
<span id="cb14-3">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token_fetch</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scopes =</span> scope)</span></code></pre></div>
</div>
<p>This workflow is designed for interactive use so there’s a confirmation process to follow. Once that’s done I can authenticate with the <a href="https://code.markedmondson.me/googleCloudStorageR/">googleCloudStorageR</a> package by passing the token to the <code>gcs_auth()</code> function. Once that’s done I can list the contents of my bucket with <code>gcs_list_objects()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(googleCloudStorageR)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_auth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> token)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins"</span>)</span></code></pre></div>
</div>
<div class="column-page-inset-right">
<pre><code>                                                      name      size             updated
1                                               _pins.yaml 161 bytes 2023-06-12 07:33:04
2              warfpk_data/20230610T142554Z-b8888/data.txt 190 bytes 2023-06-10 14:26:11
3       warfpk_data/20230610T142554Z-b8888/warfpk_data.csv      8 Kb 2023-06-10 14:26:11
4             warfpk_draws/20230610T142202Z-5bd80/data.txt 200 bytes 2023-06-10 14:23:05
5     warfpk_draws/20230610T142202Z-5bd80/warfpk_draws.csv  281.4 Mb 2023-06-10 14:25:26
6           warfpk_summary/20230610T083635Z-340c1/data.txt 200 bytes 2023-06-10 08:38:44
7 warfpk_summary/20230610T083635Z-340c1/warfpk_summary.csv    1.2 Mb 2023-06-10 08:38:44</code></pre>
</div>
<p>As you can see from this file listing, there are already a few pins stored in this bucket. That’s because I’d been using it in <a href="../../pop-pk-models/">my previous post</a>, which was indeed the project in which I’d made my huge mistake.</p>
<p>The googleCloudStorageR package has quite a bit of functionality built into it, and I can read and write whatever I want to the bucket using this interface. However, what I really want to do is abstract over the low level processes using the pins package. So, very similar to what I did with my local dropbox folder, I’ll use the <code>board_gcs()</code> function to treat the <code>gs://djnavarro-pins</code> bucket as a board:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(pins)</span>
<span id="cb17-2">board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_gcs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins"</span>)</span></code></pre></div>
</div>
<p>Because I’ve authenticated and because I have write access to the bucket, I can write my pins directly to the board using <code>pin_write()</code>. The command for a board stored as a GCS bucket is essentially identical to the command I used with my local folder earlier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_write</span>(</span>
<span id="cb18-2">  board, </span>
<span id="cb18-3">  ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>diamonds, </span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds"</span>, </span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csv"</span></span>
<span id="cb18-6">)</span></code></pre></div>
</div>
<p>Under the hood the work is done by googleCloudStorageR, and when I run this command it whines a little about needing <code>predefinedAcl = "bucketLevel"</code>, but it’s smart enough to get the job done anyway. In principle what I should be doing to prevent the warning messages is pass this argument to <code>pin_write()</code> via the dots, but unfortunately <code>pin_write()</code> appears to be a bit trigger happy and it throws an error if I do that. As far as I can tell what’s happening is that pins is incorrectly guessing that the argument is misspelled, so for the time being I’ll just have to live with googleCloudStorageR grumbling at me.</p>
<p>What really matters here is that it works. We can verify that the files have been written as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins"</span>)</span></code></pre></div>
</div>
<div class="column-page-inset-right">
<pre><code>                                                      name      size             updated
1                                               _pins.yaml 161 bytes 2023-06-12 07:33:04
2                 diamonds/20230612T073405Z-c9e9b/data.txt 189 bytes 2023-06-12 07:34:05
3             diamonds/20230612T073405Z-c9e9b/diamonds.csv    2.6 Mb 2023-06-12 07:34:14
4              warfpk_data/20230610T142554Z-b8888/data.txt 190 bytes 2023-06-10 14:26:11
5       warfpk_data/20230610T142554Z-b8888/warfpk_data.csv      8 Kb 2023-06-10 14:26:11
6             warfpk_draws/20230610T142202Z-5bd80/data.txt 200 bytes 2023-06-10 14:23:05
7     warfpk_draws/20230610T142202Z-5bd80/warfpk_draws.csv  281.4 Mb 2023-06-10 14:25:26
8           warfpk_summary/20230610T083635Z-340c1/data.txt 200 bytes 2023-06-10 08:38:44
9 warfpk_summary/20230610T083635Z-340c1/warfpk_summary.csv    1.2 Mb 2023-06-10 08:38:44</code></pre>
</div>
<p>Brilliant! It does work! The files for the diamonds pin have been written. <a href="https://youtu.be/QcCHLfVdhXg">Everything is fine</a>. Except… it isn’t. Notice that the <code>_pins.yaml</code> manifest file is still 161 bytes in size. It hasn’t been update to add an entry for the diamonds data, which we can confirm by downloading the file directly using <code>googleCloudStorageR::gcs_get_object()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_get_object</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins/_pins.yaml"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb21-2">  yaml<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.yaml</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>()</span></code></pre></div>
</div>
<pre><code>✔ Downloaded and parsed _pins.yaml into R object of class: character
|
  warfpk_data:
  - warfpk_data/20230610T142554Z-b8888/
  warfpk_draws:
  - warfpk_draws/20230610T142202Z-5bd80/
  warfpk_summary:
  - warfpk_summary/20230610T083635Z-340c1/</code></pre>
<p>Okay, fair enough. That’s not at all surprising, because I haven’t called <code>write_board_manifest()</code> to update the manifest file yet. Unfortunately, this is the moment at which I had to resort to a <a href="https://en.wikipedia.org/wiki/Alexander_and_the_Terrible,_Horrible,_No_Good,_Very_Bad_Day">terrible horrible no good very bad hack</a>.<sup>4</sup></p>
<p>This is the “needles” part of my “pins and needles” story.</p>
<p><br></p>
<div class="column-page">
<p><img src="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/lisa-woakes-5FTXPrP2k3c-unsplash.jpg" class="img-fluid" alt="Numerous pins pushed into a colourful pin cushion"></p>
</div>
</section>
<section id="the-terrible-horrible-no-good-very-bad-hack" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-terrible-horrible-no-good-very-bad-hack">The terrible horrible no good very bad hack</h2>
<p>There’s a bit of a painful thing that follows because pins doesn’t currently have working <code>pin_list()</code> method for google cloud storage. This in turn means that I can’t currently use <code>write_board_manifest()</code> to write a manifest file for my board, because it relies on the <code>pin_list()</code> function to do part of the work. That’s a huge pain. A little browsing on github reassures me that the <a href="https://github.com/rstudio/pins-r/pull/695">developers are well aware of the problem</a>, and addressing this is indeed on the to-do list. Awesome. I’m a patient person, and happy to wait for it to be addressed. Unfortunately patience doesn’t solve my problem in the here-and-now, so while I’m waiting I decided to put together some helper functions that are good enough for my immediate needs. This <code>pin_list_gcs()</code> function returns a character vector with the names of my stored pins:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">pin_list_gcs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(board, ...) {</span>
<span id="cb23-2">  googleCloudStorageR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bucket)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> _, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb23-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/.*"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replacement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> _) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb23-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>()</span>
<span id="cb23-6">}</span></code></pre></div>
</div>
<p>Now a little bit of evil, in which I do the thing you should never ever do. I’m going to mess with the internals of the pins package and overwrite its internal <code>pins_list.pins_board_gcs()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlockBinding</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.symbol</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pin_list.pins_board_gcs"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pins"</span>))</span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assignInNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pin_list.pins_board_gcs"</span>, pin_list_gcs, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pins"</span>)</span></code></pre></div>
</div>
<p>I am a terrible person.</p>
<p>But you knew that already, so let’s move on.</p>
<p>My next step is to write an S3 method that allows me to write a manifest file for my :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">write_board_manifest_yaml.pins_board_gcs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(board, manifest, ...) {</span>
<span id="cb25-2">  temp_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> withr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local_tempfile</span>()</span>
<span id="cb25-3">  yaml<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_yaml</span>(manifest, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> temp_file)</span>
<span id="cb25-4">  googleCloudStorageR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_upload</span>(</span>
<span id="cb25-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> temp_file, </span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> board<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>bucket, </span>
<span id="cb25-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text/yaml"</span>,</span>
<span id="cb25-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_pins.yaml"</span></span>
<span id="cb25-9">  )</span>
<span id="cb25-10">}</span></code></pre></div>
</div>
<p>Now this works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_board_manifest_yaml</span>(board, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">manifest =</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_manifest</span>(board))</span></code></pre></div>
</div>
<p>We can verify that we’ve written the updated file. For reasons that escape me, this won’t work unless you start a new session and re-authenticate in the process<sup>5</sup>. If you don’t do that you’ll just get the old version of the manifest file. I have no idea why. Anyway here’s the result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_get_object</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins/_pins.yaml"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb27-2">  yaml<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.yaml</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>()</span></code></pre></div>
</div>
<pre><code>✔ Downloaded and parsed _pins.yaml into R object of class: character
|
  diamonds:
  - diamonds/20230612T071111Z-c9e9b/
  warfpk_data:
  - warfpk_data/20230610T142554Z-b8888/
  warfpk_draws:
  - warfpk_draws/20230610T142202Z-5bd80/
  warfpk_summary:
  - warfpk_summary/20230610T083635Z-340c1/</code></pre>
<p>Similarly, if we now list the contents of the bucket we can see that it’s all been updated:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcs_list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gs://djnavarro-pins"</span>)</span></code></pre></div>
</div>
<div class="column-page-inset-right">
<pre><code>                                                      name      size             updated
1                                               _pins.yaml 206 bytes 2023-06-12 07:39:53
2                 diamonds/20230612T073405Z-c9e9b/data.txt 189 bytes 2023-06-12 07:34:05
3             diamonds/20230612T073405Z-c9e9b/diamonds.csv    2.6 Mb 2023-06-12 07:34:14
4              warfpk_data/20230610T142554Z-b8888/data.txt 190 bytes 2023-06-10 14:26:11
5       warfpk_data/20230610T142554Z-b8888/warfpk_data.csv      8 Kb 2023-06-10 14:26:11
6             warfpk_draws/20230610T142202Z-5bd80/data.txt 200 bytes 2023-06-10 14:23:05
7     warfpk_draws/20230610T142202Z-5bd80/warfpk_draws.csv  281.4 Mb 2023-06-10 14:25:26
8           warfpk_summary/20230610T083635Z-340c1/data.txt 200 bytes 2023-06-10 08:38:44
9 warfpk_summary/20230610T083635Z-340c1/warfpk_summary.csv    1.2 Mb 2023-06-10 08:38:44</code></pre>
</div>
<p>Yup, it works. But I’m under no illusions. This is not a good workflow. Messing around with the internals of someone else’s package is… bad. Very bad. I do not recommend anyone do this. This is purely a temporary fix I’m adopting for the time being while GCS support in pins is incomplete.</p>
<p>Okay, whatever. Let’s move on, shall we? Ugly hack notwithstanding, I now have a workflow that allows me to use a public GCS bucket to store my pins. It’s good enough for now, so I’ll now take a look at how <em>other</em> people can read pins from this bucket.</p>
</section>
<section id="the-read-only-workflow" class="level2">
<h2 class="anchored" data-anchor-id="the-read-only-workflow">The read-only workflow</h2>
<p>The nice thing about cloud storage services like AWS S3 and GCS is that they provide public, human readable URLs for shared files. My <code>djnavarro-pins</code> bucket, for instance, is publicly available at <code>https://storage.googleapis.com/djnavarro-pins/</code>. Any R users who wants to use one of my pins can do so using the <code>pins::board_url()</code> function. We can create a read-only board by passing it the path to the manifest file, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">read_only_board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_url</span>(</span>
<span id="cb31-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://storage.googleapis.com/djnavarro-pins/_pins.yaml"</span></span>
<span id="cb31-3">)</span></code></pre></div>
</div>
<p>Since this other person isn’t me and doesn’t know what pins are stored here, they might want to use the <code>pin_search()</code> function to get a listing of all the pins, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_search</span>(read_only_board)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 6
  name           type  title        created             file_size meta      
  &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;        &lt;dttm&gt;              &lt;fs::byt&gt; &lt;list&gt;    
1 diamonds       csv   diamonds: a… 2023-06-12 17:34:05     2.64M &lt;pins_met&gt;
2 warfpk_data    csv   warfpk_data… 2023-06-11 00:25:54     8.01K &lt;pins_met&gt;
3 warfpk_draws   csv   warfpk_draw… 2023-06-11 00:22:02   281.39M &lt;pins_met&gt;
4 warfpk_summary csv   warfpk_summ… 2023-06-10 18:36:35     1.15M &lt;pins_met&gt;</code></pre>
</div>
</div>
<p>Cool. Now that we know what pins are available, we can read the data stored in the “diamonds” pin directly into R by calling <code>pin_read()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(read_only_board, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-2">  tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 53,940 × 10
   carat cut       color clarity depth table price     x     y     z
   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31
 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75
 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48
 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47
 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53
 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49
10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39
# ℹ 53,930 more rows</code></pre>
</div>
</div>
<p>A nice thing about using <code>pin_read()</code> rather than downloading the file directly is that the pins package automatically creates a local cache of previously-downloaded pins. You don’t have to download the same file over and over when re-running your code. I’m not going to go into those details here, but I will mention that it also provides functions that let you manage this cache without much difficulty. From this perspective, everything “just works”. It’s really quite nice.</p>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>On the whole I’m very happy with pins. It solves a real problem I have, and the interface is nice. I’ll probably use it for other things in the future. The specific issue I ran into with GCS boards is an annoyance, but one that I’m pretty certain will vanish as GCS support in pins matures. No big deal.</p>
<p>That being said, because I am very uncomfortable with the fact that I’ve published my terrible horrible no good very bad hack to the internet, I will say it again… as a general long-term strategy, my workflow is <em>terrible</em> and I have no intention whatsoever of relying on it. Nobody else should rely on my terrible horrible no good very bad hack. I implemented it as a hotfix, nothing else. Under no circumstances is it wise to rely on a method that fucks around with the internals of a package.</p>
<p>Anyways… that’s about all I had to say really.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Indeed, GitHub won’t let you push a file that large to the remote repository unless you use large file storage, which is not a thing I want to do.↩︎</p></li>
<li id="fn2"><p>In this case what I really mean by “personal” isn’t that the files are sensitive in any way, just that I’m not trying to share them with anyone else. My workflow is designed to allow <em>me</em> to reproduce anything I’ve done in the past if my laptop mysteriously catches fire. At this point I’m not at all concerned about whether anyone else can reproduce it.↩︎</p></li>
<li id="fn3"><p>As a disclaimer: I am <em>not</em> a fan of so-called “command line bullshittery”. There’s nothing special about working from the command line, and I feel obliged to point out that you don’t actually need to use the gcloud CLI to do any of this. The google cloud console lets you do the exact same thing with a GUI. No big deal. If that approach feels easier to you, go for it!↩︎</p></li>
<li id="fn4"><p>Some hacks are like that. Even in Australia.↩︎</p></li>
<li id="fn5"><p>Actually, it does still work even without re-authentication if you explicitly specify the <code>generation</code> argument to <code>gcs_get_object()</code> but whatever.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Pins and Needles},
  date = {2023-06-12},
  url = {https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Pins and Needles.”</span> June 12, 2023.
<a href="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles">https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Reproducibility</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/</guid>
  <pubDate>Sun, 11 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-12_pins-and-needles/immo-wegmann-zqO87IQK6c0-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Building a population pharmacokinetic model with Stan</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p><strong>Note</strong>: This is the third post in a series on pharmacometric modelling, and implicitly assumes some knowledge of the concepts outlined in the first two:</p>
<ul>
<li>The first post talked about <a href="../../non-compartmental-analysis/">non-compartmental analysis</a> and in the process introduced some basic terminology used in pharamacometrics</li>
<li>The second post talked about building <a href="../../stan-ode/">compartmental models in Stan</a> and introduced a lot of the ideas I’ll build on here</li>
</ul>
<p>In the earlier posts I didn’t touch any real data sets, and only considered an idealised case where you have data from only a single person and therefore have no need for population models. I’ll address both of those shortcomings in this post.</p>
<section id="prologue" class="level2">
<h2 class="anchored" data-anchor-id="prologue">Prologue</h2>
<p>All the way back in 2006 I published a paper in the <em>Journal of Mathematical Psychology</em> called “Modelling individual differences with Dirichlet processes” with a bunch of no-name coauthors.<sup>1</sup> In brutal honesty the paper should probably have been called “Everything Danielle knows about Dirichlet processes, with a fig leaf of pretense of applying it to data”, but it did allow me to use the following utterly unhinged quote from an anonymous reviewer on an earlier paper:</p>
<blockquote class="blockquote">
<p>I am surprised that the author has used this data set. In my lab, when we collect data with such large individual differences, we refer to the data as “junk”. We then re-design our stimuli and/or experimental procedures, and run a new experiment. The junk data never appear in publications</p>
</blockquote>
<p>This attitude, which I have encountered from time to time in research, utterly puzzles me. One of the most salient things about human thought and behaviour is that… well, people think and act differently to each other. If you want to understand the human mind, you kinda have to engage with that fact and develop experiments and modelling techniques that can accommodate this variation. I expressed the idea schematically in Figure 2 of the paper:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/population-models.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I am still quite fond of this figure. It nicely captures the idea that when developing population models we are usually operating in three spaces at once:</p>
<ul>
<li>At the <strong>data level</strong> we have observable quantities that we can measure in our experiments. Each person in our study can have different data values, and people can differ from each other in all kinds of ways</li>
<li>At the <strong>individual level</strong> we seek to infer the parameters of a model that can summarise the observations from a single person in a theoretically meaningful way, and account for how those observations might vary as a function of covariates.</li>
<li>At the <strong>population level</strong> we seek to infer parameters that describe the typical parameter values associated with individuals, and how those parameter values typically vary across individuals.</li>
</ul>
<p>Shockingly, it turns out that this basic framework is not even slightly specific to psychology. It’s something that shows up in almost every scientific domain, and there are standard statistical tools that we use to capture this idea that are surprisingly similar to one another even when the domain of application differs.</p>
<p>And so it transpires that, as I continue the process of teaching myself pharmacometrics, I discover that the modelling tools used in <strong>population pharmacokinetics</strong> (pop-PK) are shockingly familiar to me. So let’s dive in, shall we?</p>
</section>
<section id="some-resources" class="level2">
<h2 class="anchored" data-anchor-id="some-resources">Some resources</h2>
<p>To make the transition from modelling toy data sets to dealing with real ones, it helps a lot to have some real data to work with, and a worked example that shows how real data are analysed in practice. To that end, I’ve been relying on resources made publicly available by the <a href="https://www.paganz.org/">Population Approach Group of Australia and New Zealand</a>, who have a series of <a href="https://www.paganz.org/resources/">handy tutorials</a> for folks interested in pharmacometric modelling. The one I’m working through at the moment is a <a href="https://www.paganz.org/wp-content/uploads/2016/06/PAWs-Beginners-2019.zip">2019 workshop on pop-PK models</a> (link goes to a zip file), which provides a very nice tutorial on building such models.</p>
<p>The only catch, from my perspective, is that the tutorial uses the <a href="https://www.iconplc.com/solutions/technologies/nonmem/">NONMEM</a> pharmacometrics software, and I don’t have access to NONMEM. So as a fun little exercise, I’m going to translate some of the code from the workshop from NONMEM to Stan (and R).</p>
</section>
<section id="the-warfarin-data-set" class="level2">
<h2 class="anchored" data-anchor-id="the-warfarin-data-set">The warfarin data set</h2>
<p>The data set used in the tutorial is based on some old studies in the 1960s on the pharmacokinetics of <a href="https://en.wikipedia.org/wiki/Warfarin">warfarin</a>, an anticoagulant medication that is probably well-known to most people (I mean, even I know what warfarin is). The data is provided as a csv file called “warfpk.csv”, so my first step will be to import the data into R so that I can work with it.</p>
<section id="parsing-the-data" class="level3">
<h3 class="anchored" data-anchor-id="parsing-the-data">Parsing the data</h3>
<p>Reading the data into R using <code>readr::read_csv()</code> turns out to be mostly straightforward. Data are delimited with commas and there’s very little weirdness to deal with. The only thing that is non-standard for an R user is that the data file uses <code>"."</code> to specify missing values (which I’m guessing is standard in pharmacometrics), so I’ll need to state that explicitly when reading the data into R to ensure that numeric variables with missing values are correctly parsed as numeric:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">warfpk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warfpk.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_col_types =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-2">warfpk</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 289 × 10
   `#ID`  time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 0       0    66.7    50     1   100    -2     0  NA       1
 2 0       0.5  66.7    50     1    NA    NA     1   0       0
 3 0       1    66.7    50     1    NA    NA     1   1.9     0
 4 0       2    66.7    50     1    NA    NA     1   3.3     0
 5 0       3    66.7    50     1    NA    NA     1   6.6     0
 6 0       6    66.7    50     1    NA    NA     1   9.1     0
 7 0       9    66.7    50     1    NA    NA     1  10.8     0
 8 0      12    66.7    50     1    NA    NA     1   8.6     0
 9 0      24    66.7    50     1    NA    NA     1   5.6     0
10 0      36    66.7    50     1    NA    NA     1   4       0
# ℹ 279 more rows</code></pre>
</div>
</div>
<p>These column names are pretty standard in the field, in part because standard software like NONMEM expects these names. They’re perfectly fine for R too, with one minor exception: I’m going to rename the id variable using <code>dplyr::rename()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">warfpk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">#ID</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span>
<span id="cb3-2">warfpk</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 289 × 10
   id     time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 0       0    66.7    50     1   100    -2     0  NA       1
 2 0       0.5  66.7    50     1    NA    NA     1   0       0
 3 0       1    66.7    50     1    NA    NA     1   1.9     0
 4 0       2    66.7    50     1    NA    NA     1   3.3     0
 5 0       3    66.7    50     1    NA    NA     1   6.6     0
 6 0       6    66.7    50     1    NA    NA     1   9.1     0
 7 0       9    66.7    50     1    NA    NA     1  10.8     0
 8 0      12    66.7    50     1    NA    NA     1   8.6     0
 9 0      24    66.7    50     1    NA    NA     1   5.6     0
10 0      36    66.7    50     1    NA    NA     1   4       0
# ℹ 279 more rows</code></pre>
</div>
</div>
<p>Looking at this output more carefully, there’s one slightly puzzling thing here: the <code>id</code> column looks like it’s supposed to be a numeric id for the study participants, but R has parsed as a character vector. So there must be one non-numeric value in this column. I’d better find out what’s going on there. A bit of digging reveals there’s something peculiar going on with subject 12. Using <code>dplyr::filter()</code> to extract the data for that person we get this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 10
   id     time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 12      0    75.3    32     1   113    -2     0  NA       1
 2 12      1.5  75.3    32     1    NA    NA     1   0.6     0
 3 #12     3    75.3    32     1    NA    NA     1   2.8     0
 4 12      6    75.3    32     1    NA    NA     1  13.8     0
 5 12      9    75.3    32     1    NA    NA     1  15       0
 6 12     24    75.3    32     1    NA    NA     1  10.5     0
 7 12     36    75.3    32     1    NA    NA     1   9.1     0
 8 12     48    75.3    32     1    NA    NA     1   6.6     0
 9 12     72    75.3    32     1    NA    NA     1   4.9     0
10 12     96    75.3    32     1    NA    NA     1   2.4     0
11 12    120    75.3    32     1    NA    NA     1   1.9     0</code></pre>
</div>
</div>
<p>My first thought upon seeing this was that it must be a typo in the data file. No problem, it’s easy enough to remove the <code>#</code> character and convert the id variable to numeric:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">warfpk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb7-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-4">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb7-6">  )</span>
<span id="cb7-7">warfpk</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 289 × 10
      id  time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     0   0    66.7    50     1   100    -2     0  NA       1
 2     0   0.5  66.7    50     1    NA    NA     1   0       0
 3     0   1    66.7    50     1    NA    NA     1   1.9     0
 4     0   2    66.7    50     1    NA    NA     1   3.3     0
 5     0   3    66.7    50     1    NA    NA     1   6.6     0
 6     0   6    66.7    50     1    NA    NA     1   9.1     0
 7     0   9    66.7    50     1    NA    NA     1  10.8     0
 8     0  12    66.7    50     1    NA    NA     1   8.6     0
 9     0  24    66.7    50     1    NA    NA     1   5.6     0
10     0  36    66.7    50     1    NA    NA     1   4       0
# ℹ 279 more rows</code></pre>
</div>
</div>
<p>For the purposes of this post I am going to run with this version of the data, but later on it’s going to turn out that the data from participant 12 is the least well-fit by the model, which is a hint that this might have been deliberate. In fact, as I started doing some more digging into NONMEM and learned how to decipher a NONMEM input file, I discovered that the <code>#</code> character appears to be serving a specific function when used as a prefix in this data file. Per this line of the input (see later), it’s being used as an instruction to tell NONMEM to ignore the observation:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb9-1">$DATA ..\warfpk.csv IGNORE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>#</span></code></pre></div>
<p>What I’m guessing here is that this observation was dropped from the data set in the tutorial for some reason. It’s not obvious to me what the specific reason was for omitting that observation, and it’s possible I should also be filtering out that case, but I’m not going to worry about that for the purposes of this blog post.</p>
</section>
<section id="interpreting-the-data" class="level3">
<h3 class="anchored" data-anchor-id="interpreting-the-data">Interpreting the data</h3>
<p>Now that I have the data, I need to make sense of it. The csv file itself doesn’t give much information about the variables, but when digging into the NONMEM input files included with the workshop materials I found the citations to the original papers from whence the data came. The data originate in papers by O’Reilly and colleagues, published in 1963 and 1968. Both papers are available online in full text, and after reading through them, we can reverse engineer (most of!) a data dictionary:</p>
<ul>
<li><code>id</code>: Numeric value specifying the arbitrary identifier for each person</li>
<li><code>time</code>: Time elapsed since dose was administered (in hours)</li>
<li><code>wt</code>: Weight of each person (in kilograms)</li>
<li><code>age</code>: Age of each person (in years)</li>
<li><code>sex</code>: Biological sex of each person (0 = female, 1 = male)<sup>2</sup></li>
<li><code>amt</code>: Dose administered to this person at this time point (in milligrams)</li>
<li><code>rate</code>: Uncertain what this refers to, but it has value -2 when drug is administered and missing otherwise</li>
<li><code>dvid</code>: Appears to be a dummy variable indicating whether the dependent variable was measured at this time point (0 = false, 1 = true)</li>
<li><code>dv</code>: Measured value of the dependent variable (plasma warfarin concentration, in mg/L)</li>
<li><code>mdv</code>: Appears to be a dummy variable that is the reverse of <code>dvid</code>, and is presumably an indicator variable whose meaning is “missing dependent variable” (0 = false, 1 = true)</li>
</ul>
<p>One peculiarity of the data structure that appears to be quite standard in pharmacokinetics is that the data frame incorporates both <strong>measurement events</strong> where the drug concentration is measured, and <strong>dosing events</strong> where a dose of the drug is administered. It’s a perfectly sensible way to organise the data, but later on it will be convenient to separate them in order to pass the data to Stan in a format that it expects. To get a sense of what the dosing events look like, we can extract the relevant subset of the data frame by filtering the data on <code>dvid</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 10
      id  time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     0     0  66.7    50     1   100    -2     0    NA     1
 2     1     0  66.7    50     1   100    -2     0    NA     1
 3     2     0  66.7    31     1   100    -2     0    NA     1
 4     3     0  80      40     1   120    -2     0    NA     1
 5     4     0  40      46     0    60    -2     0    NA     1
 6     5     0  75.3    43     1   113    -2     0    NA     1
 7     6     0  60      36     0    90    -2     0    NA     1
 8     7     0  90      41     1   135    -2     0    NA     1
 9     8     0  50      27     0    75    -2     0    NA     1
10     9     0  70      28     1   105    -2     0    NA     1
# ℹ 22 more rows</code></pre>
</div>
</div>
<p>Notably, not everyone is given the same dose, and in an utterly unsurprising turn of events it turns out that the dose is calculated based on weight (which is in turn, I’m told, a proxy for the volume of distribution in systemic circulation):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb12-2">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb12-3">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(wt, amt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(sex))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weight (kg)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dose (mg)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/weight-dose-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Okay, that all makes sense.</p>
<p>Next, let’s take a look at the data from a single subject. The observations in the <code>warfpk</code> data set appear to aggregate data from multiple studies, with the consequence that different subjects can have different measurement schedules. Here’s participant 1, for instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 10
     id  time    wt   age   sex   amt  rate  dvid    dv   mdv
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     1    24  66.7    50     1    NA    NA     1   9.2     0
2     1    36  66.7    50     1    NA    NA     1   8.5     0
3     1    48  66.7    50     1    NA    NA     1   6.4     0
4     1    72  66.7    50     1    NA    NA     1   4.8     0
5     1    96  66.7    50     1    NA    NA     1   3.1     0
6     1   120  66.7    50     1    NA    NA     1   2.5     0</code></pre>
</div>
</div>
<p>A lot of the people in the data set have measurements taken on this schedule, but not everyone does. For comparison purposes, here’s participant 2:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 10
      id  time    wt   age   sex   amt  rate  dvid    dv   mdv
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     2   0.5  66.7    31     1    NA    NA     1   0       0
 2     2   2    66.7    31     1    NA    NA     1   8.4     0
 3     2   3    66.7    31     1    NA    NA     1   9.7     0
 4     2   6    66.7    31     1    NA    NA     1   9.8     0
 5     2  12    66.7    31     1    NA    NA     1  11       0
 6     2  24    66.7    31     1    NA    NA     1   8.3     0
 7     2  36    66.7    31     1    NA    NA     1   7.7     0
 8     2  48    66.7    31     1    NA    NA     1   6.3     0
 9     2  72    66.7    31     1    NA    NA     1   4.1     0
10     2  96    66.7    31     1    NA    NA     1   3       0
11     2 120    66.7    31     1    NA    NA     1   1.4     0</code></pre>
</div>
</div>
<p>This has implications for our model structure: we can’t assume a single set of measurement times that will be identical for all subjects. From a Stan point of view, this means that if we try to pass the observed plasma concentrations as an array of vectors (one per person), it won’t work. Since the vectors can have different lengths that data structure would be a ragged array, and Stan doesn’t allow those. Instead, we’re going to have to pass all the observations as one long vector and use indexing vectors to specify the “breakpoints” that indicate when the data from each person starts and stops.</p>
</section>
</section>
<section id="why-we-need-population-models" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="why-we-need-population-models">Why we need population models</h2>
<p>Now that we have a sense of the structure of the data, we can start drawing some plots designed to tell us what’s going on. I’ll start with a very naive kind of visualisation. Here’s a scatterplot of time versus measured drug concentration that doesn’t give you any indication about which observations belong to which person.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb17-3">    dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only include measured times</span></span>
<span id="cb17-4">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dv) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore missing dv cases</span></span>
<span id="cb17-5">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> dv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb17-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb17-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time since dose (hours)"</span>, </span>
<span id="cb17-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warfarin plasma concentration (mg/L)"</span></span>
<span id="cb17-12">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/warfarin-data-raw-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Looking at the data like this gives you the false impression that the data set is rather noisy.<sup>3</sup> To see why this is misleading, let’s add some lines that connect data from the same person:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> dv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey80"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb18-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb18-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time since dose (hours)"</span>, </span>
<span id="cb18-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warfarin plasma concentration (mg/L)"</span></span>
<span id="cb18-9">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/warfarin-data-connected-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The pattern of lines hints that a lot of this “noise” is not in fact noise, it’s systematic variation across people. This becomes more obvious when we disaggregate the data further and plot the observations from each person in a separate panel:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">warfpk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dvid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(dv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> time, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> dv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb19-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time since dose (hours)"</span>, </span>
<span id="cb19-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warfarin plasma concentration (mg/L)"</span></span>
<span id="cb19-10">  )</span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/warfarin-data-disaggregated-1.png" class="img-fluid figure-img column-page" width="1536"></p>
</figure>
</div>
</div>
</div>
<p>When plotted this way, it’s really clear that the data from each person is in fact quite precise. There’s very little noise in any of these individual-subject plots. They’re all very smooth looking curves: it just so happens that each person is unique and has their own curve. In other words, the vast majority of the variation is systematic difference across people: it’s not measurement error.</p>
<p>When data have this structure, you really (really really really really) need to adopt a statistical approach that accommodates individual differences. You need a pop-PK model.<sup>4</sup></p>
</section>
<section id="deciphering-nonmem-specifications" class="level2">
<h2 class="anchored" data-anchor-id="deciphering-nonmem-specifications">Deciphering NONMEM specifications</h2>
<p>Okay. Time for a digression, sort of. My primary goal in this post is to implement a pop-PK model from scratch in Stan, using material from a workshop on NONMEM as my launching point. There’s a twin motivation here. On the one hand, I want to extend the Stan code from my last pharmacometrics post so that it can handle pop-PK models. But on the other hand, I also want to familiarise myself with the nomenclature used in the field, which derives heavily from notation used in NONMEM. To that end, I’m going to start trying to write my model using NONMEM-style variable names, and in the process familiarise myself with how NONMEM input files are structured.</p>
<p>Reading NONMEM code takes a bit of effort if, like me, you’re not used to it. Decoding a NONMEM model specification requires you to understand the convention used to describe models, and to understand the syntax used in the input files. I’ll start with the notation.</p>
<section id="notation-from-nonmem" class="level3">
<h3 class="anchored" data-anchor-id="notation-from-nonmem">Notation from NONMEM</h3>
<p>To make sense of the statistical notation used in NONMEM specifications, I relied quite heavily on the two NONMEM tutorial papers by Bauer (2019) were helpful for me, and an older paper by Bauer et al (2007) that is a little more explicit about the statistical formulation of the models. I’m not 100% certain I’ve done the decoding correctly, but as far as I can tell the following syntactic conventions are very often used:</p>
<ul>
<li>Italicised lower case Greek symbols refer to scalar parameters: <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Csigma">, etc</li>
<li>Boldfaced upper case Greek symbols denote parameter vectors: <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Csigma">, etc</li>
<li>Boldfaced upper case Greek symbols denote parameter matrices: <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CTheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CSigma">, etc</li>
</ul>
<p>There is also a convention assigning meaning to the different Greek letters:</p>
<ul>
<li>Population mean<sup>5</sup> parameters are denoted with thetas (<img src="https://latex.codecogs.com/png.latex?%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CTheta">)</li>
<li>Population standard deviation<sup>6</sup> parameters are denoted (<img src="https://latex.codecogs.com/png.latex?%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">)</li>
<li>Individual departures from population mean are denoted with etas (<img src="https://latex.codecogs.com/png.latex?%5Ceta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta">)</li>
<li>Standard deviation of measurement error terms is denoted with sigmas (<img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Csigma">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5CSigma">)</li>
<li>Difference between individual subject expected values and observation are denoted with epsilons, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"></li>
</ul>
<p>To help myself keep the notation straight, I’ll consider a simple one-compartment intravenous bolus model with first-order elimination, because unlike other models that one has a nice clean analytical closed form for the pharmacokinetic function. If we let <img src="https://latex.codecogs.com/png.latex?f(t,%20k,%20V,%20D)"> denote the pharmacokinetic function that describes how drug concentration changes as a function of time <img src="https://latex.codecogs.com/png.latex?t">, dose <img src="https://latex.codecogs.com/png.latex?D">, elimination rate constant<sup>7</sup> <img src="https://latex.codecogs.com/png.latex?k">, and volume of distribution <img src="https://latex.codecogs.com/png.latex?V">, this model asserts that the blood plasma drug concentration decays exponentially with time:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af(t,%20k,%20V,%20D)%20=%20%5Cfrac%7BD%7D%7BV%7D%20%5Cexp(-kt)%0A"></p>
<p>In this model, the measurement time <img src="https://latex.codecogs.com/png.latex?t"> and dose <img src="https://latex.codecogs.com/png.latex?D"> (assumed to be administered at time <img src="https://latex.codecogs.com/png.latex?t%20=%200">) are both part of the study design. The other two quantities, <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?V">, are model parameters that can be different for every person. Because we’re allowing for the possibility that the parameters can vary from person to person, we’ll need notation to describe this variation. At a population level, we have a parameter vector <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D%20=%20(%5Ctheta_1,%20%5Ctheta_2)"> where – somewhat arbitrarily – I’ll say that <img src="https://latex.codecogs.com/png.latex?%5Ctheta_1"> denotes the typical value for the elimination rate constant <img src="https://latex.codecogs.com/png.latex?k">, and <img src="https://latex.codecogs.com/png.latex?%5Ctheta_2"> is the typical value for the volume of distribution <img src="https://latex.codecogs.com/png.latex?V">. Since these quantities can vary from person to person, we would also – assuming for the sake of simplicity that there is no population correlation between them<sup>8</sup> – have a scale vector <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Comega%7D%20=%20(%5Comega_1,%20%5Comega_2)">.</p>
<p>In this scenario, then, the parameters for the i-th participant would be some function of the typical values <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta"> and the random effects <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ceta_i"> associated with that person. I’m not certain if there’s a standard notation used to describe these transformation functions, so I’ll just use <img src="https://latex.codecogs.com/png.latex?g_1()"> and <img src="https://latex.codecogs.com/png.latex?g_2()"> to denote these:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0Ak_i%20&amp;=&amp;%20g_1(%5Ctheta_1,%20%5Ceta_%7Bi1%7D)%20%5C%5C%0AV_i%20&amp;=&amp;%20g_2(%5Ctheta_2,%20%5Ceta_%7Bi2%7D)%0A%5Cend%7Barray%7D%0A"></p>
<p>When specifying the statistical model, it’s conventional to assume that the random effect terms <img src="https://latex.codecogs.com/png.latex?%5Ceta_%7Bik%7D"> are normally distributed with mean zero and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Comega_k">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ceta_%7Bik%7D%20%5Csim%20%5Cmbox%7BNormal%7D(0,%20%5Comega_k)%0A"></p>
<p>Next, let’s consider the notation for the pharmacokinetic function <img src="https://latex.codecogs.com/png.latex?f()"> itself. Earlier I wrote out the specific form of this function for a particular model, but since the precise form is different from model to model, we could refer to it generically as <img src="https://latex.codecogs.com/png.latex?f(t,%20%5Cboldsymbol%5Ceta_i,%20%5Cboldsymbol%5Ctheta,%20D_i)">.</p>
<p>If measurement errors are assumed to be additive – they don’t have to be, but I’m only considering additive error models in this post – the observed concentration <img src="https://latex.codecogs.com/png.latex?y_%7Bij%7D"> for the i-th person at the j-th time point <img src="https://latex.codecogs.com/png.latex?t_%7Bij%7D"> can be expressed as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_%7Bij%7D%20=%20f(t_%7Bij%7D,%20%5Cboldsymbol%5Ceta_i,%20%5Cboldsymbol%5Ctheta,%20D_i)%20+%20%5Cepsilon_%7Bij%7D%0A"></p>
<p>In this expression, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon_%7Bij%7D"> is the error associated with person i and time j, and we presume these errors are normally distributed with mean zero and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cepsilon_%7Bik%7D%20%5Csim%20%5Cmbox%7BNormal%7D(0,%20%5Csigma)%0A"></p>
<p>With that as preliminary notational exposition, I think I can now make sense of how the model specification in NONMEM is expressed. So let’s turn to that now…</p>
</section>
<section id="reading-a-nonmem-control-file" class="level3">
<h3 class="anchored" data-anchor-id="reading-a-nonmem-control-file">Reading a NONMEM control file</h3>
<p>One thing that I really appreciated when going through the tutorial materials is that they include actual NONMEM model specifications that workshop participants can play with. If you unfold the code below, you can see the complete NONMEM <strong>control file</strong> (which uses a .ctl file extension) for a NONMEM model of the warfarin data:</p>
<div class="cell">
<details class="code-fold">
<summary>The complete NONMEM control file</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource fortran number-lines code-with-copy"><code class="sourceCode fortranfixed"><span id="cb20-1">;O<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>REILLY RA, AGGELER PM. STUDIES ON COUMARIN ANTICOAGULANT DRUGS</span>
<span id="cb20-2">;INITIATION OF WARFARIN THERAPY WITHOUT A LOADING DOSE.</span>
<span id="cb20-3">;CIRCULATION <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1968</span>;<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">169</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177</span></span>
<span id="cb20-4">;</span>
<span id="cb20-5">;O<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>REILLY RA, AGGELER PM, LEONG LS. STUDIES OF THE COUMARIN ANTICOAGULANT</span>
<span id="cb20-6">;DRUGS: THE PHARMACODYNAMICS OF WARFARIN IN MAN.</span>
<span id="cb20-7">;JOURNAL OF CLINICAL INVESTIGATION <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1963</span>;<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1542</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1551</span></span>
<span id="cb20-8">;</span>
<span id="cb20-9"></span>
<span id="cb20-10">$PROB WARFARIN PK</span>
<span id="cb20-11">$INPUT ID TIME WT AGE SEX AMT RATX DVID DV MDV</span>
<span id="cb20-12">$DATA ..\warfpk.csv IGNORE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>#</span>
<span id="cb20-13"></span>
<span id="cb20-14">$SUBR ADVAN2 TRANS2</span>
<span id="cb20-15"></span>
<span id="cb20-16">$PK</span>
<span id="cb20-17"></span>
<span id="cb20-18">   ; COVARIATE MODEL</span>
<span id="cb20-19">   TVCL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-20">   TVV<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-21">   TVKA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb20-22"></span>
<span id="cb20-23">   ; MODEL <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FOR</span> RANDOM BETWEEN SUBJECT VARIABILITY</span>
<span id="cb20-24">   CL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVCL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb20-25">   V<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVV<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb20-26">   KA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVKA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb20-27"></span>
<span id="cb20-28">   ; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">SCALE</span> CONCENTRATIONS</span>
<span id="cb20-29">   S2<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>V</span>
<span id="cb20-30"></span>
<span id="cb20-31">$ERROR</span>
<span id="cb20-32">   Y<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">+</span>EPS(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-33">   IPRED<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F</span>
<span id="cb20-34"></span>
<span id="cb20-35">$THETA</span>
<span id="cb20-36">   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)   ; POP_CL</span>
<span id="cb20-37">   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)     ; POP_V</span>
<span id="cb20-38">   (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.362</span>) ; POP_KA</span>
<span id="cb20-39"></span>
<span id="cb20-40">$OMEGA</span>
<span id="cb20-41">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> ; PPV_CL</span>
<span id="cb20-42">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> ; PPV_V</span>
<span id="cb20-43">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> ; PPV_KA</span>
<span id="cb20-44"></span>
<span id="cb20-45">$SIGMA </span>
<span id="cb20-46">   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> ; RUV_ADD</span>
<span id="cb20-47"></span>
<span id="cb20-48">$EST <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">MAX</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9990</span> SIG<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PRINT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> METHOD<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>COND INTER</span>
<span id="cb20-49">$COV</span>
<span id="cb20-50"></span>
<span id="cb20-51">$TABLE ID TIME DVID Y </span>
<span id="cb20-52">ONEHEADER NOPRINT FILE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>warf.fit</span>
<span id="cb20-53"></span>
<span id="cb20-54">$TABLE ID KA CL V WT SEX AGE</span>
<span id="cb20-55">ONEHEADER NOAPPEND NOPRINT FILE<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>warf.fit</span></code></pre></div>
</details>
</div>
<p>The control file requires a bit of effort for me – as someone who doesn’t use NONMEM – to work out the structure of the underlying model, but after a little bit of work it wasn’t too hard. Unlike Stan, which is a general-purpose probabilistic programming model for Bayesian analysis, NONMEM is a specific tool that hardcodes particular models of interest to pharmacometricians. The consequence of this is that the control file doesn’t spell out all the details of each model: the user just refers to them by name. You can work out which model is used by looking at the line in the control file that specifies which subroutine is used:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb21-1">$SUBR ADVAN2 TRANS2</span></code></pre></div>
<p>On my own I would have no way to make sense of this without doing a deep dive into the NONMEM user manuals, but happily the workshop notes helpfully explain this. In NONMEM land, this line is refering to two different modules: ADVAN provides a library of pharmacokinetic models that are bundled with the software, and TRANS specifies parameter transformations. Of particular importance is the fact that ADVAN2 refers specifically to a one-compartment model with first-order absorption and first-order elimination. That’s super handy for me because it’s not too different from models I’ve implemented from scratch in Stan previously.</p>
<p>The file continues, specifying the pharmacokinetic model (PK) and the error model (ERROR) using the standard notation where “theta” denotes a population level parameter, “eta” denotes a random effect that varies from person to person, and “epsilon” denotes residuals:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb22-1">$PK</span>
<span id="cb22-2"></span>
<span id="cb22-3">  ; COVARIATE MODEL</span>
<span id="cb22-4">  TVCL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-5">  TVV<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb22-6">  TVKA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>THETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb22-7"></span>
<span id="cb22-8">  ; MODEL <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FOR</span> RANDOM BETWEEN SUBJECT VARIABILITY</span>
<span id="cb22-9">  CL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVCL<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb22-10">  V<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVV<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb22-11">  KA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>TVKA<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">EXP</span>(ETA(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb22-12"></span>
<span id="cb22-13">  ; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">SCALE</span> CONCENTRATIONS</span>
<span id="cb22-14">  S2<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>V</span>
<span id="cb22-15"></span>
<span id="cb22-16">$ERROR</span>
<span id="cb22-17">  Y<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">+</span>EPS(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-18">  IPRED<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F</span></code></pre></div>
<p>My goal is to re-write this model in Stan, but to do that I need to first express that as a statistical model rather as NONMEM syntax. So let’s start at the population level. We have three parameters here:</p>
<ul>
<li>A population typical value for the clearance rate CL, denoted TVCL</li>
<li>A population typical value for the distribution volume V, denoted TVV</li>
<li>A population typical value for the absorption rate constant KA, denoted TVKA</li>
</ul>
<p>The mapping here is straightfoward:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmbox%7BTVCL%7D%20&amp;=&amp;%20%5Ctheta_1%20%5C%5C%0A%5Cmbox%7BTVV%7D%20&amp;=&amp;%20%5Ctheta_2%20%5C%5C%0A%5Cmbox%7BTVKA%7D%20&amp;=&amp;%20%5Ctheta_3%0A%5Cend%7Barray%7D%0A"></p>
<p>Now we consider the individual-subject level. At this level we have three parameters per person. For the i-th person, these parameters are:</p>
<ul>
<li>The clearance rate CL<img src="https://latex.codecogs.com/png.latex?_i"></li>
<li>The distribution volume V<img src="https://latex.codecogs.com/png.latex?_i"></li>
<li>The absorption rate constant KA<img src="https://latex.codecogs.com/png.latex?_i"></li>
</ul>
<p>As usual, the random effect terms <img src="https://latex.codecogs.com/png.latex?%5Ceta"> are normally distributed with mean zero and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Comega">, and the <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> values are considered fixed effects. However, the population level and subject level parameters do not combine additively, they combine multiplicatively. Specifically, the <img src="https://latex.codecogs.com/png.latex?g(%5Ctheta,%20%5Ceta)"> functions for this model are as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Brcl%7D%0A%5Cmbox%7BCL%7D_i%20&amp;=&amp;%20%5Ctheta_1%20%5Cexp(%5Ceta_%7B1i%7D)%20%5C%5C%0A%5Cmbox%7BV%7D_i%20&amp;=&amp;%20%5Ctheta_2%20%5Cexp(%5Ceta_%7B2i%7D)%20%5C%5C%0A%5Cmbox%7BKA%7D_i%20&amp;=&amp;%20%5Ctheta_3%20%5Cexp(%5Ceta_%7B3i%7D)%0A%5Cend%7Barray%7D%0A"></p>
<p>So far, so good. This makes sense of most of the model specification, but there are a still some confusing parts that require a bit more digging around to decipher. First off, this strange invocation:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb23-1">  ; <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">SCALE</span> CONCENTRATIONS</span>
<span id="cb23-2">  S2<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>V</span></code></pre></div>
<p>This doesn’t make sense unless you know something about the way that NONMEM has implemented the underlying model. In the 1-compartment IV bolus model that I used as my motivating example (previous section), the pharmacokinetic function <img src="https://latex.codecogs.com/png.latex?f()"> has a closed form expression for the drug <em>concentration</em> in the central (only) compartment. However, when you implement a pharmacokinetic model using a system of ordinary differential equations (like I did in an earlier post), the values produced by solving the ODE typically refer to the <em>amount</em> of drug in the relevant compartment. To convert these amounts to concentrations you need to scale them, generally by dividing by the volume of said compartment. And thus we have our explanation of the mysterious <code>S2=V</code> instruction. The <code>S2</code> parameter is the NONMEM scaling parameter for the central compartment. We set this equal to <code>V</code>, i.e., the estimated volume parameter for each subject.<sup>9</sup></p>
<p>At last we come to the error model:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode fortran code-with-copy"><code class="sourceCode fortranfixed"><span id="cb24-1">$ERROR</span>
<span id="cb24-2">  Y<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">+</span>EPS(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-3">  IPRED<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span>F</span></code></pre></div>
<p>The relevant part here is the line specifying the relationship between the pharmacokinetic function <code>F</code>, the error terms <code>EPS</code>, and the observed data <code>Y</code>. In this case it’s additive, exactly in keeping with what I assumed in my toy example:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_%7Bij%7D%20=%20f(t_%7Bij%7D,%20%5Cboldsymbol%5Ceta_i,%20%5Cboldsymbol%5Ctheta,%20D_i)%20+%20%5Cepsilon_%7Bij%7D%0A"></p>
<p>It doesn’t have to be. In fact, the hands-on exercise in Lecture 2 of the tutorial I’m working through prepares three versions of this model, one with additive error, one with multiplicative error, and one with a hybrid error model that incorporates additive and multiplicative components. I’ll get to that later, though probably in a future post.</p>
<p>Yay! At long last I think I know the model I need to implement.</p>
</section>
</section>
<section id="implementation-in-stan" class="level2">
<h2 class="anchored" data-anchor-id="implementation-in-stan">Implementation in Stan</h2>
<section id="passing-the-data-to-stan" class="level3">
<h3 class="anchored" data-anchor-id="passing-the-data-to-stan">Passing the data to Stan</h3>
<p>The first issue we’ll need to consider is how data should be passed from R to Stan. There’s some nuances here in how we format the data for Stan. As mentioned earlier, Stan doesn’t permit <a href="https://mc-stan.org/docs/stan-users-guide/ragged-data-structs.html">ragged arrays</a>, so we’ll have to pass the observations as one long <code>c_obs</code> vector that aggregates across subjects. Within the model (see below), we’ll use the <code>n_obs</code> vector that records the number of observations per subject to create break points that we can use to extract data from a single person. Here’s the R code I used:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">warfpk_obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warfpk[warfpk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mdv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]</span>
<span id="cb25-2">warfpk_amt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> warfpk[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(warfpk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rate), ]</span>
<span id="cb25-3"></span>
<span id="cb25-4">t_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.75</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>),</span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb25-10">)</span>
<span id="cb25-11"></span>
<span id="cb25-12">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb25-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_ids =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(warfpk_amt),</span>
<span id="cb25-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_tot =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(warfpk_obs),</span>
<span id="cb25-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_obs =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(</span>
<span id="cb25-16">    warfpk_amt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id,</span>
<span id="cb25-17">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(warfpk_obs[warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> .x, ])</span>
<span id="cb25-18">  ),</span>
<span id="cb25-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_obs =</span> warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time,</span>
<span id="cb25-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c_obs =</span> warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dv,</span>
<span id="cb25-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dose =</span> warfpk_amt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amt,</span>
<span id="cb25-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">t_fit =</span> t_fit,</span>
<span id="cb25-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_fit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(t_fit)</span>
<span id="cb25-24">)</span></code></pre></div>
</div>
<p>The interpretation of this input is as follows:</p>
<ul>
<li><code>n_ids</code> is an integer indicating the number of subjects</li>
<li><code>n_tot</code> is an integer indicating the total number of measurements (aggregating across subjects)</li>
<li><code>n_obs</code> is an integer vector of length <code>n_ids</code> indicating the number of measurements for each person</li>
<li><code>t_obs</code> is a numeric vector of length <code>n_tot</code> specifying the time at which a measurement was taken</li>
<li><code>c_obs</code> is a numeric vector of length <code>n_tot</code> containing all the measurements. The data from all subjects are concatenated into this vector</li>
<li><code>dose</code> is a numeric vector of length <code>n_ids</code> specifying the dose administered to each person</li>
<li><code>t_fit</code> is a vector of time points for which we would like to estimate the pharamacokinetic function for each person</li>
<li><code>n_fit</code> is an integer specfiying the length of <code>t_fit</code></li>
</ul>
<p>Here’s what the input data looks like when formatted for my Stan model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">dat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$n_ids
[1] 32

$n_tot
[1] 251

$n_obs
 [1] 11  6 11  9 10  8  9 11 17  6 10 10 10 11 10  6  6  6  6  6  6  6  6  6
[25]  6  6  6  6  6  6  6  6

$t_obs
  [1]   0.5   1.0   2.0   3.0   6.0   9.0  12.0  24.0  36.0  48.0  72.0
 [12]  24.0  36.0  48.0  72.0  96.0 120.0   0.5   2.0   3.0   6.0  12.0
 [23]  24.0  36.0  48.0  72.0  96.0 120.0   3.0   6.0   9.0  24.0  36.0
 [34]  48.0  72.0  96.0 120.0   3.0   6.0   9.0  12.0  24.0  36.0  48.0
 [45]  72.0  96.0 120.0   6.0  12.0  24.0  36.0  48.0  72.0  96.0 120.0
 [56]   3.0   6.0   9.0  12.0  24.0  36.0  48.0  72.0  96.0   2.0   3.0
 [67]   6.0   9.0  12.0  24.0  36.0  48.0  72.0  96.0 120.0   0.5   1.0
 [78]   2.0   3.0   3.0   6.0   6.0   9.0   9.0  12.0  12.0  24.0  36.0
 [89]  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0   1.5
[100]   3.0   6.0  12.0  24.0  36.0  48.0  72.0  96.0 120.0   1.5   3.0
[111]   6.0   9.0  24.0  36.0  48.0  72.0  96.0 120.0   1.5   3.0   6.0
[122]   9.0  24.0  36.0  48.0  72.0  96.0 120.0   0.5   1.0   2.0   3.0
[133]   6.0   9.0  24.0  36.0  48.0  72.0  96.0   1.0   3.0   6.0   9.0
[144]  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0
[155] 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0
[166]  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0
[177]  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0
[188]  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0
[199]  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0
[210]  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0
[221] 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0  72.0
[232]  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0  24.0  36.0  48.0
[243]  72.0  96.0 120.0  24.0  36.0  48.0  72.0  96.0 120.0

$c_obs
  [1]  0.0  1.9  3.3  6.6  9.1 10.8  8.6  5.6  4.0  2.7  0.8  9.2  8.5  6.4
 [15]  4.8  3.1  2.5  0.0  8.4  9.7  9.8 11.0  8.3  7.7  6.3  4.1  3.0  1.4
 [29] 12.0 13.2 14.4  9.6  8.2  7.8  5.8  4.3  3.0 11.1 11.9  9.8 11.0  8.5
 [43]  7.6  5.4  4.5  3.3  2.3  8.6  8.6  7.0  5.7  4.7  3.3  2.3  1.7 13.4
 [57] 12.4 12.7  8.8  6.1  3.5  1.8  1.5  1.0 17.6 17.3 15.0 15.0 12.4  7.9
 [71]  7.9  5.1  3.6  2.4  2.0  0.0  1.0  4.6 12.7  8.0 12.7 11.5 12.9 11.4
 [85] 11.4 11.0  9.1  8.2  5.9  3.6  1.7  1.1  8.6  8.0  6.0  4.4  3.6  2.8
 [99] 11.4 15.4 17.5 14.0  9.0  8.9  6.6  4.2  3.6  2.6  0.6  2.8 13.8 15.0
[113] 10.5  9.1  6.6  4.9  2.4  1.9  3.6 12.9 12.9 10.2  6.4  6.9  4.5  3.2
[127]  2.4  1.3  0.0  2.7 11.6 11.6 11.3  9.7  6.5  5.2  3.6  2.4  0.9  6.6
[141] 11.9 11.7 12.2  8.1  7.4  6.8  5.3  3.0  2.0 10.4  8.9  7.0  4.4  3.2
[155]  2.4  7.6  6.4  6.0  4.0  3.1  2.0  7.6  6.6  5.4  3.4  1.2  0.9  6.6
[169]  5.3  3.6  2.7  1.4  1.1  9.6  8.0  6.6  5.6  3.5  2.3  7.3  6.1  4.3
[183]  3.2  2.3  1.9  8.9  8.4  8.0  4.4  3.2  1.7  9.8  8.4  6.6  4.8  3.2
[197]  2.4  8.2  7.5  6.8  5.5  4.5  3.7 11.0 10.0  8.2  6.0  3.7  2.6 10.0
[211]  9.0  7.3  5.2  3.7  2.7 11.8  9.2  7.7  4.9  3.4  2.7 10.1  8.0  6.0
[225]  4.9  3.4  2.0  8.3  7.0  5.6  4.1  3.1  2.2  9.9  7.5  6.5  4.1  2.9
[239]  2.3  9.5  7.8  6.4  4.5  3.4  2.5  8.9  7.7  6.9  4.4  3.5  2.5

$dose
 [1] 100.0 100.0 100.0 120.0  60.0 113.0  90.0 135.0  75.0 105.0 123.0 113.0
[13] 113.0  75.0  85.0  87.0 117.0 112.0  95.5  88.5  93.0  87.0 110.0 115.0
[25] 112.0 120.0 120.0 120.0 153.0 105.0 125.0  93.0

$t_fit
 [1]   0.10   0.20   0.30   0.40   0.50   0.60   0.70   0.80   0.90   1.00
[11]   1.25   1.50   1.75   2.00   2.25   2.50   2.75   3.00   3.50   4.00
[21]   4.50   5.00   5.50   6.00   6.50   7.00   7.50   8.00   8.50   9.00
[31]   9.50  10.00  11.00  12.00  13.00  14.00  15.00  16.00  17.00  18.00
[41]  19.00  20.00  21.00  22.00  23.00  24.00  27.00  30.00  33.00  36.00
[51]  39.00  42.00  45.00  48.00  51.00  54.00  57.00  60.00  63.00  66.00
[61]  69.00  72.00  75.00  78.00  81.00  84.00  87.00  90.00  93.00  96.00
[71]  99.00 102.00 105.00 108.00 111.00 114.00 117.00 120.00

$n_fit
[1] 78</code></pre>
</div>
</div>
</section>
<section id="computing-the-pharmacokinetic-function" class="level3">
<h3 class="anchored" data-anchor-id="computing-the-pharmacokinetic-function">Computing the pharmacokinetic function</h3>
<p>Next, we need to think a little about the pharmacokinetics involved. The model I want to implement is a one-compartment model with first-order absorption and first-order elimination. To understand what that means, it helps to recognise that at any given point in time there are <em>two</em> drug amounts that the model needs to track: the amount of drug <img src="https://latex.codecogs.com/png.latex?%5Cmbox%7BA%7D_g"> in the gut that has not yet been absorbed into systemic circulation, and the amount <img src="https://latex.codecogs.com/png.latex?%5Cmbox%7BA%7D_c"> currently in circulation.</p>
<p>First order absorption with absorption rate constant KA<sup>10</sup> means that at each moment in time some proportion KA of the drug amount in the gut <img src="https://latex.codecogs.com/png.latex?A_g"> is absorbed. Formally, this gives us the following differential equation for gut amounts:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Cmbox%7BA%7D_g%7D%7Bdt%7D%20=%20-%5Cmbox%7BKA%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bg%7D%0A"></p>
<p>The same logic applies to the drug quantity in circulation <img src="https://latex.codecogs.com/png.latex?A_c">. At each point in time it increases by whatever drug amount arrives from the gut, but it also decreases by whatever amount is eliminated. Formally we could express this in terms of a parameter for the elimination rate constant (which would be denoted KE), which would give us the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Cmbox%7BA%7D_c%7D%7Bdt%7D%20=%20(%5Cmbox%7BKA%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bg%7D)%20-%20(%5Cmbox%7BKE%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bc%7D)%0A"></p>
<p>However, when it comes to elimination it is more conventional to express the elimination rate constant as the ratio between the <em>clearance</em> (CL: volume of blood that can be completely cleared of drug per unit time), and the <em>volume of distibution</em> (V) through which the drug circulates.<sup>11</sup> That gives is the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7Bd%5Cmbox%7BA%7D_c%7D%7Bdt%7D%20=%20(%5Cmbox%7BKA%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bg%7D)%20-%20%5Cleft(%5Cfrac%7B%5Cmbox%7BCL%7D%7D%7B%5Cmbox%7BV%7D%7D%20%5Ctimes%20%5Cmbox%7BA%7D_%7Bc%7D%5Cright)%0A"> Taken together, these two expressions form a system of ordinary differential equations(ODEs) that I’ll have Stan solve numerically. This will give us a numerical estimate of the pharmacokinetic function <img src="https://latex.codecogs.com/png.latex?f(t_%7Bij%7D,%20%5Cboldsymbol%5Ceta_i,%20%5Cboldsymbol%5Ctheta,%20D_i)">. Well sort of. The function <img src="https://latex.codecogs.com/png.latex?f()"> describes drug <em>concentrations</em>, but the output of the ODE solver will give us a measure of drug <em>amount</em>. So, in order to compute the pharamacokinetic function, the output of the ODE solver will need to be divided by the estimate of the volume if distribution V for each person.</p>
</section>
<section id="modelling-code" class="level3">
<h3 class="anchored" data-anchor-id="modelling-code">Modelling code</h3>
<p>Now let’s have a look at the Stan code. At some point I’d like to start using <a href="https://metrumresearchgroup.github.io/Torsten/">Torsten</a> for these things rather than reinventing the wheel and coding a standard compartmental model from scratch. However, I’m a bottom-up kind of person<sup>12</sup> and I find it useful to write lower-level model code myself a few times before I start relying on pre-built model code. Here’s the complete Stan code for the model I implemented:</p>
<div class="cell" data-file="model1.stan" data-output.var="mod">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>model1.stan</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource stan number-lines code-with-copy"><code class="sourceCode stan"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">functions</span> {</span>
<span id="cb28-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> amount_change(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> time,</span>
<span id="cb28-3">                       <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span> state,</span>
<span id="cb28-4">                       <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> KA,</span>
<span id="cb28-5">                       <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> CL,</span>
<span id="cb28-6">                       <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> V) {</span>
<span id="cb28-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] dadt;</span>
<span id="cb28-8">    dadt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = - (KA * state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]);</span>
<span id="cb28-9">    dadt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] = (KA * state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) - (CL / V) * state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>];</span>
<span id="cb28-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dadt;</span>
<span id="cb28-11">  }</span>
<span id="cb28-12">}</span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span> {</span>
<span id="cb28-15">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_ids;</span>
<span id="cb28-16">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_tot;</span>
<span id="cb28-17">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; n_fit;</span>
<span id="cb28-18">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_obs;</span>
<span id="cb28-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_ids] dose;</span>
<span id="cb28-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_tot] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t_obs;</span>
<span id="cb28-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_tot] c_obs;</span>
<span id="cb28-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> t_fit;</span>
<span id="cb28-23">}</span>
<span id="cb28-24"></span>
<span id="cb28-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed data</span> {</span>
<span id="cb28-26">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> start;</span>
<span id="cb28-27">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stop;</span>
<span id="cb28-28">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] initial_amount;</span>
<span id="cb28-29">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> initial_time = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb28-30"></span>
<span id="cb28-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// break points within the data vector</span></span>
<span id="cb28-32">  start[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>;</span>
<span id="cb28-33">  stop[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = n_obs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>];</span>
<span id="cb28-34">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:n_ids) {</span>
<span id="cb28-35">    start[i] = start[i - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] + n_obs[i - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>];</span>
<span id="cb28-36">    stop[i] = stop[i - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] + n_obs[i];</span>
<span id="cb28-37">  }</span>
<span id="cb28-38"></span>
<span id="cb28-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial states for each person</span></span>
<span id="cb28-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_ids) {</span>
<span id="cb28-41">    initial_amount[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = dose[i];</span>
<span id="cb28-42">    initial_amount[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] = <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>;</span>
<span id="cb28-43">  }</span>
<span id="cb28-44">}</span>
<span id="cb28-45"></span>
<span id="cb28-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span> {</span>
<span id="cb28-47">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; theta_KA;</span>
<span id="cb28-48">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; theta_CL;</span>
<span id="cb28-49">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; theta_V;</span>
<span id="cb28-50">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; omega_KA;</span>
<span id="cb28-51">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; omega_CL;</span>
<span id="cb28-52">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; omega_V;</span>
<span id="cb28-53">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">001</span>&gt; sigma;</span>
<span id="cb28-54">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_ids] eta_KA;</span>
<span id="cb28-55">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_ids] eta_CL;</span>
<span id="cb28-56">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_ids] eta_V;</span>
<span id="cb28-57">}</span>
<span id="cb28-58"></span>
<span id="cb28-59"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed parameters</span> {</span>
<span id="cb28-60">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_ids] KA;</span>
<span id="cb28-61">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_ids] CL;</span>
<span id="cb28-62">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt;[n_ids] V;</span>
<span id="cb28-63">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_tot] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] amount;</span>
<span id="cb28-64">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[n_tot] c_pred;</span>
<span id="cb28-65"></span>
<span id="cb28-66">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_ids) {</span>
<span id="cb28-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// pharmacokinetic parameters</span></span>
<span id="cb28-68">    KA[i] = theta_KA * exp(eta_KA[i]);</span>
<span id="cb28-69">    CL[i] = theta_CL * exp(eta_CL[i]);</span>
<span id="cb28-70">    V[i] = theta_V * exp(eta_V[i]);</span>
<span id="cb28-71"></span>
<span id="cb28-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// predicted drug amounts</span></span>
<span id="cb28-73">    amount[start[i]:stop[i]] = ode_bdf(</span>
<span id="cb28-74">      amount_change,            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ode function</span></span>
<span id="cb28-75">      initial_amount[i],        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial state</span></span>
<span id="cb28-76">      initial_time,             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial time</span></span>
<span id="cb28-77">      t_obs[start[i]:stop[i]],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// observation times</span></span>
<span id="cb28-78">      KA[i],                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate</span></span>
<span id="cb28-79">      CL[i],                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance</span></span>
<span id="cb28-80">      V[i]                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume</span></span>
<span id="cb28-81">    );</span>
<span id="cb28-82"></span>
<span id="cb28-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// convert to concentrations</span></span>
<span id="cb28-84">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_obs[i]) {</span>
<span id="cb28-85">      c_pred[start[i] + j - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] = amount[start[i] + j - <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] / V[i];</span>
<span id="cb28-86">    }</span>
<span id="cb28-87">  }</span>
<span id="cb28-88">}</span>
<span id="cb28-89"></span>
<span id="cb28-90"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span> {</span>
<span id="cb28-91">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// foolish priors over population parameters</span></span>
<span id="cb28-92">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// (parameter bounds ensure these are actually half-normals)</span></span>
<span id="cb28-93">  theta_KA ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-94">  theta_CL ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-95">  theta_V ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-96">  sigma ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-97">  omega_KA ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-98">  omega_CL ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-99">  omega_V ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>);</span>
<span id="cb28-100"></span>
<span id="cb28-101">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// random effect terms</span></span>
<span id="cb28-102">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_ids) {</span>
<span id="cb28-103">    eta_KA[i] ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, omega_KA);</span>
<span id="cb28-104">    eta_CL[i] ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, omega_CL);</span>
<span id="cb28-105">    eta_V[i] ~ normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, omega_V);</span>
<span id="cb28-106">  }</span>
<span id="cb28-107"></span>
<span id="cb28-108">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// likelihood of observed concentrations</span></span>
<span id="cb28-109">  c_obs ~ normal(c_pred, sigma);</span>
<span id="cb28-110">}</span>
<span id="cb28-111"></span>
<span id="cb28-112"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span> {</span>
<span id="cb28-113">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids, n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] a_fit;</span>
<span id="cb28-114">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[n_ids, n_fit] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> c_fit;</span>
<span id="cb28-115"></span>
<span id="cb28-116">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_ids) {</span>
<span id="cb28-117">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// predicted drug amounts</span></span>
<span id="cb28-118">    a_fit[i] = ode_bdf(</span>
<span id="cb28-119">      amount_change,        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ode function</span></span>
<span id="cb28-120">      initial_amount[i],    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial state</span></span>
<span id="cb28-121">      initial_time,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial time</span></span>
<span id="cb28-122">      t_fit,                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// observation times</span></span>
<span id="cb28-123">      KA[i],                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// absorption rate</span></span>
<span id="cb28-124">      CL[i],                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// clearance</span></span>
<span id="cb28-125">      V[i]                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// volume</span></span>
<span id="cb28-126">    );</span>
<span id="cb28-127"></span>
<span id="cb28-128">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// convert to concentrations</span></span>
<span id="cb28-129">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:n_fit) {</span>
<span id="cb28-130">      c_fit[i, j] = a_fit[i, j][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] / V[i];</span>
<span id="cb28-131">    }</span>
<span id="cb28-132">  }</span>
<span id="cb28-133">}</span></code></pre></div>
</div>
</div>
<p>In the earlier post I wrote on <a href="../../stan-ode/">pharmacokinetic modelling in Stan</a> I already went through the low-level details of what each section in this code does, so I won’t repeat myself here. However, there are a few comments I’ll make about it:</p>
<ul>
<li>In all honesty I don’t think the ODE code is even needed here. With first-order absorption dynamics and first-order elimination dynamics, you can analytically calculate the pharmacokinetic curve using a <a href="https://en.wikipedia.org/wiki/Bateman_equation">Bateman curve</a>, which I talked about in a <a href="../../non-compartmental-analysis/">another post</a>. However, one of my goals here was to use the Stan ODE solvers in a population model, so for the purposes of this post I’ve chosen to do it the hard way.</li>
<li>Speaking of doing things the hard way, note that I’ve called <code>ode_bdf()</code> here rather than <code>ode_rk45()</code>. This is to avoid any issues of <a href="https://en.wikipedia.org/wiki/Stiff_equation">ODE stiffness</a>. While there is always the possibility that ODE can remain stiff in the posterior,<sup>13</sup> I suspect the real issue here is that (a) I’ve chosen some absurdly diffuse priors, which means that the ODE can be quite poorly behaved during the warmup period for the sampler, and (b) earlier versions of the model had bugs that made the model do weird things. I strongly suspect that with those issues out of the way I could call <code>ode_rk45()</code> and get a considerable speedup. However, for the purposes of this post I’ll leave it as is.</li>
</ul>
<p>In any case, here’s the R code to compile the model, run the sampler, and extract a summary representation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> cmdstanr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdstan_model</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model1.stan"</span>)</span>
<span id="cb29-2">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb29-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat,</span>
<span id="cb29-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb29-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb29-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter_warmup =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb29-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iter_sampling =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb29-8">)</span></code></pre></div>
</div>
<p>This code took a couple of hours to run and I have no desire to repeat the exercise more often than necessary, so I took the sensible step of saving relevant outputs to csv files:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">out_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>()</span>
<span id="cb30-2">out_draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"draws_df"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb30-3">readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(out_summary, fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model1_summary.csv"</span>))</span>
<span id="cb30-4">readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write_csv</span>(out_draws, fs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span>(dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model1_draws.csv"</span>))</span></code></pre></div>
</div>
<p>In what follows, I’ll read data from these files when examining the behaviour of the model. However, there is a slight wrinkle here…</p>
</section>
<section id="pinned-copies-of-the-output-files" class="level3">
<h3 class="anchored" data-anchor-id="pinned-copies-of-the-output-files">Pinned copies of the output files</h3>
<p>The awkward thing about storing <em>all</em> the output from the MCMC sampler is that the <code>model1_draws.csv</code> file is almost 300Mb in size. As such is slightly too large to store in the <a href="https://github.com/djnavarro/quarto-blog">github repository</a> that contains this blog, and indeed if you look in the repo you won’t find a copy of that file. That makes things tricky from a reproducibility point of view. I don’t really imagine that anyone else actually needs a copy of this data (why would you????) but there <em>is</em> a chance that I might need to re-run the R code on this post without re-running the sampler. If that ever happens, I’ll need a copy of this file stored somewhere. To that end, I finally got off my lazy arse, taught myself how to use the <a href="https://pins.rstudio.com/">pins</a> package, created a publicly accessible pinboard on google cloud storage, and hosted a copy of the data file there:<sup>14</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">board <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">board_url</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"storage.googleapis.com/djnavarro-pins/_pins.yaml"</span>)</span>
<span id="cb31-2">board <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_list</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "diamonds"       "warfpk_data"    "warfpk_draws"   "warfpk_summary"</code></pre>
</div>
</div>
<p>So if you’re following along at home – or, much more likely – you are future me who has lost the local copy of the data, you can read the data as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">out_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(board, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warfpk_summary"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb33-2">out_draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pins<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pin_read</span>(board, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warfpk_draws"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
</div>
<p>Anyway, the main thing is that one way or another we can assume that the <code>out_summary</code> and <code>out_draws</code> tibbles are both available, so let’s get back to the main thread yes?</p>
</section>
</section>
<section id="model-behaviour" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="model-behaviour">Model behaviour</h2>
<p>Now that I’ve fit my Stan model, it’s time to take a look at what it does.</p>
<section id="population-parameters" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="population-parameters">Population parameters</h3>
<p>Let’s start by taking a look at a high level summary by extracting some relevant information from <code>out_summary</code>. For the time being I’m only really interested in the population level parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Ctheta">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5Comega">, and <img src="https://latex.codecogs.com/png.latex?%5Csigma">, so I’ll filter the results so that only those parameters (and the log-probability) are shown in the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">out_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb34-2">  variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(theta|omega|sigma|lp)"</span>)</span>
<span id="cb34-3">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8 × 10
  variable     mean   median      sd     mad       q5     q95  rhat ess_bulk
  &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;
1 lp__     -104.    -103.    1.13e+1 1.12e+1 -124.    -87.2    1.01     431.
2 theta_KA    0.755    0.667 3.71e-1 1.91e-1    0.445   1.33   1.01     448.
3 theta_CL    0.135    0.135 8.11e-3 7.43e-3    0.123   0.149  1.00     841.
4 theta_V     7.70     7.69  3.65e-1 3.59e-1    7.12    8.31   1.00     944.
5 omega_KA    0.902    0.844 3.00e-1 2.48e-1    0.539   1.47   1.01     423.
6 omega_CL    0.303    0.298 4.82e-2 4.62e-2    0.233   0.389  1.00    3060.
7 omega_V     0.235    0.232 3.94e-2 3.70e-2    0.178   0.307  1.00    2693.
8 sigma       1.08     1.08  5.77e-2 5.88e-2    0.993   1.18   1.00    2910.
# ℹ 1 more variable: ess_tail &lt;dbl&gt;</code></pre>
</div>
</div>
<p>The fact that all the R-hat values are very close to 1 suggests that my MCMC chains are behaving themselves nicely, and all four chains are giving the same answers. But just to check – and because an earlier version of this model misbehaved quite badly and these plots turned out to be very helpful for diagnosing the problem – I’ll plot the marginal distributions over all the population level parameters (and the log-probability) separately for each chain. To do that, first I’ll extract the relevant columns from the <code>model1_draws.csv</code> file that contains all the raw samples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">draws <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb36-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(theta|sigma|omega|lp|chain)"</span>)) </span>
<span id="cb36-3"></span>
<span id="cb36-4">draws</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4,000 × 9
    lp__ theta_KA theta_CL theta_V omega_KA omega_CL omega_V sigma .chain
   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1 -130.     1.15    0.135    8.56     1.81    0.317   0.235  1.15      1
 2 -143.     1.36    0.139    6.88     1.95    0.435   0.225  1.13      1
 3 -138.     1.86    0.134    7.18     1.90    0.312   0.204  1.06      1
 4 -137.     1.55    0.144    7.95     1.46    0.324   0.306  1.11      1
 5 -130.     1.60    0.138    8.08     1.84    0.290   0.240  1.08      1
 6 -132.     1.94    0.146    7.33     1.57    0.290   0.234  1.06      1
 7 -140.     1.45    0.143    7.71     1.99    0.260   0.165  1.20      1
 8 -132.     1.52    0.142    7.46     1.24    0.325   0.313  1.13      1
 9 -134.     1.57    0.144    7.57     1.82    0.261   0.174  1.09      1
10 -133.     1.57    0.143    7.56     1.81    0.265   0.177  1.09      1
# ℹ 3,990 more rows</code></pre>
</div>
</div>
<p>After a little bit of data wrangling, I can create the appropriate plots:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">draws_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-2">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb38-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(id|chain)"</span>),</span>
<span id="cb38-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>,</span>
<span id="cb38-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb38-6">  ) </span>
<span id="cb38-7"></span>
<span id="cb38-8">draws_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb38-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(.chain), value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> parameter)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_violin</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw_quantiles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> parameter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb38-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb38-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MCMC chain"</span>,</span>
<span id="cb38-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sampled parameter value"</span></span>
<span id="cb38-16">  )</span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/posterior-density-plots-1.png" class="img-fluid figure-img column-page" width="1536"></p>
</figure>
</div>
</div>
</div>
<p>That looks nice, so it’s time to move on.</p>
</section>
<section id="comparison-to-nonmem" class="level3">
<h3 class="anchored" data-anchor-id="comparison-to-nonmem">Comparison to NONMEM</h3>
<p>One of my fears when implementing this model in Stan was that I might have misunderstood what the NONMEM version of the model was doing, and as a consequence I’d end up estimating quite different things to what the conventional NONMEM model does. To help reassure myself that this isn’t the case, it seems wise to compare the parameter estimates that both versions of the model produce. The files distributed with the workshop include these estimates for the NONMEM model, which are as follows:<sup>15</sup></p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 3
  parameter estimate std_error
  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;
1 omega_CL     0.285   0.0405 
2 omega_KA     0.621   0.158  
3 omega_V      0.222   0.0320 
4 sigma        1.02    0.131  
5 theta_CL     0.134   0.00724
6 theta_KA     0.59    0.130  
7 theta_V      7.72    0.347  </code></pre>
</div>
</div>
<!-- 
Note: I feel like there should be a .res file, but apparently there isn't one
bundled with the tutorial. Fortunately, it looks like everything that matters 
is also in the .smr file. Here's the cut-and-paste for the relevant bits:

THETA:      POP_CL      POP_V       POP_KA      
THETA     = 0.134       7.72        0.59

ETA:        PPV_CL      PPV_V       PPV_KA      
ETASD     = 0.285       0.222       0.621

EPSSD     = 1.020

THETA:se% = 5.4         4.5         22.0
ETASD:se% = 14.2        14.4        25.4
EPSSD:se% = 12.8

Judging from the "se%" part, the fact that these numbers are completely
unhinged if treated as literal standard errors, and the fact that rescaling
places most of the standard error estimates in alignment with the Bayesian
output, I'm pretty certain these are reported as percentages.
-->
<p>To save you the effort of scrolling back and forth between this table and the Stan version above, here’s a truncated version of the Stan table showing an apples-to-apples comparison:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 3
  parameter posterior_mean posterior_sd
  &lt;chr&gt;              &lt;dbl&gt;        &lt;dbl&gt;
1 omega_CL           0.303      0.0482 
2 omega_KA           0.902      0.300  
3 omega_V            0.235      0.0394 
4 sigma              1.08       0.0577 
5 theta_CL           0.135      0.00811
6 theta_KA           0.755      0.371  
7 theta_V            7.70       0.365  </code></pre>
</div>
</div>
<p>As you can see, the two versions are in pretty close agreement. There are some modest differences in the estimates of the population mean and variability in the absorption rate constant KA – compared to NONMEM, the Stan version suggests the absorption rate constant is slightly higher on average, but also more variable across people – but on the whole that seems like a minor discrepancy, and I’m not too concerned about it.</p>
</section>
<section id="model-fits" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="model-fits">Model fits</h3>
<p>Now reassured that my model is doing the right thing, the time has come to do my favourite part of any modelling exercise: comparing the fitted values <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> produced by the model to the observed values <img src="https://latex.codecogs.com/png.latex?y"> in the data set. It’s worth noting here that the summary representations produced by Stan are perfectly sufficient to draw these plots, because it includes summary statistics for the <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> values (the <code>c_pred</code> variables in the Stan model). However, the first version of the model I implemented had some weird bugs that required me to do a slightly deeper dive, and in order to work out where the bugs were I ended up writing code that extracts the relevant summaries from the raw MCMC samples. So, because I have that code at hand already, let’s do it the long way. First up, let’s plot the observed value <img src="https://latex.codecogs.com/png.latex?y"> against the fitted value <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> separately for each person. Here’s the code used to extract the relevant data:</p>
<div class="cell" data-hash="index_cache/html/manual-summary_dd116b7ce0b39cc42f29440ebac8cffa">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1">fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb41-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_pred"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb41-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_pred"</span>),</span>
<span id="cb41-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb41-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_hat"</span></span>
<span id="cb41-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb41-8">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb41-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">obs_num =</span> variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb41-10">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">["</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-11">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb41-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb41-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(obs_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-15">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb41-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y_hat),</span>
<span id="cb41-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q5 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(y_hat, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>),</span>
<span id="cb41-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q95 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(y_hat, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb41-19">  )  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-20">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(obs_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb41-21">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb41-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>c_obs,</span>
<span id="cb41-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>time,</span>
<span id="cb41-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> warfpk_obs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id</span>
<span id="cb41-25">  )</span>
<span id="cb41-26"></span>
<span id="cb41-27">fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 251 × 7
   obs_num    yh    q5   q95     y  time    id
     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1       1  1.44  1.16  1.77   0     0.5     0
 2       2  2.68  2.19  3.24   1.9   1       0
 3       3  4.69  3.95  5.50   3.3   2       0
 4       4  6.19  5.33  7.07   6.6   3       0
 5       5  8.61  7.75  9.47   9.1   6       0
 6       6  9.28  8.41 10.2   10.8   9       0
 7       7  9.14  8.21 10.1    8.6  12       0
 8       8  6.67  5.80  7.58   5.6  24       0
 9       9  4.48  3.52  5.42   4    36       0
10      10  2.99  2.01  3.99   2.7  48       0
# ℹ 241 more rows</code></pre>
</div>
</div>
<p>And here is the code used to draw the pretty picture:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(fit, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(yh, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey50"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb43-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb43-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fitted value for drug concentration, y_hat"</span>,</span>
<span id="cb43-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed value for drug concentration, y"</span></span>
<span id="cb43-10">  )</span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/simple-plot-1.png" class="img-fluid figure-img column-page" width="1536"></p>
</figure>
</div>
</div>
</div>
<p>Well that’s just delightful. In almost every case the observed and fitted values line up rather nicely. You just don’t get that kind of prettiness in psychological data without doing some prior aggregation of raw data.</p>
<p>Let’s take it a step further, and plot the observed data as a pharmacokinetic function (time vs drug concentration) and superimpose these over the model-estimated pharamacokinetic functions for each person. Again, this starts with a bit of data wrangling to extract what we need from the raw samples:</p>
<div class="cell" data-hash="index_cache/html/pk-predictions_252fae3f8b1bc4e5f70b61b9518afad2">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">prd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_fit"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb44-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c_fit"</span>),</span>
<span id="cb44-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb44-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_hat"</span></span>
<span id="cb44-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-8">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(variable) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-9">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb44-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y_hat),</span>
<span id="cb44-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q5 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(y_hat, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>),</span>
<span id="cb44-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">q95 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(y_hat, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb44-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-14">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">obs_id =</span> variable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb44-16">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">["</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-17">      stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>) </span>
<span id="cb44-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-19">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(obs_id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"obs_num"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-20">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb44-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">obs_num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(obs_num),</span>
<span id="cb44-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> warfpk_amt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(id)]</span>
<span id="cb44-23">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-24">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(id, obs_num) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-25">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>t_fit, dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_ids))</span>
<span id="cb44-26"></span>
<span id="cb44-27">prd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2,496 × 7
   variable       yh    q5   q95    id obs_num  time
   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 c_fit[1,1]  0.303 0.241 0.378     0       1   0.1
 2 c_fit[1,2]  0.599 0.478 0.743     0       2   0.2
 3 c_fit[1,3]  0.885 0.709 1.10      0       3   0.3
 4 c_fit[1,4]  1.16  0.936 1.44      0       4   0.4
 5 c_fit[1,5]  1.44  1.16  1.77      0       5   0.5
 6 c_fit[1,6]  1.70  1.37  2.08      0       6   0.6
 7 c_fit[1,7]  1.96  1.59  2.39      0       7   0.7
 8 c_fit[1,8]  2.20  1.79  2.68      0       8   0.8
 9 c_fit[1,9]  2.45  2.00  2.96      0       9   0.9
10 c_fit[1,10] 2.68  2.19  3.24      0      10   1  
# ℹ 2,486 more rows</code></pre>
</div>
</div>
<p>And again, we use a little bit of ggplot2 magic to make it pretty:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(</span>
<span id="cb46-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> prd, </span>
<span id="cb46-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, yh, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> q5, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> q95),</span>
<span id="cb46-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey80"</span></span>
<span id="cb46-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(</span>
<span id="cb46-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> prd,</span>
<span id="cb46-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, yh)</span>
<span id="cb46-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb46-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> fit, </span>
<span id="cb46-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id)), </span>
<span id="cb46-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, </span>
<span id="cb46-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb46-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_label</span>(</span>
<span id="cb46-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb46-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">time =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>, </span>
<span id="cb46-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, </span>
<span id="cb46-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> warfpk_amt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id</span>
<span id="cb46-22">    ),</span>
<span id="cb46-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(time, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> id)</span>
<span id="cb46-24">  )<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb46-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb46-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(), </span>
<span id="cb46-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb46-30">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb46-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb46-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time (hours)"</span>,</span>
<span id="cb46-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Warfarin plasma concentration (mg/L)"</span></span>
<span id="cb46-34">  )</span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/pk-profiles-1.png" class="img-fluid figure-img column-page" width="1536"></p>
</figure>
</div>
</div>
</div>
<p>In each of these plots, the grey shaded region is a 90% confidence band<sup>16</sup>, the solid curve is the posterior predicted pharmacokinetic curve, and the dots are the raw data. As you’d hope and expect, the uncertainty bands are larger in those cases where the measurements were all taken after the drug concentration reaches its peak: if all you’ve observed is the tail<sup>17</sup> then you’ll necessarily have some uncertainty about how high the peak was. Anyway, the main thing here is that the plots are very pretty, and you get a strong sense that the model does a good job of capturing the pattern of differences across people.</p>
</section>
<section id="individual-parameters" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="individual-parameters">Individual parameters</h3>
<p>Moving along in our exploration of the model… here’s the empirical distribution of estimated absorption rate constants (KA), clearance values (CL), and volume of distribution (V) parameters across people:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">pars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> out_draws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^(KA|CL|V)"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb47-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb47-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> tidyselect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), </span>
<span id="cb47-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>,</span>
<span id="cb47-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb47-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-8">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameter"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ind"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">["</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb47-9">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb47-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ind =</span> ind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb47-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-12">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(parameter, ind) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb47-13">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value))</span>
<span id="cb47-14"></span>
<span id="cb47-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(pars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> parameter)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> parameter, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb47-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parameter Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/individual-parameters-1.png" class="img-fluid figure-img column-page" width="1152"></p>
</figure>
</div>
</div>
</div>
<p>Okay, seems good to me I guess?</p>
</section>
<section id="residuals" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="residuals">Residuals</h3>
<p>We’re getting very close to the end. The last thing I want to do with this model is take a look at the residuals, since that’s usually the best bet if you want to detect non-obvious model failures. In the plot below I’ve plotted the residual term <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D%20-%20y"> for every observation in the data set. As before, each panel corresponds to an individual subject, and the residuals are plotted as a function of the observed drug concentration <img src="https://latex.codecogs.com/png.latex?y">:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb48-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">residual =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> yh) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(y, residual, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slope =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">intercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey80"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> lm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb48-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb48-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed concentration"</span>,</span>
<span id="cb48-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Residual"</span></span>
<span id="cb48-12">  )</span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/residuals-1.png" class="img-fluid figure-img column-page" width="1536"></p>
</figure>
</div>
</div>
</div>
<p>For most people in the data set, there’s nothing here to suggest systematic model misfit. The residuals are small, and show no systematic pattern. In a few cases, however, the model struggles slightly. As foreshadowed earlier in the post, participant 12 is the most obvious example: the estimated pharamacokinetic curve is a little too flat (the peak isn’t high enough), leading to a systematic pattern where the model overestimates low concentrations and underestimates high concentrations. The effect is quite easy to spot in the residual plot, but virtually invisible in the individual-subject PK curves I showed in the last section. The model error isn’t very large (even for the worst-fit person the posterior predictive PK curves are still awfully good), but it is there.</p>
<p>The second version of a residual plot shows the unsigned residuals <img src="https://latex.codecogs.com/png.latex?%7C%5Chat%7By%7D%20-%20y%7C"> as a function of <img src="https://latex.codecogs.com/png.latex?y">. Here, what I’m looking for is evidence that the <em>magnitude</em> of the residuals is systematically larger at higher concentrations, and would be a hint that the additive error assumption I’ve used in this model is inadequate for modelling the data:</p>
<div class="cell page-columns page-full">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb49-2">  dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">residual =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> yh)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(y, residual, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> lm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(id), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_x"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb49-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb49-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed concentration"</span>,</span>
<span id="cb49-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unsigned Residual"</span></span>
<span id="cb49-11">  )</span></code></pre></div>
<div class="cell-output-display page-columns page-full">
<div class="page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/index_files/figure-html/unsigned-residuals-1.png" class="img-fluid figure-img column-page" width="1536"></p>
</figure>
</div>
</div>
</div>
<p>On the whole I don’t think there’s much to worry about here. Of course that doesn’t mean that additive errors are theoretically plausible or correct, it simply means that the statistical model appears to work just fine even without tinkering with this assumption.</p>
</section>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>As someone learning pharmacometrics coming from a rather different technical discipline (mathematical psychology), the thing I find truly surprising in this is how clean the data set is, despite containing relatively few data points. Folks outside of mathematical psychology might find it surprising to learn that there are some extremely effective formal models in psychology, some of which are horrifyingly technical (reading the infamous 2000 paper by Philip Smith in the <em>Journal of Mathematical Psychology</em> nearly broke me as a graduate student), but it’s usually the case for those models that you’re working with extremely noisy or impoverished data, so you need quite a lot of data to work with them safely. Yet here, we have a data set with a mere 32 people and only a handful of observations per person, and it’s entirely possible to fit a stochastic dynamic hierarchical Bayesian model that produces person-specific pharmacokinetic curves that closely match the observed data, only occasionally show hints of systematic misfit, and allow estimation of population level parameters with only modest uncertainty. Granted, from an empirical perspective it’s far more costly to take a measurement, and – quite rightly – there are stricter regulatory and ethical constraints that go into conducting a study like this than there would be for a typical psychological study, but even so, it still comes as a shock to me that it “just works”.</p>
<p>I could get used to this.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><p>Bauer, R. J., Guzy, S., &amp; Ng, C. (2007). A survey of population analysis methods and software for complex pharmacokinetic and pharmacodynamic models with examples. <em>The AAPS Journal, 9</em>, E60-E83. <a href="https://doi.org/10.1208/aapsj0901007">doi.org/10.1208/aapsj0901007</a></p></li>
<li><p>Bauer, R. J. (2019). NONMEM tutorial part I: Description of commands and options, with simple examples of population analysis. <em>CPT: Pharmacometrics &amp; Systems Pharmacology, 8</em>(8), 525-537. <a href="https://doi.org/10.1002/psp4.12404">doi.org/10.1002/psp4.12404</a></p></li>
<li><p>Bauer, R. J. (2019). NONMEM tutorial part II: Estimation methods and advanced examples. <em>CPT: Pharmacometrics &amp; Systems Pharmacology, 8</em>(8), 538-556. <a href="https://doi.org/10.1002/psp4.12422">doi.org/10.1002/psp4.12422</a></p></li>
<li><p>Foster, D., Abuhelwa, A. &amp; Hughes, J. (2019). <em>Population Analysis Using NONMEM Beginners Workshop</em>. Retrieved from: <a href="https://www.paganz.org/resources/">www.paganz.org/resources/</a></p></li>
<li><p>Navarro, D. J., Griffiths, T. L., Steyvers, M. and Lee, M. D. (2006). Modeling individual differences using Dirichlet processes. <em>Journal of Mathematical Psychology, 50</em>, 101-122. <a href="https://dx.doi.org/10.1016/j.jmp.2005.11.006">dx.doi.org/10.1016/j.jmp.2005.11.006</a></p></li>
<li><p>O’Reilly, R. A., &amp; Aggeler, P. M. (1968). Studies on coumarin anticoagulant drugs: initiation of warfarin therapy without a loading dose. <em>Circulation, 38</em>(1), 169-177. <a href="https://doi.org/10.1161/01.CIR.38.1.169">doi.org/10.1161/01.CIR.38.1.169</a></p></li>
<li><p>O’Reilly, R. A., Aggeler, P. M., &amp; Leong, L. S. (1963). Studies on the coumarin anticoagulant drugs: the pharmacodynamics of warfarin in man. <em>The Journal of Clinical Investigation, 42</em>(10), 1542-1551. <a href="https://doi.org/10.1172%2FJCI104839">doi.org/10.1172%2FJCI104839</a></p></li>
<li><p>Smith, P. L. (2000). Stochastic dynamic models of response time and accuracy: A foundational primer. <em>Journal of Mathematical Psychology, 44</em>(3), 408-463. <a href="https://doi.org/10.1006/jmps.1999.1260">doi.org/10.1006/jmps.1999.1260</a></p></li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yes this is indeed a joke. Tom Griffiths, Mark Steyvers, and Michael Lee are all considerably more successful as academics than I ever was, so much so that when Mark fed the text of the paper – which is about 99% my writing – into an author-topic model that allows specific passages to be attributed to specific authors, it did not attribute a single word of the text to me. Oh well.↩︎</p></li>
<li id="fn2"><p>Technically I’m guessing the code here, but there’s a lot more 1s in the data than 0s, and a lot more of male subjects reported by O’Reilly &amp; Aggeler, so it seems a safe bet!↩︎</p></li>
<li id="fn3"><p>There’s an irony here: if these were psychological data we’d be delighted to have data this clean. Psychological data are as noisy as a drunken fuck on a Friday (to use a technical term). Nevertheless, the reality of the warfarin data set is that the data are actually a lot cleaner than this plot makes it seem.↩︎</p></li>
<li id="fn4"><p>I mean, from a statistical perspective what we’re saying is that we need a hierarchical model, and those are essentially the same thing regardless of the domain of application, but whatever.↩︎</p></li>
<li id="fn5"><p>Okay, technically these don’t have to be means: really what we’re talking about are location parameters. Again, whatevs.↩︎</p></li>
<li id="fn6"><p>Same as above: technically, we’re talking about scale parameters.↩︎</p></li>
<li id="fn7"><p>The initial version of this post was a little imprecise in terminology, and tended to refer to the rate constants as rate, which is not quite accurate: <img src="https://latex.codecogs.com/png.latex?k"> parameterises the pharmacokinetic function and controls the rate at which a drug is absorbed/eliminated, but it is not itself a rate. (My thanks to Tiny van Boekel for gently drawing my attention to this terminological lapse on my part!)↩︎</p></li>
<li id="fn8"><p>If we wanted to consider this correlation then we’d have a full variance-covariance matrix denoted <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%5COmega">, but I’m not going to go there in this post↩︎</p></li>
<li id="fn9"><p>Honestly, I wasn’t 100% certain that my interpretation was correct, but eventually I managed to find copies of the NONMEM user manuals online and they explain it there.↩︎</p></li>
<li id="fn10"><p>My notation is a little different to what I used in the previous post. That’s deliberate: last time around I wrote my model code and expressed the differential equations using notation that made sense to me. This time around I’m trying to bring my notation a little closer to the terminology used in the NONMEM control file I’m working from, in order to more closely match typical practice in the field.↩︎</p></li>
<li id="fn11"><p>Whenever I am being lazy I have the bad habit of assuming that the volume of distribution is basically the same thing as “the amount of blood plasma in the body”, but that’s not actually true. Certainly it makes sense as a crude first-approximation mental model, but bodies are complicated things so the reality is messier, and the apparent volume of distribution can be large than the amount of blood in the body.↩︎</p></li>
<li id="fn12"><p>If you believe the testimony of my ex-boyfriends, that is.↩︎</p></li>
<li id="fn13"><p>…or so I’m told. Honestly, the last time I had to work so hard to keep a straight face in front of a statistical audience was writing academic papers that required me to talk about posterior Weiner processes.↩︎</p></li>
<li id="fn14"><p>Not gonna lie, the only reason I finally forced myself to set this up is that, courtesy of an extremely unwise <code>git reset --hard</code> command while writing this post, I deleted the local copy of the <code>model1_draws.csv</code> file, and – lacking any remote copy of the bloody thing – had to rerun the entire sampler from the beginning to create a new one, wasting a lot of cpu cycles and exhausting most of my patience. Burned hands are the best teachers I guess…↩︎</p></li>
<li id="fn15"><p>The NONMEM output expressed the standard error as a percentage of the point estimate, but for the purposes of comparison to the Stan model I’ve converted them back to raw values.↩︎</p></li>
<li id="fn16"><p>More precisely, it’s a Bayesian 90% equal-tail credible region. Whatevs.↩︎</p></li>
<li id="fn17"><p>Sometimes referred to as the elimination phase, but of course this is a dynamic system, so in reality absorbption and elimination are happening in parallel all the time. However, in practice you end up with a situation where early on the absorption process is the primary driver and later on the elimination process is the primary driver.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Building a Population Pharmacokinetic Model with {Stan}},
  date = {2023-06-10},
  url = {https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Building a Population Pharmacokinetic
Model with Stan.”</span> June 10, 2023. <a href="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models">https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models</a>.
</div></div></section></div> ]]></description>
  <category>Statistics</category>
  <category>Pharmacometrics</category>
  <category>R</category>
  <category>Stan</category>
  <category>NONMEM</category>
  <category>Bayes</category>
  <guid>https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/</guid>
  <pubDate>Fri, 09 Jun 2023 14:00:00 GMT</pubDate>
  <media:content url="https://blog.djnavarro.net/posts/2023-06-10_pop-pk-models/raimond-klavins-n-7HTOiJPso-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Software design by example</title>
  <dc:creator>Danielle Navarro</dc:creator>
  <link>https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example/</link>
  <description><![CDATA[ 





<!--------------- my typical setup ----------------->
<!--------------- post begins here ----------------->
<p>The book I’m currently reading is <a href="https://www.routledge.com/Software-Design-by-Example-A-Tool-Based-Introduction-with-JavaScript/Wilson/p/book/9781032330235">Software Design by Example: A Tool-Based Introduction with JavaScript</a> by <a href="https://third-bit.com/">Greg Wilson</a>. Greg was kind enough to send me a review copy a little while back, and I’ve been slowly working my way through it.</p>
<p>In some ways I’m not the target audience for the book: it’s a book about software engineering that uses JavaScript for the worked examples, not a book designed to teach you JavaScript. I’m not the worst JavaScript coder in the world, but I’m not the strongest either, so it’s harder work for me than maybe it would have been if JavaScript were my primary language.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example/cover.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="Book cover for 'Software Design by Example'"></p>
</figure>
</div>
<section id="who-is-the-book-for" class="level2">
<h2 class="anchored" data-anchor-id="who-is-the-book-for">Who is the book for?</h2>
<p>Some years ago I took a very good course that Greg ran on how to teach technical concepts,<sup>1</sup> and one thing he emphasised in that course is the importance of designing teaching materials with <em>specific</em> learning personas in mind. Having a small number of representative examples in mind when you write the content is incredibly useful when teaching, so it is no surprise that – literally on page 1 – the book states explicitly what the learner personas used to write the book were.</p>
<p>I’m going to reproduce them in full in this blog post as a reminder to myself that this is the right way to construct learner personas.</p>
<blockquote class="blockquote">
<div class="line-block"></div>
<ul>
<li>Aïsha started writing VB macros for Excel in an accounting course and never looked back. After spending three years doing front-end JavaScript work she now wants to learn how to build back-end applications. This material will fill in some gaps in her programming knowledge and teach her some common design patterns</li>
<li>Rupinder is studying computer science at college. He has learned a lot about the theory of algorithms, and while he uses Git and unit testing tools in his assignments, he doesn’t feel he understands how they work. This material will give him a better understanding of these tools and how to design new ones.</li>
<li>Yim builds mobile apps for a living but also teaches two college courses: one on full-stack web development using JavaScript and Node and another titled “Software Design”. They are happy with the former, but frustrated that so many books about the latter subject talk about it in the abstract and use examples that their students can’t relat to. This material will fill those gaps and give them starting points for a wide variety of course assignments.</li>
</ul>
</blockquote>
<p>They’re detailed enough to make the teacher engage with the personas during the writing process, diverse enough to help catch things the writer might not have thought of, and provide a <em>strong</em> indication to the learner about whether the book is written for them. In my case, for instance, it’s pretty clear from the outset that I’m likely to struggle with the level of JavaScript involved. Indeed, when I look at the list of skills that the reader is expected to have (on pages 1-2) I’m fine on most things but I suspect I have a little less practical experience with JavaScript than is ideal for a reader of this book. I’m not terrible at it, I just don’t spend enough time with it to feel fluent.</p>
<p>That’s okay, of course. It’s often a good experience as a learner to read content that pushes you outside your comfort zone. What matters is that you <em>know in advance</em> which aspects are going to be hard work for you. Thankfully, <em>Software Design by Example</em> does that very well at the beginning.</p>
</section>
<section id="rewarding-the-cursory-reader" class="level2">
<h2 class="anchored" data-anchor-id="rewarding-the-cursory-reader">Rewarding the cursory reader</h2>
<p>Despite knowing from the outset that I’m ever-so-slightly outside the target audience for the book, I’m still finding it very rewarding. To understand why, it’s worth taking a moment to look at how the book uses the glossary as the end to help readers like myself who have never received a formal education in programming… I’m basically the Aïsha persona, except with R playing the same role for me that JavaScript plays for her.</p>
<p>Because I don’t have a formal background and – to put it gently – don’t belong to a demographic that can easily acquire the “culture” of software engineering, I very commonly have the experience in conversation that software engineers will use terms that they simply assume that “everybody knows”, and never take the time to explain them. The actual concepts are often very simple things, and often I’ve had experience with them without knowing the names, but no-one ever tells you what the words mean and – sadly – many people in the field have a tendency to make you feel like an idiot if you ask.</p>
<p>With that as the real world backdrop, I’m finding the glossary to be worth its weight in gold. Here’s a little snippet from the top of page 318:</p>
<blockquote class="blockquote">
<div class="line-block"></div>
<ul>
<li><strong>query string</strong>. The portion of a <strong>URL</strong> after the question mark ? that specfies extra parameters for the <strong>HTTP request</strong> as name-value pairs</li>
<li><strong>race condition</strong>. A situation in which a result depend on the order in which two or more concurrent operations are carried out.</li>
<li><strong>raise (an exception)</strong>. To signal that something unexpected or unusual has happened in a program by creating an <strong>exception</strong> and handling it to the <strong>error-handling</strong> system, which then tries to find a point in the program that will <strong>catch</strong> it.</li>
<li><strong>read-eval-print-loop (REPL)</strong>. An interactive program that reads a command typed in by a user, executes it, prints the result, and then waits patiently for the next command. REPLs are often used to explore new ideas, or for debugging.</li>
</ul>
</blockquote>
<p>I can honestly say that at no point in my life has someone explained to me what a <a href="https://en.wikipedia.org/wiki/Race_condition">race condition</a> is or what a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> actually is. Seriously. I’ve worked in tech companies and people use those terms all the time but they never explain them. Very frustrating. So when I read entries like this in the glossary I find myself going “oh, <em>that’s</em> what <blah> means… okay, yes, I did already know this… but now I know what the name for it is”. I mean, race conditions are not at all unfamiliar to me – I encounter them quite a bit – but because software engineers have a tendency to refer to “race conditions” without ever saying what the term means, I’ve sat in a lot of very confusing conversations over the years that would have made a lot more bloody sense had I known the nomenclature or been in a position to “just ask” without being made to feel stupid.</blah></p>
<p>I think that’s likely to be true for a lot of self-taught programmers who never studied computer science, but instead had to learn to code in order to solve practical problems. The mere act of reading a concise definition of each thing has the effect of making my mental model more precise, and better aligned with the mental models that other people in the field adopt. It’s a helpful way to learn the culture and avoid getting caught out by the various <a href="https://en.wikipedia.org/wiki/Shibboleth">shibboleths</a> that are sadly pervasive the tech industry.<sup>2</sup></p>
<p>There are other examples of this sort of thing throughout the book, historical anecdotes and other tidbits that make it a little easier for an outsider to make sense of the culture of software engineering. As an example, this little passage on page 145 makes sense of something I’ve never understood:</p>
<blockquote class="blockquote">
<p>The coordinate systems for screens puts (0, 0) in the upper left corner instead of the lower left. X increases to the right as usual, but Y increases as we go down, rather than up [The book has a little picture here]. This convention is a holdover from the days of teletype terminals that printed lines on rolls of paper</p>
</blockquote>
<p>These historical asides are really valuable. It feels a little bit like one of those “Magician’s Secrets Revealed!” shows. Knowing the terminology, conventions, and history behind a thing does so much of the work in making it all feel a bit more coherent.</p>
<p>Anyway, let’s dive a little deeper, shall we?</p>
</section>
<section id="a-worked-example" class="level2">
<h2 class="anchored" data-anchor-id="a-worked-example">A worked example</h2>
<blockquote class="blockquote">
<p>My mum always liked Delia Smith <br> And I drank, drank, drank just to deal with my shit <br> I learned to tell little white lies <br> When I feel inadequate almost all the time <br> <br> I’d like to think I’m deep <br> I’d like to think I’m deep <br> I’d like to think I’m deep <br> But I just skim the pages, so I can fake my speech <br> &nbsp; &nbsp; - <a href="https://youtu.be/zHHjDihVwiQ">Sprints</a></p>
</blockquote>
<p>A little honesty when writing blog posts is important, I feel. When reading the book I did not, in fact, attempt all the exercises or work through all the code examples. I tinkered with a few of the examples, read some parts thoroughly, and skimmed other parts. That’s pretty representative of how I read technical books, really. I’ll pick a few parts that I want to understand properly and do a deep dive in those sections, and read the rest of it in a much more superficial way.</p>
<p>The parts that I did read fairly deeply are Chapters 7 and 8, which talk about how to <a href="https://en.wikipedia.org/wiki/Parsing">parse</a> a <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expression</a>, and how to write the code that does <a href="https://en.wikipedia.org/wiki/Pattern_matching">pattern matching</a> using them. Actually, if I’m super honest the part I spent most time with is Chapter 8, which shows you how to extract <a href="https://en.wikipedia.org/wiki/Lexical_analysis#Token">tokens</a> and a <a href="https://en.wikipedia.org/wiki/Parse_tree">parse tree</a> for a restricted form of regular expression syntax. For that chapter, I worked through the examples and translated (most of) the code in R. In the rest of the post I’ll show the code that I wrote, tie it back to the structure of Chapter 8 in the book, and at the end I’ll say a little about what I learned from this exercise.</p>
<p>The subset of regular expression syntax that the book uses for this chapter has the following rules:</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 56%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Token Kind</th>
<th style="text-align: left;">Meaning</th>
<th style="text-align: center;">Characters used</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Literal</td>
<td style="text-align: left;">A literal character</td>
<td style="text-align: center;"><code>a</code>, <code>b</code>, <code>c</code>, etc</td>
</tr>
<tr class="even">
<td style="text-align: left;">Start</td>
<td style="text-align: left;">Beginning of string</td>
<td style="text-align: center;"><code>^</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">End</td>
<td style="text-align: left;">End of string</td>
<td style="text-align: center;"><code>$</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">Any</td>
<td style="text-align: left;">Zero or more of the previous thing</td>
<td style="text-align: center;"><code>*</code></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Or</td>
<td style="text-align: left;">Either the thing before or the thing after</td>
<td style="text-align: center;"><code>|</code></td>
</tr>
<tr class="even">
<td style="text-align: left;">Group</td>
<td style="text-align: left;">Collection of tokens to treat as one thing</td>
<td style="text-align: center;"><code>(</code> and <code>)</code></td>
</tr>
</tbody>
</table>
<p>It’s a very small subset of the regular expression grammar available for pattern matching in R, JavaScript, and pretty much every language these days, but it’s a handy one. It’s certainly rich enough to make it an interesting exercise to write a parser. Not that it’s particularly important to write my own parser: the purpose of doing so is to wrap my head around the basics of how parsers work and nothing more. As Greg helpfully reminds us on page 99, if a format is commonly known there will be good tools already, and if you find yourself wanting to roll your own parser to interpret some new file format you just invented for something… there’s a good chance you shouldn’t do it. The world has enough file formats already.</p>
</section>
<section id="writing-the-tokenizer" class="level2">
<h2 class="anchored" data-anchor-id="writing-the-tokenizer">Writing the tokenizer</h2>
<p>If you want to write a regular expression parser, or any other parser for that matter, you actually have two distinct but interrelated problems to solve. Your data takes the form of an input string that you need to process. In English text, an input string might look like <code>"Danielle hates regular expressions"</code> but in a regular expression you’re more likely to have something that looks like <code>"^caa*t$</code>. To interpret these strings – in a purely <a href="https://en.wikipedia.org/wiki/Syntax">syntactic</a> sense, not a <a href="https://en.wikipedia.org/wiki/Semantics">semantic</a> one – you need to</p>
<ul>
<li><p>Carve the string up into a sequence of distinct (and possibly labelled) <strong>tokens</strong>. My English expression could be divided into a sequence of four tokens corresponding to the four words: <code>"Danielle"</code>, <code>"hates"</code>, <code>"regular"</code>, <code>"expressions"</code>. This <strong>tokenization</strong> process is not uniquely defined. For instance, I might choose to acknowledge that the <code>"-s"</code> ending in some words is in fact a distinct unit. While this is absolutely not the post to talk about <a href="https://en.wikipedia.org/wiki/Inflection">inflexional morphology</a> in linguistics, it’s important to recognise that in some contexts you might want to tokenize my sentence as <code>"Danielle"</code>, <code>"hate"</code>, <code>"-s"</code>, <code>"regular"</code>, <code>"expression"</code>, <code>"-s"</code>.</p></li>
<li><p>Organise (or <strong>parse</strong>) the tokens into a structured format that explicitly acknowledges the way they relate to each other grammatically. For my English sentence this parsing might be something like this <code>[Danielle] [[hates] [regular expressions]]</code>, where I’m using the square brackets to illustrate the organisation: <code>"regular expressions"</code> and <code>"Danielle"</code> are both <a href="https://en.wikipedia.org/wiki/Noun_phrase">noun phrases</a>, <code>[hates]</code> is a verb, and <code>[hates regular expressions]</code> is a <a href="https://en.wikipedia.org/wiki/Verb_phrase">verb phrase</a>.</p></li>
</ul>
<p>The difference between the two is visually apparent when you try to draw them. When you tokenize the input you end up with a list of tokens:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>Danielle
hates
regular
expressions</code></pre>
</div>
</div>
<p>After parsing this list of tokens, you end up with a tree. There’s lots of ways you could visualise this tree, but something like this is good enough for my purposes:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>[
  Danielle
]
[
  [
    hates
  ]
  [
    regular
    expressions
  ]
]</code></pre>
</div>
</div>
<p>I could probably take this a bit further and annotate each part of the tree the way that linguists like to do, but it’s not necessary to get the basic idea.</p>
<p>The key thing to realise is that these two problems aren’t independent. If you tokenize the string in a way that isn’t suited to your problem, you’re going to make life harder when you try to write the parser. As it happens, <em>Software Design by Example</em> gives you a very gentle example of how this happens, which I’ll get to in moment when I try to write some code that automatically parses regular expressions like <code>^caa*t$</code>.</p>
<section id="preliminaries" class="level3">
<h3 class="anchored" data-anchor-id="preliminaries">Preliminaries</h3>
<p>In the book, all the examples are – obviously!!! – written in JavaScript, and my code is going to be written in R. This matters somewhat since R and JavaScript are different languages with different assumptions about how you write code.<sup>3</sup> To make my life a little easier, I’m going to define some extremely informal R classes<sup>4</sup> that don’t actually do much. In my code, a “token” is just a list that has three fields: the <code>kind</code> of token referred to, the <code>loc</code> (location) of the token within the original string, and (optionally) a <code>value</code> that specifies the character (or characters) that represent the token in that string. Relatedly, the “token list” class is literally just a list:</p>
<div class="cell" data-file="token_class.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>token_class.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1">token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(kind, loc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> kind, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> loc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> value),</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token"</span></span>
<span id="cb3-5">  )</span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">token_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(...),</span>
<span id="cb3-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_list"</span></span>
<span id="cb3-12">  )</span>
<span id="cb3-13">}</span>
<span id="cb3-14"></span>
<span id="cb3-15">print.token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb3-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Token at "</span>,  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt; "</span>, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value)) {</span>
<span id="cb3-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value)</span>
<span id="cb3-19">  }</span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x))</span>
<span id="cb3-22">}</span>
<span id="cb3-23"></span>
<span id="cb3-24">print.token_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb3-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb3-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Empty token list&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-27">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb3-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(token <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x) {</span>
<span id="cb3-29">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(token)</span>
<span id="cb3-30">    }</span>
<span id="cb3-31">  }</span>
<span id="cb3-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x))</span>
<span id="cb3-33">}</span></code></pre></div>
</div>
</div>
<p>The reason I decided to write this code for this post is that it also defines <code>print()</code> methods for these objects that make the printed output a little prettier:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Noun"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Danielle"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Noun: Danielle</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token_list</span>(</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Noun"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Danielle"</span>),</span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verb"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hates"</span>)</span>
<span id="cb6-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Noun: Danielle
&lt;Token at 10&gt; Verb: hates</code></pre>
</div>
</div>
<p>Without the print methods, you’d see each token printed as a list, and the list of tokens printed as a list of lists. It’s not super-important, but it does help me stay sane as I write. But whatever, let’s move on and start writing a tokenizer for (very restricted!) regular expressions…</p>
</section>
<section id="version-1" class="level3">
<h3 class="anchored" data-anchor-id="version-1">Version 1</h3>
<p>A hallmark of good teaching – in my not-entirely-humble opinion – is when the instructor designs material in a way that gently encourages the learner to discover things on your own. Chapter 8 of <em>Software Design by Example</em> does this rather nicely at the beginning, by having the reader start out by writing a simple tokenizer that is later revealed to be “readable, efficient, and wrong”. At the risk of revealing the instructional magic that Greg is so terribly good at, I’ll explicitly state the flawed intuition that might lead you to write a tokenizer like this.</p>
<p>Suppose I were to think about my tokenizer by considering a regular expression like <code>"^(cat)|(dog)$"</code>. There’s a real trap you can fall into here, because this regular expression has natural language words, and you might be tempted to write a tokenizer that treats <code>"cat"</code> and <code>"dog"</code> as tokens. Or, to be slightly more precise, you might decide that to create tokens that allow “Literals” to contain multiple characters, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^(cat|dog)$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; GroupStart
&lt;Token at 3&gt; Literal: cat
&lt;Token at 6&gt; Or
&lt;Token at 7&gt; Literal: dog
&lt;Token at 10&gt; GroupEnd
&lt;Token at 11&gt; End</code></pre>
</div>
</div>
<p>Merging a sequence of literal characters into a single multi-character literal makes the output readable, and who doesn’t love it when the tokenizer informs you that you have a “Literal cat” in your string?</p>
<p>The book then walks you through the process of writing a <code>tokenize()</code> function that behaves exactly like this. Obviously, the original is in JavaScript, but here’s an R version:</p>
<div class="cell" data-file="tokenizer_1.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tokenizer_1.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb10-1">simple <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Any"</span>,</span>
<span id="cb10-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Or"</span>,</span>
<span id="cb10-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>,</span>
<span id="cb10-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupEnd"</span></span>
<span id="cb10-6">)</span>
<span id="cb10-7"></span>
<span id="cb10-8">tokenize <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(text) {</span>
<span id="cb10-9">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token_list</span>()</span>
<span id="cb10-10">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(text)) {</span>
<span id="cb10-12">    chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop =</span> i)</span>
<span id="cb10-13"></span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simple cases are always added as non-literal tokens</span></span>
<span id="cb10-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(simple)) {</span>
<span id="cb10-16">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(simple[[chr]], i)</span>
<span id="cb10-17">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-18"></span>
<span id="cb10-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the ^ character is non-literal if position is 1</span></span>
<span id="cb10-20">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb10-21">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start"</span>, i)</span>
<span id="cb10-22">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-23"></span>
<span id="cb10-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the $ character is non-literal if it's the last character</span></span>
<span id="cb10-25">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(text)) {</span>
<span id="cb10-26">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End"</span>, i)</span>
<span id="cb10-27">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-28"></span>
<span id="cb10-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># literals that follow a non-literal create a new token</span></span>
<span id="cb10-30">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> result[[n]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>){</span>
<span id="cb10-31">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>, i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> chr)</span>
<span id="cb10-32">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-33"></span>
<span id="cb10-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># literals that follow a literal are combined with it</span></span>
<span id="cb10-35">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb10-36">      result[[n]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(result[[n]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, chr)</span>
<span id="cb10-37">    }</span>
<span id="cb10-38">  }</span>
<span id="cb10-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb10-40">}</span></code></pre></div>
</div>
</div>
<p>I won’t recapitulate all the steps that go into writing code like this – read the book if you want to know things at this level of detail – but suffice it to say that if I were better at JavaScript I’d have found it very easy to follow.</p>
<p>The point that matters here is that the reader is being encouraged to consider what happens to you later if you tokenize the input this way. Merging a sequence of literal characters into a single multi-character literal makes the output readable, and <em>in this specific case</em> the token list is very convenient if I later wanted to write a regular expression matcher that builds on top of this tokenizer. Using the base R <code>grepl()</code> function, you can see which strings match <code>"^(cat|dog)$"</code> and which don’t:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^(cat|dog)$"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dag"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ca"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE FALSE</code></pre>
</div>
</div>
<p>If my tokenizer represents the literals in <code>^(cat|dog)$</code> as the two multicharacter literals <code>"cat"</code> and <code>"dog"</code> then – in this instance – it’s going to be easier for me to write a regex matcher that mirrors the behaviour of <code>grepl()</code>.</p>
<p>Very nice.</p>
<p>Unfortunately, once you start thinking about regular expressions more generally, there’s a big problem with this tokenizer. It’s trying to be clever, by grouping multiple literals together without considering how those literals will be used later on by the parser, and it ends up being too greedy sometimes. Consider the regular expression <code>"^caa*t$"</code>. This is a pattern that should match against <code>"cat"</code> and <code>"caaaaat"</code> but should not match <code>"caacaat"</code>, as illustrated below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"caaaaat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"caacaat"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE</code></pre>
</div>
</div>
<p>However, let’s look at the tokens produced by our <code>tokenizer()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; Literal: caa
&lt;Token at 5&gt; Any
&lt;Token at 6&gt; Literal: t
&lt;Token at 7&gt; End</code></pre>
</div>
</div>
<p>Yeah, we’re in big trouble here.</p>
<p>That’s the wrong way to tokenize this input: in this regular expression the <code>*</code> operator (i.e., the <code>Any</code> token in our token list) needs to be applied only to the preceding character, so it’s not correct to treat <code>"caa"</code> as a single literal string. To write a functioning parser on top of this tokenizer would be a nightmare, because the parser would need to inspect the internal contents of the tokens: in order to parse the <code>*</code> character (the <code>Any</code> token), it would need to grab the <code>Literal caa</code> token and split it into two parts, a prefix <code>"ca"</code> and a suffix <code>"a"</code>, because <code>*</code> applies only to the suffix.</p>
<p>What this is telling us is that we’ve chosen a poor tokenizing scheme. The book is quite gentle in leading the reader to this conclusion, but when you’re actually writing the code yourself you can’t avoid discovering it. If your parser has to break apart your tokens to organise the input, then really you should be rethinking the tokenizer.</p>
</section>
<section id="version-2" class="level3">
<h3 class="anchored" data-anchor-id="version-2">Version 2</h3>
<p>Okay so that doesn’t work. The second approach considered in the chapter simplifies the code a little and produces a token list where every literal character is treated as a distinct token. The code is only a minor modification of the previous version:</p>
<div class="cell" data-file="tokenizer_2.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>tokenizer_2.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb17-1">simple <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb17-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Any"</span>,</span>
<span id="cb17-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Or"</span>,</span>
<span id="cb17-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>,</span>
<span id="cb17-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupEnd"</span></span>
<span id="cb17-6">)</span>
<span id="cb17-7"></span>
<span id="cb17-8">tokenize <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(text) {</span>
<span id="cb17-9">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token_list</span>()</span>
<span id="cb17-10">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(text)) {</span>
<span id="cb17-12">    chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop =</span> i)</span>
<span id="cb17-13"></span>
<span id="cb17-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simple cases are always added as non-literal tokens</span></span>
<span id="cb17-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(simple)) {</span>
<span id="cb17-16">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(simple[[chr]], i)</span>
<span id="cb17-17">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-18"></span>
<span id="cb17-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the ^ character is non-literal if position is 1</span></span>
<span id="cb17-20">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb17-21">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start"</span>, i)</span>
<span id="cb17-22">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-23"></span>
<span id="cb17-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the $ character is non-literal if it's the last character</span></span>
<span id="cb17-25">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (chr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(text)) {</span>
<span id="cb17-26">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End"</span>, i)</span>
<span id="cb17-27">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-28"></span>
<span id="cb17-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># literals always create a new token</span></span>
<span id="cb17-30">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb17-31">      result[[n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>, i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> chr)</span>
<span id="cb17-32">      n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-33">    }</span>
<span id="cb17-34">  }</span>
<span id="cb17-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb17-36">}</span></code></pre></div>
</div>
</div>
<p>Here’s the sort of output we get from this version of the tokenizer:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; Literal: c
&lt;Token at 3&gt; Literal: a
&lt;Token at 4&gt; Literal: a
&lt;Token at 5&gt; Any
&lt;Token at 6&gt; Literal: t
&lt;Token at 7&gt; End</code></pre>
</div>
</div>
<p>This output is entirely correct, as long as our goal is <em>only</em> to extract and label the tokens in our regular expression. The output correctly labels each literal as a literal and assigns the appropriate label to the non-literals. What is very clear, though, when you look at the output from this version of <code>tokenize()</code> is that it is absolutely <em>not</em> a parser. We’ve lost the grouping structure that we had in our original version. The tokenizer has no way of expressing the idea that <code>"ca"</code> is a syntactically coherent unit in the expression <code>^caa*t$</code>, or that <code>"cat"</code> is similarly coherent within <code>^(cat|dog)$</code>. It’s a good tokenizer, but a bad parser.</p>
<p>That’s okay: it’s not meant to be a parser. The tokenizer does its job perfectly well, and importantly it provides output that a good parser can work with. It requires a little thought, but it’s going to work out okay because the tokenizer is reliable <em>as</em> a tokenizer. Each tool does one job and only that job: you don’t need your tokenizer to parse the syntax, and you don’t want your parser to mess around with the internal contents of the tokens.</p>
<p>Gosh… I wonder if that’s one of those software engineering principles?</p>
</section>
<section id="post-mortem" class="level3">
<h3 class="anchored" data-anchor-id="post-mortem">Post-mortem</h3>
<p>At this point any competent software engineer is probably screaming internally, because I have not written any unit tests for my code. This is terribly bad practice, and something I would never do when writing actual software.<sup>5</sup> Suffice it to say <em>Software Design by Example</em> is at great pains to emphasize the importance of unit tests, and if you were actually following the chapter step by step you’d see that Greg does in fact introduce tests as he develops this example. I’ve been lazy in this blog post because… well, it’s a blog post. It’s neither intended to be software nor a chapter in a book on software engineering.</p>
<p>Anyway… let’s return to the development of ideas in the chapter, yes?</p>
</section>
</section>
<section id="parsing-the-tokens" class="level2">
<h2 class="anchored" data-anchor-id="parsing-the-tokens">Parsing the tokens</h2>
<p>The second half of chapter 8 in <em>Software Design by Example</em> focuses on the parser, and again I’m not going to try to recapitulate all the logic that the book walks you through. It takes the reader through an intuitive process of thinking about how you want to write the parser, but the key thing I want to highlight is that when you’re reading the book you get a strong sense of why you want to write the parser in two parts: there’s a “forward pass” where the parser sweeps through the token list from first to last, constructing the parts of the parse tree that it can handle on the basis of what it has seen so far, and then a subsequent clean up phase where it sweeps back and fixes all the incomplete parts. When I came to implement it in R myself I made some small departures from the way Greg has done it in the book, but the essence is the same. What I’ll do here is present two versions of the parser, one that <em>only</em> does the forward pass (so you can see all the missing bits), and then a second version that does the clean up afterwards.</p>
<section id="preliminaries-1" class="level3">
<h3 class="anchored" data-anchor-id="preliminaries-1">Preliminaries</h3>
<p>As before, I’ll do some preliminary work that isn’t really essential for the purposes of the book, but I find helpful for writing this blog post. Specifically, I’ll define a <code>subtree()</code> function that provides a “subtree” class. All it does is capture the fundamental structure of a tree: each node is defined by a <code>parent</code> element, and that parent can have zero, one, or more <code>children</code>. This isn’t really necessary for our parser, but it does allow me to define a <code>print()</code> method that makes the parse trees in this post look a little prettier:</p>
<div class="cell" data-file="parse_class.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parse_class.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb20-1">subtree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(parent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()) {</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb20-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> parent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> children),</span>
<span id="cb20-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subtree"</span></span>
<span id="cb20-5">  )</span>
<span id="cb20-6">}</span>
<span id="cb20-7"></span>
<span id="cb20-8">print.subtree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb20-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb20-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Empty parse_tree&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-11">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb20-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent)</span>
<span id="cb20-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb20-14">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(child <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children) {</span>
<span id="cb20-15">        out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capture.output</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(child))</span>
<span id="cb20-16">        out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"    "</span>, out)</span>
<span id="cb20-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(out, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb20-18">      }</span>
<span id="cb20-19">    }</span>
<span id="cb20-20">  }</span>
<span id="cb20-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(x))</span>
<span id="cb20-22">}</span></code></pre></div>
</div>
</div>
<p>Whatevs. That’s not really the point of the book, and frankly if I were writing a book on software design<sup>6</sup> I would probably make the same choice that Greg has made: for the blog post I want pretty output because it’s supposed to be an easy read. For a book that is intended to help you think about software design? For that you actually want the reader to engage deeply with the “list of lists of lists of…” data structure that my print methods are glossing over.</p>
</section>
<section id="version-1-1" class="level3">
<h3 class="anchored" data-anchor-id="version-1-1">Version 1</h3>
<p>With that out of the way, let’s have a look at the code for a parser that only does the forward sweep. The key insight that the book walks you through is that there are three distinct types of action the parser takes at this step:</p>
<ul>
<li>There are kinds of token (<code>Literal</code>, <code>Start</code>, <code>End</code>, and <code>GroupStart</code>) that the parser can process simply by appending the token to the bottom of the tree the moment it encounters them.</li>
<li>There are other kinds of token (<code>GroupEnd</code> and <code>Any</code>) that require the parser to restructure the tree, but they rely only on the tokens seen so far, so the parser can reorganise the tree on the fly during this first pass</li>
<li>There is one annoying token (<code>Or</code>) that depends both on things the parser has already seen <em>and</em> on things that haven’t been observed yet as the parser sweeps forward. What we do here is a partial organisation: we process the bits we know about (e.g., the <code>a</code> on the left hand side of an <code>a|b</code> statement is known even when we’ve only read <code>a|</code> so far) but then leave a “Missing” placeholder token to express the fact that we know that the <code>Or</code> operator <code>|</code> has two children: we know <code>a</code>, but <code>b</code> will need to be filled in later.</li>
</ul>
<p>Here’s the R code, which supplies an <code>update_tree()</code> function that sequentially modifes the parse tree whenever new tokens arrive:<sup>7</sup></p>
<div class="cell" data-file="parser_1.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parser_1.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb21-1">list_reverse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb21-2">  x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb21-3">}</span>
<span id="cb21-4"></span>
<span id="cb21-5">update_tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree, token) {</span>
<span id="cb21-6"></span>
<span id="cb21-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For some kinds of token, we simply append them to the tree</span></span>
<span id="cb21-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>)) {</span>
<span id="cb21-9">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(token)</span>
<span id="cb21-10">  }</span>
<span id="cb21-11"></span>
<span id="cb21-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When GroupEnd is encountered, find the most recent GroupStart and</span></span>
<span id="cb21-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the tokens between them the children of a Group</span></span>
<span id="cb21-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupEnd"</span>) {</span>
<span id="cb21-15">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb21-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb21-17">      last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb21-18">      tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]</span>
<span id="cb21-19">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(last<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>) {</span>
<span id="cb21-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb21-21">      }</span>
<span id="cb21-22">      children[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> last</span>
<span id="cb21-23">    }</span>
<span id="cb21-24">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb21-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>, last<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loc),</span>
<span id="cb21-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_reverse</span>(children)</span>
<span id="cb21-27">    )</span>
<span id="cb21-28">  }</span>
<span id="cb21-29"></span>
<span id="cb21-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When Any is encountered, make the preceding token (or subtree)</span></span>
<span id="cb21-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the child of the Any token</span></span>
<span id="cb21-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Any"</span>) {</span>
<span id="cb21-33">    last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb21-34">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb21-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> token,</span>
<span id="cb21-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(last)</span>
<span id="cb21-37">    )</span>
<span id="cb21-38">  }</span>
<span id="cb21-39"></span>
<span id="cb21-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When Or is encountered, create a subtree with two children. The</span></span>
<span id="cb21-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first (or left) child is taken by moving it from the previous</span></span>
<span id="cb21-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># token/subtree in our list. The second child is tagged as "Missing"</span></span>
<span id="cb21-43">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and will be filled in later</span></span>
<span id="cb21-44">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Or"</span>) {</span>
<span id="cb21-45">    last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb21-46">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb21-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> token,</span>
<span id="cb21-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(last, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb21-49">    )</span>
<span id="cb21-50">  }</span>
<span id="cb21-51"></span>
<span id="cb21-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb21-53">}</span>
<span id="cb21-54"></span>
<span id="cb21-55">parse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(text) {</span>
<span id="cb21-56">  tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb21-57">  tokens <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(text)</span>
<span id="cb21-58">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(token <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tokens) {</span>
<span id="cb21-59">    tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_tree</span>(tree, token)</span>
<span id="cb21-60">  }</span>
<span id="cb21-61">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(tree) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_list"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># allows pretty printing</span></span>
<span id="cb21-62">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb21-63">}</span></code></pre></div>
</div>
</div>
<p>For expressions like <code>"^caa*t$</code> that don’t have a <code>|</code>, this version of the parser constructs a completed parse tree:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; Literal: c
&lt;Token at 3&gt; Literal: a
&lt;Token at 5&gt; Any
     &lt;Token at 4&gt; Literal: a
&lt;Token at 6&gt; Literal: t
&lt;Token at 7&gt; End</code></pre>
</div>
</div>
<p>Notice that the ordering of the tokens has changed: to represent the subexpression <code>a*</code>, the parser creates an <code>Any</code> token corresponding to the <code>*</code> character and ensures that the <code>Literal</code> <code>a</code> token is a child of the <code>Any</code> operator.</p>
<p>A similar thing happens where <code>GroupStart</code> and <code>GroupEnd</code> tokens are collapsed into a single <code>Group</code> token that has all tokens within the group as children:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(na)* hey yeah goodbye"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 5&gt; Any
     &lt;Token at 1&gt; Group
          &lt;Token at 2&gt; Literal: n
          &lt;Token at 3&gt; Literal: a
&lt;Token at 6&gt; Literal:  
&lt;Token at 7&gt; Literal: h
&lt;Token at 8&gt; Literal: e
&lt;Token at 9&gt; Literal: y
&lt;Token at 10&gt; Literal:  
&lt;Token at 11&gt; Literal: y
&lt;Token at 12&gt; Literal: e
&lt;Token at 13&gt; Literal: a
&lt;Token at 14&gt; Literal: h
&lt;Token at 15&gt; Literal:  
&lt;Token at 16&gt; Literal: g
&lt;Token at 17&gt; Literal: o
&lt;Token at 18&gt; Literal: o
&lt;Token at 19&gt; Literal: d
&lt;Token at 20&gt; Literal: b
&lt;Token at 21&gt; Literal: y
&lt;Token at 22&gt; Literal: e</code></pre>
</div>
</div>
<p>For expressions that contain an either/or operation, we end up with a parse tree that contains one or more <code>Missing</code> tokens. That’s my way of expressing the fact that the parser needs to come back and clean up afterwards:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(cat)|(dog)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 6&gt; Or
     &lt;Token at 1&gt; Group
          &lt;Token at 2&gt; Literal: c
          &lt;Token at 3&gt; Literal: a
          &lt;Token at 4&gt; Literal: t
     &lt;Token at 0&gt; Missing
&lt;Token at 7&gt; Group
     &lt;Token at 8&gt; Literal: d
     &lt;Token at 9&gt; Literal: o
     &lt;Token at 10&gt; Literal: g</code></pre>
</div>
</div>
<p>Notice that there are some kinds of regular expressions for which this clean-up might require us to dive deep into the tree to fix the incomplete parts:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab|((cd*)|ef)|g"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Literal: a
&lt;Token at 3&gt; Or
     &lt;Token at 2&gt; Literal: b
     &lt;Token at 0&gt; Missing
&lt;Token at 14&gt; Or
     &lt;Token at 4&gt; Group
          &lt;Token at 10&gt; Or
               &lt;Token at 5&gt; Group
                    &lt;Token at 6&gt; Literal: c
                    &lt;Token at 8&gt; Any
                         &lt;Token at 7&gt; Literal: d
               &lt;Token at 0&gt; Missing
          &lt;Token at 11&gt; Literal: e
          &lt;Token at 12&gt; Literal: f
     &lt;Token at 0&gt; Missing
&lt;Token at 15&gt; Literal: g</code></pre>
</div>
</div>
<p>Again, there’s a kind of principle here: each part of the tool has its own job to do. The forward pass does the parts that it can do, and delegates the unfinished work to the clean-up process. When reading the book, and especially when implementing it yourself, the learner is invited to think about the importance of carving up the software into sensible parts.</p>
<p>Seems like a thing worth knowing.</p>
</section>
<section id="version-2-1" class="level3">
<h3 class="anchored" data-anchor-id="version-2-1">Version 2</h3>
<p>At this point in the post I’m guessing that the reader is about ready to see the end product. The final version of the code adds a <code>compress_tree()</code> function that is called once the forward pass is complete. For simple trees all it really does is sweep up from bottom to top, but because there are regular expressions in which you can have <code>Or</code> tokens nested quite a long way into the parse tree it also sweeps up through the subtrees when they are encountered:</p>
<div class="cell" data-file="parser_2.R">
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>parser_2.R</strong></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb30-1">list_reverse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb30-2">  x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb30-3">}</span>
<span id="cb30-4"></span>
<span id="cb30-5">update_tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree, token) {</span>
<span id="cb30-6"></span>
<span id="cb30-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For some kinds of token, we simply append them to the tree</span></span>
<span id="cb30-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Literal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"End"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>)) {</span>
<span id="cb30-9">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(token)</span>
<span id="cb30-10">  }</span>
<span id="cb30-11"></span>
<span id="cb30-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When GroupEnd is encountered, find the most recent GroupStart and</span></span>
<span id="cb30-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make the tokens between them the children of a Group</span></span>
<span id="cb30-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupEnd"</span>) {</span>
<span id="cb30-15">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb30-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb30-17">      last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb30-18">      tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]</span>
<span id="cb30-19">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(last<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GroupStart"</span>) {</span>
<span id="cb30-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb30-21">      }</span>
<span id="cb30-22">      children[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> last</span>
<span id="cb30-23">    }</span>
<span id="cb30-24">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb30-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>, last<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loc),</span>
<span id="cb30-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_reverse</span>(children)</span>
<span id="cb30-27">    )</span>
<span id="cb30-28">  }</span>
<span id="cb30-29"></span>
<span id="cb30-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When Any is encountered, make the preceding token (or subtree)</span></span>
<span id="cb30-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the child of the Any token</span></span>
<span id="cb30-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Any"</span>) {</span>
<span id="cb30-33">    last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb30-34">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb30-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> token,</span>
<span id="cb30-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(last)</span>
<span id="cb30-37">    )</span>
<span id="cb30-38">  }</span>
<span id="cb30-39"></span>
<span id="cb30-40">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When Or is encountered, create a subtree with two children. The</span></span>
<span id="cb30-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first (or left) child is taken by moving it from the previous</span></span>
<span id="cb30-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># token/subtree in our list. The second child is tagged as "Missing"</span></span>
<span id="cb30-43">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and will be filled in later</span></span>
<span id="cb30-44">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (token<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Or"</span>) {</span>
<span id="cb30-45">    last <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]]</span>
<span id="cb30-46">    tree[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(</span>
<span id="cb30-47">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parent =</span> token,</span>
<span id="cb30-48">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">children =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(last, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subtree</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">token</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">kind =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">loc =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb30-49">    )</span>
<span id="cb30-50">  }</span>
<span id="cb30-51"></span>
<span id="cb30-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-53">}</span>
<span id="cb30-54"></span>
<span id="cb30-55">has_children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb30-56">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb30-57">}</span>
<span id="cb30-58"></span>
<span id="cb30-59">compress_or_skip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree, location) {</span>
<span id="cb30-60">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">has_children</span>(tree[[location <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])) {</span>
<span id="cb30-61">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree[[location <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children)</span>
<span id="cb30-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (tree[[location <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children[[n]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>kind <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing"</span>) {</span>
<span id="cb30-63">      tree[[location <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children[[n]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tree[[location]]</span>
<span id="cb30-64">      tree[[location]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb30-65">    }</span>
<span id="cb30-66">  }</span>
<span id="cb30-67">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-68">}</span>
<span id="cb30-69"></span>
<span id="cb30-70">compress_tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tree) {</span>
<span id="cb30-71">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb30-72">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-73">  }</span>
<span id="cb30-74"></span>
<span id="cb30-75">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compress branches of the top-level tree</span></span>
<span id="cb30-76">  loc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)</span>
<span id="cb30-77">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (loc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb30-78">    tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compress_or_skip</span>(tree, loc)</span>
<span id="cb30-79">    loc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> loc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb30-80">  }</span>
<span id="cb30-81"></span>
<span id="cb30-82">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursively compress branches of children subtrees</span></span>
<span id="cb30-83">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (loc <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tree)) {</span>
<span id="cb30-84">    tree[[loc]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compress_tree</span>(tree[[loc]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>children)</span>
<span id="cb30-85">  }</span>
<span id="cb30-86"></span>
<span id="cb30-87">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-88">}</span>
<span id="cb30-89"></span>
<span id="cb30-90">parse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(text) {</span>
<span id="cb30-91">  tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb30-92">  tokens <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tokenize</span>(text)</span>
<span id="cb30-93">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(token <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tokens) {</span>
<span id="cb30-94">    tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update_tree</span>(tree, token)</span>
<span id="cb30-95">  }</span>
<span id="cb30-96">  tree <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compress_tree</span>(tree)</span>
<span id="cb30-97">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(tree) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token_list"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># allows pretty printing</span></span>
<span id="cb30-98">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(tree)</span>
<span id="cb30-99">}</span></code></pre></div>
</div>
</div>
<p>For expressions that don’t have an <code>Or</code> token, the output is the same as before:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^caa*t$"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Start
&lt;Token at 2&gt; Literal: c
&lt;Token at 3&gt; Literal: a
&lt;Token at 5&gt; Any
     &lt;Token at 4&gt; Literal: a
&lt;Token at 6&gt; Literal: t
&lt;Token at 7&gt; End</code></pre>
</div>
</div>
<p>However, what we see in this version is that the parse tree for expressions like <code>"(cat)|(dog)"</code> now places the right hand side of the either/or expression (i.e., the <code>(dog)</code> group) in the appropriate place:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(cat)|(dog)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 6&gt; Or
     &lt;Token at 1&gt; Group
          &lt;Token at 2&gt; Literal: c
          &lt;Token at 3&gt; Literal: a
          &lt;Token at 4&gt; Literal: t
     &lt;Token at 7&gt; Group
          &lt;Token at 8&gt; Literal: d
          &lt;Token at 9&gt; Literal: o
          &lt;Token at 10&gt; Literal: g</code></pre>
</div>
</div>
<p>No more of those “Missing” tokens. And because the <code>compress_tree()</code> function is recursively applied to the subtrees, it can also handle uglier expressions like <code>"ab|((cd*)|ef)|g"</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab|((cd*)|ef)|g"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;Token at 1&gt; Literal: a
&lt;Token at 3&gt; Or
     &lt;Token at 2&gt; Literal: b
     &lt;Token at 14&gt; Or
          &lt;Token at 4&gt; Group
               &lt;Token at 10&gt; Or
                    &lt;Token at 5&gt; Group
                         &lt;Token at 6&gt; Literal: c
                         &lt;Token at 8&gt; Any
                              &lt;Token at 7&gt; Literal: d
                    &lt;Token at 11&gt; Literal: e
               &lt;Token at 12&gt; Literal: f
          &lt;Token at 15&gt; Literal: g</code></pre>
</div>
</div>
<p>Neat. I mean… the thing itself is ugly as sin, but the fact that an amateur like myself can spend a day or two working through the relevant chapters in the book and write code that can handle parse trees like these ones… yeah, that’s very neat indeed.</p>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final thoughts?</h2>
<p>Back when I was an academic, as opposed to whatever the hell it is I am in my middle aged unemployment era, there was this whole tradition of writing “critical” book reviews that would ostensibly count as scholarly output. This led to this weird thing where you’d read a book and enjoy it, but you’d feel this obligation to write a Proper Academic Review, and like most things in academia that have Prestige Points associated with them, these reviews would be extremely thorough, mind-meltingly boring, and pointlessly cruel. Because that’s what academia is designed to encourage.</p>
<p>Yeah nah. I’m too old for that shit, and I gave up tenure a lifetime<sup>8</sup> ago.</p>
<p>Having read most of the book at a superficial level and done a deep dive into the parts that I felt like diving into, I have to say I rather like <em>Software Design by Example</em>. It’s not written the way I would write a book: anyone who knows me understands that I will never choose to write a 200 page book when I could write a 600 page book instead. Greg Wilson doesn’t write like me: the book is brief, it covers a lot of topics concisely, and yet still manages to convey a lot of the “folk knowledge” and other cultural bits and pieces that actually matter in the wild. Honestly that’s an awfully impressive achievement. I quite enjoyed it.</p>
<p>Totally worth the time I spent reading it. Would recommend to others.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Something that you’d think I’d have been taught back when I was an academic and had to do it for a living. Universities, however, are utterly useless at this kind of thing. They tend to throw professors in the deep end with this expectation that someone who has made a career as a good researcher will automatically work out how to be a good teacher. Suffice it to say, this widespread practice has not been the best thing for higher education.↩︎</p></li>
<li id="fn2"><p>As an aside, this is hardly unique to the tech world. Academia is just as bad. Probably worse, actually.↩︎</p></li>
<li id="fn3"><p>Example: Greg’s code relies heavily on JavaScript <code>.push()</code> and <code>.pop()</code> methods that make it very easy to treat an array as a <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)">stack</a>. I’m going to work with R lists that don’t have these little niceties. It’s going to make some of my code later a little ugly, I’m afraid. Oh well.↩︎</p></li>
<li id="fn4"><p>This is not the place for me to talk about my love/hate relationship with the <a href="http://adv-r.had.co.nz/S3.html">S3 object-oriented programming system</a> in R. Suffice it to say, I have <em>feelings</em>. That’s enough for now.↩︎</p></li>
<li id="fn5"><p>Okay, I’ll be honest, I did have a set of informal tests that I wrote to accompany my code, even for this blog post: I was too lazy to bother writing a proper test suite, but the initial drafts of this blog post had a bunch of regular expressions that would be tokenized/parsed every time I rendered the draft, which let me check that the code I was writing was not “total batshit”. I do have <em>some</em> standards, at least when it comes to code. The same cannot be said of my <a href="https://youtu.be/5QML71sBu1E">taste in men</a>, but that’s a different story…↩︎</p></li>
<li id="fn6"><p>Yeah no that will never happen. If you’re waiting for me to attempt something like what Greg has done, then – to quote Paul Kelly and Kev Carmody – <a href="https://youtu.be/dAONlfoNVuY">you don’t stand the chance of a cinder in snow</a>. I know my limits.↩︎</p></li>
<li id="fn7"><p>This is analogous to the <code>handle()</code> JavaScript function that appears in the book. What can I say? I’m a perverse woman who likes to use her own names for things.↩︎</p></li>
<li id="fn8"><p>Two years, but that’s a lifetime in tranny-years. We age fast, you know.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{navarro2023,
  author = {Navarro, Danielle},
  title = {Software Design by Example},
  date = {2023-05-31},
  url = {https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-navarro2023" class="csl-entry quarto-appendix-citeas">
Navarro, Danielle. 2023. <span>“Software Design by Example.”</span> May
31, 2023. <a href="https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example">https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example</a>.
</div></div></section></div> ]]></description>
  <category>Software Design</category>
  <category>Javascript</category>
  <category>R</category>
  <category>Regular Expressions</category>
  <guid>https://blog.djnavarro.net/posts/2023-05-31_software-design-by-example/</guid>
  <pubDate>Tue, 30 May 2023 14:00:00 GMT</pubDate>
</item>
</channel>
</rss>
